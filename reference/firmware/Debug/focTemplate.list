
focTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001149c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  08011680  08011680  00012680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b60  08011b60  00013258  2**0
                  CONTENTS
  4 .ARM          00000008  08011b60  08011b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b68  08011b68  00013258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b68  08011b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011b6c  08011b6c  00012b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  08011b70  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  20000258  08011dc8  00013258  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a38  08011dc8  00013a38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013258  2**0
                  CONTENTS, READONLY
 12 .debug_info   000289aa  00000000  00000000  00013288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d58  00000000  00000000  0003bc32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002008  00000000  00000000  00041990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001862  00000000  00000000  00043998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028719  00000000  00000000  000451fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d582  00000000  00000000  0006d913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eefa1  00000000  00000000  0009ae95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00189e36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099f4  00000000  00000000  00189e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00193870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000258 	.word	0x20000258
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011664 	.word	0x08011664

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000025c 	.word	0x2000025c
 800021c:	08011664 	.word	0x08011664

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00c fdfa 	bl	800dc48 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00c fdf4 	bl	800dc48 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <MX_ADC1_Init+0x164>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <MX_ADC1_Init+0x164>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <MX_ADC1_Init+0x164>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <MX_ADC1_Init+0x164>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010cc:	f001 fdd2 	bl	8002c74 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fcb0 	bl	8001a3a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010e6:	f003 fefb 	bl	8004ee0 <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fca3 	bl	8001a3a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_ADC1_Init+0x168>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4821      	ldr	r0, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001114:	f002 f96a 	bl	80033ec <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fc8c 	bl	8001a3a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC1_Init+0x16c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001150:	2384      	movs	r3, #132	@ 0x84
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001164:	f003 f9dc 	bl	8004520 <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fc64 	bl	8001a3a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_ADC1_Init+0x170>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001182:	f003 f9cd 	bl	8004520 <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fc55 	bl	8001a3a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000274 	.word	0x20000274
 800119c:	2e300800 	.word	0x2e300800
 80011a0:	0c900008 	.word	0x0c900008
 80011a4:	32601000 	.word	0x32601000

080011a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b098      	sub	sp, #96	@ 0x60
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b2:	223c      	movs	r2, #60	@ 0x3c
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f00c fd46 	bl	800dc48 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2220      	movs	r2, #32
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00c fd40 	bl	800dc48 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011c8:	4b3f      	ldr	r3, [pc, #252]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011ca:	4a40      	ldr	r2, [pc, #256]	@ (80012cc <MX_ADC2_Init+0x124>)
 80011cc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011ce:	4b3e      	ldr	r3, [pc, #248]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011d6:	4b3c      	ldr	r3, [pc, #240]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011dc:	4b3a      	ldr	r3, [pc, #232]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011e2:	4b39      	ldr	r3, [pc, #228]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e8:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ee:	4b36      	ldr	r3, [pc, #216]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011f0:	2204      	movs	r2, #4
 80011f2:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011f4:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011fa:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001200:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001202:	2201      	movs	r2, #1
 8001204:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001206:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120e:	4b2e      	ldr	r3, [pc, #184]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001210:	2200      	movs	r2, #0
 8001212:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001214:	4b2c      	ldr	r3, [pc, #176]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001216:	2200      	movs	r2, #0
 8001218:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800121a:	4b2b      	ldr	r3, [pc, #172]	@ (80012c8 <MX_ADC2_Init+0x120>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001222:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001224:	2200      	movs	r2, #0
 8001226:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001228:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <MX_ADC2_Init+0x120>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001230:	4825      	ldr	r0, [pc, #148]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001232:	f001 fd1f 	bl	8002c74 <HAL_ADC_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC2_Init+0x98>
  {
    Error_Handler();
 800123c:	f000 fbfd 	bl	8001a3a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001240:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <MX_ADC2_Init+0x128>)
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001244:	2309      	movs	r3, #9
 8001246:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001248:	2301      	movs	r3, #1
 800124a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800124c:	237f      	movs	r3, #127	@ 0x7f
 800124e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001250:	2304      	movs	r3, #4
 8001252:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigInjected.InjectedOffset = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 800126e:	2384      	movs	r3, #132	@ 0x84
 8001270:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001272:	2380      	movs	r3, #128	@ 0x80
 8001274:	653b      	str	r3, [r7, #80]	@ 0x50
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800127c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001280:	4619      	mov	r1, r3
 8001282:	4811      	ldr	r0, [pc, #68]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001284:	f003 f94c 	bl	8004520 <HAL_ADCEx_InjectedConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 800128e:	f000 fbd4 	bl	8001a3a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <MX_ADC2_Init+0x12c>)
 8001294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001296:	2306      	movs	r3, #6
 8001298:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800129e:	237f      	movs	r3, #127	@ 0x7f
 80012a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a2:	2304      	movs	r3, #4
 80012a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4806      	ldr	r0, [pc, #24]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80012b0:	f002 f89c 	bl	80033ec <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC2_Init+0x116>
  {
    Error_Handler();
 80012ba:	f000 fbbe 	bl	8001a3a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	3760      	adds	r7, #96	@ 0x60
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200002e0 	.word	0x200002e0
 80012cc:	50000100 	.word	0x50000100
 80012d0:	0c900008 	.word	0x0c900008
 80012d4:	04300002 	.word	0x04300002

080012d8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b09e      	sub	sp, #120	@ 0x78
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	2244      	movs	r2, #68	@ 0x44
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f00c fca5 	bl	800dc48 <memset>
  if(adcHandle->Instance==ADC1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001306:	d15f      	bne.n	80013c8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001308:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800130c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800130e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001312:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	4618      	mov	r0, r3
 800131a:	f006 fb93 	bl	8007a44 <HAL_RCCEx_PeriphCLKConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001324:	f000 fb89 	bl	8001a3a <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001328:	4b4f      	ldr	r3, [pc, #316]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	4a4e      	ldr	r2, [pc, #312]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 8001330:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001332:	4b4d      	ldr	r3, [pc, #308]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10b      	bne.n	8001352 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800133a:	4b4c      	ldr	r3, [pc, #304]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a4b      	ldr	r2, [pc, #300]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001340:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b49      	ldr	r3, [pc, #292]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b46      	ldr	r3, [pc, #280]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4a45      	ldr	r2, [pc, #276]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135e:	4b43      	ldr	r3, [pc, #268]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4b40      	ldr	r3, [pc, #256]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a3f      	ldr	r2, [pc, #252]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b3d      	ldr	r3, [pc, #244]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001382:	2304      	movs	r3, #4
 8001384:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	2303      	movs	r3, #3
 8001388:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001398:	f005 fabe 	bl	8006918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 800139c:	f241 0302 	movw	r3, #4098	@ 0x1002
 80013a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013ae:	4619      	mov	r1, r3
 80013b0:	482f      	ldr	r0, [pc, #188]	@ (8001470 <HAL_ADC_MspInit+0x198>)
 80013b2:	f005 fab1 	bl	8006918 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2012      	movs	r0, #18
 80013bc:	f004 f937 	bl	800562e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013c0:	2012      	movs	r0, #18
 80013c2:	f004 f94e 	bl	8005662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80013c6:	e04a      	b.n	800145e <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a29      	ldr	r2, [pc, #164]	@ (8001474 <HAL_ADC_MspInit+0x19c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d145      	bne.n	800145e <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013d8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	4618      	mov	r0, r3
 80013e4:	f006 fb2e 	bl	8007a44 <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80013ee:	f000 fb24 	bl	8001a3a <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d10b      	bne.n	800141c <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001408:	4a18      	ldr	r2, [pc, #96]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800140a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800140e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001410:	4b16      	ldr	r3, [pc, #88]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001414:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001420:	4a12      	ldr	r2, [pc, #72]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001428:	4b10      	ldr	r3, [pc, #64]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8001434:	2341      	movs	r3, #65	@ 0x41
 8001436:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001438:	2303      	movs	r3, #3
 800143a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144a:	f005 fa65 	bl	8006918 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2012      	movs	r0, #18
 8001454:	f004 f8eb 	bl	800562e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001458:	2012      	movs	r0, #18
 800145a:	f004 f902 	bl	8005662 <HAL_NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3778      	adds	r7, #120	@ 0x78
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000034c 	.word	0x2000034c
 800146c:	40021000 	.word	0x40021000
 8001470:	48000400 	.word	0x48000400
 8001474:	50000100 	.word	0x50000100

08001478 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_COMP1_Init+0x44>)
 800147e:	4a10      	ldr	r2, [pc, #64]	@ (80014c0 <MX_COMP1_Init+0x48>)
 8001480:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001488:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_COMP1_Init+0x44>)
 800148c:	2240      	movs	r2, #64	@ 0x40
 800148e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001490:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <MX_COMP1_Init+0x44>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_COMP1_Init+0x44>)
 80014a4:	2211      	movs	r2, #17
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_COMP1_Init+0x44>)
 80014aa:	f003 fe7b 	bl	80051a4 <HAL_COMP_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 80014b4:	f000 fac1 	bl	8001a3a <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000350 	.word	0x20000350
 80014c0:	40010200 	.word	0x40010200

080014c4 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a13      	ldr	r2, [pc, #76]	@ (8001530 <HAL_COMP_MspInit+0x6c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d11f      	bne.n	8001526 <HAL_COMP_MspInit+0x62>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014fe:	2302      	movs	r3, #2
 8001500:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001502:	2303      	movs	r3, #3
 8001504:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	4619      	mov	r1, r3
 8001510:	4809      	ldr	r0, [pc, #36]	@ (8001538 <HAL_COMP_MspInit+0x74>)
 8001512:	f005 fa01 	bl	8006918 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2040      	movs	r0, #64	@ 0x40
 800151c:	f004 f887 	bl	800562e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8001520:	2040      	movs	r0, #64	@ 0x40
 8001522:	f004 f89e 	bl	8005662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40010200 	.word	0x40010200
 8001534:	40021000 	.word	0x40021000
 8001538:	48000400 	.word	0x48000400

0800153c <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2230      	movs	r2, #48	@ 0x30
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f00c fb7d 	bl	800dc48 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800154e:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001550:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <MX_DAC3_Init+0x70>)
 8001552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001554:	4814      	ldr	r0, [pc, #80]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001556:	f004 f89e 	bl	8005696 <HAL_DAC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001560:	f000 fa6b 	bl	8001a3a <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001564:	2302      	movs	r3, #2
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800157c:	2302      	movs	r3, #2
 800157e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001590:	f004 f93e 	bl	8005810 <HAL_DAC_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800159a:	f000 fa4e 	bl	8001a3a <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3730      	adds	r7, #48	@ 0x30
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000374 	.word	0x20000374
 80015ac:	50001000 	.word	0x50001000

080015b0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <HAL_DAC_MspInit+0x38>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10b      	bne.n	80015da <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	50001000 	.word	0x50001000
 80015ec:	40021000 	.word	0x40021000

080015f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015f6:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <MX_DMA_Init+0x50>)
 80015f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fa:	4a11      	ldr	r2, [pc, #68]	@ (8001640 <MX_DMA_Init+0x50>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6493      	str	r3, [r2, #72]	@ 0x48
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <MX_DMA_Init+0x50>)
 8001604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800160e:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <MX_DMA_Init+0x50>)
 8001610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001612:	4a0b      	ldr	r2, [pc, #44]	@ (8001640 <MX_DMA_Init+0x50>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6493      	str	r3, [r2, #72]	@ 0x48
 800161a:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <MX_DMA_Init+0x50>)
 800161c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	200b      	movs	r0, #11
 800162c:	f003 ffff 	bl	800562e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001630:	200b      	movs	r0, #11
 8001632:	f004 f816 	bl	8005662 <HAL_NVIC_EnableIRQ>

}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000

08001644 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001648:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800164a:	4a20      	ldr	r2, [pc, #128]	@ (80016cc <MX_FDCAN1_Init+0x88>)
 800164c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800164e:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001650:	2200      	movs	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001654:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800165a:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001660:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001662:	2200      	movs	r2, #0
 8001664:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001666:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001668:	2200      	movs	r2, #0
 800166a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800166c:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800166e:	2200      	movs	r2, #0
 8001670:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001674:	2214      	movs	r2, #20
 8001676:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800167a:	2201      	movs	r2, #1
 800167c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 800167e:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001680:	220a      	movs	r2, #10
 8001682:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8001684:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001686:	2205      	movs	r2, #5
 8001688:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800168c:	2214      	movs	r2, #20
 800168e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001690:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001692:	2201      	movs	r2, #1
 8001694:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001698:	220a      	movs	r2, #10
 800169a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800169e:	2205      	movs	r2, #5
 80016a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 80016a8:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80016b4:	4804      	ldr	r0, [pc, #16]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 80016b6:	f004 fcdd 	bl	8006074 <HAL_FDCAN_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80016c0:	f000 f9bb 	bl	8001a3a <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000388 	.word	0x20000388
 80016cc:	40006400 	.word	0x40006400

080016d0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b09a      	sub	sp, #104	@ 0x68
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	2244      	movs	r2, #68	@ 0x44
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f00c faa9 	bl	800dc48 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a24      	ldr	r2, [pc, #144]	@ (800178c <HAL_FDCAN_MspInit+0xbc>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d141      	bne.n	8001784 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001704:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001706:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800170a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4618      	mov	r0, r3
 8001712:	f006 f997 	bl	8007a44 <HAL_RCCEx_PeriphCLKConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800171c:	f000 f98d 	bl	8001a3a <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001724:	4a1a      	ldr	r2, [pc, #104]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 8001726:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800172a:	6593      	str	r3, [r2, #88]	@ 0x58
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173c:	4a14      	ldr	r2, [pc, #80]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001750:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001754:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001762:	2309      	movs	r3, #9
 8001764:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800176a:	4619      	mov	r1, r3
 800176c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001770:	f005 f8d2 	bl	8006918 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	2015      	movs	r0, #21
 800177a:	f003 ff58 	bl	800562e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800177e:	2015      	movs	r0, #21
 8001780:	f003 ff6f 	bl	8005662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001784:	bf00      	nop
 8001786:	3768      	adds	r7, #104	@ 0x68
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40006400 	.word	0x40006400
 8001790:	40021000 	.word	0x40021000

08001794 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	4b3d      	ldr	r3, [pc, #244]	@ (80018a0 <MX_GPIO_Init+0x10c>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	4a3c      	ldr	r2, [pc, #240]	@ (80018a0 <MX_GPIO_Init+0x10c>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b6:	4b3a      	ldr	r3, [pc, #232]	@ (80018a0 <MX_GPIO_Init+0x10c>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c2:	4b37      	ldr	r3, [pc, #220]	@ (80018a0 <MX_GPIO_Init+0x10c>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	4a36      	ldr	r2, [pc, #216]	@ (80018a0 <MX_GPIO_Init+0x10c>)
 80017c8:	f043 0320 	orr.w	r3, r3, #32
 80017cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ce:	4b34      	ldr	r3, [pc, #208]	@ (80018a0 <MX_GPIO_Init+0x10c>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b31      	ldr	r3, [pc, #196]	@ (80018a0 <MX_GPIO_Init+0x10c>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	4a30      	ldr	r2, [pc, #192]	@ (80018a0 <MX_GPIO_Init+0x10c>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e6:	4b2e      	ldr	r3, [pc, #184]	@ (80018a0 <MX_GPIO_Init+0x10c>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	4b2b      	ldr	r3, [pc, #172]	@ (80018a0 <MX_GPIO_Init+0x10c>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	4a2a      	ldr	r2, [pc, #168]	@ (80018a0 <MX_GPIO_Init+0x10c>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fe:	4b28      	ldr	r3, [pc, #160]	@ (80018a0 <MX_GPIO_Init+0x10c>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	2110      	movs	r1, #16
 800180e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001812:	f005 fa03 	bl	8006c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2150      	movs	r1, #80	@ 0x50
 800181a:	4822      	ldr	r0, [pc, #136]	@ (80018a4 <MX_GPIO_Init+0x110>)
 800181c:	f005 f9fe 	bl	8006c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001826:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182a:	f005 f9f7 	bl	8006c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 800182e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001834:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4817      	ldr	r0, [pc, #92]	@ (80018a4 <MX_GPIO_Init+0x110>)
 8001846:	f005 f867 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 800184a:	f248 0310 	movw	r3, #32784	@ 0x8010
 800184e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001858:	2303      	movs	r3, #3
 800185a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001866:	f005 f857 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 800186a:	2350      	movs	r3, #80	@ 0x50
 800186c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186e:	2301      	movs	r3, #1
 8001870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	4808      	ldr	r0, [pc, #32]	@ (80018a4 <MX_GPIO_Init+0x110>)
 8001882:	f005 f849 	bl	8006918 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	2028      	movs	r0, #40	@ 0x28
 800188c:	f003 fecf 	bl	800562e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001890:	2028      	movs	r0, #40	@ 0x28
 8001892:	f003 fee6 	bl	8005662 <HAL_NVIC_EnableIRQ>

}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	@ 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000
 80018a4:	48000800 	.word	0x48000800

080018a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ac:	f000 ff1f 	bl	80026ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b0:	f000 f87a 	bl	80019a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b4:	f7ff ff6e 	bl	8001794 <MX_GPIO_Init>
  MX_DMA_Init();
 80018b8:	f7ff fe9a 	bl	80015f0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80018bc:	f000 fe14 	bl	80024e8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80018c0:	f7ff fbb8 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 80018c4:	f7ff fc70 	bl	80011a8 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 80018c8:	f000 f8be 	bl	8001a48 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 80018cc:	f000 f8e4 	bl	8001a98 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 80018d0:	f000 f90a 	bl	8001ae8 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 80018d4:	f000 fbcc 	bl	8002070 <MX_TIM1_Init>
  MX_COMP1_Init();
 80018d8:	f7ff fdce 	bl	8001478 <MX_COMP1_Init>
  MX_DAC3_Init();
 80018dc:	f7ff fe2e 	bl	800153c <MX_DAC3_Init>
  MX_FDCAN1_Init();
 80018e0:	f7ff feb0 	bl	8001644 <MX_FDCAN1_Init>
  MX_TIM4_Init();
 80018e4:	f000 fcb8 	bl	8002258 <MX_TIM4_Init>
  MX_SPI1_Init();
 80018e8:	f000 f99c 	bl	8001c24 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_OPAMP_Start(&hopamp1);
 80018ec:	4824      	ldr	r0, [pc, #144]	@ (8001980 <main+0xd8>)
 80018ee:	f005 fa95 	bl	8006e1c <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 80018f2:	4824      	ldr	r0, [pc, #144]	@ (8001984 <main+0xdc>)
 80018f4:	f005 fa92 	bl	8006e1c <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 80018f8:	4823      	ldr	r0, [pc, #140]	@ (8001988 <main+0xe0>)
 80018fa:	f005 fa8f 	bl	8006e1c <HAL_OPAMP_Start>
  // HAL_UART_Receive_IT(&huart3, (uint8_t *)&aRxBuffer, 1);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80018fe:	217f      	movs	r1, #127	@ 0x7f
 8001900:	4822      	ldr	r0, [pc, #136]	@ (800198c <main+0xe4>)
 8001902:	f002 fbed 	bl	80040e0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001906:	217f      	movs	r1, #127	@ 0x7f
 8001908:	4821      	ldr	r0, [pc, #132]	@ (8001990 <main+0xe8>)
 800190a:	f002 fbe9 	bl	80040e0 <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 800190e:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <main+0xe4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2220      	movs	r2, #32
 8001914:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 8001916:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <main+0xe4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2204      	movs	r2, #4
 800191c:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 800191e:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <main+0xe8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2220      	movs	r2, #32
 8001924:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001926:	4819      	ldr	r0, [pc, #100]	@ (800198c <main+0xe4>)
 8001928:	f002 fcec 	bl	8004304 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 800192c:	4818      	ldr	r0, [pc, #96]	@ (8001990 <main+0xe8>)
 800192e:	f002 fc39 	bl	80041a4 <HAL_ADCEx_InjectedStart>
  TIM1->ARR = 8000 - 1;
 8001932:	4b18      	ldr	r3, [pc, #96]	@ (8001994 <main+0xec>)
 8001934:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001938:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->CCR4 = 8000 - 2;
 800193a:	4b16      	ldr	r3, [pc, #88]	@ (8001994 <main+0xec>)
 800193c:	f641 723e 	movw	r2, #7998	@ 0x1f3e
 8001940:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_Base_Start(&htim1);
 8001942:	4815      	ldr	r0, [pc, #84]	@ (8001998 <main+0xf0>)
 8001944:	f006 ff06 	bl	8008754 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001948:	210c      	movs	r1, #12
 800194a:	4813      	ldr	r0, [pc, #76]	@ (8001998 <main+0xf0>)
 800194c:	f006 ffc6 	bl	80088dc <HAL_TIM_PWM_Start>
  appInit();
 8001950:	f00a f8ce 	bl	800baf0 <appInit>
  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 3000);
 8001954:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	480f      	ldr	r0, [pc, #60]	@ (800199c <main+0xf4>)
 800195e:	f003 ff29 	bl	80057b4 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
 8001962:	2100      	movs	r1, #0
 8001964:	480d      	ldr	r0, [pc, #52]	@ (800199c <main+0xf4>)
 8001966:	f003 feb9 	bl	80056dc <HAL_DAC_Start>
  //  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
  HAL_COMP_Start(&hcomp1);
 800196a:	480d      	ldr	r0, [pc, #52]	@ (80019a0 <main+0xf8>)
 800196c:	f003 fcf6 	bl	800535c <HAL_COMP_Start>
  HAL_TIMEx_HallSensor_Start_IT(&htim4);
 8001970:	480c      	ldr	r0, [pc, #48]	@ (80019a4 <main+0xfc>)
 8001972:	f008 fa43 	bl	8009dfc <HAL_TIMEx_HallSensor_Start_IT>
  FDCAN_Config();
 8001976:	f00a fe95 	bl	800c6a4 <FDCAN_Config>
    //    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
    //    HAL_Delay(10);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 800197a:	f00a fe0b 	bl	800c594 <userMain>
 800197e:	e7fc      	b.n	800197a <main+0xd2>
 8001980:	200003ec 	.word	0x200003ec
 8001984:	20000428 	.word	0x20000428
 8001988:	20000464 	.word	0x20000464
 800198c:	20000274 	.word	0x20000274
 8001990:	200002e0 	.word	0x200002e0
 8001994:	40012c00 	.word	0x40012c00
 8001998:	20000508 	.word	0x20000508
 800199c:	20000374 	.word	0x20000374
 80019a0:	20000350 	.word	0x20000350
 80019a4:	20000554 	.word	0x20000554

080019a8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b094      	sub	sp, #80	@ 0x50
 80019ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ae:	f107 0318 	add.w	r3, r7, #24
 80019b2:	2238      	movs	r2, #56	@ 0x38
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f00c f946 	bl	800dc48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80019ca:	2000      	movs	r0, #0
 80019cc:	f005 fa58 	bl	8006e80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019d0:	2301      	movs	r3, #1
 80019d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019d8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019da:	2302      	movs	r3, #2
 80019dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019de:	2303      	movs	r3, #3
 80019e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80019e2:	2303      	movs	r3, #3
 80019e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80019e6:	2328      	movs	r3, #40	@ 0x28
 80019e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019ea:	2302      	movs	r3, #2
 80019ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019ee:	2302      	movs	r3, #2
 80019f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019f2:	2302      	movs	r3, #2
 80019f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f6:	f107 0318 	add.w	r3, r7, #24
 80019fa:	4618      	mov	r0, r3
 80019fc:	f005 faf4 	bl	8006fe8 <HAL_RCC_OscConfig>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001a06:	f000 f818 	bl	8001a3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a0a:	230f      	movs	r3, #15
 8001a0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	2104      	movs	r1, #4
 8001a22:	4618      	mov	r0, r3
 8001a24:	f005 fdf2 	bl	800760c <HAL_RCC_ClockConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001a2e:	f000 f804 	bl	8001a3a <Error_Handler>
  }
}
 8001a32:	bf00      	nop
 8001a34:	3750      	adds	r7, #80	@ 0x50
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3e:	b672      	cpsid	i
}
 8001a40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a42:	bf00      	nop
 8001a44:	e7fd      	b.n	8001a42 <Error_Handler+0x8>
	...

08001a48 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001a4c:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <MX_OPAMP1_Init+0x48>)
 8001a4e:	4a11      	ldr	r2, [pc, #68]	@ (8001a94 <MX_OPAMP1_Init+0x4c>)
 8001a50:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001a52:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <MX_OPAMP1_Init+0x48>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 8001a58:	4b0d      	ldr	r3, [pc, #52]	@ (8001a90 <MX_OPAMP1_Init+0x48>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <MX_OPAMP1_Init+0x48>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <MX_OPAMP1_Init+0x48>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <MX_OPAMP1_Init+0x48>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001a70:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <MX_OPAMP1_Init+0x48>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <MX_OPAMP1_Init+0x48>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001a7c:	4804      	ldr	r0, [pc, #16]	@ (8001a90 <MX_OPAMP1_Init+0x48>)
 8001a7e:	f005 f8fd 	bl	8006c7c <HAL_OPAMP_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_OPAMP1_Init+0x44>
  {
    Error_Handler();
 8001a88:	f7ff ffd7 	bl	8001a3a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200003ec 	.word	0x200003ec
 8001a94:	40010300 	.word	0x40010300

08001a98 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001a9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <MX_OPAMP2_Init+0x48>)
 8001a9e:	4a11      	ldr	r2, [pc, #68]	@ (8001ae4 <MX_OPAMP2_Init+0x4c>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <MX_OPAMP2_Init+0x48>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_STANDALONE_MODE;
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <MX_OPAMP2_Init+0x48>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001aae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <MX_OPAMP2_Init+0x48>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <MX_OPAMP2_Init+0x48>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <MX_OPAMP2_Init+0x48>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	@ (8001ae0 <MX_OPAMP2_Init+0x48>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <MX_OPAMP2_Init+0x48>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001acc:	4804      	ldr	r0, [pc, #16]	@ (8001ae0 <MX_OPAMP2_Init+0x48>)
 8001ace:	f005 f8d5 	bl	8006c7c <HAL_OPAMP_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_OPAMP2_Init+0x44>
  {
    Error_Handler();
 8001ad8:	f7ff ffaf 	bl	8001a3a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000428 	.word	0x20000428
 8001ae4:	40010304 	.word	0x40010304

08001ae8 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001aec:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <MX_OPAMP3_Init+0x48>)
 8001aee:	4a11      	ldr	r2, [pc, #68]	@ (8001b34 <MX_OPAMP3_Init+0x4c>)
 8001af0:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001af2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <MX_OPAMP3_Init+0x48>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_STANDALONE_MODE;
 8001af8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <MX_OPAMP3_Init+0x48>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  hopamp3.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001afe:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <MX_OPAMP3_Init+0x48>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001b04:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <MX_OPAMP3_Init+0x48>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <MX_OPAMP3_Init+0x48>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001b10:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <MX_OPAMP3_Init+0x48>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <MX_OPAMP3_Init+0x48>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001b1c:	4804      	ldr	r0, [pc, #16]	@ (8001b30 <MX_OPAMP3_Init+0x48>)
 8001b1e:	f005 f8ad 	bl	8006c7c <HAL_OPAMP_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_OPAMP3_Init+0x44>
  {
    Error_Handler();
 8001b28:	f7ff ff87 	bl	8001a3a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000464 	.word	0x20000464
 8001b34:	40010308 	.word	0x40010308

08001b38 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	@ 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a2e      	ldr	r2, [pc, #184]	@ (8001c10 <HAL_OPAMP_MspInit+0xd8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d119      	bne.n	8001b8e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b66:	4b2b      	ldr	r3, [pc, #172]	@ (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b72:	230e      	movs	r3, #14
 8001b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b76:	2303      	movs	r3, #3
 8001b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b88:	f004 fec6 	bl	8006918 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8001b8c:	e03b      	b.n	8001c06 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a21      	ldr	r2, [pc, #132]	@ (8001c18 <HAL_OPAMP_MspInit+0xe0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d119      	bne.n	8001bcc <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bb0:	23e0      	movs	r3, #224	@ 0xe0
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc6:	f004 fea7 	bl	8006918 <HAL_GPIO_Init>
}
 8001bca:	e01c      	b.n	8001c06 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <HAL_OPAMP_MspInit+0xe4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d117      	bne.n	8001c06 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bda:	4a0e      	ldr	r2, [pc, #56]	@ (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <HAL_OPAMP_MspInit+0xdc>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001bee:	2307      	movs	r3, #7
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4807      	ldr	r0, [pc, #28]	@ (8001c20 <HAL_OPAMP_MspInit+0xe8>)
 8001c02:	f004 fe89 	bl	8006918 <HAL_GPIO_Init>
}
 8001c06:	bf00      	nop
 8001c08:	3728      	adds	r7, #40	@ 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40010300 	.word	0x40010300
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40010304 	.word	0x40010304
 8001c1c:	40010308 	.word	0x40010308
 8001c20:	48000400 	.word	0x48000400

08001c24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	@ (8001c98 <MX_SPI1_Init+0x74>)
 8001c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001c9c <MX_SPI1_Init+0x78>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c98 <MX_SPI1_Init+0x74>)
 8001c30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c36:	4b18      	ldr	r3, [pc, #96]	@ (8001c98 <MX_SPI1_Init+0x74>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001c3c:	4b16      	ldr	r3, [pc, #88]	@ (8001c98 <MX_SPI1_Init+0x74>)
 8001c3e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001c42:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c44:	4b14      	ldr	r3, [pc, #80]	@ (8001c98 <MX_SPI1_Init+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c4a:	4b13      	ldr	r3, [pc, #76]	@ (8001c98 <MX_SPI1_Init+0x74>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <MX_SPI1_Init+0x74>)
 8001c52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c56:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <MX_SPI1_Init+0x74>)
 8001c5a:	2218      	movs	r2, #24
 8001c5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <MX_SPI1_Init+0x74>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <MX_SPI1_Init+0x74>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <MX_SPI1_Init+0x74>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c70:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <MX_SPI1_Init+0x74>)
 8001c72:	2207      	movs	r2, #7
 8001c74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <MX_SPI1_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <MX_SPI1_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	@ (8001c98 <MX_SPI1_Init+0x74>)
 8001c84:	f006 f8ce 	bl	8007e24 <HAL_SPI_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c8e:	f7ff fed4 	bl	8001a3a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200004a0 	.word	0x200004a0
 8001c9c:	40013000 	.word	0x40013000

08001ca0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	@ 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a17      	ldr	r2, [pc, #92]	@ (8001d1c <HAL_SPI_MspInit+0x7c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d127      	bne.n	8001d12 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cc2:	4b17      	ldr	r3, [pc, #92]	@ (8001d20 <HAL_SPI_MspInit+0x80>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc6:	4a16      	ldr	r2, [pc, #88]	@ (8001d20 <HAL_SPI_MspInit+0x80>)
 8001cc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ccc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cce:	4b14      	ldr	r3, [pc, #80]	@ (8001d20 <HAL_SPI_MspInit+0x80>)
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <HAL_SPI_MspInit+0x80>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	4a10      	ldr	r2, [pc, #64]	@ (8001d20 <HAL_SPI_MspInit+0x80>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d20 <HAL_SPI_MspInit+0x80>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001cf2:	2338      	movs	r3, #56	@ 0x38
 8001cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d02:	2305      	movs	r3, #5
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4805      	ldr	r0, [pc, #20]	@ (8001d24 <HAL_SPI_MspInit+0x84>)
 8001d0e:	f004 fe03 	bl	8006918 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	@ 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40013000 	.word	0x40013000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	48000400 	.word	0x48000400

08001d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <HAL_MspInit+0x44>)
 8001d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d32:	4a0e      	ldr	r2, [pc, #56]	@ (8001d6c <HAL_MspInit+0x44>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <HAL_MspInit+0x44>)
 8001d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <HAL_MspInit+0x44>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4a:	4a08      	ldr	r2, [pc, #32]	@ (8001d6c <HAL_MspInit+0x44>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d50:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d52:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_MspInit+0x44>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d5e:	f005 f933 	bl	8006fc8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000

08001d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <NMI_Handler+0x4>

08001d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <MemManage_Handler+0x4>

08001d88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc6:	f000 fce5 	bl	8002794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <DMA1_Channel1_IRQHandler+0x10>)
 8001dd6:	f004 f83b 	bl	8005e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000634 	.word	0x20000634

08001de4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001de8:	4803      	ldr	r0, [pc, #12]	@ (8001df8 <ADC1_2_IRQHandler+0x14>)
 8001dea:	f001 f8c7 	bl	8002f7c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001dee:	4803      	ldr	r0, [pc, #12]	@ (8001dfc <ADC1_2_IRQHandler+0x18>)
 8001df0:	f001 f8c4 	bl	8002f7c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000274 	.word	0x20000274
 8001dfc:	200002e0 	.word	0x200002e0

08001e00 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001e04:	4805      	ldr	r0, [pc, #20]	@ (8001e1c <FDCAN1_IT0_IRQHandler+0x1c>)
 8001e06:	f004 fb97 	bl	8006538 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
	HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,RxData);
 8001e0a:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <FDCAN1_IT0_IRQHandler+0x20>)
 8001e0c:	4a05      	ldr	r2, [pc, #20]	@ (8001e24 <FDCAN1_IT0_IRQHandler+0x24>)
 8001e0e:	2140      	movs	r1, #64	@ 0x40
 8001e10:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <FDCAN1_IT0_IRQHandler+0x1c>)
 8001e12:	f004 fa89 	bl	8006328 <HAL_FDCAN_GetRxMessage>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000388 	.word	0x20000388
 8001e20:	200008c8 	.word	0x200008c8
 8001e24:	200008a0 	.word	0x200008a0

08001e28 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e2c:	4802      	ldr	r0, [pc, #8]	@ (8001e38 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001e2e:	f006 feeb 	bl	8008c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000508 	.word	0x20000508

08001e3c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e40:	4802      	ldr	r0, [pc, #8]	@ (8001e4c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e42:	f006 fee1 	bl	8008c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000508 	.word	0x20000508

08001e50 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e54:	4802      	ldr	r0, [pc, #8]	@ (8001e60 <TIM1_CC_IRQHandler+0x10>)
 8001e56:	f006 fed7 	bl	8008c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000508 	.word	0x20000508

08001e64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e68:	4802      	ldr	r0, [pc, #8]	@ (8001e74 <TIM4_IRQHandler+0x10>)
 8001e6a:	f006 fecd 	bl	8008c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000554 	.word	0x20000554

08001e78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e7c:	4802      	ldr	r0, [pc, #8]	@ (8001e88 <USART3_IRQHandler+0x10>)
 8001e7e:	f008 fc8f 	bl	800a7a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200005a0 	.word	0x200005a0

08001e8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8001e90:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001e94:	f004 feda 	bl	8006c4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
 8001e98:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001e9c:	f004 fed6 	bl	8006c4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button3_Pin);
 8001ea0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ea4:	f004 fed2 	bl	8006c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001eb0:	4802      	ldr	r0, [pc, #8]	@ (8001ebc <COMP1_2_3_IRQHandler+0x10>)
 8001eb2:	f003 fa9b 	bl	80053ec <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000350 	.word	0x20000350

08001ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return 1;
 8001ec4:	2301      	movs	r3, #1
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_kill>:

int _kill(int pid, int sig)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eda:	f00b ff07 	bl	800dcec <__errno>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2216      	movs	r2, #22
 8001ee2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_exit>:

void _exit (int status)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ffe7 	bl	8001ed0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f02:	bf00      	nop
 8001f04:	e7fd      	b.n	8001f02 <_exit+0x12>

08001f06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	e00a      	b.n	8001f2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f18:	f3af 8000 	nop.w
 8001f1c:	4601      	mov	r1, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	60ba      	str	r2, [r7, #8]
 8001f24:	b2ca      	uxtb	r2, r1
 8001f26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	dbf0      	blt.n	8001f18 <_read+0x12>
  }

  return len;
 8001f36:	687b      	ldr	r3, [r7, #4]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e009      	b.n	8001f66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	60ba      	str	r2, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3301      	adds	r3, #1
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	dbf1      	blt.n	8001f52 <_write+0x12>
  }
  return len;
 8001f6e:	687b      	ldr	r3, [r7, #4]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_close>:

int _close(int file)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa0:	605a      	str	r2, [r3, #4]
  return 0;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_isatty>:

int _isatty(int file)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fb8:	2301      	movs	r3, #1
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe8:	4a14      	ldr	r2, [pc, #80]	@ (800203c <_sbrk+0x5c>)
 8001fea:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <_sbrk+0x60>)
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff4:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <_sbrk+0x64>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <_sbrk+0x64>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	@ (8002048 <_sbrk+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002002:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	429a      	cmp	r2, r3
 800200e:	d207      	bcs.n	8002020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002010:	f00b fe6c 	bl	800dcec <__errno>
 8002014:	4603      	mov	r3, r0
 8002016:	220c      	movs	r2, #12
 8002018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
 800201e:	e009      	b.n	8002034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002020:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <_sbrk+0x64>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002026:	4b07      	ldr	r3, [pc, #28]	@ (8002044 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	4a05      	ldr	r2, [pc, #20]	@ (8002044 <_sbrk+0x64>)
 8002030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002032:	68fb      	ldr	r3, [r7, #12]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20008000 	.word	0x20008000
 8002040:	00000400 	.word	0x00000400
 8002044:	20000504 	.word	0x20000504
 8002048:	20000a38 	.word	0x20000a38

0800204c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002050:	4b06      	ldr	r3, [pc, #24]	@ (800206c <SystemInit+0x20>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002056:	4a05      	ldr	r2, [pc, #20]	@ (800206c <SystemInit+0x20>)
 8002058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800205c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b09e      	sub	sp, #120	@ 0x78
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002076:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002084:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002090:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800209c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
 80020ac:	615a      	str	r2, [r3, #20]
 80020ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020b0:	463b      	mov	r3, r7
 80020b2:	2234      	movs	r2, #52	@ 0x34
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f00b fdc6 	bl	800dc48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020bc:	4b64      	ldr	r3, [pc, #400]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 80020be:	4a65      	ldr	r2, [pc, #404]	@ (8002254 <MX_TIM1_Init+0x1e4>)
 80020c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 80020c2:	4b63      	ldr	r3, [pc, #396]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80020c8:	4b61      	ldr	r3, [pc, #388]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 80020ca:	2220      	movs	r2, #32
 80020cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 80020ce:	4b60      	ldr	r3, [pc, #384]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 80020d0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80020d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80020d6:	4b5e      	ldr	r3, [pc, #376]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 80020d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80020de:	4b5c      	ldr	r3, [pc, #368]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e4:	4b5a      	ldr	r3, [pc, #360]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020ea:	4859      	ldr	r0, [pc, #356]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 80020ec:	f006 fada 	bl	80086a4 <HAL_TIM_Base_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80020f6:	f7ff fca0 	bl	8001a3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002100:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002104:	4619      	mov	r1, r3
 8002106:	4852      	ldr	r0, [pc, #328]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 8002108:	f006 ffe2 	bl	80090d0 <HAL_TIM_ConfigClockSource>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002112:	f7ff fc92 	bl	8001a3a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002116:	484e      	ldr	r0, [pc, #312]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 8002118:	f006 fb7e 	bl	8008818 <HAL_TIM_PWM_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8002122:	f7ff fc8a 	bl	8001a3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002126:	2370      	movs	r3, #112	@ 0x70
 8002128:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002132:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002136:	4619      	mov	r1, r3
 8002138:	4845      	ldr	r0, [pc, #276]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 800213a:	f008 f801 	bl	800a140 <HAL_TIMEx_MasterConfigSynchronization>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8002144:	f7ff fc79 	bl	8001a3a <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8002148:	2302      	movs	r3, #2
 800214a:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800214c:	2301      	movs	r3, #1
 800214e:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002150:	2300      	movs	r3, #0
 8002152:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002154:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002158:	461a      	mov	r2, r3
 800215a:	2101      	movs	r1, #1
 800215c:	483c      	ldr	r0, [pc, #240]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 800215e:	f008 f8fd 	bl	800a35c <HAL_TIMEx_ConfigBreakInput>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002168:	f7ff fc67 	bl	8001a3a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800216c:	2360      	movs	r3, #96	@ 0x60
 800216e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002174:	2300      	movs	r3, #0
 8002176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002178:	2300      	movs	r3, #0
 800217a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002188:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800218c:	2200      	movs	r2, #0
 800218e:	4619      	mov	r1, r3
 8002190:	482f      	ldr	r0, [pc, #188]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 8002192:	f006 fe89 	bl	8008ea8 <HAL_TIM_PWM_ConfigChannel>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800219c:	f7ff fc4d 	bl	8001a3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021a4:	2204      	movs	r2, #4
 80021a6:	4619      	mov	r1, r3
 80021a8:	4829      	ldr	r0, [pc, #164]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 80021aa:	f006 fe7d 	bl	8008ea8 <HAL_TIM_PWM_ConfigChannel>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80021b4:	f7ff fc41 	bl	8001a3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021bc:	2208      	movs	r2, #8
 80021be:	4619      	mov	r1, r3
 80021c0:	4823      	ldr	r0, [pc, #140]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 80021c2:	f006 fe71 	bl	8008ea8 <HAL_TIM_PWM_ConfigChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 80021cc:	f7ff fc35 	bl	8001a3a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80021d0:	2370      	movs	r3, #112	@ 0x70
 80021d2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 7998;
 80021d4:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 80021d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021de:	220c      	movs	r2, #12
 80021e0:	4619      	mov	r1, r3
 80021e2:	481b      	ldr	r0, [pc, #108]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 80021e4:	f006 fe60 	bl	8008ea8 <HAL_TIM_PWM_ConfigChannel>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 80021ee:	f7ff fc24 	bl	8001a3a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 120;
 80021fe:	2378      	movs	r3, #120	@ 0x78
 8002200:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002202:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002206:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002208:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800220c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 2;
 800220e:	2302      	movs	r3, #2
 8002210:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800221a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800221e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002224:	2300      	movs	r3, #0
 8002226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800222c:	463b      	mov	r3, r7
 800222e:	4619      	mov	r1, r3
 8002230:	4807      	ldr	r0, [pc, #28]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 8002232:	f008 f807 	bl	800a244 <HAL_TIMEx_ConfigBreakDeadTime>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM1_Init+0x1d0>
  {
    Error_Handler();
 800223c:	f7ff fbfd 	bl	8001a3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002240:	4803      	ldr	r0, [pc, #12]	@ (8002250 <MX_TIM1_Init+0x1e0>)
 8002242:	f000 f8e9 	bl	8002418 <HAL_TIM_MspPostInit>

}
 8002246:	bf00      	nop
 8002248:	3778      	adds	r7, #120	@ 0x78
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000508 	.word	0x20000508
 8002254:	40012c00 	.word	0x40012c00

08002258 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08c      	sub	sp, #48	@ 0x30
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800225e:	f107 0320 	add.w	r3, r7, #32
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 800226c:	f107 0310 	add.w	r3, r7, #16
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002284:	4b26      	ldr	r3, [pc, #152]	@ (8002320 <MX_TIM4_Init+0xc8>)
 8002286:	4a27      	ldr	r2, [pc, #156]	@ (8002324 <MX_TIM4_Init+0xcc>)
 8002288:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800228a:	4b25      	ldr	r3, [pc, #148]	@ (8002320 <MX_TIM4_Init+0xc8>)
 800228c:	220f      	movs	r2, #15
 800228e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002290:	4b23      	ldr	r3, [pc, #140]	@ (8002320 <MX_TIM4_Init+0xc8>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002296:	4b22      	ldr	r3, [pc, #136]	@ (8002320 <MX_TIM4_Init+0xc8>)
 8002298:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800229c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800229e:	4b20      	ldr	r3, [pc, #128]	@ (8002320 <MX_TIM4_Init+0xc8>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002320 <MX_TIM4_Init+0xc8>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022aa:	481d      	ldr	r0, [pc, #116]	@ (8002320 <MX_TIM4_Init+0xc8>)
 80022ac:	f006 f9fa 	bl	80086a4 <HAL_TIM_Base_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80022b6:	f7ff fbc0 	bl	8001a3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022be:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022c0:	f107 0320 	add.w	r3, r7, #32
 80022c4:	4619      	mov	r1, r3
 80022c6:	4816      	ldr	r0, [pc, #88]	@ (8002320 <MX_TIM4_Init+0xc8>)
 80022c8:	f006 ff02 	bl	80090d0 <HAL_TIM_ConfigClockSource>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80022d2:	f7ff fbb2 	bl	8001a3a <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 10;
 80022de:	230a      	movs	r3, #10
 80022e0:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 5;
 80022e2:	2305      	movs	r3, #5
 80022e4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 80022e6:	f107 0310 	add.w	r3, r7, #16
 80022ea:	4619      	mov	r1, r3
 80022ec:	480c      	ldr	r0, [pc, #48]	@ (8002320 <MX_TIM4_Init+0xc8>)
 80022ee:	f007 fccc 	bl	8009c8a <HAL_TIMEx_HallSensor_Init>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 80022f8:	f7ff fb9f 	bl	8001a3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80022fc:	2350      	movs	r3, #80	@ 0x50
 80022fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	4619      	mov	r1, r3
 8002308:	4805      	ldr	r0, [pc, #20]	@ (8002320 <MX_TIM4_Init+0xc8>)
 800230a:	f007 ff19 	bl	800a140 <HAL_TIMEx_MasterConfigSynchronization>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8002314:	f7ff fb91 	bl	8001a3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	3730      	adds	r7, #48	@ 0x30
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000554 	.word	0x20000554
 8002324:	40000800 	.word	0x40000800

08002328 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	@ 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a30      	ldr	r2, [pc, #192]	@ (8002408 <HAL_TIM_Base_MspInit+0xe0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d124      	bne.n	8002394 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800234a:	4b30      	ldr	r3, [pc, #192]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 800234c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800234e:	4a2f      	ldr	r2, [pc, #188]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 8002350:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002354:	6613      	str	r3, [r2, #96]	@ 0x60
 8002356:	4b2d      	ldr	r3, [pc, #180]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 8002358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2100      	movs	r1, #0
 8002366:	2018      	movs	r0, #24
 8002368:	f003 f961 	bl	800562e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800236c:	2018      	movs	r0, #24
 800236e:	f003 f978 	bl	8005662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2100      	movs	r1, #0
 8002376:	2019      	movs	r0, #25
 8002378:	f003 f959 	bl	800562e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800237c:	2019      	movs	r0, #25
 800237e:	f003 f970 	bl	8005662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002382:	2200      	movs	r2, #0
 8002384:	2100      	movs	r1, #0
 8002386:	201b      	movs	r0, #27
 8002388:	f003 f951 	bl	800562e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800238c:	201b      	movs	r0, #27
 800238e:	f003 f968 	bl	8005662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002392:	e035      	b.n	8002400 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM4)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1d      	ldr	r2, [pc, #116]	@ (8002410 <HAL_TIM_Base_MspInit+0xe8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d130      	bne.n	8002400 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800239e:	4b1b      	ldr	r3, [pc, #108]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a2:	4a1a      	ldr	r2, [pc, #104]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80023aa:	4b18      	ldr	r3, [pc, #96]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b6:	4b15      	ldr	r3, [pc, #84]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ba:	4a14      	ldr	r2, [pc, #80]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 80023bc:	f043 0302 	orr.w	r3, r3, #2
 80023c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c2:	4b12      	ldr	r3, [pc, #72]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80023ce:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80023d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d4:	2302      	movs	r3, #2
 80023d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023dc:	2300      	movs	r3, #0
 80023de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023e0:	2302      	movs	r3, #2
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4619      	mov	r1, r3
 80023ea:	480a      	ldr	r0, [pc, #40]	@ (8002414 <HAL_TIM_Base_MspInit+0xec>)
 80023ec:	f004 fa94 	bl	8006918 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023f0:	2200      	movs	r2, #0
 80023f2:	2100      	movs	r1, #0
 80023f4:	201e      	movs	r0, #30
 80023f6:	f003 f91a 	bl	800562e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023fa:	201e      	movs	r0, #30
 80023fc:	f003 f931 	bl	8005662 <HAL_NVIC_EnableIRQ>
}
 8002400:	bf00      	nop
 8002402:	3728      	adds	r7, #40	@ 0x28
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40012c00 	.word	0x40012c00
 800240c:	40021000 	.word	0x40021000
 8002410:	40000800 	.word	0x40000800
 8002414:	48000400 	.word	0x48000400

08002418 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	@ 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a29      	ldr	r2, [pc, #164]	@ (80024dc <HAL_TIM_MspPostInit+0xc4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d14b      	bne.n	80024d2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243a:	4b29      	ldr	r3, [pc, #164]	@ (80024e0 <HAL_TIM_MspPostInit+0xc8>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243e:	4a28      	ldr	r2, [pc, #160]	@ (80024e0 <HAL_TIM_MspPostInit+0xc8>)
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002446:	4b26      	ldr	r3, [pc, #152]	@ (80024e0 <HAL_TIM_MspPostInit+0xc8>)
 8002448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002452:	4b23      	ldr	r3, [pc, #140]	@ (80024e0 <HAL_TIM_MspPostInit+0xc8>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002456:	4a22      	ldr	r2, [pc, #136]	@ (80024e0 <HAL_TIM_MspPostInit+0xc8>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800245e:	4b20      	ldr	r3, [pc, #128]	@ (80024e0 <HAL_TIM_MspPostInit+0xc8>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800246a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800246e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800247c:	2306      	movs	r3, #6
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	4817      	ldr	r0, [pc, #92]	@ (80024e4 <HAL_TIM_MspPostInit+0xcc>)
 8002488:	f004 fa46 	bl	8006918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800248c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800249e:	2304      	movs	r3, #4
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	480e      	ldr	r0, [pc, #56]	@ (80024e4 <HAL_TIM_MspPostInit+0xcc>)
 80024aa:	f004 fa35 	bl	8006918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80024ae:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80024b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80024c0:	2306      	movs	r3, #6
 80024c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024ce:	f004 fa23 	bl	8006918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024d2:	bf00      	nop
 80024d4:	3728      	adds	r7, #40	@ 0x28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40021000 	.word	0x40021000
 80024e4:	48000400 	.word	0x48000400

080024e8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024ec:	4b22      	ldr	r3, [pc, #136]	@ (8002578 <MX_USART3_UART_Init+0x90>)
 80024ee:	4a23      	ldr	r2, [pc, #140]	@ (800257c <MX_USART3_UART_Init+0x94>)
 80024f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80024f2:	4b21      	ldr	r3, [pc, #132]	@ (8002578 <MX_USART3_UART_Init+0x90>)
 80024f4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80024f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002578 <MX_USART3_UART_Init+0x90>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002500:	4b1d      	ldr	r3, [pc, #116]	@ (8002578 <MX_USART3_UART_Init+0x90>)
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002506:	4b1c      	ldr	r3, [pc, #112]	@ (8002578 <MX_USART3_UART_Init+0x90>)
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800250c:	4b1a      	ldr	r3, [pc, #104]	@ (8002578 <MX_USART3_UART_Init+0x90>)
 800250e:	220c      	movs	r2, #12
 8002510:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002512:	4b19      	ldr	r3, [pc, #100]	@ (8002578 <MX_USART3_UART_Init+0x90>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002518:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <MX_USART3_UART_Init+0x90>)
 800251a:	2200      	movs	r2, #0
 800251c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800251e:	4b16      	ldr	r3, [pc, #88]	@ (8002578 <MX_USART3_UART_Init+0x90>)
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002524:	4b14      	ldr	r3, [pc, #80]	@ (8002578 <MX_USART3_UART_Init+0x90>)
 8002526:	2200      	movs	r2, #0
 8002528:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800252a:	4b13      	ldr	r3, [pc, #76]	@ (8002578 <MX_USART3_UART_Init+0x90>)
 800252c:	2200      	movs	r2, #0
 800252e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002530:	4811      	ldr	r0, [pc, #68]	@ (8002578 <MX_USART3_UART_Init+0x90>)
 8002532:	f008 f856 	bl	800a5e2 <HAL_UART_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800253c:	f7ff fa7d 	bl	8001a3a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002540:	2100      	movs	r1, #0
 8002542:	480d      	ldr	r0, [pc, #52]	@ (8002578 <MX_USART3_UART_Init+0x90>)
 8002544:	f009 fa09 	bl	800b95a <HAL_UARTEx_SetTxFifoThreshold>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800254e:	f7ff fa74 	bl	8001a3a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002552:	2100      	movs	r1, #0
 8002554:	4808      	ldr	r0, [pc, #32]	@ (8002578 <MX_USART3_UART_Init+0x90>)
 8002556:	f009 fa3e 	bl	800b9d6 <HAL_UARTEx_SetRxFifoThreshold>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002560:	f7ff fa6b 	bl	8001a3a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002564:	4804      	ldr	r0, [pc, #16]	@ (8002578 <MX_USART3_UART_Init+0x90>)
 8002566:	f009 f9bf 	bl	800b8e8 <HAL_UARTEx_DisableFifoMode>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002570:	f7ff fa63 	bl	8001a3a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}
 8002578:	200005a0 	.word	0x200005a0
 800257c:	40004800 	.word	0x40004800

08002580 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b09a      	sub	sp, #104	@ 0x68
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002598:	f107 0310 	add.w	r3, r7, #16
 800259c:	2244      	movs	r2, #68	@ 0x44
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f00b fb51 	bl	800dc48 <memset>
  if(uartHandle->Instance==USART3)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a37      	ldr	r2, [pc, #220]	@ (8002688 <HAL_UART_MspInit+0x108>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d167      	bne.n	8002680 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025b0:	2304      	movs	r3, #4
 80025b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025b8:	f107 0310 	add.w	r3, r7, #16
 80025bc:	4618      	mov	r0, r3
 80025be:	f005 fa41 	bl	8007a44 <HAL_RCCEx_PeriphCLKConfig>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025c8:	f7ff fa37 	bl	8001a3a <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025cc:	4b2f      	ldr	r3, [pc, #188]	@ (800268c <HAL_UART_MspInit+0x10c>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d0:	4a2e      	ldr	r2, [pc, #184]	@ (800268c <HAL_UART_MspInit+0x10c>)
 80025d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80025d8:	4b2c      	ldr	r3, [pc, #176]	@ (800268c <HAL_UART_MspInit+0x10c>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e4:	4b29      	ldr	r3, [pc, #164]	@ (800268c <HAL_UART_MspInit+0x10c>)
 80025e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e8:	4a28      	ldr	r2, [pc, #160]	@ (800268c <HAL_UART_MspInit+0x10c>)
 80025ea:	f043 0302 	orr.w	r3, r3, #2
 80025ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025f0:	4b26      	ldr	r3, [pc, #152]	@ (800268c <HAL_UART_MspInit+0x10c>)
 80025f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025fc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002600:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800260e:	2307      	movs	r3, #7
 8002610:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002612:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002616:	4619      	mov	r1, r3
 8002618:	481d      	ldr	r0, [pc, #116]	@ (8002690 <HAL_UART_MspInit+0x110>)
 800261a:	f004 f97d 	bl	8006918 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 800261e:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <HAL_UART_MspInit+0x114>)
 8002620:	4a1d      	ldr	r2, [pc, #116]	@ (8002698 <HAL_UART_MspInit+0x118>)
 8002622:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002624:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <HAL_UART_MspInit+0x114>)
 8002626:	221d      	movs	r2, #29
 8002628:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800262a:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <HAL_UART_MspInit+0x114>)
 800262c:	2210      	movs	r2, #16
 800262e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002630:	4b18      	ldr	r3, [pc, #96]	@ (8002694 <HAL_UART_MspInit+0x114>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002636:	4b17      	ldr	r3, [pc, #92]	@ (8002694 <HAL_UART_MspInit+0x114>)
 8002638:	2280      	movs	r2, #128	@ 0x80
 800263a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800263c:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <HAL_UART_MspInit+0x114>)
 800263e:	2200      	movs	r2, #0
 8002640:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002642:	4b14      	ldr	r3, [pc, #80]	@ (8002694 <HAL_UART_MspInit+0x114>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002648:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <HAL_UART_MspInit+0x114>)
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800264e:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <HAL_UART_MspInit+0x114>)
 8002650:	2200      	movs	r2, #0
 8002652:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002654:	480f      	ldr	r0, [pc, #60]	@ (8002694 <HAL_UART_MspInit+0x114>)
 8002656:	f003 fa93 	bl	8005b80 <HAL_DMA_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8002660:	f7ff f9eb 	bl	8001a3a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a0b      	ldr	r2, [pc, #44]	@ (8002694 <HAL_UART_MspInit+0x114>)
 8002668:	67da      	str	r2, [r3, #124]	@ 0x7c
 800266a:	4a0a      	ldr	r2, [pc, #40]	@ (8002694 <HAL_UART_MspInit+0x114>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	2100      	movs	r1, #0
 8002674:	2027      	movs	r0, #39	@ 0x27
 8002676:	f002 ffda 	bl	800562e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800267a:	2027      	movs	r0, #39	@ 0x27
 800267c:	f002 fff1 	bl	8005662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002680:	bf00      	nop
 8002682:	3768      	adds	r7, #104	@ 0x68
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40004800 	.word	0x40004800
 800268c:	40021000 	.word	0x40021000
 8002690:	48000400 	.word	0x48000400
 8002694:	20000634 	.word	0x20000634
 8002698:	40020008 	.word	0x40020008

0800269c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800269c:	480d      	ldr	r0, [pc, #52]	@ (80026d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800269e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80026a0:	f7ff fcd4 	bl	800204c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a4:	480c      	ldr	r0, [pc, #48]	@ (80026d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80026a6:	490d      	ldr	r1, [pc, #52]	@ (80026dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80026a8:	4a0d      	ldr	r2, [pc, #52]	@ (80026e0 <LoopForever+0xe>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80026ac:	e002      	b.n	80026b4 <LoopCopyDataInit>

080026ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b2:	3304      	adds	r3, #4

080026b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b8:	d3f9      	bcc.n	80026ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ba:	4a0a      	ldr	r2, [pc, #40]	@ (80026e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026bc:	4c0a      	ldr	r4, [pc, #40]	@ (80026e8 <LoopForever+0x16>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c0:	e001      	b.n	80026c6 <LoopFillZerobss>

080026c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c4:	3204      	adds	r2, #4

080026c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c8:	d3fb      	bcc.n	80026c2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80026ca:	f00b fb15 	bl	800dcf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026ce:	f7ff f8eb 	bl	80018a8 <main>

080026d2 <LoopForever>:

LoopForever:
    b LoopForever
 80026d2:	e7fe      	b.n	80026d2 <LoopForever>
  ldr   r0, =_estack
 80026d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80026d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026dc:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 80026e0:	08011b70 	.word	0x08011b70
  ldr r2, =_sbss
 80026e4:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80026e8:	20000a38 	.word	0x20000a38

080026ec <COMP4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026ec:	e7fe      	b.n	80026ec <COMP4_IRQHandler>

080026ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f8:	2003      	movs	r0, #3
 80026fa:	f002 ff8d 	bl	8005618 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026fe:	200f      	movs	r0, #15
 8002700:	f000 f80e 	bl	8002720 <HAL_InitTick>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	71fb      	strb	r3, [r7, #7]
 800270e:	e001      	b.n	8002714 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002710:	f7ff fb0a 	bl	8001d28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002714:	79fb      	ldrb	r3, [r7, #7]

}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800272c:	4b16      	ldr	r3, [pc, #88]	@ (8002788 <HAL_InitTick+0x68>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d022      	beq.n	800277a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002734:	4b15      	ldr	r3, [pc, #84]	@ (800278c <HAL_InitTick+0x6c>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b13      	ldr	r3, [pc, #76]	@ (8002788 <HAL_InitTick+0x68>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002740:	fbb1 f3f3 	udiv	r3, r1, r3
 8002744:	fbb2 f3f3 	udiv	r3, r2, r3
 8002748:	4618      	mov	r0, r3
 800274a:	f002 ff98 	bl	800567e <HAL_SYSTICK_Config>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10f      	bne.n	8002774 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b0f      	cmp	r3, #15
 8002758:	d809      	bhi.n	800276e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800275a:	2200      	movs	r2, #0
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	f04f 30ff 	mov.w	r0, #4294967295
 8002762:	f002 ff64 	bl	800562e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002766:	4a0a      	ldr	r2, [pc, #40]	@ (8002790 <HAL_InitTick+0x70>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	e007      	b.n	800277e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
 8002772:	e004      	b.n	800277e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e001      	b.n	800277e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800277e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000008 	.word	0x20000008
 800278c:	20000000 	.word	0x20000000
 8002790:	20000004 	.word	0x20000004

08002794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_IncTick+0x1c>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <HAL_IncTick+0x20>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4413      	add	r3, r2
 80027a2:	4a03      	ldr	r2, [pc, #12]	@ (80027b0 <HAL_IncTick+0x1c>)
 80027a4:	6013      	str	r3, [r2, #0]
}
 80027a6:	bf00      	nop
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	20000694 	.word	0x20000694
 80027b4:	20000008 	.word	0x20000008

080027b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return uwTick;
 80027bc:	4b03      	ldr	r3, [pc, #12]	@ (80027cc <HAL_GetTick+0x14>)
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000694 	.word	0x20000694

080027d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	609a      	str	r2, [r3, #8]
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	609a      	str	r2, [r3, #8]
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3360      	adds	r3, #96	@ 0x60
 800284a:	461a      	mov	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b08      	ldr	r3, [pc, #32]	@ (800287c <LL_ADC_SetOffset+0x44>)
 800285a:	4013      	ands	r3, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	4313      	orrs	r3, r2
 8002868:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002870:	bf00      	nop
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	03fff000 	.word	0x03fff000

08002880 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3360      	adds	r3, #96	@ 0x60
 800288e:	461a      	mov	r2, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	3360      	adds	r3, #96	@ 0x60
 80028bc:	461a      	mov	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b087      	sub	sp, #28
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	3360      	adds	r3, #96	@ 0x60
 80028f2:	461a      	mov	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	431a      	orrs	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800290c:	bf00      	nop
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3360      	adds	r3, #96	@ 0x60
 8002928:	461a      	mov	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	431a      	orrs	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002942:	bf00      	nop
 8002944:	371c      	adds	r7, #28
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	615a      	str	r2, [r3, #20]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800299a:	b480      	push	{r7}
 800299c:	b087      	sub	sp, #28
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	3330      	adds	r3, #48	@ 0x30
 80029aa:	461a      	mov	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	4413      	add	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	211f      	movs	r1, #31
 80029c6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	401a      	ands	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	f003 011f 	and.w	r1, r3, #31
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	431a      	orrs	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fe:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3314      	adds	r3, #20
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	0e5b      	lsrs	r3, r3, #25
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	4413      	add	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	0d1b      	lsrs	r3, r3, #20
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2107      	movs	r1, #7
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	0d1b      	lsrs	r3, r3, #20
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a62:	bf00      	nop
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0318 	and.w	r3, r3, #24
 8002a92:	4908      	ldr	r1, [pc, #32]	@ (8002ab4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a94:	40d9      	lsrs	r1, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	400b      	ands	r3, r1
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	0007ffff 	.word	0x0007ffff

08002ab8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 031f 	and.w	r3, r3, #31
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002b00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6093      	str	r3, [r2, #8]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b28:	d101      	bne.n	8002b2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b78:	d101      	bne.n	8002b7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ba0:	f043 0201 	orr.w	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bc8:	f043 0202 	orr.w	r2, r3, #2
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <LL_ADC_IsEnabled+0x18>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <LL_ADC_IsEnabled+0x1a>
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d101      	bne.n	8002c1a <LL_ADC_IsDisableOngoing+0x18>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <LL_ADC_IsDisableOngoing+0x1a>
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d101      	bne.n	8002c40 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d101      	bne.n	8002c66 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c74:	b590      	push	{r4, r7, lr}
 8002c76:	b089      	sub	sp, #36	@ 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e167      	b.n	8002f5e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7fe fb1b 	bl	80012d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff2d 	bl	8002b14 <LL_ADC_IsDeepPowerDownEnabled>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d004      	beq.n	8002cca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff13 	bl	8002af0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ff48 	bl	8002b64 <LL_ADC_IsInternalRegulatorEnabled>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d115      	bne.n	8002d06 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff ff2c 	bl	8002b3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ce4:	4ba0      	ldr	r3, [pc, #640]	@ (8002f68 <HAL_ADC_Init+0x2f4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	4aa0      	ldr	r2, [pc, #640]	@ (8002f6c <HAL_ADC_Init+0x2f8>)
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cf8:	e002      	b.n	8002d00 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f9      	bne.n	8002cfa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff ff2a 	bl	8002b64 <LL_ADC_IsInternalRegulatorEnabled>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10d      	bne.n	8002d32 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1a:	f043 0210 	orr.w	r2, r3, #16
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d26:	f043 0201 	orr.w	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff ff76 	bl	8002c28 <LL_ADC_REG_IsConversionOngoing>
 8002d3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f040 8100 	bne.w	8002f4c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f040 80fc 	bne.w	8002f4c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d58:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d5c:	f043 0202 	orr.w	r2, r3, #2
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff ff37 	bl	8002bdc <LL_ADC_IsEnabled>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d111      	bne.n	8002d98 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d74:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d78:	f7ff ff30 	bl	8002bdc <LL_ADC_IsEnabled>
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	487c      	ldr	r0, [pc, #496]	@ (8002f70 <HAL_ADC_Init+0x2fc>)
 8002d80:	f7ff ff2c 	bl	8002bdc <LL_ADC_IsEnabled>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4323      	orrs	r3, r4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4619      	mov	r1, r3
 8002d92:	4878      	ldr	r0, [pc, #480]	@ (8002f74 <HAL_ADC_Init+0x300>)
 8002d94:	f7ff fd1c 	bl	80027d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7f5b      	ldrb	r3, [r3, #29]
 8002d9c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002da2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002da8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002dae:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002db6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d106      	bne.n	8002dd4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	045b      	lsls	r3, r3, #17
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d009      	beq.n	8002df0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	4b60      	ldr	r3, [pc, #384]	@ (8002f78 <HAL_ADC_Init+0x304>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	69b9      	ldr	r1, [r7, #24]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ff15 	bl	8002c4e <LL_ADC_INJ_IsConversionOngoing>
 8002e24:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d16d      	bne.n	8002f08 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d16a      	bne.n	8002f08 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e36:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e3e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e4e:	f023 0302 	bic.w	r3, r3, #2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	69b9      	ldr	r1, [r7, #24]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d017      	beq.n	8002e94 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e7c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6911      	ldr	r1, [r2, #16]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002e92:	e013      	b.n	8002ebc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ea2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002eb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eb8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d118      	bne.n	8002ef8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ed0:	f023 0304 	bic.w	r3, r3, #4
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002edc:	4311      	orrs	r1, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ee2:	4311      	orrs	r1, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	611a      	str	r2, [r3, #16]
 8002ef6:	e007      	b.n	8002f08 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d10c      	bne.n	8002f2a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f023 010f 	bic.w	r1, r3, #15
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	1e5a      	subs	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f28:	e007      	b.n	8002f3a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 020f 	bic.w	r2, r2, #15
 8002f38:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3e:	f023 0303 	bic.w	r3, r3, #3
 8002f42:	f043 0201 	orr.w	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f4a:	e007      	b.n	8002f5c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f50:	f043 0210 	orr.w	r2, r3, #16
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	@ 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd90      	pop	{r4, r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	053e2d63 	.word	0x053e2d63
 8002f70:	50000100 	.word	0x50000100
 8002f74:	50000300 	.word	0x50000300
 8002f78:	fff04007 	.word	0xfff04007

08002f7c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	@ 0x28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002f84:	2300      	movs	r3, #0
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f98:	4883      	ldr	r0, [pc, #524]	@ (80031a8 <HAL_ADC_IRQHandler+0x22c>)
 8002f9a:	f7ff fd8d 	bl	8002ab8 <LL_ADC_GetMultimode>
 8002f9e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d017      	beq.n	8002fda <HAL_ADC_IRQHandler+0x5e>
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d012      	beq.n	8002fda <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d105      	bne.n	8002fcc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f001 fa9d 	bl	800450c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d004      	beq.n	8002fee <HAL_ADC_IRQHandler+0x72>
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8085 	beq.w	8003104 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d07f      	beq.n	8003104 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003014:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fca7 	bl	8002974 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d064      	beq.n	80030f6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a5e      	ldr	r2, [pc, #376]	@ (80031ac <HAL_ADC_IRQHandler+0x230>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d002      	beq.n	800303c <HAL_ADC_IRQHandler+0xc0>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	e001      	b.n	8003040 <HAL_ADC_IRQHandler+0xc4>
 800303c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	4293      	cmp	r3, r2
 8003046:	d008      	beq.n	800305a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b05      	cmp	r3, #5
 8003052:	d002      	beq.n	800305a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b09      	cmp	r3, #9
 8003058:	d104      	bne.n	8003064 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	623b      	str	r3, [r7, #32]
 8003062:	e00d      	b.n	8003080 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a50      	ldr	r2, [pc, #320]	@ (80031ac <HAL_ADC_IRQHandler+0x230>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d002      	beq.n	8003074 <HAL_ADC_IRQHandler+0xf8>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	e001      	b.n	8003078 <HAL_ADC_IRQHandler+0xfc>
 8003074:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003078:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d135      	bne.n	80030f6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b08      	cmp	r3, #8
 8003096:	d12e      	bne.n	80030f6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fdc3 	bl	8002c28 <LL_ADC_REG_IsConversionOngoing>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d11a      	bne.n	80030de <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 020c 	bic.w	r2, r2, #12
 80030b6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d112      	bne.n	80030f6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030dc:	e00b      	b.n	80030f6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e2:	f043 0210 	orr.w	r2, r3, #16
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ee:	f043 0201 	orr.w	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f95a 	bl	80033b0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	220c      	movs	r2, #12
 8003102:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d004      	beq.n	8003118 <HAL_ADC_IRQHandler+0x19c>
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10b      	bne.n	8003130 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 809e 	beq.w	8003260 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8098 	beq.w	8003260 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003140:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fc50 	bl	80029f2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003152:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fc0b 	bl	8002974 <LL_ADC_REG_IsTriggerSourceSWStart>
 800315e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a11      	ldr	r2, [pc, #68]	@ (80031ac <HAL_ADC_IRQHandler+0x230>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d002      	beq.n	8003170 <HAL_ADC_IRQHandler+0x1f4>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	e001      	b.n	8003174 <HAL_ADC_IRQHandler+0x1f8>
 8003170:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	4293      	cmp	r3, r2
 800317a:	d008      	beq.n	800318e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b06      	cmp	r3, #6
 8003186:	d002      	beq.n	800318e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b07      	cmp	r3, #7
 800318c:	d104      	bne.n	8003198 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	623b      	str	r3, [r7, #32]
 8003196:	e011      	b.n	80031bc <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a03      	ldr	r2, [pc, #12]	@ (80031ac <HAL_ADC_IRQHandler+0x230>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d006      	beq.n	80031b0 <HAL_ADC_IRQHandler+0x234>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	e005      	b.n	80031b4 <HAL_ADC_IRQHandler+0x238>
 80031a8:	50000300 	.word	0x50000300
 80031ac:	50000100 	.word	0x50000100
 80031b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031b4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d047      	beq.n	8003252 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <HAL_ADC_IRQHandler+0x260>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d03f      	beq.n	8003252 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d13a      	bne.n	8003252 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e6:	2b40      	cmp	r3, #64	@ 0x40
 80031e8:	d133      	bne.n	8003252 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d12e      	bne.n	8003252 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fd28 	bl	8002c4e <LL_ADC_INJ_IsConversionOngoing>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d11a      	bne.n	800323a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003212:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003218:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d112      	bne.n	8003252 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003230:	f043 0201 	orr.w	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003238:	e00b      	b.n	8003252 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323e:	f043 0210 	orr.w	r2, r3, #16
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f009 f9fc 	bl	800c650 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2260      	movs	r2, #96	@ 0x60
 800325e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003266:	2b00      	cmp	r3, #0
 8003268:	d011      	beq.n	800328e <HAL_ADC_IRQHandler+0x312>
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00c      	beq.n	800328e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003278:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f89f 	bl	80033c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2280      	movs	r2, #128	@ 0x80
 800328c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d012      	beq.n	80032be <HAL_ADC_IRQHandler+0x342>
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00d      	beq.n	80032be <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f001 f918 	bl	80044e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d012      	beq.n	80032ee <HAL_ADC_IRQHandler+0x372>
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00d      	beq.n	80032ee <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f001 f90a 	bl	80044f8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d036      	beq.n	8003366 <HAL_ADC_IRQHandler+0x3ea>
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d031      	beq.n	8003366 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800330a:	2301      	movs	r3, #1
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
 800330e:	e014      	b.n	800333a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003316:	4825      	ldr	r0, [pc, #148]	@ (80033ac <HAL_ADC_IRQHandler+0x430>)
 8003318:	f7ff fbdc 	bl	8002ad4 <LL_ADC_GetMultiDMATransfer>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003322:	2301      	movs	r3, #1
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
 8003326:	e008      	b.n	800333a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003336:	2301      	movs	r3, #1
 8003338:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	2b01      	cmp	r3, #1
 800333e:	d10e      	bne.n	800335e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003344:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003350:	f043 0202 	orr.w	r2, r3, #2
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f83d 	bl	80033d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2210      	movs	r2, #16
 8003364:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d018      	beq.n	80033a2 <HAL_ADC_IRQHandler+0x426>
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003376:	2b00      	cmp	r3, #0
 8003378:	d013      	beq.n	80033a2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338a:	f043 0208 	orr.w	r2, r3, #8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800339a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f001 f897 	bl	80044d0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80033a2:	bf00      	nop
 80033a4:	3728      	adds	r7, #40	@ 0x28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	50000300 	.word	0x50000300

080033b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b0b6      	sub	sp, #216	@ 0xd8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_ADC_ConfigChannel+0x22>
 800340a:	2302      	movs	r3, #2
 800340c:	e3c8      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0x7b4>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fc04 	bl	8002c28 <LL_ADC_REG_IsConversionOngoing>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	f040 83ad 	bne.w	8003b82 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6859      	ldr	r1, [r3, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	f7ff fab0 	bl	800299a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fbf2 	bl	8002c28 <LL_ADC_REG_IsConversionOngoing>
 8003444:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fbfe 	bl	8002c4e <LL_ADC_INJ_IsConversionOngoing>
 8003452:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003456:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800345a:	2b00      	cmp	r3, #0
 800345c:	f040 81d9 	bne.w	8003812 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003460:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003464:	2b00      	cmp	r3, #0
 8003466:	f040 81d4 	bne.w	8003812 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003472:	d10f      	bne.n	8003494 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2200      	movs	r2, #0
 800347e:	4619      	mov	r1, r3
 8003480:	f7ff faca 	bl	8002a18 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fa5e 	bl	800294e <LL_ADC_SetSamplingTimeCommonConfig>
 8003492:	e00e      	b.n	80034b2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6819      	ldr	r1, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	461a      	mov	r2, r3
 80034a2:	f7ff fab9 	bl	8002a18 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fa4e 	bl	800294e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	08db      	lsrs	r3, r3, #3
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d022      	beq.n	800351a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	6919      	ldr	r1, [r3, #16]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034e4:	f7ff f9a8 	bl	8002838 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6919      	ldr	r1, [r3, #16]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	461a      	mov	r2, r3
 80034f6:	f7ff f9f4 	bl	80028e2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6818      	ldr	r0, [r3, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003506:	2b01      	cmp	r3, #1
 8003508:	d102      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x124>
 800350a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800350e:	e000      	b.n	8003512 <HAL_ADC_ConfigChannel+0x126>
 8003510:	2300      	movs	r3, #0
 8003512:	461a      	mov	r2, r3
 8003514:	f7ff fa00 	bl	8002918 <LL_ADC_SetOffsetSaturation>
 8003518:	e17b      	b.n	8003812 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2100      	movs	r1, #0
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff f9ad 	bl	8002880 <LL_ADC_GetOffsetChannel>
 8003526:	4603      	mov	r3, r0
 8003528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <HAL_ADC_ConfigChannel+0x15a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff f9a2 	bl	8002880 <LL_ADC_GetOffsetChannel>
 800353c:	4603      	mov	r3, r0
 800353e:	0e9b      	lsrs	r3, r3, #26
 8003540:	f003 021f 	and.w	r2, r3, #31
 8003544:	e01e      	b.n	8003584 <HAL_ADC_ConfigChannel+0x198>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2100      	movs	r1, #0
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff f997 	bl	8002880 <LL_ADC_GetOffsetChannel>
 8003552:	4603      	mov	r3, r0
 8003554:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800355c:	fa93 f3a3 	rbit	r3, r3
 8003560:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003564:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003568:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800356c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003574:	2320      	movs	r3, #32
 8003576:	e004      	b.n	8003582 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003578:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800357c:	fab3 f383 	clz	r3, r3
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358c:	2b00      	cmp	r3, #0
 800358e:	d105      	bne.n	800359c <HAL_ADC_ConfigChannel+0x1b0>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0e9b      	lsrs	r3, r3, #26
 8003596:	f003 031f 	and.w	r3, r3, #31
 800359a:	e018      	b.n	80035ce <HAL_ADC_ConfigChannel+0x1e2>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80035b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80035b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80035c0:	2320      	movs	r3, #32
 80035c2:	e004      	b.n	80035ce <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80035c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80035c8:	fab3 f383 	clz	r3, r3
 80035cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d106      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2200      	movs	r2, #0
 80035d8:	2100      	movs	r1, #0
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff f966 	bl	80028ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2101      	movs	r1, #1
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff f94a 	bl	8002880 <LL_ADC_GetOffsetChannel>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <HAL_ADC_ConfigChannel+0x220>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2101      	movs	r1, #1
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff f93f 	bl	8002880 <LL_ADC_GetOffsetChannel>
 8003602:	4603      	mov	r3, r0
 8003604:	0e9b      	lsrs	r3, r3, #26
 8003606:	f003 021f 	and.w	r2, r3, #31
 800360a:	e01e      	b.n	800364a <HAL_ADC_ConfigChannel+0x25e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2101      	movs	r1, #1
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff f934 	bl	8002880 <LL_ADC_GetOffsetChannel>
 8003618:	4603      	mov	r3, r0
 800361a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800362a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800362e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800363a:	2320      	movs	r3, #32
 800363c:	e004      	b.n	8003648 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800363e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003652:	2b00      	cmp	r3, #0
 8003654:	d105      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x276>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	0e9b      	lsrs	r3, r3, #26
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	e018      	b.n	8003694 <HAL_ADC_ConfigChannel+0x2a8>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003676:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800367a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800367e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003686:	2320      	movs	r3, #32
 8003688:	e004      	b.n	8003694 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800368a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003694:	429a      	cmp	r2, r3
 8003696:	d106      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2200      	movs	r2, #0
 800369e:	2101      	movs	r1, #1
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff f903 	bl	80028ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2102      	movs	r1, #2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff f8e7 	bl	8002880 <LL_ADC_GetOffsetChannel>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x2e6>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2102      	movs	r1, #2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff f8dc 	bl	8002880 <LL_ADC_GetOffsetChannel>
 80036c8:	4603      	mov	r3, r0
 80036ca:	0e9b      	lsrs	r3, r3, #26
 80036cc:	f003 021f 	and.w	r2, r3, #31
 80036d0:	e01e      	b.n	8003710 <HAL_ADC_ConfigChannel+0x324>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2102      	movs	r1, #2
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff f8d1 	bl	8002880 <LL_ADC_GetOffsetChannel>
 80036de:	4603      	mov	r3, r0
 80036e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80036f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80036f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003700:	2320      	movs	r3, #32
 8003702:	e004      	b.n	800370e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003704:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003718:	2b00      	cmp	r3, #0
 800371a:	d105      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x33c>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	0e9b      	lsrs	r3, r3, #26
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	e016      	b.n	8003756 <HAL_ADC_ConfigChannel+0x36a>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800373a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800373c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003740:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003748:	2320      	movs	r3, #32
 800374a:	e004      	b.n	8003756 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800374c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003750:	fab3 f383 	clz	r3, r3
 8003754:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003756:	429a      	cmp	r2, r3
 8003758:	d106      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2200      	movs	r2, #0
 8003760:	2102      	movs	r1, #2
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff f8a2 	bl	80028ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2103      	movs	r1, #3
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff f886 	bl	8002880 <LL_ADC_GetOffsetChannel>
 8003774:	4603      	mov	r3, r0
 8003776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x3a8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2103      	movs	r1, #3
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff f87b 	bl	8002880 <LL_ADC_GetOffsetChannel>
 800378a:	4603      	mov	r3, r0
 800378c:	0e9b      	lsrs	r3, r3, #26
 800378e:	f003 021f 	and.w	r2, r3, #31
 8003792:	e017      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x3d8>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2103      	movs	r1, #3
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff f870 	bl	8002880 <LL_ADC_GetOffsetChannel>
 80037a0:	4603      	mov	r3, r0
 80037a2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037a6:	fa93 f3a3 	rbit	r3, r3
 80037aa:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80037ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037ae:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80037b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80037b6:	2320      	movs	r3, #32
 80037b8:	e003      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80037ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037bc:	fab3 f383 	clz	r3, r3
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d105      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x3f0>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	0e9b      	lsrs	r3, r3, #26
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	e011      	b.n	8003800 <HAL_ADC_ConfigChannel+0x414>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80037ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80037ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80037f4:	2320      	movs	r3, #32
 80037f6:	e003      	b.n	8003800 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80037f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037fa:	fab3 f383 	clz	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003800:	429a      	cmp	r2, r3
 8003802:	d106      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2200      	movs	r2, #0
 800380a:	2103      	movs	r1, #3
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff f84d 	bl	80028ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff f9e0 	bl	8002bdc <LL_ADC_IsEnabled>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	f040 8140 	bne.w	8003aa4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	6819      	ldr	r1, [r3, #0]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	461a      	mov	r2, r3
 8003832:	f7ff f91d 	bl	8002a70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	4a8f      	ldr	r2, [pc, #572]	@ (8003a78 <HAL_ADC_ConfigChannel+0x68c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	f040 8131 	bne.w	8003aa4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10b      	bne.n	800386a <HAL_ADC_ConfigChannel+0x47e>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	0e9b      	lsrs	r3, r3, #26
 8003858:	3301      	adds	r3, #1
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	2b09      	cmp	r3, #9
 8003860:	bf94      	ite	ls
 8003862:	2301      	movls	r3, #1
 8003864:	2300      	movhi	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	e019      	b.n	800389e <HAL_ADC_ConfigChannel+0x4b2>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003872:	fa93 f3a3 	rbit	r3, r3
 8003876:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003878:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800387a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800387c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003882:	2320      	movs	r3, #32
 8003884:	e003      	b.n	800388e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003886:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003888:	fab3 f383 	clz	r3, r3
 800388c:	b2db      	uxtb	r3, r3
 800388e:	3301      	adds	r3, #1
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	2b09      	cmp	r3, #9
 8003896:	bf94      	ite	ls
 8003898:	2301      	movls	r3, #1
 800389a:	2300      	movhi	r3, #0
 800389c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d079      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d107      	bne.n	80038be <HAL_ADC_ConfigChannel+0x4d2>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	0e9b      	lsrs	r3, r3, #26
 80038b4:	3301      	adds	r3, #1
 80038b6:	069b      	lsls	r3, r3, #26
 80038b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038bc:	e015      	b.n	80038ea <HAL_ADC_ConfigChannel+0x4fe>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80038cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ce:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80038d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80038d6:	2320      	movs	r3, #32
 80038d8:	e003      	b.n	80038e2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80038da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038dc:	fab3 f383 	clz	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	069b      	lsls	r3, r3, #26
 80038e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <HAL_ADC_ConfigChannel+0x51e>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	0e9b      	lsrs	r3, r3, #26
 80038fc:	3301      	adds	r3, #1
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	2101      	movs	r1, #1
 8003904:	fa01 f303 	lsl.w	r3, r1, r3
 8003908:	e017      	b.n	800393a <HAL_ADC_ConfigChannel+0x54e>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800391a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800391c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003922:	2320      	movs	r3, #32
 8003924:	e003      	b.n	800392e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003928:	fab3 f383 	clz	r3, r3
 800392c:	b2db      	uxtb	r3, r3
 800392e:	3301      	adds	r3, #1
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	2101      	movs	r1, #1
 8003936:	fa01 f303 	lsl.w	r3, r1, r3
 800393a:	ea42 0103 	orr.w	r1, r2, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10a      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x574>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	0e9b      	lsrs	r3, r3, #26
 8003950:	3301      	adds	r3, #1
 8003952:	f003 021f 	and.w	r2, r3, #31
 8003956:	4613      	mov	r3, r2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4413      	add	r3, r2
 800395c:	051b      	lsls	r3, r3, #20
 800395e:	e018      	b.n	8003992 <HAL_ADC_ConfigChannel+0x5a6>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003968:	fa93 f3a3 	rbit	r3, r3
 800396c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800396e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003970:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003978:	2320      	movs	r3, #32
 800397a:	e003      	b.n	8003984 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800397c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	3301      	adds	r3, #1
 8003986:	f003 021f 	and.w	r2, r3, #31
 800398a:	4613      	mov	r3, r2
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4413      	add	r3, r2
 8003990:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003992:	430b      	orrs	r3, r1
 8003994:	e081      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d107      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x5c6>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	0e9b      	lsrs	r3, r3, #26
 80039a8:	3301      	adds	r3, #1
 80039aa:	069b      	lsls	r3, r3, #26
 80039ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039b0:	e015      	b.n	80039de <HAL_ADC_ConfigChannel+0x5f2>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80039c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80039c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80039ca:	2320      	movs	r3, #32
 80039cc:	e003      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80039ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d0:	fab3 f383 	clz	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	069b      	lsls	r3, r3, #26
 80039da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x612>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	0e9b      	lsrs	r3, r3, #26
 80039f0:	3301      	adds	r3, #1
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	2101      	movs	r1, #1
 80039f8:	fa01 f303 	lsl.w	r3, r1, r3
 80039fc:	e017      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x642>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	61fb      	str	r3, [r7, #28]
  return result;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003a16:	2320      	movs	r3, #32
 8003a18:	e003      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	fab3 f383 	clz	r3, r3
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	2101      	movs	r1, #1
 8003a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2e:	ea42 0103 	orr.w	r1, r2, r3
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10d      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x66e>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	0e9b      	lsrs	r3, r3, #26
 8003a44:	3301      	adds	r3, #1
 8003a46:	f003 021f 	and.w	r2, r3, #31
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	4413      	add	r3, r2
 8003a50:	3b1e      	subs	r3, #30
 8003a52:	051b      	lsls	r3, r3, #20
 8003a54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a58:	e01e      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x6ac>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	613b      	str	r3, [r7, #16]
  return result;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d104      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003a72:	2320      	movs	r3, #32
 8003a74:	e006      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x698>
 8003a76:	bf00      	nop
 8003a78:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	fab3 f383 	clz	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	3301      	adds	r3, #1
 8003a86:	f003 021f 	and.w	r2, r3, #31
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	4413      	add	r3, r2
 8003a90:	3b1e      	subs	r3, #30
 8003a92:	051b      	lsls	r3, r3, #20
 8003a94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a98:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f7fe ffba 	bl	8002a18 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d071      	beq.n	8003b94 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ab0:	483e      	ldr	r0, [pc, #248]	@ (8003bac <HAL_ADC_ConfigChannel+0x7c0>)
 8003ab2:	f7fe feb3 	bl	800281c <LL_ADC_GetCommonPathInternalCh>
 8003ab6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a3c      	ldr	r2, [pc, #240]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d004      	beq.n	8003ace <HAL_ADC_ConfigChannel+0x6e2>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a3a      	ldr	r2, [pc, #232]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d127      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ace:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d121      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ae2:	d157      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ae8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003aec:	4619      	mov	r1, r3
 8003aee:	482f      	ldr	r0, [pc, #188]	@ (8003bac <HAL_ADC_ConfigChannel+0x7c0>)
 8003af0:	f7fe fe81 	bl	80027f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003af4:	4b30      	ldr	r3, [pc, #192]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	099b      	lsrs	r3, r3, #6
 8003afa:	4a30      	ldr	r2, [pc, #192]	@ (8003bbc <HAL_ADC_ConfigChannel+0x7d0>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	4613      	mov	r3, r2
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b0e:	e002      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f9      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b1c:	e03a      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a27      	ldr	r2, [pc, #156]	@ (8003bc0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d113      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10d      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a22      	ldr	r2, [pc, #136]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d02a      	beq.n	8003b94 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b46:	4619      	mov	r1, r3
 8003b48:	4818      	ldr	r0, [pc, #96]	@ (8003bac <HAL_ADC_ConfigChannel+0x7c0>)
 8003b4a:	f7fe fe54 	bl	80027f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b4e:	e021      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d11c      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d116      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a16      	ldr	r2, [pc, #88]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d011      	beq.n	8003b94 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b78:	4619      	mov	r1, r3
 8003b7a:	480c      	ldr	r0, [pc, #48]	@ (8003bac <HAL_ADC_ConfigChannel+0x7c0>)
 8003b7c:	f7fe fe3b 	bl	80027f6 <LL_ADC_SetCommonPathInternalCh>
 8003b80:	e008      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b86:	f043 0220 	orr.w	r2, r3, #32
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b9c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	37d8      	adds	r7, #216	@ 0xd8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	80080000 	.word	0x80080000
 8003bac:	50000300 	.word	0x50000300
 8003bb0:	c3210000 	.word	0xc3210000
 8003bb4:	90c00010 	.word	0x90c00010
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	053e2d63 	.word	0x053e2d63
 8003bc0:	c7520000 	.word	0xc7520000
 8003bc4:	50000100 	.word	0x50000100
 8003bc8:	cb840000 	.word	0xcb840000

08003bcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe fffd 	bl	8002bdc <LL_ADC_IsEnabled>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d169      	bne.n	8003cbc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	4b36      	ldr	r3, [pc, #216]	@ (8003cc8 <ADC_Enable+0xfc>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfa:	f043 0210 	orr.w	r2, r3, #16
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c06:	f043 0201 	orr.w	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e055      	b.n	8003cbe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe ffb8 	bl	8002b8c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c1c:	482b      	ldr	r0, [pc, #172]	@ (8003ccc <ADC_Enable+0x100>)
 8003c1e:	f7fe fdfd 	bl	800281c <LL_ADC_GetCommonPathInternalCh>
 8003c22:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003c24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d013      	beq.n	8003c54 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c2c:	4b28      	ldr	r3, [pc, #160]	@ (8003cd0 <ADC_Enable+0x104>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	099b      	lsrs	r3, r3, #6
 8003c32:	4a28      	ldr	r2, [pc, #160]	@ (8003cd4 <ADC_Enable+0x108>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	099b      	lsrs	r3, r3, #6
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c46:	e002      	b.n	8003c4e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1f9      	bne.n	8003c48 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c54:	f7fe fdb0 	bl	80027b8 <HAL_GetTick>
 8003c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c5a:	e028      	b.n	8003cae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fe ffbb 	bl	8002bdc <LL_ADC_IsEnabled>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d104      	bne.n	8003c76 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fe ff8b 	bl	8002b8c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c76:	f7fe fd9f 	bl	80027b8 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d914      	bls.n	8003cae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d00d      	beq.n	8003cae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c96:	f043 0210 	orr.w	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca2:	f043 0201 	orr.w	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e007      	b.n	8003cbe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d1cf      	bne.n	8003c5c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	8000003f 	.word	0x8000003f
 8003ccc:	50000300 	.word	0x50000300
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	053e2d63 	.word	0x053e2d63

08003cd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fe ff8c 	bl	8002c02 <LL_ADC_IsDisableOngoing>
 8003cea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe ff73 	bl	8002bdc <LL_ADC_IsEnabled>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d047      	beq.n	8003d8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d144      	bne.n	8003d8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 030d 	and.w	r3, r3, #13
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d10c      	bne.n	8003d2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe ff4d 	bl	8002bb4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2203      	movs	r2, #3
 8003d20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d22:	f7fe fd49 	bl	80027b8 <HAL_GetTick>
 8003d26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d28:	e029      	b.n	8003d7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2e:	f043 0210 	orr.w	r2, r3, #16
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d3a:	f043 0201 	orr.w	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e023      	b.n	8003d8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d46:	f7fe fd37 	bl	80027b8 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d914      	bls.n	8003d7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00d      	beq.n	8003d7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d66:	f043 0210 	orr.w	r2, r3, #16
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d72:	f043 0201 	orr.w	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e007      	b.n	8003d8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1dc      	bne.n	8003d46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <LL_ADC_SetCommonPathInternalCh>:
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	609a      	str	r2, [r3, #8]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_ADC_GetCommonPathInternalCh>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_ADC_SetOffset>:
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3360      	adds	r3, #96	@ 0x60
 8003dea:	461a      	mov	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4b08      	ldr	r3, [pc, #32]	@ (8003e1c <LL_ADC_SetOffset+0x44>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	601a      	str	r2, [r3, #0]
}
 8003e10:	bf00      	nop
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	03fff000 	.word	0x03fff000

08003e20 <LL_ADC_GetOffsetChannel>:
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3360      	adds	r3, #96	@ 0x60
 8003e2e:	461a      	mov	r2, r3
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_ADC_SetOffsetState>:
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	3360      	adds	r3, #96	@ 0x60
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	431a      	orrs	r2, r3
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	601a      	str	r2, [r3, #0]
}
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <LL_ADC_SetOffsetSign>:
{
 8003e82:	b480      	push	{r7}
 8003e84:	b087      	sub	sp, #28
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3360      	adds	r3, #96	@ 0x60
 8003e92:	461a      	mov	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	601a      	str	r2, [r3, #0]
}
 8003eac:	bf00      	nop
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <LL_ADC_SetOffsetSaturation>:
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	3360      	adds	r3, #96	@ 0x60
 8003ec8:	461a      	mov	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	431a      	orrs	r2, r3
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	601a      	str	r2, [r3, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	615a      	str	r2, [r3, #20]
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_ADC_INJ_GetTrigAuto>:
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_ADC_SetChannelSamplingTime>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3314      	adds	r3, #20
 8003f40:	461a      	mov	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	0e5b      	lsrs	r3, r3, #25
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	4413      	add	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	0d1b      	lsrs	r3, r3, #20
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	2107      	movs	r1, #7
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	401a      	ands	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	0d1b      	lsrs	r3, r3, #20
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	fa01 f303 	lsl.w	r3, r1, r3
 8003f74:	431a      	orrs	r2, r3
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	601a      	str	r2, [r3, #0]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <LL_ADC_SetChannelSingleDiff>:
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	401a      	ands	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f003 0318 	and.w	r3, r3, #24
 8003faa:	4908      	ldr	r1, [pc, #32]	@ (8003fcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8003fac:	40d9      	lsrs	r1, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	400b      	ands	r3, r1
 8003fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	0007ffff 	.word	0x0007ffff

08003fd0 <LL_ADC_GetMultimode>:
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 031f 	and.w	r3, r3, #31
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_ADC_IsEnabled>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <LL_ADC_IsEnabled+0x18>
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <LL_ADC_IsEnabled+0x1a>
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <LL_ADC_StartCalibration>:
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004024:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800402e:	4313      	orrs	r3, r2
 8004030:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	609a      	str	r2, [r3, #8]
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <LL_ADC_IsCalibrationOnGoing>:
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004054:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004058:	d101      	bne.n	800405e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <LL_ADC_REG_IsConversionOngoing>:
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b04      	cmp	r3, #4
 800407e:	d101      	bne.n	8004084 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <LL_ADC_INJ_StartConversion>:
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040a2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80040a6:	f043 0208 	orr.w	r2, r3, #8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	609a      	str	r2, [r3, #8]
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <LL_ADC_INJ_IsConversionOngoing>:
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d101      	bne.n	80040d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_ADCEx_Calibration_Start+0x1c>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e04d      	b.n	8004198 <HAL_ADCEx_Calibration_Start+0xb8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff fde7 	bl	8003cd8 <ADC_Disable>
 800410a:	4603      	mov	r3, r0
 800410c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d136      	bne.n	8004182 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004118:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800411c:	f023 0302 	bic.w	r3, r3, #2
 8004120:	f043 0202 	orr.w	r2, r3, #2
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6839      	ldr	r1, [r7, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff ff6f 	bl	8004012 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004134:	e014      	b.n	8004160 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	3301      	adds	r3, #1
 800413a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4a18      	ldr	r2, [pc, #96]	@ (80041a0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d90d      	bls.n	8004160 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004148:	f023 0312 	bic.w	r3, r3, #18
 800414c:	f043 0210 	orr.w	r2, r3, #16
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e01b      	b.n	8004198 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff ff6d 	bl	8004044 <LL_ADC_IsCalibrationOnGoing>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e2      	bne.n	8004136 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004174:	f023 0303 	bic.w	r3, r3, #3
 8004178:	f043 0201 	orr.w	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004180:	e005      	b.n	800418e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004186:	f043 0210 	orr.w	r2, r3, #16
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004196:	7bfb      	ldrb	r3, [r7, #15]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	0004de01 	.word	0x0004de01

080041a4 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041ac:	4853      	ldr	r0, [pc, #332]	@ (80042fc <HAL_ADCEx_InjectedStart+0x158>)
 80041ae:	f7ff ff0f 	bl	8003fd0 <LL_ADC_GetMultimode>
 80041b2:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff ff7e 	bl	80040ba <LL_ADC_INJ_IsConversionOngoing>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 80041c4:	2302      	movs	r3, #2
 80041c6:	e094      	b.n	80042f2 <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041d2:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041da:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d107      	bne.n	80041f8 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ec:	f043 0220 	orr.w	r2, r3, #32
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e07c      	b.n	80042f2 <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_ADCEx_InjectedStart+0x62>
 8004202:	2302      	movs	r3, #2
 8004204:	e075      	b.n	80042f2 <HAL_ADCEx_InjectedStart+0x14e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff fcdc 	bl	8003bcc <ADC_Enable>
 8004214:	4603      	mov	r3, r0
 8004216:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d164      	bne.n	80042e8 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d006      	beq.n	8004238 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422e:	f023 0208 	bic.w	r2, r3, #8
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	661a      	str	r2, [r3, #96]	@ 0x60
 8004236:	e002      	b.n	800423e <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004242:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a2a      	ldr	r2, [pc, #168]	@ (8004300 <HAL_ADCEx_InjectedStart+0x15c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d002      	beq.n	8004262 <HAL_ADCEx_InjectedStart+0xbe>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	e001      	b.n	8004266 <HAL_ADCEx_InjectedStart+0xc2>
 8004262:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6812      	ldr	r2, [r2, #0]
 800426a:	4293      	cmp	r3, r2
 800426c:	d002      	beq.n	8004274 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d105      	bne.n	8004280 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004278:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2260      	movs	r2, #96	@ 0x60
 8004286:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1a      	ldr	r2, [pc, #104]	@ (8004300 <HAL_ADCEx_InjectedStart+0x15c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d002      	beq.n	80042a0 <HAL_ADCEx_InjectedStart+0xfc>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	e001      	b.n	80042a4 <HAL_ADCEx_InjectedStart+0x100>
 80042a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d008      	beq.n	80042be <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b06      	cmp	r3, #6
 80042b6:	d002      	beq.n	80042be <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b07      	cmp	r3, #7
 80042bc:	d10d      	bne.n	80042da <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fe26 	bl	8003f14 <LL_ADC_INJ_GetTrigAuto>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d110      	bne.n	80042f0 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fedd 	bl	8004092 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80042d8:	e00a      	b.n	80042f0 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042e6:	e003      	b.n	80042f0 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	50000300 	.word	0x50000300
 8004300:	50000100 	.word	0x50000100

08004304 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800430c:	486e      	ldr	r0, [pc, #440]	@ (80044c8 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 800430e:	f7ff fe5f 	bl	8003fd0 <LL_ADC_GetMultimode>
 8004312:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fece 	bl	80040ba <LL_ADC_INJ_IsConversionOngoing>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8004324:	2302      	movs	r3, #2
 8004326:	e0ca      	b.n	80044be <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004332:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10a      	bne.n	8004358 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d107      	bne.n	8004358 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434c:	f043 0220 	orr.w	r2, r3, #32
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0b2      	b.n	80044be <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_ADCEx_InjectedStart_IT+0x62>
 8004362:	2302      	movs	r3, #2
 8004364:	e0ab      	b.n	80044be <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff fc2c 	bl	8003bcc <ADC_Enable>
 8004374:	4603      	mov	r3, r0
 8004376:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	2b00      	cmp	r3, #0
 800437c:	f040 809a 	bne.w	80044b4 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004388:	2b00      	cmp	r3, #0
 800438a:	d006      	beq.n	800439a <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004390:	f023 0208 	bic.w	r2, r3, #8
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	661a      	str	r2, [r3, #96]	@ 0x60
 8004398:	e002      	b.n	80043a0 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a44      	ldr	r2, [pc, #272]	@ (80044cc <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d002      	beq.n	80043c4 <HAL_ADCEx_InjectedStart_IT+0xc0>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	e001      	b.n	80043c8 <HAL_ADCEx_InjectedStart_IT+0xc4>
 80043c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d002      	beq.n	80043d6 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d105      	bne.n	80043e2 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043da:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2260      	movs	r2, #96	@ 0x60
 80043e8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800440e:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d110      	bne.n	800443a <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0220 	bic.w	r2, r2, #32
 8004426:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004436:	605a      	str	r2, [r3, #4]
          break;
 8004438:	e010      	b.n	800445c <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004448:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 0220 	orr.w	r2, r2, #32
 8004458:	605a      	str	r2, [r3, #4]
          break;
 800445a:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1a      	ldr	r2, [pc, #104]	@ (80044cc <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d002      	beq.n	800446c <HAL_ADCEx_InjectedStart_IT+0x168>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	e001      	b.n	8004470 <HAL_ADCEx_InjectedStart_IT+0x16c>
 800446c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	4293      	cmp	r3, r2
 8004476:	d008      	beq.n	800448a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b06      	cmp	r3, #6
 8004482:	d002      	beq.n	800448a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2b07      	cmp	r3, #7
 8004488:	d10d      	bne.n	80044a6 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fd40 	bl	8003f14 <LL_ADC_INJ_GetTrigAuto>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d110      	bne.n	80044bc <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff fdf7 	bl	8004092 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80044a4:	e00a      	b.n	80044bc <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044aa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044b2:	e003      	b.n	80044bc <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	50000300 	.word	0x50000300
 80044cc:	50000100 	.word	0x50000100

080044d0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b0b6      	sub	sp, #216	@ 0xd8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004540:	2b01      	cmp	r3, #1
 8004542:	d102      	bne.n	800454a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004544:	2302      	movs	r3, #2
 8004546:	f000 bcb5 	b.w	8004eb4 <HAL_ADCEx_InjectedConfigChannel+0x994>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800455e:	2b01      	cmp	r3, #1
 8004560:	d130      	bne.n	80045c4 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b09      	cmp	r3, #9
 8004568:	d179      	bne.n	800465e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456e:	2b00      	cmp	r3, #0
 8004570:	d010      	beq.n	8004594 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	0e9b      	lsrs	r3, r3, #26
 8004578:	025b      	lsls	r3, r3, #9
 800457a:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004582:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004586:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004592:	e007      	b.n	80045a4 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	0e9b      	lsrs	r3, r3, #26
 800459a:	025b      	lsls	r3, r3, #9
 800459c:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80045a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045aa:	4b84      	ldr	r3, [pc, #528]	@ (80047bc <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6812      	ldr	r2, [r2, #0]
 80045b2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80045b6:	430b      	orrs	r3, r1
 80045b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80045c0:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80045c2:	e04c      	b.n	800465e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d11d      	bne.n	8004608 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	6a1a      	ldr	r2, [r3, #32]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00d      	beq.n	80045fe <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ec:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80045f0:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045fc:	e004      	b.n	8004608 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	3b01      	subs	r3, #1
 8004604:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	0e9b      	lsrs	r3, r3, #26
 800460e:	f003 021f 	and.w	r2, r3, #31
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800462c:	1e5a      	subs	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004636:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800464e:	4b5b      	ldr	r3, [pc, #364]	@ (80047bc <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004650:	4013      	ands	r3, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	430b      	orrs	r3, r1
 800465c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff fd29 	bl	80040ba <LL_ADC_INJ_IsConversionOngoing>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d124      	bne.n	80046b8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004674:	2b00      	cmp	r3, #0
 8004676:	d112      	bne.n	800469e <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004688:	055a      	lsls	r2, r3, #21
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004690:	051b      	lsls	r3, r3, #20
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	60da      	str	r2, [r3, #12]
 800469c:	e00c      	b.n	80046b8 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80046ae:	055a      	lsls	r2, r3, #21
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fcd5 	bl	800406c <LL_ADC_REG_IsConversionOngoing>
 80046c2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fcf5 	bl	80040ba <LL_ADC_INJ_IsConversionOngoing>
 80046d0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f040 822e 	bne.w	8004b3a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f040 8229 	bne.w	8004b3a <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d116      	bne.n	8004726 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d108      	bne.n	8004714 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8004710:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004712:	e01f      	b.n	8004754 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004722:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004724:	e016      	b.n	8004754 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800472c:	2b01      	cmp	r3, #1
 800472e:	d109      	bne.n	8004744 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004734:	f043 0220 	orr.w	r2, r3, #32
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004742:	e007      	b.n	8004754 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004752:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800475a:	2b01      	cmp	r3, #1
 800475c:	d110      	bne.n	8004780 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004770:	430b      	orrs	r3, r1
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0202 	orr.w	r2, r2, #2
 800477c:	611a      	str	r2, [r3, #16]
 800477e:	e007      	b.n	8004790 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0202 	bic.w	r2, r2, #2
 800478e:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004798:	d112      	bne.n	80047c0 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2200      	movs	r2, #0
 80047a4:	4619      	mov	r1, r3
 80047a6:	f7ff fbc3 	bl	8003f30 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fb9b 	bl	8003eee <LL_ADC_SetSamplingTimeCommonConfig>
 80047b8:	e011      	b.n	80047de <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80047ba:	bf00      	nop
 80047bc:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80047cc:	461a      	mov	r2, r3
 80047ce:	f7ff fbaf 	bl	8003f30 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2100      	movs	r1, #0
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff fb88 	bl	8003eee <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	08db      	lsrs	r3, r3, #3
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d022      	beq.n	8004846 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	6919      	ldr	r1, [r3, #16]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004810:	f7ff fae2 	bl	8003dd8 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6919      	ldr	r1, [r3, #16]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	461a      	mov	r2, r3
 8004822:	f7ff fb2e 	bl	8003e82 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004832:	2b01      	cmp	r3, #1
 8004834:	d102      	bne.n	800483c <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004836:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800483a:	e000      	b.n	800483e <HAL_ADCEx_InjectedConfigChannel+0x31e>
 800483c:	2300      	movs	r3, #0
 800483e:	461a      	mov	r2, r3
 8004840:	f7ff fb3a 	bl	8003eb8 <LL_ADC_SetOffsetSaturation>
 8004844:	e179      	b.n	8004b3a <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2100      	movs	r1, #0
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff fae7 	bl	8003e20 <LL_ADC_GetOffsetChannel>
 8004852:	4603      	mov	r3, r0
 8004854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <HAL_ADCEx_InjectedConfigChannel+0x352>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2100      	movs	r1, #0
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff fadc 	bl	8003e20 <LL_ADC_GetOffsetChannel>
 8004868:	4603      	mov	r3, r0
 800486a:	0e9b      	lsrs	r3, r3, #26
 800486c:	f003 021f 	and.w	r2, r3, #31
 8004870:	e01e      	b.n	80048b0 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2100      	movs	r1, #0
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff fad1 	bl	8003e20 <LL_ADC_GetOffsetChannel>
 800487e:	4603      	mov	r3, r0
 8004880:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004884:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004888:	fa93 f3a3 	rbit	r3, r3
 800488c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004890:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004894:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004898:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 80048a0:	2320      	movs	r3, #32
 80048a2:	e004      	b.n	80048ae <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 80048a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048a8:	fab3 f383 	clz	r3, r3
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d105      	bne.n	80048c8 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	0e9b      	lsrs	r3, r3, #26
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	e018      	b.n	80048fa <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048d4:	fa93 f3a3 	rbit	r3, r3
 80048d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80048dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80048e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80048ec:	2320      	movs	r3, #32
 80048ee:	e004      	b.n	80048fa <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80048f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048f4:	fab3 f383 	clz	r3, r3
 80048f8:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d106      	bne.n	800490c <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2200      	movs	r2, #0
 8004904:	2100      	movs	r1, #0
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff faa0 	bl	8003e4c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2101      	movs	r1, #1
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fa84 	bl	8003e20 <LL_ADC_GetOffsetChannel>
 8004918:	4603      	mov	r3, r0
 800491a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2101      	movs	r1, #1
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fa79 	bl	8003e20 <LL_ADC_GetOffsetChannel>
 800492e:	4603      	mov	r3, r0
 8004930:	0e9b      	lsrs	r3, r3, #26
 8004932:	f003 021f 	and.w	r2, r3, #31
 8004936:	e01e      	b.n	8004976 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2101      	movs	r1, #1
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff fa6e 	bl	8003e20 <LL_ADC_GetOffsetChannel>
 8004944:	4603      	mov	r3, r0
 8004946:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800494e:	fa93 f3a3 	rbit	r3, r3
 8004952:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004956:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800495a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800495e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004966:	2320      	movs	r3, #32
 8004968:	e004      	b.n	8004974 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 800496a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800496e:	fab3 f383 	clz	r3, r3
 8004972:	b2db      	uxtb	r3, r3
 8004974:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800497e:	2b00      	cmp	r3, #0
 8004980:	d105      	bne.n	800498e <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	0e9b      	lsrs	r3, r3, #26
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	e018      	b.n	80049c0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004996:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800499a:	fa93 f3a3 	rbit	r3, r3
 800499e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80049a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80049a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80049aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80049b2:	2320      	movs	r3, #32
 80049b4:	e004      	b.n	80049c0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80049b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049ba:	fab3 f383 	clz	r3, r3
 80049be:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d106      	bne.n	80049d2 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2200      	movs	r2, #0
 80049ca:	2101      	movs	r1, #1
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff fa3d 	bl	8003e4c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2102      	movs	r1, #2
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff fa21 	bl	8003e20 <LL_ADC_GetOffsetChannel>
 80049de:	4603      	mov	r3, r0
 80049e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2102      	movs	r1, #2
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fa16 	bl	8003e20 <LL_ADC_GetOffsetChannel>
 80049f4:	4603      	mov	r3, r0
 80049f6:	0e9b      	lsrs	r3, r3, #26
 80049f8:	f003 021f 	and.w	r2, r3, #31
 80049fc:	e01e      	b.n	8004a3c <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2102      	movs	r1, #2
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff fa0b 	bl	8003e20 <LL_ADC_GetOffsetChannel>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a14:	fa93 f3a3 	rbit	r3, r3
 8004a18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004a2c:	2320      	movs	r3, #32
 8004a2e:	e004      	b.n	8004a3a <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a34:	fab3 f383 	clz	r3, r3
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d105      	bne.n	8004a54 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	0e9b      	lsrs	r3, r3, #26
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	e014      	b.n	8004a7e <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a5c:	fa93 f3a3 	rbit	r3, r3
 8004a60:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004a62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004a68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004a70:	2320      	movs	r3, #32
 8004a72:	e004      	b.n	8004a7e <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a78:	fab3 f383 	clz	r3, r3
 8004a7c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d106      	bne.n	8004a90 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2200      	movs	r2, #0
 8004a88:	2102      	movs	r1, #2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff f9de 	bl	8003e4c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2103      	movs	r1, #3
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff f9c2 	bl	8003e20 <LL_ADC_GetOffsetChannel>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10a      	bne.n	8004abc <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2103      	movs	r1, #3
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff f9b7 	bl	8003e20 <LL_ADC_GetOffsetChannel>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	0e9b      	lsrs	r3, r3, #26
 8004ab6:	f003 021f 	and.w	r2, r3, #31
 8004aba:	e017      	b.n	8004aec <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2103      	movs	r1, #3
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff f9ac 	bl	8003e20 <LL_ADC_GetOffsetChannel>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004acc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ace:	fa93 f3a3 	rbit	r3, r3
 8004ad2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004ad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ad6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004ad8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004ade:	2320      	movs	r3, #32
 8004ae0:	e003      	b.n	8004aea <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004ae2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ae4:	fab3 f383 	clz	r3, r3
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d105      	bne.n	8004b04 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	0e9b      	lsrs	r3, r3, #26
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	e011      	b.n	8004b28 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b0c:	fa93 f3a3 	rbit	r3, r3
 8004b10:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004b12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b14:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004b16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	e003      	b.n	8004b28 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004b20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b22:	fab3 f383 	clz	r3, r3
 8004b26:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d106      	bne.n	8004b3a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2200      	movs	r2, #0
 8004b32:	2103      	movs	r1, #3
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff f989 	bl	8003e4c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff fa54 	bl	8003fec <LL_ADC_IsEnabled>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f040 8140 	bne.w	8004dcc <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6818      	ldr	r0, [r3, #0]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	6819      	ldr	r1, [r3, #0]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	f7ff fa15 	bl	8003f88 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	4a8f      	ldr	r2, [pc, #572]	@ (8004da0 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	f040 8131 	bne.w	8004dcc <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10b      	bne.n	8004b92 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	0e9b      	lsrs	r3, r3, #26
 8004b80:	3301      	adds	r3, #1
 8004b82:	f003 031f 	and.w	r3, r3, #31
 8004b86:	2b09      	cmp	r3, #9
 8004b88:	bf94      	ite	ls
 8004b8a:	2301      	movls	r3, #1
 8004b8c:	2300      	movhi	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	e019      	b.n	8004bc6 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b9a:	fa93 f3a3 	rbit	r3, r3
 8004b9e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004ba4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004baa:	2320      	movs	r3, #32
 8004bac:	e003      	b.n	8004bb6 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004bae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bb0:	fab3 f383 	clz	r3, r3
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	f003 031f 	and.w	r3, r3, #31
 8004bbc:	2b09      	cmp	r3, #9
 8004bbe:	bf94      	ite	ls
 8004bc0:	2301      	movls	r3, #1
 8004bc2:	2300      	movhi	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d079      	beq.n	8004cbe <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d107      	bne.n	8004be6 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	0e9b      	lsrs	r3, r3, #26
 8004bdc:	3301      	adds	r3, #1
 8004bde:	069b      	lsls	r3, r3, #26
 8004be0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004be4:	e015      	b.n	8004c12 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bee:	fa93 f3a3 	rbit	r3, r3
 8004bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004bf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bf6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004bfe:	2320      	movs	r3, #32
 8004c00:	e003      	b.n	8004c0a <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c04:	fab3 f383 	clz	r3, r3
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	069b      	lsls	r3, r3, #26
 8004c0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	0e9b      	lsrs	r3, r3, #26
 8004c24:	3301      	adds	r3, #1
 8004c26:	f003 031f 	and.w	r3, r3, #31
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c30:	e017      	b.n	8004c62 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c3a:	fa93 f3a3 	rbit	r3, r3
 8004c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c42:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004c4a:	2320      	movs	r3, #32
 8004c4c:	e003      	b.n	8004c56 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004c4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c50:	fab3 f383 	clz	r3, r3
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	3301      	adds	r3, #1
 8004c58:	f003 031f 	and.w	r3, r3, #31
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c62:	ea42 0103 	orr.w	r1, r2, r3
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	0e9b      	lsrs	r3, r3, #26
 8004c78:	3301      	adds	r3, #1
 8004c7a:	f003 021f 	and.w	r2, r3, #31
 8004c7e:	4613      	mov	r3, r2
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	4413      	add	r3, r2
 8004c84:	051b      	lsls	r3, r3, #20
 8004c86:	e018      	b.n	8004cba <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c90:	fa93 f3a3 	rbit	r3, r3
 8004c94:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c98:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004ca0:	2320      	movs	r3, #32
 8004ca2:	e003      	b.n	8004cac <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca6:	fab3 f383 	clz	r3, r3
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	3301      	adds	r3, #1
 8004cae:	f003 021f 	and.w	r2, r3, #31
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	4413      	add	r3, r2
 8004cb8:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cba:	430b      	orrs	r3, r1
 8004cbc:	e081      	b.n	8004dc2 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d107      	bne.n	8004cda <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	0e9b      	lsrs	r3, r3, #26
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	069b      	lsls	r3, r3, #26
 8004cd4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cd8:	e015      	b.n	8004d06 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce2:	fa93 f3a3 	rbit	r3, r3
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004cf2:	2320      	movs	r3, #32
 8004cf4:	e003      	b.n	8004cfe <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf8:	fab3 f383 	clz	r3, r3
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	3301      	adds	r3, #1
 8004d00:	069b      	lsls	r3, r3, #26
 8004d02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d109      	bne.n	8004d26 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	0e9b      	lsrs	r3, r3, #26
 8004d18:	3301      	adds	r3, #1
 8004d1a:	f003 031f 	and.w	r3, r3, #31
 8004d1e:	2101      	movs	r1, #1
 8004d20:	fa01 f303 	lsl.w	r3, r1, r3
 8004d24:	e017      	b.n	8004d56 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	fa93 f3a3 	rbit	r3, r3
 8004d32:	61bb      	str	r3, [r7, #24]
  return result;
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004d3e:	2320      	movs	r3, #32
 8004d40:	e003      	b.n	8004d4a <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	fab3 f383 	clz	r3, r3
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	2101      	movs	r1, #1
 8004d52:	fa01 f303 	lsl.w	r3, r1, r3
 8004d56:	ea42 0103 	orr.w	r1, r2, r3
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10d      	bne.n	8004d82 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	0e9b      	lsrs	r3, r3, #26
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	f003 021f 	and.w	r2, r3, #31
 8004d72:	4613      	mov	r3, r2
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	4413      	add	r3, r2
 8004d78:	3b1e      	subs	r3, #30
 8004d7a:	051b      	lsls	r3, r3, #20
 8004d7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d80:	e01e      	b.n	8004dc0 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	fa93 f3a3 	rbit	r3, r3
 8004d8e:	60fb      	str	r3, [r7, #12]
  return result;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d104      	bne.n	8004da4 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004d9a:	2320      	movs	r3, #32
 8004d9c:	e006      	b.n	8004dac <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004d9e:	bf00      	nop
 8004da0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	fab3 f383 	clz	r3, r3
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	3301      	adds	r3, #1
 8004dae:	f003 021f 	and.w	r2, r3, #31
 8004db2:	4613      	mov	r3, r2
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	4413      	add	r3, r2
 8004db8:	3b1e      	subs	r3, #30
 8004dba:	051b      	lsls	r3, r3, #20
 8004dbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dc0:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	f7ff f8b2 	bl	8003f30 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8004ebc <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d067      	beq.n	8004ea8 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004dd8:	4839      	ldr	r0, [pc, #228]	@ (8004ec0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004dda:	f7fe ffef 	bl	8003dbc <LL_ADC_GetCommonPathInternalCh>
 8004dde:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a37      	ldr	r2, [pc, #220]	@ (8004ec4 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d004      	beq.n	8004df6 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a35      	ldr	r2, [pc, #212]	@ (8004ec8 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d127      	bne.n	8004e46 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004df6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004dfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d121      	bne.n	8004e46 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e0a:	d14d      	bne.n	8004ea8 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e14:	4619      	mov	r1, r3
 8004e16:	482a      	ldr	r0, [pc, #168]	@ (8004ec0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004e18:	f7fe ffbd 	bl	8003d96 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ecc <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	099b      	lsrs	r3, r3, #6
 8004e22:	4a2b      	ldr	r2, [pc, #172]	@ (8004ed0 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	099a      	lsrs	r2, r3, #6
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004e34:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004e36:	e002      	b.n	8004e3e <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f9      	bne.n	8004e38 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e44:	e030      	b.n	8004ea8 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a22      	ldr	r2, [pc, #136]	@ (8004ed4 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d113      	bne.n	8004e78 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10d      	bne.n	8004e78 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed8 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d020      	beq.n	8004ea8 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4813      	ldr	r0, [pc, #76]	@ (8004ec0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004e72:	f7fe ff90 	bl	8003d96 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e76:	e017      	b.n	8004ea8 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a17      	ldr	r2, [pc, #92]	@ (8004edc <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d112      	bne.n	8004ea8 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a11      	ldr	r2, [pc, #68]	@ (8004ed8 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d007      	beq.n	8004ea8 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4807      	ldr	r0, [pc, #28]	@ (8004ec0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004ea4:	f7fe ff77 	bl	8003d96 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004eb0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	37d8      	adds	r7, #216	@ 0xd8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	80080000 	.word	0x80080000
 8004ec0:	50000300 	.word	0x50000300
 8004ec4:	c3210000 	.word	0xc3210000
 8004ec8:	90c00010 	.word	0x90c00010
 8004ecc:	20000000 	.word	0x20000000
 8004ed0:	053e2d63 	.word	0x053e2d63
 8004ed4:	c7520000 	.word	0xc7520000
 8004ed8:	50000100 	.word	0x50000100
 8004edc:	cb840000 	.word	0xcb840000

08004ee0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004ee0:	b590      	push	{r4, r7, lr}
 8004ee2:	b0a1      	sub	sp, #132	@ 0x84
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e08b      	b.n	8005016 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004f06:	2300      	movs	r3, #0
 8004f08:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f16:	d102      	bne.n	8004f1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f18:	4b41      	ldr	r3, [pc, #260]	@ (8005020 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	e001      	b.n	8004f22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10b      	bne.n	8004f40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e06a      	b.n	8005016 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff f892 	bl	800406c <LL_ADC_REG_IsConversionOngoing>
 8004f48:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff f88c 	bl	800406c <LL_ADC_REG_IsConversionOngoing>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d14c      	bne.n	8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004f5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d149      	bne.n	8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f60:	4b30      	ldr	r3, [pc, #192]	@ (8005024 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004f62:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d028      	beq.n	8004fbe <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	6859      	ldr	r1, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f7e:	035b      	lsls	r3, r3, #13
 8004f80:	430b      	orrs	r3, r1
 8004f82:	431a      	orrs	r2, r3
 8004f84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f88:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004f8c:	f7ff f82e 	bl	8003fec <LL_ADC_IsEnabled>
 8004f90:	4604      	mov	r4, r0
 8004f92:	4823      	ldr	r0, [pc, #140]	@ (8005020 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f94:	f7ff f82a 	bl	8003fec <LL_ADC_IsEnabled>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	4323      	orrs	r3, r4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d133      	bne.n	8005008 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004fa8:	f023 030f 	bic.w	r3, r3, #15
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	6811      	ldr	r1, [r2, #0]
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	6892      	ldr	r2, [r2, #8]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fba:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fbc:	e024      	b.n	8005008 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004fbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fc8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fca:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004fce:	f7ff f80d 	bl	8003fec <LL_ADC_IsEnabled>
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	4812      	ldr	r0, [pc, #72]	@ (8005020 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004fd6:	f7ff f809 	bl	8003fec <LL_ADC_IsEnabled>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4323      	orrs	r3, r4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d112      	bne.n	8005008 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004fe2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004fea:	f023 030f 	bic.w	r3, r3, #15
 8004fee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004ff0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ff2:	e009      	b.n	8005008 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff8:	f043 0220 	orr.w	r2, r3, #32
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005006:	e000      	b.n	800500a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005008:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005012:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005016:	4618      	mov	r0, r3
 8005018:	3784      	adds	r7, #132	@ 0x84
 800501a:	46bd      	mov	sp, r7
 800501c:	bd90      	pop	{r4, r7, pc}
 800501e:	bf00      	nop
 8005020:	50000100 	.word	0x50000100
 8005024:	50000300 	.word	0x50000300

08005028 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005030:	4b05      	ldr	r3, [pc, #20]	@ (8005048 <LL_EXTI_EnableIT_0_31+0x20>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	4904      	ldr	r1, [pc, #16]	@ (8005048 <LL_EXTI_EnableIT_0_31+0x20>)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4313      	orrs	r3, r2
 800503a:	600b      	str	r3, [r1, #0]
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	40010400 	.word	0x40010400

0800504c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005054:	4b06      	ldr	r3, [pc, #24]	@ (8005070 <LL_EXTI_DisableIT_0_31+0x24>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	43db      	mvns	r3, r3
 800505c:	4904      	ldr	r1, [pc, #16]	@ (8005070 <LL_EXTI_DisableIT_0_31+0x24>)
 800505e:	4013      	ands	r3, r2
 8005060:	600b      	str	r3, [r1, #0]
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40010400 	.word	0x40010400

08005074 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800507c:	4b05      	ldr	r3, [pc, #20]	@ (8005094 <LL_EXTI_EnableEvent_0_31+0x20>)
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	4904      	ldr	r1, [pc, #16]	@ (8005094 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4313      	orrs	r3, r2
 8005086:	604b      	str	r3, [r1, #4]

}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	40010400 	.word	0x40010400

08005098 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80050a0:	4b06      	ldr	r3, [pc, #24]	@ (80050bc <LL_EXTI_DisableEvent_0_31+0x24>)
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	43db      	mvns	r3, r3
 80050a8:	4904      	ldr	r1, [pc, #16]	@ (80050bc <LL_EXTI_DisableEvent_0_31+0x24>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	604b      	str	r3, [r1, #4]
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40010400 	.word	0x40010400

080050c0 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80050c8:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	4904      	ldr	r1, [pc, #16]	@ (80050e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	608b      	str	r3, [r1, #8]

}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	40010400 	.word	0x40010400

080050e4 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80050ec:	4b06      	ldr	r3, [pc, #24]	@ (8005108 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	43db      	mvns	r3, r3
 80050f4:	4904      	ldr	r1, [pc, #16]	@ (8005108 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	608b      	str	r3, [r1, #8]

}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40010400 	.word	0x40010400

0800510c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005114:	4b05      	ldr	r3, [pc, #20]	@ (800512c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	4904      	ldr	r1, [pc, #16]	@ (800512c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4313      	orrs	r3, r2
 800511e:	60cb      	str	r3, [r1, #12]
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	40010400 	.word	0x40010400

08005130 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005138:	4b06      	ldr	r3, [pc, #24]	@ (8005154 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	43db      	mvns	r3, r3
 8005140:	4904      	ldr	r1, [pc, #16]	@ (8005154 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005142:	4013      	ands	r3, r2
 8005144:	60cb      	str	r3, [r1, #12]
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40010400 	.word	0x40010400

08005158 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8005160:	4b07      	ldr	r3, [pc, #28]	@ (8005180 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8005162:	695a      	ldr	r2, [r3, #20]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4013      	ands	r3, r2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	429a      	cmp	r2, r3
 800516c:	d101      	bne.n	8005172 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	40010400 	.word	0x40010400

08005184 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800518c:	4a04      	ldr	r2, [pc, #16]	@ (80051a0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6153      	str	r3, [r2, #20]
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40010400 	.word	0x40010400

080051a4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d102      	bne.n	80051c0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	77fb      	strb	r3, [r7, #31]
 80051be:	e0bc      	b.n	800533a <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051ce:	d102      	bne.n	80051d6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	77fb      	strb	r3, [r7, #31]
 80051d4:	e0b1      	b.n	800533a <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	7f5b      	ldrb	r3, [r3, #29]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d108      	bne.n	80051f2 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7fc f969 	bl	80014c4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051fc:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4b48      	ldr	r3, [pc, #288]	@ (8005344 <HAL_COMP_Init+0x1a0>)
 8005224:	4013      	ands	r3, r2
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6812      	ldr	r2, [r2, #0]
 800522a:	6979      	ldr	r1, [r7, #20]
 800522c:	430b      	orrs	r3, r1
 800522e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d016      	beq.n	800526c <HAL_COMP_Init+0xc8>
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d113      	bne.n	800526c <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005244:	4b40      	ldr	r3, [pc, #256]	@ (8005348 <HAL_COMP_Init+0x1a4>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	099b      	lsrs	r3, r3, #6
 800524a:	4a40      	ldr	r2, [pc, #256]	@ (800534c <HAL_COMP_Init+0x1a8>)
 800524c:	fba2 2303 	umull	r2, r3, r2, r3
 8005250:	099b      	lsrs	r3, r3, #6
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800525e:	e002      	b.n	8005266 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3b01      	subs	r3, #1
 8005264:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f9      	bne.n	8005260 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a37      	ldr	r2, [pc, #220]	@ (8005350 <HAL_COMP_Init+0x1ac>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d012      	beq.n	800529c <HAL_COMP_Init+0xf8>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a36      	ldr	r2, [pc, #216]	@ (8005354 <HAL_COMP_Init+0x1b0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00a      	beq.n	8005296 <HAL_COMP_Init+0xf2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a34      	ldr	r2, [pc, #208]	@ (8005358 <HAL_COMP_Init+0x1b4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d102      	bne.n	8005290 <HAL_COMP_Init+0xec>
 800528a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800528e:	e007      	b.n	80052a0 <HAL_COMP_Init+0xfc>
 8005290:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005294:	e004      	b.n	80052a0 <HAL_COMP_Init+0xfc>
 8005296:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800529a:	e001      	b.n	80052a0 <HAL_COMP_Init+0xfc>
 800529c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80052a0:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d037      	beq.n	800531e <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80052ba:	6938      	ldr	r0, [r7, #16]
 80052bc:	f7ff ff00 	bl	80050c0 <LL_EXTI_EnableRisingTrig_0_31>
 80052c0:	e002      	b.n	80052c8 <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80052c2:	6938      	ldr	r0, [r7, #16]
 80052c4:	f7ff ff0e 	bl	80050e4 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80052d4:	6938      	ldr	r0, [r7, #16]
 80052d6:	f7ff ff19 	bl	800510c <LL_EXTI_EnableFallingTrig_0_31>
 80052da:	e002      	b.n	80052e2 <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80052dc:	6938      	ldr	r0, [r7, #16]
 80052de:	f7ff ff27 	bl	8005130 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 80052e2:	6938      	ldr	r0, [r7, #16]
 80052e4:	f7ff ff4e 	bl	8005184 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 80052f4:	6938      	ldr	r0, [r7, #16]
 80052f6:	f7ff febd 	bl	8005074 <LL_EXTI_EnableEvent_0_31>
 80052fa:	e002      	b.n	8005302 <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 80052fc:	6938      	ldr	r0, [r7, #16]
 80052fe:	f7ff fecb 	bl	8005098 <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 800530e:	6938      	ldr	r0, [r7, #16]
 8005310:	f7ff fe8a 	bl	8005028 <LL_EXTI_EnableIT_0_31>
 8005314:	e009      	b.n	800532a <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 8005316:	6938      	ldr	r0, [r7, #16]
 8005318:	f7ff fe98 	bl	800504c <LL_EXTI_DisableIT_0_31>
 800531c:	e005      	b.n	800532a <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 800531e:	6938      	ldr	r0, [r7, #16]
 8005320:	f7ff feba 	bl	8005098 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8005324:	6938      	ldr	r0, [r7, #16]
 8005326:	f7ff fe91 	bl	800504c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	7f5b      	ldrb	r3, [r3, #29]
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800533a:	7ffb      	ldrb	r3, [r7, #31]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	ff007e0f 	.word	0xff007e0f
 8005348:	20000000 	.word	0x20000000
 800534c:	053e2d63 	.word	0x053e2d63
 8005350:	40010200 	.word	0x40010200
 8005354:	40010204 	.word	0x40010204
 8005358:	40010208 	.word	0x40010208

0800535c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005364:	2300      	movs	r3, #0
 8005366:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d102      	bne.n	8005378 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
 8005376:	e02e      	b.n	80053d6 <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005382:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005386:	d102      	bne.n	800538e <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
 800538c:	e023      	b.n	80053d6 <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	7f5b      	ldrb	r3, [r3, #29]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	d11c      	bne.n	80053d2 <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0201 	orr.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 80053ae:	4b0d      	ldr	r3, [pc, #52]	@ (80053e4 <HAL_COMP_Start+0x88>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a0d      	ldr	r2, [pc, #52]	@ (80053e8 <HAL_COMP_Start+0x8c>)
 80053b4:	fba2 2303 	umull	r2, r3, r2, r3
 80053b8:	0cda      	lsrs	r2, r3, #19
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80053c2:	e002      	b.n	80053ca <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1f9      	bne.n	80053c4 <HAL_COMP_Start+0x68>
 80053d0:	e001      	b.n	80053d6 <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	20000000 	.word	0x20000000
 80053e8:	431bde83 	.word	0x431bde83

080053ec <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a17      	ldr	r2, [pc, #92]	@ (8005458 <HAL_COMP_IRQHandler+0x6c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d012      	beq.n	8005424 <HAL_COMP_IRQHandler+0x38>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a16      	ldr	r2, [pc, #88]	@ (800545c <HAL_COMP_IRQHandler+0x70>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00a      	beq.n	800541e <HAL_COMP_IRQHandler+0x32>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a14      	ldr	r2, [pc, #80]	@ (8005460 <HAL_COMP_IRQHandler+0x74>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d102      	bne.n	8005418 <HAL_COMP_IRQHandler+0x2c>
 8005412:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005416:	e007      	b.n	8005428 <HAL_COMP_IRQHandler+0x3c>
 8005418:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800541c:	e004      	b.n	8005428 <HAL_COMP_IRQHandler+0x3c>
 800541e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005422:	e001      	b.n	8005428 <HAL_COMP_IRQHandler+0x3c>
 8005424:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005428:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800542e:	68b8      	ldr	r0, [r7, #8]
 8005430:	f7ff fe92 	bl	8005158 <LL_EXTI_IsActiveFlag_0_31>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 800543a:	2301      	movs	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <HAL_COMP_IRQHandler+0x64>
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
    }
#else
    LL_EXTI_ClearFlag_0_31(exti_line);
 8005444:	68b8      	ldr	r0, [r7, #8]
 8005446:	f7ff fe9d 	bl	8005184 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f80a 	bl	8005464 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40010200 	.word	0x40010200
 800545c:	40010204 	.word	0x40010204
 8005460:	40010208 	.word	0x40010208

08005464 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005488:	4b0c      	ldr	r3, [pc, #48]	@ (80054bc <__NVIC_SetPriorityGrouping+0x44>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005494:	4013      	ands	r3, r2
 8005496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80054a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054aa:	4a04      	ldr	r2, [pc, #16]	@ (80054bc <__NVIC_SetPriorityGrouping+0x44>)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	60d3      	str	r3, [r2, #12]
}
 80054b0:	bf00      	nop
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	e000ed00 	.word	0xe000ed00

080054c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054c4:	4b04      	ldr	r3, [pc, #16]	@ (80054d8 <__NVIC_GetPriorityGrouping+0x18>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	0a1b      	lsrs	r3, r3, #8
 80054ca:	f003 0307 	and.w	r3, r3, #7
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	e000ed00 	.word	0xe000ed00

080054dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	4603      	mov	r3, r0
 80054e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	db0b      	blt.n	8005506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	f003 021f 	and.w	r2, r3, #31
 80054f4:	4907      	ldr	r1, [pc, #28]	@ (8005514 <__NVIC_EnableIRQ+0x38>)
 80054f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	2001      	movs	r0, #1
 80054fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	e000e100 	.word	0xe000e100

08005518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	4603      	mov	r3, r0
 8005520:	6039      	str	r1, [r7, #0]
 8005522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005528:	2b00      	cmp	r3, #0
 800552a:	db0a      	blt.n	8005542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	b2da      	uxtb	r2, r3
 8005530:	490c      	ldr	r1, [pc, #48]	@ (8005564 <__NVIC_SetPriority+0x4c>)
 8005532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005536:	0112      	lsls	r2, r2, #4
 8005538:	b2d2      	uxtb	r2, r2
 800553a:	440b      	add	r3, r1
 800553c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005540:	e00a      	b.n	8005558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	4908      	ldr	r1, [pc, #32]	@ (8005568 <__NVIC_SetPriority+0x50>)
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	3b04      	subs	r3, #4
 8005550:	0112      	lsls	r2, r2, #4
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	440b      	add	r3, r1
 8005556:	761a      	strb	r2, [r3, #24]
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	e000e100 	.word	0xe000e100
 8005568:	e000ed00 	.word	0xe000ed00

0800556c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800556c:	b480      	push	{r7}
 800556e:	b089      	sub	sp, #36	@ 0x24
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	f1c3 0307 	rsb	r3, r3, #7
 8005586:	2b04      	cmp	r3, #4
 8005588:	bf28      	it	cs
 800558a:	2304      	movcs	r3, #4
 800558c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	3304      	adds	r3, #4
 8005592:	2b06      	cmp	r3, #6
 8005594:	d902      	bls.n	800559c <NVIC_EncodePriority+0x30>
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	3b03      	subs	r3, #3
 800559a:	e000      	b.n	800559e <NVIC_EncodePriority+0x32>
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a0:	f04f 32ff 	mov.w	r2, #4294967295
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	fa02 f303 	lsl.w	r3, r2, r3
 80055aa:	43da      	mvns	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	401a      	ands	r2, r3
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055b4:	f04f 31ff 	mov.w	r1, #4294967295
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	fa01 f303 	lsl.w	r3, r1, r3
 80055be:	43d9      	mvns	r1, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055c4:	4313      	orrs	r3, r2
         );
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3724      	adds	r7, #36	@ 0x24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
	...

080055d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3b01      	subs	r3, #1
 80055e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055e4:	d301      	bcc.n	80055ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055e6:	2301      	movs	r3, #1
 80055e8:	e00f      	b.n	800560a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005614 <SysTick_Config+0x40>)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055f2:	210f      	movs	r1, #15
 80055f4:	f04f 30ff 	mov.w	r0, #4294967295
 80055f8:	f7ff ff8e 	bl	8005518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055fc:	4b05      	ldr	r3, [pc, #20]	@ (8005614 <SysTick_Config+0x40>)
 80055fe:	2200      	movs	r2, #0
 8005600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005602:	4b04      	ldr	r3, [pc, #16]	@ (8005614 <SysTick_Config+0x40>)
 8005604:	2207      	movs	r2, #7
 8005606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	e000e010 	.word	0xe000e010

08005618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff ff29 	bl	8005478 <__NVIC_SetPriorityGrouping>
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b086      	sub	sp, #24
 8005632:	af00      	add	r7, sp, #0
 8005634:	4603      	mov	r3, r0
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	607a      	str	r2, [r7, #4]
 800563a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800563c:	f7ff ff40 	bl	80054c0 <__NVIC_GetPriorityGrouping>
 8005640:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	68b9      	ldr	r1, [r7, #8]
 8005646:	6978      	ldr	r0, [r7, #20]
 8005648:	f7ff ff90 	bl	800556c <NVIC_EncodePriority>
 800564c:	4602      	mov	r2, r0
 800564e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005652:	4611      	mov	r1, r2
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff ff5f 	bl	8005518 <__NVIC_SetPriority>
}
 800565a:	bf00      	nop
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	4603      	mov	r3, r0
 800566a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800566c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff ff33 	bl	80054dc <__NVIC_EnableIRQ>
}
 8005676:	bf00      	nop
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff ffa4 	bl	80055d4 <SysTick_Config>
 800568c:	4603      	mov	r3, r0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e014      	b.n	80056d2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	791b      	ldrb	r3, [r3, #4]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d105      	bne.n	80056be <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7fb ff79 	bl	80015b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
	...

080056dc <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e056      	b.n	800579e <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	795b      	ldrb	r3, [r3, #5]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_DAC_Start+0x20>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e050      	b.n	800579e <HAL_DAC_Start+0xc2>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2202      	movs	r2, #2
 8005706:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6819      	ldr	r1, [r3, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2201      	movs	r2, #1
 8005716:	409a      	lsls	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005720:	4b22      	ldr	r3, [pc, #136]	@ (80057ac <HAL_DAC_Start+0xd0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	099b      	lsrs	r3, r3, #6
 8005726:	4a22      	ldr	r2, [pc, #136]	@ (80057b0 <HAL_DAC_Start+0xd4>)
 8005728:	fba2 2303 	umull	r2, r3, r2, r3
 800572c:	099b      	lsrs	r3, r3, #6
 800572e:	3301      	adds	r3, #1
 8005730:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005732:	e002      	b.n	800573a <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	3b01      	subs	r3, #1
 8005738:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1f9      	bne.n	8005734 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10f      	bne.n	8005766 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005750:	2b02      	cmp	r3, #2
 8005752:	d11d      	bne.n	8005790 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	605a      	str	r2, [r3, #4]
 8005764:	e014      	b.n	8005790 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2102      	movs	r1, #2
 8005778:	fa01 f303 	lsl.w	r3, r1, r3
 800577c:	429a      	cmp	r2, r3
 800577e:	d107      	bne.n	8005790 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0202 	orr.w	r2, r2, #2
 800578e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	20000000 	.word	0x20000000
 80057b0:	053e2d63 	.word	0x053e2d63

080057b4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e018      	b.n	8005802 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d105      	bne.n	80057ee <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4413      	add	r3, r2
 80057e8:	3308      	adds	r3, #8
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	e004      	b.n	80057f8 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4413      	add	r3, r2
 80057f4:	3314      	adds	r3, #20
 80057f6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	461a      	mov	r2, r3
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	371c      	adds	r7, #28
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	@ 0x28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <HAL_DAC_ConfigChannel+0x1c>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e19e      	b.n	8005b6e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	795b      	ldrb	r3, [r3, #5]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_DAC_ConfigChannel+0x2c>
 8005838:	2302      	movs	r3, #2
 800583a:	e198      	b.n	8005b6e <HAL_DAC_ConfigChannel+0x35e>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2202      	movs	r2, #2
 8005846:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b04      	cmp	r3, #4
 800584e:	d17a      	bne.n	8005946 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005850:	f7fc ffb2 	bl	80027b8 <HAL_GetTick>
 8005854:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d13d      	bne.n	80058d8 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800585c:	e018      	b.n	8005890 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800585e:	f7fc ffab 	bl	80027b8 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	d911      	bls.n	8005890 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005872:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f043 0208 	orr.w	r2, r3, #8
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2203      	movs	r2, #3
 800588a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e16e      	b.n	8005b6e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005896:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1df      	bne.n	800585e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80058a8:	e020      	b.n	80058ec <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80058aa:	f7fc ff85 	bl	80027b8 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d90f      	bls.n	80058d8 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058be:	2b00      	cmp	r3, #0
 80058c0:	da0a      	bge.n	80058d8 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f043 0208 	orr.w	r2, r3, #8
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2203      	movs	r2, #3
 80058d2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e14a      	b.n	8005b6e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058de:	2b00      	cmp	r3, #0
 80058e0:	dbe3      	blt.n	80058aa <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80058fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005900:	43db      	mvns	r3, r3
 8005902:	ea02 0103 	and.w	r1, r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	409a      	lsls	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f003 0310 	and.w	r3, r3, #16
 8005926:	21ff      	movs	r1, #255	@ 0xff
 8005928:	fa01 f303 	lsl.w	r3, r1, r3
 800592c:	43db      	mvns	r3, r3
 800592e:	ea02 0103 	and.w	r1, r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	409a      	lsls	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d11d      	bne.n	800598a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005954:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	221f      	movs	r2, #31
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	43db      	mvns	r3, r3
 8005964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005966:	4013      	ands	r3, r2
 8005968:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800597e:	4313      	orrs	r3, r2
 8005980:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005988:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005990:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2207      	movs	r2, #7
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	43db      	mvns	r3, r3
 80059a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059a2:	4013      	ands	r3, r2
 80059a4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d102      	bne.n	80059b4 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	623b      	str	r3, [r7, #32]
 80059b2:	e00f      	b.n	80059d4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d102      	bne.n	80059c2 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80059bc:	2301      	movs	r3, #1
 80059be:	623b      	str	r3, [r7, #32]
 80059c0:	e008      	b.n	80059d4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d102      	bne.n	80059d0 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80059ca:	2301      	movs	r3, #1
 80059cc:	623b      	str	r3, [r7, #32]
 80059ce:	e001      	b.n	80059d4 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80059d0:	2300      	movs	r3, #0
 80059d2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	6a3a      	ldr	r2, [r7, #32]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f003 0310 	and.w	r3, r3, #16
 80059ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	43db      	mvns	r3, r3
 80059f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f6:	4013      	ands	r3, r2
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	791b      	ldrb	r3, [r3, #4]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d102      	bne.n	8005a08 <HAL_DAC_ConfigChannel+0x1f8>
 8005a02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a06:	e000      	b.n	8005a0a <HAL_DAC_ConfigChannel+0x1fa>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a22:	4013      	ands	r3, r2
 8005a24:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	795b      	ldrb	r3, [r3, #5]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d102      	bne.n	8005a34 <HAL_DAC_ConfigChannel+0x224>
 8005a2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a32:	e000      	b.n	8005a36 <HAL_DAC_ConfigChannel+0x226>
 8005a34:	2300      	movs	r3, #0
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d114      	bne.n	8005a76 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005a4c:	f001 ff7c 	bl	8007948 <HAL_RCC_GetHCLKFreq>
 8005a50:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	4a48      	ldr	r2, [pc, #288]	@ (8005b78 <HAL_DAC_ConfigChannel+0x368>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d904      	bls.n	8005a64 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a62:	e00f      	b.n	8005a84 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	4a45      	ldr	r2, [pc, #276]	@ (8005b7c <HAL_DAC_ConfigChannel+0x36c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d90a      	bls.n	8005a82 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a74:	e006      	b.n	8005a84 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a80:	e000      	b.n	8005a84 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005a82:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f003 0310 	and.w	r3, r3, #16
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a92:	4313      	orrs	r3, r2
 8005a94:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6819      	ldr	r1, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f003 0310 	and.w	r3, r3, #16
 8005aaa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	43da      	mvns	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	400a      	ands	r2, r1
 8005aba:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f003 0310 	and.w	r3, r3, #16
 8005aca:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aee:	4313      	orrs	r3, r2
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6819      	ldr	r1, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	22c0      	movs	r2, #192	@ 0xc0
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	43da      	mvns	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	400a      	ands	r2, r1
 8005b14:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	089b      	lsrs	r3, r3, #2
 8005b1c:	f003 030f 	and.w	r3, r3, #15
 8005b20:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	089b      	lsrs	r3, r3, #2
 8005b28:	021b      	lsls	r3, r3, #8
 8005b2a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	ea02 0103 	and.w	r1, r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	409a      	lsls	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005b6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3728      	adds	r7, #40	@ 0x28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	09896800 	.word	0x09896800
 8005b7c:	04c4b400 	.word	0x04c4b400

08005b80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e08d      	b.n	8005cae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	4b47      	ldr	r3, [pc, #284]	@ (8005cb8 <HAL_DMA_Init+0x138>)
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d80f      	bhi.n	8005bbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	4b45      	ldr	r3, [pc, #276]	@ (8005cbc <HAL_DMA_Init+0x13c>)
 8005ba6:	4413      	add	r3, r2
 8005ba8:	4a45      	ldr	r2, [pc, #276]	@ (8005cc0 <HAL_DMA_Init+0x140>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	091b      	lsrs	r3, r3, #4
 8005bb0:	009a      	lsls	r2, r3, #2
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a42      	ldr	r2, [pc, #264]	@ (8005cc4 <HAL_DMA_Init+0x144>)
 8005bba:	641a      	str	r2, [r3, #64]	@ 0x40
 8005bbc:	e00e      	b.n	8005bdc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	4b40      	ldr	r3, [pc, #256]	@ (8005cc8 <HAL_DMA_Init+0x148>)
 8005bc6:	4413      	add	r3, r2
 8005bc8:	4a3d      	ldr	r2, [pc, #244]	@ (8005cc0 <HAL_DMA_Init+0x140>)
 8005bca:	fba2 2303 	umull	r2, r3, r2, r3
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	009a      	lsls	r2, r3, #2
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a3c      	ldr	r2, [pc, #240]	@ (8005ccc <HAL_DMA_Init+0x14c>)
 8005bda:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f9be 	bl	8005fb0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c3c:	d102      	bne.n	8005c44 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c58:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d010      	beq.n	8005c84 <HAL_DMA_Init+0x104>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d80c      	bhi.n	8005c84 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f9de 	bl	800602c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c80:	605a      	str	r2, [r3, #4]
 8005c82:	e008      	b.n	8005c96 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40020407 	.word	0x40020407
 8005cbc:	bffdfff8 	.word	0xbffdfff8
 8005cc0:	cccccccd 	.word	0xcccccccd
 8005cc4:	40020000 	.word	0x40020000
 8005cc8:	bffdfbf8 	.word	0xbffdfbf8
 8005ccc:	40020400 	.word	0x40020400

08005cd0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d005      	beq.n	8005cf4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2204      	movs	r2, #4
 8005cec:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	73fb      	strb	r3, [r7, #15]
 8005cf2:	e037      	b.n	8005d64 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 020e 	bic.w	r2, r2, #14
 8005d02:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d12:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0201 	bic.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d28:	f003 021f 	and.w	r2, r3, #31
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d30:	2101      	movs	r1, #1
 8005d32:	fa01 f202 	lsl.w	r2, r1, r2
 8005d36:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d40:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00c      	beq.n	8005d64 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d58:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005d62:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d00d      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
 8005db4:	e047      	b.n	8005e46 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 020e 	bic.w	r2, r2, #14
 8005dc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0201 	bic.w	r2, r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005de0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005de4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dea:	f003 021f 	and.w	r2, r3, #31
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df2:	2101      	movs	r1, #1
 8005df4:	fa01 f202 	lsl.w	r2, r1, r2
 8005df8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e02:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00c      	beq.n	8005e26 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e24:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
    }
  }
  return status;
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e6c:	f003 031f 	and.w	r3, r3, #31
 8005e70:	2204      	movs	r2, #4
 8005e72:	409a      	lsls	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4013      	ands	r3, r2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d026      	beq.n	8005eca <HAL_DMA_IRQHandler+0x7a>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f003 0304 	and.w	r3, r3, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d021      	beq.n	8005eca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d107      	bne.n	8005ea4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0204 	bic.w	r2, r2, #4
 8005ea2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea8:	f003 021f 	and.w	r2, r3, #31
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb0:	2104      	movs	r1, #4
 8005eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8005eb6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d071      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005ec8:	e06c      	b.n	8005fa4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ece:	f003 031f 	and.w	r3, r3, #31
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	409a      	lsls	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d02e      	beq.n	8005f3c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d029      	beq.n	8005f3c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10b      	bne.n	8005f0e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 020a 	bic.w	r2, r2, #10
 8005f04:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f12:	f003 021f 	and.w	r2, r3, #31
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1a:	2102      	movs	r1, #2
 8005f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f20:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d038      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005f3a:	e033      	b.n	8005fa4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f40:	f003 031f 	and.w	r3, r3, #31
 8005f44:	2208      	movs	r2, #8
 8005f46:	409a      	lsls	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d02a      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d025      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 020e 	bic.w	r2, r2, #14
 8005f68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6e:	f003 021f 	and.w	r2, r3, #31
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f76:	2101      	movs	r1, #1
 8005f78:	fa01 f202 	lsl.w	r2, r1, r2
 8005f7c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d004      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
}
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4b16      	ldr	r3, [pc, #88]	@ (8006018 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d802      	bhi.n	8005fca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005fc4:	4b15      	ldr	r3, [pc, #84]	@ (800601c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	e001      	b.n	8005fce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005fca:	4b15      	ldr	r3, [pc, #84]	@ (8006020 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005fcc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	3b08      	subs	r3, #8
 8005fda:	4a12      	ldr	r2, [pc, #72]	@ (8006024 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe0:	091b      	lsrs	r3, r3, #4
 8005fe2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe8:	089b      	lsrs	r3, r3, #2
 8005fea:	009a      	lsls	r2, r3, #2
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4413      	add	r3, r2
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8006028 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005ffa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f003 031f 	and.w	r3, r3, #31
 8006002:	2201      	movs	r2, #1
 8006004:	409a      	lsls	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40020407 	.word	0x40020407
 800601c:	40020800 	.word	0x40020800
 8006020:	40020820 	.word	0x40020820
 8006024:	cccccccd 	.word	0xcccccccd
 8006028:	40020880 	.word	0x40020880

0800602c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4b0b      	ldr	r3, [pc, #44]	@ (800606c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	461a      	mov	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a08      	ldr	r2, [pc, #32]	@ (8006070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800604e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3b01      	subs	r3, #1
 8006054:	f003 031f 	and.w	r3, r3, #31
 8006058:	2201      	movs	r2, #1
 800605a:	409a      	lsls	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006060:	bf00      	nop
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	1000823f 	.word	0x1000823f
 8006070:	40020940 	.word	0x40020940

08006074 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e147      	b.n	8006316 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7fb fb18 	bl	80016d0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699a      	ldr	r2, [r3, #24]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0210 	bic.w	r2, r2, #16
 80060ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060b0:	f7fc fb82 	bl	80027b8 <HAL_GetTick>
 80060b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80060b6:	e012      	b.n	80060de <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80060b8:	f7fc fb7e 	bl	80027b8 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b0a      	cmp	r3, #10
 80060c4:	d90b      	bls.n	80060de <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ca:	f043 0201 	orr.w	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2203      	movs	r2, #3
 80060d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e11b      	b.n	8006316 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d0e5      	beq.n	80060b8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699a      	ldr	r2, [r3, #24]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060fc:	f7fc fb5c 	bl	80027b8 <HAL_GetTick>
 8006100:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006102:	e012      	b.n	800612a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006104:	f7fc fb58 	bl	80027b8 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b0a      	cmp	r3, #10
 8006110:	d90b      	bls.n	800612a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006116:	f043 0201 	orr.w	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2203      	movs	r2, #3
 8006122:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e0f5      	b.n	8006316 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0e5      	beq.n	8006104 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0202 	orr.w	r2, r2, #2
 8006146:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a74      	ldr	r2, [pc, #464]	@ (8006320 <HAL_FDCAN_Init+0x2ac>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d103      	bne.n	800615a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006152:	4a74      	ldr	r2, [pc, #464]	@ (8006324 <HAL_FDCAN_Init+0x2b0>)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	7c1b      	ldrb	r3, [r3, #16]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d108      	bne.n	8006174 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	699a      	ldr	r2, [r3, #24]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006170:	619a      	str	r2, [r3, #24]
 8006172:	e007      	b.n	8006184 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006182:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	7c5b      	ldrb	r3, [r3, #17]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d108      	bne.n	800619e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699a      	ldr	r2, [r3, #24]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800619a:	619a      	str	r2, [r3, #24]
 800619c:	e007      	b.n	80061ae <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	699a      	ldr	r2, [r3, #24]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80061ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	7c9b      	ldrb	r3, [r3, #18]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d108      	bne.n	80061c8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	699a      	ldr	r2, [r3, #24]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80061c4:	619a      	str	r2, [r3, #24]
 80061c6:	e007      	b.n	80061d8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80061d6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	699a      	ldr	r2, [r3, #24]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80061fc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0210 	bic.w	r2, r2, #16
 800620c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d108      	bne.n	8006228 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	699a      	ldr	r2, [r3, #24]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0204 	orr.w	r2, r2, #4
 8006224:	619a      	str	r2, [r3, #24]
 8006226:	e02c      	b.n	8006282 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d028      	beq.n	8006282 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2b02      	cmp	r3, #2
 8006236:	d01c      	beq.n	8006272 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006246:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0210 	orr.w	r2, r2, #16
 8006256:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	2b03      	cmp	r3, #3
 800625e:	d110      	bne.n	8006282 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0220 	orr.w	r2, r2, #32
 800626e:	619a      	str	r2, [r3, #24]
 8006270:	e007      	b.n	8006282 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	699a      	ldr	r2, [r3, #24]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f042 0220 	orr.w	r2, r2, #32
 8006280:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	3b01      	subs	r3, #1
 8006288:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	3b01      	subs	r3, #1
 8006290:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006292:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800629a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80062aa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80062ac:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062b6:	d115      	bne.n	80062e4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062bc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c2:	3b01      	subs	r3, #1
 80062c4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80062c6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062cc:	3b01      	subs	r3, #1
 80062ce:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80062d0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d8:	3b01      	subs	r3, #1
 80062da:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80062e0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80062e2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fab6 	bl	800686c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	40006400 	.word	0x40006400
 8006324:	40006500 	.word	0x40006500

08006328 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006328:	b480      	push	{r7}
 800632a:	b08b      	sub	sp, #44	@ 0x2c
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006336:	2300      	movs	r3, #0
 8006338:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006340:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006342:	7efb      	ldrb	r3, [r7, #27]
 8006344:	2b02      	cmp	r3, #2
 8006346:	f040 80e8 	bne.w	800651a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b40      	cmp	r3, #64	@ 0x40
 800634e:	d137      	bne.n	80063c0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	2b00      	cmp	r3, #0
 800635e:	d107      	bne.n	8006370 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006364:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e0db      	b.n	8006528 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006378:	0e1b      	lsrs	r3, r3, #24
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b01      	cmp	r3, #1
 8006380:	d10a      	bne.n	8006398 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800638a:	0a5b      	lsrs	r3, r3, #9
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006394:	2301      	movs	r3, #1
 8006396:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a0:	0a1b      	lsrs	r3, r3, #8
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	4413      	add	r3, r2
 80063aa:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	4613      	mov	r3, r2
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	4413      	add	r3, r2
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	440b      	add	r3, r1
 80063bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80063be:	e036      	b.n	800642e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d107      	bne.n	80063e0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e0a3      	b.n	8006528 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063e8:	0e1b      	lsrs	r3, r3, #24
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d10a      	bne.n	8006408 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063fa:	0a1b      	lsrs	r3, r3, #8
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006404:	2301      	movs	r3, #1
 8006406:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006410:	0a1b      	lsrs	r3, r3, #8
 8006412:	f003 0303 	and.w	r3, r3, #3
 8006416:	69fa      	ldr	r2, [r7, #28]
 8006418:	4413      	add	r3, r2
 800641a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	4613      	mov	r3, r2
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	4413      	add	r3, r2
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	440b      	add	r3, r1
 800642c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d107      	bne.n	8006452 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	0c9b      	lsrs	r3, r3, #18
 8006448:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	e005      	b.n	800645e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	3304      	adds	r3, #4
 800647a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	b29a      	uxth	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	0c1b      	lsrs	r3, r3, #16
 800648c:	f003 020f 	and.w	r2, r3, #15
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80064ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	0e1b      	lsrs	r3, r3, #24
 80064b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	0fda      	lsrs	r2, r3, #31
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	3304      	adds	r3, #4
 80064c8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80064ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064cc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80064ce:	2300      	movs	r3, #0
 80064d0:	623b      	str	r3, [r7, #32]
 80064d2:	e00a      	b.n	80064ea <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	441a      	add	r2, r3
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	440b      	add	r3, r1
 80064e0:	7812      	ldrb	r2, [r2, #0]
 80064e2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	3301      	adds	r3, #1
 80064e8:	623b      	str	r3, [r7, #32]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	4a11      	ldr	r2, [pc, #68]	@ (8006534 <HAL_FDCAN_GetRxMessage+0x20c>)
 80064f0:	5cd3      	ldrb	r3, [r2, r3]
 80064f2:	461a      	mov	r2, r3
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d3ec      	bcc.n	80064d4 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b40      	cmp	r3, #64	@ 0x40
 80064fe:	d105      	bne.n	800650c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69fa      	ldr	r2, [r7, #28]
 8006506:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800650a:	e004      	b.n	8006516 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69fa      	ldr	r2, [r7, #28]
 8006512:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	e006      	b.n	8006528 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800651e:	f043 0208 	orr.w	r2, r3, #8
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
  }
}
 8006528:	4618      	mov	r0, r3
 800652a:	372c      	adds	r7, #44	@ 0x2c
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	080116e4 	.word	0x080116e4

08006538 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08c      	sub	sp, #48	@ 0x30
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006546:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800654a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006554:	4013      	ands	r3, r2
 8006556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800656c:	4013      	ands	r3, r2
 800656e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006576:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800657a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006584:	4013      	ands	r3, r2
 8006586:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800658e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8006592:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800659a:	6a3a      	ldr	r2, [r7, #32]
 800659c:	4013      	ands	r3, r2
 800659e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80065aa:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	4013      	ands	r3, r2
 80065b6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065be:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d006      	beq.n	80065ea <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2240      	movs	r2, #64	@ 0x40
 80065e2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f921 	bl	800682c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d019      	beq.n	8006628 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d014      	beq.n	8006628 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006606:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4013      	ands	r3, r2
 8006614:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800661e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006620:	6939      	ldr	r1, [r7, #16]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f8e3 	bl	80067ee <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d007      	beq.n	800663e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006634:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006636:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f8a2 	bl	8006782 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800663e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800664a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800664c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f8a2 	bl	8006798 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006656:	2b00      	cmp	r3, #0
 8006658:	d007      	beq.n	800666a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006660:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006662:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f8a2 	bl	80067ae <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00c      	beq.n	800668e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006686:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f89b 	bl	80067c4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006694:	2b00      	cmp	r3, #0
 8006696:	d018      	beq.n	80066ca <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d013      	beq.n	80066ca <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80066aa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4013      	ands	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2280      	movs	r2, #128	@ 0x80
 80066c0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80066c2:	68f9      	ldr	r1, [r7, #12]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f887 	bl	80067d8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00c      	beq.n	80066ee <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d007      	beq.n	80066ee <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80066e6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f88b 	bl	8006804 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00c      	beq.n	8006712 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d007      	beq.n	8006712 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800670a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f883 	bl	8006818 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00f      	beq.n	800673c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800672e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006734:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d007      	beq.n	8006752 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800674a:	69f9      	ldr	r1, [r7, #28]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f881 	bl	8006854 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d009      	beq.n	800676c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6a3a      	ldr	r2, [r7, #32]
 800675e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f863 	bl	8006840 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800677a:	bf00      	nop
 800677c:	3730      	adds	r7, #48	@ 0x30
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
	...

0800686c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006874:	4b27      	ldr	r3, [pc, #156]	@ (8006914 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8006876:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006886:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800688e:	041a      	lsls	r2, r3, #16
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ac:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b4:	061a      	lsls	r2, r3, #24
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	e005      	b.n	80068fa <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	3304      	adds	r3, #4
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	429a      	cmp	r2, r3
 8006904:	d3f3      	bcc.n	80068ee <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8006906:	bf00      	nop
 8006908:	bf00      	nop
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	4000a400 	.word	0x4000a400

08006918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006922:	2300      	movs	r3, #0
 8006924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006926:	e15a      	b.n	8006bde <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	2101      	movs	r1, #1
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	fa01 f303 	lsl.w	r3, r1, r3
 8006934:	4013      	ands	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 814c 	beq.w	8006bd8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	2b01      	cmp	r3, #1
 800694a:	d005      	beq.n	8006958 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006954:	2b02      	cmp	r3, #2
 8006956:	d130      	bne.n	80069ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	2203      	movs	r2, #3
 8006964:	fa02 f303 	lsl.w	r3, r2, r3
 8006968:	43db      	mvns	r3, r3
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4013      	ands	r3, r2
 800696e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	005b      	lsls	r3, r3, #1
 8006978:	fa02 f303 	lsl.w	r3, r2, r3
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	4313      	orrs	r3, r2
 8006980:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800698e:	2201      	movs	r2, #1
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	fa02 f303 	lsl.w	r3, r2, r3
 8006996:	43db      	mvns	r3, r3
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4013      	ands	r3, r2
 800699c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	091b      	lsrs	r3, r3, #4
 80069a4:	f003 0201 	and.w	r2, r3, #1
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	fa02 f303 	lsl.w	r3, r2, r3
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d017      	beq.n	80069f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	2203      	movs	r2, #3
 80069d2:	fa02 f303 	lsl.w	r3, r2, r3
 80069d6:	43db      	mvns	r3, r3
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	4013      	ands	r3, r2
 80069dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	689a      	ldr	r2, [r3, #8]
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d123      	bne.n	8006a4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	08da      	lsrs	r2, r3, #3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3208      	adds	r2, #8
 8006a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	220f      	movs	r2, #15
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4013      	ands	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	691a      	ldr	r2, [r3, #16]
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	08da      	lsrs	r2, r3, #3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3208      	adds	r2, #8
 8006a44:	6939      	ldr	r1, [r7, #16]
 8006a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	2203      	movs	r2, #3
 8006a56:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5a:	43db      	mvns	r3, r3
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f003 0203 	and.w	r2, r3, #3
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 80a6 	beq.w	8006bd8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a8c:	4b5b      	ldr	r3, [pc, #364]	@ (8006bfc <HAL_GPIO_Init+0x2e4>)
 8006a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a90:	4a5a      	ldr	r2, [pc, #360]	@ (8006bfc <HAL_GPIO_Init+0x2e4>)
 8006a92:	f043 0301 	orr.w	r3, r3, #1
 8006a96:	6613      	str	r3, [r2, #96]	@ 0x60
 8006a98:	4b58      	ldr	r3, [pc, #352]	@ (8006bfc <HAL_GPIO_Init+0x2e4>)
 8006a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	60bb      	str	r3, [r7, #8]
 8006aa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006aa4:	4a56      	ldr	r2, [pc, #344]	@ (8006c00 <HAL_GPIO_Init+0x2e8>)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	089b      	lsrs	r3, r3, #2
 8006aaa:	3302      	adds	r3, #2
 8006aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f003 0303 	and.w	r3, r3, #3
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	220f      	movs	r2, #15
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	43db      	mvns	r3, r3
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006ace:	d01f      	beq.n	8006b10 <HAL_GPIO_Init+0x1f8>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a4c      	ldr	r2, [pc, #304]	@ (8006c04 <HAL_GPIO_Init+0x2ec>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d019      	beq.n	8006b0c <HAL_GPIO_Init+0x1f4>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a4b      	ldr	r2, [pc, #300]	@ (8006c08 <HAL_GPIO_Init+0x2f0>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d013      	beq.n	8006b08 <HAL_GPIO_Init+0x1f0>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a4a      	ldr	r2, [pc, #296]	@ (8006c0c <HAL_GPIO_Init+0x2f4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d00d      	beq.n	8006b04 <HAL_GPIO_Init+0x1ec>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a49      	ldr	r2, [pc, #292]	@ (8006c10 <HAL_GPIO_Init+0x2f8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d007      	beq.n	8006b00 <HAL_GPIO_Init+0x1e8>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a48      	ldr	r2, [pc, #288]	@ (8006c14 <HAL_GPIO_Init+0x2fc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d101      	bne.n	8006afc <HAL_GPIO_Init+0x1e4>
 8006af8:	2305      	movs	r3, #5
 8006afa:	e00a      	b.n	8006b12 <HAL_GPIO_Init+0x1fa>
 8006afc:	2306      	movs	r3, #6
 8006afe:	e008      	b.n	8006b12 <HAL_GPIO_Init+0x1fa>
 8006b00:	2304      	movs	r3, #4
 8006b02:	e006      	b.n	8006b12 <HAL_GPIO_Init+0x1fa>
 8006b04:	2303      	movs	r3, #3
 8006b06:	e004      	b.n	8006b12 <HAL_GPIO_Init+0x1fa>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e002      	b.n	8006b12 <HAL_GPIO_Init+0x1fa>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e000      	b.n	8006b12 <HAL_GPIO_Init+0x1fa>
 8006b10:	2300      	movs	r3, #0
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	f002 0203 	and.w	r2, r2, #3
 8006b18:	0092      	lsls	r2, r2, #2
 8006b1a:	4093      	lsls	r3, r2
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b22:	4937      	ldr	r1, [pc, #220]	@ (8006c00 <HAL_GPIO_Init+0x2e8>)
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	089b      	lsrs	r3, r3, #2
 8006b28:	3302      	adds	r3, #2
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b30:	4b39      	ldr	r3, [pc, #228]	@ (8006c18 <HAL_GPIO_Init+0x300>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	43db      	mvns	r3, r3
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006b54:	4a30      	ldr	r2, [pc, #192]	@ (8006c18 <HAL_GPIO_Init+0x300>)
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8006c18 <HAL_GPIO_Init+0x300>)
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	43db      	mvns	r3, r3
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4013      	ands	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006b7e:	4a26      	ldr	r2, [pc, #152]	@ (8006c18 <HAL_GPIO_Init+0x300>)
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006b84:	4b24      	ldr	r3, [pc, #144]	@ (8006c18 <HAL_GPIO_Init+0x300>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	43db      	mvns	r3, r3
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4013      	ands	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8006c18 <HAL_GPIO_Init+0x300>)
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006bae:	4b1a      	ldr	r3, [pc, #104]	@ (8006c18 <HAL_GPIO_Init+0x300>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	43db      	mvns	r3, r3
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006bd2:	4a11      	ldr	r2, [pc, #68]	@ (8006c18 <HAL_GPIO_Init+0x300>)
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	fa22 f303 	lsr.w	r3, r2, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f47f ae9d 	bne.w	8006928 <HAL_GPIO_Init+0x10>
  }
}
 8006bee:	bf00      	nop
 8006bf0:	bf00      	nop
 8006bf2:	371c      	adds	r7, #28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	40021000 	.word	0x40021000
 8006c00:	40010000 	.word	0x40010000
 8006c04:	48000400 	.word	0x48000400
 8006c08:	48000800 	.word	0x48000800
 8006c0c:	48000c00 	.word	0x48000c00
 8006c10:	48001000 	.word	0x48001000
 8006c14:	48001400 	.word	0x48001400
 8006c18:	40010400 	.word	0x40010400

08006c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	807b      	strh	r3, [r7, #2]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c2c:	787b      	ldrb	r3, [r7, #1]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c32:	887a      	ldrh	r2, [r7, #2]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c38:	e002      	b.n	8006c40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c3a:	887a      	ldrh	r2, [r7, #2]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006c56:	4b08      	ldr	r3, [pc, #32]	@ (8006c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c58:	695a      	ldr	r2, [r3, #20]
 8006c5a:	88fb      	ldrh	r3, [r7, #6]
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d006      	beq.n	8006c70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c62:	4a05      	ldr	r2, [pc, #20]	@ (8006c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c64:	88fb      	ldrh	r3, [r7, #6]
 8006c66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f005 fca4 	bl	800c5b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	40010400 	.word	0x40010400

08006c7c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e0bb      	b.n	8006e0a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b05      	cmp	r3, #5
 8006c9c:	d101      	bne.n	8006ca2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e0b3      	b.n	8006e0a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d101      	bne.n	8006cb2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e0ab      	b.n	8006e0a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cb2:	4b58      	ldr	r3, [pc, #352]	@ (8006e14 <HAL_OPAMP_Init+0x198>)
 8006cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cb6:	4a57      	ldr	r2, [pc, #348]	@ (8006e14 <HAL_OPAMP_Init+0x198>)
 8006cb8:	f043 0301 	orr.w	r3, r3, #1
 8006cbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8006cbe:	4b55      	ldr	r3, [pc, #340]	@ (8006e14 <HAL_OPAMP_Init+0x198>)
 8006cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	60bb      	str	r3, [r7, #8]
 8006cc8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d103      	bne.n	8006cde <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fa ff2a 	bl	8001b38 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	2b40      	cmp	r3, #64	@ 0x40
 8006cea:	d003      	beq.n	8006cf4 <HAL_OPAMP_Init+0x78>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	2b60      	cmp	r3, #96	@ 0x60
 8006cf2:	d133      	bne.n	8006d5c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f023 0110 	bic.w	r1, r3, #16
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	4b41      	ldr	r3, [pc, #260]	@ (8006e18 <HAL_OPAMP_Init+0x19c>)
 8006d12:	4013      	ands	r3, r2
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	6851      	ldr	r1, [r2, #4]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	6892      	ldr	r2, [r2, #8]
 8006d1c:	4311      	orrs	r1, r2
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	6912      	ldr	r2, [r2, #16]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	6879      	ldr	r1, [r7, #4]
 8006d26:	7d09      	ldrb	r1, [r1, #20]
 8006d28:	2901      	cmp	r1, #1
 8006d2a:	d102      	bne.n	8006d32 <HAL_OPAMP_Init+0xb6>
 8006d2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006d30:	e000      	b.n	8006d34 <HAL_OPAMP_Init+0xb8>
 8006d32:	2100      	movs	r1, #0
 8006d34:	4311      	orrs	r1, r2
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d3a:	4311      	orrs	r1, r2
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006d40:	4311      	orrs	r1, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006d46:	04d2      	lsls	r2, r2, #19
 8006d48:	4311      	orrs	r1, r2
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006d4e:	0612      	lsls	r2, r2, #24
 8006d50:	4311      	orrs	r1, r2
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	6812      	ldr	r2, [r2, #0]
 8006d56:	430b      	orrs	r3, r1
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	e035      	b.n	8006dc8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f023 0110 	bic.w	r1, r3, #16
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	4b27      	ldr	r3, [pc, #156]	@ (8006e18 <HAL_OPAMP_Init+0x19c>)
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6851      	ldr	r1, [r2, #4]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	6892      	ldr	r2, [r2, #8]
 8006d84:	4311      	orrs	r1, r2
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	68d2      	ldr	r2, [r2, #12]
 8006d8a:	4311      	orrs	r1, r2
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6912      	ldr	r2, [r2, #16]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	6879      	ldr	r1, [r7, #4]
 8006d94:	7d09      	ldrb	r1, [r1, #20]
 8006d96:	2901      	cmp	r1, #1
 8006d98:	d102      	bne.n	8006da0 <HAL_OPAMP_Init+0x124>
 8006d9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006d9e:	e000      	b.n	8006da2 <HAL_OPAMP_Init+0x126>
 8006da0:	2100      	movs	r1, #0
 8006da2:	4311      	orrs	r1, r2
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006da8:	4311      	orrs	r1, r2
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006dae:	4311      	orrs	r1, r2
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006db4:	04d2      	lsls	r2, r2, #19
 8006db6:	4311      	orrs	r1, r2
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006dbc:	0612      	lsls	r2, r2, #24
 8006dbe:	4311      	orrs	r1, r2
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	db10      	blt.n	8006df4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699a      	ldr	r2, [r3, #24]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d103      	bne.n	8006e08 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	40021000 	.word	0x40021000
 8006e18:	e0003e11 	.word	0xe0003e11

08006e1c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d102      	bne.n	8006e34 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	73fb      	strb	r3, [r7, #15]
 8006e32:	e01d      	b.n	8006e70 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b05      	cmp	r3, #5
 8006e3e:	d102      	bne.n	8006e46 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	73fb      	strb	r3, [r7, #15]
 8006e44:	e014      	b.n	8006e70 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d10c      	bne.n	8006e6c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f042 0201 	orr.w	r2, r2, #1
 8006e60:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2204      	movs	r2, #4
 8006e66:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8006e6a:	e001      	b.n	8006e70 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
	...

08006e80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d141      	bne.n	8006f12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e8e:	4b4b      	ldr	r3, [pc, #300]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e9a:	d131      	bne.n	8006f00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e9c:	4b47      	ldr	r3, [pc, #284]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ea2:	4a46      	ldr	r2, [pc, #280]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ea8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006eac:	4b43      	ldr	r3, [pc, #268]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006eb4:	4a41      	ldr	r2, [pc, #260]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006eba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ebc:	4b40      	ldr	r3, [pc, #256]	@ (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2232      	movs	r2, #50	@ 0x32
 8006ec2:	fb02 f303 	mul.w	r3, r2, r3
 8006ec6:	4a3f      	ldr	r2, [pc, #252]	@ (8006fc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ecc:	0c9b      	lsrs	r3, r3, #18
 8006ece:	3301      	adds	r3, #1
 8006ed0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ed2:	e002      	b.n	8006eda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eda:	4b38      	ldr	r3, [pc, #224]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ee6:	d102      	bne.n	8006eee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f2      	bne.n	8006ed4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006eee:	4b33      	ldr	r3, [pc, #204]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006efa:	d158      	bne.n	8006fae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e057      	b.n	8006fb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f00:	4b2e      	ldr	r3, [pc, #184]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f06:	4a2d      	ldr	r2, [pc, #180]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006f10:	e04d      	b.n	8006fae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f18:	d141      	bne.n	8006f9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f1a:	4b28      	ldr	r3, [pc, #160]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f26:	d131      	bne.n	8006f8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f28:	4b24      	ldr	r3, [pc, #144]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f2e:	4a23      	ldr	r2, [pc, #140]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f38:	4b20      	ldr	r3, [pc, #128]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f40:	4a1e      	ldr	r2, [pc, #120]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006f48:	4b1d      	ldr	r3, [pc, #116]	@ (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2232      	movs	r2, #50	@ 0x32
 8006f4e:	fb02 f303 	mul.w	r3, r2, r3
 8006f52:	4a1c      	ldr	r2, [pc, #112]	@ (8006fc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f54:	fba2 2303 	umull	r2, r3, r2, r3
 8006f58:	0c9b      	lsrs	r3, r3, #18
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f5e:	e002      	b.n	8006f66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f66:	4b15      	ldr	r3, [pc, #84]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f72:	d102      	bne.n	8006f7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1f2      	bne.n	8006f60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f7a:	4b10      	ldr	r3, [pc, #64]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f86:	d112      	bne.n	8006fae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e011      	b.n	8006fb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f92:	4a0a      	ldr	r2, [pc, #40]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006f9c:	e007      	b.n	8006fae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f9e:	4b07      	ldr	r3, [pc, #28]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006fa6:	4a05      	ldr	r2, [pc, #20]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fa8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006fac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	40007000 	.word	0x40007000
 8006fc0:	20000000 	.word	0x20000000
 8006fc4:	431bde83 	.word	0x431bde83

08006fc8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006fcc:	4b05      	ldr	r3, [pc, #20]	@ (8006fe4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	4a04      	ldr	r2, [pc, #16]	@ (8006fe4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006fd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fd6:	6093      	str	r3, [r2, #8]
}
 8006fd8:	bf00      	nop
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40007000 	.word	0x40007000

08006fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e2fe      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d075      	beq.n	80070f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007006:	4b97      	ldr	r3, [pc, #604]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 030c 	and.w	r3, r3, #12
 800700e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007010:	4b94      	ldr	r3, [pc, #592]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	2b0c      	cmp	r3, #12
 800701e:	d102      	bne.n	8007026 <HAL_RCC_OscConfig+0x3e>
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2b03      	cmp	r3, #3
 8007024:	d002      	beq.n	800702c <HAL_RCC_OscConfig+0x44>
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	2b08      	cmp	r3, #8
 800702a:	d10b      	bne.n	8007044 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800702c:	4b8d      	ldr	r3, [pc, #564]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d05b      	beq.n	80070f0 <HAL_RCC_OscConfig+0x108>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d157      	bne.n	80070f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e2d9      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800704c:	d106      	bne.n	800705c <HAL_RCC_OscConfig+0x74>
 800704e:	4b85      	ldr	r3, [pc, #532]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a84      	ldr	r2, [pc, #528]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	e01d      	b.n	8007098 <HAL_RCC_OscConfig+0xb0>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007064:	d10c      	bne.n	8007080 <HAL_RCC_OscConfig+0x98>
 8007066:	4b7f      	ldr	r3, [pc, #508]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a7e      	ldr	r2, [pc, #504]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 800706c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	4b7c      	ldr	r3, [pc, #496]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a7b      	ldr	r2, [pc, #492]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	e00b      	b.n	8007098 <HAL_RCC_OscConfig+0xb0>
 8007080:	4b78      	ldr	r3, [pc, #480]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a77      	ldr	r2, [pc, #476]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	4b75      	ldr	r3, [pc, #468]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a74      	ldr	r2, [pc, #464]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d013      	beq.n	80070c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a0:	f7fb fb8a 	bl	80027b8 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070a8:	f7fb fb86 	bl	80027b8 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b64      	cmp	r3, #100	@ 0x64
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e29e      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070ba:	4b6a      	ldr	r3, [pc, #424]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0f0      	beq.n	80070a8 <HAL_RCC_OscConfig+0xc0>
 80070c6:	e014      	b.n	80070f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c8:	f7fb fb76 	bl	80027b8 <HAL_GetTick>
 80070cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070d0:	f7fb fb72 	bl	80027b8 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b64      	cmp	r3, #100	@ 0x64
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e28a      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070e2:	4b60      	ldr	r3, [pc, #384]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1f0      	bne.n	80070d0 <HAL_RCC_OscConfig+0xe8>
 80070ee:	e000      	b.n	80070f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d075      	beq.n	80071ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070fe:	4b59      	ldr	r3, [pc, #356]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 030c 	and.w	r3, r3, #12
 8007106:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007108:	4b56      	ldr	r3, [pc, #344]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	2b0c      	cmp	r3, #12
 8007116:	d102      	bne.n	800711e <HAL_RCC_OscConfig+0x136>
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2b02      	cmp	r3, #2
 800711c:	d002      	beq.n	8007124 <HAL_RCC_OscConfig+0x13c>
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b04      	cmp	r3, #4
 8007122:	d11f      	bne.n	8007164 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007124:	4b4f      	ldr	r3, [pc, #316]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <HAL_RCC_OscConfig+0x154>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e25d      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800713c:	4b49      	ldr	r3, [pc, #292]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	061b      	lsls	r3, r3, #24
 800714a:	4946      	ldr	r1, [pc, #280]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 800714c:	4313      	orrs	r3, r2
 800714e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007150:	4b45      	ldr	r3, [pc, #276]	@ (8007268 <HAL_RCC_OscConfig+0x280>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4618      	mov	r0, r3
 8007156:	f7fb fae3 	bl	8002720 <HAL_InitTick>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d043      	beq.n	80071e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e249      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d023      	beq.n	80071b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800716c:	4b3d      	ldr	r3, [pc, #244]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a3c      	ldr	r2, [pc, #240]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007178:	f7fb fb1e 	bl	80027b8 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007180:	f7fb fb1a 	bl	80027b8 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e232      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007192:	4b34      	ldr	r3, [pc, #208]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800719a:	2b00      	cmp	r3, #0
 800719c:	d0f0      	beq.n	8007180 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800719e:	4b31      	ldr	r3, [pc, #196]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	061b      	lsls	r3, r3, #24
 80071ac:	492d      	ldr	r1, [pc, #180]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	604b      	str	r3, [r1, #4]
 80071b2:	e01a      	b.n	80071ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071b4:	4b2b      	ldr	r3, [pc, #172]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a2a      	ldr	r2, [pc, #168]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 80071ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c0:	f7fb fafa 	bl	80027b8 <HAL_GetTick>
 80071c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071c8:	f7fb faf6 	bl	80027b8 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e20e      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071da:	4b22      	ldr	r3, [pc, #136]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1f0      	bne.n	80071c8 <HAL_RCC_OscConfig+0x1e0>
 80071e6:	e000      	b.n	80071ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0308 	and.w	r3, r3, #8
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d041      	beq.n	800727a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d01c      	beq.n	8007238 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071fe:	4b19      	ldr	r3, [pc, #100]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007200:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007204:	4a17      	ldr	r2, [pc, #92]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007206:	f043 0301 	orr.w	r3, r3, #1
 800720a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800720e:	f7fb fad3 	bl	80027b8 <HAL_GetTick>
 8007212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007214:	e008      	b.n	8007228 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007216:	f7fb facf 	bl	80027b8 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d901      	bls.n	8007228 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e1e7      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007228:	4b0e      	ldr	r3, [pc, #56]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 800722a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0ef      	beq.n	8007216 <HAL_RCC_OscConfig+0x22e>
 8007236:	e020      	b.n	800727a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007238:	4b0a      	ldr	r3, [pc, #40]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 800723a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800723e:	4a09      	ldr	r2, [pc, #36]	@ (8007264 <HAL_RCC_OscConfig+0x27c>)
 8007240:	f023 0301 	bic.w	r3, r3, #1
 8007244:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007248:	f7fb fab6 	bl	80027b8 <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800724e:	e00d      	b.n	800726c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007250:	f7fb fab2 	bl	80027b8 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d906      	bls.n	800726c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e1ca      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
 8007262:	bf00      	nop
 8007264:	40021000 	.word	0x40021000
 8007268:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800726c:	4b8c      	ldr	r3, [pc, #560]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 800726e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1ea      	bne.n	8007250 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0304 	and.w	r3, r3, #4
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 80a6 	beq.w	80073d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007288:	2300      	movs	r3, #0
 800728a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800728c:	4b84      	ldr	r3, [pc, #528]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 800728e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <HAL_RCC_OscConfig+0x2b4>
 8007298:	2301      	movs	r3, #1
 800729a:	e000      	b.n	800729e <HAL_RCC_OscConfig+0x2b6>
 800729c:	2300      	movs	r3, #0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00d      	beq.n	80072be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072a2:	4b7f      	ldr	r3, [pc, #508]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 80072a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072a6:	4a7e      	ldr	r2, [pc, #504]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 80072a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80072ae:	4b7c      	ldr	r3, [pc, #496]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 80072b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80072ba:	2301      	movs	r3, #1
 80072bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072be:	4b79      	ldr	r3, [pc, #484]	@ (80074a4 <HAL_RCC_OscConfig+0x4bc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d118      	bne.n	80072fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072ca:	4b76      	ldr	r3, [pc, #472]	@ (80074a4 <HAL_RCC_OscConfig+0x4bc>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a75      	ldr	r2, [pc, #468]	@ (80074a4 <HAL_RCC_OscConfig+0x4bc>)
 80072d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072d6:	f7fb fa6f 	bl	80027b8 <HAL_GetTick>
 80072da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072dc:	e008      	b.n	80072f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072de:	f7fb fa6b 	bl	80027b8 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d901      	bls.n	80072f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e183      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072f0:	4b6c      	ldr	r3, [pc, #432]	@ (80074a4 <HAL_RCC_OscConfig+0x4bc>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d0f0      	beq.n	80072de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d108      	bne.n	8007316 <HAL_RCC_OscConfig+0x32e>
 8007304:	4b66      	ldr	r3, [pc, #408]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800730a:	4a65      	ldr	r2, [pc, #404]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 800730c:	f043 0301 	orr.w	r3, r3, #1
 8007310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007314:	e024      	b.n	8007360 <HAL_RCC_OscConfig+0x378>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	2b05      	cmp	r3, #5
 800731c:	d110      	bne.n	8007340 <HAL_RCC_OscConfig+0x358>
 800731e:	4b60      	ldr	r3, [pc, #384]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007324:	4a5e      	ldr	r2, [pc, #376]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007326:	f043 0304 	orr.w	r3, r3, #4
 800732a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800732e:	4b5c      	ldr	r3, [pc, #368]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007334:	4a5a      	ldr	r2, [pc, #360]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800733e:	e00f      	b.n	8007360 <HAL_RCC_OscConfig+0x378>
 8007340:	4b57      	ldr	r3, [pc, #348]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007346:	4a56      	ldr	r2, [pc, #344]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007348:	f023 0301 	bic.w	r3, r3, #1
 800734c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007350:	4b53      	ldr	r3, [pc, #332]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007356:	4a52      	ldr	r2, [pc, #328]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007358:	f023 0304 	bic.w	r3, r3, #4
 800735c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d016      	beq.n	8007396 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007368:	f7fb fa26 	bl	80027b8 <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800736e:	e00a      	b.n	8007386 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007370:	f7fb fa22 	bl	80027b8 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800737e:	4293      	cmp	r3, r2
 8007380:	d901      	bls.n	8007386 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e138      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007386:	4b46      	ldr	r3, [pc, #280]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0ed      	beq.n	8007370 <HAL_RCC_OscConfig+0x388>
 8007394:	e015      	b.n	80073c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007396:	f7fb fa0f 	bl	80027b8 <HAL_GetTick>
 800739a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800739c:	e00a      	b.n	80073b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800739e:	f7fb fa0b 	bl	80027b8 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e121      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073b4:	4b3a      	ldr	r3, [pc, #232]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 80073b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1ed      	bne.n	800739e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073c2:	7ffb      	ldrb	r3, [r7, #31]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d105      	bne.n	80073d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073c8:	4b35      	ldr	r3, [pc, #212]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 80073ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073cc:	4a34      	ldr	r2, [pc, #208]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 80073ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0320 	and.w	r3, r3, #32
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d03c      	beq.n	800745a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01c      	beq.n	8007422 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073e8:	4b2d      	ldr	r3, [pc, #180]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 80073ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073ee:	4a2c      	ldr	r2, [pc, #176]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 80073f0:	f043 0301 	orr.w	r3, r3, #1
 80073f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f8:	f7fb f9de 	bl	80027b8 <HAL_GetTick>
 80073fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073fe:	e008      	b.n	8007412 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007400:	f7fb f9da 	bl	80027b8 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e0f2      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007412:	4b23      	ldr	r3, [pc, #140]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007414:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0ef      	beq.n	8007400 <HAL_RCC_OscConfig+0x418>
 8007420:	e01b      	b.n	800745a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007422:	4b1f      	ldr	r3, [pc, #124]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007424:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007428:	4a1d      	ldr	r2, [pc, #116]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 800742a:	f023 0301 	bic.w	r3, r3, #1
 800742e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007432:	f7fb f9c1 	bl	80027b8 <HAL_GetTick>
 8007436:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007438:	e008      	b.n	800744c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800743a:	f7fb f9bd 	bl	80027b8 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d901      	bls.n	800744c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e0d5      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800744c:	4b14      	ldr	r3, [pc, #80]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 800744e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1ef      	bne.n	800743a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 80c9 	beq.w	80075f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007464:	4b0e      	ldr	r3, [pc, #56]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 030c 	and.w	r3, r3, #12
 800746c:	2b0c      	cmp	r3, #12
 800746e:	f000 8083 	beq.w	8007578 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d15e      	bne.n	8007538 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800747a:	4b09      	ldr	r3, [pc, #36]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a08      	ldr	r2, [pc, #32]	@ (80074a0 <HAL_RCC_OscConfig+0x4b8>)
 8007480:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007486:	f7fb f997 	bl	80027b8 <HAL_GetTick>
 800748a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800748c:	e00c      	b.n	80074a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800748e:	f7fb f993 	bl	80027b8 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d905      	bls.n	80074a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e0ab      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
 80074a0:	40021000 	.word	0x40021000
 80074a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074a8:	4b55      	ldr	r3, [pc, #340]	@ (8007600 <HAL_RCC_OscConfig+0x618>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1ec      	bne.n	800748e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074b4:	4b52      	ldr	r3, [pc, #328]	@ (8007600 <HAL_RCC_OscConfig+0x618>)
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	4b52      	ldr	r3, [pc, #328]	@ (8007604 <HAL_RCC_OscConfig+0x61c>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6a11      	ldr	r1, [r2, #32]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80074c4:	3a01      	subs	r2, #1
 80074c6:	0112      	lsls	r2, r2, #4
 80074c8:	4311      	orrs	r1, r2
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80074ce:	0212      	lsls	r2, r2, #8
 80074d0:	4311      	orrs	r1, r2
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80074d6:	0852      	lsrs	r2, r2, #1
 80074d8:	3a01      	subs	r2, #1
 80074da:	0552      	lsls	r2, r2, #21
 80074dc:	4311      	orrs	r1, r2
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80074e2:	0852      	lsrs	r2, r2, #1
 80074e4:	3a01      	subs	r2, #1
 80074e6:	0652      	lsls	r2, r2, #25
 80074e8:	4311      	orrs	r1, r2
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80074ee:	06d2      	lsls	r2, r2, #27
 80074f0:	430a      	orrs	r2, r1
 80074f2:	4943      	ldr	r1, [pc, #268]	@ (8007600 <HAL_RCC_OscConfig+0x618>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074f8:	4b41      	ldr	r3, [pc, #260]	@ (8007600 <HAL_RCC_OscConfig+0x618>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a40      	ldr	r2, [pc, #256]	@ (8007600 <HAL_RCC_OscConfig+0x618>)
 80074fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007502:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007504:	4b3e      	ldr	r3, [pc, #248]	@ (8007600 <HAL_RCC_OscConfig+0x618>)
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	4a3d      	ldr	r2, [pc, #244]	@ (8007600 <HAL_RCC_OscConfig+0x618>)
 800750a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800750e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007510:	f7fb f952 	bl	80027b8 <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007516:	e008      	b.n	800752a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007518:	f7fb f94e 	bl	80027b8 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d901      	bls.n	800752a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e066      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800752a:	4b35      	ldr	r3, [pc, #212]	@ (8007600 <HAL_RCC_OscConfig+0x618>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0f0      	beq.n	8007518 <HAL_RCC_OscConfig+0x530>
 8007536:	e05e      	b.n	80075f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007538:	4b31      	ldr	r3, [pc, #196]	@ (8007600 <HAL_RCC_OscConfig+0x618>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a30      	ldr	r2, [pc, #192]	@ (8007600 <HAL_RCC_OscConfig+0x618>)
 800753e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007544:	f7fb f938 	bl	80027b8 <HAL_GetTick>
 8007548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800754a:	e008      	b.n	800755e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800754c:	f7fb f934 	bl	80027b8 <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	2b02      	cmp	r3, #2
 8007558:	d901      	bls.n	800755e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e04c      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800755e:	4b28      	ldr	r3, [pc, #160]	@ (8007600 <HAL_RCC_OscConfig+0x618>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1f0      	bne.n	800754c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800756a:	4b25      	ldr	r3, [pc, #148]	@ (8007600 <HAL_RCC_OscConfig+0x618>)
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	4924      	ldr	r1, [pc, #144]	@ (8007600 <HAL_RCC_OscConfig+0x618>)
 8007570:	4b25      	ldr	r3, [pc, #148]	@ (8007608 <HAL_RCC_OscConfig+0x620>)
 8007572:	4013      	ands	r3, r2
 8007574:	60cb      	str	r3, [r1, #12]
 8007576:	e03e      	b.n	80075f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	69db      	ldr	r3, [r3, #28]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d101      	bne.n	8007584 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e039      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007584:	4b1e      	ldr	r3, [pc, #120]	@ (8007600 <HAL_RCC_OscConfig+0x618>)
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f003 0203 	and.w	r2, r3, #3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	429a      	cmp	r2, r3
 8007596:	d12c      	bne.n	80075f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a2:	3b01      	subs	r3, #1
 80075a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d123      	bne.n	80075f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d11b      	bne.n	80075f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d113      	bne.n	80075f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d4:	085b      	lsrs	r3, r3, #1
 80075d6:	3b01      	subs	r3, #1
 80075d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075da:	429a      	cmp	r2, r3
 80075dc:	d109      	bne.n	80075f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e8:	085b      	lsrs	r3, r3, #1
 80075ea:	3b01      	subs	r3, #1
 80075ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d001      	beq.n	80075f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e000      	b.n	80075f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3720      	adds	r7, #32
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	40021000 	.word	0x40021000
 8007604:	019f800c 	.word	0x019f800c
 8007608:	feeefffc 	.word	0xfeeefffc

0800760c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007616:	2300      	movs	r3, #0
 8007618:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e11e      	b.n	8007862 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007624:	4b91      	ldr	r3, [pc, #580]	@ (800786c <HAL_RCC_ClockConfig+0x260>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 030f 	and.w	r3, r3, #15
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	429a      	cmp	r2, r3
 8007630:	d910      	bls.n	8007654 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007632:	4b8e      	ldr	r3, [pc, #568]	@ (800786c <HAL_RCC_ClockConfig+0x260>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f023 020f 	bic.w	r2, r3, #15
 800763a:	498c      	ldr	r1, [pc, #560]	@ (800786c <HAL_RCC_ClockConfig+0x260>)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	4313      	orrs	r3, r2
 8007640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007642:	4b8a      	ldr	r3, [pc, #552]	@ (800786c <HAL_RCC_ClockConfig+0x260>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	429a      	cmp	r2, r3
 800764e:	d001      	beq.n	8007654 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e106      	b.n	8007862 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	2b00      	cmp	r3, #0
 800765e:	d073      	beq.n	8007748 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2b03      	cmp	r3, #3
 8007666:	d129      	bne.n	80076bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007668:	4b81      	ldr	r3, [pc, #516]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d101      	bne.n	8007678 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e0f4      	b.n	8007862 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007678:	f000 f99e 	bl	80079b8 <RCC_GetSysClockFreqFromPLLSource>
 800767c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	4a7c      	ldr	r2, [pc, #496]	@ (8007874 <HAL_RCC_ClockConfig+0x268>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d93f      	bls.n	8007706 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007686:	4b7a      	ldr	r3, [pc, #488]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800769a:	2b00      	cmp	r3, #0
 800769c:	d033      	beq.n	8007706 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d12f      	bne.n	8007706 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80076a6:	4b72      	ldr	r3, [pc, #456]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076ae:	4a70      	ldr	r2, [pc, #448]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 80076b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80076b6:	2380      	movs	r3, #128	@ 0x80
 80076b8:	617b      	str	r3, [r7, #20]
 80076ba:	e024      	b.n	8007706 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d107      	bne.n	80076d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d109      	bne.n	80076e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e0c6      	b.n	8007862 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076d4:	4b66      	ldr	r3, [pc, #408]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e0be      	b.n	8007862 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80076e4:	f000 f8ce 	bl	8007884 <HAL_RCC_GetSysClockFreq>
 80076e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	4a61      	ldr	r2, [pc, #388]	@ (8007874 <HAL_RCC_ClockConfig+0x268>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d909      	bls.n	8007706 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80076f2:	4b5f      	ldr	r3, [pc, #380]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076fa:	4a5d      	ldr	r2, [pc, #372]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 80076fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007700:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007702:	2380      	movs	r3, #128	@ 0x80
 8007704:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007706:	4b5a      	ldr	r3, [pc, #360]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f023 0203 	bic.w	r2, r3, #3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	4957      	ldr	r1, [pc, #348]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 8007714:	4313      	orrs	r3, r2
 8007716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007718:	f7fb f84e 	bl	80027b8 <HAL_GetTick>
 800771c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800771e:	e00a      	b.n	8007736 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007720:	f7fb f84a 	bl	80027b8 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800772e:	4293      	cmp	r3, r2
 8007730:	d901      	bls.n	8007736 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e095      	b.n	8007862 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007736:	4b4e      	ldr	r3, [pc, #312]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f003 020c 	and.w	r2, r3, #12
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	429a      	cmp	r2, r3
 8007746:	d1eb      	bne.n	8007720 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0302 	and.w	r3, r3, #2
 8007750:	2b00      	cmp	r3, #0
 8007752:	d023      	beq.n	800779c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b00      	cmp	r3, #0
 800775e:	d005      	beq.n	800776c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007760:	4b43      	ldr	r3, [pc, #268]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	4a42      	ldr	r2, [pc, #264]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 8007766:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800776a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0308 	and.w	r3, r3, #8
 8007774:	2b00      	cmp	r3, #0
 8007776:	d007      	beq.n	8007788 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007778:	4b3d      	ldr	r3, [pc, #244]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007780:	4a3b      	ldr	r2, [pc, #236]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 8007782:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007786:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007788:	4b39      	ldr	r3, [pc, #228]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	4936      	ldr	r1, [pc, #216]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 8007796:	4313      	orrs	r3, r2
 8007798:	608b      	str	r3, [r1, #8]
 800779a:	e008      	b.n	80077ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	2b80      	cmp	r3, #128	@ 0x80
 80077a0:	d105      	bne.n	80077ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80077a2:	4b33      	ldr	r3, [pc, #204]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	4a32      	ldr	r2, [pc, #200]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 80077a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077ae:	4b2f      	ldr	r3, [pc, #188]	@ (800786c <HAL_RCC_ClockConfig+0x260>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 030f 	and.w	r3, r3, #15
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d21d      	bcs.n	80077f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077bc:	4b2b      	ldr	r3, [pc, #172]	@ (800786c <HAL_RCC_ClockConfig+0x260>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f023 020f 	bic.w	r2, r3, #15
 80077c4:	4929      	ldr	r1, [pc, #164]	@ (800786c <HAL_RCC_ClockConfig+0x260>)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80077cc:	f7fa fff4 	bl	80027b8 <HAL_GetTick>
 80077d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077d2:	e00a      	b.n	80077ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077d4:	f7fa fff0 	bl	80027b8 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e03b      	b.n	8007862 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ea:	4b20      	ldr	r3, [pc, #128]	@ (800786c <HAL_RCC_ClockConfig+0x260>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 030f 	and.w	r3, r3, #15
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d1ed      	bne.n	80077d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b00      	cmp	r3, #0
 8007802:	d008      	beq.n	8007816 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007804:	4b1a      	ldr	r3, [pc, #104]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	4917      	ldr	r1, [pc, #92]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 8007812:	4313      	orrs	r3, r2
 8007814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0308 	and.w	r3, r3, #8
 800781e:	2b00      	cmp	r3, #0
 8007820:	d009      	beq.n	8007836 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007822:	4b13      	ldr	r3, [pc, #76]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	490f      	ldr	r1, [pc, #60]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 8007832:	4313      	orrs	r3, r2
 8007834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007836:	f000 f825 	bl	8007884 <HAL_RCC_GetSysClockFreq>
 800783a:	4602      	mov	r2, r0
 800783c:	4b0c      	ldr	r3, [pc, #48]	@ (8007870 <HAL_RCC_ClockConfig+0x264>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	091b      	lsrs	r3, r3, #4
 8007842:	f003 030f 	and.w	r3, r3, #15
 8007846:	490c      	ldr	r1, [pc, #48]	@ (8007878 <HAL_RCC_ClockConfig+0x26c>)
 8007848:	5ccb      	ldrb	r3, [r1, r3]
 800784a:	f003 031f 	and.w	r3, r3, #31
 800784e:	fa22 f303 	lsr.w	r3, r2, r3
 8007852:	4a0a      	ldr	r2, [pc, #40]	@ (800787c <HAL_RCC_ClockConfig+0x270>)
 8007854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007856:	4b0a      	ldr	r3, [pc, #40]	@ (8007880 <HAL_RCC_ClockConfig+0x274>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f7fa ff60 	bl	8002720 <HAL_InitTick>
 8007860:	4603      	mov	r3, r0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	40022000 	.word	0x40022000
 8007870:	40021000 	.word	0x40021000
 8007874:	04c4b400 	.word	0x04c4b400
 8007878:	080116cc 	.word	0x080116cc
 800787c:	20000000 	.word	0x20000000
 8007880:	20000004 	.word	0x20000004

08007884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800788a:	4b2c      	ldr	r3, [pc, #176]	@ (800793c <HAL_RCC_GetSysClockFreq+0xb8>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f003 030c 	and.w	r3, r3, #12
 8007892:	2b04      	cmp	r3, #4
 8007894:	d102      	bne.n	800789c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007896:	4b2a      	ldr	r3, [pc, #168]	@ (8007940 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007898:	613b      	str	r3, [r7, #16]
 800789a:	e047      	b.n	800792c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800789c:	4b27      	ldr	r3, [pc, #156]	@ (800793c <HAL_RCC_GetSysClockFreq+0xb8>)
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f003 030c 	and.w	r3, r3, #12
 80078a4:	2b08      	cmp	r3, #8
 80078a6:	d102      	bne.n	80078ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80078a8:	4b26      	ldr	r3, [pc, #152]	@ (8007944 <HAL_RCC_GetSysClockFreq+0xc0>)
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	e03e      	b.n	800792c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80078ae:	4b23      	ldr	r3, [pc, #140]	@ (800793c <HAL_RCC_GetSysClockFreq+0xb8>)
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f003 030c 	and.w	r3, r3, #12
 80078b6:	2b0c      	cmp	r3, #12
 80078b8:	d136      	bne.n	8007928 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078ba:	4b20      	ldr	r3, [pc, #128]	@ (800793c <HAL_RCC_GetSysClockFreq+0xb8>)
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f003 0303 	and.w	r3, r3, #3
 80078c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078c4:	4b1d      	ldr	r3, [pc, #116]	@ (800793c <HAL_RCC_GetSysClockFreq+0xb8>)
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	091b      	lsrs	r3, r3, #4
 80078ca:	f003 030f 	and.w	r3, r3, #15
 80078ce:	3301      	adds	r3, #1
 80078d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d10c      	bne.n	80078f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078d8:	4a1a      	ldr	r2, [pc, #104]	@ (8007944 <HAL_RCC_GetSysClockFreq+0xc0>)
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e0:	4a16      	ldr	r2, [pc, #88]	@ (800793c <HAL_RCC_GetSysClockFreq+0xb8>)
 80078e2:	68d2      	ldr	r2, [r2, #12]
 80078e4:	0a12      	lsrs	r2, r2, #8
 80078e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80078ea:	fb02 f303 	mul.w	r3, r2, r3
 80078ee:	617b      	str	r3, [r7, #20]
      break;
 80078f0:	e00c      	b.n	800790c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078f2:	4a13      	ldr	r2, [pc, #76]	@ (8007940 <HAL_RCC_GetSysClockFreq+0xbc>)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fa:	4a10      	ldr	r2, [pc, #64]	@ (800793c <HAL_RCC_GetSysClockFreq+0xb8>)
 80078fc:	68d2      	ldr	r2, [r2, #12]
 80078fe:	0a12      	lsrs	r2, r2, #8
 8007900:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007904:	fb02 f303 	mul.w	r3, r2, r3
 8007908:	617b      	str	r3, [r7, #20]
      break;
 800790a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800790c:	4b0b      	ldr	r3, [pc, #44]	@ (800793c <HAL_RCC_GetSysClockFreq+0xb8>)
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	0e5b      	lsrs	r3, r3, #25
 8007912:	f003 0303 	and.w	r3, r3, #3
 8007916:	3301      	adds	r3, #1
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	fbb2 f3f3 	udiv	r3, r2, r3
 8007924:	613b      	str	r3, [r7, #16]
 8007926:	e001      	b.n	800792c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800792c:	693b      	ldr	r3, [r7, #16]
}
 800792e:	4618      	mov	r0, r3
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	40021000 	.word	0x40021000
 8007940:	00f42400 	.word	0x00f42400
 8007944:	016e3600 	.word	0x016e3600

08007948 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007948:	b480      	push	{r7}
 800794a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800794c:	4b03      	ldr	r3, [pc, #12]	@ (800795c <HAL_RCC_GetHCLKFreq+0x14>)
 800794e:	681b      	ldr	r3, [r3, #0]
}
 8007950:	4618      	mov	r0, r3
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	20000000 	.word	0x20000000

08007960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007964:	f7ff fff0 	bl	8007948 <HAL_RCC_GetHCLKFreq>
 8007968:	4602      	mov	r2, r0
 800796a:	4b06      	ldr	r3, [pc, #24]	@ (8007984 <HAL_RCC_GetPCLK1Freq+0x24>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	0a1b      	lsrs	r3, r3, #8
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	4904      	ldr	r1, [pc, #16]	@ (8007988 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007976:	5ccb      	ldrb	r3, [r1, r3]
 8007978:	f003 031f 	and.w	r3, r3, #31
 800797c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007980:	4618      	mov	r0, r3
 8007982:	bd80      	pop	{r7, pc}
 8007984:	40021000 	.word	0x40021000
 8007988:	080116dc 	.word	0x080116dc

0800798c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007990:	f7ff ffda 	bl	8007948 <HAL_RCC_GetHCLKFreq>
 8007994:	4602      	mov	r2, r0
 8007996:	4b06      	ldr	r3, [pc, #24]	@ (80079b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	0adb      	lsrs	r3, r3, #11
 800799c:	f003 0307 	and.w	r3, r3, #7
 80079a0:	4904      	ldr	r1, [pc, #16]	@ (80079b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80079a2:	5ccb      	ldrb	r3, [r1, r3]
 80079a4:	f003 031f 	and.w	r3, r3, #31
 80079a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	40021000 	.word	0x40021000
 80079b4:	080116dc 	.word	0x080116dc

080079b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079be:	4b1e      	ldr	r3, [pc, #120]	@ (8007a38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f003 0303 	and.w	r3, r3, #3
 80079c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007a38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	091b      	lsrs	r3, r3, #4
 80079ce:	f003 030f 	and.w	r3, r3, #15
 80079d2:	3301      	adds	r3, #1
 80079d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	2b03      	cmp	r3, #3
 80079da:	d10c      	bne.n	80079f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079dc:	4a17      	ldr	r2, [pc, #92]	@ (8007a3c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e4:	4a14      	ldr	r2, [pc, #80]	@ (8007a38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079e6:	68d2      	ldr	r2, [r2, #12]
 80079e8:	0a12      	lsrs	r2, r2, #8
 80079ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079ee:	fb02 f303 	mul.w	r3, r2, r3
 80079f2:	617b      	str	r3, [r7, #20]
    break;
 80079f4:	e00c      	b.n	8007a10 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079f6:	4a12      	ldr	r2, [pc, #72]	@ (8007a40 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80079fe:	4a0e      	ldr	r2, [pc, #56]	@ (8007a38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a00:	68d2      	ldr	r2, [r2, #12]
 8007a02:	0a12      	lsrs	r2, r2, #8
 8007a04:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007a08:	fb02 f303 	mul.w	r3, r2, r3
 8007a0c:	617b      	str	r3, [r7, #20]
    break;
 8007a0e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a10:	4b09      	ldr	r3, [pc, #36]	@ (8007a38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	0e5b      	lsrs	r3, r3, #25
 8007a16:	f003 0303 	and.w	r3, r3, #3
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a28:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007a2a:	687b      	ldr	r3, [r7, #4]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	371c      	adds	r7, #28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr
 8007a38:	40021000 	.word	0x40021000
 8007a3c:	016e3600 	.word	0x016e3600
 8007a40:	00f42400 	.word	0x00f42400

08007a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a50:	2300      	movs	r3, #0
 8007a52:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 8098 	beq.w	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a62:	2300      	movs	r3, #0
 8007a64:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a66:	4b43      	ldr	r3, [pc, #268]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10d      	bne.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a72:	4b40      	ldr	r3, [pc, #256]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a76:	4a3f      	ldr	r2, [pc, #252]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a86:	60bb      	str	r3, [r7, #8]
 8007a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a8e:	4b3a      	ldr	r3, [pc, #232]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a39      	ldr	r2, [pc, #228]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a9a:	f7fa fe8d 	bl	80027b8 <HAL_GetTick>
 8007a9e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aa0:	e009      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aa2:	f7fa fe89 	bl	80027b8 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d902      	bls.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	74fb      	strb	r3, [r7, #19]
        break;
 8007ab4:	e005      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ab6:	4b30      	ldr	r3, [pc, #192]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0ef      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007ac2:	7cfb      	ldrb	r3, [r7, #19]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d159      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ad2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d01e      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d019      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ae4:	4b23      	ldr	r3, [pc, #140]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007af0:	4b20      	ldr	r3, [pc, #128]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af6:	4a1f      	ldr	r2, [pc, #124]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b00:	4b1c      	ldr	r3, [pc, #112]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b06:	4a1b      	ldr	r2, [pc, #108]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b10:	4a18      	ldr	r2, [pc, #96]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d016      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b22:	f7fa fe49 	bl	80027b8 <HAL_GetTick>
 8007b26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b28:	e00b      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b2a:	f7fa fe45 	bl	80027b8 <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d902      	bls.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	74fb      	strb	r3, [r7, #19]
            break;
 8007b40:	e006      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b42:	4b0c      	ldr	r3, [pc, #48]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0ec      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007b50:	7cfb      	ldrb	r3, [r7, #19]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10b      	bne.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b56:	4b07      	ldr	r3, [pc, #28]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b64:	4903      	ldr	r1, [pc, #12]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007b6c:	e008      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b6e:	7cfb      	ldrb	r3, [r7, #19]
 8007b70:	74bb      	strb	r3, [r7, #18]
 8007b72:	e005      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007b74:	40021000 	.word	0x40021000
 8007b78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7c:	7cfb      	ldrb	r3, [r7, #19]
 8007b7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b80:	7c7b      	ldrb	r3, [r7, #17]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d105      	bne.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b86:	4ba6      	ldr	r3, [pc, #664]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b8a:	4aa5      	ldr	r2, [pc, #660]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b90:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b9e:	4ba0      	ldr	r3, [pc, #640]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ba4:	f023 0203 	bic.w	r2, r3, #3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	499c      	ldr	r1, [pc, #624]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00a      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bc0:	4b97      	ldr	r3, [pc, #604]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bc6:	f023 020c 	bic.w	r2, r3, #12
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	4994      	ldr	r1, [pc, #592]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0304 	and.w	r3, r3, #4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007be2:	4b8f      	ldr	r3, [pc, #572]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	498b      	ldr	r1, [pc, #556]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0308 	and.w	r3, r3, #8
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00a      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c04:	4b86      	ldr	r3, [pc, #536]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	4983      	ldr	r1, [pc, #524]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c26:	4b7e      	ldr	r3, [pc, #504]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c2c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	497a      	ldr	r1, [pc, #488]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c48:	4b75      	ldr	r3, [pc, #468]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c4e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	4972      	ldr	r1, [pc, #456]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c70:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	69db      	ldr	r3, [r3, #28]
 8007c78:	4969      	ldr	r1, [pc, #420]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00a      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c8c:	4b64      	ldr	r3, [pc, #400]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c92:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	4961      	ldr	r1, [pc, #388]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cae:	4b5c      	ldr	r3, [pc, #368]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cb4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cbc:	4958      	ldr	r1, [pc, #352]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d015      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007cd0:	4b53      	ldr	r3, [pc, #332]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cde:	4950      	ldr	r1, [pc, #320]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cee:	d105      	bne.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	4a4a      	ldr	r2, [pc, #296]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cfa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d015      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007d08:	4b45      	ldr	r3, [pc, #276]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d16:	4942      	ldr	r1, [pc, #264]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d26:	d105      	bne.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d28:	4b3d      	ldr	r3, [pc, #244]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	4a3c      	ldr	r2, [pc, #240]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d32:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d015      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d40:	4b37      	ldr	r3, [pc, #220]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d46:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d4e:	4934      	ldr	r1, [pc, #208]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d5e:	d105      	bne.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d60:	4b2f      	ldr	r3, [pc, #188]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	4a2e      	ldr	r2, [pc, #184]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d6a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d015      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d78:	4b29      	ldr	r3, [pc, #164]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d86:	4926      	ldr	r1, [pc, #152]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d96:	d105      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d98:	4b21      	ldr	r3, [pc, #132]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	4a20      	ldr	r2, [pc, #128]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007da2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d015      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007db0:	4b1b      	ldr	r3, [pc, #108]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007db6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dbe:	4918      	ldr	r1, [pc, #96]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dce:	d105      	bne.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dd0:	4b13      	ldr	r3, [pc, #76]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	4a12      	ldr	r2, [pc, #72]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d015      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007de8:	4b0d      	ldr	r3, [pc, #52]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007df6:	490a      	ldr	r1, [pc, #40]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e06:	d105      	bne.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e08:	4b05      	ldr	r3, [pc, #20]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	4a04      	ldr	r2, [pc, #16]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007e14:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	40021000 	.word	0x40021000

08007e24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e09d      	b.n	8007f72 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d108      	bne.n	8007e50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e46:	d009      	beq.n	8007e5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	61da      	str	r2, [r3, #28]
 8007e4e:	e005      	b.n	8007e5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d106      	bne.n	8007e7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7f9 ff12 	bl	8001ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e9c:	d902      	bls.n	8007ea4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	e002      	b.n	8007eaa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007ea4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ea8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007eb2:	d007      	beq.n	8007ec4 <HAL_SPI_Init+0xa0>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007ebc:	d002      	beq.n	8007ec4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	f003 0301 	and.w	r3, r3, #1
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007efc:	431a      	orrs	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f06:	ea42 0103 	orr.w	r1, r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	0c1b      	lsrs	r3, r3, #16
 8007f20:	f003 0204 	and.w	r2, r3, #4
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f28:	f003 0310 	and.w	r3, r3, #16
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f32:	f003 0308 	and.w	r3, r3, #8
 8007f36:	431a      	orrs	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007f40:	ea42 0103 	orr.w	r1, r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69da      	ldr	r2, [r3, #28]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b08a      	sub	sp, #40	@ 0x28
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	607a      	str	r2, [r7, #4]
 8007f86:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_SPI_TransmitReceive+0x26>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e20a      	b.n	80083b6 <HAL_SPI_TransmitReceive+0x43c>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fa8:	f7fa fc06 	bl	80027b8 <HAL_GetTick>
 8007fac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007fb4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007fbc:	887b      	ldrh	r3, [r7, #2]
 8007fbe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007fc0:	887b      	ldrh	r3, [r7, #2]
 8007fc2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007fc4:	7efb      	ldrb	r3, [r7, #27]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d00e      	beq.n	8007fe8 <HAL_SPI_TransmitReceive+0x6e>
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fd0:	d106      	bne.n	8007fe0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d102      	bne.n	8007fe0 <HAL_SPI_TransmitReceive+0x66>
 8007fda:	7efb      	ldrb	r3, [r7, #27]
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d003      	beq.n	8007fe8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007fe6:	e1e0      	b.n	80083aa <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d005      	beq.n	8007ffa <HAL_SPI_TransmitReceive+0x80>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <HAL_SPI_TransmitReceive+0x80>
 8007ff4:	887b      	ldrh	r3, [r7, #2]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d103      	bne.n	8008002 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008000:	e1d3      	b.n	80083aa <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b04      	cmp	r3, #4
 800800c:	d003      	beq.n	8008016 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2205      	movs	r2, #5
 8008012:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	887a      	ldrh	r2, [r7, #2]
 8008026:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	887a      	ldrh	r2, [r7, #2]
 800802e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	887a      	ldrh	r2, [r7, #2]
 800803c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	887a      	ldrh	r2, [r7, #2]
 8008042:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008058:	d802      	bhi.n	8008060 <HAL_SPI_TransmitReceive+0xe6>
 800805a:	8a3b      	ldrh	r3, [r7, #16]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d908      	bls.n	8008072 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800806e:	605a      	str	r2, [r3, #4]
 8008070:	e007      	b.n	8008082 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008080:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800808c:	2b40      	cmp	r3, #64	@ 0x40
 800808e:	d007      	beq.n	80080a0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800809e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80080a8:	f240 8081 	bls.w	80081ae <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <HAL_SPI_TransmitReceive+0x140>
 80080b4:	8a7b      	ldrh	r3, [r7, #18]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d16d      	bne.n	8008196 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080be:	881a      	ldrh	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ca:	1c9a      	adds	r2, r3, #2
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29a      	uxth	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080de:	e05a      	b.n	8008196 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d11b      	bne.n	8008126 <HAL_SPI_TransmitReceive+0x1ac>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d016      	beq.n	8008126 <HAL_SPI_TransmitReceive+0x1ac>
 80080f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d113      	bne.n	8008126 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008102:	881a      	ldrh	r2, [r3, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810e:	1c9a      	adds	r2, r3, #2
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008118:	b29b      	uxth	r3, r3
 800811a:	3b01      	subs	r3, #1
 800811c:	b29a      	uxth	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b01      	cmp	r3, #1
 8008132:	d11c      	bne.n	800816e <HAL_SPI_TransmitReceive+0x1f4>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800813a:	b29b      	uxth	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	d016      	beq.n	800816e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68da      	ldr	r2, [r3, #12]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800814a:	b292      	uxth	r2, r2
 800814c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008152:	1c9a      	adds	r2, r3, #2
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800815e:	b29b      	uxth	r3, r3
 8008160:	3b01      	subs	r3, #1
 8008162:	b29a      	uxth	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800816a:	2301      	movs	r3, #1
 800816c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800816e:	f7fa fb23 	bl	80027b8 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800817a:	429a      	cmp	r2, r3
 800817c:	d80b      	bhi.n	8008196 <HAL_SPI_TransmitReceive+0x21c>
 800817e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008184:	d007      	beq.n	8008196 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008194:	e109      	b.n	80083aa <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800819a:	b29b      	uxth	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d19f      	bne.n	80080e0 <HAL_SPI_TransmitReceive+0x166>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d199      	bne.n	80080e0 <HAL_SPI_TransmitReceive+0x166>
 80081ac:	e0e3      	b.n	8008376 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <HAL_SPI_TransmitReceive+0x244>
 80081b6:	8a7b      	ldrh	r3, [r7, #18]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	f040 80cf 	bne.w	800835c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d912      	bls.n	80081ee <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081cc:	881a      	ldrh	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d8:	1c9a      	adds	r2, r3, #2
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b02      	subs	r3, #2
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80081ec:	e0b6      	b.n	800835c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	330c      	adds	r3, #12
 80081f8:	7812      	ldrb	r2, [r2, #0]
 80081fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800820a:	b29b      	uxth	r3, r3
 800820c:	3b01      	subs	r3, #1
 800820e:	b29a      	uxth	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008214:	e0a2      	b.n	800835c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f003 0302 	and.w	r3, r3, #2
 8008220:	2b02      	cmp	r3, #2
 8008222:	d134      	bne.n	800828e <HAL_SPI_TransmitReceive+0x314>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008228:	b29b      	uxth	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d02f      	beq.n	800828e <HAL_SPI_TransmitReceive+0x314>
 800822e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008230:	2b01      	cmp	r3, #1
 8008232:	d12c      	bne.n	800828e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008238:	b29b      	uxth	r3, r3
 800823a:	2b01      	cmp	r3, #1
 800823c:	d912      	bls.n	8008264 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008242:	881a      	ldrh	r2, [r3, #0]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800824e:	1c9a      	adds	r2, r3, #2
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008258:	b29b      	uxth	r3, r3
 800825a:	3b02      	subs	r3, #2
 800825c:	b29a      	uxth	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008262:	e012      	b.n	800828a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	330c      	adds	r3, #12
 800826e:	7812      	ldrb	r2, [r2, #0]
 8008270:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008280:	b29b      	uxth	r3, r3
 8008282:	3b01      	subs	r3, #1
 8008284:	b29a      	uxth	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f003 0301 	and.w	r3, r3, #1
 8008298:	2b01      	cmp	r3, #1
 800829a:	d148      	bne.n	800832e <HAL_SPI_TransmitReceive+0x3b4>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d042      	beq.n	800832e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d923      	bls.n	80082fc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68da      	ldr	r2, [r3, #12]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082be:	b292      	uxth	r2, r2
 80082c0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c6:	1c9a      	adds	r2, r3, #2
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	3b02      	subs	r3, #2
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d81f      	bhi.n	800832a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80082f8:	605a      	str	r2, [r3, #4]
 80082fa:	e016      	b.n	800832a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f103 020c 	add.w	r2, r3, #12
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008308:	7812      	ldrb	r2, [r2, #0]
 800830a:	b2d2      	uxtb	r2, r2
 800830c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800831e:	b29b      	uxth	r3, r3
 8008320:	3b01      	subs	r3, #1
 8008322:	b29a      	uxth	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800832a:	2301      	movs	r3, #1
 800832c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800832e:	f7fa fa43 	bl	80027b8 <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800833a:	429a      	cmp	r2, r3
 800833c:	d803      	bhi.n	8008346 <HAL_SPI_TransmitReceive+0x3cc>
 800833e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008344:	d102      	bne.n	800834c <HAL_SPI_TransmitReceive+0x3d2>
 8008346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008348:	2b00      	cmp	r3, #0
 800834a:	d107      	bne.n	800835c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800835a:	e026      	b.n	80083aa <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008360:	b29b      	uxth	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	f47f af57 	bne.w	8008216 <HAL_SPI_TransmitReceive+0x29c>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800836e:	b29b      	uxth	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	f47f af50 	bne.w	8008216 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008376:	69fa      	ldr	r2, [r7, #28]
 8008378:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 f94c 	bl	8008618 <SPI_EndRxTxTransaction>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d005      	beq.n	8008392 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2220      	movs	r2, #32
 8008390:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083a0:	e003      	b.n	80083aa <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80083b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3728      	adds	r7, #40	@ 0x28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80083cc:	b2db      	uxtb	r3, r3
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
	...

080083dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b088      	sub	sp, #32
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	603b      	str	r3, [r7, #0]
 80083e8:	4613      	mov	r3, r2
 80083ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80083ec:	f7fa f9e4 	bl	80027b8 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f4:	1a9b      	subs	r3, r3, r2
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	4413      	add	r3, r2
 80083fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083fc:	f7fa f9dc 	bl	80027b8 <HAL_GetTick>
 8008400:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008402:	4b39      	ldr	r3, [pc, #228]	@ (80084e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	015b      	lsls	r3, r3, #5
 8008408:	0d1b      	lsrs	r3, r3, #20
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	fb02 f303 	mul.w	r3, r2, r3
 8008410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008412:	e054      	b.n	80084be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841a:	d050      	beq.n	80084be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800841c:	f7fa f9cc 	bl	80027b8 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	69fa      	ldr	r2, [r7, #28]
 8008428:	429a      	cmp	r2, r3
 800842a:	d902      	bls.n	8008432 <SPI_WaitFlagStateUntilTimeout+0x56>
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d13d      	bne.n	80084ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008440:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800844a:	d111      	bne.n	8008470 <SPI_WaitFlagStateUntilTimeout+0x94>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008454:	d004      	beq.n	8008460 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800845e:	d107      	bne.n	8008470 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800846e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008478:	d10f      	bne.n	800849a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008498:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e017      	b.n	80084de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80084b4:	2300      	movs	r3, #0
 80084b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	4013      	ands	r3, r2
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	bf0c      	ite	eq
 80084ce:	2301      	moveq	r3, #1
 80084d0:	2300      	movne	r3, #0
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	461a      	mov	r2, r3
 80084d6:	79fb      	ldrb	r3, [r7, #7]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d19b      	bne.n	8008414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3720      	adds	r7, #32
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20000000 	.word	0x20000000

080084ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08a      	sub	sp, #40	@ 0x28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
 80084f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80084fe:	f7fa f95b 	bl	80027b8 <HAL_GetTick>
 8008502:	4602      	mov	r2, r0
 8008504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008506:	1a9b      	subs	r3, r3, r2
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	4413      	add	r3, r2
 800850c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800850e:	f7fa f953 	bl	80027b8 <HAL_GetTick>
 8008512:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	330c      	adds	r3, #12
 800851a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800851c:	4b3d      	ldr	r3, [pc, #244]	@ (8008614 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	4613      	mov	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	00da      	lsls	r2, r3, #3
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	0d1b      	lsrs	r3, r3, #20
 800852c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800852e:	fb02 f303 	mul.w	r3, r2, r3
 8008532:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008534:	e060      	b.n	80085f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800853c:	d107      	bne.n	800854e <SPI_WaitFifoStateUntilTimeout+0x62>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d104      	bne.n	800854e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	b2db      	uxtb	r3, r3
 800854a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800854c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008554:	d050      	beq.n	80085f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008556:	f7fa f92f 	bl	80027b8 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008562:	429a      	cmp	r2, r3
 8008564:	d902      	bls.n	800856c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008568:	2b00      	cmp	r3, #0
 800856a:	d13d      	bne.n	80085e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800857a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008584:	d111      	bne.n	80085aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800858e:	d004      	beq.n	800859a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008598:	d107      	bne.n	80085aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085b2:	d10f      	bne.n	80085d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e010      	b.n	800860a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	689a      	ldr	r2, [r3, #8]
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	4013      	ands	r3, r2
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	429a      	cmp	r2, r3
 8008606:	d196      	bne.n	8008536 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3728      	adds	r7, #40	@ 0x28
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	20000000 	.word	0x20000000

08008618 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af02      	add	r7, sp, #8
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	2200      	movs	r2, #0
 800862c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f7ff ff5b 	bl	80084ec <SPI_WaitFifoStateUntilTimeout>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d007      	beq.n	800864c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008640:	f043 0220 	orr.w	r2, r3, #32
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e027      	b.n	800869c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2200      	movs	r2, #0
 8008654:	2180      	movs	r1, #128	@ 0x80
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f7ff fec0 	bl	80083dc <SPI_WaitFlagStateUntilTimeout>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d007      	beq.n	8008672 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008666:	f043 0220 	orr.w	r2, r3, #32
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e014      	b.n	800869c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2200      	movs	r2, #0
 800867a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f7ff ff34 	bl	80084ec <SPI_WaitFifoStateUntilTimeout>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d007      	beq.n	800869a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800868e:	f043 0220 	orr.w	r2, r3, #32
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e000      	b.n	800869c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e049      	b.n	800874a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d106      	bne.n	80086d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7f9 fe2c 	bl	8002328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	3304      	adds	r3, #4
 80086e0:	4619      	mov	r1, r3
 80086e2:	4610      	mov	r0, r2
 80086e4:	f000 fe16 	bl	8009314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b01      	cmp	r3, #1
 8008766:	d001      	beq.n	800876c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e042      	b.n	80087f2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a21      	ldr	r2, [pc, #132]	@ (8008800 <HAL_TIM_Base_Start+0xac>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d018      	beq.n	80087b0 <HAL_TIM_Base_Start+0x5c>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008786:	d013      	beq.n	80087b0 <HAL_TIM_Base_Start+0x5c>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a1d      	ldr	r2, [pc, #116]	@ (8008804 <HAL_TIM_Base_Start+0xb0>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00e      	beq.n	80087b0 <HAL_TIM_Base_Start+0x5c>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a1c      	ldr	r2, [pc, #112]	@ (8008808 <HAL_TIM_Base_Start+0xb4>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d009      	beq.n	80087b0 <HAL_TIM_Base_Start+0x5c>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a1a      	ldr	r2, [pc, #104]	@ (800880c <HAL_TIM_Base_Start+0xb8>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d004      	beq.n	80087b0 <HAL_TIM_Base_Start+0x5c>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a19      	ldr	r2, [pc, #100]	@ (8008810 <HAL_TIM_Base_Start+0xbc>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d115      	bne.n	80087dc <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	689a      	ldr	r2, [r3, #8]
 80087b6:	4b17      	ldr	r3, [pc, #92]	@ (8008814 <HAL_TIM_Base_Start+0xc0>)
 80087b8:	4013      	ands	r3, r2
 80087ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b06      	cmp	r3, #6
 80087c0:	d015      	beq.n	80087ee <HAL_TIM_Base_Start+0x9a>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087c8:	d011      	beq.n	80087ee <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f042 0201 	orr.w	r2, r2, #1
 80087d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087da:	e008      	b.n	80087ee <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f042 0201 	orr.w	r2, r2, #1
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	e000      	b.n	80087f0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	40012c00 	.word	0x40012c00
 8008804:	40000400 	.word	0x40000400
 8008808:	40000800 	.word	0x40000800
 800880c:	40013400 	.word	0x40013400
 8008810:	40014000 	.word	0x40014000
 8008814:	00010007 	.word	0x00010007

08008818 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e049      	b.n	80088be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d106      	bne.n	8008844 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f841 	bl	80088c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	3304      	adds	r3, #4
 8008854:	4619      	mov	r1, r3
 8008856:	4610      	mov	r0, r2
 8008858:	f000 fd5c 	bl	8009314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b083      	sub	sp, #12
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80088ce:	bf00      	nop
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
	...

080088dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d109      	bne.n	8008900 <HAL_TIM_PWM_Start+0x24>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	bf14      	ite	ne
 80088f8:	2301      	movne	r3, #1
 80088fa:	2300      	moveq	r3, #0
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	e03c      	b.n	800897a <HAL_TIM_PWM_Start+0x9e>
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b04      	cmp	r3, #4
 8008904:	d109      	bne.n	800891a <HAL_TIM_PWM_Start+0x3e>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b01      	cmp	r3, #1
 8008910:	bf14      	ite	ne
 8008912:	2301      	movne	r3, #1
 8008914:	2300      	moveq	r3, #0
 8008916:	b2db      	uxtb	r3, r3
 8008918:	e02f      	b.n	800897a <HAL_TIM_PWM_Start+0x9e>
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2b08      	cmp	r3, #8
 800891e:	d109      	bne.n	8008934 <HAL_TIM_PWM_Start+0x58>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b01      	cmp	r3, #1
 800892a:	bf14      	ite	ne
 800892c:	2301      	movne	r3, #1
 800892e:	2300      	moveq	r3, #0
 8008930:	b2db      	uxtb	r3, r3
 8008932:	e022      	b.n	800897a <HAL_TIM_PWM_Start+0x9e>
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	2b0c      	cmp	r3, #12
 8008938:	d109      	bne.n	800894e <HAL_TIM_PWM_Start+0x72>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b01      	cmp	r3, #1
 8008944:	bf14      	ite	ne
 8008946:	2301      	movne	r3, #1
 8008948:	2300      	moveq	r3, #0
 800894a:	b2db      	uxtb	r3, r3
 800894c:	e015      	b.n	800897a <HAL_TIM_PWM_Start+0x9e>
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b10      	cmp	r3, #16
 8008952:	d109      	bne.n	8008968 <HAL_TIM_PWM_Start+0x8c>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b01      	cmp	r3, #1
 800895e:	bf14      	ite	ne
 8008960:	2301      	movne	r3, #1
 8008962:	2300      	moveq	r3, #0
 8008964:	b2db      	uxtb	r3, r3
 8008966:	e008      	b.n	800897a <HAL_TIM_PWM_Start+0x9e>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b01      	cmp	r3, #1
 8008972:	bf14      	ite	ne
 8008974:	2301      	movne	r3, #1
 8008976:	2300      	moveq	r3, #0
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d001      	beq.n	8008982 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e097      	b.n	8008ab2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d104      	bne.n	8008992 <HAL_TIM_PWM_Start+0xb6>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2202      	movs	r2, #2
 800898c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008990:	e023      	b.n	80089da <HAL_TIM_PWM_Start+0xfe>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2b04      	cmp	r3, #4
 8008996:	d104      	bne.n	80089a2 <HAL_TIM_PWM_Start+0xc6>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089a0:	e01b      	b.n	80089da <HAL_TIM_PWM_Start+0xfe>
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b08      	cmp	r3, #8
 80089a6:	d104      	bne.n	80089b2 <HAL_TIM_PWM_Start+0xd6>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089b0:	e013      	b.n	80089da <HAL_TIM_PWM_Start+0xfe>
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b0c      	cmp	r3, #12
 80089b6:	d104      	bne.n	80089c2 <HAL_TIM_PWM_Start+0xe6>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2202      	movs	r2, #2
 80089bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80089c0:	e00b      	b.n	80089da <HAL_TIM_PWM_Start+0xfe>
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	2b10      	cmp	r3, #16
 80089c6:	d104      	bne.n	80089d2 <HAL_TIM_PWM_Start+0xf6>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2202      	movs	r2, #2
 80089cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089d0:	e003      	b.n	80089da <HAL_TIM_PWM_Start+0xfe>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2202      	movs	r2, #2
 80089d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2201      	movs	r2, #1
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f001 f92c 	bl	8009c40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a33      	ldr	r2, [pc, #204]	@ (8008abc <HAL_TIM_PWM_Start+0x1e0>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d013      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x13e>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a32      	ldr	r2, [pc, #200]	@ (8008ac0 <HAL_TIM_PWM_Start+0x1e4>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d00e      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x13e>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a30      	ldr	r2, [pc, #192]	@ (8008ac4 <HAL_TIM_PWM_Start+0x1e8>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d009      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x13e>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a2f      	ldr	r2, [pc, #188]	@ (8008ac8 <HAL_TIM_PWM_Start+0x1ec>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d004      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x13e>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a2d      	ldr	r2, [pc, #180]	@ (8008acc <HAL_TIM_PWM_Start+0x1f0>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d101      	bne.n	8008a1e <HAL_TIM_PWM_Start+0x142>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e000      	b.n	8008a20 <HAL_TIM_PWM_Start+0x144>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d007      	beq.n	8008a34 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a32:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a20      	ldr	r2, [pc, #128]	@ (8008abc <HAL_TIM_PWM_Start+0x1e0>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d018      	beq.n	8008a70 <HAL_TIM_PWM_Start+0x194>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a46:	d013      	beq.n	8008a70 <HAL_TIM_PWM_Start+0x194>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a20      	ldr	r2, [pc, #128]	@ (8008ad0 <HAL_TIM_PWM_Start+0x1f4>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d00e      	beq.n	8008a70 <HAL_TIM_PWM_Start+0x194>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a1f      	ldr	r2, [pc, #124]	@ (8008ad4 <HAL_TIM_PWM_Start+0x1f8>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d009      	beq.n	8008a70 <HAL_TIM_PWM_Start+0x194>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a17      	ldr	r2, [pc, #92]	@ (8008ac0 <HAL_TIM_PWM_Start+0x1e4>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d004      	beq.n	8008a70 <HAL_TIM_PWM_Start+0x194>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a16      	ldr	r2, [pc, #88]	@ (8008ac4 <HAL_TIM_PWM_Start+0x1e8>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d115      	bne.n	8008a9c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689a      	ldr	r2, [r3, #8]
 8008a76:	4b18      	ldr	r3, [pc, #96]	@ (8008ad8 <HAL_TIM_PWM_Start+0x1fc>)
 8008a78:	4013      	ands	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b06      	cmp	r3, #6
 8008a80:	d015      	beq.n	8008aae <HAL_TIM_PWM_Start+0x1d2>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a88:	d011      	beq.n	8008aae <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f042 0201 	orr.w	r2, r2, #1
 8008a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a9a:	e008      	b.n	8008aae <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f042 0201 	orr.w	r2, r2, #1
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	e000      	b.n	8008ab0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	40012c00 	.word	0x40012c00
 8008ac0:	40013400 	.word	0x40013400
 8008ac4:	40014000 	.word	0x40014000
 8008ac8:	40014400 	.word	0x40014400
 8008acc:	40014800 	.word	0x40014800
 8008ad0:	40000400 	.word	0x40000400
 8008ad4:	40000800 	.word	0x40000800
 8008ad8:	00010007 	.word	0x00010007

08008adc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2200      	movs	r2, #0
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f001 f8a6 	bl	8009c40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a3e      	ldr	r2, [pc, #248]	@ (8008bf4 <HAL_TIM_PWM_Stop+0x118>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d013      	beq.n	8008b26 <HAL_TIM_PWM_Stop+0x4a>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a3d      	ldr	r2, [pc, #244]	@ (8008bf8 <HAL_TIM_PWM_Stop+0x11c>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d00e      	beq.n	8008b26 <HAL_TIM_PWM_Stop+0x4a>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a3b      	ldr	r2, [pc, #236]	@ (8008bfc <HAL_TIM_PWM_Stop+0x120>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d009      	beq.n	8008b26 <HAL_TIM_PWM_Stop+0x4a>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a3a      	ldr	r2, [pc, #232]	@ (8008c00 <HAL_TIM_PWM_Stop+0x124>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d004      	beq.n	8008b26 <HAL_TIM_PWM_Stop+0x4a>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a38      	ldr	r2, [pc, #224]	@ (8008c04 <HAL_TIM_PWM_Stop+0x128>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d101      	bne.n	8008b2a <HAL_TIM_PWM_Stop+0x4e>
 8008b26:	2301      	movs	r3, #1
 8008b28:	e000      	b.n	8008b2c <HAL_TIM_PWM_Stop+0x50>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d017      	beq.n	8008b60 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6a1a      	ldr	r2, [r3, #32]
 8008b36:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10f      	bne.n	8008b60 <HAL_TIM_PWM_Stop+0x84>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6a1a      	ldr	r2, [r3, #32]
 8008b46:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d107      	bne.n	8008b60 <HAL_TIM_PWM_Stop+0x84>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6a1a      	ldr	r2, [r3, #32]
 8008b66:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10f      	bne.n	8008b90 <HAL_TIM_PWM_Stop+0xb4>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6a1a      	ldr	r2, [r3, #32]
 8008b76:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d107      	bne.n	8008b90 <HAL_TIM_PWM_Stop+0xb4>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f022 0201 	bic.w	r2, r2, #1
 8008b8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d104      	bne.n	8008ba0 <HAL_TIM_PWM_Stop+0xc4>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b9e:	e023      	b.n	8008be8 <HAL_TIM_PWM_Stop+0x10c>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2b04      	cmp	r3, #4
 8008ba4:	d104      	bne.n	8008bb0 <HAL_TIM_PWM_Stop+0xd4>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bae:	e01b      	b.n	8008be8 <HAL_TIM_PWM_Stop+0x10c>
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2b08      	cmp	r3, #8
 8008bb4:	d104      	bne.n	8008bc0 <HAL_TIM_PWM_Stop+0xe4>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bbe:	e013      	b.n	8008be8 <HAL_TIM_PWM_Stop+0x10c>
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2b0c      	cmp	r3, #12
 8008bc4:	d104      	bne.n	8008bd0 <HAL_TIM_PWM_Stop+0xf4>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bce:	e00b      	b.n	8008be8 <HAL_TIM_PWM_Stop+0x10c>
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2b10      	cmp	r3, #16
 8008bd4:	d104      	bne.n	8008be0 <HAL_TIM_PWM_Stop+0x104>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bde:	e003      	b.n	8008be8 <HAL_TIM_PWM_Stop+0x10c>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	40012c00 	.word	0x40012c00
 8008bf8:	40013400 	.word	0x40013400
 8008bfc:	40014000 	.word	0x40014000
 8008c00:	40014400 	.word	0x40014400
 8008c04:	40014800 	.word	0x40014800

08008c08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f003 0302 	and.w	r3, r3, #2
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d020      	beq.n	8008c6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d01b      	beq.n	8008c6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f06f 0202 	mvn.w	r2, #2
 8008c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	f003 0303 	and.w	r3, r3, #3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f003 fd1c 	bl	800c690 <HAL_TIM_IC_CaptureCallback>
 8008c58:	e005      	b.n	8008c66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fb3c 	bl	80092d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fb43 	bl	80092ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	f003 0304 	and.w	r3, r3, #4
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d020      	beq.n	8008cb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f003 0304 	and.w	r3, r3, #4
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d01b      	beq.n	8008cb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f06f 0204 	mvn.w	r2, #4
 8008c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d003      	beq.n	8008ca6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f003 fcf6 	bl	800c690 <HAL_TIM_IC_CaptureCallback>
 8008ca4:	e005      	b.n	8008cb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fb16 	bl	80092d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fb1d 	bl	80092ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f003 0308 	and.w	r3, r3, #8
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d020      	beq.n	8008d04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f003 0308 	and.w	r3, r3, #8
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d01b      	beq.n	8008d04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f06f 0208 	mvn.w	r2, #8
 8008cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2204      	movs	r2, #4
 8008cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	f003 0303 	and.w	r3, r3, #3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f003 fcd0 	bl	800c690 <HAL_TIM_IC_CaptureCallback>
 8008cf0:	e005      	b.n	8008cfe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 faf0 	bl	80092d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 faf7 	bl	80092ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	f003 0310 	and.w	r3, r3, #16
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d020      	beq.n	8008d50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f003 0310 	and.w	r3, r3, #16
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d01b      	beq.n	8008d50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f06f 0210 	mvn.w	r2, #16
 8008d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2208      	movs	r2, #8
 8008d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	69db      	ldr	r3, [r3, #28]
 8008d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f003 fcaa 	bl	800c690 <HAL_TIM_IC_CaptureCallback>
 8008d3c:	e005      	b.n	8008d4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 faca 	bl	80092d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fad1 	bl	80092ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00c      	beq.n	8008d74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f003 0301 	and.w	r3, r3, #1
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d007      	beq.n	8008d74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f06f 0201 	mvn.w	r2, #1
 8008d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 faa8 	bl	80092c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d104      	bne.n	8008d88 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00c      	beq.n	8008da2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d007      	beq.n	8008da2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f001 fbbf 	bl	800a520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00c      	beq.n	8008dc6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d007      	beq.n	8008dc6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f001 fbb7 	bl	800a534 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00c      	beq.n	8008dea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d007      	beq.n	8008dea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fa8b 	bl	8009300 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	f003 0320 	and.w	r3, r3, #32
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00c      	beq.n	8008e0e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f003 0320 	and.w	r3, r3, #32
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d007      	beq.n	8008e0e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f06f 0220 	mvn.w	r2, #32
 8008e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f001 fb7f 	bl	800a50c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00c      	beq.n	8008e32 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d007      	beq.n	8008e32 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f001 fb8b 	bl	800a548 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00c      	beq.n	8008e56 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d007      	beq.n	8008e56 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f001 fb83 	bl	800a55c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00c      	beq.n	8008e7a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d007      	beq.n	8008e7a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f001 fb7b 	bl	800a570 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00c      	beq.n	8008e9e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d007      	beq.n	8008e9e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 fb73 	bl	800a584 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e9e:	bf00      	nop
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d101      	bne.n	8008ec6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e0ff      	b.n	80090c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b14      	cmp	r3, #20
 8008ed2:	f200 80f0 	bhi.w	80090b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8008edc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008edc:	08008f31 	.word	0x08008f31
 8008ee0:	080090b7 	.word	0x080090b7
 8008ee4:	080090b7 	.word	0x080090b7
 8008ee8:	080090b7 	.word	0x080090b7
 8008eec:	08008f71 	.word	0x08008f71
 8008ef0:	080090b7 	.word	0x080090b7
 8008ef4:	080090b7 	.word	0x080090b7
 8008ef8:	080090b7 	.word	0x080090b7
 8008efc:	08008fb3 	.word	0x08008fb3
 8008f00:	080090b7 	.word	0x080090b7
 8008f04:	080090b7 	.word	0x080090b7
 8008f08:	080090b7 	.word	0x080090b7
 8008f0c:	08008ff3 	.word	0x08008ff3
 8008f10:	080090b7 	.word	0x080090b7
 8008f14:	080090b7 	.word	0x080090b7
 8008f18:	080090b7 	.word	0x080090b7
 8008f1c:	08009035 	.word	0x08009035
 8008f20:	080090b7 	.word	0x080090b7
 8008f24:	080090b7 	.word	0x080090b7
 8008f28:	080090b7 	.word	0x080090b7
 8008f2c:	08009075 	.word	0x08009075
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68b9      	ldr	r1, [r7, #8]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f000 fa88 	bl	800944c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	699a      	ldr	r2, [r3, #24]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f042 0208 	orr.w	r2, r2, #8
 8008f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	699a      	ldr	r2, [r3, #24]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 0204 	bic.w	r2, r2, #4
 8008f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6999      	ldr	r1, [r3, #24]
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	691a      	ldr	r2, [r3, #16]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	619a      	str	r2, [r3, #24]
      break;
 8008f6e:	e0a5      	b.n	80090bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68b9      	ldr	r1, [r7, #8]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 faf8 	bl	800956c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	699a      	ldr	r2, [r3, #24]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	699a      	ldr	r2, [r3, #24]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6999      	ldr	r1, [r3, #24]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	021a      	lsls	r2, r3, #8
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	430a      	orrs	r2, r1
 8008fae:	619a      	str	r2, [r3, #24]
      break;
 8008fb0:	e084      	b.n	80090bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68b9      	ldr	r1, [r7, #8]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 fb61 	bl	8009680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	69da      	ldr	r2, [r3, #28]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f042 0208 	orr.w	r2, r2, #8
 8008fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	69da      	ldr	r2, [r3, #28]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f022 0204 	bic.w	r2, r2, #4
 8008fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	69d9      	ldr	r1, [r3, #28]
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	691a      	ldr	r2, [r3, #16]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	430a      	orrs	r2, r1
 8008fee:	61da      	str	r2, [r3, #28]
      break;
 8008ff0:	e064      	b.n	80090bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68b9      	ldr	r1, [r7, #8]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 fbc9 	bl	8009790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	69da      	ldr	r2, [r3, #28]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800900c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69da      	ldr	r2, [r3, #28]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800901c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	69d9      	ldr	r1, [r3, #28]
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	021a      	lsls	r2, r3, #8
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	430a      	orrs	r2, r1
 8009030:	61da      	str	r2, [r3, #28]
      break;
 8009032:	e043      	b.n	80090bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68b9      	ldr	r1, [r7, #8]
 800903a:	4618      	mov	r0, r3
 800903c:	f000 fc32 	bl	80098a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f042 0208 	orr.w	r2, r2, #8
 800904e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f022 0204 	bic.w	r2, r2, #4
 800905e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	691a      	ldr	r2, [r3, #16]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009072:	e023      	b.n	80090bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68b9      	ldr	r1, [r7, #8]
 800907a:	4618      	mov	r0, r3
 800907c:	f000 fc76 	bl	800996c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800908e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800909e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	021a      	lsls	r2, r3, #8
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	430a      	orrs	r2, r1
 80090b2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80090b4:	e002      	b.n	80090bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	75fb      	strb	r3, [r7, #23]
      break;
 80090ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop

080090d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d101      	bne.n	80090ec <HAL_TIM_ConfigClockSource+0x1c>
 80090e8:	2302      	movs	r3, #2
 80090ea:	e0de      	b.n	80092aa <HAL_TIM_ConfigClockSource+0x1da>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2202      	movs	r2, #2
 80090f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800910a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800910e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009116:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a63      	ldr	r2, [pc, #396]	@ (80092b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009126:	4293      	cmp	r3, r2
 8009128:	f000 80a9 	beq.w	800927e <HAL_TIM_ConfigClockSource+0x1ae>
 800912c:	4a61      	ldr	r2, [pc, #388]	@ (80092b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800912e:	4293      	cmp	r3, r2
 8009130:	f200 80ae 	bhi.w	8009290 <HAL_TIM_ConfigClockSource+0x1c0>
 8009134:	4a60      	ldr	r2, [pc, #384]	@ (80092b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009136:	4293      	cmp	r3, r2
 8009138:	f000 80a1 	beq.w	800927e <HAL_TIM_ConfigClockSource+0x1ae>
 800913c:	4a5e      	ldr	r2, [pc, #376]	@ (80092b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800913e:	4293      	cmp	r3, r2
 8009140:	f200 80a6 	bhi.w	8009290 <HAL_TIM_ConfigClockSource+0x1c0>
 8009144:	4a5d      	ldr	r2, [pc, #372]	@ (80092bc <HAL_TIM_ConfigClockSource+0x1ec>)
 8009146:	4293      	cmp	r3, r2
 8009148:	f000 8099 	beq.w	800927e <HAL_TIM_ConfigClockSource+0x1ae>
 800914c:	4a5b      	ldr	r2, [pc, #364]	@ (80092bc <HAL_TIM_ConfigClockSource+0x1ec>)
 800914e:	4293      	cmp	r3, r2
 8009150:	f200 809e 	bhi.w	8009290 <HAL_TIM_ConfigClockSource+0x1c0>
 8009154:	4a5a      	ldr	r2, [pc, #360]	@ (80092c0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009156:	4293      	cmp	r3, r2
 8009158:	f000 8091 	beq.w	800927e <HAL_TIM_ConfigClockSource+0x1ae>
 800915c:	4a58      	ldr	r2, [pc, #352]	@ (80092c0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800915e:	4293      	cmp	r3, r2
 8009160:	f200 8096 	bhi.w	8009290 <HAL_TIM_ConfigClockSource+0x1c0>
 8009164:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009168:	f000 8089 	beq.w	800927e <HAL_TIM_ConfigClockSource+0x1ae>
 800916c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009170:	f200 808e 	bhi.w	8009290 <HAL_TIM_ConfigClockSource+0x1c0>
 8009174:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009178:	d03e      	beq.n	80091f8 <HAL_TIM_ConfigClockSource+0x128>
 800917a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800917e:	f200 8087 	bhi.w	8009290 <HAL_TIM_ConfigClockSource+0x1c0>
 8009182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009186:	f000 8086 	beq.w	8009296 <HAL_TIM_ConfigClockSource+0x1c6>
 800918a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800918e:	d87f      	bhi.n	8009290 <HAL_TIM_ConfigClockSource+0x1c0>
 8009190:	2b70      	cmp	r3, #112	@ 0x70
 8009192:	d01a      	beq.n	80091ca <HAL_TIM_ConfigClockSource+0xfa>
 8009194:	2b70      	cmp	r3, #112	@ 0x70
 8009196:	d87b      	bhi.n	8009290 <HAL_TIM_ConfigClockSource+0x1c0>
 8009198:	2b60      	cmp	r3, #96	@ 0x60
 800919a:	d050      	beq.n	800923e <HAL_TIM_ConfigClockSource+0x16e>
 800919c:	2b60      	cmp	r3, #96	@ 0x60
 800919e:	d877      	bhi.n	8009290 <HAL_TIM_ConfigClockSource+0x1c0>
 80091a0:	2b50      	cmp	r3, #80	@ 0x50
 80091a2:	d03c      	beq.n	800921e <HAL_TIM_ConfigClockSource+0x14e>
 80091a4:	2b50      	cmp	r3, #80	@ 0x50
 80091a6:	d873      	bhi.n	8009290 <HAL_TIM_ConfigClockSource+0x1c0>
 80091a8:	2b40      	cmp	r3, #64	@ 0x40
 80091aa:	d058      	beq.n	800925e <HAL_TIM_ConfigClockSource+0x18e>
 80091ac:	2b40      	cmp	r3, #64	@ 0x40
 80091ae:	d86f      	bhi.n	8009290 <HAL_TIM_ConfigClockSource+0x1c0>
 80091b0:	2b30      	cmp	r3, #48	@ 0x30
 80091b2:	d064      	beq.n	800927e <HAL_TIM_ConfigClockSource+0x1ae>
 80091b4:	2b30      	cmp	r3, #48	@ 0x30
 80091b6:	d86b      	bhi.n	8009290 <HAL_TIM_ConfigClockSource+0x1c0>
 80091b8:	2b20      	cmp	r3, #32
 80091ba:	d060      	beq.n	800927e <HAL_TIM_ConfigClockSource+0x1ae>
 80091bc:	2b20      	cmp	r3, #32
 80091be:	d867      	bhi.n	8009290 <HAL_TIM_ConfigClockSource+0x1c0>
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d05c      	beq.n	800927e <HAL_TIM_ConfigClockSource+0x1ae>
 80091c4:	2b10      	cmp	r3, #16
 80091c6:	d05a      	beq.n	800927e <HAL_TIM_ConfigClockSource+0x1ae>
 80091c8:	e062      	b.n	8009290 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091da:	f000 fd11 	bl	8009c00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80091ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	609a      	str	r2, [r3, #8]
      break;
 80091f6:	e04f      	b.n	8009298 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009208:	f000 fcfa 	bl	8009c00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689a      	ldr	r2, [r3, #8]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800921a:	609a      	str	r2, [r3, #8]
      break;
 800921c:	e03c      	b.n	8009298 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800922a:	461a      	mov	r2, r3
 800922c:	f000 fc6c 	bl	8009b08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2150      	movs	r1, #80	@ 0x50
 8009236:	4618      	mov	r0, r3
 8009238:	f000 fcc5 	bl	8009bc6 <TIM_ITRx_SetConfig>
      break;
 800923c:	e02c      	b.n	8009298 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800924a:	461a      	mov	r2, r3
 800924c:	f000 fc8b 	bl	8009b66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2160      	movs	r1, #96	@ 0x60
 8009256:	4618      	mov	r0, r3
 8009258:	f000 fcb5 	bl	8009bc6 <TIM_ITRx_SetConfig>
      break;
 800925c:	e01c      	b.n	8009298 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800926a:	461a      	mov	r2, r3
 800926c:	f000 fc4c 	bl	8009b08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2140      	movs	r1, #64	@ 0x40
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fca5 	bl	8009bc6 <TIM_ITRx_SetConfig>
      break;
 800927c:	e00c      	b.n	8009298 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4619      	mov	r1, r3
 8009288:	4610      	mov	r0, r2
 800928a:	f000 fc9c 	bl	8009bc6 <TIM_ITRx_SetConfig>
      break;
 800928e:	e003      	b.n	8009298 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	73fb      	strb	r3, [r7, #15]
      break;
 8009294:	e000      	b.n	8009298 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009296:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	00100070 	.word	0x00100070
 80092b8:	00100040 	.word	0x00100040
 80092bc:	00100030 	.word	0x00100030
 80092c0:	00100020 	.word	0x00100020

080092c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80092cc:	bf00      	nop
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a42      	ldr	r2, [pc, #264]	@ (8009430 <TIM_Base_SetConfig+0x11c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d00f      	beq.n	800934c <TIM_Base_SetConfig+0x38>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009332:	d00b      	beq.n	800934c <TIM_Base_SetConfig+0x38>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a3f      	ldr	r2, [pc, #252]	@ (8009434 <TIM_Base_SetConfig+0x120>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d007      	beq.n	800934c <TIM_Base_SetConfig+0x38>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a3e      	ldr	r2, [pc, #248]	@ (8009438 <TIM_Base_SetConfig+0x124>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d003      	beq.n	800934c <TIM_Base_SetConfig+0x38>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a3d      	ldr	r2, [pc, #244]	@ (800943c <TIM_Base_SetConfig+0x128>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d108      	bne.n	800935e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	4313      	orrs	r3, r2
 800935c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a33      	ldr	r2, [pc, #204]	@ (8009430 <TIM_Base_SetConfig+0x11c>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d01b      	beq.n	800939e <TIM_Base_SetConfig+0x8a>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800936c:	d017      	beq.n	800939e <TIM_Base_SetConfig+0x8a>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a30      	ldr	r2, [pc, #192]	@ (8009434 <TIM_Base_SetConfig+0x120>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d013      	beq.n	800939e <TIM_Base_SetConfig+0x8a>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a2f      	ldr	r2, [pc, #188]	@ (8009438 <TIM_Base_SetConfig+0x124>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d00f      	beq.n	800939e <TIM_Base_SetConfig+0x8a>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a2e      	ldr	r2, [pc, #184]	@ (800943c <TIM_Base_SetConfig+0x128>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d00b      	beq.n	800939e <TIM_Base_SetConfig+0x8a>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a2d      	ldr	r2, [pc, #180]	@ (8009440 <TIM_Base_SetConfig+0x12c>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d007      	beq.n	800939e <TIM_Base_SetConfig+0x8a>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a2c      	ldr	r2, [pc, #176]	@ (8009444 <TIM_Base_SetConfig+0x130>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d003      	beq.n	800939e <TIM_Base_SetConfig+0x8a>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a2b      	ldr	r2, [pc, #172]	@ (8009448 <TIM_Base_SetConfig+0x134>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d108      	bne.n	80093b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	689a      	ldr	r2, [r3, #8]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a16      	ldr	r2, [pc, #88]	@ (8009430 <TIM_Base_SetConfig+0x11c>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d00f      	beq.n	80093fc <TIM_Base_SetConfig+0xe8>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a17      	ldr	r2, [pc, #92]	@ (800943c <TIM_Base_SetConfig+0x128>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d00b      	beq.n	80093fc <TIM_Base_SetConfig+0xe8>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a16      	ldr	r2, [pc, #88]	@ (8009440 <TIM_Base_SetConfig+0x12c>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d007      	beq.n	80093fc <TIM_Base_SetConfig+0xe8>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a15      	ldr	r2, [pc, #84]	@ (8009444 <TIM_Base_SetConfig+0x130>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d003      	beq.n	80093fc <TIM_Base_SetConfig+0xe8>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a14      	ldr	r2, [pc, #80]	@ (8009448 <TIM_Base_SetConfig+0x134>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d103      	bne.n	8009404 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	691a      	ldr	r2, [r3, #16]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	2b01      	cmp	r3, #1
 8009414:	d105      	bne.n	8009422 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	f023 0201 	bic.w	r2, r3, #1
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	611a      	str	r2, [r3, #16]
  }
}
 8009422:	bf00      	nop
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	40012c00 	.word	0x40012c00
 8009434:	40000400 	.word	0x40000400
 8009438:	40000800 	.word	0x40000800
 800943c:	40013400 	.word	0x40013400
 8009440:	40014000 	.word	0x40014000
 8009444:	40014400 	.word	0x40014400
 8009448:	40014800 	.word	0x40014800

0800944c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800944c:	b480      	push	{r7}
 800944e:	b087      	sub	sp, #28
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a1b      	ldr	r3, [r3, #32]
 8009460:	f023 0201 	bic.w	r2, r3, #1
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800947a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800947e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f023 0303 	bic.w	r3, r3, #3
 8009486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	4313      	orrs	r3, r2
 8009490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f023 0302 	bic.w	r3, r3, #2
 8009498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a2c      	ldr	r2, [pc, #176]	@ (8009558 <TIM_OC1_SetConfig+0x10c>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d00f      	beq.n	80094cc <TIM_OC1_SetConfig+0x80>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a2b      	ldr	r2, [pc, #172]	@ (800955c <TIM_OC1_SetConfig+0x110>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d00b      	beq.n	80094cc <TIM_OC1_SetConfig+0x80>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a2a      	ldr	r2, [pc, #168]	@ (8009560 <TIM_OC1_SetConfig+0x114>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d007      	beq.n	80094cc <TIM_OC1_SetConfig+0x80>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a29      	ldr	r2, [pc, #164]	@ (8009564 <TIM_OC1_SetConfig+0x118>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d003      	beq.n	80094cc <TIM_OC1_SetConfig+0x80>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a28      	ldr	r2, [pc, #160]	@ (8009568 <TIM_OC1_SetConfig+0x11c>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d10c      	bne.n	80094e6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	f023 0308 	bic.w	r3, r3, #8
 80094d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	4313      	orrs	r3, r2
 80094dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f023 0304 	bic.w	r3, r3, #4
 80094e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009558 <TIM_OC1_SetConfig+0x10c>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d00f      	beq.n	800950e <TIM_OC1_SetConfig+0xc2>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a1a      	ldr	r2, [pc, #104]	@ (800955c <TIM_OC1_SetConfig+0x110>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d00b      	beq.n	800950e <TIM_OC1_SetConfig+0xc2>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a19      	ldr	r2, [pc, #100]	@ (8009560 <TIM_OC1_SetConfig+0x114>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d007      	beq.n	800950e <TIM_OC1_SetConfig+0xc2>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a18      	ldr	r2, [pc, #96]	@ (8009564 <TIM_OC1_SetConfig+0x118>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d003      	beq.n	800950e <TIM_OC1_SetConfig+0xc2>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a17      	ldr	r2, [pc, #92]	@ (8009568 <TIM_OC1_SetConfig+0x11c>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d111      	bne.n	8009532 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800951c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	4313      	orrs	r3, r2
 8009526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	4313      	orrs	r3, r2
 8009530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	685a      	ldr	r2, [r3, #4]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	697a      	ldr	r2, [r7, #20]
 800954a:	621a      	str	r2, [r3, #32]
}
 800954c:	bf00      	nop
 800954e:	371c      	adds	r7, #28
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	40012c00 	.word	0x40012c00
 800955c:	40013400 	.word	0x40013400
 8009560:	40014000 	.word	0x40014000
 8009564:	40014400 	.word	0x40014400
 8009568:	40014800 	.word	0x40014800

0800956c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800956c:	b480      	push	{r7}
 800956e:	b087      	sub	sp, #28
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6a1b      	ldr	r3, [r3, #32]
 800957a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	f023 0210 	bic.w	r2, r3, #16
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800959a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800959e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	021b      	lsls	r3, r3, #8
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	f023 0320 	bic.w	r3, r3, #32
 80095ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	011b      	lsls	r3, r3, #4
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a28      	ldr	r2, [pc, #160]	@ (800966c <TIM_OC2_SetConfig+0x100>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d003      	beq.n	80095d8 <TIM_OC2_SetConfig+0x6c>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a27      	ldr	r2, [pc, #156]	@ (8009670 <TIM_OC2_SetConfig+0x104>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d10d      	bne.n	80095f4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	011b      	lsls	r3, r3, #4
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a1d      	ldr	r2, [pc, #116]	@ (800966c <TIM_OC2_SetConfig+0x100>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d00f      	beq.n	800961c <TIM_OC2_SetConfig+0xb0>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a1c      	ldr	r2, [pc, #112]	@ (8009670 <TIM_OC2_SetConfig+0x104>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d00b      	beq.n	800961c <TIM_OC2_SetConfig+0xb0>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a1b      	ldr	r2, [pc, #108]	@ (8009674 <TIM_OC2_SetConfig+0x108>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d007      	beq.n	800961c <TIM_OC2_SetConfig+0xb0>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a1a      	ldr	r2, [pc, #104]	@ (8009678 <TIM_OC2_SetConfig+0x10c>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d003      	beq.n	800961c <TIM_OC2_SetConfig+0xb0>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a19      	ldr	r2, [pc, #100]	@ (800967c <TIM_OC2_SetConfig+0x110>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d113      	bne.n	8009644 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009622:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800962a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	695b      	ldr	r3, [r3, #20]
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	4313      	orrs	r3, r2
 8009636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	4313      	orrs	r3, r2
 8009642:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	621a      	str	r2, [r3, #32]
}
 800965e:	bf00      	nop
 8009660:	371c      	adds	r7, #28
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	40012c00 	.word	0x40012c00
 8009670:	40013400 	.word	0x40013400
 8009674:	40014000 	.word	0x40014000
 8009678:	40014400 	.word	0x40014400
 800967c:	40014800 	.word	0x40014800

08009680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009680:	b480      	push	{r7}
 8009682:	b087      	sub	sp, #28
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a1b      	ldr	r3, [r3, #32]
 8009694:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	69db      	ldr	r3, [r3, #28]
 80096a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f023 0303 	bic.w	r3, r3, #3
 80096ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80096cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	021b      	lsls	r3, r3, #8
 80096d4:	697a      	ldr	r2, [r7, #20]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a27      	ldr	r2, [pc, #156]	@ (800977c <TIM_OC3_SetConfig+0xfc>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d003      	beq.n	80096ea <TIM_OC3_SetConfig+0x6a>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a26      	ldr	r2, [pc, #152]	@ (8009780 <TIM_OC3_SetConfig+0x100>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d10d      	bne.n	8009706 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80096f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	021b      	lsls	r3, r3, #8
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a1c      	ldr	r2, [pc, #112]	@ (800977c <TIM_OC3_SetConfig+0xfc>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d00f      	beq.n	800972e <TIM_OC3_SetConfig+0xae>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a1b      	ldr	r2, [pc, #108]	@ (8009780 <TIM_OC3_SetConfig+0x100>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d00b      	beq.n	800972e <TIM_OC3_SetConfig+0xae>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a1a      	ldr	r2, [pc, #104]	@ (8009784 <TIM_OC3_SetConfig+0x104>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d007      	beq.n	800972e <TIM_OC3_SetConfig+0xae>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a19      	ldr	r2, [pc, #100]	@ (8009788 <TIM_OC3_SetConfig+0x108>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d003      	beq.n	800972e <TIM_OC3_SetConfig+0xae>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a18      	ldr	r2, [pc, #96]	@ (800978c <TIM_OC3_SetConfig+0x10c>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d113      	bne.n	8009756 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800973c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	695b      	ldr	r3, [r3, #20]
 8009742:	011b      	lsls	r3, r3, #4
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	4313      	orrs	r3, r2
 8009748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	011b      	lsls	r3, r3, #4
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	4313      	orrs	r3, r2
 8009754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	685a      	ldr	r2, [r3, #4]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	621a      	str	r2, [r3, #32]
}
 8009770:	bf00      	nop
 8009772:	371c      	adds	r7, #28
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	40012c00 	.word	0x40012c00
 8009780:	40013400 	.word	0x40013400
 8009784:	40014000 	.word	0x40014000
 8009788:	40014400 	.word	0x40014400
 800978c:	40014800 	.word	0x40014800

08009790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009790:	b480      	push	{r7}
 8009792:	b087      	sub	sp, #28
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	69db      	ldr	r3, [r3, #28]
 80097b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80097be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	021b      	lsls	r3, r3, #8
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	031b      	lsls	r3, r3, #12
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a28      	ldr	r2, [pc, #160]	@ (8009890 <TIM_OC4_SetConfig+0x100>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d003      	beq.n	80097fc <TIM_OC4_SetConfig+0x6c>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a27      	ldr	r2, [pc, #156]	@ (8009894 <TIM_OC4_SetConfig+0x104>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d10d      	bne.n	8009818 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	031b      	lsls	r3, r3, #12
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	4313      	orrs	r3, r2
 800980e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009816:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a1d      	ldr	r2, [pc, #116]	@ (8009890 <TIM_OC4_SetConfig+0x100>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d00f      	beq.n	8009840 <TIM_OC4_SetConfig+0xb0>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a1c      	ldr	r2, [pc, #112]	@ (8009894 <TIM_OC4_SetConfig+0x104>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d00b      	beq.n	8009840 <TIM_OC4_SetConfig+0xb0>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a1b      	ldr	r2, [pc, #108]	@ (8009898 <TIM_OC4_SetConfig+0x108>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d007      	beq.n	8009840 <TIM_OC4_SetConfig+0xb0>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a1a      	ldr	r2, [pc, #104]	@ (800989c <TIM_OC4_SetConfig+0x10c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d003      	beq.n	8009840 <TIM_OC4_SetConfig+0xb0>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a19      	ldr	r2, [pc, #100]	@ (80098a0 <TIM_OC4_SetConfig+0x110>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d113      	bne.n	8009868 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009846:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800984e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	019b      	lsls	r3, r3, #6
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	4313      	orrs	r3, r2
 800985a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	019b      	lsls	r3, r3, #6
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	4313      	orrs	r3, r2
 8009866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	621a      	str	r2, [r3, #32]
}
 8009882:	bf00      	nop
 8009884:	371c      	adds	r7, #28
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	40012c00 	.word	0x40012c00
 8009894:	40013400 	.word	0x40013400
 8009898:	40014000 	.word	0x40014000
 800989c:	40014400 	.word	0x40014400
 80098a0:	40014800 	.word	0x40014800

080098a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b087      	sub	sp, #28
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a1b      	ldr	r3, [r3, #32]
 80098b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a1b      	ldr	r3, [r3, #32]
 80098b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	4313      	orrs	r3, r2
 80098e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80098e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	041b      	lsls	r3, r3, #16
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a17      	ldr	r2, [pc, #92]	@ (8009958 <TIM_OC5_SetConfig+0xb4>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d00f      	beq.n	800991e <TIM_OC5_SetConfig+0x7a>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a16      	ldr	r2, [pc, #88]	@ (800995c <TIM_OC5_SetConfig+0xb8>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d00b      	beq.n	800991e <TIM_OC5_SetConfig+0x7a>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a15      	ldr	r2, [pc, #84]	@ (8009960 <TIM_OC5_SetConfig+0xbc>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d007      	beq.n	800991e <TIM_OC5_SetConfig+0x7a>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4a14      	ldr	r2, [pc, #80]	@ (8009964 <TIM_OC5_SetConfig+0xc0>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d003      	beq.n	800991e <TIM_OC5_SetConfig+0x7a>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a13      	ldr	r2, [pc, #76]	@ (8009968 <TIM_OC5_SetConfig+0xc4>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d109      	bne.n	8009932 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009924:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	695b      	ldr	r3, [r3, #20]
 800992a:	021b      	lsls	r3, r3, #8
 800992c:	697a      	ldr	r2, [r7, #20]
 800992e:	4313      	orrs	r3, r2
 8009930:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	697a      	ldr	r2, [r7, #20]
 8009936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	621a      	str	r2, [r3, #32]
}
 800994c:	bf00      	nop
 800994e:	371c      	adds	r7, #28
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	40012c00 	.word	0x40012c00
 800995c:	40013400 	.word	0x40013400
 8009960:	40014000 	.word	0x40014000
 8009964:	40014400 	.word	0x40014400
 8009968:	40014800 	.word	0x40014800

0800996c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800996c:	b480      	push	{r7}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a1b      	ldr	r3, [r3, #32]
 8009980:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800999a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800999e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	021b      	lsls	r3, r3, #8
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80099b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	051b      	lsls	r3, r3, #20
 80099ba:	693a      	ldr	r2, [r7, #16]
 80099bc:	4313      	orrs	r3, r2
 80099be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a18      	ldr	r2, [pc, #96]	@ (8009a24 <TIM_OC6_SetConfig+0xb8>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d00f      	beq.n	80099e8 <TIM_OC6_SetConfig+0x7c>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a17      	ldr	r2, [pc, #92]	@ (8009a28 <TIM_OC6_SetConfig+0xbc>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d00b      	beq.n	80099e8 <TIM_OC6_SetConfig+0x7c>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a16      	ldr	r2, [pc, #88]	@ (8009a2c <TIM_OC6_SetConfig+0xc0>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d007      	beq.n	80099e8 <TIM_OC6_SetConfig+0x7c>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a15      	ldr	r2, [pc, #84]	@ (8009a30 <TIM_OC6_SetConfig+0xc4>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d003      	beq.n	80099e8 <TIM_OC6_SetConfig+0x7c>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a14      	ldr	r2, [pc, #80]	@ (8009a34 <TIM_OC6_SetConfig+0xc8>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d109      	bne.n	80099fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80099ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	695b      	ldr	r3, [r3, #20]
 80099f4:	029b      	lsls	r3, r3, #10
 80099f6:	697a      	ldr	r2, [r7, #20]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	621a      	str	r2, [r3, #32]
}
 8009a16:	bf00      	nop
 8009a18:	371c      	adds	r7, #28
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	40012c00 	.word	0x40012c00
 8009a28:	40013400 	.word	0x40013400
 8009a2c:	40014000 	.word	0x40014000
 8009a30:	40014400 	.word	0x40014400
 8009a34:	40014800 	.word	0x40014800

08009a38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6a1b      	ldr	r3, [r3, #32]
 8009a50:	f023 0201 	bic.w	r2, r3, #1
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	4a24      	ldr	r2, [pc, #144]	@ (8009af4 <TIM_TI1_SetConfig+0xbc>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d013      	beq.n	8009a8e <TIM_TI1_SetConfig+0x56>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a6c:	d00f      	beq.n	8009a8e <TIM_TI1_SetConfig+0x56>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	4a21      	ldr	r2, [pc, #132]	@ (8009af8 <TIM_TI1_SetConfig+0xc0>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d00b      	beq.n	8009a8e <TIM_TI1_SetConfig+0x56>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	4a20      	ldr	r2, [pc, #128]	@ (8009afc <TIM_TI1_SetConfig+0xc4>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d007      	beq.n	8009a8e <TIM_TI1_SetConfig+0x56>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	4a1f      	ldr	r2, [pc, #124]	@ (8009b00 <TIM_TI1_SetConfig+0xc8>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d003      	beq.n	8009a8e <TIM_TI1_SetConfig+0x56>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	4a1e      	ldr	r2, [pc, #120]	@ (8009b04 <TIM_TI1_SetConfig+0xcc>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d101      	bne.n	8009a92 <TIM_TI1_SetConfig+0x5a>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e000      	b.n	8009a94 <TIM_TI1_SetConfig+0x5c>
 8009a92:	2300      	movs	r3, #0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d008      	beq.n	8009aaa <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	f023 0303 	bic.w	r3, r3, #3
 8009a9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	617b      	str	r3, [r7, #20]
 8009aa8:	e003      	b.n	8009ab2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f043 0301 	orr.w	r3, r3, #1
 8009ab0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009ab8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	011b      	lsls	r3, r3, #4
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	f023 030a 	bic.w	r3, r3, #10
 8009acc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	f003 030a 	and.w	r3, r3, #10
 8009ad4:	693a      	ldr	r2, [r7, #16]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	693a      	ldr	r2, [r7, #16]
 8009ae4:	621a      	str	r2, [r3, #32]
}
 8009ae6:	bf00      	nop
 8009ae8:	371c      	adds	r7, #28
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	40012c00 	.word	0x40012c00
 8009af8:	40000400 	.word	0x40000400
 8009afc:	40000800 	.word	0x40000800
 8009b00:	40013400 	.word	0x40013400
 8009b04:	40014000 	.word	0x40014000

08009b08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b087      	sub	sp, #28
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6a1b      	ldr	r3, [r3, #32]
 8009b18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	f023 0201 	bic.w	r2, r3, #1
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	011b      	lsls	r3, r3, #4
 8009b38:	693a      	ldr	r2, [r7, #16]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	f023 030a 	bic.w	r3, r3, #10
 8009b44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	693a      	ldr	r2, [r7, #16]
 8009b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	697a      	ldr	r2, [r7, #20]
 8009b58:	621a      	str	r2, [r3, #32]
}
 8009b5a:	bf00      	nop
 8009b5c:	371c      	adds	r7, #28
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b66:	b480      	push	{r7}
 8009b68:	b087      	sub	sp, #28
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	60f8      	str	r0, [r7, #12]
 8009b6e:	60b9      	str	r1, [r7, #8]
 8009b70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6a1b      	ldr	r3, [r3, #32]
 8009b7c:	f023 0210 	bic.w	r2, r3, #16
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	031b      	lsls	r3, r3, #12
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009ba2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	011b      	lsls	r3, r3, #4
 8009ba8:	697a      	ldr	r2, [r7, #20]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	693a      	ldr	r2, [r7, #16]
 8009bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	697a      	ldr	r2, [r7, #20]
 8009bb8:	621a      	str	r2, [r3, #32]
}
 8009bba:	bf00      	nop
 8009bbc:	371c      	adds	r7, #28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr

08009bc6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b085      	sub	sp, #20
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	f043 0307 	orr.w	r3, r3, #7
 8009bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	609a      	str	r2, [r3, #8]
}
 8009bf4:	bf00      	nop
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b087      	sub	sp, #28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
 8009c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	021a      	lsls	r2, r3, #8
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	431a      	orrs	r2, r3
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	609a      	str	r2, [r3, #8]
}
 8009c34:	bf00      	nop
 8009c36:	371c      	adds	r7, #28
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b087      	sub	sp, #28
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	f003 031f 	and.w	r3, r3, #31
 8009c52:	2201      	movs	r2, #1
 8009c54:	fa02 f303 	lsl.w	r3, r2, r3
 8009c58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6a1a      	ldr	r2, [r3, #32]
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	43db      	mvns	r3, r3
 8009c62:	401a      	ands	r2, r3
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6a1a      	ldr	r2, [r3, #32]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	f003 031f 	and.w	r3, r3, #31
 8009c72:	6879      	ldr	r1, [r7, #4]
 8009c74:	fa01 f303 	lsl.w	r3, r1, r3
 8009c78:	431a      	orrs	r2, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	621a      	str	r2, [r3, #32]
}
 8009c7e:	bf00      	nop
 8009c80:	371c      	adds	r7, #28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr

08009c8a <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b08a      	sub	sp, #40	@ 0x28
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e0a0      	b.n	8009de0 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d106      	bne.n	8009cb8 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f898 	bl	8009de8 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2202      	movs	r2, #2
 8009cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	4619      	mov	r1, r3
 8009cca:	4610      	mov	r0, r2
 8009ccc:	f7ff fb22 	bl	8009314 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6818      	ldr	r0, [r3, #0]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	6819      	ldr	r1, [r3, #0]
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	2203      	movs	r2, #3
 8009cde:	f7ff feab 	bl	8009a38 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	699a      	ldr	r2, [r3, #24]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f022 020c 	bic.w	r2, r2, #12
 8009cf0:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	6999      	ldr	r1, [r3, #24]
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	685a      	ldr	r2, [r3, #4]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	430a      	orrs	r2, r1
 8009d02:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	685a      	ldr	r2, [r3, #4]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009d12:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	6812      	ldr	r2, [r2, #0]
 8009d1e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d26:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	689a      	ldr	r2, [r3, #8]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d36:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	6812      	ldr	r2, [r2, #0]
 8009d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d46:	f023 0307 	bic.w	r3, r3, #7
 8009d4a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	689a      	ldr	r2, [r3, #8]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f042 0204 	orr.w	r2, r2, #4
 8009d5a:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009d60:	2300      	movs	r3, #0
 8009d62:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8009d64:	2370      	movs	r3, #112	@ 0x70
 8009d66:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009d70:	2300      	movs	r3, #0
 8009d72:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f107 020c 	add.w	r2, r7, #12
 8009d82:	4611      	mov	r1, r2
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7ff fbf1 	bl	800956c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	6812      	ldr	r2, [r2, #0]
 8009d94:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009d98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d9c:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	685a      	ldr	r2, [r3, #4]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8009dac:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3728      	adds	r7, #40	@ 0x28
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009e0a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009e12:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e1a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e22:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d108      	bne.n	8009e3c <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e2a:	7bbb      	ldrb	r3, [r7, #14]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d105      	bne.n	8009e3c <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e30:	7b7b      	ldrb	r3, [r7, #13]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d102      	bne.n	8009e3c <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e36:	7b3b      	ldrb	r3, [r7, #12]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d001      	beq.n	8009e40 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e05d      	b.n	8009efc <HAL_TIMEx_HallSensor_Start_IT+0x100>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2202      	movs	r2, #2
 8009e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2202      	movs	r2, #2
 8009e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68da      	ldr	r2, [r3, #12]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f042 0202 	orr.w	r2, r2, #2
 8009e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2201      	movs	r2, #1
 8009e76:	2100      	movs	r1, #0
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7ff fee1 	bl	8009c40 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a20      	ldr	r2, [pc, #128]	@ (8009f04 <HAL_TIMEx_HallSensor_Start_IT+0x108>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d018      	beq.n	8009eba <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e90:	d013      	beq.n	8009eba <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a1c      	ldr	r2, [pc, #112]	@ (8009f08 <HAL_TIMEx_HallSensor_Start_IT+0x10c>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d00e      	beq.n	8009eba <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8009f0c <HAL_TIMEx_HallSensor_Start_IT+0x110>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d009      	beq.n	8009eba <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a19      	ldr	r2, [pc, #100]	@ (8009f10 <HAL_TIMEx_HallSensor_Start_IT+0x114>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d004      	beq.n	8009eba <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a17      	ldr	r2, [pc, #92]	@ (8009f14 <HAL_TIMEx_HallSensor_Start_IT+0x118>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d115      	bne.n	8009ee6 <HAL_TIMEx_HallSensor_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	689a      	ldr	r2, [r3, #8]
 8009ec0:	4b15      	ldr	r3, [pc, #84]	@ (8009f18 <HAL_TIMEx_HallSensor_Start_IT+0x11c>)
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	2b06      	cmp	r3, #6
 8009eca:	d015      	beq.n	8009ef8 <HAL_TIMEx_HallSensor_Start_IT+0xfc>
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ed2:	d011      	beq.n	8009ef8 <HAL_TIMEx_HallSensor_Start_IT+0xfc>
    {
      __HAL_TIM_ENABLE(htim);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f042 0201 	orr.w	r2, r2, #1
 8009ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ee4:	e008      	b.n	8009ef8 <HAL_TIMEx_HallSensor_Start_IT+0xfc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f042 0201 	orr.w	r2, r2, #1
 8009ef4:	601a      	str	r2, [r3, #0]
 8009ef6:	e000      	b.n	8009efa <HAL_TIMEx_HallSensor_Start_IT+0xfe>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ef8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	40012c00 	.word	0x40012c00
 8009f08:	40000400 	.word	0x40000400
 8009f0c:	40000800 	.word	0x40000800
 8009f10:	40013400 	.word	0x40013400
 8009f14:	40014000 	.word	0x40014000
 8009f18:	00010007 	.word	0x00010007

08009f1c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d109      	bne.n	8009f40 <HAL_TIMEx_PWMN_Start+0x24>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	bf14      	ite	ne
 8009f38:	2301      	movne	r3, #1
 8009f3a:	2300      	moveq	r3, #0
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	e022      	b.n	8009f86 <HAL_TIMEx_PWMN_Start+0x6a>
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	2b04      	cmp	r3, #4
 8009f44:	d109      	bne.n	8009f5a <HAL_TIMEx_PWMN_Start+0x3e>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	bf14      	ite	ne
 8009f52:	2301      	movne	r3, #1
 8009f54:	2300      	moveq	r3, #0
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	e015      	b.n	8009f86 <HAL_TIMEx_PWMN_Start+0x6a>
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2b08      	cmp	r3, #8
 8009f5e:	d109      	bne.n	8009f74 <HAL_TIMEx_PWMN_Start+0x58>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	bf14      	ite	ne
 8009f6c:	2301      	movne	r3, #1
 8009f6e:	2300      	moveq	r3, #0
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	e008      	b.n	8009f86 <HAL_TIMEx_PWMN_Start+0x6a>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	bf14      	ite	ne
 8009f80:	2301      	movne	r3, #1
 8009f82:	2300      	moveq	r3, #0
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e069      	b.n	800a062 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d104      	bne.n	8009f9e <HAL_TIMEx_PWMN_Start+0x82>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2202      	movs	r2, #2
 8009f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f9c:	e013      	b.n	8009fc6 <HAL_TIMEx_PWMN_Start+0xaa>
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2b04      	cmp	r3, #4
 8009fa2:	d104      	bne.n	8009fae <HAL_TIMEx_PWMN_Start+0x92>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009fac:	e00b      	b.n	8009fc6 <HAL_TIMEx_PWMN_Start+0xaa>
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2b08      	cmp	r3, #8
 8009fb2:	d104      	bne.n	8009fbe <HAL_TIMEx_PWMN_Start+0xa2>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009fbc:	e003      	b.n	8009fc6 <HAL_TIMEx_PWMN_Start+0xaa>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2202      	movs	r2, #2
 8009fc2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2204      	movs	r2, #4
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f000 fae2 	bl	800a598 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009fe2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a20      	ldr	r2, [pc, #128]	@ (800a06c <HAL_TIMEx_PWMN_Start+0x150>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d018      	beq.n	800a020 <HAL_TIMEx_PWMN_Start+0x104>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ff6:	d013      	beq.n	800a020 <HAL_TIMEx_PWMN_Start+0x104>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a1c      	ldr	r2, [pc, #112]	@ (800a070 <HAL_TIMEx_PWMN_Start+0x154>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d00e      	beq.n	800a020 <HAL_TIMEx_PWMN_Start+0x104>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a1b      	ldr	r2, [pc, #108]	@ (800a074 <HAL_TIMEx_PWMN_Start+0x158>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d009      	beq.n	800a020 <HAL_TIMEx_PWMN_Start+0x104>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a19      	ldr	r2, [pc, #100]	@ (800a078 <HAL_TIMEx_PWMN_Start+0x15c>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d004      	beq.n	800a020 <HAL_TIMEx_PWMN_Start+0x104>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a18      	ldr	r2, [pc, #96]	@ (800a07c <HAL_TIMEx_PWMN_Start+0x160>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d115      	bne.n	800a04c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	689a      	ldr	r2, [r3, #8]
 800a026:	4b16      	ldr	r3, [pc, #88]	@ (800a080 <HAL_TIMEx_PWMN_Start+0x164>)
 800a028:	4013      	ands	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b06      	cmp	r3, #6
 800a030:	d015      	beq.n	800a05e <HAL_TIMEx_PWMN_Start+0x142>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a038:	d011      	beq.n	800a05e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f042 0201 	orr.w	r2, r2, #1
 800a048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a04a:	e008      	b.n	800a05e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f042 0201 	orr.w	r2, r2, #1
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	e000      	b.n	800a060 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a05e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	40012c00 	.word	0x40012c00
 800a070:	40000400 	.word	0x40000400
 800a074:	40000800 	.word	0x40000800
 800a078:	40013400 	.word	0x40013400
 800a07c:	40014000 	.word	0x40014000
 800a080:	00010007 	.word	0x00010007

0800a084 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2200      	movs	r2, #0
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	4618      	mov	r0, r3
 800a098:	f000 fa7e 	bl	800a598 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6a1a      	ldr	r2, [r3, #32]
 800a0a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a0a6:	4013      	ands	r3, r2
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10f      	bne.n	800a0cc <HAL_TIMEx_PWMN_Stop+0x48>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6a1a      	ldr	r2, [r3, #32]
 800a0b2:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d107      	bne.n	800a0cc <HAL_TIMEx_PWMN_Stop+0x48>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a0ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6a1a      	ldr	r2, [r3, #32]
 800a0d2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a0d6:	4013      	ands	r3, r2
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10f      	bne.n	800a0fc <HAL_TIMEx_PWMN_Stop+0x78>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6a1a      	ldr	r2, [r3, #32]
 800a0e2:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a0e6:	4013      	ands	r3, r2
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d107      	bne.n	800a0fc <HAL_TIMEx_PWMN_Stop+0x78>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f022 0201 	bic.w	r2, r2, #1
 800a0fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d104      	bne.n	800a10c <HAL_TIMEx_PWMN_Stop+0x88>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a10a:	e013      	b.n	800a134 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	2b04      	cmp	r3, #4
 800a110:	d104      	bne.n	800a11c <HAL_TIMEx_PWMN_Stop+0x98>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a11a:	e00b      	b.n	800a134 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2b08      	cmp	r3, #8
 800a120:	d104      	bne.n	800a12c <HAL_TIMEx_PWMN_Stop+0xa8>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a12a:	e003      	b.n	800a134 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
	...

0800a140 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a150:	2b01      	cmp	r3, #1
 800a152:	d101      	bne.n	800a158 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a154:	2302      	movs	r3, #2
 800a156:	e065      	b.n	800a224 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2202      	movs	r2, #2
 800a164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a2c      	ldr	r2, [pc, #176]	@ (800a230 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d004      	beq.n	800a18c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a2b      	ldr	r2, [pc, #172]	@ (800a234 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d108      	bne.n	800a19e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a192:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a1a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a1b      	ldr	r2, [pc, #108]	@ (800a230 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d018      	beq.n	800a1f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1ce:	d013      	beq.n	800a1f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a18      	ldr	r2, [pc, #96]	@ (800a238 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d00e      	beq.n	800a1f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a17      	ldr	r2, [pc, #92]	@ (800a23c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d009      	beq.n	800a1f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a12      	ldr	r2, [pc, #72]	@ (800a234 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d004      	beq.n	800a1f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a13      	ldr	r2, [pc, #76]	@ (800a240 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d10c      	bne.n	800a212 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	4313      	orrs	r3, r2
 800a208:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2201      	movs	r2, #1
 800a216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3714      	adds	r7, #20
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	40012c00 	.word	0x40012c00
 800a234:	40013400 	.word	0x40013400
 800a238:	40000400 	.word	0x40000400
 800a23c:	40000800 	.word	0x40000800
 800a240:	40014000 	.word	0x40014000

0800a244 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a24e:	2300      	movs	r3, #0
 800a250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d101      	bne.n	800a260 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a25c:	2302      	movs	r3, #2
 800a25e:	e073      	b.n	800a348 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	4313      	orrs	r3, r2
 800a274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	4313      	orrs	r3, r2
 800a282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	4313      	orrs	r3, r2
 800a290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	041b      	lsls	r3, r3, #16
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	69db      	ldr	r3, [r3, #28]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a19      	ldr	r2, [pc, #100]	@ (800a354 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d004      	beq.n	800a2fc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a18      	ldr	r2, [pc, #96]	@ (800a358 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d11c      	bne.n	800a336 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a306:	051b      	lsls	r3, r3, #20
 800a308:	4313      	orrs	r3, r2
 800a30a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	6a1b      	ldr	r3, [r3, #32]
 800a316:	4313      	orrs	r3, r2
 800a318:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a324:	4313      	orrs	r3, r2
 800a326:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a332:	4313      	orrs	r3, r2
 800a334:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	40012c00 	.word	0x40012c00
 800a358:	40013400 	.word	0x40013400

0800a35c <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b08b      	sub	sp, #44	@ 0x2c
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a374:	2b01      	cmp	r3, #1
 800a376:	d101      	bne.n	800a37c <HAL_TIMEx_ConfigBreakInput+0x20>
 800a378:	2302      	movs	r3, #2
 800a37a:	e0c1      	b.n	800a500 <HAL_TIMEx_ConfigBreakInput+0x1a4>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	3b01      	subs	r3, #1
 800a38a:	2b0f      	cmp	r3, #15
 800a38c:	d854      	bhi.n	800a438 <HAL_TIMEx_ConfigBreakInput+0xdc>
 800a38e:	a201      	add	r2, pc, #4	@ (adr r2, 800a394 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800a390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a394:	0800a3d5 	.word	0x0800a3d5
 800a398:	0800a3e9 	.word	0x0800a3e9
 800a39c:	0800a439 	.word	0x0800a439
 800a3a0:	0800a3fd 	.word	0x0800a3fd
 800a3a4:	0800a439 	.word	0x0800a439
 800a3a8:	0800a439 	.word	0x0800a439
 800a3ac:	0800a439 	.word	0x0800a439
 800a3b0:	0800a411 	.word	0x0800a411
 800a3b4:	0800a439 	.word	0x0800a439
 800a3b8:	0800a439 	.word	0x0800a439
 800a3bc:	0800a439 	.word	0x0800a439
 800a3c0:	0800a439 	.word	0x0800a439
 800a3c4:	0800a439 	.word	0x0800a439
 800a3c8:	0800a439 	.word	0x0800a439
 800a3cc:	0800a439 	.word	0x0800a439
 800a3d0:	0800a425 	.word	0x0800a425
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800a3dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3e0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800a3e2:	2309      	movs	r3, #9
 800a3e4:	617b      	str	r3, [r7, #20]
      break;
 800a3e6:	e030      	b.n	800a44a <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800a3f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3f4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800a3f6:	230a      	movs	r3, #10
 800a3f8:	617b      	str	r3, [r7, #20]
      break;
 800a3fa:	e026      	b.n	800a44a <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800a3fc:	2304      	movs	r3, #4
 800a3fe:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800a400:	2302      	movs	r3, #2
 800a402:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800a404:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a408:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800a40a:	230b      	movs	r3, #11
 800a40c:	617b      	str	r3, [r7, #20]
      break;
 800a40e:	e01c      	b.n	800a44a <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800a410:	2308      	movs	r3, #8
 800a412:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800a414:	2303      	movs	r3, #3
 800a416:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800a418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a41c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800a41e:	230c      	movs	r3, #12
 800a420:	617b      	str	r3, [r7, #20]
      break;
 800a422:	e012      	b.n	800a44a <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800a424:	2310      	movs	r3, #16
 800a426:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800a428:	2304      	movs	r3, #4
 800a42a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800a42c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a430:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800a432:	230d      	movs	r3, #13
 800a434:	617b      	str	r3, [r7, #20]
      break;
 800a436:	e008      	b.n	800a44a <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 800a438:	2300      	movs	r3, #0
 800a43a:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800a440:	2300      	movs	r3, #0
 800a442:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800a444:	2300      	movs	r3, #0
 800a446:	617b      	str	r3, [r7, #20]
      break;
 800a448:	bf00      	nop
    }
  }

  switch (BreakInput)
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d003      	beq.n	800a458 <HAL_TIMEx_ConfigBreakInput+0xfc>
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2b02      	cmp	r3, #2
 800a454:	d025      	beq.n	800a4a2 <HAL_TIMEx_ConfigBreakInput+0x146>
 800a456:	e049      	b.n	800a4ec <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a45e:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800a460:	6a3b      	ldr	r3, [r7, #32]
 800a462:	43db      	mvns	r3, r3
 800a464:	693a      	ldr	r2, [r7, #16]
 800a466:	4013      	ands	r3, r2
 800a468:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	685a      	ldr	r2, [r3, #4]
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	409a      	lsls	r2, r3
 800a472:	6a3b      	ldr	r3, [r7, #32]
 800a474:	4013      	ands	r3, r2
 800a476:	693a      	ldr	r2, [r7, #16]
 800a478:	4313      	orrs	r3, r2
 800a47a:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	43db      	mvns	r3, r3
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	4013      	ands	r3, r2
 800a484:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	689a      	ldr	r2, [r3, #8]
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	409a      	lsls	r2, r3
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	4013      	ands	r3, r2
 800a492:	693a      	ldr	r2, [r7, #16]
 800a494:	4313      	orrs	r3, r2
 800a496:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800a4a0:	e028      	b.n	800a4f4 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4a8:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800a4aa:	6a3b      	ldr	r3, [r7, #32]
 800a4ac:	43db      	mvns	r3, r3
 800a4ae:	693a      	ldr	r2, [r7, #16]
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685a      	ldr	r2, [r3, #4]
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	409a      	lsls	r2, r3
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	4013      	ands	r3, r2
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	43db      	mvns	r3, r3
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689a      	ldr	r2, [r3, #8]
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	409a      	lsls	r2, r3
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	4013      	ands	r3, r2
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	693a      	ldr	r2, [r7, #16]
 800a4e8:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800a4ea:	e003      	b.n	800a4f4 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800a4f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a500:	4618      	mov	r0, r3
 800a502:	372c      	adds	r7, #44	@ 0x2c
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a528:	bf00      	nop
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a598:	b480      	push	{r7}
 800a59a:	b087      	sub	sp, #28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	f003 030f 	and.w	r3, r3, #15
 800a5aa:	2204      	movs	r2, #4
 800a5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6a1a      	ldr	r2, [r3, #32]
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	43db      	mvns	r3, r3
 800a5ba:	401a      	ands	r2, r3
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6a1a      	ldr	r2, [r3, #32]
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	f003 030f 	and.w	r3, r3, #15
 800a5ca:	6879      	ldr	r1, [r7, #4]
 800a5cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a5d0:	431a      	orrs	r2, r3
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	621a      	str	r2, [r3, #32]
}
 800a5d6:	bf00      	nop
 800a5d8:	371c      	adds	r7, #28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b082      	sub	sp, #8
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e042      	b.n	800a67a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d106      	bne.n	800a60c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7f7 ffba 	bl	8002580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2224      	movs	r2, #36	@ 0x24
 800a610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f022 0201 	bic.w	r2, r2, #1
 800a622:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d002      	beq.n	800a632 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 fedd 	bl	800b3ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fc0e 	bl	800ae54 <UART_SetConfig>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d101      	bne.n	800a642 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e01b      	b.n	800a67a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	685a      	ldr	r2, [r3, #4]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a650:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689a      	ldr	r2, [r3, #8]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a660:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f042 0201 	orr.w	r2, r2, #1
 800a670:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 ff5c 	bl	800b530 <UART_CheckIdleState>
 800a678:	4603      	mov	r3, r0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b08a      	sub	sp, #40	@ 0x28
 800a686:	af02      	add	r7, sp, #8
 800a688:	60f8      	str	r0, [r7, #12]
 800a68a:	60b9      	str	r1, [r7, #8]
 800a68c:	603b      	str	r3, [r7, #0]
 800a68e:	4613      	mov	r3, r2
 800a690:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a698:	2b20      	cmp	r3, #32
 800a69a:	d17b      	bne.n	800a794 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d002      	beq.n	800a6a8 <HAL_UART_Transmit+0x26>
 800a6a2:	88fb      	ldrh	r3, [r7, #6]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d101      	bne.n	800a6ac <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e074      	b.n	800a796 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2221      	movs	r2, #33	@ 0x21
 800a6b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a6bc:	f7f8 f87c 	bl	80027b8 <HAL_GetTick>
 800a6c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	88fa      	ldrh	r2, [r7, #6]
 800a6c6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	88fa      	ldrh	r2, [r7, #6]
 800a6ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6da:	d108      	bne.n	800a6ee <HAL_UART_Transmit+0x6c>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	691b      	ldr	r3, [r3, #16]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d104      	bne.n	800a6ee <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	61bb      	str	r3, [r7, #24]
 800a6ec:	e003      	b.n	800a6f6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a6f6:	e030      	b.n	800a75a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	2200      	movs	r2, #0
 800a700:	2180      	movs	r1, #128	@ 0x80
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f000 ffbe 	bl	800b684 <UART_WaitOnFlagUntilTimeout>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d005      	beq.n	800a71a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2220      	movs	r2, #32
 800a712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	e03d      	b.n	800a796 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10b      	bne.n	800a738 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	881b      	ldrh	r3, [r3, #0]
 800a724:	461a      	mov	r2, r3
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a72e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	3302      	adds	r3, #2
 800a734:	61bb      	str	r3, [r7, #24]
 800a736:	e007      	b.n	800a748 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	781a      	ldrb	r2, [r3, #0]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	3301      	adds	r3, #1
 800a746:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a74e:	b29b      	uxth	r3, r3
 800a750:	3b01      	subs	r3, #1
 800a752:	b29a      	uxth	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a760:	b29b      	uxth	r3, r3
 800a762:	2b00      	cmp	r3, #0
 800a764:	d1c8      	bne.n	800a6f8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2200      	movs	r2, #0
 800a76e:	2140      	movs	r1, #64	@ 0x40
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 ff87 	bl	800b684 <UART_WaitOnFlagUntilTimeout>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d005      	beq.n	800a788 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2220      	movs	r2, #32
 800a780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a784:	2303      	movs	r3, #3
 800a786:	e006      	b.n	800a796 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2220      	movs	r2, #32
 800a78c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a790:	2300      	movs	r3, #0
 800a792:	e000      	b.n	800a796 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a794:	2302      	movs	r3, #2
  }
}
 800a796:	4618      	mov	r0, r3
 800a798:	3720      	adds	r7, #32
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
	...

0800a7a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b0ba      	sub	sp, #232	@ 0xe8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	69db      	ldr	r3, [r3, #28]
 800a7ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a7c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a7ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a7ce:	4013      	ands	r3, r2
 800a7d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a7d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d11b      	bne.n	800a814 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a7dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7e0:	f003 0320 	and.w	r3, r3, #32
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d015      	beq.n	800a814 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a7e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7ec:	f003 0320 	and.w	r3, r3, #32
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d105      	bne.n	800a800 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a7f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d009      	beq.n	800a814 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 82e3 	beq.w	800add0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	4798      	blx	r3
      }
      return;
 800a812:	e2dd      	b.n	800add0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f000 8123 	beq.w	800aa64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a81e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a822:	4b8d      	ldr	r3, [pc, #564]	@ (800aa58 <HAL_UART_IRQHandler+0x2b8>)
 800a824:	4013      	ands	r3, r2
 800a826:	2b00      	cmp	r3, #0
 800a828:	d106      	bne.n	800a838 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a82a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a82e:	4b8b      	ldr	r3, [pc, #556]	@ (800aa5c <HAL_UART_IRQHandler+0x2bc>)
 800a830:	4013      	ands	r3, r2
 800a832:	2b00      	cmp	r3, #0
 800a834:	f000 8116 	beq.w	800aa64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a83c:	f003 0301 	and.w	r3, r3, #1
 800a840:	2b00      	cmp	r3, #0
 800a842:	d011      	beq.n	800a868 <HAL_UART_IRQHandler+0xc8>
 800a844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00b      	beq.n	800a868 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2201      	movs	r2, #1
 800a856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a85e:	f043 0201 	orr.w	r2, r3, #1
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a86c:	f003 0302 	and.w	r3, r3, #2
 800a870:	2b00      	cmp	r3, #0
 800a872:	d011      	beq.n	800a898 <HAL_UART_IRQHandler+0xf8>
 800a874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00b      	beq.n	800a898 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2202      	movs	r2, #2
 800a886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a88e:	f043 0204 	orr.w	r2, r3, #4
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a89c:	f003 0304 	and.w	r3, r3, #4
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d011      	beq.n	800a8c8 <HAL_UART_IRQHandler+0x128>
 800a8a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00b      	beq.n	800a8c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2204      	movs	r2, #4
 800a8b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8be:	f043 0202 	orr.w	r2, r3, #2
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a8c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8cc:	f003 0308 	and.w	r3, r3, #8
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d017      	beq.n	800a904 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a8d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8d8:	f003 0320 	and.w	r3, r3, #32
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d105      	bne.n	800a8ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a8e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a8e4:	4b5c      	ldr	r3, [pc, #368]	@ (800aa58 <HAL_UART_IRQHandler+0x2b8>)
 800a8e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00b      	beq.n	800a904 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2208      	movs	r2, #8
 800a8f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8fa:	f043 0208 	orr.w	r2, r3, #8
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d012      	beq.n	800a936 <HAL_UART_IRQHandler+0x196>
 800a910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a914:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00c      	beq.n	800a936 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a924:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a92c:	f043 0220 	orr.w	r2, r3, #32
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f000 8249 	beq.w	800add4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a946:	f003 0320 	and.w	r3, r3, #32
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d013      	beq.n	800a976 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a94e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a952:	f003 0320 	and.w	r3, r3, #32
 800a956:	2b00      	cmp	r3, #0
 800a958:	d105      	bne.n	800a966 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a95a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a95e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a962:	2b00      	cmp	r3, #0
 800a964:	d007      	beq.n	800a976 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a97c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a98a:	2b40      	cmp	r3, #64	@ 0x40
 800a98c:	d005      	beq.n	800a99a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a98e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a992:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a996:	2b00      	cmp	r3, #0
 800a998:	d054      	beq.n	800aa44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fedf 	bl	800b75e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9aa:	2b40      	cmp	r3, #64	@ 0x40
 800a9ac:	d146      	bne.n	800aa3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3308      	adds	r3, #8
 800a9b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9bc:	e853 3f00 	ldrex	r3, [r3]
 800a9c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a9c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a9c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	3308      	adds	r3, #8
 800a9d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a9da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a9de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a9e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a9ea:	e841 2300 	strex	r3, r2, [r1]
 800a9ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a9f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1d9      	bne.n	800a9ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d017      	beq.n	800aa34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa0a:	4a15      	ldr	r2, [pc, #84]	@ (800aa60 <HAL_UART_IRQHandler+0x2c0>)
 800aa0c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fb f9b4 	bl	8005d82 <HAL_DMA_Abort_IT>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d019      	beq.n	800aa54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800aa2e:	4610      	mov	r0, r2
 800aa30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa32:	e00f      	b.n	800aa54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 f9e1 	bl	800adfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa3a:	e00b      	b.n	800aa54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 f9dd 	bl	800adfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa42:	e007      	b.n	800aa54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f9d9 	bl	800adfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800aa52:	e1bf      	b.n	800add4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa54:	bf00      	nop
    return;
 800aa56:	e1bd      	b.n	800add4 <HAL_UART_IRQHandler+0x634>
 800aa58:	10000001 	.word	0x10000001
 800aa5c:	04000120 	.word	0x04000120
 800aa60:	0800b82b 	.word	0x0800b82b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	f040 8153 	bne.w	800ad14 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aa6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa72:	f003 0310 	and.w	r3, r3, #16
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f000 814c 	beq.w	800ad14 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aa7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa80:	f003 0310 	and.w	r3, r3, #16
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f000 8145 	beq.w	800ad14 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2210      	movs	r2, #16
 800aa90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa9c:	2b40      	cmp	r3, #64	@ 0x40
 800aa9e:	f040 80bb 	bne.w	800ac18 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aab0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f000 818f 	beq.w	800add8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aac0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aac4:	429a      	cmp	r2, r3
 800aac6:	f080 8187 	bcs.w	800add8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aad0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f003 0320 	and.w	r3, r3, #32
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f040 8087 	bne.w	800abf6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aaf4:	e853 3f00 	ldrex	r3, [r3]
 800aaf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aafc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ab00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ab1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ab22:	e841 2300 	strex	r3, r2, [r1]
 800ab26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ab2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1da      	bne.n	800aae8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	3308      	adds	r3, #8
 800ab38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab3c:	e853 3f00 	ldrex	r3, [r3]
 800ab40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ab42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab44:	f023 0301 	bic.w	r3, r3, #1
 800ab48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	3308      	adds	r3, #8
 800ab52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ab56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ab5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ab5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ab62:	e841 2300 	strex	r3, r2, [r1]
 800ab66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ab68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d1e1      	bne.n	800ab32 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	3308      	adds	r3, #8
 800ab74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab78:	e853 3f00 	ldrex	r3, [r3]
 800ab7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ab7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	3308      	adds	r3, #8
 800ab8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ab92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ab94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ab98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ab9a:	e841 2300 	strex	r3, r2, [r1]
 800ab9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aba0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1e3      	bne.n	800ab6e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2220      	movs	r2, #32
 800abaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abbc:	e853 3f00 	ldrex	r3, [r3]
 800abc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800abc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abc4:	f023 0310 	bic.w	r3, r3, #16
 800abc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	461a      	mov	r2, r3
 800abd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800abd8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800abdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800abde:	e841 2300 	strex	r3, r2, [r1]
 800abe2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800abe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1e4      	bne.n	800abb4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7fb f86d 	bl	8005cd0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2202      	movs	r2, #2
 800abfa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	1ad3      	subs	r3, r2, r3
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	4619      	mov	r1, r3
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f8fd 	bl	800ae10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac16:	e0df      	b.n	800add8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f000 80d1 	beq.w	800addc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800ac3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f000 80cc 	beq.w	800addc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac4c:	e853 3f00 	ldrex	r3, [r3]
 800ac50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	461a      	mov	r2, r3
 800ac62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ac66:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac68:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac6e:	e841 2300 	strex	r3, r2, [r1]
 800ac72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1e4      	bne.n	800ac44 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	3308      	adds	r3, #8
 800ac80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac84:	e853 3f00 	ldrex	r3, [r3]
 800ac88:	623b      	str	r3, [r7, #32]
   return(result);
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac90:	f023 0301 	bic.w	r3, r3, #1
 800ac94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	3308      	adds	r3, #8
 800ac9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aca2:	633a      	str	r2, [r7, #48]	@ 0x30
 800aca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acaa:	e841 2300 	strex	r3, r2, [r1]
 800acae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800acb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1e1      	bne.n	800ac7a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2220      	movs	r2, #32
 800acba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	e853 3f00 	ldrex	r3, [r3]
 800acd6:	60fb      	str	r3, [r7, #12]
   return(result);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f023 0310 	bic.w	r3, r3, #16
 800acde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	461a      	mov	r2, r3
 800ace8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800acec:	61fb      	str	r3, [r7, #28]
 800acee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf0:	69b9      	ldr	r1, [r7, #24]
 800acf2:	69fa      	ldr	r2, [r7, #28]
 800acf4:	e841 2300 	strex	r3, r2, [r1]
 800acf8:	617b      	str	r3, [r7, #20]
   return(result);
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1e4      	bne.n	800acca <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2202      	movs	r2, #2
 800ad04:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ad06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 f87f 	bl	800ae10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad12:	e063      	b.n	800addc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ad14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00e      	beq.n	800ad3e <HAL_UART_IRQHandler+0x59e>
 800ad20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d008      	beq.n	800ad3e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ad34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fdb8 	bl	800b8ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad3c:	e051      	b.n	800ade2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ad3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d014      	beq.n	800ad74 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ad4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d105      	bne.n	800ad62 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ad56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d008      	beq.n	800ad74 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d03a      	beq.n	800ade0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	4798      	blx	r3
    }
    return;
 800ad72:	e035      	b.n	800ade0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ad74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d009      	beq.n	800ad94 <HAL_UART_IRQHandler+0x5f4>
 800ad80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fd62 	bl	800b856 <UART_EndTransmit_IT>
    return;
 800ad92:	e026      	b.n	800ade2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ad94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d009      	beq.n	800adb4 <HAL_UART_IRQHandler+0x614>
 800ada0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ada4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d003      	beq.n	800adb4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 fd91 	bl	800b8d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800adb2:	e016      	b.n	800ade2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800adb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d010      	beq.n	800ade2 <HAL_UART_IRQHandler+0x642>
 800adc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	da0c      	bge.n	800ade2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fd79 	bl	800b8c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800adce:	e008      	b.n	800ade2 <HAL_UART_IRQHandler+0x642>
      return;
 800add0:	bf00      	nop
 800add2:	e006      	b.n	800ade2 <HAL_UART_IRQHandler+0x642>
    return;
 800add4:	bf00      	nop
 800add6:	e004      	b.n	800ade2 <HAL_UART_IRQHandler+0x642>
      return;
 800add8:	bf00      	nop
 800adda:	e002      	b.n	800ade2 <HAL_UART_IRQHandler+0x642>
      return;
 800addc:	bf00      	nop
 800adde:	e000      	b.n	800ade2 <HAL_UART_IRQHandler+0x642>
    return;
 800ade0:	bf00      	nop
  }
}
 800ade2:	37e8      	adds	r7, #232	@ 0xe8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ae1c:	bf00      	nop
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae36:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae3e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	4313      	orrs	r3, r2
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
	...

0800ae54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae58:	b08c      	sub	sp, #48	@ 0x30
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	689a      	ldr	r2, [r3, #8]
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	431a      	orrs	r2, r3
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	431a      	orrs	r2, r3
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	69db      	ldr	r3, [r3, #28]
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	4bab      	ldr	r3, [pc, #684]	@ (800b130 <UART_SetConfig+0x2dc>)
 800ae84:	4013      	ands	r3, r2
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	6812      	ldr	r2, [r2, #0]
 800ae8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae8c:	430b      	orrs	r3, r1
 800ae8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	68da      	ldr	r2, [r3, #12]
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	430a      	orrs	r2, r1
 800aea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	699b      	ldr	r3, [r3, #24]
 800aeaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4aa0      	ldr	r2, [pc, #640]	@ (800b134 <UART_SetConfig+0x2e0>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d004      	beq.n	800aec0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aebc:	4313      	orrs	r3, r2
 800aebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800aeca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	6812      	ldr	r2, [r2, #0]
 800aed2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aed4:	430b      	orrs	r3, r1
 800aed6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aede:	f023 010f 	bic.w	r1, r3, #15
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	430a      	orrs	r2, r1
 800aeec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a91      	ldr	r2, [pc, #580]	@ (800b138 <UART_SetConfig+0x2e4>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d125      	bne.n	800af44 <UART_SetConfig+0xf0>
 800aef8:	4b90      	ldr	r3, [pc, #576]	@ (800b13c <UART_SetConfig+0x2e8>)
 800aefa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aefe:	f003 0303 	and.w	r3, r3, #3
 800af02:	2b03      	cmp	r3, #3
 800af04:	d81a      	bhi.n	800af3c <UART_SetConfig+0xe8>
 800af06:	a201      	add	r2, pc, #4	@ (adr r2, 800af0c <UART_SetConfig+0xb8>)
 800af08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0c:	0800af1d 	.word	0x0800af1d
 800af10:	0800af2d 	.word	0x0800af2d
 800af14:	0800af25 	.word	0x0800af25
 800af18:	0800af35 	.word	0x0800af35
 800af1c:	2301      	movs	r3, #1
 800af1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af22:	e0d6      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800af24:	2302      	movs	r3, #2
 800af26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af2a:	e0d2      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800af2c:	2304      	movs	r3, #4
 800af2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af32:	e0ce      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800af34:	2308      	movs	r3, #8
 800af36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af3a:	e0ca      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800af3c:	2310      	movs	r3, #16
 800af3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af42:	e0c6      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a7d      	ldr	r2, [pc, #500]	@ (800b140 <UART_SetConfig+0x2ec>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d138      	bne.n	800afc0 <UART_SetConfig+0x16c>
 800af4e:	4b7b      	ldr	r3, [pc, #492]	@ (800b13c <UART_SetConfig+0x2e8>)
 800af50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af54:	f003 030c 	and.w	r3, r3, #12
 800af58:	2b0c      	cmp	r3, #12
 800af5a:	d82d      	bhi.n	800afb8 <UART_SetConfig+0x164>
 800af5c:	a201      	add	r2, pc, #4	@ (adr r2, 800af64 <UART_SetConfig+0x110>)
 800af5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af62:	bf00      	nop
 800af64:	0800af99 	.word	0x0800af99
 800af68:	0800afb9 	.word	0x0800afb9
 800af6c:	0800afb9 	.word	0x0800afb9
 800af70:	0800afb9 	.word	0x0800afb9
 800af74:	0800afa9 	.word	0x0800afa9
 800af78:	0800afb9 	.word	0x0800afb9
 800af7c:	0800afb9 	.word	0x0800afb9
 800af80:	0800afb9 	.word	0x0800afb9
 800af84:	0800afa1 	.word	0x0800afa1
 800af88:	0800afb9 	.word	0x0800afb9
 800af8c:	0800afb9 	.word	0x0800afb9
 800af90:	0800afb9 	.word	0x0800afb9
 800af94:	0800afb1 	.word	0x0800afb1
 800af98:	2300      	movs	r3, #0
 800af9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af9e:	e098      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800afa0:	2302      	movs	r3, #2
 800afa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afa6:	e094      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800afa8:	2304      	movs	r3, #4
 800afaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afae:	e090      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800afb0:	2308      	movs	r3, #8
 800afb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afb6:	e08c      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800afb8:	2310      	movs	r3, #16
 800afba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afbe:	e088      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a5f      	ldr	r2, [pc, #380]	@ (800b144 <UART_SetConfig+0x2f0>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d125      	bne.n	800b016 <UART_SetConfig+0x1c2>
 800afca:	4b5c      	ldr	r3, [pc, #368]	@ (800b13c <UART_SetConfig+0x2e8>)
 800afcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afd0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800afd4:	2b30      	cmp	r3, #48	@ 0x30
 800afd6:	d016      	beq.n	800b006 <UART_SetConfig+0x1b2>
 800afd8:	2b30      	cmp	r3, #48	@ 0x30
 800afda:	d818      	bhi.n	800b00e <UART_SetConfig+0x1ba>
 800afdc:	2b20      	cmp	r3, #32
 800afde:	d00a      	beq.n	800aff6 <UART_SetConfig+0x1a2>
 800afe0:	2b20      	cmp	r3, #32
 800afe2:	d814      	bhi.n	800b00e <UART_SetConfig+0x1ba>
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d002      	beq.n	800afee <UART_SetConfig+0x19a>
 800afe8:	2b10      	cmp	r3, #16
 800afea:	d008      	beq.n	800affe <UART_SetConfig+0x1aa>
 800afec:	e00f      	b.n	800b00e <UART_SetConfig+0x1ba>
 800afee:	2300      	movs	r3, #0
 800aff0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aff4:	e06d      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800aff6:	2302      	movs	r3, #2
 800aff8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800affc:	e069      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800affe:	2304      	movs	r3, #4
 800b000:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b004:	e065      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800b006:	2308      	movs	r3, #8
 800b008:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b00c:	e061      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800b00e:	2310      	movs	r3, #16
 800b010:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b014:	e05d      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a4b      	ldr	r2, [pc, #300]	@ (800b148 <UART_SetConfig+0x2f4>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d125      	bne.n	800b06c <UART_SetConfig+0x218>
 800b020:	4b46      	ldr	r3, [pc, #280]	@ (800b13c <UART_SetConfig+0x2e8>)
 800b022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b026:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b02a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b02c:	d016      	beq.n	800b05c <UART_SetConfig+0x208>
 800b02e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b030:	d818      	bhi.n	800b064 <UART_SetConfig+0x210>
 800b032:	2b80      	cmp	r3, #128	@ 0x80
 800b034:	d00a      	beq.n	800b04c <UART_SetConfig+0x1f8>
 800b036:	2b80      	cmp	r3, #128	@ 0x80
 800b038:	d814      	bhi.n	800b064 <UART_SetConfig+0x210>
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d002      	beq.n	800b044 <UART_SetConfig+0x1f0>
 800b03e:	2b40      	cmp	r3, #64	@ 0x40
 800b040:	d008      	beq.n	800b054 <UART_SetConfig+0x200>
 800b042:	e00f      	b.n	800b064 <UART_SetConfig+0x210>
 800b044:	2300      	movs	r3, #0
 800b046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b04a:	e042      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800b04c:	2302      	movs	r3, #2
 800b04e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b052:	e03e      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800b054:	2304      	movs	r3, #4
 800b056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b05a:	e03a      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800b05c:	2308      	movs	r3, #8
 800b05e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b062:	e036      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800b064:	2310      	movs	r3, #16
 800b066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b06a:	e032      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a30      	ldr	r2, [pc, #192]	@ (800b134 <UART_SetConfig+0x2e0>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d12a      	bne.n	800b0cc <UART_SetConfig+0x278>
 800b076:	4b31      	ldr	r3, [pc, #196]	@ (800b13c <UART_SetConfig+0x2e8>)
 800b078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b07c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b080:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b084:	d01a      	beq.n	800b0bc <UART_SetConfig+0x268>
 800b086:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b08a:	d81b      	bhi.n	800b0c4 <UART_SetConfig+0x270>
 800b08c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b090:	d00c      	beq.n	800b0ac <UART_SetConfig+0x258>
 800b092:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b096:	d815      	bhi.n	800b0c4 <UART_SetConfig+0x270>
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d003      	beq.n	800b0a4 <UART_SetConfig+0x250>
 800b09c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0a0:	d008      	beq.n	800b0b4 <UART_SetConfig+0x260>
 800b0a2:	e00f      	b.n	800b0c4 <UART_SetConfig+0x270>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0aa:	e012      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0b2:	e00e      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800b0b4:	2304      	movs	r3, #4
 800b0b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0ba:	e00a      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800b0bc:	2308      	movs	r3, #8
 800b0be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0c2:	e006      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800b0c4:	2310      	movs	r3, #16
 800b0c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0ca:	e002      	b.n	800b0d2 <UART_SetConfig+0x27e>
 800b0cc:	2310      	movs	r3, #16
 800b0ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a17      	ldr	r2, [pc, #92]	@ (800b134 <UART_SetConfig+0x2e0>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	f040 80a8 	bne.w	800b22e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b0de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0e2:	2b08      	cmp	r3, #8
 800b0e4:	d834      	bhi.n	800b150 <UART_SetConfig+0x2fc>
 800b0e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0ec <UART_SetConfig+0x298>)
 800b0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ec:	0800b111 	.word	0x0800b111
 800b0f0:	0800b151 	.word	0x0800b151
 800b0f4:	0800b119 	.word	0x0800b119
 800b0f8:	0800b151 	.word	0x0800b151
 800b0fc:	0800b11f 	.word	0x0800b11f
 800b100:	0800b151 	.word	0x0800b151
 800b104:	0800b151 	.word	0x0800b151
 800b108:	0800b151 	.word	0x0800b151
 800b10c:	0800b127 	.word	0x0800b127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b110:	f7fc fc26 	bl	8007960 <HAL_RCC_GetPCLK1Freq>
 800b114:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b116:	e021      	b.n	800b15c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b118:	4b0c      	ldr	r3, [pc, #48]	@ (800b14c <UART_SetConfig+0x2f8>)
 800b11a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b11c:	e01e      	b.n	800b15c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b11e:	f7fc fbb1 	bl	8007884 <HAL_RCC_GetSysClockFreq>
 800b122:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b124:	e01a      	b.n	800b15c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b12a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b12c:	e016      	b.n	800b15c <UART_SetConfig+0x308>
 800b12e:	bf00      	nop
 800b130:	cfff69f3 	.word	0xcfff69f3
 800b134:	40008000 	.word	0x40008000
 800b138:	40013800 	.word	0x40013800
 800b13c:	40021000 	.word	0x40021000
 800b140:	40004400 	.word	0x40004400
 800b144:	40004800 	.word	0x40004800
 800b148:	40004c00 	.word	0x40004c00
 800b14c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b150:	2300      	movs	r3, #0
 800b152:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b154:	2301      	movs	r3, #1
 800b156:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b15a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15e:	2b00      	cmp	r3, #0
 800b160:	f000 812a 	beq.w	800b3b8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b168:	4a9e      	ldr	r2, [pc, #632]	@ (800b3e4 <UART_SetConfig+0x590>)
 800b16a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b16e:	461a      	mov	r2, r3
 800b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b172:	fbb3 f3f2 	udiv	r3, r3, r2
 800b176:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	4613      	mov	r3, r2
 800b17e:	005b      	lsls	r3, r3, #1
 800b180:	4413      	add	r3, r2
 800b182:	69ba      	ldr	r2, [r7, #24]
 800b184:	429a      	cmp	r2, r3
 800b186:	d305      	bcc.n	800b194 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b18e:	69ba      	ldr	r2, [r7, #24]
 800b190:	429a      	cmp	r2, r3
 800b192:	d903      	bls.n	800b19c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b19a:	e10d      	b.n	800b3b8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19e:	2200      	movs	r2, #0
 800b1a0:	60bb      	str	r3, [r7, #8]
 800b1a2:	60fa      	str	r2, [r7, #12]
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1a8:	4a8e      	ldr	r2, [pc, #568]	@ (800b3e4 <UART_SetConfig+0x590>)
 800b1aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	603b      	str	r3, [r7, #0]
 800b1b4:	607a      	str	r2, [r7, #4]
 800b1b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b1be:	f7f5 fd8b 	bl	8000cd8 <__aeabi_uldivmod>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	4610      	mov	r0, r2
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	f04f 0200 	mov.w	r2, #0
 800b1ce:	f04f 0300 	mov.w	r3, #0
 800b1d2:	020b      	lsls	r3, r1, #8
 800b1d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b1d8:	0202      	lsls	r2, r0, #8
 800b1da:	6979      	ldr	r1, [r7, #20]
 800b1dc:	6849      	ldr	r1, [r1, #4]
 800b1de:	0849      	lsrs	r1, r1, #1
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	460c      	mov	r4, r1
 800b1e4:	4605      	mov	r5, r0
 800b1e6:	eb12 0804 	adds.w	r8, r2, r4
 800b1ea:	eb43 0905 	adc.w	r9, r3, r5
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	469a      	mov	sl, r3
 800b1f6:	4693      	mov	fp, r2
 800b1f8:	4652      	mov	r2, sl
 800b1fa:	465b      	mov	r3, fp
 800b1fc:	4640      	mov	r0, r8
 800b1fe:	4649      	mov	r1, r9
 800b200:	f7f5 fd6a 	bl	8000cd8 <__aeabi_uldivmod>
 800b204:	4602      	mov	r2, r0
 800b206:	460b      	mov	r3, r1
 800b208:	4613      	mov	r3, r2
 800b20a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b20c:	6a3b      	ldr	r3, [r7, #32]
 800b20e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b212:	d308      	bcc.n	800b226 <UART_SetConfig+0x3d2>
 800b214:	6a3b      	ldr	r3, [r7, #32]
 800b216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b21a:	d204      	bcs.n	800b226 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	6a3a      	ldr	r2, [r7, #32]
 800b222:	60da      	str	r2, [r3, #12]
 800b224:	e0c8      	b.n	800b3b8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b22c:	e0c4      	b.n	800b3b8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	69db      	ldr	r3, [r3, #28]
 800b232:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b236:	d167      	bne.n	800b308 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b238:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b23c:	2b08      	cmp	r3, #8
 800b23e:	d828      	bhi.n	800b292 <UART_SetConfig+0x43e>
 800b240:	a201      	add	r2, pc, #4	@ (adr r2, 800b248 <UART_SetConfig+0x3f4>)
 800b242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b246:	bf00      	nop
 800b248:	0800b26d 	.word	0x0800b26d
 800b24c:	0800b275 	.word	0x0800b275
 800b250:	0800b27d 	.word	0x0800b27d
 800b254:	0800b293 	.word	0x0800b293
 800b258:	0800b283 	.word	0x0800b283
 800b25c:	0800b293 	.word	0x0800b293
 800b260:	0800b293 	.word	0x0800b293
 800b264:	0800b293 	.word	0x0800b293
 800b268:	0800b28b 	.word	0x0800b28b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b26c:	f7fc fb78 	bl	8007960 <HAL_RCC_GetPCLK1Freq>
 800b270:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b272:	e014      	b.n	800b29e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b274:	f7fc fb8a 	bl	800798c <HAL_RCC_GetPCLK2Freq>
 800b278:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b27a:	e010      	b.n	800b29e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b27c:	4b5a      	ldr	r3, [pc, #360]	@ (800b3e8 <UART_SetConfig+0x594>)
 800b27e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b280:	e00d      	b.n	800b29e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b282:	f7fc faff 	bl	8007884 <HAL_RCC_GetSysClockFreq>
 800b286:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b288:	e009      	b.n	800b29e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b28a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b28e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b290:	e005      	b.n	800b29e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b292:	2300      	movs	r3, #0
 800b294:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b29c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f000 8089 	beq.w	800b3b8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2aa:	4a4e      	ldr	r2, [pc, #312]	@ (800b3e4 <UART_SetConfig+0x590>)
 800b2ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2b8:	005a      	lsls	r2, r3, #1
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	085b      	lsrs	r3, r3, #1
 800b2c0:	441a      	add	r2, r3
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2cc:	6a3b      	ldr	r3, [r7, #32]
 800b2ce:	2b0f      	cmp	r3, #15
 800b2d0:	d916      	bls.n	800b300 <UART_SetConfig+0x4ac>
 800b2d2:	6a3b      	ldr	r3, [r7, #32]
 800b2d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2d8:	d212      	bcs.n	800b300 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b2da:	6a3b      	ldr	r3, [r7, #32]
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	f023 030f 	bic.w	r3, r3, #15
 800b2e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b2e4:	6a3b      	ldr	r3, [r7, #32]
 800b2e6:	085b      	lsrs	r3, r3, #1
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	f003 0307 	and.w	r3, r3, #7
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	8bfb      	ldrh	r3, [r7, #30]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	8bfa      	ldrh	r2, [r7, #30]
 800b2fc:	60da      	str	r2, [r3, #12]
 800b2fe:	e05b      	b.n	800b3b8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b306:	e057      	b.n	800b3b8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b308:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b30c:	2b08      	cmp	r3, #8
 800b30e:	d828      	bhi.n	800b362 <UART_SetConfig+0x50e>
 800b310:	a201      	add	r2, pc, #4	@ (adr r2, 800b318 <UART_SetConfig+0x4c4>)
 800b312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b316:	bf00      	nop
 800b318:	0800b33d 	.word	0x0800b33d
 800b31c:	0800b345 	.word	0x0800b345
 800b320:	0800b34d 	.word	0x0800b34d
 800b324:	0800b363 	.word	0x0800b363
 800b328:	0800b353 	.word	0x0800b353
 800b32c:	0800b363 	.word	0x0800b363
 800b330:	0800b363 	.word	0x0800b363
 800b334:	0800b363 	.word	0x0800b363
 800b338:	0800b35b 	.word	0x0800b35b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b33c:	f7fc fb10 	bl	8007960 <HAL_RCC_GetPCLK1Freq>
 800b340:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b342:	e014      	b.n	800b36e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b344:	f7fc fb22 	bl	800798c <HAL_RCC_GetPCLK2Freq>
 800b348:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b34a:	e010      	b.n	800b36e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b34c:	4b26      	ldr	r3, [pc, #152]	@ (800b3e8 <UART_SetConfig+0x594>)
 800b34e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b350:	e00d      	b.n	800b36e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b352:	f7fc fa97 	bl	8007884 <HAL_RCC_GetSysClockFreq>
 800b356:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b358:	e009      	b.n	800b36e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b35a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b35e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b360:	e005      	b.n	800b36e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b362:	2300      	movs	r3, #0
 800b364:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b36c:	bf00      	nop
    }

    if (pclk != 0U)
 800b36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b370:	2b00      	cmp	r3, #0
 800b372:	d021      	beq.n	800b3b8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b378:	4a1a      	ldr	r2, [pc, #104]	@ (800b3e4 <UART_SetConfig+0x590>)
 800b37a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b37e:	461a      	mov	r2, r3
 800b380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b382:	fbb3 f2f2 	udiv	r2, r3, r2
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	085b      	lsrs	r3, r3, #1
 800b38c:	441a      	add	r2, r3
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	fbb2 f3f3 	udiv	r3, r2, r3
 800b396:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	2b0f      	cmp	r3, #15
 800b39c:	d909      	bls.n	800b3b2 <UART_SetConfig+0x55e>
 800b39e:	6a3b      	ldr	r3, [r7, #32]
 800b3a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3a4:	d205      	bcs.n	800b3b2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b3a6:	6a3b      	ldr	r3, [r7, #32]
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	60da      	str	r2, [r3, #12]
 800b3b0:	e002      	b.n	800b3b8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b3d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3730      	adds	r7, #48	@ 0x30
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3e2:	bf00      	nop
 800b3e4:	080116f4 	.word	0x080116f4
 800b3e8:	00f42400 	.word	0x00f42400

0800b3ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3f8:	f003 0308 	and.w	r3, r3, #8
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00a      	beq.n	800b416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	430a      	orrs	r2, r1
 800b414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b41a:	f003 0301 	and.w	r3, r3, #1
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00a      	beq.n	800b438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	430a      	orrs	r2, r1
 800b436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b43c:	f003 0302 	and.w	r3, r3, #2
 800b440:	2b00      	cmp	r3, #0
 800b442:	d00a      	beq.n	800b45a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	430a      	orrs	r2, r1
 800b458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b45e:	f003 0304 	and.w	r3, r3, #4
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00a      	beq.n	800b47c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	430a      	orrs	r2, r1
 800b47a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b480:	f003 0310 	and.w	r3, r3, #16
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00a      	beq.n	800b49e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	430a      	orrs	r2, r1
 800b49c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a2:	f003 0320 	and.w	r3, r3, #32
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00a      	beq.n	800b4c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	430a      	orrs	r2, r1
 800b4be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d01a      	beq.n	800b502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	430a      	orrs	r2, r1
 800b4e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4ea:	d10a      	bne.n	800b502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	430a      	orrs	r2, r1
 800b500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00a      	beq.n	800b524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	430a      	orrs	r2, r1
 800b522:	605a      	str	r2, [r3, #4]
  }
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b098      	sub	sp, #96	@ 0x60
 800b534:	af02      	add	r7, sp, #8
 800b536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b540:	f7f7 f93a 	bl	80027b8 <HAL_GetTick>
 800b544:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f003 0308 	and.w	r3, r3, #8
 800b550:	2b08      	cmp	r3, #8
 800b552:	d12f      	bne.n	800b5b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b554:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b55c:	2200      	movs	r2, #0
 800b55e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f88e 	bl	800b684 <UART_WaitOnFlagUntilTimeout>
 800b568:	4603      	mov	r3, r0
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d022      	beq.n	800b5b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b576:	e853 3f00 	ldrex	r3, [r3]
 800b57a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b57c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b57e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b582:	653b      	str	r3, [r7, #80]	@ 0x50
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	461a      	mov	r2, r3
 800b58a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b58c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b58e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b590:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b594:	e841 2300 	strex	r3, r2, [r1]
 800b598:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1e6      	bne.n	800b56e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2220      	movs	r2, #32
 800b5a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	e063      	b.n	800b67c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f003 0304 	and.w	r3, r3, #4
 800b5be:	2b04      	cmp	r3, #4
 800b5c0:	d149      	bne.n	800b656 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f857 	bl	800b684 <UART_WaitOnFlagUntilTimeout>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d03c      	beq.n	800b656 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e4:	e853 3f00 	ldrex	r3, [r3]
 800b5e8:	623b      	str	r3, [r7, #32]
   return(result);
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b602:	e841 2300 	strex	r3, r2, [r1]
 800b606:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1e6      	bne.n	800b5dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	3308      	adds	r3, #8
 800b614:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	e853 3f00 	ldrex	r3, [r3]
 800b61c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f023 0301 	bic.w	r3, r3, #1
 800b624:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	3308      	adds	r3, #8
 800b62c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b62e:	61fa      	str	r2, [r7, #28]
 800b630:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b632:	69b9      	ldr	r1, [r7, #24]
 800b634:	69fa      	ldr	r2, [r7, #28]
 800b636:	e841 2300 	strex	r3, r2, [r1]
 800b63a:	617b      	str	r3, [r7, #20]
   return(result);
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d1e5      	bne.n	800b60e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2220      	movs	r2, #32
 800b646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b652:	2303      	movs	r3, #3
 800b654:	e012      	b.n	800b67c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2220      	movs	r2, #32
 800b65a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2220      	movs	r2, #32
 800b662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3758      	adds	r7, #88	@ 0x58
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	603b      	str	r3, [r7, #0]
 800b690:	4613      	mov	r3, r2
 800b692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b694:	e04f      	b.n	800b736 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b69c:	d04b      	beq.n	800b736 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b69e:	f7f7 f88b 	bl	80027b8 <HAL_GetTick>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	1ad3      	subs	r3, r2, r3
 800b6a8:	69ba      	ldr	r2, [r7, #24]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d302      	bcc.n	800b6b4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d101      	bne.n	800b6b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	e04e      	b.n	800b756 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f003 0304 	and.w	r3, r3, #4
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d037      	beq.n	800b736 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	2b80      	cmp	r3, #128	@ 0x80
 800b6ca:	d034      	beq.n	800b736 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	2b40      	cmp	r3, #64	@ 0x40
 800b6d0:	d031      	beq.n	800b736 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	69db      	ldr	r3, [r3, #28]
 800b6d8:	f003 0308 	and.w	r3, r3, #8
 800b6dc:	2b08      	cmp	r3, #8
 800b6de:	d110      	bne.n	800b702 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2208      	movs	r2, #8
 800b6e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f000 f838 	bl	800b75e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2208      	movs	r2, #8
 800b6f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e029      	b.n	800b756 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	69db      	ldr	r3, [r3, #28]
 800b708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b70c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b710:	d111      	bne.n	800b736 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b71a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f000 f81e 	bl	800b75e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2220      	movs	r2, #32
 800b726:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b732:	2303      	movs	r3, #3
 800b734:	e00f      	b.n	800b756 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	69da      	ldr	r2, [r3, #28]
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	4013      	ands	r3, r2
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	429a      	cmp	r2, r3
 800b744:	bf0c      	ite	eq
 800b746:	2301      	moveq	r3, #1
 800b748:	2300      	movne	r3, #0
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	461a      	mov	r2, r3
 800b74e:	79fb      	ldrb	r3, [r7, #7]
 800b750:	429a      	cmp	r2, r3
 800b752:	d0a0      	beq.n	800b696 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b75e:	b480      	push	{r7}
 800b760:	b095      	sub	sp, #84	@ 0x54
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b76e:	e853 3f00 	ldrex	r3, [r3]
 800b772:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b776:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b77a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	461a      	mov	r2, r3
 800b782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b784:	643b      	str	r3, [r7, #64]	@ 0x40
 800b786:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b788:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b78a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b78c:	e841 2300 	strex	r3, r2, [r1]
 800b790:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1e6      	bne.n	800b766 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	3308      	adds	r3, #8
 800b79e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a0:	6a3b      	ldr	r3, [r7, #32]
 800b7a2:	e853 3f00 	ldrex	r3, [r3]
 800b7a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7a8:	69fb      	ldr	r3, [r7, #28]
 800b7aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b7ae:	f023 0301 	bic.w	r3, r3, #1
 800b7b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	3308      	adds	r3, #8
 800b7ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b7bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b7be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7c4:	e841 2300 	strex	r3, r2, [r1]
 800b7c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1e3      	bne.n	800b798 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d118      	bne.n	800b80a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	e853 3f00 	ldrex	r3, [r3]
 800b7e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	f023 0310 	bic.w	r3, r3, #16
 800b7ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7f6:	61bb      	str	r3, [r7, #24]
 800b7f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fa:	6979      	ldr	r1, [r7, #20]
 800b7fc:	69ba      	ldr	r2, [r7, #24]
 800b7fe:	e841 2300 	strex	r3, r2, [r1]
 800b802:	613b      	str	r3, [r7, #16]
   return(result);
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d1e6      	bne.n	800b7d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2220      	movs	r2, #32
 800b80e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b81e:	bf00      	nop
 800b820:	3754      	adds	r7, #84	@ 0x54
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b084      	sub	sp, #16
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b836:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2200      	movs	r2, #0
 800b844:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f7ff fad7 	bl	800adfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b84e:	bf00      	nop
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b088      	sub	sp, #32
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	e853 3f00 	ldrex	r3, [r3]
 800b86a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b872:	61fb      	str	r3, [r7, #28]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	461a      	mov	r2, r3
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	61bb      	str	r3, [r7, #24]
 800b87e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b880:	6979      	ldr	r1, [r7, #20]
 800b882:	69ba      	ldr	r2, [r7, #24]
 800b884:	e841 2300 	strex	r3, r2, [r1]
 800b888:	613b      	str	r3, [r7, #16]
   return(result);
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d1e6      	bne.n	800b85e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2220      	movs	r2, #32
 800b894:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f7ff faa2 	bl	800ade8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8a4:	bf00      	nop
 800b8a6:	3720      	adds	r7, #32
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b8b4:	bf00      	nop
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b8c8:	bf00      	nop
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d101      	bne.n	800b8fe <HAL_UARTEx_DisableFifoMode+0x16>
 800b8fa:	2302      	movs	r3, #2
 800b8fc:	e027      	b.n	800b94e <HAL_UARTEx_DisableFifoMode+0x66>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2224      	movs	r2, #36	@ 0x24
 800b90a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f022 0201 	bic.w	r2, r2, #1
 800b924:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b92c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2220      	movs	r2, #32
 800b940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b94c:	2300      	movs	r3, #0
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3714      	adds	r7, #20
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr

0800b95a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b084      	sub	sp, #16
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
 800b962:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d101      	bne.n	800b972 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b96e:	2302      	movs	r3, #2
 800b970:	e02d      	b.n	800b9ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2201      	movs	r2, #1
 800b976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2224      	movs	r2, #36	@ 0x24
 800b97e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f022 0201 	bic.w	r2, r2, #1
 800b998:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	683a      	ldr	r2, [r7, #0]
 800b9aa:	430a      	orrs	r2, r1
 800b9ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f850 	bl	800ba54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2220      	movs	r2, #32
 800b9c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b084      	sub	sp, #16
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
 800b9de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d101      	bne.n	800b9ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b9ea:	2302      	movs	r3, #2
 800b9ec:	e02d      	b.n	800ba4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2224      	movs	r2, #36	@ 0x24
 800b9fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f022 0201 	bic.w	r2, r2, #1
 800ba14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	683a      	ldr	r2, [r7, #0]
 800ba26:	430a      	orrs	r2, r1
 800ba28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 f812 	bl	800ba54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2220      	movs	r2, #32
 800ba3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
	...

0800ba54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d108      	bne.n	800ba76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba74:	e031      	b.n	800bada <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba76:	2308      	movs	r3, #8
 800ba78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba7a:	2308      	movs	r3, #8
 800ba7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	0e5b      	lsrs	r3, r3, #25
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	f003 0307 	and.w	r3, r3, #7
 800ba8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	0f5b      	lsrs	r3, r3, #29
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	f003 0307 	and.w	r3, r3, #7
 800ba9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba9e:	7bbb      	ldrb	r3, [r7, #14]
 800baa0:	7b3a      	ldrb	r2, [r7, #12]
 800baa2:	4911      	ldr	r1, [pc, #68]	@ (800bae8 <UARTEx_SetNbDataToProcess+0x94>)
 800baa4:	5c8a      	ldrb	r2, [r1, r2]
 800baa6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800baaa:	7b3a      	ldrb	r2, [r7, #12]
 800baac:	490f      	ldr	r1, [pc, #60]	@ (800baec <UARTEx_SetNbDataToProcess+0x98>)
 800baae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bab0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800babc:	7bfb      	ldrb	r3, [r7, #15]
 800babe:	7b7a      	ldrb	r2, [r7, #13]
 800bac0:	4909      	ldr	r1, [pc, #36]	@ (800bae8 <UARTEx_SetNbDataToProcess+0x94>)
 800bac2:	5c8a      	ldrb	r2, [r1, r2]
 800bac4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bac8:	7b7a      	ldrb	r2, [r7, #13]
 800baca:	4908      	ldr	r1, [pc, #32]	@ (800baec <UARTEx_SetNbDataToProcess+0x98>)
 800bacc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bace:	fb93 f3f2 	sdiv	r3, r3, r2
 800bad2:	b29a      	uxth	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bada:	bf00      	nop
 800badc:	3714      	adds	r7, #20
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	0801170c 	.word	0x0801170c
 800baec:	08011714 	.word	0x08011714

0800baf0 <appInit>:

static void standingBy();
static void working(void);

void appInit()
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	af00      	add	r7, sp, #0
    motorInit();
 800baf4:	f000 f9de 	bl	800beb4 <motorInit>
}
 800baf8:	bf00      	nop
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <appRunning>:

void appRunning()
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	af00      	add	r7, sp, #0

    getKeyState(&keyState);
 800bb00:	480d      	ldr	r0, [pc, #52]	@ (800bb38 <appRunning+0x3c>)
 800bb02:	f000 faf7 	bl	800c0f4 <getKeyState>

    if (++flashCnt >= 10)
 800bb06:	4b0d      	ldr	r3, [pc, #52]	@ (800bb3c <appRunning+0x40>)
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	b2da      	uxtb	r2, r3
 800bb0e:	4b0b      	ldr	r3, [pc, #44]	@ (800bb3c <appRunning+0x40>)
 800bb10:	701a      	strb	r2, [r3, #0]
 800bb12:	4b0a      	ldr	r3, [pc, #40]	@ (800bb3c <appRunning+0x40>)
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	2b09      	cmp	r3, #9
 800bb18:	d902      	bls.n	800bb20 <appRunning+0x24>
        flashCnt = 0;
 800bb1a:	4b08      	ldr	r3, [pc, #32]	@ (800bb3c <appRunning+0x40>)
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	701a      	strb	r2, [r3, #0]

    led1On = 0;
 800bb20:	4b07      	ldr	r3, [pc, #28]	@ (800bb40 <appRunning+0x44>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	701a      	strb	r2, [r3, #0]
    led2On = 0;
 800bb26:	4b07      	ldr	r3, [pc, #28]	@ (800bb44 <appRunning+0x48>)
 800bb28:	2200      	movs	r2, #0
 800bb2a:	701a      	strb	r2, [r3, #0]
    // case WORK:
    //     working();
    //     break;
    // }

    txDataProcess();
 800bb2c:	f000 f80c 	bl	800bb48 <txDataProcess>

    LED_drive();
 800bb30:	f000 fb1e 	bl	800c170 <LED_drive>
}
 800bb34:	bf00      	nop
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	20000698 	.word	0x20000698
 800bb3c:	20000699 	.word	0x20000699
 800bb40:	20000888 	.word	0x20000888
 800bb44:	20000889 	.word	0x20000889

0800bb48 <txDataProcess>:
        // }
    }
}
#include "mt6701.h"
static void txDataProcess()
{
 800bb48:	b5b0      	push	{r4, r5, r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af02      	add	r7, sp, #8
    //  sprintf(txBuffer, " rawAnle: %f\n", rawAngle);
    // sprintf(txBuffer, "zeroAngle: %f, rawAngle: %f\n", motor1.zeroElectricAngleOffSet, motor1.angle_el);
    // sprintf(txBuffer, "rawData: %u, rawAnle: %f, fullAngle: %f\n", rawData, rawAngle, fullAngle);
    // sprintf(txBuffer, "rawAnle: %f, eAngle: %f\n", rawAngle, motor1.angle_el);

    sprintf(txBuffer, " offset_ia: %f, offset_ib: %f\n", motor1.offset_ia, motor1.offset_ib);
 800bb4e:	4b0c      	ldr	r3, [pc, #48]	@ (800bb80 <txDataProcess+0x38>)
 800bb50:	695b      	ldr	r3, [r3, #20]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7f4 fd20 	bl	8000598 <__aeabi_f2d>
 800bb58:	4604      	mov	r4, r0
 800bb5a:	460d      	mov	r5, r1
 800bb5c:	4b08      	ldr	r3, [pc, #32]	@ (800bb80 <txDataProcess+0x38>)
 800bb5e:	699b      	ldr	r3, [r3, #24]
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7f4 fd19 	bl	8000598 <__aeabi_f2d>
 800bb66:	4602      	mov	r2, r0
 800bb68:	460b      	mov	r3, r1
 800bb6a:	e9cd 2300 	strd	r2, r3, [sp]
 800bb6e:	4622      	mov	r2, r4
 800bb70:	462b      	mov	r3, r5
 800bb72:	4904      	ldr	r1, [pc, #16]	@ (800bb84 <txDataProcess+0x3c>)
 800bb74:	4804      	ldr	r0, [pc, #16]	@ (800bb88 <txDataProcess+0x40>)
 800bb76:	f001 ffe3 	bl	800db40 <siprintf>
}
 800bb7a:	bf00      	nop
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bdb0      	pop	{r4, r5, r7, pc}
 800bb80:	2000079c 	.word	0x2000079c
 800bb84:	08011680 	.word	0x08011680
 800bb88:	2000069c 	.word	0x2000069c

0800bb8c <FOC_log>:
    HAL_UART_Transmit_DMA(&huart3, (uint8_t *) strBuf, strlen(strBuf));
}

// DMA模式
void FOC_log(const char *format, ...)
{
 800bb8c:	b40f      	push	{r0, r1, r2, r3}
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b0c2      	sub	sp, #264	@ 0x108
 800bb92:	af00      	add	r7, sp, #0
  va_list args;           // 定义参数列表变量
  va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 800bb94:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800bb98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800bb9c:	1d3b      	adds	r3, r7, #4
 800bb9e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800bba2:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800bba6:	4618      	mov	r0, r3
 800bba8:	f002 f844 	bl	800dc34 <vsiprintf>
  va_end(args);                   // 结束可变参数的使用

  // 等待上次的数据发送完成，避免新的数据覆盖正在传输的数据，导致混乱
  while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
 800bbac:	bf00      	nop
 800bbae:	480d      	ldr	r0, [pc, #52]	@ (800bbe4 <FOC_log+0x58>)
 800bbb0:	f7ff f93a 	bl	800ae28 <HAL_UART_GetState>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b21      	cmp	r3, #33	@ 0x21
 800bbb8:	d0f9      	beq.n	800bbae <FOC_log+0x22>
  {
    // Wait for DMA transfer to complete
  }
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
 800bbba:	1d3b      	adds	r3, r7, #4
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7f4 fb7f 	bl	80002c0 <strlen>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	1d39      	adds	r1, r7, #4
 800bbc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bbcc:	4805      	ldr	r0, [pc, #20]	@ (800bbe4 <FOC_log+0x58>)
 800bbce:	f7fe fd58 	bl	800a682 <HAL_UART_Transmit>
}
 800bbd2:	bf00      	nop
 800bbd4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbde:	b004      	add	sp, #16
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	200005a0 	.word	0x200005a0

0800bbe8 <printLog>:

void printLog()
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	af00      	add	r7, sp, #0
#if CALI_PID
  printf("bldcMotor.target=%.2f, velocity=%.2f, ShaftAngle=%.2f\n", bldcMotor.target, shaftVelocity, shaftAngle);
  // printf("bldcMotor.target=%.2f, RPM=%d\n", bldcMotor.target, getRPM());
#elif SHOW_WAVE == 0
  HAL_UART_Transmit(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer), 1000);
 800bbec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bbf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bbf4:	4905      	ldr	r1, [pc, #20]	@ (800bc0c <printLog+0x24>)
 800bbf6:	4806      	ldr	r0, [pc, #24]	@ (800bc10 <printLog+0x28>)
 800bbf8:	f7fe fd43 	bl	800a682 <HAL_UART_Transmit>
  // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
  memset(txBuffer, '\0', sizeof(txBuffer));
 800bbfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bc00:	2100      	movs	r1, #0
 800bc02:	4802      	ldr	r0, [pc, #8]	@ (800bc0c <printLog+0x24>)
 800bc04:	f002 f820 	bl	800dc48 <memset>
#endif
}
 800bc08:	bf00      	nop
 800bc0a:	bd80      	pop	{r7, pc}
 800bc0c:	2000069c 	.word	0x2000069c
 800bc10:	200005a0 	.word	0x200005a0
 800bc14:	00000000 	.word	0x00000000

0800bc18 <getCurrentOffsets>:
//     return adc * ADC_VLOTS_RADIO * VLOTS_AMPS_RATIO;
// }

// Function finding zero offsets of the ADC
void getCurrentOffsets(FocMotor *motor, uint32_t adc_a, uint32_t adc_b, uint32_t rounds)
{
 800bc18:	b5b0      	push	{r4, r5, r7, lr}
 800bc1a:	b086      	sub	sp, #24
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
 800bc24:	603b      	str	r3, [r7, #0]
    // find adc offset = zero current voltage
    motor->offset_ia = 0;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f04f 0200 	mov.w	r2, #0
 800bc2c:	615a      	str	r2, [r3, #20]
    motor->offset_ib = 0;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f04f 0200 	mov.w	r2, #0
 800bc34:	619a      	str	r2, [r3, #24]
    // read the adc voltage  times ( arbitrary number )
    for (int i = 0; i < rounds; i++)
 800bc36:	2300      	movs	r3, #0
 800bc38:	617b      	str	r3, [r7, #20]
 800bc3a:	e076      	b.n	800bd2a <getCurrentOffsets+0x112>
    {
        motor->offset_ia += ADC_2_CURRENT(adc_a);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	695b      	ldr	r3, [r3, #20]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7f4 fca9 	bl	8000598 <__aeabi_f2d>
 800bc46:	4604      	mov	r4, r0
 800bc48:	460d      	mov	r5, r1
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	ee07 3a90 	vmov	s15, r3
 800bc50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc54:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 800bd88 <getCurrentOffsets+0x170>
 800bc58:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc5c:	ee17 0a90 	vmov	r0, s15
 800bc60:	f7f4 fc9a 	bl	8000598 <__aeabi_f2d>
 800bc64:	a342      	add	r3, pc, #264	@ (adr r3, 800bd70 <getCurrentOffsets+0x158>)
 800bc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6a:	f7f4 fe17 	bl	800089c <__aeabi_ddiv>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	460b      	mov	r3, r1
 800bc72:	4610      	mov	r0, r2
 800bc74:	4619      	mov	r1, r3
 800bc76:	a340      	add	r3, pc, #256	@ (adr r3, 800bd78 <getCurrentOffsets+0x160>)
 800bc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7c:	f7f4 fe0e 	bl	800089c <__aeabi_ddiv>
 800bc80:	4602      	mov	r2, r0
 800bc82:	460b      	mov	r3, r1
 800bc84:	4610      	mov	r0, r2
 800bc86:	4619      	mov	r1, r3
 800bc88:	a33d      	add	r3, pc, #244	@ (adr r3, 800bd80 <getCurrentOffsets+0x168>)
 800bc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8e:	f7f4 fe05 	bl	800089c <__aeabi_ddiv>
 800bc92:	4602      	mov	r2, r0
 800bc94:	460b      	mov	r3, r1
 800bc96:	4620      	mov	r0, r4
 800bc98:	4629      	mov	r1, r5
 800bc9a:	f7f4 fb1f 	bl	80002dc <__adddf3>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	4610      	mov	r0, r2
 800bca4:	4619      	mov	r1, r3
 800bca6:	f7f4 ffc7 	bl	8000c38 <__aeabi_d2f>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	615a      	str	r2, [r3, #20]
        motor->offset_ib += ADC_2_CURRENT(adc_b);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	699b      	ldr	r3, [r3, #24]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7f4 fc6f 	bl	8000598 <__aeabi_f2d>
 800bcba:	4604      	mov	r4, r0
 800bcbc:	460d      	mov	r5, r1
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	ee07 3a90 	vmov	s15, r3
 800bcc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800bd88 <getCurrentOffsets+0x170>
 800bccc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcd0:	ee17 0a90 	vmov	r0, s15
 800bcd4:	f7f4 fc60 	bl	8000598 <__aeabi_f2d>
 800bcd8:	a325      	add	r3, pc, #148	@ (adr r3, 800bd70 <getCurrentOffsets+0x158>)
 800bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcde:	f7f4 fddd 	bl	800089c <__aeabi_ddiv>
 800bce2:	4602      	mov	r2, r0
 800bce4:	460b      	mov	r3, r1
 800bce6:	4610      	mov	r0, r2
 800bce8:	4619      	mov	r1, r3
 800bcea:	a323      	add	r3, pc, #140	@ (adr r3, 800bd78 <getCurrentOffsets+0x160>)
 800bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf0:	f7f4 fdd4 	bl	800089c <__aeabi_ddiv>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	a320      	add	r3, pc, #128	@ (adr r3, 800bd80 <getCurrentOffsets+0x168>)
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	f7f4 fdcb 	bl	800089c <__aeabi_ddiv>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	f7f4 fae5 	bl	80002dc <__adddf3>
 800bd12:	4602      	mov	r2, r0
 800bd14:	460b      	mov	r3, r1
 800bd16:	4610      	mov	r0, r2
 800bd18:	4619      	mov	r1, r3
 800bd1a:	f7f4 ff8d 	bl	8000c38 <__aeabi_d2f>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	619a      	str	r2, [r3, #24]
    for (int i = 0; i < rounds; i++)
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	3301      	adds	r3, #1
 800bd28:	617b      	str	r3, [r7, #20]
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	683a      	ldr	r2, [r7, #0]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d884      	bhi.n	800bc3c <getCurrentOffsets+0x24>
    }
    // calculate the mean offsets
    motor->offset_ia = motor->offset_ia / rounds;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	edd3 6a05 	vldr	s13, [r3, #20]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	ee07 3a90 	vmov	s15, r3
 800bd3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bd42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	edc3 7a05 	vstr	s15, [r3, #20]
    motor->offset_ib = motor->offset_ib / rounds;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	edd3 6a06 	vldr	s13, [r3, #24]
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	ee07 3a90 	vmov	s15, r3
 800bd58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bd5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800bd66:	bf00      	nop
 800bd68:	3718      	adds	r7, #24
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bdb0      	pop	{r4, r5, r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	00000000 	.word	0x00000000
 800bd74:	40affe00 	.word	0x40affe00
 800bd78:	40000000 	.word	0x40000000
 800bd7c:	3f747ae1 	.word	0x3f747ae1
 800bd80:	a0000000 	.word	0xa0000000
 800bd84:	401d554c 	.word	0x401d554c
 800bd88:	40533333 	.word	0x40533333
 800bd8c:	00000000 	.word	0x00000000

0800bd90 <getPhaseCurrents>:
// read all three phase currents (if possible 2 or 3)
void getPhaseCurrents(FocMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800bd90:	b5b0      	push	{r4, r5, r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
    motor->Ia = ADC_2_CURRENT(adc_a) - motor->offset_ia; // amps
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	ee07 3a90 	vmov	s15, r3
 800bda2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bda6:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800beb0 <getPhaseCurrents+0x120>
 800bdaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bdae:	ee17 0a90 	vmov	r0, s15
 800bdb2:	f7f4 fbf1 	bl	8000598 <__aeabi_f2d>
 800bdb6:	a338      	add	r3, pc, #224	@ (adr r3, 800be98 <getPhaseCurrents+0x108>)
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	f7f4 fd6e 	bl	800089c <__aeabi_ddiv>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	4610      	mov	r0, r2
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	a335      	add	r3, pc, #212	@ (adr r3, 800bea0 <getPhaseCurrents+0x110>)
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	f7f4 fd65 	bl	800089c <__aeabi_ddiv>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	4610      	mov	r0, r2
 800bdd8:	4619      	mov	r1, r3
 800bdda:	a333      	add	r3, pc, #204	@ (adr r3, 800bea8 <getPhaseCurrents+0x118>)
 800bddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde0:	f7f4 fd5c 	bl	800089c <__aeabi_ddiv>
 800bde4:	4602      	mov	r2, r0
 800bde6:	460b      	mov	r3, r1
 800bde8:	4614      	mov	r4, r2
 800bdea:	461d      	mov	r5, r3
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	695b      	ldr	r3, [r3, #20]
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7f4 fbd1 	bl	8000598 <__aeabi_f2d>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	f7f4 fa6b 	bl	80002d8 <__aeabi_dsub>
 800be02:	4602      	mov	r2, r0
 800be04:	460b      	mov	r3, r1
 800be06:	4610      	mov	r0, r2
 800be08:	4619      	mov	r1, r3
 800be0a:	f7f4 ff15 	bl	8000c38 <__aeabi_d2f>
 800be0e:	4602      	mov	r2, r0
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	61da      	str	r2, [r3, #28]
    motor->Ib = ADC_2_CURRENT(adc_b) - motor->offset_ib;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	ee07 3a90 	vmov	s15, r3
 800be1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be1e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800beb0 <getPhaseCurrents+0x120>
 800be22:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be26:	ee17 0a90 	vmov	r0, s15
 800be2a:	f7f4 fbb5 	bl	8000598 <__aeabi_f2d>
 800be2e:	a31a      	add	r3, pc, #104	@ (adr r3, 800be98 <getPhaseCurrents+0x108>)
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	f7f4 fd32 	bl	800089c <__aeabi_ddiv>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	4610      	mov	r0, r2
 800be3e:	4619      	mov	r1, r3
 800be40:	a317      	add	r3, pc, #92	@ (adr r3, 800bea0 <getPhaseCurrents+0x110>)
 800be42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be46:	f7f4 fd29 	bl	800089c <__aeabi_ddiv>
 800be4a:	4602      	mov	r2, r0
 800be4c:	460b      	mov	r3, r1
 800be4e:	4610      	mov	r0, r2
 800be50:	4619      	mov	r1, r3
 800be52:	a315      	add	r3, pc, #84	@ (adr r3, 800bea8 <getPhaseCurrents+0x118>)
 800be54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be58:	f7f4 fd20 	bl	800089c <__aeabi_ddiv>
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	4614      	mov	r4, r2
 800be62:	461d      	mov	r5, r3
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	699b      	ldr	r3, [r3, #24]
 800be68:	4618      	mov	r0, r3
 800be6a:	f7f4 fb95 	bl	8000598 <__aeabi_f2d>
 800be6e:	4602      	mov	r2, r0
 800be70:	460b      	mov	r3, r1
 800be72:	4620      	mov	r0, r4
 800be74:	4629      	mov	r1, r5
 800be76:	f7f4 fa2f 	bl	80002d8 <__aeabi_dsub>
 800be7a:	4602      	mov	r2, r0
 800be7c:	460b      	mov	r3, r1
 800be7e:	4610      	mov	r0, r2
 800be80:	4619      	mov	r1, r3
 800be82:	f7f4 fed9 	bl	8000c38 <__aeabi_d2f>
 800be86:	4602      	mov	r2, r0
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	621a      	str	r2, [r3, #32]
}
 800be8c:	bf00      	nop
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bdb0      	pop	{r4, r5, r7, pc}
 800be94:	f3af 8000 	nop.w
 800be98:	00000000 	.word	0x00000000
 800be9c:	40affe00 	.word	0x40affe00
 800bea0:	40000000 	.word	0x40000000
 800bea4:	3f747ae1 	.word	0x3f747ae1
 800bea8:	a0000000 	.word	0xa0000000
 800beac:	401d554c 	.word	0x401d554c
 800beb0:	40533333 	.word	0x40533333

0800beb4 <motorInit>:
static void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c);
static void getElecAngle1(FocMotor *motor);
static void startPwm1();
static void stopPwm1();
void motorInit()
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	af00      	add	r7, sp, #0
    motor1.pole_pairs = 7;
 800beb8:	4b1a      	ldr	r3, [pc, #104]	@ (800bf24 <motorInit+0x70>)
 800beba:	2207      	movs	r2, #7
 800bebc:	721a      	strb	r2, [r3, #8]
    motor1.startPwm = startPwm1;
 800bebe:	4b19      	ldr	r3, [pc, #100]	@ (800bf24 <motorInit+0x70>)
 800bec0:	4a19      	ldr	r2, [pc, #100]	@ (800bf28 <motorInit+0x74>)
 800bec2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    motor1.stopPwm = stopPwm1;
 800bec6:	4b17      	ldr	r3, [pc, #92]	@ (800bf24 <motorInit+0x70>)
 800bec8:	4a18      	ldr	r2, [pc, #96]	@ (800bf2c <motorInit+0x78>)
 800beca:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    motor1.updatePwm = updatePwm1;
 800bece:	4b15      	ldr	r3, [pc, #84]	@ (800bf24 <motorInit+0x70>)
 800bed0:	4a17      	ldr	r2, [pc, #92]	@ (800bf30 <motorInit+0x7c>)
 800bed2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    motor1.getShaftAngle = MT6701_GetRawAngle;
 800bed6:	4b13      	ldr	r3, [pc, #76]	@ (800bf24 <motorInit+0x70>)
 800bed8:	4a16      	ldr	r2, [pc, #88]	@ (800bf34 <motorInit+0x80>)
 800beda:	611a      	str	r2, [r3, #16]
    motor1.zeroElectricAngleOffSet = 0;
 800bedc:	4b11      	ldr	r3, [pc, #68]	@ (800bf24 <motorInit+0x70>)
 800bede:	f04f 0200 	mov.w	r2, #0
 800bee2:	605a      	str	r2, [r3, #4]

    motor1.startPwm();
 800bee4:	4b0f      	ldr	r3, [pc, #60]	@ (800bf24 <motorInit+0x70>)
 800bee6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800beea:	4798      	blx	r3
    getZeroElecAngle(&motor1);
 800beec:	480d      	ldr	r0, [pc, #52]	@ (800bf24 <motorInit+0x70>)
 800beee:	f000 f87d 	bl	800bfec <getZeroElecAngle>
    // motor1.stopPwm();
    getElecAngle(&motor1); // 观察电角度是否为0
 800bef2:	480c      	ldr	r0, [pc, #48]	@ (800bf24 <motorInit+0x70>)
 800bef4:	f000 f8b4 	bl	800c060 <getElecAngle>
                           //   log_DMA_TX("[zeroAngleOffset,zeroAngle]:%f,%f\r\n", motor1.zeroElectricAngleOffSet, motor1.angle_el);
    FOC_log("[zeroAngleOffset]:%f\r\n", motor1.zeroElectricAngleOffSet);
 800bef8:	4b0a      	ldr	r3, [pc, #40]	@ (800bf24 <motorInit+0x70>)
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	4618      	mov	r0, r3
 800befe:	f7f4 fb4b 	bl	8000598 <__aeabi_f2d>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	480c      	ldr	r0, [pc, #48]	@ (800bf38 <motorInit+0x84>)
 800bf08:	f7ff fe40 	bl	800bb8c <FOC_log>
    FOC_log("[zeroAngle]:%f\r\n", motor1.angle_el);
 800bf0c:	4b05      	ldr	r3, [pc, #20]	@ (800bf24 <motorInit+0x70>)
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7f4 fb41 	bl	8000598 <__aeabi_f2d>
 800bf16:	4602      	mov	r2, r0
 800bf18:	460b      	mov	r3, r1
 800bf1a:	4808      	ldr	r0, [pc, #32]	@ (800bf3c <motorInit+0x88>)
 800bf1c:	f7ff fe36 	bl	800bb8c <FOC_log>

    //     getElecAngle(&motor1); // 观察电角度是否为0
    //     FOC_log("[zeroAngleOffset]:%f\r\n", motor1.zeroElectricAngleOffSet);
    //     FOC_log("[zeroAngle]:%f\r\n", motor1.angle_el);
    // }
}
 800bf20:	bf00      	nop
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	2000079c 	.word	0x2000079c
 800bf28:	0800bf41 	.word	0x0800bf41
 800bf2c:	0800bf7d 	.word	0x0800bf7d
 800bf30:	0800bfb9 	.word	0x0800bfb9
 800bf34:	0800c445 	.word	0x0800c445
 800bf38:	080116a0 	.word	0x080116a0
 800bf3c:	080116b8 	.word	0x080116b8

0800bf40 <startPwm1>:

static void startPwm1()
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800bf44:	2100      	movs	r1, #0
 800bf46:	480c      	ldr	r0, [pc, #48]	@ (800bf78 <startPwm1+0x38>)
 800bf48:	f7fc fcc8 	bl	80088dc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800bf4c:	2104      	movs	r1, #4
 800bf4e:	480a      	ldr	r0, [pc, #40]	@ (800bf78 <startPwm1+0x38>)
 800bf50:	f7fc fcc4 	bl	80088dc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800bf54:	2108      	movs	r1, #8
 800bf56:	4808      	ldr	r0, [pc, #32]	@ (800bf78 <startPwm1+0x38>)
 800bf58:	f7fc fcc0 	bl	80088dc <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	4806      	ldr	r0, [pc, #24]	@ (800bf78 <startPwm1+0x38>)
 800bf60:	f7fd ffdc 	bl	8009f1c <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800bf64:	2104      	movs	r1, #4
 800bf66:	4804      	ldr	r0, [pc, #16]	@ (800bf78 <startPwm1+0x38>)
 800bf68:	f7fd ffd8 	bl	8009f1c <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800bf6c:	2108      	movs	r1, #8
 800bf6e:	4802      	ldr	r0, [pc, #8]	@ (800bf78 <startPwm1+0x38>)
 800bf70:	f7fd ffd4 	bl	8009f1c <HAL_TIMEx_PWMN_Start>
}
 800bf74:	bf00      	nop
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	20000508 	.word	0x20000508

0800bf7c <stopPwm1>:
static void stopPwm1()
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800bf80:	2100      	movs	r1, #0
 800bf82:	480c      	ldr	r0, [pc, #48]	@ (800bfb4 <stopPwm1+0x38>)
 800bf84:	f7fc fdaa 	bl	8008adc <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800bf88:	2104      	movs	r1, #4
 800bf8a:	480a      	ldr	r0, [pc, #40]	@ (800bfb4 <stopPwm1+0x38>)
 800bf8c:	f7fc fda6 	bl	8008adc <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800bf90:	2108      	movs	r1, #8
 800bf92:	4808      	ldr	r0, [pc, #32]	@ (800bfb4 <stopPwm1+0x38>)
 800bf94:	f7fc fda2 	bl	8008adc <HAL_TIM_PWM_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800bf98:	2100      	movs	r1, #0
 800bf9a:	4806      	ldr	r0, [pc, #24]	@ (800bfb4 <stopPwm1+0x38>)
 800bf9c:	f7fe f872 	bl	800a084 <HAL_TIMEx_PWMN_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800bfa0:	2104      	movs	r1, #4
 800bfa2:	4804      	ldr	r0, [pc, #16]	@ (800bfb4 <stopPwm1+0x38>)
 800bfa4:	f7fe f86e 	bl	800a084 <HAL_TIMEx_PWMN_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800bfa8:	2108      	movs	r1, #8
 800bfaa:	4802      	ldr	r0, [pc, #8]	@ (800bfb4 <stopPwm1+0x38>)
 800bfac:	f7fe f86a 	bl	800a084 <HAL_TIMEx_PWMN_Stop>
}
 800bfb0:	bf00      	nop
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	20000508 	.word	0x20000508

0800bfb8 <updatePwm1>:

static void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	80fb      	strh	r3, [r7, #6]
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	80bb      	strh	r3, [r7, #4]
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = a;
 800bfca:	4a07      	ldr	r2, [pc, #28]	@ (800bfe8 <updatePwm1+0x30>)
 800bfcc:	88fb      	ldrh	r3, [r7, #6]
 800bfce:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800bfd0:	4a05      	ldr	r2, [pc, #20]	@ (800bfe8 <updatePwm1+0x30>)
 800bfd2:	88bb      	ldrh	r3, [r7, #4]
 800bfd4:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = c;
 800bfd6:	4a04      	ldr	r2, [pc, #16]	@ (800bfe8 <updatePwm1+0x30>)
 800bfd8:	887b      	ldrh	r3, [r7, #2]
 800bfda:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800bfdc:	bf00      	nop
 800bfde:	370c      	adds	r7, #12
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	40012c00 	.word	0x40012c00

0800bfec <getZeroElecAngle>:

void getZeroElecAngle(FocMotor *motor)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	ed2d 8b02 	vpush	{d8}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
    setPhaseVoltage(motor, 0.0f, 2.0f, 0.0f);
 800bff8:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 800c05c <getZeroElecAngle+0x70>
 800bffc:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800c000:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800c05c <getZeroElecAngle+0x70>
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fc39 	bl	800c87c <setPhaseVoltage>
    delay(500);
 800c00a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c00e:	f000 fa37 	bl	800c480 <delay>
    setPhaseVoltage(motor, 0.0f, 0.0f, 0.0f);
 800c012:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 800c05c <getZeroElecAngle+0x70>
 800c016:	eddf 0a11 	vldr	s1, [pc, #68]	@ 800c05c <getZeroElecAngle+0x70>
 800c01a:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800c05c <getZeroElecAngle+0x70>
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fc2c 	bl	800c87c <setPhaseVoltage>
    // getElecAngle(motor);
    motor->zeroElectricAngleOffSet = _normalizeAngle(motor->pole_pairs * motor->getShaftAngle()); // 测量电角度零位偏差
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	7a1b      	ldrb	r3, [r3, #8]
 800c028:	ee07 3a90 	vmov	s15, r3
 800c02c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	4798      	blx	r3
 800c036:	eef0 7a40 	vmov.f32	s15, s0
 800c03a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c03e:	eeb0 0a67 	vmov.f32	s0, s15
 800c042:	f000 f98d 	bl	800c360 <_normalizeAngle>
 800c046:	eef0 7a40 	vmov.f32	s15, s0
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800c050:	bf00      	nop
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	ecbd 8b02 	vpop	{d8}
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	00000000 	.word	0x00000000

0800c060 <getElecAngle>:

void getElecAngle(FocMotor *motor)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	ed2d 8b02 	vpush	{d8}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
    motor->angle_el = _normalizeAngle(motor->pole_pairs * motor->getShaftAngle() - motor->zeroElectricAngleOffSet);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	7a1b      	ldrb	r3, [r3, #8]
 800c070:	ee07 3a90 	vmov	s15, r3
 800c074:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	4798      	blx	r3
 800c07e:	eef0 7a40 	vmov.f32	s15, s0
 800c082:	ee28 7a27 	vmul.f32	s14, s16, s15
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	edd3 7a01 	vldr	s15, [r3, #4]
 800c08c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c090:	eeb0 0a67 	vmov.f32	s0, s15
 800c094:	f000 f964 	bl	800c360 <_normalizeAngle>
 800c098:	eef0 7a40 	vmov.f32	s15, s0
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800c0a2:	bf00      	nop
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	ecbd 8b02 	vpop	{d8}
 800c0ac:	bd80      	pop	{r7, pc}
	...

0800c0b0 <foc>:

void foc(FocMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	60f8      	str	r0, [r7, #12]
 800c0b8:	60b9      	str	r1, [r7, #8]
 800c0ba:	607a      	str	r2, [r7, #4]

    static bool calibrateOffset;

    if (!calibrateOffset)
 800c0bc:	4b0b      	ldr	r3, [pc, #44]	@ (800c0ec <foc+0x3c>)
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d109      	bne.n	800c0d8 <foc+0x28>
    {
        getCurrentOffsets(&motor1, adc_a, adc_b, 100);
 800c0c4:	2364      	movs	r3, #100	@ 0x64
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	68b9      	ldr	r1, [r7, #8]
 800c0ca:	4809      	ldr	r0, [pc, #36]	@ (800c0f0 <foc+0x40>)
 800c0cc:	f7ff fda4 	bl	800bc18 <getCurrentOffsets>
        calibrateOffset = 1;
 800c0d0:	4b06      	ldr	r3, [pc, #24]	@ (800c0ec <foc+0x3c>)
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	701a      	strb	r2, [r3, #0]
        load_data[4] = motor1.Ib;
        memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
        HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, 6 * 4);
#endif
    }
}
 800c0d6:	e004      	b.n	800c0e2 <foc+0x32>
        getPhaseCurrents(motor, adc_a, adc_b);
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	68b9      	ldr	r1, [r7, #8]
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f7ff fe57 	bl	800bd90 <getPhaseCurrents>
}
 800c0e2:	bf00      	nop
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	20000854 	.word	0x20000854
 800c0f0:	2000079c 	.word	0x2000079c

0800c0f4 <getKeyState>:

/*
将物理按键转化为逻辑按键
 */
void getKeyState(KeyState *keyState)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
    uchar i;

    if (keyStruct[1].trigType == TRIG_SHORT)
 800c0fc:	4b1b      	ldr	r3, [pc, #108]	@ (800c16c <getKeyState+0x78>)
 800c0fe:	7d1b      	ldrb	r3, [r3, #20]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d103      	bne.n	800c10c <getKeyState+0x18>
        *keyState = USER1_SHORT;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	701a      	strb	r2, [r3, #0]
 800c10a:	e014      	b.n	800c136 <getKeyState+0x42>
    else if (keyStruct[2].trigType == TRIG_SHORT)
 800c10c:	4b17      	ldr	r3, [pc, #92]	@ (800c16c <getKeyState+0x78>)
 800c10e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c112:	2b01      	cmp	r3, #1
 800c114:	d103      	bne.n	800c11e <getKeyState+0x2a>
        *keyState = USER2_SHORT;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2202      	movs	r2, #2
 800c11a:	701a      	strb	r2, [r3, #0]
 800c11c:	e00b      	b.n	800c136 <getKeyState+0x42>
    else if (keyStruct[3].trigType == TRIG_SHORT)
 800c11e:	4b13      	ldr	r3, [pc, #76]	@ (800c16c <getKeyState+0x78>)
 800c120:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c124:	2b01      	cmp	r3, #1
 800c126:	d103      	bne.n	800c130 <getKeyState+0x3c>
        *keyState = USER3_SHORT;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2203      	movs	r2, #3
 800c12c:	701a      	strb	r2, [r3, #0]
 800c12e:	e002      	b.n	800c136 <getKeyState+0x42>
    else
        *keyState = NONE_KEY;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < KEY_NUM; i++)
 800c136:	2300      	movs	r3, #0
 800c138:	73fb      	strb	r3, [r7, #15]
 800c13a:	e00c      	b.n	800c156 <getKeyState+0x62>
    {
        keyStruct[i].trigType = NO_TRIG;
 800c13c:	7bfa      	ldrb	r2, [r7, #15]
 800c13e:	490b      	ldr	r1, [pc, #44]	@ (800c16c <getKeyState+0x78>)
 800c140:	4613      	mov	r3, r2
 800c142:	005b      	lsls	r3, r3, #1
 800c144:	4413      	add	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	440b      	add	r3, r1
 800c14a:	3308      	adds	r3, #8
 800c14c:	2200      	movs	r2, #0
 800c14e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < KEY_NUM; i++)
 800c150:	7bfb      	ldrb	r3, [r7, #15]
 800c152:	3301      	adds	r3, #1
 800c154:	73fb      	strb	r3, [r7, #15]
 800c156:	7bfb      	ldrb	r3, [r7, #15]
 800c158:	2b03      	cmp	r3, #3
 800c15a:	d9ef      	bls.n	800c13c <getKeyState+0x48>
    }
}
 800c15c:	bf00      	nop
 800c15e:	bf00      	nop
 800c160:	3714      	adds	r7, #20
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr
 800c16a:	bf00      	nop
 800c16c:	20000858 	.word	0x20000858

0800c170 <LED_drive>:
#include "led.h"

bool led1On, led2On;

void LED_drive()
{
 800c170:	b580      	push	{r7, lr}
 800c172:	af00      	add	r7, sp, #0
    if (led1On)
 800c174:	4b0f      	ldr	r3, [pc, #60]	@ (800c1b4 <LED_drive+0x44>)
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d005      	beq.n	800c188 <LED_drive+0x18>
        LED1_ON;
 800c17c:	2200      	movs	r2, #0
 800c17e:	2140      	movs	r1, #64	@ 0x40
 800c180:	480d      	ldr	r0, [pc, #52]	@ (800c1b8 <LED_drive+0x48>)
 800c182:	f7fa fd4b 	bl	8006c1c <HAL_GPIO_WritePin>
 800c186:	e004      	b.n	800c192 <LED_drive+0x22>
    else
        LED1_OFF;
 800c188:	2201      	movs	r2, #1
 800c18a:	2140      	movs	r1, #64	@ 0x40
 800c18c:	480a      	ldr	r0, [pc, #40]	@ (800c1b8 <LED_drive+0x48>)
 800c18e:	f7fa fd45 	bl	8006c1c <HAL_GPIO_WritePin>

    if (led2On)
 800c192:	4b0a      	ldr	r3, [pc, #40]	@ (800c1bc <LED_drive+0x4c>)
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d005      	beq.n	800c1a6 <LED_drive+0x36>
        LED2_ON;
 800c19a:	2200      	movs	r2, #0
 800c19c:	2110      	movs	r1, #16
 800c19e:	4806      	ldr	r0, [pc, #24]	@ (800c1b8 <LED_drive+0x48>)
 800c1a0:	f7fa fd3c 	bl	8006c1c <HAL_GPIO_WritePin>
    else
        LED2_OFF;
}
 800c1a4:	e004      	b.n	800c1b0 <LED_drive+0x40>
        LED2_OFF;
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	2110      	movs	r1, #16
 800c1aa:	4803      	ldr	r0, [pc, #12]	@ (800c1b8 <LED_drive+0x48>)
 800c1ac:	f7fa fd36 	bl	8006c1c <HAL_GPIO_WritePin>
}
 800c1b0:	bf00      	nop
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	20000888 	.word	0x20000888
 800c1b8:	48000800 	.word	0x48000800
 800c1bc:	20000889 	.word	0x20000889

0800c1c0 <_sin>:

// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7f4 f9e4 	bl	8000598 <__aeabi_f2d>
 800c1d0:	a339      	add	r3, pc, #228	@ (adr r3, 800c2b8 <_sin+0xf8>)
 800c1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d6:	f7f4 fa37 	bl	8000648 <__aeabi_dmul>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	460b      	mov	r3, r1
 800c1de:	4610      	mov	r0, r2
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	f7f4 fd09 	bl	8000bf8 <__aeabi_d2uiz>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	0a1b      	lsrs	r3, r3, #8
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2b3f      	cmp	r3, #63	@ 0x3f
 800c1fc:	d80b      	bhi.n	800c216 <_sin+0x56>
  {
    t1 = sine_array[i];
 800c1fe:	4a2c      	ldr	r2, [pc, #176]	@ (800c2b0 <_sin+0xf0>)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c206:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	3301      	adds	r3, #1
 800c20c:	4a28      	ldr	r2, [pc, #160]	@ (800c2b0 <_sin+0xf0>)
 800c20e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c212:	613b      	str	r3, [r7, #16]
 800c214:	e033      	b.n	800c27e <_sin+0xbe>
  }
  else if (i < 128)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2b7f      	cmp	r3, #127	@ 0x7f
 800c21a:	d80e      	bhi.n	800c23a <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800c222:	4a23      	ldr	r2, [pc, #140]	@ (800c2b0 <_sin+0xf0>)
 800c224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c228:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800c230:	4a1f      	ldr	r2, [pc, #124]	@ (800c2b0 <_sin+0xf0>)
 800c232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c236:	613b      	str	r3, [r7, #16]
 800c238:	e021      	b.n	800c27e <_sin+0xbe>
  }
  else if (i < 192)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2bbf      	cmp	r3, #191	@ 0xbf
 800c23e:	d80e      	bhi.n	800c25e <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	3b80      	subs	r3, #128	@ 0x80
 800c244:	4a1a      	ldr	r2, [pc, #104]	@ (800c2b0 <_sin+0xf0>)
 800c246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c24a:	425b      	negs	r3, r3
 800c24c:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	3b7f      	subs	r3, #127	@ 0x7f
 800c252:	4a17      	ldr	r2, [pc, #92]	@ (800c2b0 <_sin+0xf0>)
 800c254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c258:	425b      	negs	r3, r3
 800c25a:	613b      	str	r3, [r7, #16]
 800c25c:	e00f      	b.n	800c27e <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800c264:	4a12      	ldr	r2, [pc, #72]	@ (800c2b0 <_sin+0xf0>)
 800c266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c26a:	425b      	negs	r3, r3
 800c26c:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800c274:	4a0e      	ldr	r2, [pc, #56]	@ (800c2b0 <_sin+0xf0>)
 800c276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c27a:	425b      	negs	r3, r3
 800c27c:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800c27e:	693a      	ldr	r2, [r7, #16]
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	1ad3      	subs	r3, r2, r3
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	fb02 f303 	mul.w	r3, r2, r3
 800c28a:	121a      	asrs	r2, r3, #8
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	4413      	add	r3, r2
 800c290:	ee07 3a90 	vmov	s15, r3
 800c294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c298:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800c2b4 <_sin+0xf4>
 800c29c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800c2a0:	eeb0 0a67 	vmov.f32	s0, s15
 800c2a4:	3718      	adds	r7, #24
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	f3af 8000 	nop.w
 800c2b0:	2000000c 	.word	0x2000000c
 800c2b4:	38000000 	.word	0x38000000
 800c2b8:	6446f9b4 	.word	0x6446f9b4
 800c2bc:	40c45f30 	.word	0x40c45f30

0800c2c0 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800c2ca:	edd7 7a01 	vldr	s15, [r7, #4]
 800c2ce:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800c318 <_cos+0x58>
 800c2d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2d6:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800c2da:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2de:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800c31c <_cos+0x5c>
 800c2e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ea:	dd06      	ble.n	800c2fa <_cos+0x3a>
 800c2ec:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2f0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800c31c <_cos+0x5c>
 800c2f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2f8:	e001      	b.n	800c2fe <_cos+0x3e>
 800c2fa:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2fe:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800c302:	ed97 0a03 	vldr	s0, [r7, #12]
 800c306:	f7ff ff5b 	bl	800c1c0 <_sin>
 800c30a:	eef0 7a40 	vmov.f32	s15, s0
}
 800c30e:	eeb0 0a67 	vmov.f32	s0, s15
 800c312:	3710      	adds	r7, #16
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	3fc90fdb 	.word	0x3fc90fdb
 800c31c:	40c90fdb 	.word	0x40c90fdb

0800c320 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	ed87 0a03 	vstr	s0, [r7, #12]
 800c32a:	60b8      	str	r0, [r7, #8]
 800c32c:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800c32e:	ed97 0a03 	vldr	s0, [r7, #12]
 800c332:	f7ff ff45 	bl	800c1c0 <_sin>
 800c336:	eef0 7a40 	vmov.f32	s15, s0
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800c340:	ed97 0a03 	vldr	s0, [r7, #12]
 800c344:	f7ff ffbc 	bl	800c2c0 <_cos>
 800c348:	eef0 7a40 	vmov.f32	s15, s0
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	edc3 7a00 	vstr	s15, [r3]
}
 800c352:	bf00      	nop
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	0000      	movs	r0, r0
 800c35c:	0000      	movs	r0, r0
	...

0800c360 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7f4 f914 	bl	8000598 <__aeabi_f2d>
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800c3c0 <_normalizeAngle+0x60>
 800c378:	ec43 2b10 	vmov	d0, r2, r3
 800c37c:	f005 f83a 	bl	80113f4 <fmod>
 800c380:	ec53 2b10 	vmov	r2, r3, d0
 800c384:	4610      	mov	r0, r2
 800c386:	4619      	mov	r1, r3
 800c388:	f7f4 fc56 	bl	8000c38 <__aeabi_d2f>
 800c38c:	4603      	mov	r3, r0
 800c38e:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800c390:	edd7 7a03 	vldr	s15, [r7, #12]
 800c394:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c39c:	db02      	blt.n	800c3a4 <_normalizeAngle+0x44>
 800c39e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3a2:	e005      	b.n	800c3b0 <_normalizeAngle+0x50>
 800c3a4:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3a8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800c3c8 <_normalizeAngle+0x68>
 800c3ac:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800c3b0:	eeb0 0a67 	vmov.f32	s0, s15
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	f3af 8000 	nop.w
 800c3c0:	60000000 	.word	0x60000000
 800c3c4:	401921fb 	.word	0x401921fb
 800c3c8:	40c90fdb 	.word	0x40c90fdb

0800c3cc <MT6701_GetRawData>:
#include "math_utils.h"

static unsigned int rotationCount, rotationCount_Last;

uint16_t MT6701_GetRawData(void)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800c3d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c3d6:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800c3d8:	23c8      	movs	r3, #200	@ 0xc8
 800c3da:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 800c3dc:	e006      	b.n	800c3ec <MT6701_GetRawData+0x20>
    {
        if (timeOut-- == 0)
 800c3de:	88fb      	ldrh	r3, [r7, #6]
 800c3e0:	1e5a      	subs	r2, r3, #1
 800c3e2:	80fa      	strh	r2, [r7, #6]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d101      	bne.n	800c3ec <MT6701_GetRawData+0x20>
        {
            //   FOC_log("SPI state error!\r\n");
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	e025      	b.n	800c438 <MT6701_GetRawData+0x6c>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 800c3ec:	4814      	ldr	r0, [pc, #80]	@ (800c440 <MT6701_GetRawData+0x74>)
 800c3ee:	f7fb ffe6 	bl	80083be <HAL_SPI_GetState>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d1f2      	bne.n	800c3de <MT6701_GetRawData+0x12>
        }
    }

    MT6701_CS_Enable;
 800c3f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c3fc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c400:	619a      	str	r2, [r3, #24]

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800c402:	1cba      	adds	r2, r7, #2
 800c404:	4639      	mov	r1, r7
 800c406:	f04f 33ff 	mov.w	r3, #4294967295
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	2301      	movs	r3, #1
 800c40e:	480c      	ldr	r0, [pc, #48]	@ (800c440 <MT6701_GetRawData+0x74>)
 800c410:	f7fb fdb3 	bl	8007f7a <HAL_SPI_TransmitReceive>
 800c414:	4603      	mov	r3, r0
 800c416:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800c418:	797b      	ldrb	r3, [r7, #5]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d005      	beq.n	800c42a <MT6701_GetRawData+0x5e>
    {
        MT6701_CS_Disable;
 800c41e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c422:	2210      	movs	r2, #16
 800c424:	619a      	str	r2, [r3, #24]
        //  FOC_log("MT6701 read data error!\r\n");
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800c426:	2300      	movs	r3, #0
 800c428:	e006      	b.n	800c438 <MT6701_GetRawData+0x6c>
    }

    MT6701_CS_Disable;
 800c42a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c42e:	2210      	movs	r2, #16
 800c430:	619a      	str	r2, [r3, #24]

    return rawData >> 2; // 取高14位的角度数据
 800c432:	887b      	ldrh	r3, [r7, #2]
 800c434:	089b      	lsrs	r3, r3, #2
 800c436:	b29b      	uxth	r3, r3
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3708      	adds	r7, #8
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}
 800c440:	200004a0 	.word	0x200004a0

0800c444 <MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float MT6701_GetRawAngle(void)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
    uint16_t rawData = MT6701_GetRawData();
 800c44a:	f7ff ffbf 	bl	800c3cc <MT6701_GetRawData>
 800c44e:	4603      	mov	r3, r0
 800c450:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800c452:	88fb      	ldrh	r3, [r7, #6]
 800c454:	ee07 3a90 	vmov	s15, r3
 800c458:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c45c:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800c478 <MT6701_GetRawAngle+0x34>
 800c460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c464:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800c47c <MT6701_GetRawAngle+0x38>
 800c468:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800c46c:	eeb0 0a67 	vmov.f32	s0, s15
 800c470:	3708      	adds	r7, #8
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	46800000 	.word	0x46800000
 800c47c:	40c90fdb 	.word	0x40c90fdb

0800c480 <delay>:
#include "time_utils.h"

__IO uint32_t m, tms, u, t0;

void delay(uint32_t _ms)
{
 800c480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c484:	b082      	sub	sp, #8
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800c48a:	f000 f83b 	bl	800c504 <micros>
 800c48e:	4602      	mov	r2, r0
 800c490:	460b      	mov	r3, r1
 800c492:	4b11      	ldr	r3, [pc, #68]	@ (800c4d8 <delay+0x58>)
 800c494:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800c496:	e000      	b.n	800c49a <delay+0x1a>
        __NOP();
 800c498:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800c49a:	f000 f833 	bl	800c504 <micros>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	490d      	ldr	r1, [pc, #52]	@ (800c4d8 <delay+0x58>)
 800c4a4:	6809      	ldr	r1, [r1, #0]
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	468a      	mov	sl, r1
 800c4aa:	4683      	mov	fp, r0
 800c4ac:	ebb2 040a 	subs.w	r4, r2, sl
 800c4b0:	eb63 050b 	sbc.w	r5, r3, fp
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c4ba:	fb02 f303 	mul.w	r3, r2, r3
 800c4be:	2200      	movs	r2, #0
 800c4c0:	4698      	mov	r8, r3
 800c4c2:	4691      	mov	r9, r2
 800c4c4:	4544      	cmp	r4, r8
 800c4c6:	eb75 0309 	sbcs.w	r3, r5, r9
 800c4ca:	d3e5      	bcc.n	800c498 <delay+0x18>
}
 800c4cc:	bf00      	nop
 800c4ce:	bf00      	nop
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4d8:	20000898 	.word	0x20000898

0800c4dc <LL_SYSTICK_IsActiveCounterFlag>:
    while (_us--)
        __NOP();
}

__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag()
{
 800c4dc:	b480      	push	{r7}
 800c4de:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800c4e0:	4b07      	ldr	r3, [pc, #28]	@ (800c500 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c4e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4ec:	bf0c      	ite	eq
 800c4ee:	2301      	moveq	r3, #1
 800c4f0:	2300      	movne	r3, #0
 800c4f2:	b2db      	uxtb	r3, r3
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop
 800c500:	e000e010 	.word	0xe000e010

0800c504 <micros>:

uint64_t micros()
{
 800c504:	b5b0      	push	{r4, r5, r7, lr}
 800c506:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800c508:	f7ff ffe8 	bl	800c4dc <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800c50c:	f7f6 f954 	bl	80027b8 <HAL_GetTick>
 800c510:	4603      	mov	r3, r0
 800c512:	4a1c      	ldr	r2, [pc, #112]	@ (800c584 <micros+0x80>)
 800c514:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800c516:	4b1c      	ldr	r3, [pc, #112]	@ (800c588 <micros+0x84>)
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	3301      	adds	r3, #1
 800c51c:	4a1b      	ldr	r2, [pc, #108]	@ (800c58c <micros+0x88>)
 800c51e:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800c520:	4b1a      	ldr	r3, [pc, #104]	@ (800c58c <micros+0x88>)
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	4b18      	ldr	r3, [pc, #96]	@ (800c588 <micros+0x84>)
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	1ad3      	subs	r3, r2, r3
 800c52a:	4a19      	ldr	r2, [pc, #100]	@ (800c590 <micros+0x8c>)
 800c52c:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800c52e:	f7ff ffd5 	bl	800c4dc <LL_SYSTICK_IsActiveCounterFlag>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d00b      	beq.n	800c550 <micros+0x4c>
    {
        m = HAL_GetTick();
 800c538:	f7f6 f93e 	bl	80027b8 <HAL_GetTick>
 800c53c:	4603      	mov	r3, r0
 800c53e:	4a11      	ldr	r2, [pc, #68]	@ (800c584 <micros+0x80>)
 800c540:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800c542:	4b12      	ldr	r3, [pc, #72]	@ (800c58c <micros+0x88>)
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	4b10      	ldr	r3, [pc, #64]	@ (800c588 <micros+0x84>)
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	1ad3      	subs	r3, r2, r3
 800c54c:	4a10      	ldr	r2, [pc, #64]	@ (800c590 <micros+0x8c>)
 800c54e:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800c550:	4b0c      	ldr	r3, [pc, #48]	@ (800c584 <micros+0x80>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c558:	fb03 f202 	mul.w	r2, r3, r2
 800c55c:	4b0c      	ldr	r3, [pc, #48]	@ (800c590 <micros+0x8c>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c564:	fb03 f101 	mul.w	r1, r3, r1
 800c568:	4b08      	ldr	r3, [pc, #32]	@ (800c58c <micros+0x88>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	fbb1 f3f3 	udiv	r3, r1, r3
 800c570:	4413      	add	r3, r2
 800c572:	2200      	movs	r2, #0
 800c574:	461c      	mov	r4, r3
 800c576:	4615      	mov	r5, r2
 800c578:	4622      	mov	r2, r4
 800c57a:	462b      	mov	r3, r5
}
 800c57c:	4610      	mov	r0, r2
 800c57e:	4619      	mov	r1, r3
 800c580:	bdb0      	pop	{r4, r5, r7, pc}
 800c582:	bf00      	nop
 800c584:	2000088c 	.word	0x2000088c
 800c588:	e000e010 	.word	0xe000e010
 800c58c:	20000890 	.word	0x20000890
 800c590:	20000894 	.word	0x20000894

0800c594 <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
static bool powerLost;
void userMain(void)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	af00      	add	r7, sp, #0
	// {
	// 	_5ms = 0;
	// 	keyScan();
	// }

	if (get100MsFlag())
 800c598:	f000 f948 	bl	800c82c <get100MsFlag>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d001      	beq.n	800c5a6 <userMain+0x12>
	{
		appRunning();
 800c5a2:	f7ff faab 	bl	800bafc <appRunning>
	}
#if SHOW_WAVE == 0
	if (get500MsFlag())
 800c5a6:	f000 f955 	bl	800c854 <get500MsFlag>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d001      	beq.n	800c5b4 <userMain+0x20>
	{
		printLog();
 800c5b0:	f7ff fb1a 	bl	800bbe8 <printLog>
	}
#endif
}
 800c5b4:	bf00      	nop
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <HAL_GPIO_EXTI_Callback>:
void setPowerLost()
{
	powerLost = 1;
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	4603      	mov	r3, r0
 800c5c0:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	if (Button3_Pin == GPIO_Pin)
 800c5c2:	88fb      	ldrh	r3, [r7, #6]
 800c5c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5c8:	d13a      	bne.n	800c640 <HAL_GPIO_EXTI_Callback+0x88>
	{
		Motor_state = ~Motor_state;
 800c5ca:	4b1f      	ldr	r3, [pc, #124]	@ (800c648 <HAL_GPIO_EXTI_Callback+0x90>)
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	43db      	mvns	r3, r3
 800c5d0:	b2da      	uxtb	r2, r3
 800c5d2:	4b1d      	ldr	r3, [pc, #116]	@ (800c648 <HAL_GPIO_EXTI_Callback+0x90>)
 800c5d4:	701a      	strb	r2, [r3, #0]
		if (0 == Motor_state)
 800c5d6:	4b1c      	ldr	r3, [pc, #112]	@ (800c648 <HAL_GPIO_EXTI_Callback+0x90>)
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d118      	bne.n	800c610 <HAL_GPIO_EXTI_Callback+0x58>
		{
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800c5de:	2100      	movs	r1, #0
 800c5e0:	481a      	ldr	r0, [pc, #104]	@ (800c64c <HAL_GPIO_EXTI_Callback+0x94>)
 800c5e2:	f7fc fa7b 	bl	8008adc <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800c5e6:	2104      	movs	r1, #4
 800c5e8:	4818      	ldr	r0, [pc, #96]	@ (800c64c <HAL_GPIO_EXTI_Callback+0x94>)
 800c5ea:	f7fc fa77 	bl	8008adc <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800c5ee:	2108      	movs	r1, #8
 800c5f0:	4816      	ldr	r0, [pc, #88]	@ (800c64c <HAL_GPIO_EXTI_Callback+0x94>)
 800c5f2:	f7fc fa73 	bl	8008adc <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800c5f6:	2100      	movs	r1, #0
 800c5f8:	4814      	ldr	r0, [pc, #80]	@ (800c64c <HAL_GPIO_EXTI_Callback+0x94>)
 800c5fa:	f7fd fd43 	bl	800a084 <HAL_TIMEx_PWMN_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800c5fe:	2104      	movs	r1, #4
 800c600:	4812      	ldr	r0, [pc, #72]	@ (800c64c <HAL_GPIO_EXTI_Callback+0x94>)
 800c602:	f7fd fd3f 	bl	800a084 <HAL_TIMEx_PWMN_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800c606:	2108      	movs	r1, #8
 800c608:	4810      	ldr	r0, [pc, #64]	@ (800c64c <HAL_GPIO_EXTI_Callback+0x94>)
 800c60a:	f7fd fd3b 	bl	800a084 <HAL_TIMEx_PWMN_Stop>
		}
	}
	/* NOTE: This function should not be modified, when the callback is needed,
			 the HAL_GPIO_EXTI_Callback could be implemented in the user file
	 */
}
 800c60e:	e017      	b.n	800c640 <HAL_GPIO_EXTI_Callback+0x88>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800c610:	2100      	movs	r1, #0
 800c612:	480e      	ldr	r0, [pc, #56]	@ (800c64c <HAL_GPIO_EXTI_Callback+0x94>)
 800c614:	f7fc f962 	bl	80088dc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800c618:	2104      	movs	r1, #4
 800c61a:	480c      	ldr	r0, [pc, #48]	@ (800c64c <HAL_GPIO_EXTI_Callback+0x94>)
 800c61c:	f7fc f95e 	bl	80088dc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800c620:	2108      	movs	r1, #8
 800c622:	480a      	ldr	r0, [pc, #40]	@ (800c64c <HAL_GPIO_EXTI_Callback+0x94>)
 800c624:	f7fc f95a 	bl	80088dc <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800c628:	2100      	movs	r1, #0
 800c62a:	4808      	ldr	r0, [pc, #32]	@ (800c64c <HAL_GPIO_EXTI_Callback+0x94>)
 800c62c:	f7fd fc76 	bl	8009f1c <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800c630:	2104      	movs	r1, #4
 800c632:	4806      	ldr	r0, [pc, #24]	@ (800c64c <HAL_GPIO_EXTI_Callback+0x94>)
 800c634:	f7fd fc72 	bl	8009f1c <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800c638:	2108      	movs	r1, #8
 800c63a:	4804      	ldr	r0, [pc, #16]	@ (800c64c <HAL_GPIO_EXTI_Callback+0x94>)
 800c63c:	f7fd fc6e 	bl	8009f1c <HAL_TIMEx_PWMN_Start>
}
 800c640:	bf00      	nop
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	2000089c 	.word	0x2000089c
 800c64c:	20000508 	.word	0x20000508

0800c650 <HAL_ADCEx_InjectedConvCpltCallback>:
	USART3->TDR = (uint8_t)ch;
	return ch;
}

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
	
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hadc);
	if (hadc == &hadc1)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a0a      	ldr	r2, [pc, #40]	@ (800c684 <HAL_ADCEx_InjectedConvCpltCallback+0x34>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d10d      	bne.n	800c67c <HAL_ADCEx_InjectedConvCpltCallback+0x2c>
	{
		foc(&motor1, hadc1.Instance->JDR1, hadc2.Instance->JDR1);
 800c660:	4b08      	ldr	r3, [pc, #32]	@ (800c684 <HAL_ADCEx_InjectedConvCpltCallback+0x34>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800c668:	4b07      	ldr	r3, [pc, #28]	@ (800c688 <HAL_ADCEx_InjectedConvCpltCallback+0x38>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c670:	461a      	mov	r2, r3
 800c672:	4806      	ldr	r0, [pc, #24]	@ (800c68c <HAL_ADCEx_InjectedConvCpltCallback+0x3c>)
 800c674:	f7ff fd1c 	bl	800c0b0 <foc>

		dealPer100us();
 800c678:	f000 f81c 	bl	800c6b4 <dealPer100us>
	}

	/* NOTE : This function should not be modified. When the callback is needed,
			  function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
	*/
}
 800c67c:	bf00      	nop
 800c67e:	3708      	adds	r7, #8
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	20000274 	.word	0x20000274
 800c688:	200002e0 	.word	0x200002e0
 800c68c:	2000079c 	.word	0x2000079c

0800c690 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
	// }

	/* NOTE : This function should not be modified, when the callback is needed,
			  the HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 800c698:	bf00      	nop
 800c69a:	370c      	adds	r7, #12
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <FDCAN_Config>:

void FDCAN_Config(void)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	af00      	add	r7, sp, #0
	// TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	// TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	// TxHeader.MessageMarker = 0x52;

	// HAL_FDCAN_Start(&hfdcan1);
}
 800c6a8:	bf00      	nop
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
	...

0800c6b4 <dealPer100us>:
static uchar withoutZeroCnt, powerOnCnt;

static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag;

void dealPer100us()
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800c6b8:	4b08      	ldr	r3, [pc, #32]	@ (800c6dc <dealPer100us+0x28>)
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	4b06      	ldr	r3, [pc, #24]	@ (800c6dc <dealPer100us+0x28>)
 800c6c2:	701a      	strb	r2, [r3, #0]
 800c6c4:	4b05      	ldr	r3, [pc, #20]	@ (800c6dc <dealPer100us+0x28>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	2b09      	cmp	r3, #9
 800c6ca:	d904      	bls.n	800c6d6 <dealPer100us+0x22>
    {
        cnt = 0;
 800c6cc:	4b03      	ldr	r3, [pc, #12]	@ (800c6dc <dealPer100us+0x28>)
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800c6d2:	f000 f805 	bl	800c6e0 <dealPerMs>
    }

#if ZERO_POLL
    zeroPolling();
#endif
}
 800c6d6:	bf00      	nop
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	200008e0 	.word	0x200008e0

0800c6e0 <dealPerMs>:

// 定时器中断调用
 void dealPerMs()
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt;
    if (++_5msCnt >= 5)
 800c6e4:	4b40      	ldr	r3, [pc, #256]	@ (800c7e8 <dealPerMs+0x108>)
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	4b3e      	ldr	r3, [pc, #248]	@ (800c7e8 <dealPerMs+0x108>)
 800c6ee:	701a      	strb	r2, [r3, #0]
 800c6f0:	4b3d      	ldr	r3, [pc, #244]	@ (800c7e8 <dealPerMs+0x108>)
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	2b04      	cmp	r3, #4
 800c6f6:	d905      	bls.n	800c704 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800c6f8:	4b3b      	ldr	r3, [pc, #236]	@ (800c7e8 <dealPerMs+0x108>)
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800c6fe:	4b3b      	ldr	r3, [pc, #236]	@ (800c7ec <dealPerMs+0x10c>)
 800c700:	2201      	movs	r2, #1
 800c702:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800c704:	4b3a      	ldr	r3, [pc, #232]	@ (800c7f0 <dealPerMs+0x110>)
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	3301      	adds	r3, #1
 800c70a:	b2da      	uxtb	r2, r3
 800c70c:	4b38      	ldr	r3, [pc, #224]	@ (800c7f0 <dealPerMs+0x110>)
 800c70e:	701a      	strb	r2, [r3, #0]
 800c710:	4b37      	ldr	r3, [pc, #220]	@ (800c7f0 <dealPerMs+0x110>)
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	2b09      	cmp	r3, #9
 800c716:	d905      	bls.n	800c724 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800c718:	4b35      	ldr	r3, [pc, #212]	@ (800c7f0 <dealPerMs+0x110>)
 800c71a:	2200      	movs	r2, #0
 800c71c:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800c71e:	4b35      	ldr	r3, [pc, #212]	@ (800c7f4 <dealPerMs+0x114>)
 800c720:	2201      	movs	r2, #1
 800c722:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800c724:	4b34      	ldr	r3, [pc, #208]	@ (800c7f8 <dealPerMs+0x118>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	3301      	adds	r3, #1
 800c72a:	b2da      	uxtb	r2, r3
 800c72c:	4b32      	ldr	r3, [pc, #200]	@ (800c7f8 <dealPerMs+0x118>)
 800c72e:	701a      	strb	r2, [r3, #0]
 800c730:	4b31      	ldr	r3, [pc, #196]	@ (800c7f8 <dealPerMs+0x118>)
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	2b13      	cmp	r3, #19
 800c736:	d905      	bls.n	800c744 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800c738:	4b2f      	ldr	r3, [pc, #188]	@ (800c7f8 <dealPerMs+0x118>)
 800c73a:	2200      	movs	r2, #0
 800c73c:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800c73e:	4b2f      	ldr	r3, [pc, #188]	@ (800c7fc <dealPerMs+0x11c>)
 800c740:	2201      	movs	r2, #1
 800c742:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800c744:	4b2e      	ldr	r3, [pc, #184]	@ (800c800 <dealPerMs+0x120>)
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	3301      	adds	r3, #1
 800c74a:	b2da      	uxtb	r2, r3
 800c74c:	4b2c      	ldr	r3, [pc, #176]	@ (800c800 <dealPerMs+0x120>)
 800c74e:	701a      	strb	r2, [r3, #0]
 800c750:	4b2b      	ldr	r3, [pc, #172]	@ (800c800 <dealPerMs+0x120>)
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	2b1d      	cmp	r3, #29
 800c756:	d905      	bls.n	800c764 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800c758:	4b29      	ldr	r3, [pc, #164]	@ (800c800 <dealPerMs+0x120>)
 800c75a:	2200      	movs	r2, #0
 800c75c:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800c75e:	4b29      	ldr	r3, [pc, #164]	@ (800c804 <dealPerMs+0x124>)
 800c760:	2201      	movs	r2, #1
 800c762:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800c764:	4b28      	ldr	r3, [pc, #160]	@ (800c808 <dealPerMs+0x128>)
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	3301      	adds	r3, #1
 800c76a:	b2da      	uxtb	r2, r3
 800c76c:	4b26      	ldr	r3, [pc, #152]	@ (800c808 <dealPerMs+0x128>)
 800c76e:	701a      	strb	r2, [r3, #0]
 800c770:	4b25      	ldr	r3, [pc, #148]	@ (800c808 <dealPerMs+0x128>)
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	2b63      	cmp	r3, #99	@ 0x63
 800c776:	d905      	bls.n	800c784 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800c778:	4b23      	ldr	r3, [pc, #140]	@ (800c808 <dealPerMs+0x128>)
 800c77a:	2200      	movs	r2, #0
 800c77c:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800c77e:	4b23      	ldr	r3, [pc, #140]	@ (800c80c <dealPerMs+0x12c>)
 800c780:	2201      	movs	r2, #1
 800c782:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800c784:	4b22      	ldr	r3, [pc, #136]	@ (800c810 <dealPerMs+0x130>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	3301      	adds	r3, #1
 800c78a:	4a21      	ldr	r2, [pc, #132]	@ (800c810 <dealPerMs+0x130>)
 800c78c:	6013      	str	r3, [r2, #0]
 800c78e:	4b20      	ldr	r3, [pc, #128]	@ (800c810 <dealPerMs+0x130>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800c796:	d305      	bcc.n	800c7a4 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800c798:	4b1d      	ldr	r3, [pc, #116]	@ (800c810 <dealPerMs+0x130>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800c79e:	4b1d      	ldr	r3, [pc, #116]	@ (800c814 <dealPerMs+0x134>)
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800c7a4:	4b1c      	ldr	r3, [pc, #112]	@ (800c818 <dealPerMs+0x138>)
 800c7a6:	2232      	movs	r2, #50	@ 0x32
 800c7a8:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800c7aa:	4b1c      	ldr	r3, [pc, #112]	@ (800c81c <dealPerMs+0x13c>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	4a1a      	ldr	r2, [pc, #104]	@ (800c81c <dealPerMs+0x13c>)
 800c7b2:	6013      	str	r3, [r2, #0]
 800c7b4:	4b19      	ldr	r3, [pc, #100]	@ (800c81c <dealPerMs+0x13c>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c7bc:	d305      	bcc.n	800c7ca <dealPerMs+0xea>
    {
        _1msCnt = 0;
 800c7be:	4b17      	ldr	r3, [pc, #92]	@ (800c81c <dealPerMs+0x13c>)
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800c7c4:	4b16      	ldr	r3, [pc, #88]	@ (800c820 <dealPerMs+0x140>)
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800c7ca:	4b16      	ldr	r3, [pc, #88]	@ (800c824 <dealPerMs+0x144>)
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	701a      	strb	r2, [r3, #0]
        memorize();
        // beepOnce();
    }
#else
    if (withoutZeroCnt < ZERO_ERR_TIME)
        withoutZeroCnt++;
 800c7d0:	4b15      	ldr	r3, [pc, #84]	@ (800c828 <dealPerMs+0x148>)
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	b2da      	uxtb	r2, r3
 800c7d8:	4b13      	ldr	r3, [pc, #76]	@ (800c828 <dealPerMs+0x148>)
 800c7da:	701a      	strb	r2, [r3, #0]
    //             }
    //         }
    //         //	else
    //     }
    // #endif
}
 800c7dc:	bf00      	nop
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	200008e1 	.word	0x200008e1
 800c7ec:	200008da 	.word	0x200008da
 800c7f0:	200008e2 	.word	0x200008e2
 800c7f4:	200008db 	.word	0x200008db
 800c7f8:	200008e3 	.word	0x200008e3
 800c7fc:	200008dc 	.word	0x200008dc
 800c800:	200008e4 	.word	0x200008e4
 800c804:	200008dd 	.word	0x200008dd
 800c808:	200008e5 	.word	0x200008e5
 800c80c:	200008de 	.word	0x200008de
 800c810:	200008e8 	.word	0x200008e8
 800c814:	200008df 	.word	0x200008df
 800c818:	200008d8 	.word	0x200008d8
 800c81c:	200008d4 	.word	0x200008d4
 800c820:	200008d0 	.word	0x200008d0
 800c824:	200008d1 	.word	0x200008d1
 800c828:	200008d9 	.word	0x200008d9

0800c82c <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800c82c:	b480      	push	{r7}
 800c82e:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800c830:	4b07      	ldr	r3, [pc, #28]	@ (800c850 <get100MsFlag+0x24>)
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d004      	beq.n	800c842 <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800c838:	4b05      	ldr	r3, [pc, #20]	@ (800c850 <get100MsFlag+0x24>)
 800c83a:	2200      	movs	r2, #0
 800c83c:	701a      	strb	r2, [r3, #0]
        return 1;
 800c83e:	2301      	movs	r3, #1
 800c840:	e000      	b.n	800c844 <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800c842:	2300      	movs	r3, #0
    }
}
 800c844:	4618      	mov	r0, r3
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	200008de 	.word	0x200008de

0800c854 <get500MsFlag>:

bool get500MsFlag()
{
 800c854:	b480      	push	{r7}
 800c856:	af00      	add	r7, sp, #0
    if (_500msFlag)
 800c858:	4b07      	ldr	r3, [pc, #28]	@ (800c878 <get500MsFlag+0x24>)
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d004      	beq.n	800c86a <get500MsFlag+0x16>
    {
        _500msFlag = 0;
 800c860:	4b05      	ldr	r3, [pc, #20]	@ (800c878 <get500MsFlag+0x24>)
 800c862:	2200      	movs	r2, #0
 800c864:	701a      	strb	r2, [r3, #0]
        return 1;
 800c866:	2301      	movs	r3, #1
 800c868:	e000      	b.n	800c86c <get500MsFlag+0x18>
    }
    else
    {
        return 0;
 800c86a:	2300      	movs	r3, #0
    }
 800c86c:	4618      	mov	r0, r3
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr
 800c876:	bf00      	nop
 800c878:	200008df 	.word	0x200008df

0800c87c <setPhaseVoltage>:
    motor->startPwm(d1, d2, d3);
}

// Park逆变换*SVPWM
void setPhaseVoltage(FocMotor *motor, float Uq, float Ud, float angle_el)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b092      	sub	sp, #72	@ 0x48
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	ed87 0a02 	vstr	s0, [r7, #8]
 800c888:	edc7 0a01 	vstr	s1, [r7, #4]
 800c88c:	ed87 1a00 	vstr	s2, [r7]

    Uq = _constrain(Uq, -UqMAX, UqMAX);
 800c890:	edd7 7a02 	vldr	s15, [r7, #8]
 800c894:	ed9f 7acb 	vldr	s14, [pc, #812]	@ 800cbc4 <setPhaseVoltage+0x348>
 800c898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8a0:	d501      	bpl.n	800c8a6 <setPhaseVoltage+0x2a>
 800c8a2:	4bc9      	ldr	r3, [pc, #804]	@ (800cbc8 <setPhaseVoltage+0x34c>)
 800c8a4:	e00b      	b.n	800c8be <setPhaseVoltage+0x42>
 800c8a6:	edd7 7a02 	vldr	s15, [r7, #8]
 800c8aa:	ed9f 7ac8 	vldr	s14, [pc, #800]	@ 800cbcc <setPhaseVoltage+0x350>
 800c8ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8b6:	dd01      	ble.n	800c8bc <setPhaseVoltage+0x40>
 800c8b8:	4bc5      	ldr	r3, [pc, #788]	@ (800cbd0 <setPhaseVoltage+0x354>)
 800c8ba:	e000      	b.n	800c8be <setPhaseVoltage+0x42>
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	60bb      	str	r3, [r7, #8]

    float ct;
    float st;
    _sincos(angle_el, &st, &ct);
 800c8c0:	f107 0214 	add.w	r2, r7, #20
 800c8c4:	f107 0310 	add.w	r3, r7, #16
 800c8c8:	4611      	mov	r1, r2
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	ed97 0a00 	vldr	s0, [r7]
 800c8d0:	f7ff fd26 	bl	800c320 <_sincos>
    // Park逆变换
    float Ualpha = Ud * ct - Uq * st;
 800c8d4:	ed97 7a05 	vldr	s14, [r7, #20]
 800c8d8:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8e0:	edd7 6a04 	vldr	s13, [r7, #16]
 800c8e4:	edd7 7a02 	vldr	s15, [r7, #8]
 800c8e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8f0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float Ubeta = Uq * ct + Ud * st;
 800c8f4:	ed97 7a05 	vldr	s14, [r7, #20]
 800c8f8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c8fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c900:	edd7 6a04 	vldr	s13, [r7, #16]
 800c904:	edd7 7a01 	vldr	s15, [r7, #4]
 800c908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c90c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c910:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    uint32_t d1, d2, d3;
    float tFirst = 0, tSecond = 0;
 800c914:	f04f 0300 	mov.w	r3, #0
 800c918:	633b      	str	r3, [r7, #48]	@ 0x30
 800c91a:	f04f 0300 	mov.w	r3, #0
 800c91e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float K = _SQRT3 * HALP_PWM_PERIOD / U_DC;
 800c920:	4bac      	ldr	r3, [pc, #688]	@ (800cbd4 <setPhaseVoltage+0x358>)
 800c922:	62bb      	str	r3, [r7, #40]	@ 0x28
    float X = K * Ubeta;
 800c924:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c928:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800c92c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c930:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float Y = K * (_SQRT3 * Ualpha / 2.0f - Ubeta / 2.0f);
 800c934:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800c938:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 800cbd8 <setPhaseVoltage+0x35c>
 800c93c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c940:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c944:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c948:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800c94c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800c950:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c954:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c958:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c95c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c960:	edc7 7a08 	vstr	s15, [r7, #32]
    float Z = K * (-_SQRT3 * Ualpha / 2.0f - Ubeta / 2.0f);
 800c964:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800c968:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 800cbdc <setPhaseVoltage+0x360>
 800c96c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c970:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c974:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c978:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800c97c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800c980:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c984:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c988:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c98c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c990:	edc7 7a07 	vstr	s15, [r7, #28]

    uint8_t sector = sectorRemap[(X > 0.0f) + ((Y > 0.0f) << 1) + ((Z > 0.0f) << 2)]; // sector = A + 2B + 4C
 800c994:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a0:	bfcc      	ite	gt
 800c9a2:	2301      	movgt	r3, #1
 800c9a4:	2300      	movle	r3, #0
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	edd7 7a08 	vldr	s15, [r7, #32]
 800c9ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9b6:	dd01      	ble.n	800c9bc <setPhaseVoltage+0x140>
 800c9b8:	2302      	movs	r3, #2
 800c9ba:	e000      	b.n	800c9be <setPhaseVoltage+0x142>
 800c9bc:	2300      	movs	r3, #0
 800c9be:	4413      	add	r3, r2
 800c9c0:	edd7 7a07 	vldr	s15, [r7, #28]
 800c9c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9cc:	dd01      	ble.n	800c9d2 <setPhaseVoltage+0x156>
 800c9ce:	2204      	movs	r2, #4
 800c9d0:	e000      	b.n	800c9d4 <setPhaseVoltage+0x158>
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	4413      	add	r3, r2
 800c9d6:	4a82      	ldr	r2, [pc, #520]	@ (800cbe0 <setPhaseVoltage+0x364>)
 800c9d8:	5cd3      	ldrb	r3, [r2, r3]
 800c9da:	76fb      	strb	r3, [r7, #27]

    switch (sector)
 800c9dc:	7efb      	ldrb	r3, [r7, #27]
 800c9de:	3b01      	subs	r3, #1
 800c9e0:	2b05      	cmp	r3, #5
 800c9e2:	f200 8171 	bhi.w	800ccc8 <setPhaseVoltage+0x44c>
 800c9e6:	a201      	add	r2, pc, #4	@ (adr r2, 800c9ec <setPhaseVoltage+0x170>)
 800c9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ec:	0800ca05 	.word	0x0800ca05
 800c9f0:	0800ca6d 	.word	0x0800ca6d
 800c9f4:	0800cae5 	.word	0x0800cae5
 800c9f8:	0800cb4d 	.word	0x0800cb4d
 800c9fc:	0800cbe9 	.word	0x0800cbe9
 800ca00:	0800cc51 	.word	0x0800cc51
    {
    case 1:
        tFirst = Y;
 800ca04:	6a3b      	ldr	r3, [r7, #32]
 800ca06:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = X;
 800ca08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d1 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800ca0c:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800cbe4 <setPhaseVoltage+0x368>
 800ca10:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800ca14:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ca18:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ca1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ca20:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ca24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ca28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca2c:	ee17 3a90 	vmov	r3, s15
 800ca30:	647b      	str	r3, [r7, #68]	@ 0x44
        d2 = d1 + tFirst;
 800ca32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca34:	ee07 3a90 	vmov	s15, r3
 800ca38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ca3c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800ca40:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca48:	ee17 3a90 	vmov	r3, s15
 800ca4c:	643b      	str	r3, [r7, #64]	@ 0x40
        d3 = d2 + tSecond;
 800ca4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca50:	ee07 3a90 	vmov	s15, r3
 800ca54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ca58:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ca5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca64:	ee17 3a90 	vmov	r3, s15
 800ca68:	63fb      	str	r3, [r7, #60]	@ 0x3c

        break;
 800ca6a:	e12d      	b.n	800ccc8 <setPhaseVoltage+0x44c>
    case 2:
        tFirst = -Y;
 800ca6c:	edd7 7a08 	vldr	s15, [r7, #32]
 800ca70:	eef1 7a67 	vneg.f32	s15, s15
 800ca74:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -Z;
 800ca78:	edd7 7a07 	vldr	s15, [r7, #28]
 800ca7c:	eef1 7a67 	vneg.f32	s15, s15
 800ca80:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d2 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800ca84:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 800cbe4 <setPhaseVoltage+0x368>
 800ca88:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800ca8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ca90:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ca94:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ca98:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ca9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800caa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caa4:	ee17 3a90 	vmov	r3, s15
 800caa8:	643b      	str	r3, [r7, #64]	@ 0x40
        d1 = d2 + tFirst;
 800caaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caac:	ee07 3a90 	vmov	s15, r3
 800cab0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cab4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800cab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cabc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cac0:	ee17 3a90 	vmov	r3, s15
 800cac4:	647b      	str	r3, [r7, #68]	@ 0x44
        d3 = d1 + tSecond;
 800cac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cac8:	ee07 3a90 	vmov	s15, r3
 800cacc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cad0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800cad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cadc:	ee17 3a90 	vmov	r3, s15
 800cae0:	63fb      	str	r3, [r7, #60]	@ 0x3c

        break;
 800cae2:	e0f1      	b.n	800ccc8 <setPhaseVoltage+0x44c>
    case 3:
        tFirst = X;
 800cae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae6:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = Z;
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d2 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800caec:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800cbe4 <setPhaseVoltage+0x368>
 800caf0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800caf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800caf8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800cafc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cb00:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800cb04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb0c:	ee17 3a90 	vmov	r3, s15
 800cb10:	643b      	str	r3, [r7, #64]	@ 0x40
        d3 = d2 + tFirst;
 800cb12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb14:	ee07 3a90 	vmov	s15, r3
 800cb18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cb1c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800cb20:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb28:	ee17 3a90 	vmov	r3, s15
 800cb2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d1 = d3 + tSecond;
 800cb2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb30:	ee07 3a90 	vmov	s15, r3
 800cb34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cb38:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800cb3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb44:	ee17 3a90 	vmov	r3, s15
 800cb48:	647b      	str	r3, [r7, #68]	@ 0x44

        break;
 800cb4a:	e0bd      	b.n	800ccc8 <setPhaseVoltage+0x44c>
    case 4:
        tFirst = -X;
 800cb4c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800cb50:	eef1 7a67 	vneg.f32	s15, s15
 800cb54:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -Y;
 800cb58:	edd7 7a08 	vldr	s15, [r7, #32]
 800cb5c:	eef1 7a67 	vneg.f32	s15, s15
 800cb60:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d3 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800cb64:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800cbe4 <setPhaseVoltage+0x368>
 800cb68:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800cb6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cb70:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800cb74:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cb78:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800cb7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb84:	ee17 3a90 	vmov	r3, s15
 800cb88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d2 = d3 + tFirst;
 800cb8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb8c:	ee07 3a90 	vmov	s15, r3
 800cb90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cb94:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800cb98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cba0:	ee17 3a90 	vmov	r3, s15
 800cba4:	643b      	str	r3, [r7, #64]	@ 0x40
        d1 = d2 + tSecond;
 800cba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cba8:	ee07 3a90 	vmov	s15, r3
 800cbac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cbb0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800cbb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cbb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbbc:	ee17 3a90 	vmov	r3, s15
 800cbc0:	647b      	str	r3, [r7, #68]	@ 0x44

        break;
 800cbc2:	e081      	b.n	800ccc8 <setPhaseVoltage+0x44c>
 800cbc4:	c0ddb3d7 	.word	0xc0ddb3d7
 800cbc8:	c0ddb3d7 	.word	0xc0ddb3d7
 800cbcc:	40ddb3d7 	.word	0x40ddb3d7
 800cbd0:	40ddb3d7 	.word	0x40ddb3d7
 800cbd4:	4490566b 	.word	0x4490566b
 800cbd8:	3fddb3d7 	.word	0x3fddb3d7
 800cbdc:	bfddb3d7 	.word	0xbfddb3d7
 800cbe0:	0801171c 	.word	0x0801171c
 800cbe4:	45fa0000 	.word	0x45fa0000

    case 5:
        tFirst = Z;
 800cbe8:	69fb      	ldr	r3, [r7, #28]
 800cbea:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = Y;
 800cbec:	6a3b      	ldr	r3, [r7, #32]
 800cbee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d3 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800cbf0:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 800cbe4 <setPhaseVoltage+0x368>
 800cbf4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800cbf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cbfc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800cc00:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cc04:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800cc08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc10:	ee17 3a90 	vmov	r3, s15
 800cc14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d1 = d3 + tFirst;
 800cc16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc18:	ee07 3a90 	vmov	s15, r3
 800cc1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cc20:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800cc24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc2c:	ee17 3a90 	vmov	r3, s15
 800cc30:	647b      	str	r3, [r7, #68]	@ 0x44
        d2 = d1 + tSecond;
 800cc32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc34:	ee07 3a90 	vmov	s15, r3
 800cc38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cc3c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800cc40:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc48:	ee17 3a90 	vmov	r3, s15
 800cc4c:	643b      	str	r3, [r7, #64]	@ 0x40

        break;
 800cc4e:	e03b      	b.n	800ccc8 <setPhaseVoltage+0x44c>

    case 6:
        tFirst = -Z;
 800cc50:	edd7 7a07 	vldr	s15, [r7, #28]
 800cc54:	eef1 7a67 	vneg.f32	s15, s15
 800cc58:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -X;
 800cc5c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800cc60:	eef1 7a67 	vneg.f32	s15, s15
 800cc64:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d1 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800cc68:	ed1f 7a22 	vldr	s14, [pc, #-136]	@ 800cbe4 <setPhaseVoltage+0x368>
 800cc6c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800cc70:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cc74:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800cc78:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cc7c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800cc80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc88:	ee17 3a90 	vmov	r3, s15
 800cc8c:	647b      	str	r3, [r7, #68]	@ 0x44
        d3 = d1 + tFirst;
 800cc8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc90:	ee07 3a90 	vmov	s15, r3
 800cc94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cc98:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800cc9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cca4:	ee17 3a90 	vmov	r3, s15
 800cca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d2 = d3 + tSecond;
 800ccaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccac:	ee07 3a90 	vmov	s15, r3
 800ccb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ccb4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ccb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ccbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccc0:	ee17 3a90 	vmov	r3, s15
 800ccc4:	643b      	str	r3, [r7, #64]	@ 0x40

        break;
 800ccc6:	bf00      	nop
    motor->d1 = d1;
    motor->d2 = d2;
    motor->d3 = d3;
#endif

    motor->updatePwm(d1, d2, d3);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ccce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ccd0:	b290      	uxth	r0, r2
 800ccd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ccd4:	b291      	uxth	r1, r2
 800ccd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ccd8:	b292      	uxth	r2, r2
 800ccda:	4798      	blx	r3
}
 800ccdc:	bf00      	nop
 800ccde:	3748      	adds	r7, #72	@ 0x48
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <__cvt>:
 800cce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cce8:	ec57 6b10 	vmov	r6, r7, d0
 800ccec:	2f00      	cmp	r7, #0
 800ccee:	460c      	mov	r4, r1
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	463b      	mov	r3, r7
 800ccf4:	bfbb      	ittet	lt
 800ccf6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ccfa:	461f      	movlt	r7, r3
 800ccfc:	2300      	movge	r3, #0
 800ccfe:	232d      	movlt	r3, #45	@ 0x2d
 800cd00:	700b      	strb	r3, [r1, #0]
 800cd02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cd08:	4691      	mov	r9, r2
 800cd0a:	f023 0820 	bic.w	r8, r3, #32
 800cd0e:	bfbc      	itt	lt
 800cd10:	4632      	movlt	r2, r6
 800cd12:	4616      	movlt	r6, r2
 800cd14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cd18:	d005      	beq.n	800cd26 <__cvt+0x42>
 800cd1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cd1e:	d100      	bne.n	800cd22 <__cvt+0x3e>
 800cd20:	3401      	adds	r4, #1
 800cd22:	2102      	movs	r1, #2
 800cd24:	e000      	b.n	800cd28 <__cvt+0x44>
 800cd26:	2103      	movs	r1, #3
 800cd28:	ab03      	add	r3, sp, #12
 800cd2a:	9301      	str	r3, [sp, #4]
 800cd2c:	ab02      	add	r3, sp, #8
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	ec47 6b10 	vmov	d0, r6, r7
 800cd34:	4653      	mov	r3, sl
 800cd36:	4622      	mov	r2, r4
 800cd38:	f001 f896 	bl	800de68 <_dtoa_r>
 800cd3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cd40:	4605      	mov	r5, r0
 800cd42:	d119      	bne.n	800cd78 <__cvt+0x94>
 800cd44:	f019 0f01 	tst.w	r9, #1
 800cd48:	d00e      	beq.n	800cd68 <__cvt+0x84>
 800cd4a:	eb00 0904 	add.w	r9, r0, r4
 800cd4e:	2200      	movs	r2, #0
 800cd50:	2300      	movs	r3, #0
 800cd52:	4630      	mov	r0, r6
 800cd54:	4639      	mov	r1, r7
 800cd56:	f7f3 fedf 	bl	8000b18 <__aeabi_dcmpeq>
 800cd5a:	b108      	cbz	r0, 800cd60 <__cvt+0x7c>
 800cd5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800cd60:	2230      	movs	r2, #48	@ 0x30
 800cd62:	9b03      	ldr	r3, [sp, #12]
 800cd64:	454b      	cmp	r3, r9
 800cd66:	d31e      	bcc.n	800cda6 <__cvt+0xc2>
 800cd68:	9b03      	ldr	r3, [sp, #12]
 800cd6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd6c:	1b5b      	subs	r3, r3, r5
 800cd6e:	4628      	mov	r0, r5
 800cd70:	6013      	str	r3, [r2, #0]
 800cd72:	b004      	add	sp, #16
 800cd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cd7c:	eb00 0904 	add.w	r9, r0, r4
 800cd80:	d1e5      	bne.n	800cd4e <__cvt+0x6a>
 800cd82:	7803      	ldrb	r3, [r0, #0]
 800cd84:	2b30      	cmp	r3, #48	@ 0x30
 800cd86:	d10a      	bne.n	800cd9e <__cvt+0xba>
 800cd88:	2200      	movs	r2, #0
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	4630      	mov	r0, r6
 800cd8e:	4639      	mov	r1, r7
 800cd90:	f7f3 fec2 	bl	8000b18 <__aeabi_dcmpeq>
 800cd94:	b918      	cbnz	r0, 800cd9e <__cvt+0xba>
 800cd96:	f1c4 0401 	rsb	r4, r4, #1
 800cd9a:	f8ca 4000 	str.w	r4, [sl]
 800cd9e:	f8da 3000 	ldr.w	r3, [sl]
 800cda2:	4499      	add	r9, r3
 800cda4:	e7d3      	b.n	800cd4e <__cvt+0x6a>
 800cda6:	1c59      	adds	r1, r3, #1
 800cda8:	9103      	str	r1, [sp, #12]
 800cdaa:	701a      	strb	r2, [r3, #0]
 800cdac:	e7d9      	b.n	800cd62 <__cvt+0x7e>

0800cdae <__exponent>:
 800cdae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdb0:	2900      	cmp	r1, #0
 800cdb2:	bfba      	itte	lt
 800cdb4:	4249      	neglt	r1, r1
 800cdb6:	232d      	movlt	r3, #45	@ 0x2d
 800cdb8:	232b      	movge	r3, #43	@ 0x2b
 800cdba:	2909      	cmp	r1, #9
 800cdbc:	7002      	strb	r2, [r0, #0]
 800cdbe:	7043      	strb	r3, [r0, #1]
 800cdc0:	dd29      	ble.n	800ce16 <__exponent+0x68>
 800cdc2:	f10d 0307 	add.w	r3, sp, #7
 800cdc6:	461d      	mov	r5, r3
 800cdc8:	270a      	movs	r7, #10
 800cdca:	461a      	mov	r2, r3
 800cdcc:	fbb1 f6f7 	udiv	r6, r1, r7
 800cdd0:	fb07 1416 	mls	r4, r7, r6, r1
 800cdd4:	3430      	adds	r4, #48	@ 0x30
 800cdd6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cdda:	460c      	mov	r4, r1
 800cddc:	2c63      	cmp	r4, #99	@ 0x63
 800cdde:	f103 33ff 	add.w	r3, r3, #4294967295
 800cde2:	4631      	mov	r1, r6
 800cde4:	dcf1      	bgt.n	800cdca <__exponent+0x1c>
 800cde6:	3130      	adds	r1, #48	@ 0x30
 800cde8:	1e94      	subs	r4, r2, #2
 800cdea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cdee:	1c41      	adds	r1, r0, #1
 800cdf0:	4623      	mov	r3, r4
 800cdf2:	42ab      	cmp	r3, r5
 800cdf4:	d30a      	bcc.n	800ce0c <__exponent+0x5e>
 800cdf6:	f10d 0309 	add.w	r3, sp, #9
 800cdfa:	1a9b      	subs	r3, r3, r2
 800cdfc:	42ac      	cmp	r4, r5
 800cdfe:	bf88      	it	hi
 800ce00:	2300      	movhi	r3, #0
 800ce02:	3302      	adds	r3, #2
 800ce04:	4403      	add	r3, r0
 800ce06:	1a18      	subs	r0, r3, r0
 800ce08:	b003      	add	sp, #12
 800ce0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ce10:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ce14:	e7ed      	b.n	800cdf2 <__exponent+0x44>
 800ce16:	2330      	movs	r3, #48	@ 0x30
 800ce18:	3130      	adds	r1, #48	@ 0x30
 800ce1a:	7083      	strb	r3, [r0, #2]
 800ce1c:	70c1      	strb	r1, [r0, #3]
 800ce1e:	1d03      	adds	r3, r0, #4
 800ce20:	e7f1      	b.n	800ce06 <__exponent+0x58>
	...

0800ce24 <_printf_float>:
 800ce24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce28:	b08d      	sub	sp, #52	@ 0x34
 800ce2a:	460c      	mov	r4, r1
 800ce2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ce30:	4616      	mov	r6, r2
 800ce32:	461f      	mov	r7, r3
 800ce34:	4605      	mov	r5, r0
 800ce36:	f000 ff0f 	bl	800dc58 <_localeconv_r>
 800ce3a:	6803      	ldr	r3, [r0, #0]
 800ce3c:	9304      	str	r3, [sp, #16]
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7f3 fa3e 	bl	80002c0 <strlen>
 800ce44:	2300      	movs	r3, #0
 800ce46:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce48:	f8d8 3000 	ldr.w	r3, [r8]
 800ce4c:	9005      	str	r0, [sp, #20]
 800ce4e:	3307      	adds	r3, #7
 800ce50:	f023 0307 	bic.w	r3, r3, #7
 800ce54:	f103 0208 	add.w	r2, r3, #8
 800ce58:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ce5c:	f8d4 b000 	ldr.w	fp, [r4]
 800ce60:	f8c8 2000 	str.w	r2, [r8]
 800ce64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ce6c:	9307      	str	r3, [sp, #28]
 800ce6e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ce72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ce76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce7a:	4b9c      	ldr	r3, [pc, #624]	@ (800d0ec <_printf_float+0x2c8>)
 800ce7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce80:	f7f3 fe7c 	bl	8000b7c <__aeabi_dcmpun>
 800ce84:	bb70      	cbnz	r0, 800cee4 <_printf_float+0xc0>
 800ce86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce8a:	4b98      	ldr	r3, [pc, #608]	@ (800d0ec <_printf_float+0x2c8>)
 800ce8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce90:	f7f3 fe56 	bl	8000b40 <__aeabi_dcmple>
 800ce94:	bb30      	cbnz	r0, 800cee4 <_printf_float+0xc0>
 800ce96:	2200      	movs	r2, #0
 800ce98:	2300      	movs	r3, #0
 800ce9a:	4640      	mov	r0, r8
 800ce9c:	4649      	mov	r1, r9
 800ce9e:	f7f3 fe45 	bl	8000b2c <__aeabi_dcmplt>
 800cea2:	b110      	cbz	r0, 800ceaa <_printf_float+0x86>
 800cea4:	232d      	movs	r3, #45	@ 0x2d
 800cea6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ceaa:	4a91      	ldr	r2, [pc, #580]	@ (800d0f0 <_printf_float+0x2cc>)
 800ceac:	4b91      	ldr	r3, [pc, #580]	@ (800d0f4 <_printf_float+0x2d0>)
 800ceae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ceb2:	bf94      	ite	ls
 800ceb4:	4690      	movls	r8, r2
 800ceb6:	4698      	movhi	r8, r3
 800ceb8:	2303      	movs	r3, #3
 800ceba:	6123      	str	r3, [r4, #16]
 800cebc:	f02b 0304 	bic.w	r3, fp, #4
 800cec0:	6023      	str	r3, [r4, #0]
 800cec2:	f04f 0900 	mov.w	r9, #0
 800cec6:	9700      	str	r7, [sp, #0]
 800cec8:	4633      	mov	r3, r6
 800ceca:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cecc:	4621      	mov	r1, r4
 800cece:	4628      	mov	r0, r5
 800ced0:	f000 f9d2 	bl	800d278 <_printf_common>
 800ced4:	3001      	adds	r0, #1
 800ced6:	f040 808d 	bne.w	800cff4 <_printf_float+0x1d0>
 800ceda:	f04f 30ff 	mov.w	r0, #4294967295
 800cede:	b00d      	add	sp, #52	@ 0x34
 800cee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee4:	4642      	mov	r2, r8
 800cee6:	464b      	mov	r3, r9
 800cee8:	4640      	mov	r0, r8
 800ceea:	4649      	mov	r1, r9
 800ceec:	f7f3 fe46 	bl	8000b7c <__aeabi_dcmpun>
 800cef0:	b140      	cbz	r0, 800cf04 <_printf_float+0xe0>
 800cef2:	464b      	mov	r3, r9
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	bfbc      	itt	lt
 800cef8:	232d      	movlt	r3, #45	@ 0x2d
 800cefa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cefe:	4a7e      	ldr	r2, [pc, #504]	@ (800d0f8 <_printf_float+0x2d4>)
 800cf00:	4b7e      	ldr	r3, [pc, #504]	@ (800d0fc <_printf_float+0x2d8>)
 800cf02:	e7d4      	b.n	800ceae <_printf_float+0x8a>
 800cf04:	6863      	ldr	r3, [r4, #4]
 800cf06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cf0a:	9206      	str	r2, [sp, #24]
 800cf0c:	1c5a      	adds	r2, r3, #1
 800cf0e:	d13b      	bne.n	800cf88 <_printf_float+0x164>
 800cf10:	2306      	movs	r3, #6
 800cf12:	6063      	str	r3, [r4, #4]
 800cf14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cf18:	2300      	movs	r3, #0
 800cf1a:	6022      	str	r2, [r4, #0]
 800cf1c:	9303      	str	r3, [sp, #12]
 800cf1e:	ab0a      	add	r3, sp, #40	@ 0x28
 800cf20:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cf24:	ab09      	add	r3, sp, #36	@ 0x24
 800cf26:	9300      	str	r3, [sp, #0]
 800cf28:	6861      	ldr	r1, [r4, #4]
 800cf2a:	ec49 8b10 	vmov	d0, r8, r9
 800cf2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cf32:	4628      	mov	r0, r5
 800cf34:	f7ff fed6 	bl	800cce4 <__cvt>
 800cf38:	9b06      	ldr	r3, [sp, #24]
 800cf3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf3c:	2b47      	cmp	r3, #71	@ 0x47
 800cf3e:	4680      	mov	r8, r0
 800cf40:	d129      	bne.n	800cf96 <_printf_float+0x172>
 800cf42:	1cc8      	adds	r0, r1, #3
 800cf44:	db02      	blt.n	800cf4c <_printf_float+0x128>
 800cf46:	6863      	ldr	r3, [r4, #4]
 800cf48:	4299      	cmp	r1, r3
 800cf4a:	dd41      	ble.n	800cfd0 <_printf_float+0x1ac>
 800cf4c:	f1aa 0a02 	sub.w	sl, sl, #2
 800cf50:	fa5f fa8a 	uxtb.w	sl, sl
 800cf54:	3901      	subs	r1, #1
 800cf56:	4652      	mov	r2, sl
 800cf58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cf5c:	9109      	str	r1, [sp, #36]	@ 0x24
 800cf5e:	f7ff ff26 	bl	800cdae <__exponent>
 800cf62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf64:	1813      	adds	r3, r2, r0
 800cf66:	2a01      	cmp	r2, #1
 800cf68:	4681      	mov	r9, r0
 800cf6a:	6123      	str	r3, [r4, #16]
 800cf6c:	dc02      	bgt.n	800cf74 <_printf_float+0x150>
 800cf6e:	6822      	ldr	r2, [r4, #0]
 800cf70:	07d2      	lsls	r2, r2, #31
 800cf72:	d501      	bpl.n	800cf78 <_printf_float+0x154>
 800cf74:	3301      	adds	r3, #1
 800cf76:	6123      	str	r3, [r4, #16]
 800cf78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d0a2      	beq.n	800cec6 <_printf_float+0xa2>
 800cf80:	232d      	movs	r3, #45	@ 0x2d
 800cf82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf86:	e79e      	b.n	800cec6 <_printf_float+0xa2>
 800cf88:	9a06      	ldr	r2, [sp, #24]
 800cf8a:	2a47      	cmp	r2, #71	@ 0x47
 800cf8c:	d1c2      	bne.n	800cf14 <_printf_float+0xf0>
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d1c0      	bne.n	800cf14 <_printf_float+0xf0>
 800cf92:	2301      	movs	r3, #1
 800cf94:	e7bd      	b.n	800cf12 <_printf_float+0xee>
 800cf96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cf9a:	d9db      	bls.n	800cf54 <_printf_float+0x130>
 800cf9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cfa0:	d118      	bne.n	800cfd4 <_printf_float+0x1b0>
 800cfa2:	2900      	cmp	r1, #0
 800cfa4:	6863      	ldr	r3, [r4, #4]
 800cfa6:	dd0b      	ble.n	800cfc0 <_printf_float+0x19c>
 800cfa8:	6121      	str	r1, [r4, #16]
 800cfaa:	b913      	cbnz	r3, 800cfb2 <_printf_float+0x18e>
 800cfac:	6822      	ldr	r2, [r4, #0]
 800cfae:	07d0      	lsls	r0, r2, #31
 800cfb0:	d502      	bpl.n	800cfb8 <_printf_float+0x194>
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	440b      	add	r3, r1
 800cfb6:	6123      	str	r3, [r4, #16]
 800cfb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cfba:	f04f 0900 	mov.w	r9, #0
 800cfbe:	e7db      	b.n	800cf78 <_printf_float+0x154>
 800cfc0:	b913      	cbnz	r3, 800cfc8 <_printf_float+0x1a4>
 800cfc2:	6822      	ldr	r2, [r4, #0]
 800cfc4:	07d2      	lsls	r2, r2, #31
 800cfc6:	d501      	bpl.n	800cfcc <_printf_float+0x1a8>
 800cfc8:	3302      	adds	r3, #2
 800cfca:	e7f4      	b.n	800cfb6 <_printf_float+0x192>
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e7f2      	b.n	800cfb6 <_printf_float+0x192>
 800cfd0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cfd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfd6:	4299      	cmp	r1, r3
 800cfd8:	db05      	blt.n	800cfe6 <_printf_float+0x1c2>
 800cfda:	6823      	ldr	r3, [r4, #0]
 800cfdc:	6121      	str	r1, [r4, #16]
 800cfde:	07d8      	lsls	r0, r3, #31
 800cfe0:	d5ea      	bpl.n	800cfb8 <_printf_float+0x194>
 800cfe2:	1c4b      	adds	r3, r1, #1
 800cfe4:	e7e7      	b.n	800cfb6 <_printf_float+0x192>
 800cfe6:	2900      	cmp	r1, #0
 800cfe8:	bfd4      	ite	le
 800cfea:	f1c1 0202 	rsble	r2, r1, #2
 800cfee:	2201      	movgt	r2, #1
 800cff0:	4413      	add	r3, r2
 800cff2:	e7e0      	b.n	800cfb6 <_printf_float+0x192>
 800cff4:	6823      	ldr	r3, [r4, #0]
 800cff6:	055a      	lsls	r2, r3, #21
 800cff8:	d407      	bmi.n	800d00a <_printf_float+0x1e6>
 800cffa:	6923      	ldr	r3, [r4, #16]
 800cffc:	4642      	mov	r2, r8
 800cffe:	4631      	mov	r1, r6
 800d000:	4628      	mov	r0, r5
 800d002:	47b8      	blx	r7
 800d004:	3001      	adds	r0, #1
 800d006:	d12b      	bne.n	800d060 <_printf_float+0x23c>
 800d008:	e767      	b.n	800ceda <_printf_float+0xb6>
 800d00a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d00e:	f240 80dd 	bls.w	800d1cc <_printf_float+0x3a8>
 800d012:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d016:	2200      	movs	r2, #0
 800d018:	2300      	movs	r3, #0
 800d01a:	f7f3 fd7d 	bl	8000b18 <__aeabi_dcmpeq>
 800d01e:	2800      	cmp	r0, #0
 800d020:	d033      	beq.n	800d08a <_printf_float+0x266>
 800d022:	4a37      	ldr	r2, [pc, #220]	@ (800d100 <_printf_float+0x2dc>)
 800d024:	2301      	movs	r3, #1
 800d026:	4631      	mov	r1, r6
 800d028:	4628      	mov	r0, r5
 800d02a:	47b8      	blx	r7
 800d02c:	3001      	adds	r0, #1
 800d02e:	f43f af54 	beq.w	800ceda <_printf_float+0xb6>
 800d032:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d036:	4543      	cmp	r3, r8
 800d038:	db02      	blt.n	800d040 <_printf_float+0x21c>
 800d03a:	6823      	ldr	r3, [r4, #0]
 800d03c:	07d8      	lsls	r0, r3, #31
 800d03e:	d50f      	bpl.n	800d060 <_printf_float+0x23c>
 800d040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d044:	4631      	mov	r1, r6
 800d046:	4628      	mov	r0, r5
 800d048:	47b8      	blx	r7
 800d04a:	3001      	adds	r0, #1
 800d04c:	f43f af45 	beq.w	800ceda <_printf_float+0xb6>
 800d050:	f04f 0900 	mov.w	r9, #0
 800d054:	f108 38ff 	add.w	r8, r8, #4294967295
 800d058:	f104 0a1a 	add.w	sl, r4, #26
 800d05c:	45c8      	cmp	r8, r9
 800d05e:	dc09      	bgt.n	800d074 <_printf_float+0x250>
 800d060:	6823      	ldr	r3, [r4, #0]
 800d062:	079b      	lsls	r3, r3, #30
 800d064:	f100 8103 	bmi.w	800d26e <_printf_float+0x44a>
 800d068:	68e0      	ldr	r0, [r4, #12]
 800d06a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d06c:	4298      	cmp	r0, r3
 800d06e:	bfb8      	it	lt
 800d070:	4618      	movlt	r0, r3
 800d072:	e734      	b.n	800cede <_printf_float+0xba>
 800d074:	2301      	movs	r3, #1
 800d076:	4652      	mov	r2, sl
 800d078:	4631      	mov	r1, r6
 800d07a:	4628      	mov	r0, r5
 800d07c:	47b8      	blx	r7
 800d07e:	3001      	adds	r0, #1
 800d080:	f43f af2b 	beq.w	800ceda <_printf_float+0xb6>
 800d084:	f109 0901 	add.w	r9, r9, #1
 800d088:	e7e8      	b.n	800d05c <_printf_float+0x238>
 800d08a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	dc39      	bgt.n	800d104 <_printf_float+0x2e0>
 800d090:	4a1b      	ldr	r2, [pc, #108]	@ (800d100 <_printf_float+0x2dc>)
 800d092:	2301      	movs	r3, #1
 800d094:	4631      	mov	r1, r6
 800d096:	4628      	mov	r0, r5
 800d098:	47b8      	blx	r7
 800d09a:	3001      	adds	r0, #1
 800d09c:	f43f af1d 	beq.w	800ceda <_printf_float+0xb6>
 800d0a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d0a4:	ea59 0303 	orrs.w	r3, r9, r3
 800d0a8:	d102      	bne.n	800d0b0 <_printf_float+0x28c>
 800d0aa:	6823      	ldr	r3, [r4, #0]
 800d0ac:	07d9      	lsls	r1, r3, #31
 800d0ae:	d5d7      	bpl.n	800d060 <_printf_float+0x23c>
 800d0b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0b4:	4631      	mov	r1, r6
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	47b8      	blx	r7
 800d0ba:	3001      	adds	r0, #1
 800d0bc:	f43f af0d 	beq.w	800ceda <_printf_float+0xb6>
 800d0c0:	f04f 0a00 	mov.w	sl, #0
 800d0c4:	f104 0b1a 	add.w	fp, r4, #26
 800d0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ca:	425b      	negs	r3, r3
 800d0cc:	4553      	cmp	r3, sl
 800d0ce:	dc01      	bgt.n	800d0d4 <_printf_float+0x2b0>
 800d0d0:	464b      	mov	r3, r9
 800d0d2:	e793      	b.n	800cffc <_printf_float+0x1d8>
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	465a      	mov	r2, fp
 800d0d8:	4631      	mov	r1, r6
 800d0da:	4628      	mov	r0, r5
 800d0dc:	47b8      	blx	r7
 800d0de:	3001      	adds	r0, #1
 800d0e0:	f43f aefb 	beq.w	800ceda <_printf_float+0xb6>
 800d0e4:	f10a 0a01 	add.w	sl, sl, #1
 800d0e8:	e7ee      	b.n	800d0c8 <_printf_float+0x2a4>
 800d0ea:	bf00      	nop
 800d0ec:	7fefffff 	.word	0x7fefffff
 800d0f0:	08011723 	.word	0x08011723
 800d0f4:	08011727 	.word	0x08011727
 800d0f8:	0801172b 	.word	0x0801172b
 800d0fc:	0801172f 	.word	0x0801172f
 800d100:	08011733 	.word	0x08011733
 800d104:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d106:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d10a:	4553      	cmp	r3, sl
 800d10c:	bfa8      	it	ge
 800d10e:	4653      	movge	r3, sl
 800d110:	2b00      	cmp	r3, #0
 800d112:	4699      	mov	r9, r3
 800d114:	dc36      	bgt.n	800d184 <_printf_float+0x360>
 800d116:	f04f 0b00 	mov.w	fp, #0
 800d11a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d11e:	f104 021a 	add.w	r2, r4, #26
 800d122:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d124:	9306      	str	r3, [sp, #24]
 800d126:	eba3 0309 	sub.w	r3, r3, r9
 800d12a:	455b      	cmp	r3, fp
 800d12c:	dc31      	bgt.n	800d192 <_printf_float+0x36e>
 800d12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d130:	459a      	cmp	sl, r3
 800d132:	dc3a      	bgt.n	800d1aa <_printf_float+0x386>
 800d134:	6823      	ldr	r3, [r4, #0]
 800d136:	07da      	lsls	r2, r3, #31
 800d138:	d437      	bmi.n	800d1aa <_printf_float+0x386>
 800d13a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d13c:	ebaa 0903 	sub.w	r9, sl, r3
 800d140:	9b06      	ldr	r3, [sp, #24]
 800d142:	ebaa 0303 	sub.w	r3, sl, r3
 800d146:	4599      	cmp	r9, r3
 800d148:	bfa8      	it	ge
 800d14a:	4699      	movge	r9, r3
 800d14c:	f1b9 0f00 	cmp.w	r9, #0
 800d150:	dc33      	bgt.n	800d1ba <_printf_float+0x396>
 800d152:	f04f 0800 	mov.w	r8, #0
 800d156:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d15a:	f104 0b1a 	add.w	fp, r4, #26
 800d15e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d160:	ebaa 0303 	sub.w	r3, sl, r3
 800d164:	eba3 0309 	sub.w	r3, r3, r9
 800d168:	4543      	cmp	r3, r8
 800d16a:	f77f af79 	ble.w	800d060 <_printf_float+0x23c>
 800d16e:	2301      	movs	r3, #1
 800d170:	465a      	mov	r2, fp
 800d172:	4631      	mov	r1, r6
 800d174:	4628      	mov	r0, r5
 800d176:	47b8      	blx	r7
 800d178:	3001      	adds	r0, #1
 800d17a:	f43f aeae 	beq.w	800ceda <_printf_float+0xb6>
 800d17e:	f108 0801 	add.w	r8, r8, #1
 800d182:	e7ec      	b.n	800d15e <_printf_float+0x33a>
 800d184:	4642      	mov	r2, r8
 800d186:	4631      	mov	r1, r6
 800d188:	4628      	mov	r0, r5
 800d18a:	47b8      	blx	r7
 800d18c:	3001      	adds	r0, #1
 800d18e:	d1c2      	bne.n	800d116 <_printf_float+0x2f2>
 800d190:	e6a3      	b.n	800ceda <_printf_float+0xb6>
 800d192:	2301      	movs	r3, #1
 800d194:	4631      	mov	r1, r6
 800d196:	4628      	mov	r0, r5
 800d198:	9206      	str	r2, [sp, #24]
 800d19a:	47b8      	blx	r7
 800d19c:	3001      	adds	r0, #1
 800d19e:	f43f ae9c 	beq.w	800ceda <_printf_float+0xb6>
 800d1a2:	9a06      	ldr	r2, [sp, #24]
 800d1a4:	f10b 0b01 	add.w	fp, fp, #1
 800d1a8:	e7bb      	b.n	800d122 <_printf_float+0x2fe>
 800d1aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1ae:	4631      	mov	r1, r6
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	47b8      	blx	r7
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	d1c0      	bne.n	800d13a <_printf_float+0x316>
 800d1b8:	e68f      	b.n	800ceda <_printf_float+0xb6>
 800d1ba:	9a06      	ldr	r2, [sp, #24]
 800d1bc:	464b      	mov	r3, r9
 800d1be:	4442      	add	r2, r8
 800d1c0:	4631      	mov	r1, r6
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	47b8      	blx	r7
 800d1c6:	3001      	adds	r0, #1
 800d1c8:	d1c3      	bne.n	800d152 <_printf_float+0x32e>
 800d1ca:	e686      	b.n	800ceda <_printf_float+0xb6>
 800d1cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d1d0:	f1ba 0f01 	cmp.w	sl, #1
 800d1d4:	dc01      	bgt.n	800d1da <_printf_float+0x3b6>
 800d1d6:	07db      	lsls	r3, r3, #31
 800d1d8:	d536      	bpl.n	800d248 <_printf_float+0x424>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	4642      	mov	r2, r8
 800d1de:	4631      	mov	r1, r6
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	47b8      	blx	r7
 800d1e4:	3001      	adds	r0, #1
 800d1e6:	f43f ae78 	beq.w	800ceda <_printf_float+0xb6>
 800d1ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1ee:	4631      	mov	r1, r6
 800d1f0:	4628      	mov	r0, r5
 800d1f2:	47b8      	blx	r7
 800d1f4:	3001      	adds	r0, #1
 800d1f6:	f43f ae70 	beq.w	800ceda <_printf_float+0xb6>
 800d1fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d1fe:	2200      	movs	r2, #0
 800d200:	2300      	movs	r3, #0
 800d202:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d206:	f7f3 fc87 	bl	8000b18 <__aeabi_dcmpeq>
 800d20a:	b9c0      	cbnz	r0, 800d23e <_printf_float+0x41a>
 800d20c:	4653      	mov	r3, sl
 800d20e:	f108 0201 	add.w	r2, r8, #1
 800d212:	4631      	mov	r1, r6
 800d214:	4628      	mov	r0, r5
 800d216:	47b8      	blx	r7
 800d218:	3001      	adds	r0, #1
 800d21a:	d10c      	bne.n	800d236 <_printf_float+0x412>
 800d21c:	e65d      	b.n	800ceda <_printf_float+0xb6>
 800d21e:	2301      	movs	r3, #1
 800d220:	465a      	mov	r2, fp
 800d222:	4631      	mov	r1, r6
 800d224:	4628      	mov	r0, r5
 800d226:	47b8      	blx	r7
 800d228:	3001      	adds	r0, #1
 800d22a:	f43f ae56 	beq.w	800ceda <_printf_float+0xb6>
 800d22e:	f108 0801 	add.w	r8, r8, #1
 800d232:	45d0      	cmp	r8, sl
 800d234:	dbf3      	blt.n	800d21e <_printf_float+0x3fa>
 800d236:	464b      	mov	r3, r9
 800d238:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d23c:	e6df      	b.n	800cffe <_printf_float+0x1da>
 800d23e:	f04f 0800 	mov.w	r8, #0
 800d242:	f104 0b1a 	add.w	fp, r4, #26
 800d246:	e7f4      	b.n	800d232 <_printf_float+0x40e>
 800d248:	2301      	movs	r3, #1
 800d24a:	4642      	mov	r2, r8
 800d24c:	e7e1      	b.n	800d212 <_printf_float+0x3ee>
 800d24e:	2301      	movs	r3, #1
 800d250:	464a      	mov	r2, r9
 800d252:	4631      	mov	r1, r6
 800d254:	4628      	mov	r0, r5
 800d256:	47b8      	blx	r7
 800d258:	3001      	adds	r0, #1
 800d25a:	f43f ae3e 	beq.w	800ceda <_printf_float+0xb6>
 800d25e:	f108 0801 	add.w	r8, r8, #1
 800d262:	68e3      	ldr	r3, [r4, #12]
 800d264:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d266:	1a5b      	subs	r3, r3, r1
 800d268:	4543      	cmp	r3, r8
 800d26a:	dcf0      	bgt.n	800d24e <_printf_float+0x42a>
 800d26c:	e6fc      	b.n	800d068 <_printf_float+0x244>
 800d26e:	f04f 0800 	mov.w	r8, #0
 800d272:	f104 0919 	add.w	r9, r4, #25
 800d276:	e7f4      	b.n	800d262 <_printf_float+0x43e>

0800d278 <_printf_common>:
 800d278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d27c:	4616      	mov	r6, r2
 800d27e:	4698      	mov	r8, r3
 800d280:	688a      	ldr	r2, [r1, #8]
 800d282:	690b      	ldr	r3, [r1, #16]
 800d284:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d288:	4293      	cmp	r3, r2
 800d28a:	bfb8      	it	lt
 800d28c:	4613      	movlt	r3, r2
 800d28e:	6033      	str	r3, [r6, #0]
 800d290:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d294:	4607      	mov	r7, r0
 800d296:	460c      	mov	r4, r1
 800d298:	b10a      	cbz	r2, 800d29e <_printf_common+0x26>
 800d29a:	3301      	adds	r3, #1
 800d29c:	6033      	str	r3, [r6, #0]
 800d29e:	6823      	ldr	r3, [r4, #0]
 800d2a0:	0699      	lsls	r1, r3, #26
 800d2a2:	bf42      	ittt	mi
 800d2a4:	6833      	ldrmi	r3, [r6, #0]
 800d2a6:	3302      	addmi	r3, #2
 800d2a8:	6033      	strmi	r3, [r6, #0]
 800d2aa:	6825      	ldr	r5, [r4, #0]
 800d2ac:	f015 0506 	ands.w	r5, r5, #6
 800d2b0:	d106      	bne.n	800d2c0 <_printf_common+0x48>
 800d2b2:	f104 0a19 	add.w	sl, r4, #25
 800d2b6:	68e3      	ldr	r3, [r4, #12]
 800d2b8:	6832      	ldr	r2, [r6, #0]
 800d2ba:	1a9b      	subs	r3, r3, r2
 800d2bc:	42ab      	cmp	r3, r5
 800d2be:	dc26      	bgt.n	800d30e <_printf_common+0x96>
 800d2c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d2c4:	6822      	ldr	r2, [r4, #0]
 800d2c6:	3b00      	subs	r3, #0
 800d2c8:	bf18      	it	ne
 800d2ca:	2301      	movne	r3, #1
 800d2cc:	0692      	lsls	r2, r2, #26
 800d2ce:	d42b      	bmi.n	800d328 <_printf_common+0xb0>
 800d2d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d2d4:	4641      	mov	r1, r8
 800d2d6:	4638      	mov	r0, r7
 800d2d8:	47c8      	blx	r9
 800d2da:	3001      	adds	r0, #1
 800d2dc:	d01e      	beq.n	800d31c <_printf_common+0xa4>
 800d2de:	6823      	ldr	r3, [r4, #0]
 800d2e0:	6922      	ldr	r2, [r4, #16]
 800d2e2:	f003 0306 	and.w	r3, r3, #6
 800d2e6:	2b04      	cmp	r3, #4
 800d2e8:	bf02      	ittt	eq
 800d2ea:	68e5      	ldreq	r5, [r4, #12]
 800d2ec:	6833      	ldreq	r3, [r6, #0]
 800d2ee:	1aed      	subeq	r5, r5, r3
 800d2f0:	68a3      	ldr	r3, [r4, #8]
 800d2f2:	bf0c      	ite	eq
 800d2f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2f8:	2500      	movne	r5, #0
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	bfc4      	itt	gt
 800d2fe:	1a9b      	subgt	r3, r3, r2
 800d300:	18ed      	addgt	r5, r5, r3
 800d302:	2600      	movs	r6, #0
 800d304:	341a      	adds	r4, #26
 800d306:	42b5      	cmp	r5, r6
 800d308:	d11a      	bne.n	800d340 <_printf_common+0xc8>
 800d30a:	2000      	movs	r0, #0
 800d30c:	e008      	b.n	800d320 <_printf_common+0xa8>
 800d30e:	2301      	movs	r3, #1
 800d310:	4652      	mov	r2, sl
 800d312:	4641      	mov	r1, r8
 800d314:	4638      	mov	r0, r7
 800d316:	47c8      	blx	r9
 800d318:	3001      	adds	r0, #1
 800d31a:	d103      	bne.n	800d324 <_printf_common+0xac>
 800d31c:	f04f 30ff 	mov.w	r0, #4294967295
 800d320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d324:	3501      	adds	r5, #1
 800d326:	e7c6      	b.n	800d2b6 <_printf_common+0x3e>
 800d328:	18e1      	adds	r1, r4, r3
 800d32a:	1c5a      	adds	r2, r3, #1
 800d32c:	2030      	movs	r0, #48	@ 0x30
 800d32e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d332:	4422      	add	r2, r4
 800d334:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d338:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d33c:	3302      	adds	r3, #2
 800d33e:	e7c7      	b.n	800d2d0 <_printf_common+0x58>
 800d340:	2301      	movs	r3, #1
 800d342:	4622      	mov	r2, r4
 800d344:	4641      	mov	r1, r8
 800d346:	4638      	mov	r0, r7
 800d348:	47c8      	blx	r9
 800d34a:	3001      	adds	r0, #1
 800d34c:	d0e6      	beq.n	800d31c <_printf_common+0xa4>
 800d34e:	3601      	adds	r6, #1
 800d350:	e7d9      	b.n	800d306 <_printf_common+0x8e>
	...

0800d354 <_printf_i>:
 800d354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d358:	7e0f      	ldrb	r7, [r1, #24]
 800d35a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d35c:	2f78      	cmp	r7, #120	@ 0x78
 800d35e:	4691      	mov	r9, r2
 800d360:	4680      	mov	r8, r0
 800d362:	460c      	mov	r4, r1
 800d364:	469a      	mov	sl, r3
 800d366:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d36a:	d807      	bhi.n	800d37c <_printf_i+0x28>
 800d36c:	2f62      	cmp	r7, #98	@ 0x62
 800d36e:	d80a      	bhi.n	800d386 <_printf_i+0x32>
 800d370:	2f00      	cmp	r7, #0
 800d372:	f000 80d2 	beq.w	800d51a <_printf_i+0x1c6>
 800d376:	2f58      	cmp	r7, #88	@ 0x58
 800d378:	f000 80b9 	beq.w	800d4ee <_printf_i+0x19a>
 800d37c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d380:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d384:	e03a      	b.n	800d3fc <_printf_i+0xa8>
 800d386:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d38a:	2b15      	cmp	r3, #21
 800d38c:	d8f6      	bhi.n	800d37c <_printf_i+0x28>
 800d38e:	a101      	add	r1, pc, #4	@ (adr r1, 800d394 <_printf_i+0x40>)
 800d390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d394:	0800d3ed 	.word	0x0800d3ed
 800d398:	0800d401 	.word	0x0800d401
 800d39c:	0800d37d 	.word	0x0800d37d
 800d3a0:	0800d37d 	.word	0x0800d37d
 800d3a4:	0800d37d 	.word	0x0800d37d
 800d3a8:	0800d37d 	.word	0x0800d37d
 800d3ac:	0800d401 	.word	0x0800d401
 800d3b0:	0800d37d 	.word	0x0800d37d
 800d3b4:	0800d37d 	.word	0x0800d37d
 800d3b8:	0800d37d 	.word	0x0800d37d
 800d3bc:	0800d37d 	.word	0x0800d37d
 800d3c0:	0800d501 	.word	0x0800d501
 800d3c4:	0800d42b 	.word	0x0800d42b
 800d3c8:	0800d4bb 	.word	0x0800d4bb
 800d3cc:	0800d37d 	.word	0x0800d37d
 800d3d0:	0800d37d 	.word	0x0800d37d
 800d3d4:	0800d523 	.word	0x0800d523
 800d3d8:	0800d37d 	.word	0x0800d37d
 800d3dc:	0800d42b 	.word	0x0800d42b
 800d3e0:	0800d37d 	.word	0x0800d37d
 800d3e4:	0800d37d 	.word	0x0800d37d
 800d3e8:	0800d4c3 	.word	0x0800d4c3
 800d3ec:	6833      	ldr	r3, [r6, #0]
 800d3ee:	1d1a      	adds	r2, r3, #4
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	6032      	str	r2, [r6, #0]
 800d3f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d3f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	e09d      	b.n	800d53c <_printf_i+0x1e8>
 800d400:	6833      	ldr	r3, [r6, #0]
 800d402:	6820      	ldr	r0, [r4, #0]
 800d404:	1d19      	adds	r1, r3, #4
 800d406:	6031      	str	r1, [r6, #0]
 800d408:	0606      	lsls	r6, r0, #24
 800d40a:	d501      	bpl.n	800d410 <_printf_i+0xbc>
 800d40c:	681d      	ldr	r5, [r3, #0]
 800d40e:	e003      	b.n	800d418 <_printf_i+0xc4>
 800d410:	0645      	lsls	r5, r0, #25
 800d412:	d5fb      	bpl.n	800d40c <_printf_i+0xb8>
 800d414:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d418:	2d00      	cmp	r5, #0
 800d41a:	da03      	bge.n	800d424 <_printf_i+0xd0>
 800d41c:	232d      	movs	r3, #45	@ 0x2d
 800d41e:	426d      	negs	r5, r5
 800d420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d424:	4859      	ldr	r0, [pc, #356]	@ (800d58c <_printf_i+0x238>)
 800d426:	230a      	movs	r3, #10
 800d428:	e011      	b.n	800d44e <_printf_i+0xfa>
 800d42a:	6821      	ldr	r1, [r4, #0]
 800d42c:	6833      	ldr	r3, [r6, #0]
 800d42e:	0608      	lsls	r0, r1, #24
 800d430:	f853 5b04 	ldr.w	r5, [r3], #4
 800d434:	d402      	bmi.n	800d43c <_printf_i+0xe8>
 800d436:	0649      	lsls	r1, r1, #25
 800d438:	bf48      	it	mi
 800d43a:	b2ad      	uxthmi	r5, r5
 800d43c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d43e:	4853      	ldr	r0, [pc, #332]	@ (800d58c <_printf_i+0x238>)
 800d440:	6033      	str	r3, [r6, #0]
 800d442:	bf14      	ite	ne
 800d444:	230a      	movne	r3, #10
 800d446:	2308      	moveq	r3, #8
 800d448:	2100      	movs	r1, #0
 800d44a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d44e:	6866      	ldr	r6, [r4, #4]
 800d450:	60a6      	str	r6, [r4, #8]
 800d452:	2e00      	cmp	r6, #0
 800d454:	bfa2      	ittt	ge
 800d456:	6821      	ldrge	r1, [r4, #0]
 800d458:	f021 0104 	bicge.w	r1, r1, #4
 800d45c:	6021      	strge	r1, [r4, #0]
 800d45e:	b90d      	cbnz	r5, 800d464 <_printf_i+0x110>
 800d460:	2e00      	cmp	r6, #0
 800d462:	d04b      	beq.n	800d4fc <_printf_i+0x1a8>
 800d464:	4616      	mov	r6, r2
 800d466:	fbb5 f1f3 	udiv	r1, r5, r3
 800d46a:	fb03 5711 	mls	r7, r3, r1, r5
 800d46e:	5dc7      	ldrb	r7, [r0, r7]
 800d470:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d474:	462f      	mov	r7, r5
 800d476:	42bb      	cmp	r3, r7
 800d478:	460d      	mov	r5, r1
 800d47a:	d9f4      	bls.n	800d466 <_printf_i+0x112>
 800d47c:	2b08      	cmp	r3, #8
 800d47e:	d10b      	bne.n	800d498 <_printf_i+0x144>
 800d480:	6823      	ldr	r3, [r4, #0]
 800d482:	07df      	lsls	r7, r3, #31
 800d484:	d508      	bpl.n	800d498 <_printf_i+0x144>
 800d486:	6923      	ldr	r3, [r4, #16]
 800d488:	6861      	ldr	r1, [r4, #4]
 800d48a:	4299      	cmp	r1, r3
 800d48c:	bfde      	ittt	le
 800d48e:	2330      	movle	r3, #48	@ 0x30
 800d490:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d494:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d498:	1b92      	subs	r2, r2, r6
 800d49a:	6122      	str	r2, [r4, #16]
 800d49c:	f8cd a000 	str.w	sl, [sp]
 800d4a0:	464b      	mov	r3, r9
 800d4a2:	aa03      	add	r2, sp, #12
 800d4a4:	4621      	mov	r1, r4
 800d4a6:	4640      	mov	r0, r8
 800d4a8:	f7ff fee6 	bl	800d278 <_printf_common>
 800d4ac:	3001      	adds	r0, #1
 800d4ae:	d14a      	bne.n	800d546 <_printf_i+0x1f2>
 800d4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b4:	b004      	add	sp, #16
 800d4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ba:	6823      	ldr	r3, [r4, #0]
 800d4bc:	f043 0320 	orr.w	r3, r3, #32
 800d4c0:	6023      	str	r3, [r4, #0]
 800d4c2:	4833      	ldr	r0, [pc, #204]	@ (800d590 <_printf_i+0x23c>)
 800d4c4:	2778      	movs	r7, #120	@ 0x78
 800d4c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d4ca:	6823      	ldr	r3, [r4, #0]
 800d4cc:	6831      	ldr	r1, [r6, #0]
 800d4ce:	061f      	lsls	r7, r3, #24
 800d4d0:	f851 5b04 	ldr.w	r5, [r1], #4
 800d4d4:	d402      	bmi.n	800d4dc <_printf_i+0x188>
 800d4d6:	065f      	lsls	r7, r3, #25
 800d4d8:	bf48      	it	mi
 800d4da:	b2ad      	uxthmi	r5, r5
 800d4dc:	6031      	str	r1, [r6, #0]
 800d4de:	07d9      	lsls	r1, r3, #31
 800d4e0:	bf44      	itt	mi
 800d4e2:	f043 0320 	orrmi.w	r3, r3, #32
 800d4e6:	6023      	strmi	r3, [r4, #0]
 800d4e8:	b11d      	cbz	r5, 800d4f2 <_printf_i+0x19e>
 800d4ea:	2310      	movs	r3, #16
 800d4ec:	e7ac      	b.n	800d448 <_printf_i+0xf4>
 800d4ee:	4827      	ldr	r0, [pc, #156]	@ (800d58c <_printf_i+0x238>)
 800d4f0:	e7e9      	b.n	800d4c6 <_printf_i+0x172>
 800d4f2:	6823      	ldr	r3, [r4, #0]
 800d4f4:	f023 0320 	bic.w	r3, r3, #32
 800d4f8:	6023      	str	r3, [r4, #0]
 800d4fa:	e7f6      	b.n	800d4ea <_printf_i+0x196>
 800d4fc:	4616      	mov	r6, r2
 800d4fe:	e7bd      	b.n	800d47c <_printf_i+0x128>
 800d500:	6833      	ldr	r3, [r6, #0]
 800d502:	6825      	ldr	r5, [r4, #0]
 800d504:	6961      	ldr	r1, [r4, #20]
 800d506:	1d18      	adds	r0, r3, #4
 800d508:	6030      	str	r0, [r6, #0]
 800d50a:	062e      	lsls	r6, r5, #24
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	d501      	bpl.n	800d514 <_printf_i+0x1c0>
 800d510:	6019      	str	r1, [r3, #0]
 800d512:	e002      	b.n	800d51a <_printf_i+0x1c6>
 800d514:	0668      	lsls	r0, r5, #25
 800d516:	d5fb      	bpl.n	800d510 <_printf_i+0x1bc>
 800d518:	8019      	strh	r1, [r3, #0]
 800d51a:	2300      	movs	r3, #0
 800d51c:	6123      	str	r3, [r4, #16]
 800d51e:	4616      	mov	r6, r2
 800d520:	e7bc      	b.n	800d49c <_printf_i+0x148>
 800d522:	6833      	ldr	r3, [r6, #0]
 800d524:	1d1a      	adds	r2, r3, #4
 800d526:	6032      	str	r2, [r6, #0]
 800d528:	681e      	ldr	r6, [r3, #0]
 800d52a:	6862      	ldr	r2, [r4, #4]
 800d52c:	2100      	movs	r1, #0
 800d52e:	4630      	mov	r0, r6
 800d530:	f7f2 fe76 	bl	8000220 <memchr>
 800d534:	b108      	cbz	r0, 800d53a <_printf_i+0x1e6>
 800d536:	1b80      	subs	r0, r0, r6
 800d538:	6060      	str	r0, [r4, #4]
 800d53a:	6863      	ldr	r3, [r4, #4]
 800d53c:	6123      	str	r3, [r4, #16]
 800d53e:	2300      	movs	r3, #0
 800d540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d544:	e7aa      	b.n	800d49c <_printf_i+0x148>
 800d546:	6923      	ldr	r3, [r4, #16]
 800d548:	4632      	mov	r2, r6
 800d54a:	4649      	mov	r1, r9
 800d54c:	4640      	mov	r0, r8
 800d54e:	47d0      	blx	sl
 800d550:	3001      	adds	r0, #1
 800d552:	d0ad      	beq.n	800d4b0 <_printf_i+0x15c>
 800d554:	6823      	ldr	r3, [r4, #0]
 800d556:	079b      	lsls	r3, r3, #30
 800d558:	d413      	bmi.n	800d582 <_printf_i+0x22e>
 800d55a:	68e0      	ldr	r0, [r4, #12]
 800d55c:	9b03      	ldr	r3, [sp, #12]
 800d55e:	4298      	cmp	r0, r3
 800d560:	bfb8      	it	lt
 800d562:	4618      	movlt	r0, r3
 800d564:	e7a6      	b.n	800d4b4 <_printf_i+0x160>
 800d566:	2301      	movs	r3, #1
 800d568:	4632      	mov	r2, r6
 800d56a:	4649      	mov	r1, r9
 800d56c:	4640      	mov	r0, r8
 800d56e:	47d0      	blx	sl
 800d570:	3001      	adds	r0, #1
 800d572:	d09d      	beq.n	800d4b0 <_printf_i+0x15c>
 800d574:	3501      	adds	r5, #1
 800d576:	68e3      	ldr	r3, [r4, #12]
 800d578:	9903      	ldr	r1, [sp, #12]
 800d57a:	1a5b      	subs	r3, r3, r1
 800d57c:	42ab      	cmp	r3, r5
 800d57e:	dcf2      	bgt.n	800d566 <_printf_i+0x212>
 800d580:	e7eb      	b.n	800d55a <_printf_i+0x206>
 800d582:	2500      	movs	r5, #0
 800d584:	f104 0619 	add.w	r6, r4, #25
 800d588:	e7f5      	b.n	800d576 <_printf_i+0x222>
 800d58a:	bf00      	nop
 800d58c:	08011735 	.word	0x08011735
 800d590:	08011746 	.word	0x08011746

0800d594 <_scanf_float>:
 800d594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d598:	b087      	sub	sp, #28
 800d59a:	4617      	mov	r7, r2
 800d59c:	9303      	str	r3, [sp, #12]
 800d59e:	688b      	ldr	r3, [r1, #8]
 800d5a0:	1e5a      	subs	r2, r3, #1
 800d5a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d5a6:	bf81      	itttt	hi
 800d5a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d5ac:	eb03 0b05 	addhi.w	fp, r3, r5
 800d5b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d5b4:	608b      	strhi	r3, [r1, #8]
 800d5b6:	680b      	ldr	r3, [r1, #0]
 800d5b8:	460a      	mov	r2, r1
 800d5ba:	f04f 0500 	mov.w	r5, #0
 800d5be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d5c2:	f842 3b1c 	str.w	r3, [r2], #28
 800d5c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d5ca:	4680      	mov	r8, r0
 800d5cc:	460c      	mov	r4, r1
 800d5ce:	bf98      	it	ls
 800d5d0:	f04f 0b00 	movls.w	fp, #0
 800d5d4:	9201      	str	r2, [sp, #4]
 800d5d6:	4616      	mov	r6, r2
 800d5d8:	46aa      	mov	sl, r5
 800d5da:	46a9      	mov	r9, r5
 800d5dc:	9502      	str	r5, [sp, #8]
 800d5de:	68a2      	ldr	r2, [r4, #8]
 800d5e0:	b152      	cbz	r2, 800d5f8 <_scanf_float+0x64>
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	2b4e      	cmp	r3, #78	@ 0x4e
 800d5e8:	d864      	bhi.n	800d6b4 <_scanf_float+0x120>
 800d5ea:	2b40      	cmp	r3, #64	@ 0x40
 800d5ec:	d83c      	bhi.n	800d668 <_scanf_float+0xd4>
 800d5ee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d5f2:	b2c8      	uxtb	r0, r1
 800d5f4:	280e      	cmp	r0, #14
 800d5f6:	d93a      	bls.n	800d66e <_scanf_float+0xda>
 800d5f8:	f1b9 0f00 	cmp.w	r9, #0
 800d5fc:	d003      	beq.n	800d606 <_scanf_float+0x72>
 800d5fe:	6823      	ldr	r3, [r4, #0]
 800d600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d604:	6023      	str	r3, [r4, #0]
 800d606:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d60a:	f1ba 0f01 	cmp.w	sl, #1
 800d60e:	f200 8117 	bhi.w	800d840 <_scanf_float+0x2ac>
 800d612:	9b01      	ldr	r3, [sp, #4]
 800d614:	429e      	cmp	r6, r3
 800d616:	f200 8108 	bhi.w	800d82a <_scanf_float+0x296>
 800d61a:	2001      	movs	r0, #1
 800d61c:	b007      	add	sp, #28
 800d61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d622:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d626:	2a0d      	cmp	r2, #13
 800d628:	d8e6      	bhi.n	800d5f8 <_scanf_float+0x64>
 800d62a:	a101      	add	r1, pc, #4	@ (adr r1, 800d630 <_scanf_float+0x9c>)
 800d62c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d630:	0800d777 	.word	0x0800d777
 800d634:	0800d5f9 	.word	0x0800d5f9
 800d638:	0800d5f9 	.word	0x0800d5f9
 800d63c:	0800d5f9 	.word	0x0800d5f9
 800d640:	0800d7d7 	.word	0x0800d7d7
 800d644:	0800d7af 	.word	0x0800d7af
 800d648:	0800d5f9 	.word	0x0800d5f9
 800d64c:	0800d5f9 	.word	0x0800d5f9
 800d650:	0800d785 	.word	0x0800d785
 800d654:	0800d5f9 	.word	0x0800d5f9
 800d658:	0800d5f9 	.word	0x0800d5f9
 800d65c:	0800d5f9 	.word	0x0800d5f9
 800d660:	0800d5f9 	.word	0x0800d5f9
 800d664:	0800d73d 	.word	0x0800d73d
 800d668:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d66c:	e7db      	b.n	800d626 <_scanf_float+0x92>
 800d66e:	290e      	cmp	r1, #14
 800d670:	d8c2      	bhi.n	800d5f8 <_scanf_float+0x64>
 800d672:	a001      	add	r0, pc, #4	@ (adr r0, 800d678 <_scanf_float+0xe4>)
 800d674:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d678:	0800d72d 	.word	0x0800d72d
 800d67c:	0800d5f9 	.word	0x0800d5f9
 800d680:	0800d72d 	.word	0x0800d72d
 800d684:	0800d7c3 	.word	0x0800d7c3
 800d688:	0800d5f9 	.word	0x0800d5f9
 800d68c:	0800d6d5 	.word	0x0800d6d5
 800d690:	0800d713 	.word	0x0800d713
 800d694:	0800d713 	.word	0x0800d713
 800d698:	0800d713 	.word	0x0800d713
 800d69c:	0800d713 	.word	0x0800d713
 800d6a0:	0800d713 	.word	0x0800d713
 800d6a4:	0800d713 	.word	0x0800d713
 800d6a8:	0800d713 	.word	0x0800d713
 800d6ac:	0800d713 	.word	0x0800d713
 800d6b0:	0800d713 	.word	0x0800d713
 800d6b4:	2b6e      	cmp	r3, #110	@ 0x6e
 800d6b6:	d809      	bhi.n	800d6cc <_scanf_float+0x138>
 800d6b8:	2b60      	cmp	r3, #96	@ 0x60
 800d6ba:	d8b2      	bhi.n	800d622 <_scanf_float+0x8e>
 800d6bc:	2b54      	cmp	r3, #84	@ 0x54
 800d6be:	d07b      	beq.n	800d7b8 <_scanf_float+0x224>
 800d6c0:	2b59      	cmp	r3, #89	@ 0x59
 800d6c2:	d199      	bne.n	800d5f8 <_scanf_float+0x64>
 800d6c4:	2d07      	cmp	r5, #7
 800d6c6:	d197      	bne.n	800d5f8 <_scanf_float+0x64>
 800d6c8:	2508      	movs	r5, #8
 800d6ca:	e02c      	b.n	800d726 <_scanf_float+0x192>
 800d6cc:	2b74      	cmp	r3, #116	@ 0x74
 800d6ce:	d073      	beq.n	800d7b8 <_scanf_float+0x224>
 800d6d0:	2b79      	cmp	r3, #121	@ 0x79
 800d6d2:	e7f6      	b.n	800d6c2 <_scanf_float+0x12e>
 800d6d4:	6821      	ldr	r1, [r4, #0]
 800d6d6:	05c8      	lsls	r0, r1, #23
 800d6d8:	d51b      	bpl.n	800d712 <_scanf_float+0x17e>
 800d6da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d6de:	6021      	str	r1, [r4, #0]
 800d6e0:	f109 0901 	add.w	r9, r9, #1
 800d6e4:	f1bb 0f00 	cmp.w	fp, #0
 800d6e8:	d003      	beq.n	800d6f2 <_scanf_float+0x15e>
 800d6ea:	3201      	adds	r2, #1
 800d6ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d6f0:	60a2      	str	r2, [r4, #8]
 800d6f2:	68a3      	ldr	r3, [r4, #8]
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	60a3      	str	r3, [r4, #8]
 800d6f8:	6923      	ldr	r3, [r4, #16]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	6123      	str	r3, [r4, #16]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	3b01      	subs	r3, #1
 800d702:	2b00      	cmp	r3, #0
 800d704:	607b      	str	r3, [r7, #4]
 800d706:	f340 8087 	ble.w	800d818 <_scanf_float+0x284>
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	3301      	adds	r3, #1
 800d70e:	603b      	str	r3, [r7, #0]
 800d710:	e765      	b.n	800d5de <_scanf_float+0x4a>
 800d712:	eb1a 0105 	adds.w	r1, sl, r5
 800d716:	f47f af6f 	bne.w	800d5f8 <_scanf_float+0x64>
 800d71a:	6822      	ldr	r2, [r4, #0]
 800d71c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d720:	6022      	str	r2, [r4, #0]
 800d722:	460d      	mov	r5, r1
 800d724:	468a      	mov	sl, r1
 800d726:	f806 3b01 	strb.w	r3, [r6], #1
 800d72a:	e7e2      	b.n	800d6f2 <_scanf_float+0x15e>
 800d72c:	6822      	ldr	r2, [r4, #0]
 800d72e:	0610      	lsls	r0, r2, #24
 800d730:	f57f af62 	bpl.w	800d5f8 <_scanf_float+0x64>
 800d734:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d738:	6022      	str	r2, [r4, #0]
 800d73a:	e7f4      	b.n	800d726 <_scanf_float+0x192>
 800d73c:	f1ba 0f00 	cmp.w	sl, #0
 800d740:	d10e      	bne.n	800d760 <_scanf_float+0x1cc>
 800d742:	f1b9 0f00 	cmp.w	r9, #0
 800d746:	d10e      	bne.n	800d766 <_scanf_float+0x1d2>
 800d748:	6822      	ldr	r2, [r4, #0]
 800d74a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d74e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d752:	d108      	bne.n	800d766 <_scanf_float+0x1d2>
 800d754:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d758:	6022      	str	r2, [r4, #0]
 800d75a:	f04f 0a01 	mov.w	sl, #1
 800d75e:	e7e2      	b.n	800d726 <_scanf_float+0x192>
 800d760:	f1ba 0f02 	cmp.w	sl, #2
 800d764:	d055      	beq.n	800d812 <_scanf_float+0x27e>
 800d766:	2d01      	cmp	r5, #1
 800d768:	d002      	beq.n	800d770 <_scanf_float+0x1dc>
 800d76a:	2d04      	cmp	r5, #4
 800d76c:	f47f af44 	bne.w	800d5f8 <_scanf_float+0x64>
 800d770:	3501      	adds	r5, #1
 800d772:	b2ed      	uxtb	r5, r5
 800d774:	e7d7      	b.n	800d726 <_scanf_float+0x192>
 800d776:	f1ba 0f01 	cmp.w	sl, #1
 800d77a:	f47f af3d 	bne.w	800d5f8 <_scanf_float+0x64>
 800d77e:	f04f 0a02 	mov.w	sl, #2
 800d782:	e7d0      	b.n	800d726 <_scanf_float+0x192>
 800d784:	b97d      	cbnz	r5, 800d7a6 <_scanf_float+0x212>
 800d786:	f1b9 0f00 	cmp.w	r9, #0
 800d78a:	f47f af38 	bne.w	800d5fe <_scanf_float+0x6a>
 800d78e:	6822      	ldr	r2, [r4, #0]
 800d790:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d794:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d798:	f040 8108 	bne.w	800d9ac <_scanf_float+0x418>
 800d79c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d7a0:	6022      	str	r2, [r4, #0]
 800d7a2:	2501      	movs	r5, #1
 800d7a4:	e7bf      	b.n	800d726 <_scanf_float+0x192>
 800d7a6:	2d03      	cmp	r5, #3
 800d7a8:	d0e2      	beq.n	800d770 <_scanf_float+0x1dc>
 800d7aa:	2d05      	cmp	r5, #5
 800d7ac:	e7de      	b.n	800d76c <_scanf_float+0x1d8>
 800d7ae:	2d02      	cmp	r5, #2
 800d7b0:	f47f af22 	bne.w	800d5f8 <_scanf_float+0x64>
 800d7b4:	2503      	movs	r5, #3
 800d7b6:	e7b6      	b.n	800d726 <_scanf_float+0x192>
 800d7b8:	2d06      	cmp	r5, #6
 800d7ba:	f47f af1d 	bne.w	800d5f8 <_scanf_float+0x64>
 800d7be:	2507      	movs	r5, #7
 800d7c0:	e7b1      	b.n	800d726 <_scanf_float+0x192>
 800d7c2:	6822      	ldr	r2, [r4, #0]
 800d7c4:	0591      	lsls	r1, r2, #22
 800d7c6:	f57f af17 	bpl.w	800d5f8 <_scanf_float+0x64>
 800d7ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d7ce:	6022      	str	r2, [r4, #0]
 800d7d0:	f8cd 9008 	str.w	r9, [sp, #8]
 800d7d4:	e7a7      	b.n	800d726 <_scanf_float+0x192>
 800d7d6:	6822      	ldr	r2, [r4, #0]
 800d7d8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d7dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d7e0:	d006      	beq.n	800d7f0 <_scanf_float+0x25c>
 800d7e2:	0550      	lsls	r0, r2, #21
 800d7e4:	f57f af08 	bpl.w	800d5f8 <_scanf_float+0x64>
 800d7e8:	f1b9 0f00 	cmp.w	r9, #0
 800d7ec:	f000 80de 	beq.w	800d9ac <_scanf_float+0x418>
 800d7f0:	0591      	lsls	r1, r2, #22
 800d7f2:	bf58      	it	pl
 800d7f4:	9902      	ldrpl	r1, [sp, #8]
 800d7f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d7fa:	bf58      	it	pl
 800d7fc:	eba9 0101 	subpl.w	r1, r9, r1
 800d800:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d804:	bf58      	it	pl
 800d806:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d80a:	6022      	str	r2, [r4, #0]
 800d80c:	f04f 0900 	mov.w	r9, #0
 800d810:	e789      	b.n	800d726 <_scanf_float+0x192>
 800d812:	f04f 0a03 	mov.w	sl, #3
 800d816:	e786      	b.n	800d726 <_scanf_float+0x192>
 800d818:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d81c:	4639      	mov	r1, r7
 800d81e:	4640      	mov	r0, r8
 800d820:	4798      	blx	r3
 800d822:	2800      	cmp	r0, #0
 800d824:	f43f aedb 	beq.w	800d5de <_scanf_float+0x4a>
 800d828:	e6e6      	b.n	800d5f8 <_scanf_float+0x64>
 800d82a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d82e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d832:	463a      	mov	r2, r7
 800d834:	4640      	mov	r0, r8
 800d836:	4798      	blx	r3
 800d838:	6923      	ldr	r3, [r4, #16]
 800d83a:	3b01      	subs	r3, #1
 800d83c:	6123      	str	r3, [r4, #16]
 800d83e:	e6e8      	b.n	800d612 <_scanf_float+0x7e>
 800d840:	1e6b      	subs	r3, r5, #1
 800d842:	2b06      	cmp	r3, #6
 800d844:	d824      	bhi.n	800d890 <_scanf_float+0x2fc>
 800d846:	2d02      	cmp	r5, #2
 800d848:	d836      	bhi.n	800d8b8 <_scanf_float+0x324>
 800d84a:	9b01      	ldr	r3, [sp, #4]
 800d84c:	429e      	cmp	r6, r3
 800d84e:	f67f aee4 	bls.w	800d61a <_scanf_float+0x86>
 800d852:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d856:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d85a:	463a      	mov	r2, r7
 800d85c:	4640      	mov	r0, r8
 800d85e:	4798      	blx	r3
 800d860:	6923      	ldr	r3, [r4, #16]
 800d862:	3b01      	subs	r3, #1
 800d864:	6123      	str	r3, [r4, #16]
 800d866:	e7f0      	b.n	800d84a <_scanf_float+0x2b6>
 800d868:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d86c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d870:	463a      	mov	r2, r7
 800d872:	4640      	mov	r0, r8
 800d874:	4798      	blx	r3
 800d876:	6923      	ldr	r3, [r4, #16]
 800d878:	3b01      	subs	r3, #1
 800d87a:	6123      	str	r3, [r4, #16]
 800d87c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d880:	fa5f fa8a 	uxtb.w	sl, sl
 800d884:	f1ba 0f02 	cmp.w	sl, #2
 800d888:	d1ee      	bne.n	800d868 <_scanf_float+0x2d4>
 800d88a:	3d03      	subs	r5, #3
 800d88c:	b2ed      	uxtb	r5, r5
 800d88e:	1b76      	subs	r6, r6, r5
 800d890:	6823      	ldr	r3, [r4, #0]
 800d892:	05da      	lsls	r2, r3, #23
 800d894:	d530      	bpl.n	800d8f8 <_scanf_float+0x364>
 800d896:	055b      	lsls	r3, r3, #21
 800d898:	d511      	bpl.n	800d8be <_scanf_float+0x32a>
 800d89a:	9b01      	ldr	r3, [sp, #4]
 800d89c:	429e      	cmp	r6, r3
 800d89e:	f67f aebc 	bls.w	800d61a <_scanf_float+0x86>
 800d8a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d8a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d8aa:	463a      	mov	r2, r7
 800d8ac:	4640      	mov	r0, r8
 800d8ae:	4798      	blx	r3
 800d8b0:	6923      	ldr	r3, [r4, #16]
 800d8b2:	3b01      	subs	r3, #1
 800d8b4:	6123      	str	r3, [r4, #16]
 800d8b6:	e7f0      	b.n	800d89a <_scanf_float+0x306>
 800d8b8:	46aa      	mov	sl, r5
 800d8ba:	46b3      	mov	fp, r6
 800d8bc:	e7de      	b.n	800d87c <_scanf_float+0x2e8>
 800d8be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d8c2:	6923      	ldr	r3, [r4, #16]
 800d8c4:	2965      	cmp	r1, #101	@ 0x65
 800d8c6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d8ca:	f106 35ff 	add.w	r5, r6, #4294967295
 800d8ce:	6123      	str	r3, [r4, #16]
 800d8d0:	d00c      	beq.n	800d8ec <_scanf_float+0x358>
 800d8d2:	2945      	cmp	r1, #69	@ 0x45
 800d8d4:	d00a      	beq.n	800d8ec <_scanf_float+0x358>
 800d8d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d8da:	463a      	mov	r2, r7
 800d8dc:	4640      	mov	r0, r8
 800d8de:	4798      	blx	r3
 800d8e0:	6923      	ldr	r3, [r4, #16]
 800d8e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d8e6:	3b01      	subs	r3, #1
 800d8e8:	1eb5      	subs	r5, r6, #2
 800d8ea:	6123      	str	r3, [r4, #16]
 800d8ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d8f0:	463a      	mov	r2, r7
 800d8f2:	4640      	mov	r0, r8
 800d8f4:	4798      	blx	r3
 800d8f6:	462e      	mov	r6, r5
 800d8f8:	6822      	ldr	r2, [r4, #0]
 800d8fa:	f012 0210 	ands.w	r2, r2, #16
 800d8fe:	d001      	beq.n	800d904 <_scanf_float+0x370>
 800d900:	2000      	movs	r0, #0
 800d902:	e68b      	b.n	800d61c <_scanf_float+0x88>
 800d904:	7032      	strb	r2, [r6, #0]
 800d906:	6823      	ldr	r3, [r4, #0]
 800d908:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d90c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d910:	d11c      	bne.n	800d94c <_scanf_float+0x3b8>
 800d912:	9b02      	ldr	r3, [sp, #8]
 800d914:	454b      	cmp	r3, r9
 800d916:	eba3 0209 	sub.w	r2, r3, r9
 800d91a:	d123      	bne.n	800d964 <_scanf_float+0x3d0>
 800d91c:	9901      	ldr	r1, [sp, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	4640      	mov	r0, r8
 800d922:	f002 fc19 	bl	8010158 <_strtod_r>
 800d926:	9b03      	ldr	r3, [sp, #12]
 800d928:	6821      	ldr	r1, [r4, #0]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f011 0f02 	tst.w	r1, #2
 800d930:	ec57 6b10 	vmov	r6, r7, d0
 800d934:	f103 0204 	add.w	r2, r3, #4
 800d938:	d01f      	beq.n	800d97a <_scanf_float+0x3e6>
 800d93a:	9903      	ldr	r1, [sp, #12]
 800d93c:	600a      	str	r2, [r1, #0]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	e9c3 6700 	strd	r6, r7, [r3]
 800d944:	68e3      	ldr	r3, [r4, #12]
 800d946:	3301      	adds	r3, #1
 800d948:	60e3      	str	r3, [r4, #12]
 800d94a:	e7d9      	b.n	800d900 <_scanf_float+0x36c>
 800d94c:	9b04      	ldr	r3, [sp, #16]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d0e4      	beq.n	800d91c <_scanf_float+0x388>
 800d952:	9905      	ldr	r1, [sp, #20]
 800d954:	230a      	movs	r3, #10
 800d956:	3101      	adds	r1, #1
 800d958:	4640      	mov	r0, r8
 800d95a:	f002 fc7d 	bl	8010258 <_strtol_r>
 800d95e:	9b04      	ldr	r3, [sp, #16]
 800d960:	9e05      	ldr	r6, [sp, #20]
 800d962:	1ac2      	subs	r2, r0, r3
 800d964:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d968:	429e      	cmp	r6, r3
 800d96a:	bf28      	it	cs
 800d96c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d970:	4910      	ldr	r1, [pc, #64]	@ (800d9b4 <_scanf_float+0x420>)
 800d972:	4630      	mov	r0, r6
 800d974:	f000 f8e4 	bl	800db40 <siprintf>
 800d978:	e7d0      	b.n	800d91c <_scanf_float+0x388>
 800d97a:	f011 0f04 	tst.w	r1, #4
 800d97e:	9903      	ldr	r1, [sp, #12]
 800d980:	600a      	str	r2, [r1, #0]
 800d982:	d1dc      	bne.n	800d93e <_scanf_float+0x3aa>
 800d984:	681d      	ldr	r5, [r3, #0]
 800d986:	4632      	mov	r2, r6
 800d988:	463b      	mov	r3, r7
 800d98a:	4630      	mov	r0, r6
 800d98c:	4639      	mov	r1, r7
 800d98e:	f7f3 f8f5 	bl	8000b7c <__aeabi_dcmpun>
 800d992:	b128      	cbz	r0, 800d9a0 <_scanf_float+0x40c>
 800d994:	4808      	ldr	r0, [pc, #32]	@ (800d9b8 <_scanf_float+0x424>)
 800d996:	f000 f9d7 	bl	800dd48 <nanf>
 800d99a:	ed85 0a00 	vstr	s0, [r5]
 800d99e:	e7d1      	b.n	800d944 <_scanf_float+0x3b0>
 800d9a0:	4630      	mov	r0, r6
 800d9a2:	4639      	mov	r1, r7
 800d9a4:	f7f3 f948 	bl	8000c38 <__aeabi_d2f>
 800d9a8:	6028      	str	r0, [r5, #0]
 800d9aa:	e7cb      	b.n	800d944 <_scanf_float+0x3b0>
 800d9ac:	f04f 0900 	mov.w	r9, #0
 800d9b0:	e629      	b.n	800d606 <_scanf_float+0x72>
 800d9b2:	bf00      	nop
 800d9b4:	08011757 	.word	0x08011757
 800d9b8:	08011aed 	.word	0x08011aed

0800d9bc <std>:
 800d9bc:	2300      	movs	r3, #0
 800d9be:	b510      	push	{r4, lr}
 800d9c0:	4604      	mov	r4, r0
 800d9c2:	e9c0 3300 	strd	r3, r3, [r0]
 800d9c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9ca:	6083      	str	r3, [r0, #8]
 800d9cc:	8181      	strh	r1, [r0, #12]
 800d9ce:	6643      	str	r3, [r0, #100]	@ 0x64
 800d9d0:	81c2      	strh	r2, [r0, #14]
 800d9d2:	6183      	str	r3, [r0, #24]
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	2208      	movs	r2, #8
 800d9d8:	305c      	adds	r0, #92	@ 0x5c
 800d9da:	f000 f935 	bl	800dc48 <memset>
 800d9de:	4b0d      	ldr	r3, [pc, #52]	@ (800da14 <std+0x58>)
 800d9e0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d9e2:	4b0d      	ldr	r3, [pc, #52]	@ (800da18 <std+0x5c>)
 800d9e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d9e6:	4b0d      	ldr	r3, [pc, #52]	@ (800da1c <std+0x60>)
 800d9e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d9ea:	4b0d      	ldr	r3, [pc, #52]	@ (800da20 <std+0x64>)
 800d9ec:	6323      	str	r3, [r4, #48]	@ 0x30
 800d9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800da24 <std+0x68>)
 800d9f0:	6224      	str	r4, [r4, #32]
 800d9f2:	429c      	cmp	r4, r3
 800d9f4:	d006      	beq.n	800da04 <std+0x48>
 800d9f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d9fa:	4294      	cmp	r4, r2
 800d9fc:	d002      	beq.n	800da04 <std+0x48>
 800d9fe:	33d0      	adds	r3, #208	@ 0xd0
 800da00:	429c      	cmp	r4, r3
 800da02:	d105      	bne.n	800da10 <std+0x54>
 800da04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800da08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da0c:	f000 b998 	b.w	800dd40 <__retarget_lock_init_recursive>
 800da10:	bd10      	pop	{r4, pc}
 800da12:	bf00      	nop
 800da14:	0800db81 	.word	0x0800db81
 800da18:	0800dba3 	.word	0x0800dba3
 800da1c:	0800dbdb 	.word	0x0800dbdb
 800da20:	0800dbff 	.word	0x0800dbff
 800da24:	200008ec 	.word	0x200008ec

0800da28 <stdio_exit_handler>:
 800da28:	4a02      	ldr	r2, [pc, #8]	@ (800da34 <stdio_exit_handler+0xc>)
 800da2a:	4903      	ldr	r1, [pc, #12]	@ (800da38 <stdio_exit_handler+0x10>)
 800da2c:	4803      	ldr	r0, [pc, #12]	@ (800da3c <stdio_exit_handler+0x14>)
 800da2e:	f000 b869 	b.w	800db04 <_fwalk_sglue>
 800da32:	bf00      	nop
 800da34:	20000090 	.word	0x20000090
 800da38:	08010615 	.word	0x08010615
 800da3c:	200000a0 	.word	0x200000a0

0800da40 <cleanup_stdio>:
 800da40:	6841      	ldr	r1, [r0, #4]
 800da42:	4b0c      	ldr	r3, [pc, #48]	@ (800da74 <cleanup_stdio+0x34>)
 800da44:	4299      	cmp	r1, r3
 800da46:	b510      	push	{r4, lr}
 800da48:	4604      	mov	r4, r0
 800da4a:	d001      	beq.n	800da50 <cleanup_stdio+0x10>
 800da4c:	f002 fde2 	bl	8010614 <_fflush_r>
 800da50:	68a1      	ldr	r1, [r4, #8]
 800da52:	4b09      	ldr	r3, [pc, #36]	@ (800da78 <cleanup_stdio+0x38>)
 800da54:	4299      	cmp	r1, r3
 800da56:	d002      	beq.n	800da5e <cleanup_stdio+0x1e>
 800da58:	4620      	mov	r0, r4
 800da5a:	f002 fddb 	bl	8010614 <_fflush_r>
 800da5e:	68e1      	ldr	r1, [r4, #12]
 800da60:	4b06      	ldr	r3, [pc, #24]	@ (800da7c <cleanup_stdio+0x3c>)
 800da62:	4299      	cmp	r1, r3
 800da64:	d004      	beq.n	800da70 <cleanup_stdio+0x30>
 800da66:	4620      	mov	r0, r4
 800da68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da6c:	f002 bdd2 	b.w	8010614 <_fflush_r>
 800da70:	bd10      	pop	{r4, pc}
 800da72:	bf00      	nop
 800da74:	200008ec 	.word	0x200008ec
 800da78:	20000954 	.word	0x20000954
 800da7c:	200009bc 	.word	0x200009bc

0800da80 <global_stdio_init.part.0>:
 800da80:	b510      	push	{r4, lr}
 800da82:	4b0b      	ldr	r3, [pc, #44]	@ (800dab0 <global_stdio_init.part.0+0x30>)
 800da84:	4c0b      	ldr	r4, [pc, #44]	@ (800dab4 <global_stdio_init.part.0+0x34>)
 800da86:	4a0c      	ldr	r2, [pc, #48]	@ (800dab8 <global_stdio_init.part.0+0x38>)
 800da88:	601a      	str	r2, [r3, #0]
 800da8a:	4620      	mov	r0, r4
 800da8c:	2200      	movs	r2, #0
 800da8e:	2104      	movs	r1, #4
 800da90:	f7ff ff94 	bl	800d9bc <std>
 800da94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800da98:	2201      	movs	r2, #1
 800da9a:	2109      	movs	r1, #9
 800da9c:	f7ff ff8e 	bl	800d9bc <std>
 800daa0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800daa4:	2202      	movs	r2, #2
 800daa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daaa:	2112      	movs	r1, #18
 800daac:	f7ff bf86 	b.w	800d9bc <std>
 800dab0:	20000a24 	.word	0x20000a24
 800dab4:	200008ec 	.word	0x200008ec
 800dab8:	0800da29 	.word	0x0800da29

0800dabc <__sfp_lock_acquire>:
 800dabc:	4801      	ldr	r0, [pc, #4]	@ (800dac4 <__sfp_lock_acquire+0x8>)
 800dabe:	f000 b940 	b.w	800dd42 <__retarget_lock_acquire_recursive>
 800dac2:	bf00      	nop
 800dac4:	20000a2d 	.word	0x20000a2d

0800dac8 <__sfp_lock_release>:
 800dac8:	4801      	ldr	r0, [pc, #4]	@ (800dad0 <__sfp_lock_release+0x8>)
 800daca:	f000 b93b 	b.w	800dd44 <__retarget_lock_release_recursive>
 800dace:	bf00      	nop
 800dad0:	20000a2d 	.word	0x20000a2d

0800dad4 <__sinit>:
 800dad4:	b510      	push	{r4, lr}
 800dad6:	4604      	mov	r4, r0
 800dad8:	f7ff fff0 	bl	800dabc <__sfp_lock_acquire>
 800dadc:	6a23      	ldr	r3, [r4, #32]
 800dade:	b11b      	cbz	r3, 800dae8 <__sinit+0x14>
 800dae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dae4:	f7ff bff0 	b.w	800dac8 <__sfp_lock_release>
 800dae8:	4b04      	ldr	r3, [pc, #16]	@ (800dafc <__sinit+0x28>)
 800daea:	6223      	str	r3, [r4, #32]
 800daec:	4b04      	ldr	r3, [pc, #16]	@ (800db00 <__sinit+0x2c>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d1f5      	bne.n	800dae0 <__sinit+0xc>
 800daf4:	f7ff ffc4 	bl	800da80 <global_stdio_init.part.0>
 800daf8:	e7f2      	b.n	800dae0 <__sinit+0xc>
 800dafa:	bf00      	nop
 800dafc:	0800da41 	.word	0x0800da41
 800db00:	20000a24 	.word	0x20000a24

0800db04 <_fwalk_sglue>:
 800db04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db08:	4607      	mov	r7, r0
 800db0a:	4688      	mov	r8, r1
 800db0c:	4614      	mov	r4, r2
 800db0e:	2600      	movs	r6, #0
 800db10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db14:	f1b9 0901 	subs.w	r9, r9, #1
 800db18:	d505      	bpl.n	800db26 <_fwalk_sglue+0x22>
 800db1a:	6824      	ldr	r4, [r4, #0]
 800db1c:	2c00      	cmp	r4, #0
 800db1e:	d1f7      	bne.n	800db10 <_fwalk_sglue+0xc>
 800db20:	4630      	mov	r0, r6
 800db22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db26:	89ab      	ldrh	r3, [r5, #12]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d907      	bls.n	800db3c <_fwalk_sglue+0x38>
 800db2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db30:	3301      	adds	r3, #1
 800db32:	d003      	beq.n	800db3c <_fwalk_sglue+0x38>
 800db34:	4629      	mov	r1, r5
 800db36:	4638      	mov	r0, r7
 800db38:	47c0      	blx	r8
 800db3a:	4306      	orrs	r6, r0
 800db3c:	3568      	adds	r5, #104	@ 0x68
 800db3e:	e7e9      	b.n	800db14 <_fwalk_sglue+0x10>

0800db40 <siprintf>:
 800db40:	b40e      	push	{r1, r2, r3}
 800db42:	b500      	push	{lr}
 800db44:	b09c      	sub	sp, #112	@ 0x70
 800db46:	ab1d      	add	r3, sp, #116	@ 0x74
 800db48:	9002      	str	r0, [sp, #8]
 800db4a:	9006      	str	r0, [sp, #24]
 800db4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800db50:	4809      	ldr	r0, [pc, #36]	@ (800db78 <siprintf+0x38>)
 800db52:	9107      	str	r1, [sp, #28]
 800db54:	9104      	str	r1, [sp, #16]
 800db56:	4909      	ldr	r1, [pc, #36]	@ (800db7c <siprintf+0x3c>)
 800db58:	f853 2b04 	ldr.w	r2, [r3], #4
 800db5c:	9105      	str	r1, [sp, #20]
 800db5e:	6800      	ldr	r0, [r0, #0]
 800db60:	9301      	str	r3, [sp, #4]
 800db62:	a902      	add	r1, sp, #8
 800db64:	f002 fbd6 	bl	8010314 <_svfiprintf_r>
 800db68:	9b02      	ldr	r3, [sp, #8]
 800db6a:	2200      	movs	r2, #0
 800db6c:	701a      	strb	r2, [r3, #0]
 800db6e:	b01c      	add	sp, #112	@ 0x70
 800db70:	f85d eb04 	ldr.w	lr, [sp], #4
 800db74:	b003      	add	sp, #12
 800db76:	4770      	bx	lr
 800db78:	2000009c 	.word	0x2000009c
 800db7c:	ffff0208 	.word	0xffff0208

0800db80 <__sread>:
 800db80:	b510      	push	{r4, lr}
 800db82:	460c      	mov	r4, r1
 800db84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db88:	f000 f88c 	bl	800dca4 <_read_r>
 800db8c:	2800      	cmp	r0, #0
 800db8e:	bfab      	itete	ge
 800db90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800db92:	89a3      	ldrhlt	r3, [r4, #12]
 800db94:	181b      	addge	r3, r3, r0
 800db96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800db9a:	bfac      	ite	ge
 800db9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800db9e:	81a3      	strhlt	r3, [r4, #12]
 800dba0:	bd10      	pop	{r4, pc}

0800dba2 <__swrite>:
 800dba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dba6:	461f      	mov	r7, r3
 800dba8:	898b      	ldrh	r3, [r1, #12]
 800dbaa:	05db      	lsls	r3, r3, #23
 800dbac:	4605      	mov	r5, r0
 800dbae:	460c      	mov	r4, r1
 800dbb0:	4616      	mov	r6, r2
 800dbb2:	d505      	bpl.n	800dbc0 <__swrite+0x1e>
 800dbb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbb8:	2302      	movs	r3, #2
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f000 f860 	bl	800dc80 <_lseek_r>
 800dbc0:	89a3      	ldrh	r3, [r4, #12]
 800dbc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dbca:	81a3      	strh	r3, [r4, #12]
 800dbcc:	4632      	mov	r2, r6
 800dbce:	463b      	mov	r3, r7
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbd6:	f000 b877 	b.w	800dcc8 <_write_r>

0800dbda <__sseek>:
 800dbda:	b510      	push	{r4, lr}
 800dbdc:	460c      	mov	r4, r1
 800dbde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbe2:	f000 f84d 	bl	800dc80 <_lseek_r>
 800dbe6:	1c43      	adds	r3, r0, #1
 800dbe8:	89a3      	ldrh	r3, [r4, #12]
 800dbea:	bf15      	itete	ne
 800dbec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dbee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dbf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dbf6:	81a3      	strheq	r3, [r4, #12]
 800dbf8:	bf18      	it	ne
 800dbfa:	81a3      	strhne	r3, [r4, #12]
 800dbfc:	bd10      	pop	{r4, pc}

0800dbfe <__sclose>:
 800dbfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc02:	f000 b82d 	b.w	800dc60 <_close_r>
	...

0800dc08 <_vsiprintf_r>:
 800dc08:	b500      	push	{lr}
 800dc0a:	b09b      	sub	sp, #108	@ 0x6c
 800dc0c:	9100      	str	r1, [sp, #0]
 800dc0e:	9104      	str	r1, [sp, #16]
 800dc10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dc14:	9105      	str	r1, [sp, #20]
 800dc16:	9102      	str	r1, [sp, #8]
 800dc18:	4905      	ldr	r1, [pc, #20]	@ (800dc30 <_vsiprintf_r+0x28>)
 800dc1a:	9103      	str	r1, [sp, #12]
 800dc1c:	4669      	mov	r1, sp
 800dc1e:	f002 fb79 	bl	8010314 <_svfiprintf_r>
 800dc22:	9b00      	ldr	r3, [sp, #0]
 800dc24:	2200      	movs	r2, #0
 800dc26:	701a      	strb	r2, [r3, #0]
 800dc28:	b01b      	add	sp, #108	@ 0x6c
 800dc2a:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc2e:	bf00      	nop
 800dc30:	ffff0208 	.word	0xffff0208

0800dc34 <vsiprintf>:
 800dc34:	4613      	mov	r3, r2
 800dc36:	460a      	mov	r2, r1
 800dc38:	4601      	mov	r1, r0
 800dc3a:	4802      	ldr	r0, [pc, #8]	@ (800dc44 <vsiprintf+0x10>)
 800dc3c:	6800      	ldr	r0, [r0, #0]
 800dc3e:	f7ff bfe3 	b.w	800dc08 <_vsiprintf_r>
 800dc42:	bf00      	nop
 800dc44:	2000009c 	.word	0x2000009c

0800dc48 <memset>:
 800dc48:	4402      	add	r2, r0
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d100      	bne.n	800dc52 <memset+0xa>
 800dc50:	4770      	bx	lr
 800dc52:	f803 1b01 	strb.w	r1, [r3], #1
 800dc56:	e7f9      	b.n	800dc4c <memset+0x4>

0800dc58 <_localeconv_r>:
 800dc58:	4800      	ldr	r0, [pc, #0]	@ (800dc5c <_localeconv_r+0x4>)
 800dc5a:	4770      	bx	lr
 800dc5c:	200001dc 	.word	0x200001dc

0800dc60 <_close_r>:
 800dc60:	b538      	push	{r3, r4, r5, lr}
 800dc62:	4d06      	ldr	r5, [pc, #24]	@ (800dc7c <_close_r+0x1c>)
 800dc64:	2300      	movs	r3, #0
 800dc66:	4604      	mov	r4, r0
 800dc68:	4608      	mov	r0, r1
 800dc6a:	602b      	str	r3, [r5, #0]
 800dc6c:	f7f4 f984 	bl	8001f78 <_close>
 800dc70:	1c43      	adds	r3, r0, #1
 800dc72:	d102      	bne.n	800dc7a <_close_r+0x1a>
 800dc74:	682b      	ldr	r3, [r5, #0]
 800dc76:	b103      	cbz	r3, 800dc7a <_close_r+0x1a>
 800dc78:	6023      	str	r3, [r4, #0]
 800dc7a:	bd38      	pop	{r3, r4, r5, pc}
 800dc7c:	20000a28 	.word	0x20000a28

0800dc80 <_lseek_r>:
 800dc80:	b538      	push	{r3, r4, r5, lr}
 800dc82:	4d07      	ldr	r5, [pc, #28]	@ (800dca0 <_lseek_r+0x20>)
 800dc84:	4604      	mov	r4, r0
 800dc86:	4608      	mov	r0, r1
 800dc88:	4611      	mov	r1, r2
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	602a      	str	r2, [r5, #0]
 800dc8e:	461a      	mov	r2, r3
 800dc90:	f7f4 f999 	bl	8001fc6 <_lseek>
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	d102      	bne.n	800dc9e <_lseek_r+0x1e>
 800dc98:	682b      	ldr	r3, [r5, #0]
 800dc9a:	b103      	cbz	r3, 800dc9e <_lseek_r+0x1e>
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	bd38      	pop	{r3, r4, r5, pc}
 800dca0:	20000a28 	.word	0x20000a28

0800dca4 <_read_r>:
 800dca4:	b538      	push	{r3, r4, r5, lr}
 800dca6:	4d07      	ldr	r5, [pc, #28]	@ (800dcc4 <_read_r+0x20>)
 800dca8:	4604      	mov	r4, r0
 800dcaa:	4608      	mov	r0, r1
 800dcac:	4611      	mov	r1, r2
 800dcae:	2200      	movs	r2, #0
 800dcb0:	602a      	str	r2, [r5, #0]
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	f7f4 f927 	bl	8001f06 <_read>
 800dcb8:	1c43      	adds	r3, r0, #1
 800dcba:	d102      	bne.n	800dcc2 <_read_r+0x1e>
 800dcbc:	682b      	ldr	r3, [r5, #0]
 800dcbe:	b103      	cbz	r3, 800dcc2 <_read_r+0x1e>
 800dcc0:	6023      	str	r3, [r4, #0]
 800dcc2:	bd38      	pop	{r3, r4, r5, pc}
 800dcc4:	20000a28 	.word	0x20000a28

0800dcc8 <_write_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	4d07      	ldr	r5, [pc, #28]	@ (800dce8 <_write_r+0x20>)
 800dccc:	4604      	mov	r4, r0
 800dcce:	4608      	mov	r0, r1
 800dcd0:	4611      	mov	r1, r2
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	602a      	str	r2, [r5, #0]
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	f7f4 f932 	bl	8001f40 <_write>
 800dcdc:	1c43      	adds	r3, r0, #1
 800dcde:	d102      	bne.n	800dce6 <_write_r+0x1e>
 800dce0:	682b      	ldr	r3, [r5, #0]
 800dce2:	b103      	cbz	r3, 800dce6 <_write_r+0x1e>
 800dce4:	6023      	str	r3, [r4, #0]
 800dce6:	bd38      	pop	{r3, r4, r5, pc}
 800dce8:	20000a28 	.word	0x20000a28

0800dcec <__errno>:
 800dcec:	4b01      	ldr	r3, [pc, #4]	@ (800dcf4 <__errno+0x8>)
 800dcee:	6818      	ldr	r0, [r3, #0]
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop
 800dcf4:	2000009c 	.word	0x2000009c

0800dcf8 <__libc_init_array>:
 800dcf8:	b570      	push	{r4, r5, r6, lr}
 800dcfa:	4d0d      	ldr	r5, [pc, #52]	@ (800dd30 <__libc_init_array+0x38>)
 800dcfc:	4c0d      	ldr	r4, [pc, #52]	@ (800dd34 <__libc_init_array+0x3c>)
 800dcfe:	1b64      	subs	r4, r4, r5
 800dd00:	10a4      	asrs	r4, r4, #2
 800dd02:	2600      	movs	r6, #0
 800dd04:	42a6      	cmp	r6, r4
 800dd06:	d109      	bne.n	800dd1c <__libc_init_array+0x24>
 800dd08:	4d0b      	ldr	r5, [pc, #44]	@ (800dd38 <__libc_init_array+0x40>)
 800dd0a:	4c0c      	ldr	r4, [pc, #48]	@ (800dd3c <__libc_init_array+0x44>)
 800dd0c:	f003 fcaa 	bl	8011664 <_init>
 800dd10:	1b64      	subs	r4, r4, r5
 800dd12:	10a4      	asrs	r4, r4, #2
 800dd14:	2600      	movs	r6, #0
 800dd16:	42a6      	cmp	r6, r4
 800dd18:	d105      	bne.n	800dd26 <__libc_init_array+0x2e>
 800dd1a:	bd70      	pop	{r4, r5, r6, pc}
 800dd1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd20:	4798      	blx	r3
 800dd22:	3601      	adds	r6, #1
 800dd24:	e7ee      	b.n	800dd04 <__libc_init_array+0xc>
 800dd26:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd2a:	4798      	blx	r3
 800dd2c:	3601      	adds	r6, #1
 800dd2e:	e7f2      	b.n	800dd16 <__libc_init_array+0x1e>
 800dd30:	08011b68 	.word	0x08011b68
 800dd34:	08011b68 	.word	0x08011b68
 800dd38:	08011b68 	.word	0x08011b68
 800dd3c:	08011b6c 	.word	0x08011b6c

0800dd40 <__retarget_lock_init_recursive>:
 800dd40:	4770      	bx	lr

0800dd42 <__retarget_lock_acquire_recursive>:
 800dd42:	4770      	bx	lr

0800dd44 <__retarget_lock_release_recursive>:
 800dd44:	4770      	bx	lr
	...

0800dd48 <nanf>:
 800dd48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800dd50 <nanf+0x8>
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	7fc00000 	.word	0x7fc00000

0800dd54 <quorem>:
 800dd54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd58:	6903      	ldr	r3, [r0, #16]
 800dd5a:	690c      	ldr	r4, [r1, #16]
 800dd5c:	42a3      	cmp	r3, r4
 800dd5e:	4607      	mov	r7, r0
 800dd60:	db7e      	blt.n	800de60 <quorem+0x10c>
 800dd62:	3c01      	subs	r4, #1
 800dd64:	f101 0814 	add.w	r8, r1, #20
 800dd68:	00a3      	lsls	r3, r4, #2
 800dd6a:	f100 0514 	add.w	r5, r0, #20
 800dd6e:	9300      	str	r3, [sp, #0]
 800dd70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd74:	9301      	str	r3, [sp, #4]
 800dd76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dd7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd7e:	3301      	adds	r3, #1
 800dd80:	429a      	cmp	r2, r3
 800dd82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dd86:	fbb2 f6f3 	udiv	r6, r2, r3
 800dd8a:	d32e      	bcc.n	800ddea <quorem+0x96>
 800dd8c:	f04f 0a00 	mov.w	sl, #0
 800dd90:	46c4      	mov	ip, r8
 800dd92:	46ae      	mov	lr, r5
 800dd94:	46d3      	mov	fp, sl
 800dd96:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dd9a:	b298      	uxth	r0, r3
 800dd9c:	fb06 a000 	mla	r0, r6, r0, sl
 800dda0:	0c02      	lsrs	r2, r0, #16
 800dda2:	0c1b      	lsrs	r3, r3, #16
 800dda4:	fb06 2303 	mla	r3, r6, r3, r2
 800dda8:	f8de 2000 	ldr.w	r2, [lr]
 800ddac:	b280      	uxth	r0, r0
 800ddae:	b292      	uxth	r2, r2
 800ddb0:	1a12      	subs	r2, r2, r0
 800ddb2:	445a      	add	r2, fp
 800ddb4:	f8de 0000 	ldr.w	r0, [lr]
 800ddb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ddc2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ddc6:	b292      	uxth	r2, r2
 800ddc8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ddcc:	45e1      	cmp	r9, ip
 800ddce:	f84e 2b04 	str.w	r2, [lr], #4
 800ddd2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ddd6:	d2de      	bcs.n	800dd96 <quorem+0x42>
 800ddd8:	9b00      	ldr	r3, [sp, #0]
 800ddda:	58eb      	ldr	r3, [r5, r3]
 800dddc:	b92b      	cbnz	r3, 800ddea <quorem+0x96>
 800ddde:	9b01      	ldr	r3, [sp, #4]
 800dde0:	3b04      	subs	r3, #4
 800dde2:	429d      	cmp	r5, r3
 800dde4:	461a      	mov	r2, r3
 800dde6:	d32f      	bcc.n	800de48 <quorem+0xf4>
 800dde8:	613c      	str	r4, [r7, #16]
 800ddea:	4638      	mov	r0, r7
 800ddec:	f001 f9c4 	bl	800f178 <__mcmp>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	db25      	blt.n	800de40 <quorem+0xec>
 800ddf4:	4629      	mov	r1, r5
 800ddf6:	2000      	movs	r0, #0
 800ddf8:	f858 2b04 	ldr.w	r2, [r8], #4
 800ddfc:	f8d1 c000 	ldr.w	ip, [r1]
 800de00:	fa1f fe82 	uxth.w	lr, r2
 800de04:	fa1f f38c 	uxth.w	r3, ip
 800de08:	eba3 030e 	sub.w	r3, r3, lr
 800de0c:	4403      	add	r3, r0
 800de0e:	0c12      	lsrs	r2, r2, #16
 800de10:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800de14:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800de18:	b29b      	uxth	r3, r3
 800de1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de1e:	45c1      	cmp	r9, r8
 800de20:	f841 3b04 	str.w	r3, [r1], #4
 800de24:	ea4f 4022 	mov.w	r0, r2, asr #16
 800de28:	d2e6      	bcs.n	800ddf8 <quorem+0xa4>
 800de2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de32:	b922      	cbnz	r2, 800de3e <quorem+0xea>
 800de34:	3b04      	subs	r3, #4
 800de36:	429d      	cmp	r5, r3
 800de38:	461a      	mov	r2, r3
 800de3a:	d30b      	bcc.n	800de54 <quorem+0x100>
 800de3c:	613c      	str	r4, [r7, #16]
 800de3e:	3601      	adds	r6, #1
 800de40:	4630      	mov	r0, r6
 800de42:	b003      	add	sp, #12
 800de44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de48:	6812      	ldr	r2, [r2, #0]
 800de4a:	3b04      	subs	r3, #4
 800de4c:	2a00      	cmp	r2, #0
 800de4e:	d1cb      	bne.n	800dde8 <quorem+0x94>
 800de50:	3c01      	subs	r4, #1
 800de52:	e7c6      	b.n	800dde2 <quorem+0x8e>
 800de54:	6812      	ldr	r2, [r2, #0]
 800de56:	3b04      	subs	r3, #4
 800de58:	2a00      	cmp	r2, #0
 800de5a:	d1ef      	bne.n	800de3c <quorem+0xe8>
 800de5c:	3c01      	subs	r4, #1
 800de5e:	e7ea      	b.n	800de36 <quorem+0xe2>
 800de60:	2000      	movs	r0, #0
 800de62:	e7ee      	b.n	800de42 <quorem+0xee>
 800de64:	0000      	movs	r0, r0
	...

0800de68 <_dtoa_r>:
 800de68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6c:	69c7      	ldr	r7, [r0, #28]
 800de6e:	b099      	sub	sp, #100	@ 0x64
 800de70:	ed8d 0b02 	vstr	d0, [sp, #8]
 800de74:	ec55 4b10 	vmov	r4, r5, d0
 800de78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800de7a:	9109      	str	r1, [sp, #36]	@ 0x24
 800de7c:	4683      	mov	fp, r0
 800de7e:	920e      	str	r2, [sp, #56]	@ 0x38
 800de80:	9313      	str	r3, [sp, #76]	@ 0x4c
 800de82:	b97f      	cbnz	r7, 800dea4 <_dtoa_r+0x3c>
 800de84:	2010      	movs	r0, #16
 800de86:	f000 fdfd 	bl	800ea84 <malloc>
 800de8a:	4602      	mov	r2, r0
 800de8c:	f8cb 001c 	str.w	r0, [fp, #28]
 800de90:	b920      	cbnz	r0, 800de9c <_dtoa_r+0x34>
 800de92:	4ba7      	ldr	r3, [pc, #668]	@ (800e130 <_dtoa_r+0x2c8>)
 800de94:	21ef      	movs	r1, #239	@ 0xef
 800de96:	48a7      	ldr	r0, [pc, #668]	@ (800e134 <_dtoa_r+0x2cc>)
 800de98:	f002 fc36 	bl	8010708 <__assert_func>
 800de9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dea0:	6007      	str	r7, [r0, #0]
 800dea2:	60c7      	str	r7, [r0, #12]
 800dea4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dea8:	6819      	ldr	r1, [r3, #0]
 800deaa:	b159      	cbz	r1, 800dec4 <_dtoa_r+0x5c>
 800deac:	685a      	ldr	r2, [r3, #4]
 800deae:	604a      	str	r2, [r1, #4]
 800deb0:	2301      	movs	r3, #1
 800deb2:	4093      	lsls	r3, r2
 800deb4:	608b      	str	r3, [r1, #8]
 800deb6:	4658      	mov	r0, fp
 800deb8:	f000 feda 	bl	800ec70 <_Bfree>
 800debc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dec0:	2200      	movs	r2, #0
 800dec2:	601a      	str	r2, [r3, #0]
 800dec4:	1e2b      	subs	r3, r5, #0
 800dec6:	bfb9      	ittee	lt
 800dec8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800decc:	9303      	strlt	r3, [sp, #12]
 800dece:	2300      	movge	r3, #0
 800ded0:	6033      	strge	r3, [r6, #0]
 800ded2:	9f03      	ldr	r7, [sp, #12]
 800ded4:	4b98      	ldr	r3, [pc, #608]	@ (800e138 <_dtoa_r+0x2d0>)
 800ded6:	bfbc      	itt	lt
 800ded8:	2201      	movlt	r2, #1
 800deda:	6032      	strlt	r2, [r6, #0]
 800dedc:	43bb      	bics	r3, r7
 800dede:	d112      	bne.n	800df06 <_dtoa_r+0x9e>
 800dee0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dee2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dee6:	6013      	str	r3, [r2, #0]
 800dee8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800deec:	4323      	orrs	r3, r4
 800deee:	f000 854d 	beq.w	800e98c <_dtoa_r+0xb24>
 800def2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800def4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e14c <_dtoa_r+0x2e4>
 800def8:	2b00      	cmp	r3, #0
 800defa:	f000 854f 	beq.w	800e99c <_dtoa_r+0xb34>
 800defe:	f10a 0303 	add.w	r3, sl, #3
 800df02:	f000 bd49 	b.w	800e998 <_dtoa_r+0xb30>
 800df06:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df0a:	2200      	movs	r2, #0
 800df0c:	ec51 0b17 	vmov	r0, r1, d7
 800df10:	2300      	movs	r3, #0
 800df12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800df16:	f7f2 fdff 	bl	8000b18 <__aeabi_dcmpeq>
 800df1a:	4680      	mov	r8, r0
 800df1c:	b158      	cbz	r0, 800df36 <_dtoa_r+0xce>
 800df1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800df20:	2301      	movs	r3, #1
 800df22:	6013      	str	r3, [r2, #0]
 800df24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df26:	b113      	cbz	r3, 800df2e <_dtoa_r+0xc6>
 800df28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800df2a:	4b84      	ldr	r3, [pc, #528]	@ (800e13c <_dtoa_r+0x2d4>)
 800df2c:	6013      	str	r3, [r2, #0]
 800df2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e150 <_dtoa_r+0x2e8>
 800df32:	f000 bd33 	b.w	800e99c <_dtoa_r+0xb34>
 800df36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800df3a:	aa16      	add	r2, sp, #88	@ 0x58
 800df3c:	a917      	add	r1, sp, #92	@ 0x5c
 800df3e:	4658      	mov	r0, fp
 800df40:	f001 fa3a 	bl	800f3b8 <__d2b>
 800df44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800df48:	4681      	mov	r9, r0
 800df4a:	2e00      	cmp	r6, #0
 800df4c:	d077      	beq.n	800e03e <_dtoa_r+0x1d6>
 800df4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800df54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800df60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800df64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800df68:	4619      	mov	r1, r3
 800df6a:	2200      	movs	r2, #0
 800df6c:	4b74      	ldr	r3, [pc, #464]	@ (800e140 <_dtoa_r+0x2d8>)
 800df6e:	f7f2 f9b3 	bl	80002d8 <__aeabi_dsub>
 800df72:	a369      	add	r3, pc, #420	@ (adr r3, 800e118 <_dtoa_r+0x2b0>)
 800df74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df78:	f7f2 fb66 	bl	8000648 <__aeabi_dmul>
 800df7c:	a368      	add	r3, pc, #416	@ (adr r3, 800e120 <_dtoa_r+0x2b8>)
 800df7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df82:	f7f2 f9ab 	bl	80002dc <__adddf3>
 800df86:	4604      	mov	r4, r0
 800df88:	4630      	mov	r0, r6
 800df8a:	460d      	mov	r5, r1
 800df8c:	f7f2 faf2 	bl	8000574 <__aeabi_i2d>
 800df90:	a365      	add	r3, pc, #404	@ (adr r3, 800e128 <_dtoa_r+0x2c0>)
 800df92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df96:	f7f2 fb57 	bl	8000648 <__aeabi_dmul>
 800df9a:	4602      	mov	r2, r0
 800df9c:	460b      	mov	r3, r1
 800df9e:	4620      	mov	r0, r4
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	f7f2 f99b 	bl	80002dc <__adddf3>
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	460d      	mov	r5, r1
 800dfaa:	f7f2 fdfd 	bl	8000ba8 <__aeabi_d2iz>
 800dfae:	2200      	movs	r2, #0
 800dfb0:	4607      	mov	r7, r0
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	4620      	mov	r0, r4
 800dfb6:	4629      	mov	r1, r5
 800dfb8:	f7f2 fdb8 	bl	8000b2c <__aeabi_dcmplt>
 800dfbc:	b140      	cbz	r0, 800dfd0 <_dtoa_r+0x168>
 800dfbe:	4638      	mov	r0, r7
 800dfc0:	f7f2 fad8 	bl	8000574 <__aeabi_i2d>
 800dfc4:	4622      	mov	r2, r4
 800dfc6:	462b      	mov	r3, r5
 800dfc8:	f7f2 fda6 	bl	8000b18 <__aeabi_dcmpeq>
 800dfcc:	b900      	cbnz	r0, 800dfd0 <_dtoa_r+0x168>
 800dfce:	3f01      	subs	r7, #1
 800dfd0:	2f16      	cmp	r7, #22
 800dfd2:	d851      	bhi.n	800e078 <_dtoa_r+0x210>
 800dfd4:	4b5b      	ldr	r3, [pc, #364]	@ (800e144 <_dtoa_r+0x2dc>)
 800dfd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfe2:	f7f2 fda3 	bl	8000b2c <__aeabi_dcmplt>
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	d048      	beq.n	800e07c <_dtoa_r+0x214>
 800dfea:	3f01      	subs	r7, #1
 800dfec:	2300      	movs	r3, #0
 800dfee:	9312      	str	r3, [sp, #72]	@ 0x48
 800dff0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dff2:	1b9b      	subs	r3, r3, r6
 800dff4:	1e5a      	subs	r2, r3, #1
 800dff6:	bf44      	itt	mi
 800dff8:	f1c3 0801 	rsbmi	r8, r3, #1
 800dffc:	2300      	movmi	r3, #0
 800dffe:	9208      	str	r2, [sp, #32]
 800e000:	bf54      	ite	pl
 800e002:	f04f 0800 	movpl.w	r8, #0
 800e006:	9308      	strmi	r3, [sp, #32]
 800e008:	2f00      	cmp	r7, #0
 800e00a:	db39      	blt.n	800e080 <_dtoa_r+0x218>
 800e00c:	9b08      	ldr	r3, [sp, #32]
 800e00e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e010:	443b      	add	r3, r7
 800e012:	9308      	str	r3, [sp, #32]
 800e014:	2300      	movs	r3, #0
 800e016:	930a      	str	r3, [sp, #40]	@ 0x28
 800e018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e01a:	2b09      	cmp	r3, #9
 800e01c:	d864      	bhi.n	800e0e8 <_dtoa_r+0x280>
 800e01e:	2b05      	cmp	r3, #5
 800e020:	bfc4      	itt	gt
 800e022:	3b04      	subgt	r3, #4
 800e024:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e028:	f1a3 0302 	sub.w	r3, r3, #2
 800e02c:	bfcc      	ite	gt
 800e02e:	2400      	movgt	r4, #0
 800e030:	2401      	movle	r4, #1
 800e032:	2b03      	cmp	r3, #3
 800e034:	d863      	bhi.n	800e0fe <_dtoa_r+0x296>
 800e036:	e8df f003 	tbb	[pc, r3]
 800e03a:	372a      	.short	0x372a
 800e03c:	5535      	.short	0x5535
 800e03e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e042:	441e      	add	r6, r3
 800e044:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e048:	2b20      	cmp	r3, #32
 800e04a:	bfc1      	itttt	gt
 800e04c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e050:	409f      	lslgt	r7, r3
 800e052:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e056:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e05a:	bfd6      	itet	le
 800e05c:	f1c3 0320 	rsble	r3, r3, #32
 800e060:	ea47 0003 	orrgt.w	r0, r7, r3
 800e064:	fa04 f003 	lslle.w	r0, r4, r3
 800e068:	f7f2 fa74 	bl	8000554 <__aeabi_ui2d>
 800e06c:	2201      	movs	r2, #1
 800e06e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e072:	3e01      	subs	r6, #1
 800e074:	9214      	str	r2, [sp, #80]	@ 0x50
 800e076:	e777      	b.n	800df68 <_dtoa_r+0x100>
 800e078:	2301      	movs	r3, #1
 800e07a:	e7b8      	b.n	800dfee <_dtoa_r+0x186>
 800e07c:	9012      	str	r0, [sp, #72]	@ 0x48
 800e07e:	e7b7      	b.n	800dff0 <_dtoa_r+0x188>
 800e080:	427b      	negs	r3, r7
 800e082:	930a      	str	r3, [sp, #40]	@ 0x28
 800e084:	2300      	movs	r3, #0
 800e086:	eba8 0807 	sub.w	r8, r8, r7
 800e08a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e08c:	e7c4      	b.n	800e018 <_dtoa_r+0x1b0>
 800e08e:	2300      	movs	r3, #0
 800e090:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e092:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e094:	2b00      	cmp	r3, #0
 800e096:	dc35      	bgt.n	800e104 <_dtoa_r+0x29c>
 800e098:	2301      	movs	r3, #1
 800e09a:	9300      	str	r3, [sp, #0]
 800e09c:	9307      	str	r3, [sp, #28]
 800e09e:	461a      	mov	r2, r3
 800e0a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e0a2:	e00b      	b.n	800e0bc <_dtoa_r+0x254>
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	e7f3      	b.n	800e090 <_dtoa_r+0x228>
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0ae:	18fb      	adds	r3, r7, r3
 800e0b0:	9300      	str	r3, [sp, #0]
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	9307      	str	r3, [sp, #28]
 800e0b8:	bfb8      	it	lt
 800e0ba:	2301      	movlt	r3, #1
 800e0bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	2204      	movs	r2, #4
 800e0c4:	f102 0514 	add.w	r5, r2, #20
 800e0c8:	429d      	cmp	r5, r3
 800e0ca:	d91f      	bls.n	800e10c <_dtoa_r+0x2a4>
 800e0cc:	6041      	str	r1, [r0, #4]
 800e0ce:	4658      	mov	r0, fp
 800e0d0:	f000 fd8e 	bl	800ebf0 <_Balloc>
 800e0d4:	4682      	mov	sl, r0
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	d13c      	bne.n	800e154 <_dtoa_r+0x2ec>
 800e0da:	4b1b      	ldr	r3, [pc, #108]	@ (800e148 <_dtoa_r+0x2e0>)
 800e0dc:	4602      	mov	r2, r0
 800e0de:	f240 11af 	movw	r1, #431	@ 0x1af
 800e0e2:	e6d8      	b.n	800de96 <_dtoa_r+0x2e>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	e7e0      	b.n	800e0aa <_dtoa_r+0x242>
 800e0e8:	2401      	movs	r4, #1
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e0f4:	9300      	str	r3, [sp, #0]
 800e0f6:	9307      	str	r3, [sp, #28]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	2312      	movs	r3, #18
 800e0fc:	e7d0      	b.n	800e0a0 <_dtoa_r+0x238>
 800e0fe:	2301      	movs	r3, #1
 800e100:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e102:	e7f5      	b.n	800e0f0 <_dtoa_r+0x288>
 800e104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e106:	9300      	str	r3, [sp, #0]
 800e108:	9307      	str	r3, [sp, #28]
 800e10a:	e7d7      	b.n	800e0bc <_dtoa_r+0x254>
 800e10c:	3101      	adds	r1, #1
 800e10e:	0052      	lsls	r2, r2, #1
 800e110:	e7d8      	b.n	800e0c4 <_dtoa_r+0x25c>
 800e112:	bf00      	nop
 800e114:	f3af 8000 	nop.w
 800e118:	636f4361 	.word	0x636f4361
 800e11c:	3fd287a7 	.word	0x3fd287a7
 800e120:	8b60c8b3 	.word	0x8b60c8b3
 800e124:	3fc68a28 	.word	0x3fc68a28
 800e128:	509f79fb 	.word	0x509f79fb
 800e12c:	3fd34413 	.word	0x3fd34413
 800e130:	08011769 	.word	0x08011769
 800e134:	08011780 	.word	0x08011780
 800e138:	7ff00000 	.word	0x7ff00000
 800e13c:	08011734 	.word	0x08011734
 800e140:	3ff80000 	.word	0x3ff80000
 800e144:	08011878 	.word	0x08011878
 800e148:	080117d8 	.word	0x080117d8
 800e14c:	08011765 	.word	0x08011765
 800e150:	08011733 	.word	0x08011733
 800e154:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e158:	6018      	str	r0, [r3, #0]
 800e15a:	9b07      	ldr	r3, [sp, #28]
 800e15c:	2b0e      	cmp	r3, #14
 800e15e:	f200 80a4 	bhi.w	800e2aa <_dtoa_r+0x442>
 800e162:	2c00      	cmp	r4, #0
 800e164:	f000 80a1 	beq.w	800e2aa <_dtoa_r+0x442>
 800e168:	2f00      	cmp	r7, #0
 800e16a:	dd33      	ble.n	800e1d4 <_dtoa_r+0x36c>
 800e16c:	4bad      	ldr	r3, [pc, #692]	@ (800e424 <_dtoa_r+0x5bc>)
 800e16e:	f007 020f 	and.w	r2, r7, #15
 800e172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e176:	ed93 7b00 	vldr	d7, [r3]
 800e17a:	05f8      	lsls	r0, r7, #23
 800e17c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e180:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e184:	d516      	bpl.n	800e1b4 <_dtoa_r+0x34c>
 800e186:	4ba8      	ldr	r3, [pc, #672]	@ (800e428 <_dtoa_r+0x5c0>)
 800e188:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e18c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e190:	f7f2 fb84 	bl	800089c <__aeabi_ddiv>
 800e194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e198:	f004 040f 	and.w	r4, r4, #15
 800e19c:	2603      	movs	r6, #3
 800e19e:	4da2      	ldr	r5, [pc, #648]	@ (800e428 <_dtoa_r+0x5c0>)
 800e1a0:	b954      	cbnz	r4, 800e1b8 <_dtoa_r+0x350>
 800e1a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1aa:	f7f2 fb77 	bl	800089c <__aeabi_ddiv>
 800e1ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1b2:	e028      	b.n	800e206 <_dtoa_r+0x39e>
 800e1b4:	2602      	movs	r6, #2
 800e1b6:	e7f2      	b.n	800e19e <_dtoa_r+0x336>
 800e1b8:	07e1      	lsls	r1, r4, #31
 800e1ba:	d508      	bpl.n	800e1ce <_dtoa_r+0x366>
 800e1bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e1c4:	f7f2 fa40 	bl	8000648 <__aeabi_dmul>
 800e1c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1cc:	3601      	adds	r6, #1
 800e1ce:	1064      	asrs	r4, r4, #1
 800e1d0:	3508      	adds	r5, #8
 800e1d2:	e7e5      	b.n	800e1a0 <_dtoa_r+0x338>
 800e1d4:	f000 80d2 	beq.w	800e37c <_dtoa_r+0x514>
 800e1d8:	427c      	negs	r4, r7
 800e1da:	4b92      	ldr	r3, [pc, #584]	@ (800e424 <_dtoa_r+0x5bc>)
 800e1dc:	4d92      	ldr	r5, [pc, #584]	@ (800e428 <_dtoa_r+0x5c0>)
 800e1de:	f004 020f 	and.w	r2, r4, #15
 800e1e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e1ee:	f7f2 fa2b 	bl	8000648 <__aeabi_dmul>
 800e1f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1f6:	1124      	asrs	r4, r4, #4
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	2602      	movs	r6, #2
 800e1fc:	2c00      	cmp	r4, #0
 800e1fe:	f040 80b2 	bne.w	800e366 <_dtoa_r+0x4fe>
 800e202:	2b00      	cmp	r3, #0
 800e204:	d1d3      	bne.n	800e1ae <_dtoa_r+0x346>
 800e206:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e208:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f000 80b7 	beq.w	800e380 <_dtoa_r+0x518>
 800e212:	4b86      	ldr	r3, [pc, #536]	@ (800e42c <_dtoa_r+0x5c4>)
 800e214:	2200      	movs	r2, #0
 800e216:	4620      	mov	r0, r4
 800e218:	4629      	mov	r1, r5
 800e21a:	f7f2 fc87 	bl	8000b2c <__aeabi_dcmplt>
 800e21e:	2800      	cmp	r0, #0
 800e220:	f000 80ae 	beq.w	800e380 <_dtoa_r+0x518>
 800e224:	9b07      	ldr	r3, [sp, #28]
 800e226:	2b00      	cmp	r3, #0
 800e228:	f000 80aa 	beq.w	800e380 <_dtoa_r+0x518>
 800e22c:	9b00      	ldr	r3, [sp, #0]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	dd37      	ble.n	800e2a2 <_dtoa_r+0x43a>
 800e232:	1e7b      	subs	r3, r7, #1
 800e234:	9304      	str	r3, [sp, #16]
 800e236:	4620      	mov	r0, r4
 800e238:	4b7d      	ldr	r3, [pc, #500]	@ (800e430 <_dtoa_r+0x5c8>)
 800e23a:	2200      	movs	r2, #0
 800e23c:	4629      	mov	r1, r5
 800e23e:	f7f2 fa03 	bl	8000648 <__aeabi_dmul>
 800e242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e246:	9c00      	ldr	r4, [sp, #0]
 800e248:	3601      	adds	r6, #1
 800e24a:	4630      	mov	r0, r6
 800e24c:	f7f2 f992 	bl	8000574 <__aeabi_i2d>
 800e250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e254:	f7f2 f9f8 	bl	8000648 <__aeabi_dmul>
 800e258:	4b76      	ldr	r3, [pc, #472]	@ (800e434 <_dtoa_r+0x5cc>)
 800e25a:	2200      	movs	r2, #0
 800e25c:	f7f2 f83e 	bl	80002dc <__adddf3>
 800e260:	4605      	mov	r5, r0
 800e262:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e266:	2c00      	cmp	r4, #0
 800e268:	f040 808d 	bne.w	800e386 <_dtoa_r+0x51e>
 800e26c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e270:	4b71      	ldr	r3, [pc, #452]	@ (800e438 <_dtoa_r+0x5d0>)
 800e272:	2200      	movs	r2, #0
 800e274:	f7f2 f830 	bl	80002d8 <__aeabi_dsub>
 800e278:	4602      	mov	r2, r0
 800e27a:	460b      	mov	r3, r1
 800e27c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e280:	462a      	mov	r2, r5
 800e282:	4633      	mov	r3, r6
 800e284:	f7f2 fc70 	bl	8000b68 <__aeabi_dcmpgt>
 800e288:	2800      	cmp	r0, #0
 800e28a:	f040 828b 	bne.w	800e7a4 <_dtoa_r+0x93c>
 800e28e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e292:	462a      	mov	r2, r5
 800e294:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e298:	f7f2 fc48 	bl	8000b2c <__aeabi_dcmplt>
 800e29c:	2800      	cmp	r0, #0
 800e29e:	f040 8128 	bne.w	800e4f2 <_dtoa_r+0x68a>
 800e2a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e2a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e2aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f2c0 815a 	blt.w	800e566 <_dtoa_r+0x6fe>
 800e2b2:	2f0e      	cmp	r7, #14
 800e2b4:	f300 8157 	bgt.w	800e566 <_dtoa_r+0x6fe>
 800e2b8:	4b5a      	ldr	r3, [pc, #360]	@ (800e424 <_dtoa_r+0x5bc>)
 800e2ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e2be:	ed93 7b00 	vldr	d7, [r3]
 800e2c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	ed8d 7b00 	vstr	d7, [sp]
 800e2ca:	da03      	bge.n	800e2d4 <_dtoa_r+0x46c>
 800e2cc:	9b07      	ldr	r3, [sp, #28]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	f340 8101 	ble.w	800e4d6 <_dtoa_r+0x66e>
 800e2d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e2d8:	4656      	mov	r6, sl
 800e2da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2de:	4620      	mov	r0, r4
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	f7f2 fadb 	bl	800089c <__aeabi_ddiv>
 800e2e6:	f7f2 fc5f 	bl	8000ba8 <__aeabi_d2iz>
 800e2ea:	4680      	mov	r8, r0
 800e2ec:	f7f2 f942 	bl	8000574 <__aeabi_i2d>
 800e2f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2f4:	f7f2 f9a8 	bl	8000648 <__aeabi_dmul>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	4629      	mov	r1, r5
 800e300:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e304:	f7f1 ffe8 	bl	80002d8 <__aeabi_dsub>
 800e308:	f806 4b01 	strb.w	r4, [r6], #1
 800e30c:	9d07      	ldr	r5, [sp, #28]
 800e30e:	eba6 040a 	sub.w	r4, r6, sl
 800e312:	42a5      	cmp	r5, r4
 800e314:	4602      	mov	r2, r0
 800e316:	460b      	mov	r3, r1
 800e318:	f040 8117 	bne.w	800e54a <_dtoa_r+0x6e2>
 800e31c:	f7f1 ffde 	bl	80002dc <__adddf3>
 800e320:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e324:	4604      	mov	r4, r0
 800e326:	460d      	mov	r5, r1
 800e328:	f7f2 fc1e 	bl	8000b68 <__aeabi_dcmpgt>
 800e32c:	2800      	cmp	r0, #0
 800e32e:	f040 80f9 	bne.w	800e524 <_dtoa_r+0x6bc>
 800e332:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e336:	4620      	mov	r0, r4
 800e338:	4629      	mov	r1, r5
 800e33a:	f7f2 fbed 	bl	8000b18 <__aeabi_dcmpeq>
 800e33e:	b118      	cbz	r0, 800e348 <_dtoa_r+0x4e0>
 800e340:	f018 0f01 	tst.w	r8, #1
 800e344:	f040 80ee 	bne.w	800e524 <_dtoa_r+0x6bc>
 800e348:	4649      	mov	r1, r9
 800e34a:	4658      	mov	r0, fp
 800e34c:	f000 fc90 	bl	800ec70 <_Bfree>
 800e350:	2300      	movs	r3, #0
 800e352:	7033      	strb	r3, [r6, #0]
 800e354:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e356:	3701      	adds	r7, #1
 800e358:	601f      	str	r7, [r3, #0]
 800e35a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	f000 831d 	beq.w	800e99c <_dtoa_r+0xb34>
 800e362:	601e      	str	r6, [r3, #0]
 800e364:	e31a      	b.n	800e99c <_dtoa_r+0xb34>
 800e366:	07e2      	lsls	r2, r4, #31
 800e368:	d505      	bpl.n	800e376 <_dtoa_r+0x50e>
 800e36a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e36e:	f7f2 f96b 	bl	8000648 <__aeabi_dmul>
 800e372:	3601      	adds	r6, #1
 800e374:	2301      	movs	r3, #1
 800e376:	1064      	asrs	r4, r4, #1
 800e378:	3508      	adds	r5, #8
 800e37a:	e73f      	b.n	800e1fc <_dtoa_r+0x394>
 800e37c:	2602      	movs	r6, #2
 800e37e:	e742      	b.n	800e206 <_dtoa_r+0x39e>
 800e380:	9c07      	ldr	r4, [sp, #28]
 800e382:	9704      	str	r7, [sp, #16]
 800e384:	e761      	b.n	800e24a <_dtoa_r+0x3e2>
 800e386:	4b27      	ldr	r3, [pc, #156]	@ (800e424 <_dtoa_r+0x5bc>)
 800e388:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e38a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e38e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e392:	4454      	add	r4, sl
 800e394:	2900      	cmp	r1, #0
 800e396:	d053      	beq.n	800e440 <_dtoa_r+0x5d8>
 800e398:	4928      	ldr	r1, [pc, #160]	@ (800e43c <_dtoa_r+0x5d4>)
 800e39a:	2000      	movs	r0, #0
 800e39c:	f7f2 fa7e 	bl	800089c <__aeabi_ddiv>
 800e3a0:	4633      	mov	r3, r6
 800e3a2:	462a      	mov	r2, r5
 800e3a4:	f7f1 ff98 	bl	80002d8 <__aeabi_dsub>
 800e3a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e3ac:	4656      	mov	r6, sl
 800e3ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3b2:	f7f2 fbf9 	bl	8000ba8 <__aeabi_d2iz>
 800e3b6:	4605      	mov	r5, r0
 800e3b8:	f7f2 f8dc 	bl	8000574 <__aeabi_i2d>
 800e3bc:	4602      	mov	r2, r0
 800e3be:	460b      	mov	r3, r1
 800e3c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3c4:	f7f1 ff88 	bl	80002d8 <__aeabi_dsub>
 800e3c8:	3530      	adds	r5, #48	@ 0x30
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	460b      	mov	r3, r1
 800e3ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e3d2:	f806 5b01 	strb.w	r5, [r6], #1
 800e3d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e3da:	f7f2 fba7 	bl	8000b2c <__aeabi_dcmplt>
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	d171      	bne.n	800e4c6 <_dtoa_r+0x65e>
 800e3e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3e6:	4911      	ldr	r1, [pc, #68]	@ (800e42c <_dtoa_r+0x5c4>)
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	f7f1 ff75 	bl	80002d8 <__aeabi_dsub>
 800e3ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e3f2:	f7f2 fb9b 	bl	8000b2c <__aeabi_dcmplt>
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	f040 8095 	bne.w	800e526 <_dtoa_r+0x6be>
 800e3fc:	42a6      	cmp	r6, r4
 800e3fe:	f43f af50 	beq.w	800e2a2 <_dtoa_r+0x43a>
 800e402:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e406:	4b0a      	ldr	r3, [pc, #40]	@ (800e430 <_dtoa_r+0x5c8>)
 800e408:	2200      	movs	r2, #0
 800e40a:	f7f2 f91d 	bl	8000648 <__aeabi_dmul>
 800e40e:	4b08      	ldr	r3, [pc, #32]	@ (800e430 <_dtoa_r+0x5c8>)
 800e410:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e414:	2200      	movs	r2, #0
 800e416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e41a:	f7f2 f915 	bl	8000648 <__aeabi_dmul>
 800e41e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e422:	e7c4      	b.n	800e3ae <_dtoa_r+0x546>
 800e424:	08011878 	.word	0x08011878
 800e428:	08011850 	.word	0x08011850
 800e42c:	3ff00000 	.word	0x3ff00000
 800e430:	40240000 	.word	0x40240000
 800e434:	401c0000 	.word	0x401c0000
 800e438:	40140000 	.word	0x40140000
 800e43c:	3fe00000 	.word	0x3fe00000
 800e440:	4631      	mov	r1, r6
 800e442:	4628      	mov	r0, r5
 800e444:	f7f2 f900 	bl	8000648 <__aeabi_dmul>
 800e448:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e44c:	9415      	str	r4, [sp, #84]	@ 0x54
 800e44e:	4656      	mov	r6, sl
 800e450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e454:	f7f2 fba8 	bl	8000ba8 <__aeabi_d2iz>
 800e458:	4605      	mov	r5, r0
 800e45a:	f7f2 f88b 	bl	8000574 <__aeabi_i2d>
 800e45e:	4602      	mov	r2, r0
 800e460:	460b      	mov	r3, r1
 800e462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e466:	f7f1 ff37 	bl	80002d8 <__aeabi_dsub>
 800e46a:	3530      	adds	r5, #48	@ 0x30
 800e46c:	f806 5b01 	strb.w	r5, [r6], #1
 800e470:	4602      	mov	r2, r0
 800e472:	460b      	mov	r3, r1
 800e474:	42a6      	cmp	r6, r4
 800e476:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e47a:	f04f 0200 	mov.w	r2, #0
 800e47e:	d124      	bne.n	800e4ca <_dtoa_r+0x662>
 800e480:	4bac      	ldr	r3, [pc, #688]	@ (800e734 <_dtoa_r+0x8cc>)
 800e482:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e486:	f7f1 ff29 	bl	80002dc <__adddf3>
 800e48a:	4602      	mov	r2, r0
 800e48c:	460b      	mov	r3, r1
 800e48e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e492:	f7f2 fb69 	bl	8000b68 <__aeabi_dcmpgt>
 800e496:	2800      	cmp	r0, #0
 800e498:	d145      	bne.n	800e526 <_dtoa_r+0x6be>
 800e49a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e49e:	49a5      	ldr	r1, [pc, #660]	@ (800e734 <_dtoa_r+0x8cc>)
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	f7f1 ff19 	bl	80002d8 <__aeabi_dsub>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4ae:	f7f2 fb3d 	bl	8000b2c <__aeabi_dcmplt>
 800e4b2:	2800      	cmp	r0, #0
 800e4b4:	f43f aef5 	beq.w	800e2a2 <_dtoa_r+0x43a>
 800e4b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e4ba:	1e73      	subs	r3, r6, #1
 800e4bc:	9315      	str	r3, [sp, #84]	@ 0x54
 800e4be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e4c2:	2b30      	cmp	r3, #48	@ 0x30
 800e4c4:	d0f8      	beq.n	800e4b8 <_dtoa_r+0x650>
 800e4c6:	9f04      	ldr	r7, [sp, #16]
 800e4c8:	e73e      	b.n	800e348 <_dtoa_r+0x4e0>
 800e4ca:	4b9b      	ldr	r3, [pc, #620]	@ (800e738 <_dtoa_r+0x8d0>)
 800e4cc:	f7f2 f8bc 	bl	8000648 <__aeabi_dmul>
 800e4d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4d4:	e7bc      	b.n	800e450 <_dtoa_r+0x5e8>
 800e4d6:	d10c      	bne.n	800e4f2 <_dtoa_r+0x68a>
 800e4d8:	4b98      	ldr	r3, [pc, #608]	@ (800e73c <_dtoa_r+0x8d4>)
 800e4da:	2200      	movs	r2, #0
 800e4dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4e0:	f7f2 f8b2 	bl	8000648 <__aeabi_dmul>
 800e4e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4e8:	f7f2 fb34 	bl	8000b54 <__aeabi_dcmpge>
 800e4ec:	2800      	cmp	r0, #0
 800e4ee:	f000 8157 	beq.w	800e7a0 <_dtoa_r+0x938>
 800e4f2:	2400      	movs	r4, #0
 800e4f4:	4625      	mov	r5, r4
 800e4f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4f8:	43db      	mvns	r3, r3
 800e4fa:	9304      	str	r3, [sp, #16]
 800e4fc:	4656      	mov	r6, sl
 800e4fe:	2700      	movs	r7, #0
 800e500:	4621      	mov	r1, r4
 800e502:	4658      	mov	r0, fp
 800e504:	f000 fbb4 	bl	800ec70 <_Bfree>
 800e508:	2d00      	cmp	r5, #0
 800e50a:	d0dc      	beq.n	800e4c6 <_dtoa_r+0x65e>
 800e50c:	b12f      	cbz	r7, 800e51a <_dtoa_r+0x6b2>
 800e50e:	42af      	cmp	r7, r5
 800e510:	d003      	beq.n	800e51a <_dtoa_r+0x6b2>
 800e512:	4639      	mov	r1, r7
 800e514:	4658      	mov	r0, fp
 800e516:	f000 fbab 	bl	800ec70 <_Bfree>
 800e51a:	4629      	mov	r1, r5
 800e51c:	4658      	mov	r0, fp
 800e51e:	f000 fba7 	bl	800ec70 <_Bfree>
 800e522:	e7d0      	b.n	800e4c6 <_dtoa_r+0x65e>
 800e524:	9704      	str	r7, [sp, #16]
 800e526:	4633      	mov	r3, r6
 800e528:	461e      	mov	r6, r3
 800e52a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e52e:	2a39      	cmp	r2, #57	@ 0x39
 800e530:	d107      	bne.n	800e542 <_dtoa_r+0x6da>
 800e532:	459a      	cmp	sl, r3
 800e534:	d1f8      	bne.n	800e528 <_dtoa_r+0x6c0>
 800e536:	9a04      	ldr	r2, [sp, #16]
 800e538:	3201      	adds	r2, #1
 800e53a:	9204      	str	r2, [sp, #16]
 800e53c:	2230      	movs	r2, #48	@ 0x30
 800e53e:	f88a 2000 	strb.w	r2, [sl]
 800e542:	781a      	ldrb	r2, [r3, #0]
 800e544:	3201      	adds	r2, #1
 800e546:	701a      	strb	r2, [r3, #0]
 800e548:	e7bd      	b.n	800e4c6 <_dtoa_r+0x65e>
 800e54a:	4b7b      	ldr	r3, [pc, #492]	@ (800e738 <_dtoa_r+0x8d0>)
 800e54c:	2200      	movs	r2, #0
 800e54e:	f7f2 f87b 	bl	8000648 <__aeabi_dmul>
 800e552:	2200      	movs	r2, #0
 800e554:	2300      	movs	r3, #0
 800e556:	4604      	mov	r4, r0
 800e558:	460d      	mov	r5, r1
 800e55a:	f7f2 fadd 	bl	8000b18 <__aeabi_dcmpeq>
 800e55e:	2800      	cmp	r0, #0
 800e560:	f43f aebb 	beq.w	800e2da <_dtoa_r+0x472>
 800e564:	e6f0      	b.n	800e348 <_dtoa_r+0x4e0>
 800e566:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e568:	2a00      	cmp	r2, #0
 800e56a:	f000 80db 	beq.w	800e724 <_dtoa_r+0x8bc>
 800e56e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e570:	2a01      	cmp	r2, #1
 800e572:	f300 80bf 	bgt.w	800e6f4 <_dtoa_r+0x88c>
 800e576:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e578:	2a00      	cmp	r2, #0
 800e57a:	f000 80b7 	beq.w	800e6ec <_dtoa_r+0x884>
 800e57e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e582:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e584:	4646      	mov	r6, r8
 800e586:	9a08      	ldr	r2, [sp, #32]
 800e588:	2101      	movs	r1, #1
 800e58a:	441a      	add	r2, r3
 800e58c:	4658      	mov	r0, fp
 800e58e:	4498      	add	r8, r3
 800e590:	9208      	str	r2, [sp, #32]
 800e592:	f000 fc6b 	bl	800ee6c <__i2b>
 800e596:	4605      	mov	r5, r0
 800e598:	b15e      	cbz	r6, 800e5b2 <_dtoa_r+0x74a>
 800e59a:	9b08      	ldr	r3, [sp, #32]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	dd08      	ble.n	800e5b2 <_dtoa_r+0x74a>
 800e5a0:	42b3      	cmp	r3, r6
 800e5a2:	9a08      	ldr	r2, [sp, #32]
 800e5a4:	bfa8      	it	ge
 800e5a6:	4633      	movge	r3, r6
 800e5a8:	eba8 0803 	sub.w	r8, r8, r3
 800e5ac:	1af6      	subs	r6, r6, r3
 800e5ae:	1ad3      	subs	r3, r2, r3
 800e5b0:	9308      	str	r3, [sp, #32]
 800e5b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5b4:	b1f3      	cbz	r3, 800e5f4 <_dtoa_r+0x78c>
 800e5b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	f000 80b7 	beq.w	800e72c <_dtoa_r+0x8c4>
 800e5be:	b18c      	cbz	r4, 800e5e4 <_dtoa_r+0x77c>
 800e5c0:	4629      	mov	r1, r5
 800e5c2:	4622      	mov	r2, r4
 800e5c4:	4658      	mov	r0, fp
 800e5c6:	f000 fd11 	bl	800efec <__pow5mult>
 800e5ca:	464a      	mov	r2, r9
 800e5cc:	4601      	mov	r1, r0
 800e5ce:	4605      	mov	r5, r0
 800e5d0:	4658      	mov	r0, fp
 800e5d2:	f000 fc61 	bl	800ee98 <__multiply>
 800e5d6:	4649      	mov	r1, r9
 800e5d8:	9004      	str	r0, [sp, #16]
 800e5da:	4658      	mov	r0, fp
 800e5dc:	f000 fb48 	bl	800ec70 <_Bfree>
 800e5e0:	9b04      	ldr	r3, [sp, #16]
 800e5e2:	4699      	mov	r9, r3
 800e5e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5e6:	1b1a      	subs	r2, r3, r4
 800e5e8:	d004      	beq.n	800e5f4 <_dtoa_r+0x78c>
 800e5ea:	4649      	mov	r1, r9
 800e5ec:	4658      	mov	r0, fp
 800e5ee:	f000 fcfd 	bl	800efec <__pow5mult>
 800e5f2:	4681      	mov	r9, r0
 800e5f4:	2101      	movs	r1, #1
 800e5f6:	4658      	mov	r0, fp
 800e5f8:	f000 fc38 	bl	800ee6c <__i2b>
 800e5fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5fe:	4604      	mov	r4, r0
 800e600:	2b00      	cmp	r3, #0
 800e602:	f000 81cf 	beq.w	800e9a4 <_dtoa_r+0xb3c>
 800e606:	461a      	mov	r2, r3
 800e608:	4601      	mov	r1, r0
 800e60a:	4658      	mov	r0, fp
 800e60c:	f000 fcee 	bl	800efec <__pow5mult>
 800e610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e612:	2b01      	cmp	r3, #1
 800e614:	4604      	mov	r4, r0
 800e616:	f300 8095 	bgt.w	800e744 <_dtoa_r+0x8dc>
 800e61a:	9b02      	ldr	r3, [sp, #8]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	f040 8087 	bne.w	800e730 <_dtoa_r+0x8c8>
 800e622:	9b03      	ldr	r3, [sp, #12]
 800e624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e628:	2b00      	cmp	r3, #0
 800e62a:	f040 8089 	bne.w	800e740 <_dtoa_r+0x8d8>
 800e62e:	9b03      	ldr	r3, [sp, #12]
 800e630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e634:	0d1b      	lsrs	r3, r3, #20
 800e636:	051b      	lsls	r3, r3, #20
 800e638:	b12b      	cbz	r3, 800e646 <_dtoa_r+0x7de>
 800e63a:	9b08      	ldr	r3, [sp, #32]
 800e63c:	3301      	adds	r3, #1
 800e63e:	9308      	str	r3, [sp, #32]
 800e640:	f108 0801 	add.w	r8, r8, #1
 800e644:	2301      	movs	r3, #1
 800e646:	930a      	str	r3, [sp, #40]	@ 0x28
 800e648:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	f000 81b0 	beq.w	800e9b0 <_dtoa_r+0xb48>
 800e650:	6923      	ldr	r3, [r4, #16]
 800e652:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e656:	6918      	ldr	r0, [r3, #16]
 800e658:	f000 fbbc 	bl	800edd4 <__hi0bits>
 800e65c:	f1c0 0020 	rsb	r0, r0, #32
 800e660:	9b08      	ldr	r3, [sp, #32]
 800e662:	4418      	add	r0, r3
 800e664:	f010 001f 	ands.w	r0, r0, #31
 800e668:	d077      	beq.n	800e75a <_dtoa_r+0x8f2>
 800e66a:	f1c0 0320 	rsb	r3, r0, #32
 800e66e:	2b04      	cmp	r3, #4
 800e670:	dd6b      	ble.n	800e74a <_dtoa_r+0x8e2>
 800e672:	9b08      	ldr	r3, [sp, #32]
 800e674:	f1c0 001c 	rsb	r0, r0, #28
 800e678:	4403      	add	r3, r0
 800e67a:	4480      	add	r8, r0
 800e67c:	4406      	add	r6, r0
 800e67e:	9308      	str	r3, [sp, #32]
 800e680:	f1b8 0f00 	cmp.w	r8, #0
 800e684:	dd05      	ble.n	800e692 <_dtoa_r+0x82a>
 800e686:	4649      	mov	r1, r9
 800e688:	4642      	mov	r2, r8
 800e68a:	4658      	mov	r0, fp
 800e68c:	f000 fd08 	bl	800f0a0 <__lshift>
 800e690:	4681      	mov	r9, r0
 800e692:	9b08      	ldr	r3, [sp, #32]
 800e694:	2b00      	cmp	r3, #0
 800e696:	dd05      	ble.n	800e6a4 <_dtoa_r+0x83c>
 800e698:	4621      	mov	r1, r4
 800e69a:	461a      	mov	r2, r3
 800e69c:	4658      	mov	r0, fp
 800e69e:	f000 fcff 	bl	800f0a0 <__lshift>
 800e6a2:	4604      	mov	r4, r0
 800e6a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d059      	beq.n	800e75e <_dtoa_r+0x8f6>
 800e6aa:	4621      	mov	r1, r4
 800e6ac:	4648      	mov	r0, r9
 800e6ae:	f000 fd63 	bl	800f178 <__mcmp>
 800e6b2:	2800      	cmp	r0, #0
 800e6b4:	da53      	bge.n	800e75e <_dtoa_r+0x8f6>
 800e6b6:	1e7b      	subs	r3, r7, #1
 800e6b8:	9304      	str	r3, [sp, #16]
 800e6ba:	4649      	mov	r1, r9
 800e6bc:	2300      	movs	r3, #0
 800e6be:	220a      	movs	r2, #10
 800e6c0:	4658      	mov	r0, fp
 800e6c2:	f000 faf7 	bl	800ecb4 <__multadd>
 800e6c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6c8:	4681      	mov	r9, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	f000 8172 	beq.w	800e9b4 <_dtoa_r+0xb4c>
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	4629      	mov	r1, r5
 800e6d4:	220a      	movs	r2, #10
 800e6d6:	4658      	mov	r0, fp
 800e6d8:	f000 faec 	bl	800ecb4 <__multadd>
 800e6dc:	9b00      	ldr	r3, [sp, #0]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	4605      	mov	r5, r0
 800e6e2:	dc67      	bgt.n	800e7b4 <_dtoa_r+0x94c>
 800e6e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6e6:	2b02      	cmp	r3, #2
 800e6e8:	dc41      	bgt.n	800e76e <_dtoa_r+0x906>
 800e6ea:	e063      	b.n	800e7b4 <_dtoa_r+0x94c>
 800e6ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e6ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e6f2:	e746      	b.n	800e582 <_dtoa_r+0x71a>
 800e6f4:	9b07      	ldr	r3, [sp, #28]
 800e6f6:	1e5c      	subs	r4, r3, #1
 800e6f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6fa:	42a3      	cmp	r3, r4
 800e6fc:	bfbf      	itttt	lt
 800e6fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e700:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e702:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e704:	1ae3      	sublt	r3, r4, r3
 800e706:	bfb4      	ite	lt
 800e708:	18d2      	addlt	r2, r2, r3
 800e70a:	1b1c      	subge	r4, r3, r4
 800e70c:	9b07      	ldr	r3, [sp, #28]
 800e70e:	bfbc      	itt	lt
 800e710:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e712:	2400      	movlt	r4, #0
 800e714:	2b00      	cmp	r3, #0
 800e716:	bfb5      	itete	lt
 800e718:	eba8 0603 	sublt.w	r6, r8, r3
 800e71c:	9b07      	ldrge	r3, [sp, #28]
 800e71e:	2300      	movlt	r3, #0
 800e720:	4646      	movge	r6, r8
 800e722:	e730      	b.n	800e586 <_dtoa_r+0x71e>
 800e724:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e726:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e728:	4646      	mov	r6, r8
 800e72a:	e735      	b.n	800e598 <_dtoa_r+0x730>
 800e72c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e72e:	e75c      	b.n	800e5ea <_dtoa_r+0x782>
 800e730:	2300      	movs	r3, #0
 800e732:	e788      	b.n	800e646 <_dtoa_r+0x7de>
 800e734:	3fe00000 	.word	0x3fe00000
 800e738:	40240000 	.word	0x40240000
 800e73c:	40140000 	.word	0x40140000
 800e740:	9b02      	ldr	r3, [sp, #8]
 800e742:	e780      	b.n	800e646 <_dtoa_r+0x7de>
 800e744:	2300      	movs	r3, #0
 800e746:	930a      	str	r3, [sp, #40]	@ 0x28
 800e748:	e782      	b.n	800e650 <_dtoa_r+0x7e8>
 800e74a:	d099      	beq.n	800e680 <_dtoa_r+0x818>
 800e74c:	9a08      	ldr	r2, [sp, #32]
 800e74e:	331c      	adds	r3, #28
 800e750:	441a      	add	r2, r3
 800e752:	4498      	add	r8, r3
 800e754:	441e      	add	r6, r3
 800e756:	9208      	str	r2, [sp, #32]
 800e758:	e792      	b.n	800e680 <_dtoa_r+0x818>
 800e75a:	4603      	mov	r3, r0
 800e75c:	e7f6      	b.n	800e74c <_dtoa_r+0x8e4>
 800e75e:	9b07      	ldr	r3, [sp, #28]
 800e760:	9704      	str	r7, [sp, #16]
 800e762:	2b00      	cmp	r3, #0
 800e764:	dc20      	bgt.n	800e7a8 <_dtoa_r+0x940>
 800e766:	9300      	str	r3, [sp, #0]
 800e768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e76a:	2b02      	cmp	r3, #2
 800e76c:	dd1e      	ble.n	800e7ac <_dtoa_r+0x944>
 800e76e:	9b00      	ldr	r3, [sp, #0]
 800e770:	2b00      	cmp	r3, #0
 800e772:	f47f aec0 	bne.w	800e4f6 <_dtoa_r+0x68e>
 800e776:	4621      	mov	r1, r4
 800e778:	2205      	movs	r2, #5
 800e77a:	4658      	mov	r0, fp
 800e77c:	f000 fa9a 	bl	800ecb4 <__multadd>
 800e780:	4601      	mov	r1, r0
 800e782:	4604      	mov	r4, r0
 800e784:	4648      	mov	r0, r9
 800e786:	f000 fcf7 	bl	800f178 <__mcmp>
 800e78a:	2800      	cmp	r0, #0
 800e78c:	f77f aeb3 	ble.w	800e4f6 <_dtoa_r+0x68e>
 800e790:	4656      	mov	r6, sl
 800e792:	2331      	movs	r3, #49	@ 0x31
 800e794:	f806 3b01 	strb.w	r3, [r6], #1
 800e798:	9b04      	ldr	r3, [sp, #16]
 800e79a:	3301      	adds	r3, #1
 800e79c:	9304      	str	r3, [sp, #16]
 800e79e:	e6ae      	b.n	800e4fe <_dtoa_r+0x696>
 800e7a0:	9c07      	ldr	r4, [sp, #28]
 800e7a2:	9704      	str	r7, [sp, #16]
 800e7a4:	4625      	mov	r5, r4
 800e7a6:	e7f3      	b.n	800e790 <_dtoa_r+0x928>
 800e7a8:	9b07      	ldr	r3, [sp, #28]
 800e7aa:	9300      	str	r3, [sp, #0]
 800e7ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	f000 8104 	beq.w	800e9bc <_dtoa_r+0xb54>
 800e7b4:	2e00      	cmp	r6, #0
 800e7b6:	dd05      	ble.n	800e7c4 <_dtoa_r+0x95c>
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	4632      	mov	r2, r6
 800e7bc:	4658      	mov	r0, fp
 800e7be:	f000 fc6f 	bl	800f0a0 <__lshift>
 800e7c2:	4605      	mov	r5, r0
 800e7c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d05a      	beq.n	800e880 <_dtoa_r+0xa18>
 800e7ca:	6869      	ldr	r1, [r5, #4]
 800e7cc:	4658      	mov	r0, fp
 800e7ce:	f000 fa0f 	bl	800ebf0 <_Balloc>
 800e7d2:	4606      	mov	r6, r0
 800e7d4:	b928      	cbnz	r0, 800e7e2 <_dtoa_r+0x97a>
 800e7d6:	4b84      	ldr	r3, [pc, #528]	@ (800e9e8 <_dtoa_r+0xb80>)
 800e7d8:	4602      	mov	r2, r0
 800e7da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e7de:	f7ff bb5a 	b.w	800de96 <_dtoa_r+0x2e>
 800e7e2:	692a      	ldr	r2, [r5, #16]
 800e7e4:	3202      	adds	r2, #2
 800e7e6:	0092      	lsls	r2, r2, #2
 800e7e8:	f105 010c 	add.w	r1, r5, #12
 800e7ec:	300c      	adds	r0, #12
 800e7ee:	f001 ff75 	bl	80106dc <memcpy>
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	4631      	mov	r1, r6
 800e7f6:	4658      	mov	r0, fp
 800e7f8:	f000 fc52 	bl	800f0a0 <__lshift>
 800e7fc:	f10a 0301 	add.w	r3, sl, #1
 800e800:	9307      	str	r3, [sp, #28]
 800e802:	9b00      	ldr	r3, [sp, #0]
 800e804:	4453      	add	r3, sl
 800e806:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e808:	9b02      	ldr	r3, [sp, #8]
 800e80a:	f003 0301 	and.w	r3, r3, #1
 800e80e:	462f      	mov	r7, r5
 800e810:	930a      	str	r3, [sp, #40]	@ 0x28
 800e812:	4605      	mov	r5, r0
 800e814:	9b07      	ldr	r3, [sp, #28]
 800e816:	4621      	mov	r1, r4
 800e818:	3b01      	subs	r3, #1
 800e81a:	4648      	mov	r0, r9
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	f7ff fa99 	bl	800dd54 <quorem>
 800e822:	4639      	mov	r1, r7
 800e824:	9002      	str	r0, [sp, #8]
 800e826:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e82a:	4648      	mov	r0, r9
 800e82c:	f000 fca4 	bl	800f178 <__mcmp>
 800e830:	462a      	mov	r2, r5
 800e832:	9008      	str	r0, [sp, #32]
 800e834:	4621      	mov	r1, r4
 800e836:	4658      	mov	r0, fp
 800e838:	f000 fcba 	bl	800f1b0 <__mdiff>
 800e83c:	68c2      	ldr	r2, [r0, #12]
 800e83e:	4606      	mov	r6, r0
 800e840:	bb02      	cbnz	r2, 800e884 <_dtoa_r+0xa1c>
 800e842:	4601      	mov	r1, r0
 800e844:	4648      	mov	r0, r9
 800e846:	f000 fc97 	bl	800f178 <__mcmp>
 800e84a:	4602      	mov	r2, r0
 800e84c:	4631      	mov	r1, r6
 800e84e:	4658      	mov	r0, fp
 800e850:	920e      	str	r2, [sp, #56]	@ 0x38
 800e852:	f000 fa0d 	bl	800ec70 <_Bfree>
 800e856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e858:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e85a:	9e07      	ldr	r6, [sp, #28]
 800e85c:	ea43 0102 	orr.w	r1, r3, r2
 800e860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e862:	4319      	orrs	r1, r3
 800e864:	d110      	bne.n	800e888 <_dtoa_r+0xa20>
 800e866:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e86a:	d029      	beq.n	800e8c0 <_dtoa_r+0xa58>
 800e86c:	9b08      	ldr	r3, [sp, #32]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	dd02      	ble.n	800e878 <_dtoa_r+0xa10>
 800e872:	9b02      	ldr	r3, [sp, #8]
 800e874:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e878:	9b00      	ldr	r3, [sp, #0]
 800e87a:	f883 8000 	strb.w	r8, [r3]
 800e87e:	e63f      	b.n	800e500 <_dtoa_r+0x698>
 800e880:	4628      	mov	r0, r5
 800e882:	e7bb      	b.n	800e7fc <_dtoa_r+0x994>
 800e884:	2201      	movs	r2, #1
 800e886:	e7e1      	b.n	800e84c <_dtoa_r+0x9e4>
 800e888:	9b08      	ldr	r3, [sp, #32]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	db04      	blt.n	800e898 <_dtoa_r+0xa30>
 800e88e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e890:	430b      	orrs	r3, r1
 800e892:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e894:	430b      	orrs	r3, r1
 800e896:	d120      	bne.n	800e8da <_dtoa_r+0xa72>
 800e898:	2a00      	cmp	r2, #0
 800e89a:	dded      	ble.n	800e878 <_dtoa_r+0xa10>
 800e89c:	4649      	mov	r1, r9
 800e89e:	2201      	movs	r2, #1
 800e8a0:	4658      	mov	r0, fp
 800e8a2:	f000 fbfd 	bl	800f0a0 <__lshift>
 800e8a6:	4621      	mov	r1, r4
 800e8a8:	4681      	mov	r9, r0
 800e8aa:	f000 fc65 	bl	800f178 <__mcmp>
 800e8ae:	2800      	cmp	r0, #0
 800e8b0:	dc03      	bgt.n	800e8ba <_dtoa_r+0xa52>
 800e8b2:	d1e1      	bne.n	800e878 <_dtoa_r+0xa10>
 800e8b4:	f018 0f01 	tst.w	r8, #1
 800e8b8:	d0de      	beq.n	800e878 <_dtoa_r+0xa10>
 800e8ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e8be:	d1d8      	bne.n	800e872 <_dtoa_r+0xa0a>
 800e8c0:	9a00      	ldr	r2, [sp, #0]
 800e8c2:	2339      	movs	r3, #57	@ 0x39
 800e8c4:	7013      	strb	r3, [r2, #0]
 800e8c6:	4633      	mov	r3, r6
 800e8c8:	461e      	mov	r6, r3
 800e8ca:	3b01      	subs	r3, #1
 800e8cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e8d0:	2a39      	cmp	r2, #57	@ 0x39
 800e8d2:	d052      	beq.n	800e97a <_dtoa_r+0xb12>
 800e8d4:	3201      	adds	r2, #1
 800e8d6:	701a      	strb	r2, [r3, #0]
 800e8d8:	e612      	b.n	800e500 <_dtoa_r+0x698>
 800e8da:	2a00      	cmp	r2, #0
 800e8dc:	dd07      	ble.n	800e8ee <_dtoa_r+0xa86>
 800e8de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e8e2:	d0ed      	beq.n	800e8c0 <_dtoa_r+0xa58>
 800e8e4:	9a00      	ldr	r2, [sp, #0]
 800e8e6:	f108 0301 	add.w	r3, r8, #1
 800e8ea:	7013      	strb	r3, [r2, #0]
 800e8ec:	e608      	b.n	800e500 <_dtoa_r+0x698>
 800e8ee:	9b07      	ldr	r3, [sp, #28]
 800e8f0:	9a07      	ldr	r2, [sp, #28]
 800e8f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e8f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	d028      	beq.n	800e94e <_dtoa_r+0xae6>
 800e8fc:	4649      	mov	r1, r9
 800e8fe:	2300      	movs	r3, #0
 800e900:	220a      	movs	r2, #10
 800e902:	4658      	mov	r0, fp
 800e904:	f000 f9d6 	bl	800ecb4 <__multadd>
 800e908:	42af      	cmp	r7, r5
 800e90a:	4681      	mov	r9, r0
 800e90c:	f04f 0300 	mov.w	r3, #0
 800e910:	f04f 020a 	mov.w	r2, #10
 800e914:	4639      	mov	r1, r7
 800e916:	4658      	mov	r0, fp
 800e918:	d107      	bne.n	800e92a <_dtoa_r+0xac2>
 800e91a:	f000 f9cb 	bl	800ecb4 <__multadd>
 800e91e:	4607      	mov	r7, r0
 800e920:	4605      	mov	r5, r0
 800e922:	9b07      	ldr	r3, [sp, #28]
 800e924:	3301      	adds	r3, #1
 800e926:	9307      	str	r3, [sp, #28]
 800e928:	e774      	b.n	800e814 <_dtoa_r+0x9ac>
 800e92a:	f000 f9c3 	bl	800ecb4 <__multadd>
 800e92e:	4629      	mov	r1, r5
 800e930:	4607      	mov	r7, r0
 800e932:	2300      	movs	r3, #0
 800e934:	220a      	movs	r2, #10
 800e936:	4658      	mov	r0, fp
 800e938:	f000 f9bc 	bl	800ecb4 <__multadd>
 800e93c:	4605      	mov	r5, r0
 800e93e:	e7f0      	b.n	800e922 <_dtoa_r+0xaba>
 800e940:	9b00      	ldr	r3, [sp, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	bfcc      	ite	gt
 800e946:	461e      	movgt	r6, r3
 800e948:	2601      	movle	r6, #1
 800e94a:	4456      	add	r6, sl
 800e94c:	2700      	movs	r7, #0
 800e94e:	4649      	mov	r1, r9
 800e950:	2201      	movs	r2, #1
 800e952:	4658      	mov	r0, fp
 800e954:	f000 fba4 	bl	800f0a0 <__lshift>
 800e958:	4621      	mov	r1, r4
 800e95a:	4681      	mov	r9, r0
 800e95c:	f000 fc0c 	bl	800f178 <__mcmp>
 800e960:	2800      	cmp	r0, #0
 800e962:	dcb0      	bgt.n	800e8c6 <_dtoa_r+0xa5e>
 800e964:	d102      	bne.n	800e96c <_dtoa_r+0xb04>
 800e966:	f018 0f01 	tst.w	r8, #1
 800e96a:	d1ac      	bne.n	800e8c6 <_dtoa_r+0xa5e>
 800e96c:	4633      	mov	r3, r6
 800e96e:	461e      	mov	r6, r3
 800e970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e974:	2a30      	cmp	r2, #48	@ 0x30
 800e976:	d0fa      	beq.n	800e96e <_dtoa_r+0xb06>
 800e978:	e5c2      	b.n	800e500 <_dtoa_r+0x698>
 800e97a:	459a      	cmp	sl, r3
 800e97c:	d1a4      	bne.n	800e8c8 <_dtoa_r+0xa60>
 800e97e:	9b04      	ldr	r3, [sp, #16]
 800e980:	3301      	adds	r3, #1
 800e982:	9304      	str	r3, [sp, #16]
 800e984:	2331      	movs	r3, #49	@ 0x31
 800e986:	f88a 3000 	strb.w	r3, [sl]
 800e98a:	e5b9      	b.n	800e500 <_dtoa_r+0x698>
 800e98c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e98e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e9ec <_dtoa_r+0xb84>
 800e992:	b11b      	cbz	r3, 800e99c <_dtoa_r+0xb34>
 800e994:	f10a 0308 	add.w	r3, sl, #8
 800e998:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e99a:	6013      	str	r3, [r2, #0]
 800e99c:	4650      	mov	r0, sl
 800e99e:	b019      	add	sp, #100	@ 0x64
 800e9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9a6:	2b01      	cmp	r3, #1
 800e9a8:	f77f ae37 	ble.w	800e61a <_dtoa_r+0x7b2>
 800e9ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9b0:	2001      	movs	r0, #1
 800e9b2:	e655      	b.n	800e660 <_dtoa_r+0x7f8>
 800e9b4:	9b00      	ldr	r3, [sp, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	f77f aed6 	ble.w	800e768 <_dtoa_r+0x900>
 800e9bc:	4656      	mov	r6, sl
 800e9be:	4621      	mov	r1, r4
 800e9c0:	4648      	mov	r0, r9
 800e9c2:	f7ff f9c7 	bl	800dd54 <quorem>
 800e9c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e9ca:	f806 8b01 	strb.w	r8, [r6], #1
 800e9ce:	9b00      	ldr	r3, [sp, #0]
 800e9d0:	eba6 020a 	sub.w	r2, r6, sl
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	ddb3      	ble.n	800e940 <_dtoa_r+0xad8>
 800e9d8:	4649      	mov	r1, r9
 800e9da:	2300      	movs	r3, #0
 800e9dc:	220a      	movs	r2, #10
 800e9de:	4658      	mov	r0, fp
 800e9e0:	f000 f968 	bl	800ecb4 <__multadd>
 800e9e4:	4681      	mov	r9, r0
 800e9e6:	e7ea      	b.n	800e9be <_dtoa_r+0xb56>
 800e9e8:	080117d8 	.word	0x080117d8
 800e9ec:	0801175c 	.word	0x0801175c

0800e9f0 <_free_r>:
 800e9f0:	b538      	push	{r3, r4, r5, lr}
 800e9f2:	4605      	mov	r5, r0
 800e9f4:	2900      	cmp	r1, #0
 800e9f6:	d041      	beq.n	800ea7c <_free_r+0x8c>
 800e9f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9fc:	1f0c      	subs	r4, r1, #4
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	bfb8      	it	lt
 800ea02:	18e4      	addlt	r4, r4, r3
 800ea04:	f000 f8e8 	bl	800ebd8 <__malloc_lock>
 800ea08:	4a1d      	ldr	r2, [pc, #116]	@ (800ea80 <_free_r+0x90>)
 800ea0a:	6813      	ldr	r3, [r2, #0]
 800ea0c:	b933      	cbnz	r3, 800ea1c <_free_r+0x2c>
 800ea0e:	6063      	str	r3, [r4, #4]
 800ea10:	6014      	str	r4, [r2, #0]
 800ea12:	4628      	mov	r0, r5
 800ea14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea18:	f000 b8e4 	b.w	800ebe4 <__malloc_unlock>
 800ea1c:	42a3      	cmp	r3, r4
 800ea1e:	d908      	bls.n	800ea32 <_free_r+0x42>
 800ea20:	6820      	ldr	r0, [r4, #0]
 800ea22:	1821      	adds	r1, r4, r0
 800ea24:	428b      	cmp	r3, r1
 800ea26:	bf01      	itttt	eq
 800ea28:	6819      	ldreq	r1, [r3, #0]
 800ea2a:	685b      	ldreq	r3, [r3, #4]
 800ea2c:	1809      	addeq	r1, r1, r0
 800ea2e:	6021      	streq	r1, [r4, #0]
 800ea30:	e7ed      	b.n	800ea0e <_free_r+0x1e>
 800ea32:	461a      	mov	r2, r3
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	b10b      	cbz	r3, 800ea3c <_free_r+0x4c>
 800ea38:	42a3      	cmp	r3, r4
 800ea3a:	d9fa      	bls.n	800ea32 <_free_r+0x42>
 800ea3c:	6811      	ldr	r1, [r2, #0]
 800ea3e:	1850      	adds	r0, r2, r1
 800ea40:	42a0      	cmp	r0, r4
 800ea42:	d10b      	bne.n	800ea5c <_free_r+0x6c>
 800ea44:	6820      	ldr	r0, [r4, #0]
 800ea46:	4401      	add	r1, r0
 800ea48:	1850      	adds	r0, r2, r1
 800ea4a:	4283      	cmp	r3, r0
 800ea4c:	6011      	str	r1, [r2, #0]
 800ea4e:	d1e0      	bne.n	800ea12 <_free_r+0x22>
 800ea50:	6818      	ldr	r0, [r3, #0]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	6053      	str	r3, [r2, #4]
 800ea56:	4408      	add	r0, r1
 800ea58:	6010      	str	r0, [r2, #0]
 800ea5a:	e7da      	b.n	800ea12 <_free_r+0x22>
 800ea5c:	d902      	bls.n	800ea64 <_free_r+0x74>
 800ea5e:	230c      	movs	r3, #12
 800ea60:	602b      	str	r3, [r5, #0]
 800ea62:	e7d6      	b.n	800ea12 <_free_r+0x22>
 800ea64:	6820      	ldr	r0, [r4, #0]
 800ea66:	1821      	adds	r1, r4, r0
 800ea68:	428b      	cmp	r3, r1
 800ea6a:	bf04      	itt	eq
 800ea6c:	6819      	ldreq	r1, [r3, #0]
 800ea6e:	685b      	ldreq	r3, [r3, #4]
 800ea70:	6063      	str	r3, [r4, #4]
 800ea72:	bf04      	itt	eq
 800ea74:	1809      	addeq	r1, r1, r0
 800ea76:	6021      	streq	r1, [r4, #0]
 800ea78:	6054      	str	r4, [r2, #4]
 800ea7a:	e7ca      	b.n	800ea12 <_free_r+0x22>
 800ea7c:	bd38      	pop	{r3, r4, r5, pc}
 800ea7e:	bf00      	nop
 800ea80:	20000a34 	.word	0x20000a34

0800ea84 <malloc>:
 800ea84:	4b02      	ldr	r3, [pc, #8]	@ (800ea90 <malloc+0xc>)
 800ea86:	4601      	mov	r1, r0
 800ea88:	6818      	ldr	r0, [r3, #0]
 800ea8a:	f000 b825 	b.w	800ead8 <_malloc_r>
 800ea8e:	bf00      	nop
 800ea90:	2000009c 	.word	0x2000009c

0800ea94 <sbrk_aligned>:
 800ea94:	b570      	push	{r4, r5, r6, lr}
 800ea96:	4e0f      	ldr	r6, [pc, #60]	@ (800ead4 <sbrk_aligned+0x40>)
 800ea98:	460c      	mov	r4, r1
 800ea9a:	6831      	ldr	r1, [r6, #0]
 800ea9c:	4605      	mov	r5, r0
 800ea9e:	b911      	cbnz	r1, 800eaa6 <sbrk_aligned+0x12>
 800eaa0:	f001 fe0c 	bl	80106bc <_sbrk_r>
 800eaa4:	6030      	str	r0, [r6, #0]
 800eaa6:	4621      	mov	r1, r4
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	f001 fe07 	bl	80106bc <_sbrk_r>
 800eaae:	1c43      	adds	r3, r0, #1
 800eab0:	d103      	bne.n	800eaba <sbrk_aligned+0x26>
 800eab2:	f04f 34ff 	mov.w	r4, #4294967295
 800eab6:	4620      	mov	r0, r4
 800eab8:	bd70      	pop	{r4, r5, r6, pc}
 800eaba:	1cc4      	adds	r4, r0, #3
 800eabc:	f024 0403 	bic.w	r4, r4, #3
 800eac0:	42a0      	cmp	r0, r4
 800eac2:	d0f8      	beq.n	800eab6 <sbrk_aligned+0x22>
 800eac4:	1a21      	subs	r1, r4, r0
 800eac6:	4628      	mov	r0, r5
 800eac8:	f001 fdf8 	bl	80106bc <_sbrk_r>
 800eacc:	3001      	adds	r0, #1
 800eace:	d1f2      	bne.n	800eab6 <sbrk_aligned+0x22>
 800ead0:	e7ef      	b.n	800eab2 <sbrk_aligned+0x1e>
 800ead2:	bf00      	nop
 800ead4:	20000a30 	.word	0x20000a30

0800ead8 <_malloc_r>:
 800ead8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eadc:	1ccd      	adds	r5, r1, #3
 800eade:	f025 0503 	bic.w	r5, r5, #3
 800eae2:	3508      	adds	r5, #8
 800eae4:	2d0c      	cmp	r5, #12
 800eae6:	bf38      	it	cc
 800eae8:	250c      	movcc	r5, #12
 800eaea:	2d00      	cmp	r5, #0
 800eaec:	4606      	mov	r6, r0
 800eaee:	db01      	blt.n	800eaf4 <_malloc_r+0x1c>
 800eaf0:	42a9      	cmp	r1, r5
 800eaf2:	d904      	bls.n	800eafe <_malloc_r+0x26>
 800eaf4:	230c      	movs	r3, #12
 800eaf6:	6033      	str	r3, [r6, #0]
 800eaf8:	2000      	movs	r0, #0
 800eafa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eafe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ebd4 <_malloc_r+0xfc>
 800eb02:	f000 f869 	bl	800ebd8 <__malloc_lock>
 800eb06:	f8d8 3000 	ldr.w	r3, [r8]
 800eb0a:	461c      	mov	r4, r3
 800eb0c:	bb44      	cbnz	r4, 800eb60 <_malloc_r+0x88>
 800eb0e:	4629      	mov	r1, r5
 800eb10:	4630      	mov	r0, r6
 800eb12:	f7ff ffbf 	bl	800ea94 <sbrk_aligned>
 800eb16:	1c43      	adds	r3, r0, #1
 800eb18:	4604      	mov	r4, r0
 800eb1a:	d158      	bne.n	800ebce <_malloc_r+0xf6>
 800eb1c:	f8d8 4000 	ldr.w	r4, [r8]
 800eb20:	4627      	mov	r7, r4
 800eb22:	2f00      	cmp	r7, #0
 800eb24:	d143      	bne.n	800ebae <_malloc_r+0xd6>
 800eb26:	2c00      	cmp	r4, #0
 800eb28:	d04b      	beq.n	800ebc2 <_malloc_r+0xea>
 800eb2a:	6823      	ldr	r3, [r4, #0]
 800eb2c:	4639      	mov	r1, r7
 800eb2e:	4630      	mov	r0, r6
 800eb30:	eb04 0903 	add.w	r9, r4, r3
 800eb34:	f001 fdc2 	bl	80106bc <_sbrk_r>
 800eb38:	4581      	cmp	r9, r0
 800eb3a:	d142      	bne.n	800ebc2 <_malloc_r+0xea>
 800eb3c:	6821      	ldr	r1, [r4, #0]
 800eb3e:	1a6d      	subs	r5, r5, r1
 800eb40:	4629      	mov	r1, r5
 800eb42:	4630      	mov	r0, r6
 800eb44:	f7ff ffa6 	bl	800ea94 <sbrk_aligned>
 800eb48:	3001      	adds	r0, #1
 800eb4a:	d03a      	beq.n	800ebc2 <_malloc_r+0xea>
 800eb4c:	6823      	ldr	r3, [r4, #0]
 800eb4e:	442b      	add	r3, r5
 800eb50:	6023      	str	r3, [r4, #0]
 800eb52:	f8d8 3000 	ldr.w	r3, [r8]
 800eb56:	685a      	ldr	r2, [r3, #4]
 800eb58:	bb62      	cbnz	r2, 800ebb4 <_malloc_r+0xdc>
 800eb5a:	f8c8 7000 	str.w	r7, [r8]
 800eb5e:	e00f      	b.n	800eb80 <_malloc_r+0xa8>
 800eb60:	6822      	ldr	r2, [r4, #0]
 800eb62:	1b52      	subs	r2, r2, r5
 800eb64:	d420      	bmi.n	800eba8 <_malloc_r+0xd0>
 800eb66:	2a0b      	cmp	r2, #11
 800eb68:	d917      	bls.n	800eb9a <_malloc_r+0xc2>
 800eb6a:	1961      	adds	r1, r4, r5
 800eb6c:	42a3      	cmp	r3, r4
 800eb6e:	6025      	str	r5, [r4, #0]
 800eb70:	bf18      	it	ne
 800eb72:	6059      	strne	r1, [r3, #4]
 800eb74:	6863      	ldr	r3, [r4, #4]
 800eb76:	bf08      	it	eq
 800eb78:	f8c8 1000 	streq.w	r1, [r8]
 800eb7c:	5162      	str	r2, [r4, r5]
 800eb7e:	604b      	str	r3, [r1, #4]
 800eb80:	4630      	mov	r0, r6
 800eb82:	f000 f82f 	bl	800ebe4 <__malloc_unlock>
 800eb86:	f104 000b 	add.w	r0, r4, #11
 800eb8a:	1d23      	adds	r3, r4, #4
 800eb8c:	f020 0007 	bic.w	r0, r0, #7
 800eb90:	1ac2      	subs	r2, r0, r3
 800eb92:	bf1c      	itt	ne
 800eb94:	1a1b      	subne	r3, r3, r0
 800eb96:	50a3      	strne	r3, [r4, r2]
 800eb98:	e7af      	b.n	800eafa <_malloc_r+0x22>
 800eb9a:	6862      	ldr	r2, [r4, #4]
 800eb9c:	42a3      	cmp	r3, r4
 800eb9e:	bf0c      	ite	eq
 800eba0:	f8c8 2000 	streq.w	r2, [r8]
 800eba4:	605a      	strne	r2, [r3, #4]
 800eba6:	e7eb      	b.n	800eb80 <_malloc_r+0xa8>
 800eba8:	4623      	mov	r3, r4
 800ebaa:	6864      	ldr	r4, [r4, #4]
 800ebac:	e7ae      	b.n	800eb0c <_malloc_r+0x34>
 800ebae:	463c      	mov	r4, r7
 800ebb0:	687f      	ldr	r7, [r7, #4]
 800ebb2:	e7b6      	b.n	800eb22 <_malloc_r+0x4a>
 800ebb4:	461a      	mov	r2, r3
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	42a3      	cmp	r3, r4
 800ebba:	d1fb      	bne.n	800ebb4 <_malloc_r+0xdc>
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	6053      	str	r3, [r2, #4]
 800ebc0:	e7de      	b.n	800eb80 <_malloc_r+0xa8>
 800ebc2:	230c      	movs	r3, #12
 800ebc4:	6033      	str	r3, [r6, #0]
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	f000 f80c 	bl	800ebe4 <__malloc_unlock>
 800ebcc:	e794      	b.n	800eaf8 <_malloc_r+0x20>
 800ebce:	6005      	str	r5, [r0, #0]
 800ebd0:	e7d6      	b.n	800eb80 <_malloc_r+0xa8>
 800ebd2:	bf00      	nop
 800ebd4:	20000a34 	.word	0x20000a34

0800ebd8 <__malloc_lock>:
 800ebd8:	4801      	ldr	r0, [pc, #4]	@ (800ebe0 <__malloc_lock+0x8>)
 800ebda:	f7ff b8b2 	b.w	800dd42 <__retarget_lock_acquire_recursive>
 800ebde:	bf00      	nop
 800ebe0:	20000a2c 	.word	0x20000a2c

0800ebe4 <__malloc_unlock>:
 800ebe4:	4801      	ldr	r0, [pc, #4]	@ (800ebec <__malloc_unlock+0x8>)
 800ebe6:	f7ff b8ad 	b.w	800dd44 <__retarget_lock_release_recursive>
 800ebea:	bf00      	nop
 800ebec:	20000a2c 	.word	0x20000a2c

0800ebf0 <_Balloc>:
 800ebf0:	b570      	push	{r4, r5, r6, lr}
 800ebf2:	69c6      	ldr	r6, [r0, #28]
 800ebf4:	4604      	mov	r4, r0
 800ebf6:	460d      	mov	r5, r1
 800ebf8:	b976      	cbnz	r6, 800ec18 <_Balloc+0x28>
 800ebfa:	2010      	movs	r0, #16
 800ebfc:	f7ff ff42 	bl	800ea84 <malloc>
 800ec00:	4602      	mov	r2, r0
 800ec02:	61e0      	str	r0, [r4, #28]
 800ec04:	b920      	cbnz	r0, 800ec10 <_Balloc+0x20>
 800ec06:	4b18      	ldr	r3, [pc, #96]	@ (800ec68 <_Balloc+0x78>)
 800ec08:	4818      	ldr	r0, [pc, #96]	@ (800ec6c <_Balloc+0x7c>)
 800ec0a:	216b      	movs	r1, #107	@ 0x6b
 800ec0c:	f001 fd7c 	bl	8010708 <__assert_func>
 800ec10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec14:	6006      	str	r6, [r0, #0]
 800ec16:	60c6      	str	r6, [r0, #12]
 800ec18:	69e6      	ldr	r6, [r4, #28]
 800ec1a:	68f3      	ldr	r3, [r6, #12]
 800ec1c:	b183      	cbz	r3, 800ec40 <_Balloc+0x50>
 800ec1e:	69e3      	ldr	r3, [r4, #28]
 800ec20:	68db      	ldr	r3, [r3, #12]
 800ec22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec26:	b9b8      	cbnz	r0, 800ec58 <_Balloc+0x68>
 800ec28:	2101      	movs	r1, #1
 800ec2a:	fa01 f605 	lsl.w	r6, r1, r5
 800ec2e:	1d72      	adds	r2, r6, #5
 800ec30:	0092      	lsls	r2, r2, #2
 800ec32:	4620      	mov	r0, r4
 800ec34:	f001 fd86 	bl	8010744 <_calloc_r>
 800ec38:	b160      	cbz	r0, 800ec54 <_Balloc+0x64>
 800ec3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec3e:	e00e      	b.n	800ec5e <_Balloc+0x6e>
 800ec40:	2221      	movs	r2, #33	@ 0x21
 800ec42:	2104      	movs	r1, #4
 800ec44:	4620      	mov	r0, r4
 800ec46:	f001 fd7d 	bl	8010744 <_calloc_r>
 800ec4a:	69e3      	ldr	r3, [r4, #28]
 800ec4c:	60f0      	str	r0, [r6, #12]
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d1e4      	bne.n	800ec1e <_Balloc+0x2e>
 800ec54:	2000      	movs	r0, #0
 800ec56:	bd70      	pop	{r4, r5, r6, pc}
 800ec58:	6802      	ldr	r2, [r0, #0]
 800ec5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec5e:	2300      	movs	r3, #0
 800ec60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec64:	e7f7      	b.n	800ec56 <_Balloc+0x66>
 800ec66:	bf00      	nop
 800ec68:	08011769 	.word	0x08011769
 800ec6c:	080117e9 	.word	0x080117e9

0800ec70 <_Bfree>:
 800ec70:	b570      	push	{r4, r5, r6, lr}
 800ec72:	69c6      	ldr	r6, [r0, #28]
 800ec74:	4605      	mov	r5, r0
 800ec76:	460c      	mov	r4, r1
 800ec78:	b976      	cbnz	r6, 800ec98 <_Bfree+0x28>
 800ec7a:	2010      	movs	r0, #16
 800ec7c:	f7ff ff02 	bl	800ea84 <malloc>
 800ec80:	4602      	mov	r2, r0
 800ec82:	61e8      	str	r0, [r5, #28]
 800ec84:	b920      	cbnz	r0, 800ec90 <_Bfree+0x20>
 800ec86:	4b09      	ldr	r3, [pc, #36]	@ (800ecac <_Bfree+0x3c>)
 800ec88:	4809      	ldr	r0, [pc, #36]	@ (800ecb0 <_Bfree+0x40>)
 800ec8a:	218f      	movs	r1, #143	@ 0x8f
 800ec8c:	f001 fd3c 	bl	8010708 <__assert_func>
 800ec90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec94:	6006      	str	r6, [r0, #0]
 800ec96:	60c6      	str	r6, [r0, #12]
 800ec98:	b13c      	cbz	r4, 800ecaa <_Bfree+0x3a>
 800ec9a:	69eb      	ldr	r3, [r5, #28]
 800ec9c:	6862      	ldr	r2, [r4, #4]
 800ec9e:	68db      	ldr	r3, [r3, #12]
 800eca0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eca4:	6021      	str	r1, [r4, #0]
 800eca6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ecaa:	bd70      	pop	{r4, r5, r6, pc}
 800ecac:	08011769 	.word	0x08011769
 800ecb0:	080117e9 	.word	0x080117e9

0800ecb4 <__multadd>:
 800ecb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb8:	690d      	ldr	r5, [r1, #16]
 800ecba:	4607      	mov	r7, r0
 800ecbc:	460c      	mov	r4, r1
 800ecbe:	461e      	mov	r6, r3
 800ecc0:	f101 0c14 	add.w	ip, r1, #20
 800ecc4:	2000      	movs	r0, #0
 800ecc6:	f8dc 3000 	ldr.w	r3, [ip]
 800ecca:	b299      	uxth	r1, r3
 800eccc:	fb02 6101 	mla	r1, r2, r1, r6
 800ecd0:	0c1e      	lsrs	r6, r3, #16
 800ecd2:	0c0b      	lsrs	r3, r1, #16
 800ecd4:	fb02 3306 	mla	r3, r2, r6, r3
 800ecd8:	b289      	uxth	r1, r1
 800ecda:	3001      	adds	r0, #1
 800ecdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ece0:	4285      	cmp	r5, r0
 800ece2:	f84c 1b04 	str.w	r1, [ip], #4
 800ece6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ecea:	dcec      	bgt.n	800ecc6 <__multadd+0x12>
 800ecec:	b30e      	cbz	r6, 800ed32 <__multadd+0x7e>
 800ecee:	68a3      	ldr	r3, [r4, #8]
 800ecf0:	42ab      	cmp	r3, r5
 800ecf2:	dc19      	bgt.n	800ed28 <__multadd+0x74>
 800ecf4:	6861      	ldr	r1, [r4, #4]
 800ecf6:	4638      	mov	r0, r7
 800ecf8:	3101      	adds	r1, #1
 800ecfa:	f7ff ff79 	bl	800ebf0 <_Balloc>
 800ecfe:	4680      	mov	r8, r0
 800ed00:	b928      	cbnz	r0, 800ed0e <__multadd+0x5a>
 800ed02:	4602      	mov	r2, r0
 800ed04:	4b0c      	ldr	r3, [pc, #48]	@ (800ed38 <__multadd+0x84>)
 800ed06:	480d      	ldr	r0, [pc, #52]	@ (800ed3c <__multadd+0x88>)
 800ed08:	21ba      	movs	r1, #186	@ 0xba
 800ed0a:	f001 fcfd 	bl	8010708 <__assert_func>
 800ed0e:	6922      	ldr	r2, [r4, #16]
 800ed10:	3202      	adds	r2, #2
 800ed12:	f104 010c 	add.w	r1, r4, #12
 800ed16:	0092      	lsls	r2, r2, #2
 800ed18:	300c      	adds	r0, #12
 800ed1a:	f001 fcdf 	bl	80106dc <memcpy>
 800ed1e:	4621      	mov	r1, r4
 800ed20:	4638      	mov	r0, r7
 800ed22:	f7ff ffa5 	bl	800ec70 <_Bfree>
 800ed26:	4644      	mov	r4, r8
 800ed28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed2c:	3501      	adds	r5, #1
 800ed2e:	615e      	str	r6, [r3, #20]
 800ed30:	6125      	str	r5, [r4, #16]
 800ed32:	4620      	mov	r0, r4
 800ed34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed38:	080117d8 	.word	0x080117d8
 800ed3c:	080117e9 	.word	0x080117e9

0800ed40 <__s2b>:
 800ed40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed44:	460c      	mov	r4, r1
 800ed46:	4615      	mov	r5, r2
 800ed48:	461f      	mov	r7, r3
 800ed4a:	2209      	movs	r2, #9
 800ed4c:	3308      	adds	r3, #8
 800ed4e:	4606      	mov	r6, r0
 800ed50:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed54:	2100      	movs	r1, #0
 800ed56:	2201      	movs	r2, #1
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	db09      	blt.n	800ed70 <__s2b+0x30>
 800ed5c:	4630      	mov	r0, r6
 800ed5e:	f7ff ff47 	bl	800ebf0 <_Balloc>
 800ed62:	b940      	cbnz	r0, 800ed76 <__s2b+0x36>
 800ed64:	4602      	mov	r2, r0
 800ed66:	4b19      	ldr	r3, [pc, #100]	@ (800edcc <__s2b+0x8c>)
 800ed68:	4819      	ldr	r0, [pc, #100]	@ (800edd0 <__s2b+0x90>)
 800ed6a:	21d3      	movs	r1, #211	@ 0xd3
 800ed6c:	f001 fccc 	bl	8010708 <__assert_func>
 800ed70:	0052      	lsls	r2, r2, #1
 800ed72:	3101      	adds	r1, #1
 800ed74:	e7f0      	b.n	800ed58 <__s2b+0x18>
 800ed76:	9b08      	ldr	r3, [sp, #32]
 800ed78:	6143      	str	r3, [r0, #20]
 800ed7a:	2d09      	cmp	r5, #9
 800ed7c:	f04f 0301 	mov.w	r3, #1
 800ed80:	6103      	str	r3, [r0, #16]
 800ed82:	dd16      	ble.n	800edb2 <__s2b+0x72>
 800ed84:	f104 0909 	add.w	r9, r4, #9
 800ed88:	46c8      	mov	r8, r9
 800ed8a:	442c      	add	r4, r5
 800ed8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ed90:	4601      	mov	r1, r0
 800ed92:	3b30      	subs	r3, #48	@ 0x30
 800ed94:	220a      	movs	r2, #10
 800ed96:	4630      	mov	r0, r6
 800ed98:	f7ff ff8c 	bl	800ecb4 <__multadd>
 800ed9c:	45a0      	cmp	r8, r4
 800ed9e:	d1f5      	bne.n	800ed8c <__s2b+0x4c>
 800eda0:	f1a5 0408 	sub.w	r4, r5, #8
 800eda4:	444c      	add	r4, r9
 800eda6:	1b2d      	subs	r5, r5, r4
 800eda8:	1963      	adds	r3, r4, r5
 800edaa:	42bb      	cmp	r3, r7
 800edac:	db04      	blt.n	800edb8 <__s2b+0x78>
 800edae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edb2:	340a      	adds	r4, #10
 800edb4:	2509      	movs	r5, #9
 800edb6:	e7f6      	b.n	800eda6 <__s2b+0x66>
 800edb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800edbc:	4601      	mov	r1, r0
 800edbe:	3b30      	subs	r3, #48	@ 0x30
 800edc0:	220a      	movs	r2, #10
 800edc2:	4630      	mov	r0, r6
 800edc4:	f7ff ff76 	bl	800ecb4 <__multadd>
 800edc8:	e7ee      	b.n	800eda8 <__s2b+0x68>
 800edca:	bf00      	nop
 800edcc:	080117d8 	.word	0x080117d8
 800edd0:	080117e9 	.word	0x080117e9

0800edd4 <__hi0bits>:
 800edd4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800edd8:	4603      	mov	r3, r0
 800edda:	bf36      	itet	cc
 800eddc:	0403      	lslcc	r3, r0, #16
 800edde:	2000      	movcs	r0, #0
 800ede0:	2010      	movcc	r0, #16
 800ede2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ede6:	bf3c      	itt	cc
 800ede8:	021b      	lslcc	r3, r3, #8
 800edea:	3008      	addcc	r0, #8
 800edec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800edf0:	bf3c      	itt	cc
 800edf2:	011b      	lslcc	r3, r3, #4
 800edf4:	3004      	addcc	r0, #4
 800edf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800edfa:	bf3c      	itt	cc
 800edfc:	009b      	lslcc	r3, r3, #2
 800edfe:	3002      	addcc	r0, #2
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	db05      	blt.n	800ee10 <__hi0bits+0x3c>
 800ee04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ee08:	f100 0001 	add.w	r0, r0, #1
 800ee0c:	bf08      	it	eq
 800ee0e:	2020      	moveq	r0, #32
 800ee10:	4770      	bx	lr

0800ee12 <__lo0bits>:
 800ee12:	6803      	ldr	r3, [r0, #0]
 800ee14:	4602      	mov	r2, r0
 800ee16:	f013 0007 	ands.w	r0, r3, #7
 800ee1a:	d00b      	beq.n	800ee34 <__lo0bits+0x22>
 800ee1c:	07d9      	lsls	r1, r3, #31
 800ee1e:	d421      	bmi.n	800ee64 <__lo0bits+0x52>
 800ee20:	0798      	lsls	r0, r3, #30
 800ee22:	bf49      	itett	mi
 800ee24:	085b      	lsrmi	r3, r3, #1
 800ee26:	089b      	lsrpl	r3, r3, #2
 800ee28:	2001      	movmi	r0, #1
 800ee2a:	6013      	strmi	r3, [r2, #0]
 800ee2c:	bf5c      	itt	pl
 800ee2e:	6013      	strpl	r3, [r2, #0]
 800ee30:	2002      	movpl	r0, #2
 800ee32:	4770      	bx	lr
 800ee34:	b299      	uxth	r1, r3
 800ee36:	b909      	cbnz	r1, 800ee3c <__lo0bits+0x2a>
 800ee38:	0c1b      	lsrs	r3, r3, #16
 800ee3a:	2010      	movs	r0, #16
 800ee3c:	b2d9      	uxtb	r1, r3
 800ee3e:	b909      	cbnz	r1, 800ee44 <__lo0bits+0x32>
 800ee40:	3008      	adds	r0, #8
 800ee42:	0a1b      	lsrs	r3, r3, #8
 800ee44:	0719      	lsls	r1, r3, #28
 800ee46:	bf04      	itt	eq
 800ee48:	091b      	lsreq	r3, r3, #4
 800ee4a:	3004      	addeq	r0, #4
 800ee4c:	0799      	lsls	r1, r3, #30
 800ee4e:	bf04      	itt	eq
 800ee50:	089b      	lsreq	r3, r3, #2
 800ee52:	3002      	addeq	r0, #2
 800ee54:	07d9      	lsls	r1, r3, #31
 800ee56:	d403      	bmi.n	800ee60 <__lo0bits+0x4e>
 800ee58:	085b      	lsrs	r3, r3, #1
 800ee5a:	f100 0001 	add.w	r0, r0, #1
 800ee5e:	d003      	beq.n	800ee68 <__lo0bits+0x56>
 800ee60:	6013      	str	r3, [r2, #0]
 800ee62:	4770      	bx	lr
 800ee64:	2000      	movs	r0, #0
 800ee66:	4770      	bx	lr
 800ee68:	2020      	movs	r0, #32
 800ee6a:	4770      	bx	lr

0800ee6c <__i2b>:
 800ee6c:	b510      	push	{r4, lr}
 800ee6e:	460c      	mov	r4, r1
 800ee70:	2101      	movs	r1, #1
 800ee72:	f7ff febd 	bl	800ebf0 <_Balloc>
 800ee76:	4602      	mov	r2, r0
 800ee78:	b928      	cbnz	r0, 800ee86 <__i2b+0x1a>
 800ee7a:	4b05      	ldr	r3, [pc, #20]	@ (800ee90 <__i2b+0x24>)
 800ee7c:	4805      	ldr	r0, [pc, #20]	@ (800ee94 <__i2b+0x28>)
 800ee7e:	f240 1145 	movw	r1, #325	@ 0x145
 800ee82:	f001 fc41 	bl	8010708 <__assert_func>
 800ee86:	2301      	movs	r3, #1
 800ee88:	6144      	str	r4, [r0, #20]
 800ee8a:	6103      	str	r3, [r0, #16]
 800ee8c:	bd10      	pop	{r4, pc}
 800ee8e:	bf00      	nop
 800ee90:	080117d8 	.word	0x080117d8
 800ee94:	080117e9 	.word	0x080117e9

0800ee98 <__multiply>:
 800ee98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee9c:	4614      	mov	r4, r2
 800ee9e:	690a      	ldr	r2, [r1, #16]
 800eea0:	6923      	ldr	r3, [r4, #16]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	bfa8      	it	ge
 800eea6:	4623      	movge	r3, r4
 800eea8:	460f      	mov	r7, r1
 800eeaa:	bfa4      	itt	ge
 800eeac:	460c      	movge	r4, r1
 800eeae:	461f      	movge	r7, r3
 800eeb0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800eeb4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800eeb8:	68a3      	ldr	r3, [r4, #8]
 800eeba:	6861      	ldr	r1, [r4, #4]
 800eebc:	eb0a 0609 	add.w	r6, sl, r9
 800eec0:	42b3      	cmp	r3, r6
 800eec2:	b085      	sub	sp, #20
 800eec4:	bfb8      	it	lt
 800eec6:	3101      	addlt	r1, #1
 800eec8:	f7ff fe92 	bl	800ebf0 <_Balloc>
 800eecc:	b930      	cbnz	r0, 800eedc <__multiply+0x44>
 800eece:	4602      	mov	r2, r0
 800eed0:	4b44      	ldr	r3, [pc, #272]	@ (800efe4 <__multiply+0x14c>)
 800eed2:	4845      	ldr	r0, [pc, #276]	@ (800efe8 <__multiply+0x150>)
 800eed4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eed8:	f001 fc16 	bl	8010708 <__assert_func>
 800eedc:	f100 0514 	add.w	r5, r0, #20
 800eee0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eee4:	462b      	mov	r3, r5
 800eee6:	2200      	movs	r2, #0
 800eee8:	4543      	cmp	r3, r8
 800eeea:	d321      	bcc.n	800ef30 <__multiply+0x98>
 800eeec:	f107 0114 	add.w	r1, r7, #20
 800eef0:	f104 0214 	add.w	r2, r4, #20
 800eef4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800eef8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800eefc:	9302      	str	r3, [sp, #8]
 800eefe:	1b13      	subs	r3, r2, r4
 800ef00:	3b15      	subs	r3, #21
 800ef02:	f023 0303 	bic.w	r3, r3, #3
 800ef06:	3304      	adds	r3, #4
 800ef08:	f104 0715 	add.w	r7, r4, #21
 800ef0c:	42ba      	cmp	r2, r7
 800ef0e:	bf38      	it	cc
 800ef10:	2304      	movcc	r3, #4
 800ef12:	9301      	str	r3, [sp, #4]
 800ef14:	9b02      	ldr	r3, [sp, #8]
 800ef16:	9103      	str	r1, [sp, #12]
 800ef18:	428b      	cmp	r3, r1
 800ef1a:	d80c      	bhi.n	800ef36 <__multiply+0x9e>
 800ef1c:	2e00      	cmp	r6, #0
 800ef1e:	dd03      	ble.n	800ef28 <__multiply+0x90>
 800ef20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d05b      	beq.n	800efe0 <__multiply+0x148>
 800ef28:	6106      	str	r6, [r0, #16]
 800ef2a:	b005      	add	sp, #20
 800ef2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef30:	f843 2b04 	str.w	r2, [r3], #4
 800ef34:	e7d8      	b.n	800eee8 <__multiply+0x50>
 800ef36:	f8b1 a000 	ldrh.w	sl, [r1]
 800ef3a:	f1ba 0f00 	cmp.w	sl, #0
 800ef3e:	d024      	beq.n	800ef8a <__multiply+0xf2>
 800ef40:	f104 0e14 	add.w	lr, r4, #20
 800ef44:	46a9      	mov	r9, r5
 800ef46:	f04f 0c00 	mov.w	ip, #0
 800ef4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ef4e:	f8d9 3000 	ldr.w	r3, [r9]
 800ef52:	fa1f fb87 	uxth.w	fp, r7
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	fb0a 330b 	mla	r3, sl, fp, r3
 800ef5c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ef60:	f8d9 7000 	ldr.w	r7, [r9]
 800ef64:	4463      	add	r3, ip
 800ef66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ef6a:	fb0a c70b 	mla	r7, sl, fp, ip
 800ef6e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ef78:	4572      	cmp	r2, lr
 800ef7a:	f849 3b04 	str.w	r3, [r9], #4
 800ef7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ef82:	d8e2      	bhi.n	800ef4a <__multiply+0xb2>
 800ef84:	9b01      	ldr	r3, [sp, #4]
 800ef86:	f845 c003 	str.w	ip, [r5, r3]
 800ef8a:	9b03      	ldr	r3, [sp, #12]
 800ef8c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ef90:	3104      	adds	r1, #4
 800ef92:	f1b9 0f00 	cmp.w	r9, #0
 800ef96:	d021      	beq.n	800efdc <__multiply+0x144>
 800ef98:	682b      	ldr	r3, [r5, #0]
 800ef9a:	f104 0c14 	add.w	ip, r4, #20
 800ef9e:	46ae      	mov	lr, r5
 800efa0:	f04f 0a00 	mov.w	sl, #0
 800efa4:	f8bc b000 	ldrh.w	fp, [ip]
 800efa8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800efac:	fb09 770b 	mla	r7, r9, fp, r7
 800efb0:	4457      	add	r7, sl
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800efb8:	f84e 3b04 	str.w	r3, [lr], #4
 800efbc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800efc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800efc4:	f8be 3000 	ldrh.w	r3, [lr]
 800efc8:	fb09 330a 	mla	r3, r9, sl, r3
 800efcc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800efd0:	4562      	cmp	r2, ip
 800efd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800efd6:	d8e5      	bhi.n	800efa4 <__multiply+0x10c>
 800efd8:	9f01      	ldr	r7, [sp, #4]
 800efda:	51eb      	str	r3, [r5, r7]
 800efdc:	3504      	adds	r5, #4
 800efde:	e799      	b.n	800ef14 <__multiply+0x7c>
 800efe0:	3e01      	subs	r6, #1
 800efe2:	e79b      	b.n	800ef1c <__multiply+0x84>
 800efe4:	080117d8 	.word	0x080117d8
 800efe8:	080117e9 	.word	0x080117e9

0800efec <__pow5mult>:
 800efec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eff0:	4615      	mov	r5, r2
 800eff2:	f012 0203 	ands.w	r2, r2, #3
 800eff6:	4607      	mov	r7, r0
 800eff8:	460e      	mov	r6, r1
 800effa:	d007      	beq.n	800f00c <__pow5mult+0x20>
 800effc:	4c25      	ldr	r4, [pc, #148]	@ (800f094 <__pow5mult+0xa8>)
 800effe:	3a01      	subs	r2, #1
 800f000:	2300      	movs	r3, #0
 800f002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f006:	f7ff fe55 	bl	800ecb4 <__multadd>
 800f00a:	4606      	mov	r6, r0
 800f00c:	10ad      	asrs	r5, r5, #2
 800f00e:	d03d      	beq.n	800f08c <__pow5mult+0xa0>
 800f010:	69fc      	ldr	r4, [r7, #28]
 800f012:	b97c      	cbnz	r4, 800f034 <__pow5mult+0x48>
 800f014:	2010      	movs	r0, #16
 800f016:	f7ff fd35 	bl	800ea84 <malloc>
 800f01a:	4602      	mov	r2, r0
 800f01c:	61f8      	str	r0, [r7, #28]
 800f01e:	b928      	cbnz	r0, 800f02c <__pow5mult+0x40>
 800f020:	4b1d      	ldr	r3, [pc, #116]	@ (800f098 <__pow5mult+0xac>)
 800f022:	481e      	ldr	r0, [pc, #120]	@ (800f09c <__pow5mult+0xb0>)
 800f024:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f028:	f001 fb6e 	bl	8010708 <__assert_func>
 800f02c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f030:	6004      	str	r4, [r0, #0]
 800f032:	60c4      	str	r4, [r0, #12]
 800f034:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f038:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f03c:	b94c      	cbnz	r4, 800f052 <__pow5mult+0x66>
 800f03e:	f240 2171 	movw	r1, #625	@ 0x271
 800f042:	4638      	mov	r0, r7
 800f044:	f7ff ff12 	bl	800ee6c <__i2b>
 800f048:	2300      	movs	r3, #0
 800f04a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f04e:	4604      	mov	r4, r0
 800f050:	6003      	str	r3, [r0, #0]
 800f052:	f04f 0900 	mov.w	r9, #0
 800f056:	07eb      	lsls	r3, r5, #31
 800f058:	d50a      	bpl.n	800f070 <__pow5mult+0x84>
 800f05a:	4631      	mov	r1, r6
 800f05c:	4622      	mov	r2, r4
 800f05e:	4638      	mov	r0, r7
 800f060:	f7ff ff1a 	bl	800ee98 <__multiply>
 800f064:	4631      	mov	r1, r6
 800f066:	4680      	mov	r8, r0
 800f068:	4638      	mov	r0, r7
 800f06a:	f7ff fe01 	bl	800ec70 <_Bfree>
 800f06e:	4646      	mov	r6, r8
 800f070:	106d      	asrs	r5, r5, #1
 800f072:	d00b      	beq.n	800f08c <__pow5mult+0xa0>
 800f074:	6820      	ldr	r0, [r4, #0]
 800f076:	b938      	cbnz	r0, 800f088 <__pow5mult+0x9c>
 800f078:	4622      	mov	r2, r4
 800f07a:	4621      	mov	r1, r4
 800f07c:	4638      	mov	r0, r7
 800f07e:	f7ff ff0b 	bl	800ee98 <__multiply>
 800f082:	6020      	str	r0, [r4, #0]
 800f084:	f8c0 9000 	str.w	r9, [r0]
 800f088:	4604      	mov	r4, r0
 800f08a:	e7e4      	b.n	800f056 <__pow5mult+0x6a>
 800f08c:	4630      	mov	r0, r6
 800f08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f092:	bf00      	nop
 800f094:	08011844 	.word	0x08011844
 800f098:	08011769 	.word	0x08011769
 800f09c:	080117e9 	.word	0x080117e9

0800f0a0 <__lshift>:
 800f0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	6849      	ldr	r1, [r1, #4]
 800f0a8:	6923      	ldr	r3, [r4, #16]
 800f0aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f0ae:	68a3      	ldr	r3, [r4, #8]
 800f0b0:	4607      	mov	r7, r0
 800f0b2:	4691      	mov	r9, r2
 800f0b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f0b8:	f108 0601 	add.w	r6, r8, #1
 800f0bc:	42b3      	cmp	r3, r6
 800f0be:	db0b      	blt.n	800f0d8 <__lshift+0x38>
 800f0c0:	4638      	mov	r0, r7
 800f0c2:	f7ff fd95 	bl	800ebf0 <_Balloc>
 800f0c6:	4605      	mov	r5, r0
 800f0c8:	b948      	cbnz	r0, 800f0de <__lshift+0x3e>
 800f0ca:	4602      	mov	r2, r0
 800f0cc:	4b28      	ldr	r3, [pc, #160]	@ (800f170 <__lshift+0xd0>)
 800f0ce:	4829      	ldr	r0, [pc, #164]	@ (800f174 <__lshift+0xd4>)
 800f0d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f0d4:	f001 fb18 	bl	8010708 <__assert_func>
 800f0d8:	3101      	adds	r1, #1
 800f0da:	005b      	lsls	r3, r3, #1
 800f0dc:	e7ee      	b.n	800f0bc <__lshift+0x1c>
 800f0de:	2300      	movs	r3, #0
 800f0e0:	f100 0114 	add.w	r1, r0, #20
 800f0e4:	f100 0210 	add.w	r2, r0, #16
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	4553      	cmp	r3, sl
 800f0ec:	db33      	blt.n	800f156 <__lshift+0xb6>
 800f0ee:	6920      	ldr	r0, [r4, #16]
 800f0f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f0f4:	f104 0314 	add.w	r3, r4, #20
 800f0f8:	f019 091f 	ands.w	r9, r9, #31
 800f0fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f100:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f104:	d02b      	beq.n	800f15e <__lshift+0xbe>
 800f106:	f1c9 0e20 	rsb	lr, r9, #32
 800f10a:	468a      	mov	sl, r1
 800f10c:	2200      	movs	r2, #0
 800f10e:	6818      	ldr	r0, [r3, #0]
 800f110:	fa00 f009 	lsl.w	r0, r0, r9
 800f114:	4310      	orrs	r0, r2
 800f116:	f84a 0b04 	str.w	r0, [sl], #4
 800f11a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f11e:	459c      	cmp	ip, r3
 800f120:	fa22 f20e 	lsr.w	r2, r2, lr
 800f124:	d8f3      	bhi.n	800f10e <__lshift+0x6e>
 800f126:	ebac 0304 	sub.w	r3, ip, r4
 800f12a:	3b15      	subs	r3, #21
 800f12c:	f023 0303 	bic.w	r3, r3, #3
 800f130:	3304      	adds	r3, #4
 800f132:	f104 0015 	add.w	r0, r4, #21
 800f136:	4584      	cmp	ip, r0
 800f138:	bf38      	it	cc
 800f13a:	2304      	movcc	r3, #4
 800f13c:	50ca      	str	r2, [r1, r3]
 800f13e:	b10a      	cbz	r2, 800f144 <__lshift+0xa4>
 800f140:	f108 0602 	add.w	r6, r8, #2
 800f144:	3e01      	subs	r6, #1
 800f146:	4638      	mov	r0, r7
 800f148:	612e      	str	r6, [r5, #16]
 800f14a:	4621      	mov	r1, r4
 800f14c:	f7ff fd90 	bl	800ec70 <_Bfree>
 800f150:	4628      	mov	r0, r5
 800f152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f156:	f842 0f04 	str.w	r0, [r2, #4]!
 800f15a:	3301      	adds	r3, #1
 800f15c:	e7c5      	b.n	800f0ea <__lshift+0x4a>
 800f15e:	3904      	subs	r1, #4
 800f160:	f853 2b04 	ldr.w	r2, [r3], #4
 800f164:	f841 2f04 	str.w	r2, [r1, #4]!
 800f168:	459c      	cmp	ip, r3
 800f16a:	d8f9      	bhi.n	800f160 <__lshift+0xc0>
 800f16c:	e7ea      	b.n	800f144 <__lshift+0xa4>
 800f16e:	bf00      	nop
 800f170:	080117d8 	.word	0x080117d8
 800f174:	080117e9 	.word	0x080117e9

0800f178 <__mcmp>:
 800f178:	690a      	ldr	r2, [r1, #16]
 800f17a:	4603      	mov	r3, r0
 800f17c:	6900      	ldr	r0, [r0, #16]
 800f17e:	1a80      	subs	r0, r0, r2
 800f180:	b530      	push	{r4, r5, lr}
 800f182:	d10e      	bne.n	800f1a2 <__mcmp+0x2a>
 800f184:	3314      	adds	r3, #20
 800f186:	3114      	adds	r1, #20
 800f188:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f18c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f190:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f194:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f198:	4295      	cmp	r5, r2
 800f19a:	d003      	beq.n	800f1a4 <__mcmp+0x2c>
 800f19c:	d205      	bcs.n	800f1aa <__mcmp+0x32>
 800f19e:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a2:	bd30      	pop	{r4, r5, pc}
 800f1a4:	42a3      	cmp	r3, r4
 800f1a6:	d3f3      	bcc.n	800f190 <__mcmp+0x18>
 800f1a8:	e7fb      	b.n	800f1a2 <__mcmp+0x2a>
 800f1aa:	2001      	movs	r0, #1
 800f1ac:	e7f9      	b.n	800f1a2 <__mcmp+0x2a>
	...

0800f1b0 <__mdiff>:
 800f1b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b4:	4689      	mov	r9, r1
 800f1b6:	4606      	mov	r6, r0
 800f1b8:	4611      	mov	r1, r2
 800f1ba:	4648      	mov	r0, r9
 800f1bc:	4614      	mov	r4, r2
 800f1be:	f7ff ffdb 	bl	800f178 <__mcmp>
 800f1c2:	1e05      	subs	r5, r0, #0
 800f1c4:	d112      	bne.n	800f1ec <__mdiff+0x3c>
 800f1c6:	4629      	mov	r1, r5
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	f7ff fd11 	bl	800ebf0 <_Balloc>
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	b928      	cbnz	r0, 800f1de <__mdiff+0x2e>
 800f1d2:	4b3f      	ldr	r3, [pc, #252]	@ (800f2d0 <__mdiff+0x120>)
 800f1d4:	f240 2137 	movw	r1, #567	@ 0x237
 800f1d8:	483e      	ldr	r0, [pc, #248]	@ (800f2d4 <__mdiff+0x124>)
 800f1da:	f001 fa95 	bl	8010708 <__assert_func>
 800f1de:	2301      	movs	r3, #1
 800f1e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f1e4:	4610      	mov	r0, r2
 800f1e6:	b003      	add	sp, #12
 800f1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ec:	bfbc      	itt	lt
 800f1ee:	464b      	movlt	r3, r9
 800f1f0:	46a1      	movlt	r9, r4
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f1f8:	bfba      	itte	lt
 800f1fa:	461c      	movlt	r4, r3
 800f1fc:	2501      	movlt	r5, #1
 800f1fe:	2500      	movge	r5, #0
 800f200:	f7ff fcf6 	bl	800ebf0 <_Balloc>
 800f204:	4602      	mov	r2, r0
 800f206:	b918      	cbnz	r0, 800f210 <__mdiff+0x60>
 800f208:	4b31      	ldr	r3, [pc, #196]	@ (800f2d0 <__mdiff+0x120>)
 800f20a:	f240 2145 	movw	r1, #581	@ 0x245
 800f20e:	e7e3      	b.n	800f1d8 <__mdiff+0x28>
 800f210:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f214:	6926      	ldr	r6, [r4, #16]
 800f216:	60c5      	str	r5, [r0, #12]
 800f218:	f109 0310 	add.w	r3, r9, #16
 800f21c:	f109 0514 	add.w	r5, r9, #20
 800f220:	f104 0e14 	add.w	lr, r4, #20
 800f224:	f100 0b14 	add.w	fp, r0, #20
 800f228:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f22c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f230:	9301      	str	r3, [sp, #4]
 800f232:	46d9      	mov	r9, fp
 800f234:	f04f 0c00 	mov.w	ip, #0
 800f238:	9b01      	ldr	r3, [sp, #4]
 800f23a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f23e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f242:	9301      	str	r3, [sp, #4]
 800f244:	fa1f f38a 	uxth.w	r3, sl
 800f248:	4619      	mov	r1, r3
 800f24a:	b283      	uxth	r3, r0
 800f24c:	1acb      	subs	r3, r1, r3
 800f24e:	0c00      	lsrs	r0, r0, #16
 800f250:	4463      	add	r3, ip
 800f252:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f256:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f260:	4576      	cmp	r6, lr
 800f262:	f849 3b04 	str.w	r3, [r9], #4
 800f266:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f26a:	d8e5      	bhi.n	800f238 <__mdiff+0x88>
 800f26c:	1b33      	subs	r3, r6, r4
 800f26e:	3b15      	subs	r3, #21
 800f270:	f023 0303 	bic.w	r3, r3, #3
 800f274:	3415      	adds	r4, #21
 800f276:	3304      	adds	r3, #4
 800f278:	42a6      	cmp	r6, r4
 800f27a:	bf38      	it	cc
 800f27c:	2304      	movcc	r3, #4
 800f27e:	441d      	add	r5, r3
 800f280:	445b      	add	r3, fp
 800f282:	461e      	mov	r6, r3
 800f284:	462c      	mov	r4, r5
 800f286:	4544      	cmp	r4, r8
 800f288:	d30e      	bcc.n	800f2a8 <__mdiff+0xf8>
 800f28a:	f108 0103 	add.w	r1, r8, #3
 800f28e:	1b49      	subs	r1, r1, r5
 800f290:	f021 0103 	bic.w	r1, r1, #3
 800f294:	3d03      	subs	r5, #3
 800f296:	45a8      	cmp	r8, r5
 800f298:	bf38      	it	cc
 800f29a:	2100      	movcc	r1, #0
 800f29c:	440b      	add	r3, r1
 800f29e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f2a2:	b191      	cbz	r1, 800f2ca <__mdiff+0x11a>
 800f2a4:	6117      	str	r7, [r2, #16]
 800f2a6:	e79d      	b.n	800f1e4 <__mdiff+0x34>
 800f2a8:	f854 1b04 	ldr.w	r1, [r4], #4
 800f2ac:	46e6      	mov	lr, ip
 800f2ae:	0c08      	lsrs	r0, r1, #16
 800f2b0:	fa1c fc81 	uxtah	ip, ip, r1
 800f2b4:	4471      	add	r1, lr
 800f2b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f2ba:	b289      	uxth	r1, r1
 800f2bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f2c0:	f846 1b04 	str.w	r1, [r6], #4
 800f2c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f2c8:	e7dd      	b.n	800f286 <__mdiff+0xd6>
 800f2ca:	3f01      	subs	r7, #1
 800f2cc:	e7e7      	b.n	800f29e <__mdiff+0xee>
 800f2ce:	bf00      	nop
 800f2d0:	080117d8 	.word	0x080117d8
 800f2d4:	080117e9 	.word	0x080117e9

0800f2d8 <__ulp>:
 800f2d8:	b082      	sub	sp, #8
 800f2da:	ed8d 0b00 	vstr	d0, [sp]
 800f2de:	9a01      	ldr	r2, [sp, #4]
 800f2e0:	4b0f      	ldr	r3, [pc, #60]	@ (800f320 <__ulp+0x48>)
 800f2e2:	4013      	ands	r3, r2
 800f2e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	dc08      	bgt.n	800f2fe <__ulp+0x26>
 800f2ec:	425b      	negs	r3, r3
 800f2ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f2f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f2f6:	da04      	bge.n	800f302 <__ulp+0x2a>
 800f2f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f2fc:	4113      	asrs	r3, r2
 800f2fe:	2200      	movs	r2, #0
 800f300:	e008      	b.n	800f314 <__ulp+0x3c>
 800f302:	f1a2 0314 	sub.w	r3, r2, #20
 800f306:	2b1e      	cmp	r3, #30
 800f308:	bfda      	itte	le
 800f30a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f30e:	40da      	lsrle	r2, r3
 800f310:	2201      	movgt	r2, #1
 800f312:	2300      	movs	r3, #0
 800f314:	4619      	mov	r1, r3
 800f316:	4610      	mov	r0, r2
 800f318:	ec41 0b10 	vmov	d0, r0, r1
 800f31c:	b002      	add	sp, #8
 800f31e:	4770      	bx	lr
 800f320:	7ff00000 	.word	0x7ff00000

0800f324 <__b2d>:
 800f324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f328:	6906      	ldr	r6, [r0, #16]
 800f32a:	f100 0814 	add.w	r8, r0, #20
 800f32e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f332:	1f37      	subs	r7, r6, #4
 800f334:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f338:	4610      	mov	r0, r2
 800f33a:	f7ff fd4b 	bl	800edd4 <__hi0bits>
 800f33e:	f1c0 0320 	rsb	r3, r0, #32
 800f342:	280a      	cmp	r0, #10
 800f344:	600b      	str	r3, [r1, #0]
 800f346:	491b      	ldr	r1, [pc, #108]	@ (800f3b4 <__b2d+0x90>)
 800f348:	dc15      	bgt.n	800f376 <__b2d+0x52>
 800f34a:	f1c0 0c0b 	rsb	ip, r0, #11
 800f34e:	fa22 f30c 	lsr.w	r3, r2, ip
 800f352:	45b8      	cmp	r8, r7
 800f354:	ea43 0501 	orr.w	r5, r3, r1
 800f358:	bf34      	ite	cc
 800f35a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f35e:	2300      	movcs	r3, #0
 800f360:	3015      	adds	r0, #21
 800f362:	fa02 f000 	lsl.w	r0, r2, r0
 800f366:	fa23 f30c 	lsr.w	r3, r3, ip
 800f36a:	4303      	orrs	r3, r0
 800f36c:	461c      	mov	r4, r3
 800f36e:	ec45 4b10 	vmov	d0, r4, r5
 800f372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f376:	45b8      	cmp	r8, r7
 800f378:	bf3a      	itte	cc
 800f37a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f37e:	f1a6 0708 	subcc.w	r7, r6, #8
 800f382:	2300      	movcs	r3, #0
 800f384:	380b      	subs	r0, #11
 800f386:	d012      	beq.n	800f3ae <__b2d+0x8a>
 800f388:	f1c0 0120 	rsb	r1, r0, #32
 800f38c:	fa23 f401 	lsr.w	r4, r3, r1
 800f390:	4082      	lsls	r2, r0
 800f392:	4322      	orrs	r2, r4
 800f394:	4547      	cmp	r7, r8
 800f396:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f39a:	bf8c      	ite	hi
 800f39c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f3a0:	2200      	movls	r2, #0
 800f3a2:	4083      	lsls	r3, r0
 800f3a4:	40ca      	lsrs	r2, r1
 800f3a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f3aa:	4313      	orrs	r3, r2
 800f3ac:	e7de      	b.n	800f36c <__b2d+0x48>
 800f3ae:	ea42 0501 	orr.w	r5, r2, r1
 800f3b2:	e7db      	b.n	800f36c <__b2d+0x48>
 800f3b4:	3ff00000 	.word	0x3ff00000

0800f3b8 <__d2b>:
 800f3b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3bc:	460f      	mov	r7, r1
 800f3be:	2101      	movs	r1, #1
 800f3c0:	ec59 8b10 	vmov	r8, r9, d0
 800f3c4:	4616      	mov	r6, r2
 800f3c6:	f7ff fc13 	bl	800ebf0 <_Balloc>
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	b930      	cbnz	r0, 800f3dc <__d2b+0x24>
 800f3ce:	4602      	mov	r2, r0
 800f3d0:	4b23      	ldr	r3, [pc, #140]	@ (800f460 <__d2b+0xa8>)
 800f3d2:	4824      	ldr	r0, [pc, #144]	@ (800f464 <__d2b+0xac>)
 800f3d4:	f240 310f 	movw	r1, #783	@ 0x30f
 800f3d8:	f001 f996 	bl	8010708 <__assert_func>
 800f3dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f3e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f3e4:	b10d      	cbz	r5, 800f3ea <__d2b+0x32>
 800f3e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f3ea:	9301      	str	r3, [sp, #4]
 800f3ec:	f1b8 0300 	subs.w	r3, r8, #0
 800f3f0:	d023      	beq.n	800f43a <__d2b+0x82>
 800f3f2:	4668      	mov	r0, sp
 800f3f4:	9300      	str	r3, [sp, #0]
 800f3f6:	f7ff fd0c 	bl	800ee12 <__lo0bits>
 800f3fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f3fe:	b1d0      	cbz	r0, 800f436 <__d2b+0x7e>
 800f400:	f1c0 0320 	rsb	r3, r0, #32
 800f404:	fa02 f303 	lsl.w	r3, r2, r3
 800f408:	430b      	orrs	r3, r1
 800f40a:	40c2      	lsrs	r2, r0
 800f40c:	6163      	str	r3, [r4, #20]
 800f40e:	9201      	str	r2, [sp, #4]
 800f410:	9b01      	ldr	r3, [sp, #4]
 800f412:	61a3      	str	r3, [r4, #24]
 800f414:	2b00      	cmp	r3, #0
 800f416:	bf0c      	ite	eq
 800f418:	2201      	moveq	r2, #1
 800f41a:	2202      	movne	r2, #2
 800f41c:	6122      	str	r2, [r4, #16]
 800f41e:	b1a5      	cbz	r5, 800f44a <__d2b+0x92>
 800f420:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f424:	4405      	add	r5, r0
 800f426:	603d      	str	r5, [r7, #0]
 800f428:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f42c:	6030      	str	r0, [r6, #0]
 800f42e:	4620      	mov	r0, r4
 800f430:	b003      	add	sp, #12
 800f432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f436:	6161      	str	r1, [r4, #20]
 800f438:	e7ea      	b.n	800f410 <__d2b+0x58>
 800f43a:	a801      	add	r0, sp, #4
 800f43c:	f7ff fce9 	bl	800ee12 <__lo0bits>
 800f440:	9b01      	ldr	r3, [sp, #4]
 800f442:	6163      	str	r3, [r4, #20]
 800f444:	3020      	adds	r0, #32
 800f446:	2201      	movs	r2, #1
 800f448:	e7e8      	b.n	800f41c <__d2b+0x64>
 800f44a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f44e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f452:	6038      	str	r0, [r7, #0]
 800f454:	6918      	ldr	r0, [r3, #16]
 800f456:	f7ff fcbd 	bl	800edd4 <__hi0bits>
 800f45a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f45e:	e7e5      	b.n	800f42c <__d2b+0x74>
 800f460:	080117d8 	.word	0x080117d8
 800f464:	080117e9 	.word	0x080117e9

0800f468 <__ratio>:
 800f468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f46c:	b085      	sub	sp, #20
 800f46e:	e9cd 1000 	strd	r1, r0, [sp]
 800f472:	a902      	add	r1, sp, #8
 800f474:	f7ff ff56 	bl	800f324 <__b2d>
 800f478:	9800      	ldr	r0, [sp, #0]
 800f47a:	a903      	add	r1, sp, #12
 800f47c:	ec55 4b10 	vmov	r4, r5, d0
 800f480:	f7ff ff50 	bl	800f324 <__b2d>
 800f484:	9b01      	ldr	r3, [sp, #4]
 800f486:	6919      	ldr	r1, [r3, #16]
 800f488:	9b00      	ldr	r3, [sp, #0]
 800f48a:	691b      	ldr	r3, [r3, #16]
 800f48c:	1ac9      	subs	r1, r1, r3
 800f48e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f492:	1a9b      	subs	r3, r3, r2
 800f494:	ec5b ab10 	vmov	sl, fp, d0
 800f498:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	bfce      	itee	gt
 800f4a0:	462a      	movgt	r2, r5
 800f4a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f4a6:	465a      	movle	r2, fp
 800f4a8:	462f      	mov	r7, r5
 800f4aa:	46d9      	mov	r9, fp
 800f4ac:	bfcc      	ite	gt
 800f4ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f4b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f4b6:	464b      	mov	r3, r9
 800f4b8:	4652      	mov	r2, sl
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	4639      	mov	r1, r7
 800f4be:	f7f1 f9ed 	bl	800089c <__aeabi_ddiv>
 800f4c2:	ec41 0b10 	vmov	d0, r0, r1
 800f4c6:	b005      	add	sp, #20
 800f4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4cc <__copybits>:
 800f4cc:	3901      	subs	r1, #1
 800f4ce:	b570      	push	{r4, r5, r6, lr}
 800f4d0:	1149      	asrs	r1, r1, #5
 800f4d2:	6914      	ldr	r4, [r2, #16]
 800f4d4:	3101      	adds	r1, #1
 800f4d6:	f102 0314 	add.w	r3, r2, #20
 800f4da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f4de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f4e2:	1f05      	subs	r5, r0, #4
 800f4e4:	42a3      	cmp	r3, r4
 800f4e6:	d30c      	bcc.n	800f502 <__copybits+0x36>
 800f4e8:	1aa3      	subs	r3, r4, r2
 800f4ea:	3b11      	subs	r3, #17
 800f4ec:	f023 0303 	bic.w	r3, r3, #3
 800f4f0:	3211      	adds	r2, #17
 800f4f2:	42a2      	cmp	r2, r4
 800f4f4:	bf88      	it	hi
 800f4f6:	2300      	movhi	r3, #0
 800f4f8:	4418      	add	r0, r3
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	4288      	cmp	r0, r1
 800f4fe:	d305      	bcc.n	800f50c <__copybits+0x40>
 800f500:	bd70      	pop	{r4, r5, r6, pc}
 800f502:	f853 6b04 	ldr.w	r6, [r3], #4
 800f506:	f845 6f04 	str.w	r6, [r5, #4]!
 800f50a:	e7eb      	b.n	800f4e4 <__copybits+0x18>
 800f50c:	f840 3b04 	str.w	r3, [r0], #4
 800f510:	e7f4      	b.n	800f4fc <__copybits+0x30>

0800f512 <__any_on>:
 800f512:	f100 0214 	add.w	r2, r0, #20
 800f516:	6900      	ldr	r0, [r0, #16]
 800f518:	114b      	asrs	r3, r1, #5
 800f51a:	4298      	cmp	r0, r3
 800f51c:	b510      	push	{r4, lr}
 800f51e:	db11      	blt.n	800f544 <__any_on+0x32>
 800f520:	dd0a      	ble.n	800f538 <__any_on+0x26>
 800f522:	f011 011f 	ands.w	r1, r1, #31
 800f526:	d007      	beq.n	800f538 <__any_on+0x26>
 800f528:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f52c:	fa24 f001 	lsr.w	r0, r4, r1
 800f530:	fa00 f101 	lsl.w	r1, r0, r1
 800f534:	428c      	cmp	r4, r1
 800f536:	d10b      	bne.n	800f550 <__any_on+0x3e>
 800f538:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d803      	bhi.n	800f548 <__any_on+0x36>
 800f540:	2000      	movs	r0, #0
 800f542:	bd10      	pop	{r4, pc}
 800f544:	4603      	mov	r3, r0
 800f546:	e7f7      	b.n	800f538 <__any_on+0x26>
 800f548:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f54c:	2900      	cmp	r1, #0
 800f54e:	d0f5      	beq.n	800f53c <__any_on+0x2a>
 800f550:	2001      	movs	r0, #1
 800f552:	e7f6      	b.n	800f542 <__any_on+0x30>

0800f554 <sulp>:
 800f554:	b570      	push	{r4, r5, r6, lr}
 800f556:	4604      	mov	r4, r0
 800f558:	460d      	mov	r5, r1
 800f55a:	ec45 4b10 	vmov	d0, r4, r5
 800f55e:	4616      	mov	r6, r2
 800f560:	f7ff feba 	bl	800f2d8 <__ulp>
 800f564:	ec51 0b10 	vmov	r0, r1, d0
 800f568:	b17e      	cbz	r6, 800f58a <sulp+0x36>
 800f56a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f56e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f572:	2b00      	cmp	r3, #0
 800f574:	dd09      	ble.n	800f58a <sulp+0x36>
 800f576:	051b      	lsls	r3, r3, #20
 800f578:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f57c:	2400      	movs	r4, #0
 800f57e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f582:	4622      	mov	r2, r4
 800f584:	462b      	mov	r3, r5
 800f586:	f7f1 f85f 	bl	8000648 <__aeabi_dmul>
 800f58a:	ec41 0b10 	vmov	d0, r0, r1
 800f58e:	bd70      	pop	{r4, r5, r6, pc}

0800f590 <_strtod_l>:
 800f590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f594:	b09f      	sub	sp, #124	@ 0x7c
 800f596:	460c      	mov	r4, r1
 800f598:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f59a:	2200      	movs	r2, #0
 800f59c:	921a      	str	r2, [sp, #104]	@ 0x68
 800f59e:	9005      	str	r0, [sp, #20]
 800f5a0:	f04f 0a00 	mov.w	sl, #0
 800f5a4:	f04f 0b00 	mov.w	fp, #0
 800f5a8:	460a      	mov	r2, r1
 800f5aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800f5ac:	7811      	ldrb	r1, [r2, #0]
 800f5ae:	292b      	cmp	r1, #43	@ 0x2b
 800f5b0:	d04a      	beq.n	800f648 <_strtod_l+0xb8>
 800f5b2:	d838      	bhi.n	800f626 <_strtod_l+0x96>
 800f5b4:	290d      	cmp	r1, #13
 800f5b6:	d832      	bhi.n	800f61e <_strtod_l+0x8e>
 800f5b8:	2908      	cmp	r1, #8
 800f5ba:	d832      	bhi.n	800f622 <_strtod_l+0x92>
 800f5bc:	2900      	cmp	r1, #0
 800f5be:	d03b      	beq.n	800f638 <_strtod_l+0xa8>
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f5c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f5c6:	782a      	ldrb	r2, [r5, #0]
 800f5c8:	2a30      	cmp	r2, #48	@ 0x30
 800f5ca:	f040 80b3 	bne.w	800f734 <_strtod_l+0x1a4>
 800f5ce:	786a      	ldrb	r2, [r5, #1]
 800f5d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f5d4:	2a58      	cmp	r2, #88	@ 0x58
 800f5d6:	d16e      	bne.n	800f6b6 <_strtod_l+0x126>
 800f5d8:	9302      	str	r3, [sp, #8]
 800f5da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5dc:	9301      	str	r3, [sp, #4]
 800f5de:	ab1a      	add	r3, sp, #104	@ 0x68
 800f5e0:	9300      	str	r3, [sp, #0]
 800f5e2:	4a8e      	ldr	r2, [pc, #568]	@ (800f81c <_strtod_l+0x28c>)
 800f5e4:	9805      	ldr	r0, [sp, #20]
 800f5e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f5e8:	a919      	add	r1, sp, #100	@ 0x64
 800f5ea:	f001 f927 	bl	801083c <__gethex>
 800f5ee:	f010 060f 	ands.w	r6, r0, #15
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	d005      	beq.n	800f602 <_strtod_l+0x72>
 800f5f6:	2e06      	cmp	r6, #6
 800f5f8:	d128      	bne.n	800f64c <_strtod_l+0xbc>
 800f5fa:	3501      	adds	r5, #1
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	9519      	str	r5, [sp, #100]	@ 0x64
 800f600:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f602:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f604:	2b00      	cmp	r3, #0
 800f606:	f040 858e 	bne.w	8010126 <_strtod_l+0xb96>
 800f60a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f60c:	b1cb      	cbz	r3, 800f642 <_strtod_l+0xb2>
 800f60e:	4652      	mov	r2, sl
 800f610:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f614:	ec43 2b10 	vmov	d0, r2, r3
 800f618:	b01f      	add	sp, #124	@ 0x7c
 800f61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61e:	2920      	cmp	r1, #32
 800f620:	d1ce      	bne.n	800f5c0 <_strtod_l+0x30>
 800f622:	3201      	adds	r2, #1
 800f624:	e7c1      	b.n	800f5aa <_strtod_l+0x1a>
 800f626:	292d      	cmp	r1, #45	@ 0x2d
 800f628:	d1ca      	bne.n	800f5c0 <_strtod_l+0x30>
 800f62a:	2101      	movs	r1, #1
 800f62c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f62e:	1c51      	adds	r1, r2, #1
 800f630:	9119      	str	r1, [sp, #100]	@ 0x64
 800f632:	7852      	ldrb	r2, [r2, #1]
 800f634:	2a00      	cmp	r2, #0
 800f636:	d1c5      	bne.n	800f5c4 <_strtod_l+0x34>
 800f638:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f63a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	f040 8570 	bne.w	8010122 <_strtod_l+0xb92>
 800f642:	4652      	mov	r2, sl
 800f644:	465b      	mov	r3, fp
 800f646:	e7e5      	b.n	800f614 <_strtod_l+0x84>
 800f648:	2100      	movs	r1, #0
 800f64a:	e7ef      	b.n	800f62c <_strtod_l+0x9c>
 800f64c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f64e:	b13a      	cbz	r2, 800f660 <_strtod_l+0xd0>
 800f650:	2135      	movs	r1, #53	@ 0x35
 800f652:	a81c      	add	r0, sp, #112	@ 0x70
 800f654:	f7ff ff3a 	bl	800f4cc <__copybits>
 800f658:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f65a:	9805      	ldr	r0, [sp, #20]
 800f65c:	f7ff fb08 	bl	800ec70 <_Bfree>
 800f660:	3e01      	subs	r6, #1
 800f662:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f664:	2e04      	cmp	r6, #4
 800f666:	d806      	bhi.n	800f676 <_strtod_l+0xe6>
 800f668:	e8df f006 	tbb	[pc, r6]
 800f66c:	201d0314 	.word	0x201d0314
 800f670:	14          	.byte	0x14
 800f671:	00          	.byte	0x00
 800f672:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f676:	05e1      	lsls	r1, r4, #23
 800f678:	bf48      	it	mi
 800f67a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f67e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f682:	0d1b      	lsrs	r3, r3, #20
 800f684:	051b      	lsls	r3, r3, #20
 800f686:	2b00      	cmp	r3, #0
 800f688:	d1bb      	bne.n	800f602 <_strtod_l+0x72>
 800f68a:	f7fe fb2f 	bl	800dcec <__errno>
 800f68e:	2322      	movs	r3, #34	@ 0x22
 800f690:	6003      	str	r3, [r0, #0]
 800f692:	e7b6      	b.n	800f602 <_strtod_l+0x72>
 800f694:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f698:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f69c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f6a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f6a4:	e7e7      	b.n	800f676 <_strtod_l+0xe6>
 800f6a6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f824 <_strtod_l+0x294>
 800f6aa:	e7e4      	b.n	800f676 <_strtod_l+0xe6>
 800f6ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f6b0:	f04f 3aff 	mov.w	sl, #4294967295
 800f6b4:	e7df      	b.n	800f676 <_strtod_l+0xe6>
 800f6b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f6b8:	1c5a      	adds	r2, r3, #1
 800f6ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800f6bc:	785b      	ldrb	r3, [r3, #1]
 800f6be:	2b30      	cmp	r3, #48	@ 0x30
 800f6c0:	d0f9      	beq.n	800f6b6 <_strtod_l+0x126>
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d09d      	beq.n	800f602 <_strtod_l+0x72>
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f6cc:	930c      	str	r3, [sp, #48]	@ 0x30
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	9308      	str	r3, [sp, #32]
 800f6d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6d4:	461f      	mov	r7, r3
 800f6d6:	220a      	movs	r2, #10
 800f6d8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f6da:	7805      	ldrb	r5, [r0, #0]
 800f6dc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f6e0:	b2d9      	uxtb	r1, r3
 800f6e2:	2909      	cmp	r1, #9
 800f6e4:	d928      	bls.n	800f738 <_strtod_l+0x1a8>
 800f6e6:	494e      	ldr	r1, [pc, #312]	@ (800f820 <_strtod_l+0x290>)
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	f000 ffd5 	bl	8010698 <strncmp>
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	d032      	beq.n	800f758 <_strtod_l+0x1c8>
 800f6f2:	2000      	movs	r0, #0
 800f6f4:	462a      	mov	r2, r5
 800f6f6:	4681      	mov	r9, r0
 800f6f8:	463d      	mov	r5, r7
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	2a65      	cmp	r2, #101	@ 0x65
 800f6fe:	d001      	beq.n	800f704 <_strtod_l+0x174>
 800f700:	2a45      	cmp	r2, #69	@ 0x45
 800f702:	d114      	bne.n	800f72e <_strtod_l+0x19e>
 800f704:	b91d      	cbnz	r5, 800f70e <_strtod_l+0x17e>
 800f706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f708:	4302      	orrs	r2, r0
 800f70a:	d095      	beq.n	800f638 <_strtod_l+0xa8>
 800f70c:	2500      	movs	r5, #0
 800f70e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f710:	1c62      	adds	r2, r4, #1
 800f712:	9219      	str	r2, [sp, #100]	@ 0x64
 800f714:	7862      	ldrb	r2, [r4, #1]
 800f716:	2a2b      	cmp	r2, #43	@ 0x2b
 800f718:	d077      	beq.n	800f80a <_strtod_l+0x27a>
 800f71a:	2a2d      	cmp	r2, #45	@ 0x2d
 800f71c:	d07b      	beq.n	800f816 <_strtod_l+0x286>
 800f71e:	f04f 0c00 	mov.w	ip, #0
 800f722:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f726:	2909      	cmp	r1, #9
 800f728:	f240 8082 	bls.w	800f830 <_strtod_l+0x2a0>
 800f72c:	9419      	str	r4, [sp, #100]	@ 0x64
 800f72e:	f04f 0800 	mov.w	r8, #0
 800f732:	e0a2      	b.n	800f87a <_strtod_l+0x2ea>
 800f734:	2300      	movs	r3, #0
 800f736:	e7c7      	b.n	800f6c8 <_strtod_l+0x138>
 800f738:	2f08      	cmp	r7, #8
 800f73a:	bfd5      	itete	le
 800f73c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f73e:	9908      	ldrgt	r1, [sp, #32]
 800f740:	fb02 3301 	mlale	r3, r2, r1, r3
 800f744:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f748:	f100 0001 	add.w	r0, r0, #1
 800f74c:	bfd4      	ite	le
 800f74e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f750:	9308      	strgt	r3, [sp, #32]
 800f752:	3701      	adds	r7, #1
 800f754:	9019      	str	r0, [sp, #100]	@ 0x64
 800f756:	e7bf      	b.n	800f6d8 <_strtod_l+0x148>
 800f758:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f75a:	1c5a      	adds	r2, r3, #1
 800f75c:	9219      	str	r2, [sp, #100]	@ 0x64
 800f75e:	785a      	ldrb	r2, [r3, #1]
 800f760:	b37f      	cbz	r7, 800f7c2 <_strtod_l+0x232>
 800f762:	4681      	mov	r9, r0
 800f764:	463d      	mov	r5, r7
 800f766:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f76a:	2b09      	cmp	r3, #9
 800f76c:	d912      	bls.n	800f794 <_strtod_l+0x204>
 800f76e:	2301      	movs	r3, #1
 800f770:	e7c4      	b.n	800f6fc <_strtod_l+0x16c>
 800f772:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f774:	1c5a      	adds	r2, r3, #1
 800f776:	9219      	str	r2, [sp, #100]	@ 0x64
 800f778:	785a      	ldrb	r2, [r3, #1]
 800f77a:	3001      	adds	r0, #1
 800f77c:	2a30      	cmp	r2, #48	@ 0x30
 800f77e:	d0f8      	beq.n	800f772 <_strtod_l+0x1e2>
 800f780:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f784:	2b08      	cmp	r3, #8
 800f786:	f200 84d3 	bhi.w	8010130 <_strtod_l+0xba0>
 800f78a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f78c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f78e:	4681      	mov	r9, r0
 800f790:	2000      	movs	r0, #0
 800f792:	4605      	mov	r5, r0
 800f794:	3a30      	subs	r2, #48	@ 0x30
 800f796:	f100 0301 	add.w	r3, r0, #1
 800f79a:	d02a      	beq.n	800f7f2 <_strtod_l+0x262>
 800f79c:	4499      	add	r9, r3
 800f79e:	eb00 0c05 	add.w	ip, r0, r5
 800f7a2:	462b      	mov	r3, r5
 800f7a4:	210a      	movs	r1, #10
 800f7a6:	4563      	cmp	r3, ip
 800f7a8:	d10d      	bne.n	800f7c6 <_strtod_l+0x236>
 800f7aa:	1c69      	adds	r1, r5, #1
 800f7ac:	4401      	add	r1, r0
 800f7ae:	4428      	add	r0, r5
 800f7b0:	2808      	cmp	r0, #8
 800f7b2:	dc16      	bgt.n	800f7e2 <_strtod_l+0x252>
 800f7b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f7b6:	230a      	movs	r3, #10
 800f7b8:	fb03 2300 	mla	r3, r3, r0, r2
 800f7bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7be:	2300      	movs	r3, #0
 800f7c0:	e018      	b.n	800f7f4 <_strtod_l+0x264>
 800f7c2:	4638      	mov	r0, r7
 800f7c4:	e7da      	b.n	800f77c <_strtod_l+0x1ec>
 800f7c6:	2b08      	cmp	r3, #8
 800f7c8:	f103 0301 	add.w	r3, r3, #1
 800f7cc:	dc03      	bgt.n	800f7d6 <_strtod_l+0x246>
 800f7ce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f7d0:	434e      	muls	r6, r1
 800f7d2:	960a      	str	r6, [sp, #40]	@ 0x28
 800f7d4:	e7e7      	b.n	800f7a6 <_strtod_l+0x216>
 800f7d6:	2b10      	cmp	r3, #16
 800f7d8:	bfde      	ittt	le
 800f7da:	9e08      	ldrle	r6, [sp, #32]
 800f7dc:	434e      	mulle	r6, r1
 800f7de:	9608      	strle	r6, [sp, #32]
 800f7e0:	e7e1      	b.n	800f7a6 <_strtod_l+0x216>
 800f7e2:	280f      	cmp	r0, #15
 800f7e4:	dceb      	bgt.n	800f7be <_strtod_l+0x22e>
 800f7e6:	9808      	ldr	r0, [sp, #32]
 800f7e8:	230a      	movs	r3, #10
 800f7ea:	fb03 2300 	mla	r3, r3, r0, r2
 800f7ee:	9308      	str	r3, [sp, #32]
 800f7f0:	e7e5      	b.n	800f7be <_strtod_l+0x22e>
 800f7f2:	4629      	mov	r1, r5
 800f7f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f7f6:	1c50      	adds	r0, r2, #1
 800f7f8:	9019      	str	r0, [sp, #100]	@ 0x64
 800f7fa:	7852      	ldrb	r2, [r2, #1]
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	460d      	mov	r5, r1
 800f800:	e7b1      	b.n	800f766 <_strtod_l+0x1d6>
 800f802:	f04f 0900 	mov.w	r9, #0
 800f806:	2301      	movs	r3, #1
 800f808:	e77d      	b.n	800f706 <_strtod_l+0x176>
 800f80a:	f04f 0c00 	mov.w	ip, #0
 800f80e:	1ca2      	adds	r2, r4, #2
 800f810:	9219      	str	r2, [sp, #100]	@ 0x64
 800f812:	78a2      	ldrb	r2, [r4, #2]
 800f814:	e785      	b.n	800f722 <_strtod_l+0x192>
 800f816:	f04f 0c01 	mov.w	ip, #1
 800f81a:	e7f8      	b.n	800f80e <_strtod_l+0x27e>
 800f81c:	08011958 	.word	0x08011958
 800f820:	08011940 	.word	0x08011940
 800f824:	7ff00000 	.word	0x7ff00000
 800f828:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f82a:	1c51      	adds	r1, r2, #1
 800f82c:	9119      	str	r1, [sp, #100]	@ 0x64
 800f82e:	7852      	ldrb	r2, [r2, #1]
 800f830:	2a30      	cmp	r2, #48	@ 0x30
 800f832:	d0f9      	beq.n	800f828 <_strtod_l+0x298>
 800f834:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f838:	2908      	cmp	r1, #8
 800f83a:	f63f af78 	bhi.w	800f72e <_strtod_l+0x19e>
 800f83e:	3a30      	subs	r2, #48	@ 0x30
 800f840:	920e      	str	r2, [sp, #56]	@ 0x38
 800f842:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f844:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f846:	f04f 080a 	mov.w	r8, #10
 800f84a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f84c:	1c56      	adds	r6, r2, #1
 800f84e:	9619      	str	r6, [sp, #100]	@ 0x64
 800f850:	7852      	ldrb	r2, [r2, #1]
 800f852:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f856:	f1be 0f09 	cmp.w	lr, #9
 800f85a:	d939      	bls.n	800f8d0 <_strtod_l+0x340>
 800f85c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f85e:	1a76      	subs	r6, r6, r1
 800f860:	2e08      	cmp	r6, #8
 800f862:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f866:	dc03      	bgt.n	800f870 <_strtod_l+0x2e0>
 800f868:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f86a:	4588      	cmp	r8, r1
 800f86c:	bfa8      	it	ge
 800f86e:	4688      	movge	r8, r1
 800f870:	f1bc 0f00 	cmp.w	ip, #0
 800f874:	d001      	beq.n	800f87a <_strtod_l+0x2ea>
 800f876:	f1c8 0800 	rsb	r8, r8, #0
 800f87a:	2d00      	cmp	r5, #0
 800f87c:	d14e      	bne.n	800f91c <_strtod_l+0x38c>
 800f87e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f880:	4308      	orrs	r0, r1
 800f882:	f47f aebe 	bne.w	800f602 <_strtod_l+0x72>
 800f886:	2b00      	cmp	r3, #0
 800f888:	f47f aed6 	bne.w	800f638 <_strtod_l+0xa8>
 800f88c:	2a69      	cmp	r2, #105	@ 0x69
 800f88e:	d028      	beq.n	800f8e2 <_strtod_l+0x352>
 800f890:	dc25      	bgt.n	800f8de <_strtod_l+0x34e>
 800f892:	2a49      	cmp	r2, #73	@ 0x49
 800f894:	d025      	beq.n	800f8e2 <_strtod_l+0x352>
 800f896:	2a4e      	cmp	r2, #78	@ 0x4e
 800f898:	f47f aece 	bne.w	800f638 <_strtod_l+0xa8>
 800f89c:	499b      	ldr	r1, [pc, #620]	@ (800fb0c <_strtod_l+0x57c>)
 800f89e:	a819      	add	r0, sp, #100	@ 0x64
 800f8a0:	f001 f9ee 	bl	8010c80 <__match>
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	f43f aec7 	beq.w	800f638 <_strtod_l+0xa8>
 800f8aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	2b28      	cmp	r3, #40	@ 0x28
 800f8b0:	d12e      	bne.n	800f910 <_strtod_l+0x380>
 800f8b2:	4997      	ldr	r1, [pc, #604]	@ (800fb10 <_strtod_l+0x580>)
 800f8b4:	aa1c      	add	r2, sp, #112	@ 0x70
 800f8b6:	a819      	add	r0, sp, #100	@ 0x64
 800f8b8:	f001 f9f6 	bl	8010ca8 <__hexnan>
 800f8bc:	2805      	cmp	r0, #5
 800f8be:	d127      	bne.n	800f910 <_strtod_l+0x380>
 800f8c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f8c2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f8c6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f8ca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f8ce:	e698      	b.n	800f602 <_strtod_l+0x72>
 800f8d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f8d2:	fb08 2101 	mla	r1, r8, r1, r2
 800f8d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f8da:	920e      	str	r2, [sp, #56]	@ 0x38
 800f8dc:	e7b5      	b.n	800f84a <_strtod_l+0x2ba>
 800f8de:	2a6e      	cmp	r2, #110	@ 0x6e
 800f8e0:	e7da      	b.n	800f898 <_strtod_l+0x308>
 800f8e2:	498c      	ldr	r1, [pc, #560]	@ (800fb14 <_strtod_l+0x584>)
 800f8e4:	a819      	add	r0, sp, #100	@ 0x64
 800f8e6:	f001 f9cb 	bl	8010c80 <__match>
 800f8ea:	2800      	cmp	r0, #0
 800f8ec:	f43f aea4 	beq.w	800f638 <_strtod_l+0xa8>
 800f8f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f8f2:	4989      	ldr	r1, [pc, #548]	@ (800fb18 <_strtod_l+0x588>)
 800f8f4:	3b01      	subs	r3, #1
 800f8f6:	a819      	add	r0, sp, #100	@ 0x64
 800f8f8:	9319      	str	r3, [sp, #100]	@ 0x64
 800f8fa:	f001 f9c1 	bl	8010c80 <__match>
 800f8fe:	b910      	cbnz	r0, 800f906 <_strtod_l+0x376>
 800f900:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f902:	3301      	adds	r3, #1
 800f904:	9319      	str	r3, [sp, #100]	@ 0x64
 800f906:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800fb28 <_strtod_l+0x598>
 800f90a:	f04f 0a00 	mov.w	sl, #0
 800f90e:	e678      	b.n	800f602 <_strtod_l+0x72>
 800f910:	4882      	ldr	r0, [pc, #520]	@ (800fb1c <_strtod_l+0x58c>)
 800f912:	f000 fef1 	bl	80106f8 <nan>
 800f916:	ec5b ab10 	vmov	sl, fp, d0
 800f91a:	e672      	b.n	800f602 <_strtod_l+0x72>
 800f91c:	eba8 0309 	sub.w	r3, r8, r9
 800f920:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f922:	9309      	str	r3, [sp, #36]	@ 0x24
 800f924:	2f00      	cmp	r7, #0
 800f926:	bf08      	it	eq
 800f928:	462f      	moveq	r7, r5
 800f92a:	2d10      	cmp	r5, #16
 800f92c:	462c      	mov	r4, r5
 800f92e:	bfa8      	it	ge
 800f930:	2410      	movge	r4, #16
 800f932:	f7f0 fe0f 	bl	8000554 <__aeabi_ui2d>
 800f936:	2d09      	cmp	r5, #9
 800f938:	4682      	mov	sl, r0
 800f93a:	468b      	mov	fp, r1
 800f93c:	dc13      	bgt.n	800f966 <_strtod_l+0x3d6>
 800f93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f940:	2b00      	cmp	r3, #0
 800f942:	f43f ae5e 	beq.w	800f602 <_strtod_l+0x72>
 800f946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f948:	dd78      	ble.n	800fa3c <_strtod_l+0x4ac>
 800f94a:	2b16      	cmp	r3, #22
 800f94c:	dc5f      	bgt.n	800fa0e <_strtod_l+0x47e>
 800f94e:	4974      	ldr	r1, [pc, #464]	@ (800fb20 <_strtod_l+0x590>)
 800f950:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f954:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f958:	4652      	mov	r2, sl
 800f95a:	465b      	mov	r3, fp
 800f95c:	f7f0 fe74 	bl	8000648 <__aeabi_dmul>
 800f960:	4682      	mov	sl, r0
 800f962:	468b      	mov	fp, r1
 800f964:	e64d      	b.n	800f602 <_strtod_l+0x72>
 800f966:	4b6e      	ldr	r3, [pc, #440]	@ (800fb20 <_strtod_l+0x590>)
 800f968:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f96c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f970:	f7f0 fe6a 	bl	8000648 <__aeabi_dmul>
 800f974:	4682      	mov	sl, r0
 800f976:	9808      	ldr	r0, [sp, #32]
 800f978:	468b      	mov	fp, r1
 800f97a:	f7f0 fdeb 	bl	8000554 <__aeabi_ui2d>
 800f97e:	4602      	mov	r2, r0
 800f980:	460b      	mov	r3, r1
 800f982:	4650      	mov	r0, sl
 800f984:	4659      	mov	r1, fp
 800f986:	f7f0 fca9 	bl	80002dc <__adddf3>
 800f98a:	2d0f      	cmp	r5, #15
 800f98c:	4682      	mov	sl, r0
 800f98e:	468b      	mov	fp, r1
 800f990:	ddd5      	ble.n	800f93e <_strtod_l+0x3ae>
 800f992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f994:	1b2c      	subs	r4, r5, r4
 800f996:	441c      	add	r4, r3
 800f998:	2c00      	cmp	r4, #0
 800f99a:	f340 8096 	ble.w	800faca <_strtod_l+0x53a>
 800f99e:	f014 030f 	ands.w	r3, r4, #15
 800f9a2:	d00a      	beq.n	800f9ba <_strtod_l+0x42a>
 800f9a4:	495e      	ldr	r1, [pc, #376]	@ (800fb20 <_strtod_l+0x590>)
 800f9a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f9aa:	4652      	mov	r2, sl
 800f9ac:	465b      	mov	r3, fp
 800f9ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9b2:	f7f0 fe49 	bl	8000648 <__aeabi_dmul>
 800f9b6:	4682      	mov	sl, r0
 800f9b8:	468b      	mov	fp, r1
 800f9ba:	f034 040f 	bics.w	r4, r4, #15
 800f9be:	d073      	beq.n	800faa8 <_strtod_l+0x518>
 800f9c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f9c4:	dd48      	ble.n	800fa58 <_strtod_l+0x4c8>
 800f9c6:	2400      	movs	r4, #0
 800f9c8:	46a0      	mov	r8, r4
 800f9ca:	940a      	str	r4, [sp, #40]	@ 0x28
 800f9cc:	46a1      	mov	r9, r4
 800f9ce:	9a05      	ldr	r2, [sp, #20]
 800f9d0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800fb28 <_strtod_l+0x598>
 800f9d4:	2322      	movs	r3, #34	@ 0x22
 800f9d6:	6013      	str	r3, [r2, #0]
 800f9d8:	f04f 0a00 	mov.w	sl, #0
 800f9dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	f43f ae0f 	beq.w	800f602 <_strtod_l+0x72>
 800f9e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f9e6:	9805      	ldr	r0, [sp, #20]
 800f9e8:	f7ff f942 	bl	800ec70 <_Bfree>
 800f9ec:	9805      	ldr	r0, [sp, #20]
 800f9ee:	4649      	mov	r1, r9
 800f9f0:	f7ff f93e 	bl	800ec70 <_Bfree>
 800f9f4:	9805      	ldr	r0, [sp, #20]
 800f9f6:	4641      	mov	r1, r8
 800f9f8:	f7ff f93a 	bl	800ec70 <_Bfree>
 800f9fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f9fe:	9805      	ldr	r0, [sp, #20]
 800fa00:	f7ff f936 	bl	800ec70 <_Bfree>
 800fa04:	9805      	ldr	r0, [sp, #20]
 800fa06:	4621      	mov	r1, r4
 800fa08:	f7ff f932 	bl	800ec70 <_Bfree>
 800fa0c:	e5f9      	b.n	800f602 <_strtod_l+0x72>
 800fa0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800fa14:	4293      	cmp	r3, r2
 800fa16:	dbbc      	blt.n	800f992 <_strtod_l+0x402>
 800fa18:	4c41      	ldr	r4, [pc, #260]	@ (800fb20 <_strtod_l+0x590>)
 800fa1a:	f1c5 050f 	rsb	r5, r5, #15
 800fa1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fa22:	4652      	mov	r2, sl
 800fa24:	465b      	mov	r3, fp
 800fa26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa2a:	f7f0 fe0d 	bl	8000648 <__aeabi_dmul>
 800fa2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa30:	1b5d      	subs	r5, r3, r5
 800fa32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fa36:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fa3a:	e78f      	b.n	800f95c <_strtod_l+0x3cc>
 800fa3c:	3316      	adds	r3, #22
 800fa3e:	dba8      	blt.n	800f992 <_strtod_l+0x402>
 800fa40:	4b37      	ldr	r3, [pc, #220]	@ (800fb20 <_strtod_l+0x590>)
 800fa42:	eba9 0808 	sub.w	r8, r9, r8
 800fa46:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800fa4a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fa4e:	4650      	mov	r0, sl
 800fa50:	4659      	mov	r1, fp
 800fa52:	f7f0 ff23 	bl	800089c <__aeabi_ddiv>
 800fa56:	e783      	b.n	800f960 <_strtod_l+0x3d0>
 800fa58:	4b32      	ldr	r3, [pc, #200]	@ (800fb24 <_strtod_l+0x594>)
 800fa5a:	9308      	str	r3, [sp, #32]
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	1124      	asrs	r4, r4, #4
 800fa60:	4650      	mov	r0, sl
 800fa62:	4659      	mov	r1, fp
 800fa64:	461e      	mov	r6, r3
 800fa66:	2c01      	cmp	r4, #1
 800fa68:	dc21      	bgt.n	800faae <_strtod_l+0x51e>
 800fa6a:	b10b      	cbz	r3, 800fa70 <_strtod_l+0x4e0>
 800fa6c:	4682      	mov	sl, r0
 800fa6e:	468b      	mov	fp, r1
 800fa70:	492c      	ldr	r1, [pc, #176]	@ (800fb24 <_strtod_l+0x594>)
 800fa72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800fa76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fa7a:	4652      	mov	r2, sl
 800fa7c:	465b      	mov	r3, fp
 800fa7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa82:	f7f0 fde1 	bl	8000648 <__aeabi_dmul>
 800fa86:	4b28      	ldr	r3, [pc, #160]	@ (800fb28 <_strtod_l+0x598>)
 800fa88:	460a      	mov	r2, r1
 800fa8a:	400b      	ands	r3, r1
 800fa8c:	4927      	ldr	r1, [pc, #156]	@ (800fb2c <_strtod_l+0x59c>)
 800fa8e:	428b      	cmp	r3, r1
 800fa90:	4682      	mov	sl, r0
 800fa92:	d898      	bhi.n	800f9c6 <_strtod_l+0x436>
 800fa94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800fa98:	428b      	cmp	r3, r1
 800fa9a:	bf86      	itte	hi
 800fa9c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800fb30 <_strtod_l+0x5a0>
 800faa0:	f04f 3aff 	movhi.w	sl, #4294967295
 800faa4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800faa8:	2300      	movs	r3, #0
 800faaa:	9308      	str	r3, [sp, #32]
 800faac:	e07a      	b.n	800fba4 <_strtod_l+0x614>
 800faae:	07e2      	lsls	r2, r4, #31
 800fab0:	d505      	bpl.n	800fabe <_strtod_l+0x52e>
 800fab2:	9b08      	ldr	r3, [sp, #32]
 800fab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab8:	f7f0 fdc6 	bl	8000648 <__aeabi_dmul>
 800fabc:	2301      	movs	r3, #1
 800fabe:	9a08      	ldr	r2, [sp, #32]
 800fac0:	3208      	adds	r2, #8
 800fac2:	3601      	adds	r6, #1
 800fac4:	1064      	asrs	r4, r4, #1
 800fac6:	9208      	str	r2, [sp, #32]
 800fac8:	e7cd      	b.n	800fa66 <_strtod_l+0x4d6>
 800faca:	d0ed      	beq.n	800faa8 <_strtod_l+0x518>
 800facc:	4264      	negs	r4, r4
 800face:	f014 020f 	ands.w	r2, r4, #15
 800fad2:	d00a      	beq.n	800faea <_strtod_l+0x55a>
 800fad4:	4b12      	ldr	r3, [pc, #72]	@ (800fb20 <_strtod_l+0x590>)
 800fad6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fada:	4650      	mov	r0, sl
 800fadc:	4659      	mov	r1, fp
 800fade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae2:	f7f0 fedb 	bl	800089c <__aeabi_ddiv>
 800fae6:	4682      	mov	sl, r0
 800fae8:	468b      	mov	fp, r1
 800faea:	1124      	asrs	r4, r4, #4
 800faec:	d0dc      	beq.n	800faa8 <_strtod_l+0x518>
 800faee:	2c1f      	cmp	r4, #31
 800faf0:	dd20      	ble.n	800fb34 <_strtod_l+0x5a4>
 800faf2:	2400      	movs	r4, #0
 800faf4:	46a0      	mov	r8, r4
 800faf6:	940a      	str	r4, [sp, #40]	@ 0x28
 800faf8:	46a1      	mov	r9, r4
 800fafa:	9a05      	ldr	r2, [sp, #20]
 800fafc:	2322      	movs	r3, #34	@ 0x22
 800fafe:	f04f 0a00 	mov.w	sl, #0
 800fb02:	f04f 0b00 	mov.w	fp, #0
 800fb06:	6013      	str	r3, [r2, #0]
 800fb08:	e768      	b.n	800f9dc <_strtod_l+0x44c>
 800fb0a:	bf00      	nop
 800fb0c:	08011730 	.word	0x08011730
 800fb10:	08011944 	.word	0x08011944
 800fb14:	08011728 	.word	0x08011728
 800fb18:	0801175f 	.word	0x0801175f
 800fb1c:	08011aed 	.word	0x08011aed
 800fb20:	08011878 	.word	0x08011878
 800fb24:	08011850 	.word	0x08011850
 800fb28:	7ff00000 	.word	0x7ff00000
 800fb2c:	7ca00000 	.word	0x7ca00000
 800fb30:	7fefffff 	.word	0x7fefffff
 800fb34:	f014 0310 	ands.w	r3, r4, #16
 800fb38:	bf18      	it	ne
 800fb3a:	236a      	movne	r3, #106	@ 0x6a
 800fb3c:	4ea9      	ldr	r6, [pc, #676]	@ (800fde4 <_strtod_l+0x854>)
 800fb3e:	9308      	str	r3, [sp, #32]
 800fb40:	4650      	mov	r0, sl
 800fb42:	4659      	mov	r1, fp
 800fb44:	2300      	movs	r3, #0
 800fb46:	07e2      	lsls	r2, r4, #31
 800fb48:	d504      	bpl.n	800fb54 <_strtod_l+0x5c4>
 800fb4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fb4e:	f7f0 fd7b 	bl	8000648 <__aeabi_dmul>
 800fb52:	2301      	movs	r3, #1
 800fb54:	1064      	asrs	r4, r4, #1
 800fb56:	f106 0608 	add.w	r6, r6, #8
 800fb5a:	d1f4      	bne.n	800fb46 <_strtod_l+0x5b6>
 800fb5c:	b10b      	cbz	r3, 800fb62 <_strtod_l+0x5d2>
 800fb5e:	4682      	mov	sl, r0
 800fb60:	468b      	mov	fp, r1
 800fb62:	9b08      	ldr	r3, [sp, #32]
 800fb64:	b1b3      	cbz	r3, 800fb94 <_strtod_l+0x604>
 800fb66:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fb6a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	4659      	mov	r1, fp
 800fb72:	dd0f      	ble.n	800fb94 <_strtod_l+0x604>
 800fb74:	2b1f      	cmp	r3, #31
 800fb76:	dd55      	ble.n	800fc24 <_strtod_l+0x694>
 800fb78:	2b34      	cmp	r3, #52	@ 0x34
 800fb7a:	bfde      	ittt	le
 800fb7c:	f04f 33ff 	movle.w	r3, #4294967295
 800fb80:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800fb84:	4093      	lslle	r3, r2
 800fb86:	f04f 0a00 	mov.w	sl, #0
 800fb8a:	bfcc      	ite	gt
 800fb8c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800fb90:	ea03 0b01 	andle.w	fp, r3, r1
 800fb94:	2200      	movs	r2, #0
 800fb96:	2300      	movs	r3, #0
 800fb98:	4650      	mov	r0, sl
 800fb9a:	4659      	mov	r1, fp
 800fb9c:	f7f0 ffbc 	bl	8000b18 <__aeabi_dcmpeq>
 800fba0:	2800      	cmp	r0, #0
 800fba2:	d1a6      	bne.n	800faf2 <_strtod_l+0x562>
 800fba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fba6:	9300      	str	r3, [sp, #0]
 800fba8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fbaa:	9805      	ldr	r0, [sp, #20]
 800fbac:	462b      	mov	r3, r5
 800fbae:	463a      	mov	r2, r7
 800fbb0:	f7ff f8c6 	bl	800ed40 <__s2b>
 800fbb4:	900a      	str	r0, [sp, #40]	@ 0x28
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	f43f af05 	beq.w	800f9c6 <_strtod_l+0x436>
 800fbbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbbe:	2a00      	cmp	r2, #0
 800fbc0:	eba9 0308 	sub.w	r3, r9, r8
 800fbc4:	bfa8      	it	ge
 800fbc6:	2300      	movge	r3, #0
 800fbc8:	9312      	str	r3, [sp, #72]	@ 0x48
 800fbca:	2400      	movs	r4, #0
 800fbcc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fbd0:	9316      	str	r3, [sp, #88]	@ 0x58
 800fbd2:	46a0      	mov	r8, r4
 800fbd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbd6:	9805      	ldr	r0, [sp, #20]
 800fbd8:	6859      	ldr	r1, [r3, #4]
 800fbda:	f7ff f809 	bl	800ebf0 <_Balloc>
 800fbde:	4681      	mov	r9, r0
 800fbe0:	2800      	cmp	r0, #0
 800fbe2:	f43f aef4 	beq.w	800f9ce <_strtod_l+0x43e>
 800fbe6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbe8:	691a      	ldr	r2, [r3, #16]
 800fbea:	3202      	adds	r2, #2
 800fbec:	f103 010c 	add.w	r1, r3, #12
 800fbf0:	0092      	lsls	r2, r2, #2
 800fbf2:	300c      	adds	r0, #12
 800fbf4:	f000 fd72 	bl	80106dc <memcpy>
 800fbf8:	ec4b ab10 	vmov	d0, sl, fp
 800fbfc:	9805      	ldr	r0, [sp, #20]
 800fbfe:	aa1c      	add	r2, sp, #112	@ 0x70
 800fc00:	a91b      	add	r1, sp, #108	@ 0x6c
 800fc02:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800fc06:	f7ff fbd7 	bl	800f3b8 <__d2b>
 800fc0a:	901a      	str	r0, [sp, #104]	@ 0x68
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	f43f aede 	beq.w	800f9ce <_strtod_l+0x43e>
 800fc12:	9805      	ldr	r0, [sp, #20]
 800fc14:	2101      	movs	r1, #1
 800fc16:	f7ff f929 	bl	800ee6c <__i2b>
 800fc1a:	4680      	mov	r8, r0
 800fc1c:	b948      	cbnz	r0, 800fc32 <_strtod_l+0x6a2>
 800fc1e:	f04f 0800 	mov.w	r8, #0
 800fc22:	e6d4      	b.n	800f9ce <_strtod_l+0x43e>
 800fc24:	f04f 32ff 	mov.w	r2, #4294967295
 800fc28:	fa02 f303 	lsl.w	r3, r2, r3
 800fc2c:	ea03 0a0a 	and.w	sl, r3, sl
 800fc30:	e7b0      	b.n	800fb94 <_strtod_l+0x604>
 800fc32:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800fc34:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fc36:	2d00      	cmp	r5, #0
 800fc38:	bfab      	itete	ge
 800fc3a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800fc3c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800fc3e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800fc40:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800fc42:	bfac      	ite	ge
 800fc44:	18ef      	addge	r7, r5, r3
 800fc46:	1b5e      	sublt	r6, r3, r5
 800fc48:	9b08      	ldr	r3, [sp, #32]
 800fc4a:	1aed      	subs	r5, r5, r3
 800fc4c:	4415      	add	r5, r2
 800fc4e:	4b66      	ldr	r3, [pc, #408]	@ (800fde8 <_strtod_l+0x858>)
 800fc50:	3d01      	subs	r5, #1
 800fc52:	429d      	cmp	r5, r3
 800fc54:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fc58:	da50      	bge.n	800fcfc <_strtod_l+0x76c>
 800fc5a:	1b5b      	subs	r3, r3, r5
 800fc5c:	2b1f      	cmp	r3, #31
 800fc5e:	eba2 0203 	sub.w	r2, r2, r3
 800fc62:	f04f 0101 	mov.w	r1, #1
 800fc66:	dc3d      	bgt.n	800fce4 <_strtod_l+0x754>
 800fc68:	fa01 f303 	lsl.w	r3, r1, r3
 800fc6c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fc6e:	2300      	movs	r3, #0
 800fc70:	9310      	str	r3, [sp, #64]	@ 0x40
 800fc72:	18bd      	adds	r5, r7, r2
 800fc74:	9b08      	ldr	r3, [sp, #32]
 800fc76:	42af      	cmp	r7, r5
 800fc78:	4416      	add	r6, r2
 800fc7a:	441e      	add	r6, r3
 800fc7c:	463b      	mov	r3, r7
 800fc7e:	bfa8      	it	ge
 800fc80:	462b      	movge	r3, r5
 800fc82:	42b3      	cmp	r3, r6
 800fc84:	bfa8      	it	ge
 800fc86:	4633      	movge	r3, r6
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	bfc2      	ittt	gt
 800fc8c:	1aed      	subgt	r5, r5, r3
 800fc8e:	1af6      	subgt	r6, r6, r3
 800fc90:	1aff      	subgt	r7, r7, r3
 800fc92:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	dd16      	ble.n	800fcc6 <_strtod_l+0x736>
 800fc98:	4641      	mov	r1, r8
 800fc9a:	9805      	ldr	r0, [sp, #20]
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	f7ff f9a5 	bl	800efec <__pow5mult>
 800fca2:	4680      	mov	r8, r0
 800fca4:	2800      	cmp	r0, #0
 800fca6:	d0ba      	beq.n	800fc1e <_strtod_l+0x68e>
 800fca8:	4601      	mov	r1, r0
 800fcaa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fcac:	9805      	ldr	r0, [sp, #20]
 800fcae:	f7ff f8f3 	bl	800ee98 <__multiply>
 800fcb2:	900e      	str	r0, [sp, #56]	@ 0x38
 800fcb4:	2800      	cmp	r0, #0
 800fcb6:	f43f ae8a 	beq.w	800f9ce <_strtod_l+0x43e>
 800fcba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fcbc:	9805      	ldr	r0, [sp, #20]
 800fcbe:	f7fe ffd7 	bl	800ec70 <_Bfree>
 800fcc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcc4:	931a      	str	r3, [sp, #104]	@ 0x68
 800fcc6:	2d00      	cmp	r5, #0
 800fcc8:	dc1d      	bgt.n	800fd06 <_strtod_l+0x776>
 800fcca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	dd23      	ble.n	800fd18 <_strtod_l+0x788>
 800fcd0:	4649      	mov	r1, r9
 800fcd2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800fcd4:	9805      	ldr	r0, [sp, #20]
 800fcd6:	f7ff f989 	bl	800efec <__pow5mult>
 800fcda:	4681      	mov	r9, r0
 800fcdc:	b9e0      	cbnz	r0, 800fd18 <_strtod_l+0x788>
 800fcde:	f04f 0900 	mov.w	r9, #0
 800fce2:	e674      	b.n	800f9ce <_strtod_l+0x43e>
 800fce4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800fce8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800fcec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800fcf0:	35e2      	adds	r5, #226	@ 0xe2
 800fcf2:	fa01 f305 	lsl.w	r3, r1, r5
 800fcf6:	9310      	str	r3, [sp, #64]	@ 0x40
 800fcf8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fcfa:	e7ba      	b.n	800fc72 <_strtod_l+0x6e2>
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	9310      	str	r3, [sp, #64]	@ 0x40
 800fd00:	2301      	movs	r3, #1
 800fd02:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fd04:	e7b5      	b.n	800fc72 <_strtod_l+0x6e2>
 800fd06:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd08:	9805      	ldr	r0, [sp, #20]
 800fd0a:	462a      	mov	r2, r5
 800fd0c:	f7ff f9c8 	bl	800f0a0 <__lshift>
 800fd10:	901a      	str	r0, [sp, #104]	@ 0x68
 800fd12:	2800      	cmp	r0, #0
 800fd14:	d1d9      	bne.n	800fcca <_strtod_l+0x73a>
 800fd16:	e65a      	b.n	800f9ce <_strtod_l+0x43e>
 800fd18:	2e00      	cmp	r6, #0
 800fd1a:	dd07      	ble.n	800fd2c <_strtod_l+0x79c>
 800fd1c:	4649      	mov	r1, r9
 800fd1e:	9805      	ldr	r0, [sp, #20]
 800fd20:	4632      	mov	r2, r6
 800fd22:	f7ff f9bd 	bl	800f0a0 <__lshift>
 800fd26:	4681      	mov	r9, r0
 800fd28:	2800      	cmp	r0, #0
 800fd2a:	d0d8      	beq.n	800fcde <_strtod_l+0x74e>
 800fd2c:	2f00      	cmp	r7, #0
 800fd2e:	dd08      	ble.n	800fd42 <_strtod_l+0x7b2>
 800fd30:	4641      	mov	r1, r8
 800fd32:	9805      	ldr	r0, [sp, #20]
 800fd34:	463a      	mov	r2, r7
 800fd36:	f7ff f9b3 	bl	800f0a0 <__lshift>
 800fd3a:	4680      	mov	r8, r0
 800fd3c:	2800      	cmp	r0, #0
 800fd3e:	f43f ae46 	beq.w	800f9ce <_strtod_l+0x43e>
 800fd42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd44:	9805      	ldr	r0, [sp, #20]
 800fd46:	464a      	mov	r2, r9
 800fd48:	f7ff fa32 	bl	800f1b0 <__mdiff>
 800fd4c:	4604      	mov	r4, r0
 800fd4e:	2800      	cmp	r0, #0
 800fd50:	f43f ae3d 	beq.w	800f9ce <_strtod_l+0x43e>
 800fd54:	68c3      	ldr	r3, [r0, #12]
 800fd56:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd58:	2300      	movs	r3, #0
 800fd5a:	60c3      	str	r3, [r0, #12]
 800fd5c:	4641      	mov	r1, r8
 800fd5e:	f7ff fa0b 	bl	800f178 <__mcmp>
 800fd62:	2800      	cmp	r0, #0
 800fd64:	da46      	bge.n	800fdf4 <_strtod_l+0x864>
 800fd66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd68:	ea53 030a 	orrs.w	r3, r3, sl
 800fd6c:	d16c      	bne.n	800fe48 <_strtod_l+0x8b8>
 800fd6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d168      	bne.n	800fe48 <_strtod_l+0x8b8>
 800fd76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fd7a:	0d1b      	lsrs	r3, r3, #20
 800fd7c:	051b      	lsls	r3, r3, #20
 800fd7e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fd82:	d961      	bls.n	800fe48 <_strtod_l+0x8b8>
 800fd84:	6963      	ldr	r3, [r4, #20]
 800fd86:	b913      	cbnz	r3, 800fd8e <_strtod_l+0x7fe>
 800fd88:	6923      	ldr	r3, [r4, #16]
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	dd5c      	ble.n	800fe48 <_strtod_l+0x8b8>
 800fd8e:	4621      	mov	r1, r4
 800fd90:	2201      	movs	r2, #1
 800fd92:	9805      	ldr	r0, [sp, #20]
 800fd94:	f7ff f984 	bl	800f0a0 <__lshift>
 800fd98:	4641      	mov	r1, r8
 800fd9a:	4604      	mov	r4, r0
 800fd9c:	f7ff f9ec 	bl	800f178 <__mcmp>
 800fda0:	2800      	cmp	r0, #0
 800fda2:	dd51      	ble.n	800fe48 <_strtod_l+0x8b8>
 800fda4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fda8:	9a08      	ldr	r2, [sp, #32]
 800fdaa:	0d1b      	lsrs	r3, r3, #20
 800fdac:	051b      	lsls	r3, r3, #20
 800fdae:	2a00      	cmp	r2, #0
 800fdb0:	d06b      	beq.n	800fe8a <_strtod_l+0x8fa>
 800fdb2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fdb6:	d868      	bhi.n	800fe8a <_strtod_l+0x8fa>
 800fdb8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800fdbc:	f67f ae9d 	bls.w	800fafa <_strtod_l+0x56a>
 800fdc0:	4b0a      	ldr	r3, [pc, #40]	@ (800fdec <_strtod_l+0x85c>)
 800fdc2:	4650      	mov	r0, sl
 800fdc4:	4659      	mov	r1, fp
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	f7f0 fc3e 	bl	8000648 <__aeabi_dmul>
 800fdcc:	4b08      	ldr	r3, [pc, #32]	@ (800fdf0 <_strtod_l+0x860>)
 800fdce:	400b      	ands	r3, r1
 800fdd0:	4682      	mov	sl, r0
 800fdd2:	468b      	mov	fp, r1
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	f47f ae05 	bne.w	800f9e4 <_strtod_l+0x454>
 800fdda:	9a05      	ldr	r2, [sp, #20]
 800fddc:	2322      	movs	r3, #34	@ 0x22
 800fdde:	6013      	str	r3, [r2, #0]
 800fde0:	e600      	b.n	800f9e4 <_strtod_l+0x454>
 800fde2:	bf00      	nop
 800fde4:	08011970 	.word	0x08011970
 800fde8:	fffffc02 	.word	0xfffffc02
 800fdec:	39500000 	.word	0x39500000
 800fdf0:	7ff00000 	.word	0x7ff00000
 800fdf4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fdf8:	d165      	bne.n	800fec6 <_strtod_l+0x936>
 800fdfa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fdfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe00:	b35a      	cbz	r2, 800fe5a <_strtod_l+0x8ca>
 800fe02:	4a9f      	ldr	r2, [pc, #636]	@ (8010080 <_strtod_l+0xaf0>)
 800fe04:	4293      	cmp	r3, r2
 800fe06:	d12b      	bne.n	800fe60 <_strtod_l+0x8d0>
 800fe08:	9b08      	ldr	r3, [sp, #32]
 800fe0a:	4651      	mov	r1, sl
 800fe0c:	b303      	cbz	r3, 800fe50 <_strtod_l+0x8c0>
 800fe0e:	4b9d      	ldr	r3, [pc, #628]	@ (8010084 <_strtod_l+0xaf4>)
 800fe10:	465a      	mov	r2, fp
 800fe12:	4013      	ands	r3, r2
 800fe14:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fe18:	f04f 32ff 	mov.w	r2, #4294967295
 800fe1c:	d81b      	bhi.n	800fe56 <_strtod_l+0x8c6>
 800fe1e:	0d1b      	lsrs	r3, r3, #20
 800fe20:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fe24:	fa02 f303 	lsl.w	r3, r2, r3
 800fe28:	4299      	cmp	r1, r3
 800fe2a:	d119      	bne.n	800fe60 <_strtod_l+0x8d0>
 800fe2c:	4b96      	ldr	r3, [pc, #600]	@ (8010088 <_strtod_l+0xaf8>)
 800fe2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d102      	bne.n	800fe3a <_strtod_l+0x8aa>
 800fe34:	3101      	adds	r1, #1
 800fe36:	f43f adca 	beq.w	800f9ce <_strtod_l+0x43e>
 800fe3a:	4b92      	ldr	r3, [pc, #584]	@ (8010084 <_strtod_l+0xaf4>)
 800fe3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe3e:	401a      	ands	r2, r3
 800fe40:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800fe44:	f04f 0a00 	mov.w	sl, #0
 800fe48:	9b08      	ldr	r3, [sp, #32]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d1b8      	bne.n	800fdc0 <_strtod_l+0x830>
 800fe4e:	e5c9      	b.n	800f9e4 <_strtod_l+0x454>
 800fe50:	f04f 33ff 	mov.w	r3, #4294967295
 800fe54:	e7e8      	b.n	800fe28 <_strtod_l+0x898>
 800fe56:	4613      	mov	r3, r2
 800fe58:	e7e6      	b.n	800fe28 <_strtod_l+0x898>
 800fe5a:	ea53 030a 	orrs.w	r3, r3, sl
 800fe5e:	d0a1      	beq.n	800fda4 <_strtod_l+0x814>
 800fe60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fe62:	b1db      	cbz	r3, 800fe9c <_strtod_l+0x90c>
 800fe64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe66:	4213      	tst	r3, r2
 800fe68:	d0ee      	beq.n	800fe48 <_strtod_l+0x8b8>
 800fe6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe6c:	9a08      	ldr	r2, [sp, #32]
 800fe6e:	4650      	mov	r0, sl
 800fe70:	4659      	mov	r1, fp
 800fe72:	b1bb      	cbz	r3, 800fea4 <_strtod_l+0x914>
 800fe74:	f7ff fb6e 	bl	800f554 <sulp>
 800fe78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fe7c:	ec53 2b10 	vmov	r2, r3, d0
 800fe80:	f7f0 fa2c 	bl	80002dc <__adddf3>
 800fe84:	4682      	mov	sl, r0
 800fe86:	468b      	mov	fp, r1
 800fe88:	e7de      	b.n	800fe48 <_strtod_l+0x8b8>
 800fe8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800fe8e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fe92:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fe96:	f04f 3aff 	mov.w	sl, #4294967295
 800fe9a:	e7d5      	b.n	800fe48 <_strtod_l+0x8b8>
 800fe9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fe9e:	ea13 0f0a 	tst.w	r3, sl
 800fea2:	e7e1      	b.n	800fe68 <_strtod_l+0x8d8>
 800fea4:	f7ff fb56 	bl	800f554 <sulp>
 800fea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800feac:	ec53 2b10 	vmov	r2, r3, d0
 800feb0:	f7f0 fa12 	bl	80002d8 <__aeabi_dsub>
 800feb4:	2200      	movs	r2, #0
 800feb6:	2300      	movs	r3, #0
 800feb8:	4682      	mov	sl, r0
 800feba:	468b      	mov	fp, r1
 800febc:	f7f0 fe2c 	bl	8000b18 <__aeabi_dcmpeq>
 800fec0:	2800      	cmp	r0, #0
 800fec2:	d0c1      	beq.n	800fe48 <_strtod_l+0x8b8>
 800fec4:	e619      	b.n	800fafa <_strtod_l+0x56a>
 800fec6:	4641      	mov	r1, r8
 800fec8:	4620      	mov	r0, r4
 800feca:	f7ff facd 	bl	800f468 <__ratio>
 800fece:	ec57 6b10 	vmov	r6, r7, d0
 800fed2:	2200      	movs	r2, #0
 800fed4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fed8:	4630      	mov	r0, r6
 800feda:	4639      	mov	r1, r7
 800fedc:	f7f0 fe30 	bl	8000b40 <__aeabi_dcmple>
 800fee0:	2800      	cmp	r0, #0
 800fee2:	d06f      	beq.n	800ffc4 <_strtod_l+0xa34>
 800fee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d17a      	bne.n	800ffe0 <_strtod_l+0xa50>
 800feea:	f1ba 0f00 	cmp.w	sl, #0
 800feee:	d158      	bne.n	800ffa2 <_strtod_l+0xa12>
 800fef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fef2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d15a      	bne.n	800ffb0 <_strtod_l+0xa20>
 800fefa:	4b64      	ldr	r3, [pc, #400]	@ (801008c <_strtod_l+0xafc>)
 800fefc:	2200      	movs	r2, #0
 800fefe:	4630      	mov	r0, r6
 800ff00:	4639      	mov	r1, r7
 800ff02:	f7f0 fe13 	bl	8000b2c <__aeabi_dcmplt>
 800ff06:	2800      	cmp	r0, #0
 800ff08:	d159      	bne.n	800ffbe <_strtod_l+0xa2e>
 800ff0a:	4630      	mov	r0, r6
 800ff0c:	4639      	mov	r1, r7
 800ff0e:	4b60      	ldr	r3, [pc, #384]	@ (8010090 <_strtod_l+0xb00>)
 800ff10:	2200      	movs	r2, #0
 800ff12:	f7f0 fb99 	bl	8000648 <__aeabi_dmul>
 800ff16:	4606      	mov	r6, r0
 800ff18:	460f      	mov	r7, r1
 800ff1a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ff1e:	9606      	str	r6, [sp, #24]
 800ff20:	9307      	str	r3, [sp, #28]
 800ff22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ff26:	4d57      	ldr	r5, [pc, #348]	@ (8010084 <_strtod_l+0xaf4>)
 800ff28:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ff2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff2e:	401d      	ands	r5, r3
 800ff30:	4b58      	ldr	r3, [pc, #352]	@ (8010094 <_strtod_l+0xb04>)
 800ff32:	429d      	cmp	r5, r3
 800ff34:	f040 80b2 	bne.w	801009c <_strtod_l+0xb0c>
 800ff38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff3a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ff3e:	ec4b ab10 	vmov	d0, sl, fp
 800ff42:	f7ff f9c9 	bl	800f2d8 <__ulp>
 800ff46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ff4a:	ec51 0b10 	vmov	r0, r1, d0
 800ff4e:	f7f0 fb7b 	bl	8000648 <__aeabi_dmul>
 800ff52:	4652      	mov	r2, sl
 800ff54:	465b      	mov	r3, fp
 800ff56:	f7f0 f9c1 	bl	80002dc <__adddf3>
 800ff5a:	460b      	mov	r3, r1
 800ff5c:	4949      	ldr	r1, [pc, #292]	@ (8010084 <_strtod_l+0xaf4>)
 800ff5e:	4a4e      	ldr	r2, [pc, #312]	@ (8010098 <_strtod_l+0xb08>)
 800ff60:	4019      	ands	r1, r3
 800ff62:	4291      	cmp	r1, r2
 800ff64:	4682      	mov	sl, r0
 800ff66:	d942      	bls.n	800ffee <_strtod_l+0xa5e>
 800ff68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ff6a:	4b47      	ldr	r3, [pc, #284]	@ (8010088 <_strtod_l+0xaf8>)
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d103      	bne.n	800ff78 <_strtod_l+0x9e8>
 800ff70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff72:	3301      	adds	r3, #1
 800ff74:	f43f ad2b 	beq.w	800f9ce <_strtod_l+0x43e>
 800ff78:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010088 <_strtod_l+0xaf8>
 800ff7c:	f04f 3aff 	mov.w	sl, #4294967295
 800ff80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ff82:	9805      	ldr	r0, [sp, #20]
 800ff84:	f7fe fe74 	bl	800ec70 <_Bfree>
 800ff88:	9805      	ldr	r0, [sp, #20]
 800ff8a:	4649      	mov	r1, r9
 800ff8c:	f7fe fe70 	bl	800ec70 <_Bfree>
 800ff90:	9805      	ldr	r0, [sp, #20]
 800ff92:	4641      	mov	r1, r8
 800ff94:	f7fe fe6c 	bl	800ec70 <_Bfree>
 800ff98:	9805      	ldr	r0, [sp, #20]
 800ff9a:	4621      	mov	r1, r4
 800ff9c:	f7fe fe68 	bl	800ec70 <_Bfree>
 800ffa0:	e618      	b.n	800fbd4 <_strtod_l+0x644>
 800ffa2:	f1ba 0f01 	cmp.w	sl, #1
 800ffa6:	d103      	bne.n	800ffb0 <_strtod_l+0xa20>
 800ffa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	f43f ada5 	beq.w	800fafa <_strtod_l+0x56a>
 800ffb0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010060 <_strtod_l+0xad0>
 800ffb4:	4f35      	ldr	r7, [pc, #212]	@ (801008c <_strtod_l+0xafc>)
 800ffb6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ffba:	2600      	movs	r6, #0
 800ffbc:	e7b1      	b.n	800ff22 <_strtod_l+0x992>
 800ffbe:	4f34      	ldr	r7, [pc, #208]	@ (8010090 <_strtod_l+0xb00>)
 800ffc0:	2600      	movs	r6, #0
 800ffc2:	e7aa      	b.n	800ff1a <_strtod_l+0x98a>
 800ffc4:	4b32      	ldr	r3, [pc, #200]	@ (8010090 <_strtod_l+0xb00>)
 800ffc6:	4630      	mov	r0, r6
 800ffc8:	4639      	mov	r1, r7
 800ffca:	2200      	movs	r2, #0
 800ffcc:	f7f0 fb3c 	bl	8000648 <__aeabi_dmul>
 800ffd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffd2:	4606      	mov	r6, r0
 800ffd4:	460f      	mov	r7, r1
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d09f      	beq.n	800ff1a <_strtod_l+0x98a>
 800ffda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ffde:	e7a0      	b.n	800ff22 <_strtod_l+0x992>
 800ffe0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010068 <_strtod_l+0xad8>
 800ffe4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ffe8:	ec57 6b17 	vmov	r6, r7, d7
 800ffec:	e799      	b.n	800ff22 <_strtod_l+0x992>
 800ffee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fff2:	9b08      	ldr	r3, [sp, #32]
 800fff4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d1c1      	bne.n	800ff80 <_strtod_l+0x9f0>
 800fffc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010000:	0d1b      	lsrs	r3, r3, #20
 8010002:	051b      	lsls	r3, r3, #20
 8010004:	429d      	cmp	r5, r3
 8010006:	d1bb      	bne.n	800ff80 <_strtod_l+0x9f0>
 8010008:	4630      	mov	r0, r6
 801000a:	4639      	mov	r1, r7
 801000c:	f7f0 fe7c 	bl	8000d08 <__aeabi_d2lz>
 8010010:	f7f0 faec 	bl	80005ec <__aeabi_l2d>
 8010014:	4602      	mov	r2, r0
 8010016:	460b      	mov	r3, r1
 8010018:	4630      	mov	r0, r6
 801001a:	4639      	mov	r1, r7
 801001c:	f7f0 f95c 	bl	80002d8 <__aeabi_dsub>
 8010020:	460b      	mov	r3, r1
 8010022:	4602      	mov	r2, r0
 8010024:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010028:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801002c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801002e:	ea46 060a 	orr.w	r6, r6, sl
 8010032:	431e      	orrs	r6, r3
 8010034:	d06f      	beq.n	8010116 <_strtod_l+0xb86>
 8010036:	a30e      	add	r3, pc, #56	@ (adr r3, 8010070 <_strtod_l+0xae0>)
 8010038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003c:	f7f0 fd76 	bl	8000b2c <__aeabi_dcmplt>
 8010040:	2800      	cmp	r0, #0
 8010042:	f47f accf 	bne.w	800f9e4 <_strtod_l+0x454>
 8010046:	a30c      	add	r3, pc, #48	@ (adr r3, 8010078 <_strtod_l+0xae8>)
 8010048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010050:	f7f0 fd8a 	bl	8000b68 <__aeabi_dcmpgt>
 8010054:	2800      	cmp	r0, #0
 8010056:	d093      	beq.n	800ff80 <_strtod_l+0x9f0>
 8010058:	e4c4      	b.n	800f9e4 <_strtod_l+0x454>
 801005a:	bf00      	nop
 801005c:	f3af 8000 	nop.w
 8010060:	00000000 	.word	0x00000000
 8010064:	bff00000 	.word	0xbff00000
 8010068:	00000000 	.word	0x00000000
 801006c:	3ff00000 	.word	0x3ff00000
 8010070:	94a03595 	.word	0x94a03595
 8010074:	3fdfffff 	.word	0x3fdfffff
 8010078:	35afe535 	.word	0x35afe535
 801007c:	3fe00000 	.word	0x3fe00000
 8010080:	000fffff 	.word	0x000fffff
 8010084:	7ff00000 	.word	0x7ff00000
 8010088:	7fefffff 	.word	0x7fefffff
 801008c:	3ff00000 	.word	0x3ff00000
 8010090:	3fe00000 	.word	0x3fe00000
 8010094:	7fe00000 	.word	0x7fe00000
 8010098:	7c9fffff 	.word	0x7c9fffff
 801009c:	9b08      	ldr	r3, [sp, #32]
 801009e:	b323      	cbz	r3, 80100ea <_strtod_l+0xb5a>
 80100a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80100a4:	d821      	bhi.n	80100ea <_strtod_l+0xb5a>
 80100a6:	a328      	add	r3, pc, #160	@ (adr r3, 8010148 <_strtod_l+0xbb8>)
 80100a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ac:	4630      	mov	r0, r6
 80100ae:	4639      	mov	r1, r7
 80100b0:	f7f0 fd46 	bl	8000b40 <__aeabi_dcmple>
 80100b4:	b1a0      	cbz	r0, 80100e0 <_strtod_l+0xb50>
 80100b6:	4639      	mov	r1, r7
 80100b8:	4630      	mov	r0, r6
 80100ba:	f7f0 fd9d 	bl	8000bf8 <__aeabi_d2uiz>
 80100be:	2801      	cmp	r0, #1
 80100c0:	bf38      	it	cc
 80100c2:	2001      	movcc	r0, #1
 80100c4:	f7f0 fa46 	bl	8000554 <__aeabi_ui2d>
 80100c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100ca:	4606      	mov	r6, r0
 80100cc:	460f      	mov	r7, r1
 80100ce:	b9fb      	cbnz	r3, 8010110 <_strtod_l+0xb80>
 80100d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80100d4:	9014      	str	r0, [sp, #80]	@ 0x50
 80100d6:	9315      	str	r3, [sp, #84]	@ 0x54
 80100d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80100dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80100e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80100e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80100e6:	1b5b      	subs	r3, r3, r5
 80100e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80100ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80100ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80100f2:	f7ff f8f1 	bl	800f2d8 <__ulp>
 80100f6:	4650      	mov	r0, sl
 80100f8:	ec53 2b10 	vmov	r2, r3, d0
 80100fc:	4659      	mov	r1, fp
 80100fe:	f7f0 faa3 	bl	8000648 <__aeabi_dmul>
 8010102:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010106:	f7f0 f8e9 	bl	80002dc <__adddf3>
 801010a:	4682      	mov	sl, r0
 801010c:	468b      	mov	fp, r1
 801010e:	e770      	b.n	800fff2 <_strtod_l+0xa62>
 8010110:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010114:	e7e0      	b.n	80100d8 <_strtod_l+0xb48>
 8010116:	a30e      	add	r3, pc, #56	@ (adr r3, 8010150 <_strtod_l+0xbc0>)
 8010118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011c:	f7f0 fd06 	bl	8000b2c <__aeabi_dcmplt>
 8010120:	e798      	b.n	8010054 <_strtod_l+0xac4>
 8010122:	2300      	movs	r3, #0
 8010124:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010126:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010128:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801012a:	6013      	str	r3, [r2, #0]
 801012c:	f7ff ba6d 	b.w	800f60a <_strtod_l+0x7a>
 8010130:	2a65      	cmp	r2, #101	@ 0x65
 8010132:	f43f ab66 	beq.w	800f802 <_strtod_l+0x272>
 8010136:	2a45      	cmp	r2, #69	@ 0x45
 8010138:	f43f ab63 	beq.w	800f802 <_strtod_l+0x272>
 801013c:	2301      	movs	r3, #1
 801013e:	f7ff bb9e 	b.w	800f87e <_strtod_l+0x2ee>
 8010142:	bf00      	nop
 8010144:	f3af 8000 	nop.w
 8010148:	ffc00000 	.word	0xffc00000
 801014c:	41dfffff 	.word	0x41dfffff
 8010150:	94a03595 	.word	0x94a03595
 8010154:	3fcfffff 	.word	0x3fcfffff

08010158 <_strtod_r>:
 8010158:	4b01      	ldr	r3, [pc, #4]	@ (8010160 <_strtod_r+0x8>)
 801015a:	f7ff ba19 	b.w	800f590 <_strtod_l>
 801015e:	bf00      	nop
 8010160:	200000ec 	.word	0x200000ec

08010164 <_strtol_l.constprop.0>:
 8010164:	2b24      	cmp	r3, #36	@ 0x24
 8010166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801016a:	4686      	mov	lr, r0
 801016c:	4690      	mov	r8, r2
 801016e:	d801      	bhi.n	8010174 <_strtol_l.constprop.0+0x10>
 8010170:	2b01      	cmp	r3, #1
 8010172:	d106      	bne.n	8010182 <_strtol_l.constprop.0+0x1e>
 8010174:	f7fd fdba 	bl	800dcec <__errno>
 8010178:	2316      	movs	r3, #22
 801017a:	6003      	str	r3, [r0, #0]
 801017c:	2000      	movs	r0, #0
 801017e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010182:	4834      	ldr	r0, [pc, #208]	@ (8010254 <_strtol_l.constprop.0+0xf0>)
 8010184:	460d      	mov	r5, r1
 8010186:	462a      	mov	r2, r5
 8010188:	f815 4b01 	ldrb.w	r4, [r5], #1
 801018c:	5d06      	ldrb	r6, [r0, r4]
 801018e:	f016 0608 	ands.w	r6, r6, #8
 8010192:	d1f8      	bne.n	8010186 <_strtol_l.constprop.0+0x22>
 8010194:	2c2d      	cmp	r4, #45	@ 0x2d
 8010196:	d12d      	bne.n	80101f4 <_strtol_l.constprop.0+0x90>
 8010198:	782c      	ldrb	r4, [r5, #0]
 801019a:	2601      	movs	r6, #1
 801019c:	1c95      	adds	r5, r2, #2
 801019e:	f033 0210 	bics.w	r2, r3, #16
 80101a2:	d109      	bne.n	80101b8 <_strtol_l.constprop.0+0x54>
 80101a4:	2c30      	cmp	r4, #48	@ 0x30
 80101a6:	d12a      	bne.n	80101fe <_strtol_l.constprop.0+0x9a>
 80101a8:	782a      	ldrb	r2, [r5, #0]
 80101aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80101ae:	2a58      	cmp	r2, #88	@ 0x58
 80101b0:	d125      	bne.n	80101fe <_strtol_l.constprop.0+0x9a>
 80101b2:	786c      	ldrb	r4, [r5, #1]
 80101b4:	2310      	movs	r3, #16
 80101b6:	3502      	adds	r5, #2
 80101b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80101bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80101c0:	2200      	movs	r2, #0
 80101c2:	fbbc f9f3 	udiv	r9, ip, r3
 80101c6:	4610      	mov	r0, r2
 80101c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80101cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80101d0:	2f09      	cmp	r7, #9
 80101d2:	d81b      	bhi.n	801020c <_strtol_l.constprop.0+0xa8>
 80101d4:	463c      	mov	r4, r7
 80101d6:	42a3      	cmp	r3, r4
 80101d8:	dd27      	ble.n	801022a <_strtol_l.constprop.0+0xc6>
 80101da:	1c57      	adds	r7, r2, #1
 80101dc:	d007      	beq.n	80101ee <_strtol_l.constprop.0+0x8a>
 80101de:	4581      	cmp	r9, r0
 80101e0:	d320      	bcc.n	8010224 <_strtol_l.constprop.0+0xc0>
 80101e2:	d101      	bne.n	80101e8 <_strtol_l.constprop.0+0x84>
 80101e4:	45a2      	cmp	sl, r4
 80101e6:	db1d      	blt.n	8010224 <_strtol_l.constprop.0+0xc0>
 80101e8:	fb00 4003 	mla	r0, r0, r3, r4
 80101ec:	2201      	movs	r2, #1
 80101ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80101f2:	e7eb      	b.n	80101cc <_strtol_l.constprop.0+0x68>
 80101f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80101f6:	bf04      	itt	eq
 80101f8:	782c      	ldrbeq	r4, [r5, #0]
 80101fa:	1c95      	addeq	r5, r2, #2
 80101fc:	e7cf      	b.n	801019e <_strtol_l.constprop.0+0x3a>
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d1da      	bne.n	80101b8 <_strtol_l.constprop.0+0x54>
 8010202:	2c30      	cmp	r4, #48	@ 0x30
 8010204:	bf0c      	ite	eq
 8010206:	2308      	moveq	r3, #8
 8010208:	230a      	movne	r3, #10
 801020a:	e7d5      	b.n	80101b8 <_strtol_l.constprop.0+0x54>
 801020c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010210:	2f19      	cmp	r7, #25
 8010212:	d801      	bhi.n	8010218 <_strtol_l.constprop.0+0xb4>
 8010214:	3c37      	subs	r4, #55	@ 0x37
 8010216:	e7de      	b.n	80101d6 <_strtol_l.constprop.0+0x72>
 8010218:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801021c:	2f19      	cmp	r7, #25
 801021e:	d804      	bhi.n	801022a <_strtol_l.constprop.0+0xc6>
 8010220:	3c57      	subs	r4, #87	@ 0x57
 8010222:	e7d8      	b.n	80101d6 <_strtol_l.constprop.0+0x72>
 8010224:	f04f 32ff 	mov.w	r2, #4294967295
 8010228:	e7e1      	b.n	80101ee <_strtol_l.constprop.0+0x8a>
 801022a:	1c53      	adds	r3, r2, #1
 801022c:	d108      	bne.n	8010240 <_strtol_l.constprop.0+0xdc>
 801022e:	2322      	movs	r3, #34	@ 0x22
 8010230:	f8ce 3000 	str.w	r3, [lr]
 8010234:	4660      	mov	r0, ip
 8010236:	f1b8 0f00 	cmp.w	r8, #0
 801023a:	d0a0      	beq.n	801017e <_strtol_l.constprop.0+0x1a>
 801023c:	1e69      	subs	r1, r5, #1
 801023e:	e006      	b.n	801024e <_strtol_l.constprop.0+0xea>
 8010240:	b106      	cbz	r6, 8010244 <_strtol_l.constprop.0+0xe0>
 8010242:	4240      	negs	r0, r0
 8010244:	f1b8 0f00 	cmp.w	r8, #0
 8010248:	d099      	beq.n	801017e <_strtol_l.constprop.0+0x1a>
 801024a:	2a00      	cmp	r2, #0
 801024c:	d1f6      	bne.n	801023c <_strtol_l.constprop.0+0xd8>
 801024e:	f8c8 1000 	str.w	r1, [r8]
 8010252:	e794      	b.n	801017e <_strtol_l.constprop.0+0x1a>
 8010254:	08011999 	.word	0x08011999

08010258 <_strtol_r>:
 8010258:	f7ff bf84 	b.w	8010164 <_strtol_l.constprop.0>

0801025c <__ssputs_r>:
 801025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010260:	688e      	ldr	r6, [r1, #8]
 8010262:	461f      	mov	r7, r3
 8010264:	42be      	cmp	r6, r7
 8010266:	680b      	ldr	r3, [r1, #0]
 8010268:	4682      	mov	sl, r0
 801026a:	460c      	mov	r4, r1
 801026c:	4690      	mov	r8, r2
 801026e:	d82d      	bhi.n	80102cc <__ssputs_r+0x70>
 8010270:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010274:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010278:	d026      	beq.n	80102c8 <__ssputs_r+0x6c>
 801027a:	6965      	ldr	r5, [r4, #20]
 801027c:	6909      	ldr	r1, [r1, #16]
 801027e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010282:	eba3 0901 	sub.w	r9, r3, r1
 8010286:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801028a:	1c7b      	adds	r3, r7, #1
 801028c:	444b      	add	r3, r9
 801028e:	106d      	asrs	r5, r5, #1
 8010290:	429d      	cmp	r5, r3
 8010292:	bf38      	it	cc
 8010294:	461d      	movcc	r5, r3
 8010296:	0553      	lsls	r3, r2, #21
 8010298:	d527      	bpl.n	80102ea <__ssputs_r+0x8e>
 801029a:	4629      	mov	r1, r5
 801029c:	f7fe fc1c 	bl	800ead8 <_malloc_r>
 80102a0:	4606      	mov	r6, r0
 80102a2:	b360      	cbz	r0, 80102fe <__ssputs_r+0xa2>
 80102a4:	6921      	ldr	r1, [r4, #16]
 80102a6:	464a      	mov	r2, r9
 80102a8:	f000 fa18 	bl	80106dc <memcpy>
 80102ac:	89a3      	ldrh	r3, [r4, #12]
 80102ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80102b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102b6:	81a3      	strh	r3, [r4, #12]
 80102b8:	6126      	str	r6, [r4, #16]
 80102ba:	6165      	str	r5, [r4, #20]
 80102bc:	444e      	add	r6, r9
 80102be:	eba5 0509 	sub.w	r5, r5, r9
 80102c2:	6026      	str	r6, [r4, #0]
 80102c4:	60a5      	str	r5, [r4, #8]
 80102c6:	463e      	mov	r6, r7
 80102c8:	42be      	cmp	r6, r7
 80102ca:	d900      	bls.n	80102ce <__ssputs_r+0x72>
 80102cc:	463e      	mov	r6, r7
 80102ce:	6820      	ldr	r0, [r4, #0]
 80102d0:	4632      	mov	r2, r6
 80102d2:	4641      	mov	r1, r8
 80102d4:	f000 f9c6 	bl	8010664 <memmove>
 80102d8:	68a3      	ldr	r3, [r4, #8]
 80102da:	1b9b      	subs	r3, r3, r6
 80102dc:	60a3      	str	r3, [r4, #8]
 80102de:	6823      	ldr	r3, [r4, #0]
 80102e0:	4433      	add	r3, r6
 80102e2:	6023      	str	r3, [r4, #0]
 80102e4:	2000      	movs	r0, #0
 80102e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102ea:	462a      	mov	r2, r5
 80102ec:	f000 fd89 	bl	8010e02 <_realloc_r>
 80102f0:	4606      	mov	r6, r0
 80102f2:	2800      	cmp	r0, #0
 80102f4:	d1e0      	bne.n	80102b8 <__ssputs_r+0x5c>
 80102f6:	6921      	ldr	r1, [r4, #16]
 80102f8:	4650      	mov	r0, sl
 80102fa:	f7fe fb79 	bl	800e9f0 <_free_r>
 80102fe:	230c      	movs	r3, #12
 8010300:	f8ca 3000 	str.w	r3, [sl]
 8010304:	89a3      	ldrh	r3, [r4, #12]
 8010306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801030a:	81a3      	strh	r3, [r4, #12]
 801030c:	f04f 30ff 	mov.w	r0, #4294967295
 8010310:	e7e9      	b.n	80102e6 <__ssputs_r+0x8a>
	...

08010314 <_svfiprintf_r>:
 8010314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010318:	4698      	mov	r8, r3
 801031a:	898b      	ldrh	r3, [r1, #12]
 801031c:	061b      	lsls	r3, r3, #24
 801031e:	b09d      	sub	sp, #116	@ 0x74
 8010320:	4607      	mov	r7, r0
 8010322:	460d      	mov	r5, r1
 8010324:	4614      	mov	r4, r2
 8010326:	d510      	bpl.n	801034a <_svfiprintf_r+0x36>
 8010328:	690b      	ldr	r3, [r1, #16]
 801032a:	b973      	cbnz	r3, 801034a <_svfiprintf_r+0x36>
 801032c:	2140      	movs	r1, #64	@ 0x40
 801032e:	f7fe fbd3 	bl	800ead8 <_malloc_r>
 8010332:	6028      	str	r0, [r5, #0]
 8010334:	6128      	str	r0, [r5, #16]
 8010336:	b930      	cbnz	r0, 8010346 <_svfiprintf_r+0x32>
 8010338:	230c      	movs	r3, #12
 801033a:	603b      	str	r3, [r7, #0]
 801033c:	f04f 30ff 	mov.w	r0, #4294967295
 8010340:	b01d      	add	sp, #116	@ 0x74
 8010342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010346:	2340      	movs	r3, #64	@ 0x40
 8010348:	616b      	str	r3, [r5, #20]
 801034a:	2300      	movs	r3, #0
 801034c:	9309      	str	r3, [sp, #36]	@ 0x24
 801034e:	2320      	movs	r3, #32
 8010350:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010354:	f8cd 800c 	str.w	r8, [sp, #12]
 8010358:	2330      	movs	r3, #48	@ 0x30
 801035a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80104f8 <_svfiprintf_r+0x1e4>
 801035e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010362:	f04f 0901 	mov.w	r9, #1
 8010366:	4623      	mov	r3, r4
 8010368:	469a      	mov	sl, r3
 801036a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801036e:	b10a      	cbz	r2, 8010374 <_svfiprintf_r+0x60>
 8010370:	2a25      	cmp	r2, #37	@ 0x25
 8010372:	d1f9      	bne.n	8010368 <_svfiprintf_r+0x54>
 8010374:	ebba 0b04 	subs.w	fp, sl, r4
 8010378:	d00b      	beq.n	8010392 <_svfiprintf_r+0x7e>
 801037a:	465b      	mov	r3, fp
 801037c:	4622      	mov	r2, r4
 801037e:	4629      	mov	r1, r5
 8010380:	4638      	mov	r0, r7
 8010382:	f7ff ff6b 	bl	801025c <__ssputs_r>
 8010386:	3001      	adds	r0, #1
 8010388:	f000 80a7 	beq.w	80104da <_svfiprintf_r+0x1c6>
 801038c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801038e:	445a      	add	r2, fp
 8010390:	9209      	str	r2, [sp, #36]	@ 0x24
 8010392:	f89a 3000 	ldrb.w	r3, [sl]
 8010396:	2b00      	cmp	r3, #0
 8010398:	f000 809f 	beq.w	80104da <_svfiprintf_r+0x1c6>
 801039c:	2300      	movs	r3, #0
 801039e:	f04f 32ff 	mov.w	r2, #4294967295
 80103a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103a6:	f10a 0a01 	add.w	sl, sl, #1
 80103aa:	9304      	str	r3, [sp, #16]
 80103ac:	9307      	str	r3, [sp, #28]
 80103ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80103b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80103b4:	4654      	mov	r4, sl
 80103b6:	2205      	movs	r2, #5
 80103b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103bc:	484e      	ldr	r0, [pc, #312]	@ (80104f8 <_svfiprintf_r+0x1e4>)
 80103be:	f7ef ff2f 	bl	8000220 <memchr>
 80103c2:	9a04      	ldr	r2, [sp, #16]
 80103c4:	b9d8      	cbnz	r0, 80103fe <_svfiprintf_r+0xea>
 80103c6:	06d0      	lsls	r0, r2, #27
 80103c8:	bf44      	itt	mi
 80103ca:	2320      	movmi	r3, #32
 80103cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80103d0:	0711      	lsls	r1, r2, #28
 80103d2:	bf44      	itt	mi
 80103d4:	232b      	movmi	r3, #43	@ 0x2b
 80103d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80103da:	f89a 3000 	ldrb.w	r3, [sl]
 80103de:	2b2a      	cmp	r3, #42	@ 0x2a
 80103e0:	d015      	beq.n	801040e <_svfiprintf_r+0xfa>
 80103e2:	9a07      	ldr	r2, [sp, #28]
 80103e4:	4654      	mov	r4, sl
 80103e6:	2000      	movs	r0, #0
 80103e8:	f04f 0c0a 	mov.w	ip, #10
 80103ec:	4621      	mov	r1, r4
 80103ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80103f2:	3b30      	subs	r3, #48	@ 0x30
 80103f4:	2b09      	cmp	r3, #9
 80103f6:	d94b      	bls.n	8010490 <_svfiprintf_r+0x17c>
 80103f8:	b1b0      	cbz	r0, 8010428 <_svfiprintf_r+0x114>
 80103fa:	9207      	str	r2, [sp, #28]
 80103fc:	e014      	b.n	8010428 <_svfiprintf_r+0x114>
 80103fe:	eba0 0308 	sub.w	r3, r0, r8
 8010402:	fa09 f303 	lsl.w	r3, r9, r3
 8010406:	4313      	orrs	r3, r2
 8010408:	9304      	str	r3, [sp, #16]
 801040a:	46a2      	mov	sl, r4
 801040c:	e7d2      	b.n	80103b4 <_svfiprintf_r+0xa0>
 801040e:	9b03      	ldr	r3, [sp, #12]
 8010410:	1d19      	adds	r1, r3, #4
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	9103      	str	r1, [sp, #12]
 8010416:	2b00      	cmp	r3, #0
 8010418:	bfbb      	ittet	lt
 801041a:	425b      	neglt	r3, r3
 801041c:	f042 0202 	orrlt.w	r2, r2, #2
 8010420:	9307      	strge	r3, [sp, #28]
 8010422:	9307      	strlt	r3, [sp, #28]
 8010424:	bfb8      	it	lt
 8010426:	9204      	strlt	r2, [sp, #16]
 8010428:	7823      	ldrb	r3, [r4, #0]
 801042a:	2b2e      	cmp	r3, #46	@ 0x2e
 801042c:	d10a      	bne.n	8010444 <_svfiprintf_r+0x130>
 801042e:	7863      	ldrb	r3, [r4, #1]
 8010430:	2b2a      	cmp	r3, #42	@ 0x2a
 8010432:	d132      	bne.n	801049a <_svfiprintf_r+0x186>
 8010434:	9b03      	ldr	r3, [sp, #12]
 8010436:	1d1a      	adds	r2, r3, #4
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	9203      	str	r2, [sp, #12]
 801043c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010440:	3402      	adds	r4, #2
 8010442:	9305      	str	r3, [sp, #20]
 8010444:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010508 <_svfiprintf_r+0x1f4>
 8010448:	7821      	ldrb	r1, [r4, #0]
 801044a:	2203      	movs	r2, #3
 801044c:	4650      	mov	r0, sl
 801044e:	f7ef fee7 	bl	8000220 <memchr>
 8010452:	b138      	cbz	r0, 8010464 <_svfiprintf_r+0x150>
 8010454:	9b04      	ldr	r3, [sp, #16]
 8010456:	eba0 000a 	sub.w	r0, r0, sl
 801045a:	2240      	movs	r2, #64	@ 0x40
 801045c:	4082      	lsls	r2, r0
 801045e:	4313      	orrs	r3, r2
 8010460:	3401      	adds	r4, #1
 8010462:	9304      	str	r3, [sp, #16]
 8010464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010468:	4824      	ldr	r0, [pc, #144]	@ (80104fc <_svfiprintf_r+0x1e8>)
 801046a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801046e:	2206      	movs	r2, #6
 8010470:	f7ef fed6 	bl	8000220 <memchr>
 8010474:	2800      	cmp	r0, #0
 8010476:	d036      	beq.n	80104e6 <_svfiprintf_r+0x1d2>
 8010478:	4b21      	ldr	r3, [pc, #132]	@ (8010500 <_svfiprintf_r+0x1ec>)
 801047a:	bb1b      	cbnz	r3, 80104c4 <_svfiprintf_r+0x1b0>
 801047c:	9b03      	ldr	r3, [sp, #12]
 801047e:	3307      	adds	r3, #7
 8010480:	f023 0307 	bic.w	r3, r3, #7
 8010484:	3308      	adds	r3, #8
 8010486:	9303      	str	r3, [sp, #12]
 8010488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801048a:	4433      	add	r3, r6
 801048c:	9309      	str	r3, [sp, #36]	@ 0x24
 801048e:	e76a      	b.n	8010366 <_svfiprintf_r+0x52>
 8010490:	fb0c 3202 	mla	r2, ip, r2, r3
 8010494:	460c      	mov	r4, r1
 8010496:	2001      	movs	r0, #1
 8010498:	e7a8      	b.n	80103ec <_svfiprintf_r+0xd8>
 801049a:	2300      	movs	r3, #0
 801049c:	3401      	adds	r4, #1
 801049e:	9305      	str	r3, [sp, #20]
 80104a0:	4619      	mov	r1, r3
 80104a2:	f04f 0c0a 	mov.w	ip, #10
 80104a6:	4620      	mov	r0, r4
 80104a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104ac:	3a30      	subs	r2, #48	@ 0x30
 80104ae:	2a09      	cmp	r2, #9
 80104b0:	d903      	bls.n	80104ba <_svfiprintf_r+0x1a6>
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d0c6      	beq.n	8010444 <_svfiprintf_r+0x130>
 80104b6:	9105      	str	r1, [sp, #20]
 80104b8:	e7c4      	b.n	8010444 <_svfiprintf_r+0x130>
 80104ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80104be:	4604      	mov	r4, r0
 80104c0:	2301      	movs	r3, #1
 80104c2:	e7f0      	b.n	80104a6 <_svfiprintf_r+0x192>
 80104c4:	ab03      	add	r3, sp, #12
 80104c6:	9300      	str	r3, [sp, #0]
 80104c8:	462a      	mov	r2, r5
 80104ca:	4b0e      	ldr	r3, [pc, #56]	@ (8010504 <_svfiprintf_r+0x1f0>)
 80104cc:	a904      	add	r1, sp, #16
 80104ce:	4638      	mov	r0, r7
 80104d0:	f7fc fca8 	bl	800ce24 <_printf_float>
 80104d4:	1c42      	adds	r2, r0, #1
 80104d6:	4606      	mov	r6, r0
 80104d8:	d1d6      	bne.n	8010488 <_svfiprintf_r+0x174>
 80104da:	89ab      	ldrh	r3, [r5, #12]
 80104dc:	065b      	lsls	r3, r3, #25
 80104de:	f53f af2d 	bmi.w	801033c <_svfiprintf_r+0x28>
 80104e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80104e4:	e72c      	b.n	8010340 <_svfiprintf_r+0x2c>
 80104e6:	ab03      	add	r3, sp, #12
 80104e8:	9300      	str	r3, [sp, #0]
 80104ea:	462a      	mov	r2, r5
 80104ec:	4b05      	ldr	r3, [pc, #20]	@ (8010504 <_svfiprintf_r+0x1f0>)
 80104ee:	a904      	add	r1, sp, #16
 80104f0:	4638      	mov	r0, r7
 80104f2:	f7fc ff2f 	bl	800d354 <_printf_i>
 80104f6:	e7ed      	b.n	80104d4 <_svfiprintf_r+0x1c0>
 80104f8:	08011a99 	.word	0x08011a99
 80104fc:	08011aa3 	.word	0x08011aa3
 8010500:	0800ce25 	.word	0x0800ce25
 8010504:	0801025d 	.word	0x0801025d
 8010508:	08011a9f 	.word	0x08011a9f

0801050c <__sflush_r>:
 801050c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010514:	0716      	lsls	r6, r2, #28
 8010516:	4605      	mov	r5, r0
 8010518:	460c      	mov	r4, r1
 801051a:	d454      	bmi.n	80105c6 <__sflush_r+0xba>
 801051c:	684b      	ldr	r3, [r1, #4]
 801051e:	2b00      	cmp	r3, #0
 8010520:	dc02      	bgt.n	8010528 <__sflush_r+0x1c>
 8010522:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010524:	2b00      	cmp	r3, #0
 8010526:	dd48      	ble.n	80105ba <__sflush_r+0xae>
 8010528:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801052a:	2e00      	cmp	r6, #0
 801052c:	d045      	beq.n	80105ba <__sflush_r+0xae>
 801052e:	2300      	movs	r3, #0
 8010530:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010534:	682f      	ldr	r7, [r5, #0]
 8010536:	6a21      	ldr	r1, [r4, #32]
 8010538:	602b      	str	r3, [r5, #0]
 801053a:	d030      	beq.n	801059e <__sflush_r+0x92>
 801053c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801053e:	89a3      	ldrh	r3, [r4, #12]
 8010540:	0759      	lsls	r1, r3, #29
 8010542:	d505      	bpl.n	8010550 <__sflush_r+0x44>
 8010544:	6863      	ldr	r3, [r4, #4]
 8010546:	1ad2      	subs	r2, r2, r3
 8010548:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801054a:	b10b      	cbz	r3, 8010550 <__sflush_r+0x44>
 801054c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801054e:	1ad2      	subs	r2, r2, r3
 8010550:	2300      	movs	r3, #0
 8010552:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010554:	6a21      	ldr	r1, [r4, #32]
 8010556:	4628      	mov	r0, r5
 8010558:	47b0      	blx	r6
 801055a:	1c43      	adds	r3, r0, #1
 801055c:	89a3      	ldrh	r3, [r4, #12]
 801055e:	d106      	bne.n	801056e <__sflush_r+0x62>
 8010560:	6829      	ldr	r1, [r5, #0]
 8010562:	291d      	cmp	r1, #29
 8010564:	d82b      	bhi.n	80105be <__sflush_r+0xb2>
 8010566:	4a2a      	ldr	r2, [pc, #168]	@ (8010610 <__sflush_r+0x104>)
 8010568:	410a      	asrs	r2, r1
 801056a:	07d6      	lsls	r6, r2, #31
 801056c:	d427      	bmi.n	80105be <__sflush_r+0xb2>
 801056e:	2200      	movs	r2, #0
 8010570:	6062      	str	r2, [r4, #4]
 8010572:	04d9      	lsls	r1, r3, #19
 8010574:	6922      	ldr	r2, [r4, #16]
 8010576:	6022      	str	r2, [r4, #0]
 8010578:	d504      	bpl.n	8010584 <__sflush_r+0x78>
 801057a:	1c42      	adds	r2, r0, #1
 801057c:	d101      	bne.n	8010582 <__sflush_r+0x76>
 801057e:	682b      	ldr	r3, [r5, #0]
 8010580:	b903      	cbnz	r3, 8010584 <__sflush_r+0x78>
 8010582:	6560      	str	r0, [r4, #84]	@ 0x54
 8010584:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010586:	602f      	str	r7, [r5, #0]
 8010588:	b1b9      	cbz	r1, 80105ba <__sflush_r+0xae>
 801058a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801058e:	4299      	cmp	r1, r3
 8010590:	d002      	beq.n	8010598 <__sflush_r+0x8c>
 8010592:	4628      	mov	r0, r5
 8010594:	f7fe fa2c 	bl	800e9f0 <_free_r>
 8010598:	2300      	movs	r3, #0
 801059a:	6363      	str	r3, [r4, #52]	@ 0x34
 801059c:	e00d      	b.n	80105ba <__sflush_r+0xae>
 801059e:	2301      	movs	r3, #1
 80105a0:	4628      	mov	r0, r5
 80105a2:	47b0      	blx	r6
 80105a4:	4602      	mov	r2, r0
 80105a6:	1c50      	adds	r0, r2, #1
 80105a8:	d1c9      	bne.n	801053e <__sflush_r+0x32>
 80105aa:	682b      	ldr	r3, [r5, #0]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d0c6      	beq.n	801053e <__sflush_r+0x32>
 80105b0:	2b1d      	cmp	r3, #29
 80105b2:	d001      	beq.n	80105b8 <__sflush_r+0xac>
 80105b4:	2b16      	cmp	r3, #22
 80105b6:	d11e      	bne.n	80105f6 <__sflush_r+0xea>
 80105b8:	602f      	str	r7, [r5, #0]
 80105ba:	2000      	movs	r0, #0
 80105bc:	e022      	b.n	8010604 <__sflush_r+0xf8>
 80105be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105c2:	b21b      	sxth	r3, r3
 80105c4:	e01b      	b.n	80105fe <__sflush_r+0xf2>
 80105c6:	690f      	ldr	r7, [r1, #16]
 80105c8:	2f00      	cmp	r7, #0
 80105ca:	d0f6      	beq.n	80105ba <__sflush_r+0xae>
 80105cc:	0793      	lsls	r3, r2, #30
 80105ce:	680e      	ldr	r6, [r1, #0]
 80105d0:	bf08      	it	eq
 80105d2:	694b      	ldreq	r3, [r1, #20]
 80105d4:	600f      	str	r7, [r1, #0]
 80105d6:	bf18      	it	ne
 80105d8:	2300      	movne	r3, #0
 80105da:	eba6 0807 	sub.w	r8, r6, r7
 80105de:	608b      	str	r3, [r1, #8]
 80105e0:	f1b8 0f00 	cmp.w	r8, #0
 80105e4:	dde9      	ble.n	80105ba <__sflush_r+0xae>
 80105e6:	6a21      	ldr	r1, [r4, #32]
 80105e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80105ea:	4643      	mov	r3, r8
 80105ec:	463a      	mov	r2, r7
 80105ee:	4628      	mov	r0, r5
 80105f0:	47b0      	blx	r6
 80105f2:	2800      	cmp	r0, #0
 80105f4:	dc08      	bgt.n	8010608 <__sflush_r+0xfc>
 80105f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105fe:	81a3      	strh	r3, [r4, #12]
 8010600:	f04f 30ff 	mov.w	r0, #4294967295
 8010604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010608:	4407      	add	r7, r0
 801060a:	eba8 0800 	sub.w	r8, r8, r0
 801060e:	e7e7      	b.n	80105e0 <__sflush_r+0xd4>
 8010610:	dfbffffe 	.word	0xdfbffffe

08010614 <_fflush_r>:
 8010614:	b538      	push	{r3, r4, r5, lr}
 8010616:	690b      	ldr	r3, [r1, #16]
 8010618:	4605      	mov	r5, r0
 801061a:	460c      	mov	r4, r1
 801061c:	b913      	cbnz	r3, 8010624 <_fflush_r+0x10>
 801061e:	2500      	movs	r5, #0
 8010620:	4628      	mov	r0, r5
 8010622:	bd38      	pop	{r3, r4, r5, pc}
 8010624:	b118      	cbz	r0, 801062e <_fflush_r+0x1a>
 8010626:	6a03      	ldr	r3, [r0, #32]
 8010628:	b90b      	cbnz	r3, 801062e <_fflush_r+0x1a>
 801062a:	f7fd fa53 	bl	800dad4 <__sinit>
 801062e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d0f3      	beq.n	801061e <_fflush_r+0xa>
 8010636:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010638:	07d0      	lsls	r0, r2, #31
 801063a:	d404      	bmi.n	8010646 <_fflush_r+0x32>
 801063c:	0599      	lsls	r1, r3, #22
 801063e:	d402      	bmi.n	8010646 <_fflush_r+0x32>
 8010640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010642:	f7fd fb7e 	bl	800dd42 <__retarget_lock_acquire_recursive>
 8010646:	4628      	mov	r0, r5
 8010648:	4621      	mov	r1, r4
 801064a:	f7ff ff5f 	bl	801050c <__sflush_r>
 801064e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010650:	07da      	lsls	r2, r3, #31
 8010652:	4605      	mov	r5, r0
 8010654:	d4e4      	bmi.n	8010620 <_fflush_r+0xc>
 8010656:	89a3      	ldrh	r3, [r4, #12]
 8010658:	059b      	lsls	r3, r3, #22
 801065a:	d4e1      	bmi.n	8010620 <_fflush_r+0xc>
 801065c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801065e:	f7fd fb71 	bl	800dd44 <__retarget_lock_release_recursive>
 8010662:	e7dd      	b.n	8010620 <_fflush_r+0xc>

08010664 <memmove>:
 8010664:	4288      	cmp	r0, r1
 8010666:	b510      	push	{r4, lr}
 8010668:	eb01 0402 	add.w	r4, r1, r2
 801066c:	d902      	bls.n	8010674 <memmove+0x10>
 801066e:	4284      	cmp	r4, r0
 8010670:	4623      	mov	r3, r4
 8010672:	d807      	bhi.n	8010684 <memmove+0x20>
 8010674:	1e43      	subs	r3, r0, #1
 8010676:	42a1      	cmp	r1, r4
 8010678:	d008      	beq.n	801068c <memmove+0x28>
 801067a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801067e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010682:	e7f8      	b.n	8010676 <memmove+0x12>
 8010684:	4402      	add	r2, r0
 8010686:	4601      	mov	r1, r0
 8010688:	428a      	cmp	r2, r1
 801068a:	d100      	bne.n	801068e <memmove+0x2a>
 801068c:	bd10      	pop	{r4, pc}
 801068e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010696:	e7f7      	b.n	8010688 <memmove+0x24>

08010698 <strncmp>:
 8010698:	b510      	push	{r4, lr}
 801069a:	b16a      	cbz	r2, 80106b8 <strncmp+0x20>
 801069c:	3901      	subs	r1, #1
 801069e:	1884      	adds	r4, r0, r2
 80106a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d103      	bne.n	80106b4 <strncmp+0x1c>
 80106ac:	42a0      	cmp	r0, r4
 80106ae:	d001      	beq.n	80106b4 <strncmp+0x1c>
 80106b0:	2a00      	cmp	r2, #0
 80106b2:	d1f5      	bne.n	80106a0 <strncmp+0x8>
 80106b4:	1ad0      	subs	r0, r2, r3
 80106b6:	bd10      	pop	{r4, pc}
 80106b8:	4610      	mov	r0, r2
 80106ba:	e7fc      	b.n	80106b6 <strncmp+0x1e>

080106bc <_sbrk_r>:
 80106bc:	b538      	push	{r3, r4, r5, lr}
 80106be:	4d06      	ldr	r5, [pc, #24]	@ (80106d8 <_sbrk_r+0x1c>)
 80106c0:	2300      	movs	r3, #0
 80106c2:	4604      	mov	r4, r0
 80106c4:	4608      	mov	r0, r1
 80106c6:	602b      	str	r3, [r5, #0]
 80106c8:	f7f1 fc8a 	bl	8001fe0 <_sbrk>
 80106cc:	1c43      	adds	r3, r0, #1
 80106ce:	d102      	bne.n	80106d6 <_sbrk_r+0x1a>
 80106d0:	682b      	ldr	r3, [r5, #0]
 80106d2:	b103      	cbz	r3, 80106d6 <_sbrk_r+0x1a>
 80106d4:	6023      	str	r3, [r4, #0]
 80106d6:	bd38      	pop	{r3, r4, r5, pc}
 80106d8:	20000a28 	.word	0x20000a28

080106dc <memcpy>:
 80106dc:	440a      	add	r2, r1
 80106de:	4291      	cmp	r1, r2
 80106e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80106e4:	d100      	bne.n	80106e8 <memcpy+0xc>
 80106e6:	4770      	bx	lr
 80106e8:	b510      	push	{r4, lr}
 80106ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80106f2:	4291      	cmp	r1, r2
 80106f4:	d1f9      	bne.n	80106ea <memcpy+0xe>
 80106f6:	bd10      	pop	{r4, pc}

080106f8 <nan>:
 80106f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010700 <nan+0x8>
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop
 8010700:	00000000 	.word	0x00000000
 8010704:	7ff80000 	.word	0x7ff80000

08010708 <__assert_func>:
 8010708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801070a:	4614      	mov	r4, r2
 801070c:	461a      	mov	r2, r3
 801070e:	4b09      	ldr	r3, [pc, #36]	@ (8010734 <__assert_func+0x2c>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	4605      	mov	r5, r0
 8010714:	68d8      	ldr	r0, [r3, #12]
 8010716:	b954      	cbnz	r4, 801072e <__assert_func+0x26>
 8010718:	4b07      	ldr	r3, [pc, #28]	@ (8010738 <__assert_func+0x30>)
 801071a:	461c      	mov	r4, r3
 801071c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010720:	9100      	str	r1, [sp, #0]
 8010722:	462b      	mov	r3, r5
 8010724:	4905      	ldr	r1, [pc, #20]	@ (801073c <__assert_func+0x34>)
 8010726:	f000 fba7 	bl	8010e78 <fiprintf>
 801072a:	f000 fbb7 	bl	8010e9c <abort>
 801072e:	4b04      	ldr	r3, [pc, #16]	@ (8010740 <__assert_func+0x38>)
 8010730:	e7f4      	b.n	801071c <__assert_func+0x14>
 8010732:	bf00      	nop
 8010734:	2000009c 	.word	0x2000009c
 8010738:	08011aed 	.word	0x08011aed
 801073c:	08011abf 	.word	0x08011abf
 8010740:	08011ab2 	.word	0x08011ab2

08010744 <_calloc_r>:
 8010744:	b570      	push	{r4, r5, r6, lr}
 8010746:	fba1 5402 	umull	r5, r4, r1, r2
 801074a:	b93c      	cbnz	r4, 801075c <_calloc_r+0x18>
 801074c:	4629      	mov	r1, r5
 801074e:	f7fe f9c3 	bl	800ead8 <_malloc_r>
 8010752:	4606      	mov	r6, r0
 8010754:	b928      	cbnz	r0, 8010762 <_calloc_r+0x1e>
 8010756:	2600      	movs	r6, #0
 8010758:	4630      	mov	r0, r6
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	220c      	movs	r2, #12
 801075e:	6002      	str	r2, [r0, #0]
 8010760:	e7f9      	b.n	8010756 <_calloc_r+0x12>
 8010762:	462a      	mov	r2, r5
 8010764:	4621      	mov	r1, r4
 8010766:	f7fd fa6f 	bl	800dc48 <memset>
 801076a:	e7f5      	b.n	8010758 <_calloc_r+0x14>

0801076c <rshift>:
 801076c:	6903      	ldr	r3, [r0, #16]
 801076e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010772:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010776:	ea4f 1261 	mov.w	r2, r1, asr #5
 801077a:	f100 0414 	add.w	r4, r0, #20
 801077e:	dd45      	ble.n	801080c <rshift+0xa0>
 8010780:	f011 011f 	ands.w	r1, r1, #31
 8010784:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010788:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801078c:	d10c      	bne.n	80107a8 <rshift+0x3c>
 801078e:	f100 0710 	add.w	r7, r0, #16
 8010792:	4629      	mov	r1, r5
 8010794:	42b1      	cmp	r1, r6
 8010796:	d334      	bcc.n	8010802 <rshift+0x96>
 8010798:	1a9b      	subs	r3, r3, r2
 801079a:	009b      	lsls	r3, r3, #2
 801079c:	1eea      	subs	r2, r5, #3
 801079e:	4296      	cmp	r6, r2
 80107a0:	bf38      	it	cc
 80107a2:	2300      	movcc	r3, #0
 80107a4:	4423      	add	r3, r4
 80107a6:	e015      	b.n	80107d4 <rshift+0x68>
 80107a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80107ac:	f1c1 0820 	rsb	r8, r1, #32
 80107b0:	40cf      	lsrs	r7, r1
 80107b2:	f105 0e04 	add.w	lr, r5, #4
 80107b6:	46a1      	mov	r9, r4
 80107b8:	4576      	cmp	r6, lr
 80107ba:	46f4      	mov	ip, lr
 80107bc:	d815      	bhi.n	80107ea <rshift+0x7e>
 80107be:	1a9a      	subs	r2, r3, r2
 80107c0:	0092      	lsls	r2, r2, #2
 80107c2:	3a04      	subs	r2, #4
 80107c4:	3501      	adds	r5, #1
 80107c6:	42ae      	cmp	r6, r5
 80107c8:	bf38      	it	cc
 80107ca:	2200      	movcc	r2, #0
 80107cc:	18a3      	adds	r3, r4, r2
 80107ce:	50a7      	str	r7, [r4, r2]
 80107d0:	b107      	cbz	r7, 80107d4 <rshift+0x68>
 80107d2:	3304      	adds	r3, #4
 80107d4:	1b1a      	subs	r2, r3, r4
 80107d6:	42a3      	cmp	r3, r4
 80107d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80107dc:	bf08      	it	eq
 80107de:	2300      	moveq	r3, #0
 80107e0:	6102      	str	r2, [r0, #16]
 80107e2:	bf08      	it	eq
 80107e4:	6143      	streq	r3, [r0, #20]
 80107e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107ea:	f8dc c000 	ldr.w	ip, [ip]
 80107ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80107f2:	ea4c 0707 	orr.w	r7, ip, r7
 80107f6:	f849 7b04 	str.w	r7, [r9], #4
 80107fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80107fe:	40cf      	lsrs	r7, r1
 8010800:	e7da      	b.n	80107b8 <rshift+0x4c>
 8010802:	f851 cb04 	ldr.w	ip, [r1], #4
 8010806:	f847 cf04 	str.w	ip, [r7, #4]!
 801080a:	e7c3      	b.n	8010794 <rshift+0x28>
 801080c:	4623      	mov	r3, r4
 801080e:	e7e1      	b.n	80107d4 <rshift+0x68>

08010810 <__hexdig_fun>:
 8010810:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010814:	2b09      	cmp	r3, #9
 8010816:	d802      	bhi.n	801081e <__hexdig_fun+0xe>
 8010818:	3820      	subs	r0, #32
 801081a:	b2c0      	uxtb	r0, r0
 801081c:	4770      	bx	lr
 801081e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010822:	2b05      	cmp	r3, #5
 8010824:	d801      	bhi.n	801082a <__hexdig_fun+0x1a>
 8010826:	3847      	subs	r0, #71	@ 0x47
 8010828:	e7f7      	b.n	801081a <__hexdig_fun+0xa>
 801082a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801082e:	2b05      	cmp	r3, #5
 8010830:	d801      	bhi.n	8010836 <__hexdig_fun+0x26>
 8010832:	3827      	subs	r0, #39	@ 0x27
 8010834:	e7f1      	b.n	801081a <__hexdig_fun+0xa>
 8010836:	2000      	movs	r0, #0
 8010838:	4770      	bx	lr
	...

0801083c <__gethex>:
 801083c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010840:	b085      	sub	sp, #20
 8010842:	468a      	mov	sl, r1
 8010844:	9302      	str	r3, [sp, #8]
 8010846:	680b      	ldr	r3, [r1, #0]
 8010848:	9001      	str	r0, [sp, #4]
 801084a:	4690      	mov	r8, r2
 801084c:	1c9c      	adds	r4, r3, #2
 801084e:	46a1      	mov	r9, r4
 8010850:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010854:	2830      	cmp	r0, #48	@ 0x30
 8010856:	d0fa      	beq.n	801084e <__gethex+0x12>
 8010858:	eba9 0303 	sub.w	r3, r9, r3
 801085c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010860:	f7ff ffd6 	bl	8010810 <__hexdig_fun>
 8010864:	4605      	mov	r5, r0
 8010866:	2800      	cmp	r0, #0
 8010868:	d168      	bne.n	801093c <__gethex+0x100>
 801086a:	49a0      	ldr	r1, [pc, #640]	@ (8010aec <__gethex+0x2b0>)
 801086c:	2201      	movs	r2, #1
 801086e:	4648      	mov	r0, r9
 8010870:	f7ff ff12 	bl	8010698 <strncmp>
 8010874:	4607      	mov	r7, r0
 8010876:	2800      	cmp	r0, #0
 8010878:	d167      	bne.n	801094a <__gethex+0x10e>
 801087a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801087e:	4626      	mov	r6, r4
 8010880:	f7ff ffc6 	bl	8010810 <__hexdig_fun>
 8010884:	2800      	cmp	r0, #0
 8010886:	d062      	beq.n	801094e <__gethex+0x112>
 8010888:	4623      	mov	r3, r4
 801088a:	7818      	ldrb	r0, [r3, #0]
 801088c:	2830      	cmp	r0, #48	@ 0x30
 801088e:	4699      	mov	r9, r3
 8010890:	f103 0301 	add.w	r3, r3, #1
 8010894:	d0f9      	beq.n	801088a <__gethex+0x4e>
 8010896:	f7ff ffbb 	bl	8010810 <__hexdig_fun>
 801089a:	fab0 f580 	clz	r5, r0
 801089e:	096d      	lsrs	r5, r5, #5
 80108a0:	f04f 0b01 	mov.w	fp, #1
 80108a4:	464a      	mov	r2, r9
 80108a6:	4616      	mov	r6, r2
 80108a8:	3201      	adds	r2, #1
 80108aa:	7830      	ldrb	r0, [r6, #0]
 80108ac:	f7ff ffb0 	bl	8010810 <__hexdig_fun>
 80108b0:	2800      	cmp	r0, #0
 80108b2:	d1f8      	bne.n	80108a6 <__gethex+0x6a>
 80108b4:	498d      	ldr	r1, [pc, #564]	@ (8010aec <__gethex+0x2b0>)
 80108b6:	2201      	movs	r2, #1
 80108b8:	4630      	mov	r0, r6
 80108ba:	f7ff feed 	bl	8010698 <strncmp>
 80108be:	2800      	cmp	r0, #0
 80108c0:	d13f      	bne.n	8010942 <__gethex+0x106>
 80108c2:	b944      	cbnz	r4, 80108d6 <__gethex+0x9a>
 80108c4:	1c74      	adds	r4, r6, #1
 80108c6:	4622      	mov	r2, r4
 80108c8:	4616      	mov	r6, r2
 80108ca:	3201      	adds	r2, #1
 80108cc:	7830      	ldrb	r0, [r6, #0]
 80108ce:	f7ff ff9f 	bl	8010810 <__hexdig_fun>
 80108d2:	2800      	cmp	r0, #0
 80108d4:	d1f8      	bne.n	80108c8 <__gethex+0x8c>
 80108d6:	1ba4      	subs	r4, r4, r6
 80108d8:	00a7      	lsls	r7, r4, #2
 80108da:	7833      	ldrb	r3, [r6, #0]
 80108dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80108e0:	2b50      	cmp	r3, #80	@ 0x50
 80108e2:	d13e      	bne.n	8010962 <__gethex+0x126>
 80108e4:	7873      	ldrb	r3, [r6, #1]
 80108e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80108e8:	d033      	beq.n	8010952 <__gethex+0x116>
 80108ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80108ec:	d034      	beq.n	8010958 <__gethex+0x11c>
 80108ee:	1c71      	adds	r1, r6, #1
 80108f0:	2400      	movs	r4, #0
 80108f2:	7808      	ldrb	r0, [r1, #0]
 80108f4:	f7ff ff8c 	bl	8010810 <__hexdig_fun>
 80108f8:	1e43      	subs	r3, r0, #1
 80108fa:	b2db      	uxtb	r3, r3
 80108fc:	2b18      	cmp	r3, #24
 80108fe:	d830      	bhi.n	8010962 <__gethex+0x126>
 8010900:	f1a0 0210 	sub.w	r2, r0, #16
 8010904:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010908:	f7ff ff82 	bl	8010810 <__hexdig_fun>
 801090c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010910:	fa5f fc8c 	uxtb.w	ip, ip
 8010914:	f1bc 0f18 	cmp.w	ip, #24
 8010918:	f04f 030a 	mov.w	r3, #10
 801091c:	d91e      	bls.n	801095c <__gethex+0x120>
 801091e:	b104      	cbz	r4, 8010922 <__gethex+0xe6>
 8010920:	4252      	negs	r2, r2
 8010922:	4417      	add	r7, r2
 8010924:	f8ca 1000 	str.w	r1, [sl]
 8010928:	b1ed      	cbz	r5, 8010966 <__gethex+0x12a>
 801092a:	f1bb 0f00 	cmp.w	fp, #0
 801092e:	bf0c      	ite	eq
 8010930:	2506      	moveq	r5, #6
 8010932:	2500      	movne	r5, #0
 8010934:	4628      	mov	r0, r5
 8010936:	b005      	add	sp, #20
 8010938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801093c:	2500      	movs	r5, #0
 801093e:	462c      	mov	r4, r5
 8010940:	e7b0      	b.n	80108a4 <__gethex+0x68>
 8010942:	2c00      	cmp	r4, #0
 8010944:	d1c7      	bne.n	80108d6 <__gethex+0x9a>
 8010946:	4627      	mov	r7, r4
 8010948:	e7c7      	b.n	80108da <__gethex+0x9e>
 801094a:	464e      	mov	r6, r9
 801094c:	462f      	mov	r7, r5
 801094e:	2501      	movs	r5, #1
 8010950:	e7c3      	b.n	80108da <__gethex+0x9e>
 8010952:	2400      	movs	r4, #0
 8010954:	1cb1      	adds	r1, r6, #2
 8010956:	e7cc      	b.n	80108f2 <__gethex+0xb6>
 8010958:	2401      	movs	r4, #1
 801095a:	e7fb      	b.n	8010954 <__gethex+0x118>
 801095c:	fb03 0002 	mla	r0, r3, r2, r0
 8010960:	e7ce      	b.n	8010900 <__gethex+0xc4>
 8010962:	4631      	mov	r1, r6
 8010964:	e7de      	b.n	8010924 <__gethex+0xe8>
 8010966:	eba6 0309 	sub.w	r3, r6, r9
 801096a:	3b01      	subs	r3, #1
 801096c:	4629      	mov	r1, r5
 801096e:	2b07      	cmp	r3, #7
 8010970:	dc0a      	bgt.n	8010988 <__gethex+0x14c>
 8010972:	9801      	ldr	r0, [sp, #4]
 8010974:	f7fe f93c 	bl	800ebf0 <_Balloc>
 8010978:	4604      	mov	r4, r0
 801097a:	b940      	cbnz	r0, 801098e <__gethex+0x152>
 801097c:	4b5c      	ldr	r3, [pc, #368]	@ (8010af0 <__gethex+0x2b4>)
 801097e:	4602      	mov	r2, r0
 8010980:	21e4      	movs	r1, #228	@ 0xe4
 8010982:	485c      	ldr	r0, [pc, #368]	@ (8010af4 <__gethex+0x2b8>)
 8010984:	f7ff fec0 	bl	8010708 <__assert_func>
 8010988:	3101      	adds	r1, #1
 801098a:	105b      	asrs	r3, r3, #1
 801098c:	e7ef      	b.n	801096e <__gethex+0x132>
 801098e:	f100 0a14 	add.w	sl, r0, #20
 8010992:	2300      	movs	r3, #0
 8010994:	4655      	mov	r5, sl
 8010996:	469b      	mov	fp, r3
 8010998:	45b1      	cmp	r9, r6
 801099a:	d337      	bcc.n	8010a0c <__gethex+0x1d0>
 801099c:	f845 bb04 	str.w	fp, [r5], #4
 80109a0:	eba5 050a 	sub.w	r5, r5, sl
 80109a4:	10ad      	asrs	r5, r5, #2
 80109a6:	6125      	str	r5, [r4, #16]
 80109a8:	4658      	mov	r0, fp
 80109aa:	f7fe fa13 	bl	800edd4 <__hi0bits>
 80109ae:	016d      	lsls	r5, r5, #5
 80109b0:	f8d8 6000 	ldr.w	r6, [r8]
 80109b4:	1a2d      	subs	r5, r5, r0
 80109b6:	42b5      	cmp	r5, r6
 80109b8:	dd54      	ble.n	8010a64 <__gethex+0x228>
 80109ba:	1bad      	subs	r5, r5, r6
 80109bc:	4629      	mov	r1, r5
 80109be:	4620      	mov	r0, r4
 80109c0:	f7fe fda7 	bl	800f512 <__any_on>
 80109c4:	4681      	mov	r9, r0
 80109c6:	b178      	cbz	r0, 80109e8 <__gethex+0x1ac>
 80109c8:	1e6b      	subs	r3, r5, #1
 80109ca:	1159      	asrs	r1, r3, #5
 80109cc:	f003 021f 	and.w	r2, r3, #31
 80109d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80109d4:	f04f 0901 	mov.w	r9, #1
 80109d8:	fa09 f202 	lsl.w	r2, r9, r2
 80109dc:	420a      	tst	r2, r1
 80109de:	d003      	beq.n	80109e8 <__gethex+0x1ac>
 80109e0:	454b      	cmp	r3, r9
 80109e2:	dc36      	bgt.n	8010a52 <__gethex+0x216>
 80109e4:	f04f 0902 	mov.w	r9, #2
 80109e8:	4629      	mov	r1, r5
 80109ea:	4620      	mov	r0, r4
 80109ec:	f7ff febe 	bl	801076c <rshift>
 80109f0:	442f      	add	r7, r5
 80109f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80109f6:	42bb      	cmp	r3, r7
 80109f8:	da42      	bge.n	8010a80 <__gethex+0x244>
 80109fa:	9801      	ldr	r0, [sp, #4]
 80109fc:	4621      	mov	r1, r4
 80109fe:	f7fe f937 	bl	800ec70 <_Bfree>
 8010a02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a04:	2300      	movs	r3, #0
 8010a06:	6013      	str	r3, [r2, #0]
 8010a08:	25a3      	movs	r5, #163	@ 0xa3
 8010a0a:	e793      	b.n	8010934 <__gethex+0xf8>
 8010a0c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010a10:	2a2e      	cmp	r2, #46	@ 0x2e
 8010a12:	d012      	beq.n	8010a3a <__gethex+0x1fe>
 8010a14:	2b20      	cmp	r3, #32
 8010a16:	d104      	bne.n	8010a22 <__gethex+0x1e6>
 8010a18:	f845 bb04 	str.w	fp, [r5], #4
 8010a1c:	f04f 0b00 	mov.w	fp, #0
 8010a20:	465b      	mov	r3, fp
 8010a22:	7830      	ldrb	r0, [r6, #0]
 8010a24:	9303      	str	r3, [sp, #12]
 8010a26:	f7ff fef3 	bl	8010810 <__hexdig_fun>
 8010a2a:	9b03      	ldr	r3, [sp, #12]
 8010a2c:	f000 000f 	and.w	r0, r0, #15
 8010a30:	4098      	lsls	r0, r3
 8010a32:	ea4b 0b00 	orr.w	fp, fp, r0
 8010a36:	3304      	adds	r3, #4
 8010a38:	e7ae      	b.n	8010998 <__gethex+0x15c>
 8010a3a:	45b1      	cmp	r9, r6
 8010a3c:	d8ea      	bhi.n	8010a14 <__gethex+0x1d8>
 8010a3e:	492b      	ldr	r1, [pc, #172]	@ (8010aec <__gethex+0x2b0>)
 8010a40:	9303      	str	r3, [sp, #12]
 8010a42:	2201      	movs	r2, #1
 8010a44:	4630      	mov	r0, r6
 8010a46:	f7ff fe27 	bl	8010698 <strncmp>
 8010a4a:	9b03      	ldr	r3, [sp, #12]
 8010a4c:	2800      	cmp	r0, #0
 8010a4e:	d1e1      	bne.n	8010a14 <__gethex+0x1d8>
 8010a50:	e7a2      	b.n	8010998 <__gethex+0x15c>
 8010a52:	1ea9      	subs	r1, r5, #2
 8010a54:	4620      	mov	r0, r4
 8010a56:	f7fe fd5c 	bl	800f512 <__any_on>
 8010a5a:	2800      	cmp	r0, #0
 8010a5c:	d0c2      	beq.n	80109e4 <__gethex+0x1a8>
 8010a5e:	f04f 0903 	mov.w	r9, #3
 8010a62:	e7c1      	b.n	80109e8 <__gethex+0x1ac>
 8010a64:	da09      	bge.n	8010a7a <__gethex+0x23e>
 8010a66:	1b75      	subs	r5, r6, r5
 8010a68:	4621      	mov	r1, r4
 8010a6a:	9801      	ldr	r0, [sp, #4]
 8010a6c:	462a      	mov	r2, r5
 8010a6e:	f7fe fb17 	bl	800f0a0 <__lshift>
 8010a72:	1b7f      	subs	r7, r7, r5
 8010a74:	4604      	mov	r4, r0
 8010a76:	f100 0a14 	add.w	sl, r0, #20
 8010a7a:	f04f 0900 	mov.w	r9, #0
 8010a7e:	e7b8      	b.n	80109f2 <__gethex+0x1b6>
 8010a80:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010a84:	42bd      	cmp	r5, r7
 8010a86:	dd6f      	ble.n	8010b68 <__gethex+0x32c>
 8010a88:	1bed      	subs	r5, r5, r7
 8010a8a:	42ae      	cmp	r6, r5
 8010a8c:	dc34      	bgt.n	8010af8 <__gethex+0x2bc>
 8010a8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a92:	2b02      	cmp	r3, #2
 8010a94:	d022      	beq.n	8010adc <__gethex+0x2a0>
 8010a96:	2b03      	cmp	r3, #3
 8010a98:	d024      	beq.n	8010ae4 <__gethex+0x2a8>
 8010a9a:	2b01      	cmp	r3, #1
 8010a9c:	d115      	bne.n	8010aca <__gethex+0x28e>
 8010a9e:	42ae      	cmp	r6, r5
 8010aa0:	d113      	bne.n	8010aca <__gethex+0x28e>
 8010aa2:	2e01      	cmp	r6, #1
 8010aa4:	d10b      	bne.n	8010abe <__gethex+0x282>
 8010aa6:	9a02      	ldr	r2, [sp, #8]
 8010aa8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010aac:	6013      	str	r3, [r2, #0]
 8010aae:	2301      	movs	r3, #1
 8010ab0:	6123      	str	r3, [r4, #16]
 8010ab2:	f8ca 3000 	str.w	r3, [sl]
 8010ab6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ab8:	2562      	movs	r5, #98	@ 0x62
 8010aba:	601c      	str	r4, [r3, #0]
 8010abc:	e73a      	b.n	8010934 <__gethex+0xf8>
 8010abe:	1e71      	subs	r1, r6, #1
 8010ac0:	4620      	mov	r0, r4
 8010ac2:	f7fe fd26 	bl	800f512 <__any_on>
 8010ac6:	2800      	cmp	r0, #0
 8010ac8:	d1ed      	bne.n	8010aa6 <__gethex+0x26a>
 8010aca:	9801      	ldr	r0, [sp, #4]
 8010acc:	4621      	mov	r1, r4
 8010ace:	f7fe f8cf 	bl	800ec70 <_Bfree>
 8010ad2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	6013      	str	r3, [r2, #0]
 8010ad8:	2550      	movs	r5, #80	@ 0x50
 8010ada:	e72b      	b.n	8010934 <__gethex+0xf8>
 8010adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d1f3      	bne.n	8010aca <__gethex+0x28e>
 8010ae2:	e7e0      	b.n	8010aa6 <__gethex+0x26a>
 8010ae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d1dd      	bne.n	8010aa6 <__gethex+0x26a>
 8010aea:	e7ee      	b.n	8010aca <__gethex+0x28e>
 8010aec:	08011940 	.word	0x08011940
 8010af0:	080117d8 	.word	0x080117d8
 8010af4:	08011aee 	.word	0x08011aee
 8010af8:	1e6f      	subs	r7, r5, #1
 8010afa:	f1b9 0f00 	cmp.w	r9, #0
 8010afe:	d130      	bne.n	8010b62 <__gethex+0x326>
 8010b00:	b127      	cbz	r7, 8010b0c <__gethex+0x2d0>
 8010b02:	4639      	mov	r1, r7
 8010b04:	4620      	mov	r0, r4
 8010b06:	f7fe fd04 	bl	800f512 <__any_on>
 8010b0a:	4681      	mov	r9, r0
 8010b0c:	117a      	asrs	r2, r7, #5
 8010b0e:	2301      	movs	r3, #1
 8010b10:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010b14:	f007 071f 	and.w	r7, r7, #31
 8010b18:	40bb      	lsls	r3, r7
 8010b1a:	4213      	tst	r3, r2
 8010b1c:	4629      	mov	r1, r5
 8010b1e:	4620      	mov	r0, r4
 8010b20:	bf18      	it	ne
 8010b22:	f049 0902 	orrne.w	r9, r9, #2
 8010b26:	f7ff fe21 	bl	801076c <rshift>
 8010b2a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010b2e:	1b76      	subs	r6, r6, r5
 8010b30:	2502      	movs	r5, #2
 8010b32:	f1b9 0f00 	cmp.w	r9, #0
 8010b36:	d047      	beq.n	8010bc8 <__gethex+0x38c>
 8010b38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b3c:	2b02      	cmp	r3, #2
 8010b3e:	d015      	beq.n	8010b6c <__gethex+0x330>
 8010b40:	2b03      	cmp	r3, #3
 8010b42:	d017      	beq.n	8010b74 <__gethex+0x338>
 8010b44:	2b01      	cmp	r3, #1
 8010b46:	d109      	bne.n	8010b5c <__gethex+0x320>
 8010b48:	f019 0f02 	tst.w	r9, #2
 8010b4c:	d006      	beq.n	8010b5c <__gethex+0x320>
 8010b4e:	f8da 3000 	ldr.w	r3, [sl]
 8010b52:	ea49 0903 	orr.w	r9, r9, r3
 8010b56:	f019 0f01 	tst.w	r9, #1
 8010b5a:	d10e      	bne.n	8010b7a <__gethex+0x33e>
 8010b5c:	f045 0510 	orr.w	r5, r5, #16
 8010b60:	e032      	b.n	8010bc8 <__gethex+0x38c>
 8010b62:	f04f 0901 	mov.w	r9, #1
 8010b66:	e7d1      	b.n	8010b0c <__gethex+0x2d0>
 8010b68:	2501      	movs	r5, #1
 8010b6a:	e7e2      	b.n	8010b32 <__gethex+0x2f6>
 8010b6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b6e:	f1c3 0301 	rsb	r3, r3, #1
 8010b72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d0f0      	beq.n	8010b5c <__gethex+0x320>
 8010b7a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010b7e:	f104 0314 	add.w	r3, r4, #20
 8010b82:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010b86:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010b8a:	f04f 0c00 	mov.w	ip, #0
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b94:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010b98:	d01b      	beq.n	8010bd2 <__gethex+0x396>
 8010b9a:	3201      	adds	r2, #1
 8010b9c:	6002      	str	r2, [r0, #0]
 8010b9e:	2d02      	cmp	r5, #2
 8010ba0:	f104 0314 	add.w	r3, r4, #20
 8010ba4:	d13c      	bne.n	8010c20 <__gethex+0x3e4>
 8010ba6:	f8d8 2000 	ldr.w	r2, [r8]
 8010baa:	3a01      	subs	r2, #1
 8010bac:	42b2      	cmp	r2, r6
 8010bae:	d109      	bne.n	8010bc4 <__gethex+0x388>
 8010bb0:	1171      	asrs	r1, r6, #5
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010bb8:	f006 061f 	and.w	r6, r6, #31
 8010bbc:	fa02 f606 	lsl.w	r6, r2, r6
 8010bc0:	421e      	tst	r6, r3
 8010bc2:	d13a      	bne.n	8010c3a <__gethex+0x3fe>
 8010bc4:	f045 0520 	orr.w	r5, r5, #32
 8010bc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010bca:	601c      	str	r4, [r3, #0]
 8010bcc:	9b02      	ldr	r3, [sp, #8]
 8010bce:	601f      	str	r7, [r3, #0]
 8010bd0:	e6b0      	b.n	8010934 <__gethex+0xf8>
 8010bd2:	4299      	cmp	r1, r3
 8010bd4:	f843 cc04 	str.w	ip, [r3, #-4]
 8010bd8:	d8d9      	bhi.n	8010b8e <__gethex+0x352>
 8010bda:	68a3      	ldr	r3, [r4, #8]
 8010bdc:	459b      	cmp	fp, r3
 8010bde:	db17      	blt.n	8010c10 <__gethex+0x3d4>
 8010be0:	6861      	ldr	r1, [r4, #4]
 8010be2:	9801      	ldr	r0, [sp, #4]
 8010be4:	3101      	adds	r1, #1
 8010be6:	f7fe f803 	bl	800ebf0 <_Balloc>
 8010bea:	4681      	mov	r9, r0
 8010bec:	b918      	cbnz	r0, 8010bf6 <__gethex+0x3ba>
 8010bee:	4b1a      	ldr	r3, [pc, #104]	@ (8010c58 <__gethex+0x41c>)
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	2184      	movs	r1, #132	@ 0x84
 8010bf4:	e6c5      	b.n	8010982 <__gethex+0x146>
 8010bf6:	6922      	ldr	r2, [r4, #16]
 8010bf8:	3202      	adds	r2, #2
 8010bfa:	f104 010c 	add.w	r1, r4, #12
 8010bfe:	0092      	lsls	r2, r2, #2
 8010c00:	300c      	adds	r0, #12
 8010c02:	f7ff fd6b 	bl	80106dc <memcpy>
 8010c06:	4621      	mov	r1, r4
 8010c08:	9801      	ldr	r0, [sp, #4]
 8010c0a:	f7fe f831 	bl	800ec70 <_Bfree>
 8010c0e:	464c      	mov	r4, r9
 8010c10:	6923      	ldr	r3, [r4, #16]
 8010c12:	1c5a      	adds	r2, r3, #1
 8010c14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010c18:	6122      	str	r2, [r4, #16]
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	615a      	str	r2, [r3, #20]
 8010c1e:	e7be      	b.n	8010b9e <__gethex+0x362>
 8010c20:	6922      	ldr	r2, [r4, #16]
 8010c22:	455a      	cmp	r2, fp
 8010c24:	dd0b      	ble.n	8010c3e <__gethex+0x402>
 8010c26:	2101      	movs	r1, #1
 8010c28:	4620      	mov	r0, r4
 8010c2a:	f7ff fd9f 	bl	801076c <rshift>
 8010c2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c32:	3701      	adds	r7, #1
 8010c34:	42bb      	cmp	r3, r7
 8010c36:	f6ff aee0 	blt.w	80109fa <__gethex+0x1be>
 8010c3a:	2501      	movs	r5, #1
 8010c3c:	e7c2      	b.n	8010bc4 <__gethex+0x388>
 8010c3e:	f016 061f 	ands.w	r6, r6, #31
 8010c42:	d0fa      	beq.n	8010c3a <__gethex+0x3fe>
 8010c44:	4453      	add	r3, sl
 8010c46:	f1c6 0620 	rsb	r6, r6, #32
 8010c4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010c4e:	f7fe f8c1 	bl	800edd4 <__hi0bits>
 8010c52:	42b0      	cmp	r0, r6
 8010c54:	dbe7      	blt.n	8010c26 <__gethex+0x3ea>
 8010c56:	e7f0      	b.n	8010c3a <__gethex+0x3fe>
 8010c58:	080117d8 	.word	0x080117d8

08010c5c <L_shift>:
 8010c5c:	f1c2 0208 	rsb	r2, r2, #8
 8010c60:	0092      	lsls	r2, r2, #2
 8010c62:	b570      	push	{r4, r5, r6, lr}
 8010c64:	f1c2 0620 	rsb	r6, r2, #32
 8010c68:	6843      	ldr	r3, [r0, #4]
 8010c6a:	6804      	ldr	r4, [r0, #0]
 8010c6c:	fa03 f506 	lsl.w	r5, r3, r6
 8010c70:	432c      	orrs	r4, r5
 8010c72:	40d3      	lsrs	r3, r2
 8010c74:	6004      	str	r4, [r0, #0]
 8010c76:	f840 3f04 	str.w	r3, [r0, #4]!
 8010c7a:	4288      	cmp	r0, r1
 8010c7c:	d3f4      	bcc.n	8010c68 <L_shift+0xc>
 8010c7e:	bd70      	pop	{r4, r5, r6, pc}

08010c80 <__match>:
 8010c80:	b530      	push	{r4, r5, lr}
 8010c82:	6803      	ldr	r3, [r0, #0]
 8010c84:	3301      	adds	r3, #1
 8010c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c8a:	b914      	cbnz	r4, 8010c92 <__match+0x12>
 8010c8c:	6003      	str	r3, [r0, #0]
 8010c8e:	2001      	movs	r0, #1
 8010c90:	bd30      	pop	{r4, r5, pc}
 8010c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c96:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010c9a:	2d19      	cmp	r5, #25
 8010c9c:	bf98      	it	ls
 8010c9e:	3220      	addls	r2, #32
 8010ca0:	42a2      	cmp	r2, r4
 8010ca2:	d0f0      	beq.n	8010c86 <__match+0x6>
 8010ca4:	2000      	movs	r0, #0
 8010ca6:	e7f3      	b.n	8010c90 <__match+0x10>

08010ca8 <__hexnan>:
 8010ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cac:	680b      	ldr	r3, [r1, #0]
 8010cae:	6801      	ldr	r1, [r0, #0]
 8010cb0:	115e      	asrs	r6, r3, #5
 8010cb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010cb6:	f013 031f 	ands.w	r3, r3, #31
 8010cba:	b087      	sub	sp, #28
 8010cbc:	bf18      	it	ne
 8010cbe:	3604      	addne	r6, #4
 8010cc0:	2500      	movs	r5, #0
 8010cc2:	1f37      	subs	r7, r6, #4
 8010cc4:	4682      	mov	sl, r0
 8010cc6:	4690      	mov	r8, r2
 8010cc8:	9301      	str	r3, [sp, #4]
 8010cca:	f846 5c04 	str.w	r5, [r6, #-4]
 8010cce:	46b9      	mov	r9, r7
 8010cd0:	463c      	mov	r4, r7
 8010cd2:	9502      	str	r5, [sp, #8]
 8010cd4:	46ab      	mov	fp, r5
 8010cd6:	784a      	ldrb	r2, [r1, #1]
 8010cd8:	1c4b      	adds	r3, r1, #1
 8010cda:	9303      	str	r3, [sp, #12]
 8010cdc:	b342      	cbz	r2, 8010d30 <__hexnan+0x88>
 8010cde:	4610      	mov	r0, r2
 8010ce0:	9105      	str	r1, [sp, #20]
 8010ce2:	9204      	str	r2, [sp, #16]
 8010ce4:	f7ff fd94 	bl	8010810 <__hexdig_fun>
 8010ce8:	2800      	cmp	r0, #0
 8010cea:	d151      	bne.n	8010d90 <__hexnan+0xe8>
 8010cec:	9a04      	ldr	r2, [sp, #16]
 8010cee:	9905      	ldr	r1, [sp, #20]
 8010cf0:	2a20      	cmp	r2, #32
 8010cf2:	d818      	bhi.n	8010d26 <__hexnan+0x7e>
 8010cf4:	9b02      	ldr	r3, [sp, #8]
 8010cf6:	459b      	cmp	fp, r3
 8010cf8:	dd13      	ble.n	8010d22 <__hexnan+0x7a>
 8010cfa:	454c      	cmp	r4, r9
 8010cfc:	d206      	bcs.n	8010d0c <__hexnan+0x64>
 8010cfe:	2d07      	cmp	r5, #7
 8010d00:	dc04      	bgt.n	8010d0c <__hexnan+0x64>
 8010d02:	462a      	mov	r2, r5
 8010d04:	4649      	mov	r1, r9
 8010d06:	4620      	mov	r0, r4
 8010d08:	f7ff ffa8 	bl	8010c5c <L_shift>
 8010d0c:	4544      	cmp	r4, r8
 8010d0e:	d952      	bls.n	8010db6 <__hexnan+0x10e>
 8010d10:	2300      	movs	r3, #0
 8010d12:	f1a4 0904 	sub.w	r9, r4, #4
 8010d16:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d1a:	f8cd b008 	str.w	fp, [sp, #8]
 8010d1e:	464c      	mov	r4, r9
 8010d20:	461d      	mov	r5, r3
 8010d22:	9903      	ldr	r1, [sp, #12]
 8010d24:	e7d7      	b.n	8010cd6 <__hexnan+0x2e>
 8010d26:	2a29      	cmp	r2, #41	@ 0x29
 8010d28:	d157      	bne.n	8010dda <__hexnan+0x132>
 8010d2a:	3102      	adds	r1, #2
 8010d2c:	f8ca 1000 	str.w	r1, [sl]
 8010d30:	f1bb 0f00 	cmp.w	fp, #0
 8010d34:	d051      	beq.n	8010dda <__hexnan+0x132>
 8010d36:	454c      	cmp	r4, r9
 8010d38:	d206      	bcs.n	8010d48 <__hexnan+0xa0>
 8010d3a:	2d07      	cmp	r5, #7
 8010d3c:	dc04      	bgt.n	8010d48 <__hexnan+0xa0>
 8010d3e:	462a      	mov	r2, r5
 8010d40:	4649      	mov	r1, r9
 8010d42:	4620      	mov	r0, r4
 8010d44:	f7ff ff8a 	bl	8010c5c <L_shift>
 8010d48:	4544      	cmp	r4, r8
 8010d4a:	d936      	bls.n	8010dba <__hexnan+0x112>
 8010d4c:	f1a8 0204 	sub.w	r2, r8, #4
 8010d50:	4623      	mov	r3, r4
 8010d52:	f853 1b04 	ldr.w	r1, [r3], #4
 8010d56:	f842 1f04 	str.w	r1, [r2, #4]!
 8010d5a:	429f      	cmp	r7, r3
 8010d5c:	d2f9      	bcs.n	8010d52 <__hexnan+0xaa>
 8010d5e:	1b3b      	subs	r3, r7, r4
 8010d60:	f023 0303 	bic.w	r3, r3, #3
 8010d64:	3304      	adds	r3, #4
 8010d66:	3401      	adds	r4, #1
 8010d68:	3e03      	subs	r6, #3
 8010d6a:	42b4      	cmp	r4, r6
 8010d6c:	bf88      	it	hi
 8010d6e:	2304      	movhi	r3, #4
 8010d70:	4443      	add	r3, r8
 8010d72:	2200      	movs	r2, #0
 8010d74:	f843 2b04 	str.w	r2, [r3], #4
 8010d78:	429f      	cmp	r7, r3
 8010d7a:	d2fb      	bcs.n	8010d74 <__hexnan+0xcc>
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	b91b      	cbnz	r3, 8010d88 <__hexnan+0xe0>
 8010d80:	4547      	cmp	r7, r8
 8010d82:	d128      	bne.n	8010dd6 <__hexnan+0x12e>
 8010d84:	2301      	movs	r3, #1
 8010d86:	603b      	str	r3, [r7, #0]
 8010d88:	2005      	movs	r0, #5
 8010d8a:	b007      	add	sp, #28
 8010d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d90:	3501      	adds	r5, #1
 8010d92:	2d08      	cmp	r5, #8
 8010d94:	f10b 0b01 	add.w	fp, fp, #1
 8010d98:	dd06      	ble.n	8010da8 <__hexnan+0x100>
 8010d9a:	4544      	cmp	r4, r8
 8010d9c:	d9c1      	bls.n	8010d22 <__hexnan+0x7a>
 8010d9e:	2300      	movs	r3, #0
 8010da0:	f844 3c04 	str.w	r3, [r4, #-4]
 8010da4:	2501      	movs	r5, #1
 8010da6:	3c04      	subs	r4, #4
 8010da8:	6822      	ldr	r2, [r4, #0]
 8010daa:	f000 000f 	and.w	r0, r0, #15
 8010dae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010db2:	6020      	str	r0, [r4, #0]
 8010db4:	e7b5      	b.n	8010d22 <__hexnan+0x7a>
 8010db6:	2508      	movs	r5, #8
 8010db8:	e7b3      	b.n	8010d22 <__hexnan+0x7a>
 8010dba:	9b01      	ldr	r3, [sp, #4]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d0dd      	beq.n	8010d7c <__hexnan+0xd4>
 8010dc0:	f1c3 0320 	rsb	r3, r3, #32
 8010dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8010dc8:	40da      	lsrs	r2, r3
 8010dca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010dce:	4013      	ands	r3, r2
 8010dd0:	f846 3c04 	str.w	r3, [r6, #-4]
 8010dd4:	e7d2      	b.n	8010d7c <__hexnan+0xd4>
 8010dd6:	3f04      	subs	r7, #4
 8010dd8:	e7d0      	b.n	8010d7c <__hexnan+0xd4>
 8010dda:	2004      	movs	r0, #4
 8010ddc:	e7d5      	b.n	8010d8a <__hexnan+0xe2>

08010dde <__ascii_mbtowc>:
 8010dde:	b082      	sub	sp, #8
 8010de0:	b901      	cbnz	r1, 8010de4 <__ascii_mbtowc+0x6>
 8010de2:	a901      	add	r1, sp, #4
 8010de4:	b142      	cbz	r2, 8010df8 <__ascii_mbtowc+0x1a>
 8010de6:	b14b      	cbz	r3, 8010dfc <__ascii_mbtowc+0x1e>
 8010de8:	7813      	ldrb	r3, [r2, #0]
 8010dea:	600b      	str	r3, [r1, #0]
 8010dec:	7812      	ldrb	r2, [r2, #0]
 8010dee:	1e10      	subs	r0, r2, #0
 8010df0:	bf18      	it	ne
 8010df2:	2001      	movne	r0, #1
 8010df4:	b002      	add	sp, #8
 8010df6:	4770      	bx	lr
 8010df8:	4610      	mov	r0, r2
 8010dfa:	e7fb      	b.n	8010df4 <__ascii_mbtowc+0x16>
 8010dfc:	f06f 0001 	mvn.w	r0, #1
 8010e00:	e7f8      	b.n	8010df4 <__ascii_mbtowc+0x16>

08010e02 <_realloc_r>:
 8010e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e06:	4680      	mov	r8, r0
 8010e08:	4615      	mov	r5, r2
 8010e0a:	460c      	mov	r4, r1
 8010e0c:	b921      	cbnz	r1, 8010e18 <_realloc_r+0x16>
 8010e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e12:	4611      	mov	r1, r2
 8010e14:	f7fd be60 	b.w	800ead8 <_malloc_r>
 8010e18:	b92a      	cbnz	r2, 8010e26 <_realloc_r+0x24>
 8010e1a:	f7fd fde9 	bl	800e9f0 <_free_r>
 8010e1e:	2400      	movs	r4, #0
 8010e20:	4620      	mov	r0, r4
 8010e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e26:	f000 f840 	bl	8010eaa <_malloc_usable_size_r>
 8010e2a:	4285      	cmp	r5, r0
 8010e2c:	4606      	mov	r6, r0
 8010e2e:	d802      	bhi.n	8010e36 <_realloc_r+0x34>
 8010e30:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010e34:	d8f4      	bhi.n	8010e20 <_realloc_r+0x1e>
 8010e36:	4629      	mov	r1, r5
 8010e38:	4640      	mov	r0, r8
 8010e3a:	f7fd fe4d 	bl	800ead8 <_malloc_r>
 8010e3e:	4607      	mov	r7, r0
 8010e40:	2800      	cmp	r0, #0
 8010e42:	d0ec      	beq.n	8010e1e <_realloc_r+0x1c>
 8010e44:	42b5      	cmp	r5, r6
 8010e46:	462a      	mov	r2, r5
 8010e48:	4621      	mov	r1, r4
 8010e4a:	bf28      	it	cs
 8010e4c:	4632      	movcs	r2, r6
 8010e4e:	f7ff fc45 	bl	80106dc <memcpy>
 8010e52:	4621      	mov	r1, r4
 8010e54:	4640      	mov	r0, r8
 8010e56:	f7fd fdcb 	bl	800e9f0 <_free_r>
 8010e5a:	463c      	mov	r4, r7
 8010e5c:	e7e0      	b.n	8010e20 <_realloc_r+0x1e>

08010e5e <__ascii_wctomb>:
 8010e5e:	4603      	mov	r3, r0
 8010e60:	4608      	mov	r0, r1
 8010e62:	b141      	cbz	r1, 8010e76 <__ascii_wctomb+0x18>
 8010e64:	2aff      	cmp	r2, #255	@ 0xff
 8010e66:	d904      	bls.n	8010e72 <__ascii_wctomb+0x14>
 8010e68:	228a      	movs	r2, #138	@ 0x8a
 8010e6a:	601a      	str	r2, [r3, #0]
 8010e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e70:	4770      	bx	lr
 8010e72:	700a      	strb	r2, [r1, #0]
 8010e74:	2001      	movs	r0, #1
 8010e76:	4770      	bx	lr

08010e78 <fiprintf>:
 8010e78:	b40e      	push	{r1, r2, r3}
 8010e7a:	b503      	push	{r0, r1, lr}
 8010e7c:	4601      	mov	r1, r0
 8010e7e:	ab03      	add	r3, sp, #12
 8010e80:	4805      	ldr	r0, [pc, #20]	@ (8010e98 <fiprintf+0x20>)
 8010e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e86:	6800      	ldr	r0, [r0, #0]
 8010e88:	9301      	str	r3, [sp, #4]
 8010e8a:	f000 f83f 	bl	8010f0c <_vfiprintf_r>
 8010e8e:	b002      	add	sp, #8
 8010e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e94:	b003      	add	sp, #12
 8010e96:	4770      	bx	lr
 8010e98:	2000009c 	.word	0x2000009c

08010e9c <abort>:
 8010e9c:	b508      	push	{r3, lr}
 8010e9e:	2006      	movs	r0, #6
 8010ea0:	f000 fa08 	bl	80112b4 <raise>
 8010ea4:	2001      	movs	r0, #1
 8010ea6:	f7f1 f823 	bl	8001ef0 <_exit>

08010eaa <_malloc_usable_size_r>:
 8010eaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010eae:	1f18      	subs	r0, r3, #4
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	bfbc      	itt	lt
 8010eb4:	580b      	ldrlt	r3, [r1, r0]
 8010eb6:	18c0      	addlt	r0, r0, r3
 8010eb8:	4770      	bx	lr

08010eba <__sfputc_r>:
 8010eba:	6893      	ldr	r3, [r2, #8]
 8010ebc:	3b01      	subs	r3, #1
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	b410      	push	{r4}
 8010ec2:	6093      	str	r3, [r2, #8]
 8010ec4:	da08      	bge.n	8010ed8 <__sfputc_r+0x1e>
 8010ec6:	6994      	ldr	r4, [r2, #24]
 8010ec8:	42a3      	cmp	r3, r4
 8010eca:	db01      	blt.n	8010ed0 <__sfputc_r+0x16>
 8010ecc:	290a      	cmp	r1, #10
 8010ece:	d103      	bne.n	8010ed8 <__sfputc_r+0x1e>
 8010ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ed4:	f000 b932 	b.w	801113c <__swbuf_r>
 8010ed8:	6813      	ldr	r3, [r2, #0]
 8010eda:	1c58      	adds	r0, r3, #1
 8010edc:	6010      	str	r0, [r2, #0]
 8010ede:	7019      	strb	r1, [r3, #0]
 8010ee0:	4608      	mov	r0, r1
 8010ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ee6:	4770      	bx	lr

08010ee8 <__sfputs_r>:
 8010ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eea:	4606      	mov	r6, r0
 8010eec:	460f      	mov	r7, r1
 8010eee:	4614      	mov	r4, r2
 8010ef0:	18d5      	adds	r5, r2, r3
 8010ef2:	42ac      	cmp	r4, r5
 8010ef4:	d101      	bne.n	8010efa <__sfputs_r+0x12>
 8010ef6:	2000      	movs	r0, #0
 8010ef8:	e007      	b.n	8010f0a <__sfputs_r+0x22>
 8010efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010efe:	463a      	mov	r2, r7
 8010f00:	4630      	mov	r0, r6
 8010f02:	f7ff ffda 	bl	8010eba <__sfputc_r>
 8010f06:	1c43      	adds	r3, r0, #1
 8010f08:	d1f3      	bne.n	8010ef2 <__sfputs_r+0xa>
 8010f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010f0c <_vfiprintf_r>:
 8010f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f10:	460d      	mov	r5, r1
 8010f12:	b09d      	sub	sp, #116	@ 0x74
 8010f14:	4614      	mov	r4, r2
 8010f16:	4698      	mov	r8, r3
 8010f18:	4606      	mov	r6, r0
 8010f1a:	b118      	cbz	r0, 8010f24 <_vfiprintf_r+0x18>
 8010f1c:	6a03      	ldr	r3, [r0, #32]
 8010f1e:	b90b      	cbnz	r3, 8010f24 <_vfiprintf_r+0x18>
 8010f20:	f7fc fdd8 	bl	800dad4 <__sinit>
 8010f24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f26:	07d9      	lsls	r1, r3, #31
 8010f28:	d405      	bmi.n	8010f36 <_vfiprintf_r+0x2a>
 8010f2a:	89ab      	ldrh	r3, [r5, #12]
 8010f2c:	059a      	lsls	r2, r3, #22
 8010f2e:	d402      	bmi.n	8010f36 <_vfiprintf_r+0x2a>
 8010f30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f32:	f7fc ff06 	bl	800dd42 <__retarget_lock_acquire_recursive>
 8010f36:	89ab      	ldrh	r3, [r5, #12]
 8010f38:	071b      	lsls	r3, r3, #28
 8010f3a:	d501      	bpl.n	8010f40 <_vfiprintf_r+0x34>
 8010f3c:	692b      	ldr	r3, [r5, #16]
 8010f3e:	b99b      	cbnz	r3, 8010f68 <_vfiprintf_r+0x5c>
 8010f40:	4629      	mov	r1, r5
 8010f42:	4630      	mov	r0, r6
 8010f44:	f000 f938 	bl	80111b8 <__swsetup_r>
 8010f48:	b170      	cbz	r0, 8010f68 <_vfiprintf_r+0x5c>
 8010f4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f4c:	07dc      	lsls	r4, r3, #31
 8010f4e:	d504      	bpl.n	8010f5a <_vfiprintf_r+0x4e>
 8010f50:	f04f 30ff 	mov.w	r0, #4294967295
 8010f54:	b01d      	add	sp, #116	@ 0x74
 8010f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f5a:	89ab      	ldrh	r3, [r5, #12]
 8010f5c:	0598      	lsls	r0, r3, #22
 8010f5e:	d4f7      	bmi.n	8010f50 <_vfiprintf_r+0x44>
 8010f60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f62:	f7fc feef 	bl	800dd44 <__retarget_lock_release_recursive>
 8010f66:	e7f3      	b.n	8010f50 <_vfiprintf_r+0x44>
 8010f68:	2300      	movs	r3, #0
 8010f6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f6c:	2320      	movs	r3, #32
 8010f6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f76:	2330      	movs	r3, #48	@ 0x30
 8010f78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011128 <_vfiprintf_r+0x21c>
 8010f7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010f80:	f04f 0901 	mov.w	r9, #1
 8010f84:	4623      	mov	r3, r4
 8010f86:	469a      	mov	sl, r3
 8010f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f8c:	b10a      	cbz	r2, 8010f92 <_vfiprintf_r+0x86>
 8010f8e:	2a25      	cmp	r2, #37	@ 0x25
 8010f90:	d1f9      	bne.n	8010f86 <_vfiprintf_r+0x7a>
 8010f92:	ebba 0b04 	subs.w	fp, sl, r4
 8010f96:	d00b      	beq.n	8010fb0 <_vfiprintf_r+0xa4>
 8010f98:	465b      	mov	r3, fp
 8010f9a:	4622      	mov	r2, r4
 8010f9c:	4629      	mov	r1, r5
 8010f9e:	4630      	mov	r0, r6
 8010fa0:	f7ff ffa2 	bl	8010ee8 <__sfputs_r>
 8010fa4:	3001      	adds	r0, #1
 8010fa6:	f000 80a7 	beq.w	80110f8 <_vfiprintf_r+0x1ec>
 8010faa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010fac:	445a      	add	r2, fp
 8010fae:	9209      	str	r2, [sp, #36]	@ 0x24
 8010fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	f000 809f 	beq.w	80110f8 <_vfiprintf_r+0x1ec>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8010fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fc4:	f10a 0a01 	add.w	sl, sl, #1
 8010fc8:	9304      	str	r3, [sp, #16]
 8010fca:	9307      	str	r3, [sp, #28]
 8010fcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010fd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8010fd2:	4654      	mov	r4, sl
 8010fd4:	2205      	movs	r2, #5
 8010fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fda:	4853      	ldr	r0, [pc, #332]	@ (8011128 <_vfiprintf_r+0x21c>)
 8010fdc:	f7ef f920 	bl	8000220 <memchr>
 8010fe0:	9a04      	ldr	r2, [sp, #16]
 8010fe2:	b9d8      	cbnz	r0, 801101c <_vfiprintf_r+0x110>
 8010fe4:	06d1      	lsls	r1, r2, #27
 8010fe6:	bf44      	itt	mi
 8010fe8:	2320      	movmi	r3, #32
 8010fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010fee:	0713      	lsls	r3, r2, #28
 8010ff0:	bf44      	itt	mi
 8010ff2:	232b      	movmi	r3, #43	@ 0x2b
 8010ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8010ffc:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ffe:	d015      	beq.n	801102c <_vfiprintf_r+0x120>
 8011000:	9a07      	ldr	r2, [sp, #28]
 8011002:	4654      	mov	r4, sl
 8011004:	2000      	movs	r0, #0
 8011006:	f04f 0c0a 	mov.w	ip, #10
 801100a:	4621      	mov	r1, r4
 801100c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011010:	3b30      	subs	r3, #48	@ 0x30
 8011012:	2b09      	cmp	r3, #9
 8011014:	d94b      	bls.n	80110ae <_vfiprintf_r+0x1a2>
 8011016:	b1b0      	cbz	r0, 8011046 <_vfiprintf_r+0x13a>
 8011018:	9207      	str	r2, [sp, #28]
 801101a:	e014      	b.n	8011046 <_vfiprintf_r+0x13a>
 801101c:	eba0 0308 	sub.w	r3, r0, r8
 8011020:	fa09 f303 	lsl.w	r3, r9, r3
 8011024:	4313      	orrs	r3, r2
 8011026:	9304      	str	r3, [sp, #16]
 8011028:	46a2      	mov	sl, r4
 801102a:	e7d2      	b.n	8010fd2 <_vfiprintf_r+0xc6>
 801102c:	9b03      	ldr	r3, [sp, #12]
 801102e:	1d19      	adds	r1, r3, #4
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	9103      	str	r1, [sp, #12]
 8011034:	2b00      	cmp	r3, #0
 8011036:	bfbb      	ittet	lt
 8011038:	425b      	neglt	r3, r3
 801103a:	f042 0202 	orrlt.w	r2, r2, #2
 801103e:	9307      	strge	r3, [sp, #28]
 8011040:	9307      	strlt	r3, [sp, #28]
 8011042:	bfb8      	it	lt
 8011044:	9204      	strlt	r2, [sp, #16]
 8011046:	7823      	ldrb	r3, [r4, #0]
 8011048:	2b2e      	cmp	r3, #46	@ 0x2e
 801104a:	d10a      	bne.n	8011062 <_vfiprintf_r+0x156>
 801104c:	7863      	ldrb	r3, [r4, #1]
 801104e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011050:	d132      	bne.n	80110b8 <_vfiprintf_r+0x1ac>
 8011052:	9b03      	ldr	r3, [sp, #12]
 8011054:	1d1a      	adds	r2, r3, #4
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	9203      	str	r2, [sp, #12]
 801105a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801105e:	3402      	adds	r4, #2
 8011060:	9305      	str	r3, [sp, #20]
 8011062:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011138 <_vfiprintf_r+0x22c>
 8011066:	7821      	ldrb	r1, [r4, #0]
 8011068:	2203      	movs	r2, #3
 801106a:	4650      	mov	r0, sl
 801106c:	f7ef f8d8 	bl	8000220 <memchr>
 8011070:	b138      	cbz	r0, 8011082 <_vfiprintf_r+0x176>
 8011072:	9b04      	ldr	r3, [sp, #16]
 8011074:	eba0 000a 	sub.w	r0, r0, sl
 8011078:	2240      	movs	r2, #64	@ 0x40
 801107a:	4082      	lsls	r2, r0
 801107c:	4313      	orrs	r3, r2
 801107e:	3401      	adds	r4, #1
 8011080:	9304      	str	r3, [sp, #16]
 8011082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011086:	4829      	ldr	r0, [pc, #164]	@ (801112c <_vfiprintf_r+0x220>)
 8011088:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801108c:	2206      	movs	r2, #6
 801108e:	f7ef f8c7 	bl	8000220 <memchr>
 8011092:	2800      	cmp	r0, #0
 8011094:	d03f      	beq.n	8011116 <_vfiprintf_r+0x20a>
 8011096:	4b26      	ldr	r3, [pc, #152]	@ (8011130 <_vfiprintf_r+0x224>)
 8011098:	bb1b      	cbnz	r3, 80110e2 <_vfiprintf_r+0x1d6>
 801109a:	9b03      	ldr	r3, [sp, #12]
 801109c:	3307      	adds	r3, #7
 801109e:	f023 0307 	bic.w	r3, r3, #7
 80110a2:	3308      	adds	r3, #8
 80110a4:	9303      	str	r3, [sp, #12]
 80110a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110a8:	443b      	add	r3, r7
 80110aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80110ac:	e76a      	b.n	8010f84 <_vfiprintf_r+0x78>
 80110ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80110b2:	460c      	mov	r4, r1
 80110b4:	2001      	movs	r0, #1
 80110b6:	e7a8      	b.n	801100a <_vfiprintf_r+0xfe>
 80110b8:	2300      	movs	r3, #0
 80110ba:	3401      	adds	r4, #1
 80110bc:	9305      	str	r3, [sp, #20]
 80110be:	4619      	mov	r1, r3
 80110c0:	f04f 0c0a 	mov.w	ip, #10
 80110c4:	4620      	mov	r0, r4
 80110c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110ca:	3a30      	subs	r2, #48	@ 0x30
 80110cc:	2a09      	cmp	r2, #9
 80110ce:	d903      	bls.n	80110d8 <_vfiprintf_r+0x1cc>
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d0c6      	beq.n	8011062 <_vfiprintf_r+0x156>
 80110d4:	9105      	str	r1, [sp, #20]
 80110d6:	e7c4      	b.n	8011062 <_vfiprintf_r+0x156>
 80110d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80110dc:	4604      	mov	r4, r0
 80110de:	2301      	movs	r3, #1
 80110e0:	e7f0      	b.n	80110c4 <_vfiprintf_r+0x1b8>
 80110e2:	ab03      	add	r3, sp, #12
 80110e4:	9300      	str	r3, [sp, #0]
 80110e6:	462a      	mov	r2, r5
 80110e8:	4b12      	ldr	r3, [pc, #72]	@ (8011134 <_vfiprintf_r+0x228>)
 80110ea:	a904      	add	r1, sp, #16
 80110ec:	4630      	mov	r0, r6
 80110ee:	f7fb fe99 	bl	800ce24 <_printf_float>
 80110f2:	4607      	mov	r7, r0
 80110f4:	1c78      	adds	r0, r7, #1
 80110f6:	d1d6      	bne.n	80110a6 <_vfiprintf_r+0x19a>
 80110f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80110fa:	07d9      	lsls	r1, r3, #31
 80110fc:	d405      	bmi.n	801110a <_vfiprintf_r+0x1fe>
 80110fe:	89ab      	ldrh	r3, [r5, #12]
 8011100:	059a      	lsls	r2, r3, #22
 8011102:	d402      	bmi.n	801110a <_vfiprintf_r+0x1fe>
 8011104:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011106:	f7fc fe1d 	bl	800dd44 <__retarget_lock_release_recursive>
 801110a:	89ab      	ldrh	r3, [r5, #12]
 801110c:	065b      	lsls	r3, r3, #25
 801110e:	f53f af1f 	bmi.w	8010f50 <_vfiprintf_r+0x44>
 8011112:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011114:	e71e      	b.n	8010f54 <_vfiprintf_r+0x48>
 8011116:	ab03      	add	r3, sp, #12
 8011118:	9300      	str	r3, [sp, #0]
 801111a:	462a      	mov	r2, r5
 801111c:	4b05      	ldr	r3, [pc, #20]	@ (8011134 <_vfiprintf_r+0x228>)
 801111e:	a904      	add	r1, sp, #16
 8011120:	4630      	mov	r0, r6
 8011122:	f7fc f917 	bl	800d354 <_printf_i>
 8011126:	e7e4      	b.n	80110f2 <_vfiprintf_r+0x1e6>
 8011128:	08011a99 	.word	0x08011a99
 801112c:	08011aa3 	.word	0x08011aa3
 8011130:	0800ce25 	.word	0x0800ce25
 8011134:	08010ee9 	.word	0x08010ee9
 8011138:	08011a9f 	.word	0x08011a9f

0801113c <__swbuf_r>:
 801113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801113e:	460e      	mov	r6, r1
 8011140:	4614      	mov	r4, r2
 8011142:	4605      	mov	r5, r0
 8011144:	b118      	cbz	r0, 801114e <__swbuf_r+0x12>
 8011146:	6a03      	ldr	r3, [r0, #32]
 8011148:	b90b      	cbnz	r3, 801114e <__swbuf_r+0x12>
 801114a:	f7fc fcc3 	bl	800dad4 <__sinit>
 801114e:	69a3      	ldr	r3, [r4, #24]
 8011150:	60a3      	str	r3, [r4, #8]
 8011152:	89a3      	ldrh	r3, [r4, #12]
 8011154:	071a      	lsls	r2, r3, #28
 8011156:	d501      	bpl.n	801115c <__swbuf_r+0x20>
 8011158:	6923      	ldr	r3, [r4, #16]
 801115a:	b943      	cbnz	r3, 801116e <__swbuf_r+0x32>
 801115c:	4621      	mov	r1, r4
 801115e:	4628      	mov	r0, r5
 8011160:	f000 f82a 	bl	80111b8 <__swsetup_r>
 8011164:	b118      	cbz	r0, 801116e <__swbuf_r+0x32>
 8011166:	f04f 37ff 	mov.w	r7, #4294967295
 801116a:	4638      	mov	r0, r7
 801116c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801116e:	6823      	ldr	r3, [r4, #0]
 8011170:	6922      	ldr	r2, [r4, #16]
 8011172:	1a98      	subs	r0, r3, r2
 8011174:	6963      	ldr	r3, [r4, #20]
 8011176:	b2f6      	uxtb	r6, r6
 8011178:	4283      	cmp	r3, r0
 801117a:	4637      	mov	r7, r6
 801117c:	dc05      	bgt.n	801118a <__swbuf_r+0x4e>
 801117e:	4621      	mov	r1, r4
 8011180:	4628      	mov	r0, r5
 8011182:	f7ff fa47 	bl	8010614 <_fflush_r>
 8011186:	2800      	cmp	r0, #0
 8011188:	d1ed      	bne.n	8011166 <__swbuf_r+0x2a>
 801118a:	68a3      	ldr	r3, [r4, #8]
 801118c:	3b01      	subs	r3, #1
 801118e:	60a3      	str	r3, [r4, #8]
 8011190:	6823      	ldr	r3, [r4, #0]
 8011192:	1c5a      	adds	r2, r3, #1
 8011194:	6022      	str	r2, [r4, #0]
 8011196:	701e      	strb	r6, [r3, #0]
 8011198:	6962      	ldr	r2, [r4, #20]
 801119a:	1c43      	adds	r3, r0, #1
 801119c:	429a      	cmp	r2, r3
 801119e:	d004      	beq.n	80111aa <__swbuf_r+0x6e>
 80111a0:	89a3      	ldrh	r3, [r4, #12]
 80111a2:	07db      	lsls	r3, r3, #31
 80111a4:	d5e1      	bpl.n	801116a <__swbuf_r+0x2e>
 80111a6:	2e0a      	cmp	r6, #10
 80111a8:	d1df      	bne.n	801116a <__swbuf_r+0x2e>
 80111aa:	4621      	mov	r1, r4
 80111ac:	4628      	mov	r0, r5
 80111ae:	f7ff fa31 	bl	8010614 <_fflush_r>
 80111b2:	2800      	cmp	r0, #0
 80111b4:	d0d9      	beq.n	801116a <__swbuf_r+0x2e>
 80111b6:	e7d6      	b.n	8011166 <__swbuf_r+0x2a>

080111b8 <__swsetup_r>:
 80111b8:	b538      	push	{r3, r4, r5, lr}
 80111ba:	4b29      	ldr	r3, [pc, #164]	@ (8011260 <__swsetup_r+0xa8>)
 80111bc:	4605      	mov	r5, r0
 80111be:	6818      	ldr	r0, [r3, #0]
 80111c0:	460c      	mov	r4, r1
 80111c2:	b118      	cbz	r0, 80111cc <__swsetup_r+0x14>
 80111c4:	6a03      	ldr	r3, [r0, #32]
 80111c6:	b90b      	cbnz	r3, 80111cc <__swsetup_r+0x14>
 80111c8:	f7fc fc84 	bl	800dad4 <__sinit>
 80111cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111d0:	0719      	lsls	r1, r3, #28
 80111d2:	d422      	bmi.n	801121a <__swsetup_r+0x62>
 80111d4:	06da      	lsls	r2, r3, #27
 80111d6:	d407      	bmi.n	80111e8 <__swsetup_r+0x30>
 80111d8:	2209      	movs	r2, #9
 80111da:	602a      	str	r2, [r5, #0]
 80111dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111e0:	81a3      	strh	r3, [r4, #12]
 80111e2:	f04f 30ff 	mov.w	r0, #4294967295
 80111e6:	e033      	b.n	8011250 <__swsetup_r+0x98>
 80111e8:	0758      	lsls	r0, r3, #29
 80111ea:	d512      	bpl.n	8011212 <__swsetup_r+0x5a>
 80111ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80111ee:	b141      	cbz	r1, 8011202 <__swsetup_r+0x4a>
 80111f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80111f4:	4299      	cmp	r1, r3
 80111f6:	d002      	beq.n	80111fe <__swsetup_r+0x46>
 80111f8:	4628      	mov	r0, r5
 80111fa:	f7fd fbf9 	bl	800e9f0 <_free_r>
 80111fe:	2300      	movs	r3, #0
 8011200:	6363      	str	r3, [r4, #52]	@ 0x34
 8011202:	89a3      	ldrh	r3, [r4, #12]
 8011204:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011208:	81a3      	strh	r3, [r4, #12]
 801120a:	2300      	movs	r3, #0
 801120c:	6063      	str	r3, [r4, #4]
 801120e:	6923      	ldr	r3, [r4, #16]
 8011210:	6023      	str	r3, [r4, #0]
 8011212:	89a3      	ldrh	r3, [r4, #12]
 8011214:	f043 0308 	orr.w	r3, r3, #8
 8011218:	81a3      	strh	r3, [r4, #12]
 801121a:	6923      	ldr	r3, [r4, #16]
 801121c:	b94b      	cbnz	r3, 8011232 <__swsetup_r+0x7a>
 801121e:	89a3      	ldrh	r3, [r4, #12]
 8011220:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011228:	d003      	beq.n	8011232 <__swsetup_r+0x7a>
 801122a:	4621      	mov	r1, r4
 801122c:	4628      	mov	r0, r5
 801122e:	f000 f883 	bl	8011338 <__smakebuf_r>
 8011232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011236:	f013 0201 	ands.w	r2, r3, #1
 801123a:	d00a      	beq.n	8011252 <__swsetup_r+0x9a>
 801123c:	2200      	movs	r2, #0
 801123e:	60a2      	str	r2, [r4, #8]
 8011240:	6962      	ldr	r2, [r4, #20]
 8011242:	4252      	negs	r2, r2
 8011244:	61a2      	str	r2, [r4, #24]
 8011246:	6922      	ldr	r2, [r4, #16]
 8011248:	b942      	cbnz	r2, 801125c <__swsetup_r+0xa4>
 801124a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801124e:	d1c5      	bne.n	80111dc <__swsetup_r+0x24>
 8011250:	bd38      	pop	{r3, r4, r5, pc}
 8011252:	0799      	lsls	r1, r3, #30
 8011254:	bf58      	it	pl
 8011256:	6962      	ldrpl	r2, [r4, #20]
 8011258:	60a2      	str	r2, [r4, #8]
 801125a:	e7f4      	b.n	8011246 <__swsetup_r+0x8e>
 801125c:	2000      	movs	r0, #0
 801125e:	e7f7      	b.n	8011250 <__swsetup_r+0x98>
 8011260:	2000009c 	.word	0x2000009c

08011264 <_raise_r>:
 8011264:	291f      	cmp	r1, #31
 8011266:	b538      	push	{r3, r4, r5, lr}
 8011268:	4605      	mov	r5, r0
 801126a:	460c      	mov	r4, r1
 801126c:	d904      	bls.n	8011278 <_raise_r+0x14>
 801126e:	2316      	movs	r3, #22
 8011270:	6003      	str	r3, [r0, #0]
 8011272:	f04f 30ff 	mov.w	r0, #4294967295
 8011276:	bd38      	pop	{r3, r4, r5, pc}
 8011278:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801127a:	b112      	cbz	r2, 8011282 <_raise_r+0x1e>
 801127c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011280:	b94b      	cbnz	r3, 8011296 <_raise_r+0x32>
 8011282:	4628      	mov	r0, r5
 8011284:	f000 f830 	bl	80112e8 <_getpid_r>
 8011288:	4622      	mov	r2, r4
 801128a:	4601      	mov	r1, r0
 801128c:	4628      	mov	r0, r5
 801128e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011292:	f000 b817 	b.w	80112c4 <_kill_r>
 8011296:	2b01      	cmp	r3, #1
 8011298:	d00a      	beq.n	80112b0 <_raise_r+0x4c>
 801129a:	1c59      	adds	r1, r3, #1
 801129c:	d103      	bne.n	80112a6 <_raise_r+0x42>
 801129e:	2316      	movs	r3, #22
 80112a0:	6003      	str	r3, [r0, #0]
 80112a2:	2001      	movs	r0, #1
 80112a4:	e7e7      	b.n	8011276 <_raise_r+0x12>
 80112a6:	2100      	movs	r1, #0
 80112a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80112ac:	4620      	mov	r0, r4
 80112ae:	4798      	blx	r3
 80112b0:	2000      	movs	r0, #0
 80112b2:	e7e0      	b.n	8011276 <_raise_r+0x12>

080112b4 <raise>:
 80112b4:	4b02      	ldr	r3, [pc, #8]	@ (80112c0 <raise+0xc>)
 80112b6:	4601      	mov	r1, r0
 80112b8:	6818      	ldr	r0, [r3, #0]
 80112ba:	f7ff bfd3 	b.w	8011264 <_raise_r>
 80112be:	bf00      	nop
 80112c0:	2000009c 	.word	0x2000009c

080112c4 <_kill_r>:
 80112c4:	b538      	push	{r3, r4, r5, lr}
 80112c6:	4d07      	ldr	r5, [pc, #28]	@ (80112e4 <_kill_r+0x20>)
 80112c8:	2300      	movs	r3, #0
 80112ca:	4604      	mov	r4, r0
 80112cc:	4608      	mov	r0, r1
 80112ce:	4611      	mov	r1, r2
 80112d0:	602b      	str	r3, [r5, #0]
 80112d2:	f7f0 fdfd 	bl	8001ed0 <_kill>
 80112d6:	1c43      	adds	r3, r0, #1
 80112d8:	d102      	bne.n	80112e0 <_kill_r+0x1c>
 80112da:	682b      	ldr	r3, [r5, #0]
 80112dc:	b103      	cbz	r3, 80112e0 <_kill_r+0x1c>
 80112de:	6023      	str	r3, [r4, #0]
 80112e0:	bd38      	pop	{r3, r4, r5, pc}
 80112e2:	bf00      	nop
 80112e4:	20000a28 	.word	0x20000a28

080112e8 <_getpid_r>:
 80112e8:	f7f0 bdea 	b.w	8001ec0 <_getpid>

080112ec <__swhatbuf_r>:
 80112ec:	b570      	push	{r4, r5, r6, lr}
 80112ee:	460c      	mov	r4, r1
 80112f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112f4:	2900      	cmp	r1, #0
 80112f6:	b096      	sub	sp, #88	@ 0x58
 80112f8:	4615      	mov	r5, r2
 80112fa:	461e      	mov	r6, r3
 80112fc:	da0d      	bge.n	801131a <__swhatbuf_r+0x2e>
 80112fe:	89a3      	ldrh	r3, [r4, #12]
 8011300:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011304:	f04f 0100 	mov.w	r1, #0
 8011308:	bf14      	ite	ne
 801130a:	2340      	movne	r3, #64	@ 0x40
 801130c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011310:	2000      	movs	r0, #0
 8011312:	6031      	str	r1, [r6, #0]
 8011314:	602b      	str	r3, [r5, #0]
 8011316:	b016      	add	sp, #88	@ 0x58
 8011318:	bd70      	pop	{r4, r5, r6, pc}
 801131a:	466a      	mov	r2, sp
 801131c:	f000 f848 	bl	80113b0 <_fstat_r>
 8011320:	2800      	cmp	r0, #0
 8011322:	dbec      	blt.n	80112fe <__swhatbuf_r+0x12>
 8011324:	9901      	ldr	r1, [sp, #4]
 8011326:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801132a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801132e:	4259      	negs	r1, r3
 8011330:	4159      	adcs	r1, r3
 8011332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011336:	e7eb      	b.n	8011310 <__swhatbuf_r+0x24>

08011338 <__smakebuf_r>:
 8011338:	898b      	ldrh	r3, [r1, #12]
 801133a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801133c:	079d      	lsls	r5, r3, #30
 801133e:	4606      	mov	r6, r0
 8011340:	460c      	mov	r4, r1
 8011342:	d507      	bpl.n	8011354 <__smakebuf_r+0x1c>
 8011344:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011348:	6023      	str	r3, [r4, #0]
 801134a:	6123      	str	r3, [r4, #16]
 801134c:	2301      	movs	r3, #1
 801134e:	6163      	str	r3, [r4, #20]
 8011350:	b003      	add	sp, #12
 8011352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011354:	ab01      	add	r3, sp, #4
 8011356:	466a      	mov	r2, sp
 8011358:	f7ff ffc8 	bl	80112ec <__swhatbuf_r>
 801135c:	9f00      	ldr	r7, [sp, #0]
 801135e:	4605      	mov	r5, r0
 8011360:	4639      	mov	r1, r7
 8011362:	4630      	mov	r0, r6
 8011364:	f7fd fbb8 	bl	800ead8 <_malloc_r>
 8011368:	b948      	cbnz	r0, 801137e <__smakebuf_r+0x46>
 801136a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801136e:	059a      	lsls	r2, r3, #22
 8011370:	d4ee      	bmi.n	8011350 <__smakebuf_r+0x18>
 8011372:	f023 0303 	bic.w	r3, r3, #3
 8011376:	f043 0302 	orr.w	r3, r3, #2
 801137a:	81a3      	strh	r3, [r4, #12]
 801137c:	e7e2      	b.n	8011344 <__smakebuf_r+0xc>
 801137e:	89a3      	ldrh	r3, [r4, #12]
 8011380:	6020      	str	r0, [r4, #0]
 8011382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011386:	81a3      	strh	r3, [r4, #12]
 8011388:	9b01      	ldr	r3, [sp, #4]
 801138a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801138e:	b15b      	cbz	r3, 80113a8 <__smakebuf_r+0x70>
 8011390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011394:	4630      	mov	r0, r6
 8011396:	f000 f81d 	bl	80113d4 <_isatty_r>
 801139a:	b128      	cbz	r0, 80113a8 <__smakebuf_r+0x70>
 801139c:	89a3      	ldrh	r3, [r4, #12]
 801139e:	f023 0303 	bic.w	r3, r3, #3
 80113a2:	f043 0301 	orr.w	r3, r3, #1
 80113a6:	81a3      	strh	r3, [r4, #12]
 80113a8:	89a3      	ldrh	r3, [r4, #12]
 80113aa:	431d      	orrs	r5, r3
 80113ac:	81a5      	strh	r5, [r4, #12]
 80113ae:	e7cf      	b.n	8011350 <__smakebuf_r+0x18>

080113b0 <_fstat_r>:
 80113b0:	b538      	push	{r3, r4, r5, lr}
 80113b2:	4d07      	ldr	r5, [pc, #28]	@ (80113d0 <_fstat_r+0x20>)
 80113b4:	2300      	movs	r3, #0
 80113b6:	4604      	mov	r4, r0
 80113b8:	4608      	mov	r0, r1
 80113ba:	4611      	mov	r1, r2
 80113bc:	602b      	str	r3, [r5, #0]
 80113be:	f7f0 fde7 	bl	8001f90 <_fstat>
 80113c2:	1c43      	adds	r3, r0, #1
 80113c4:	d102      	bne.n	80113cc <_fstat_r+0x1c>
 80113c6:	682b      	ldr	r3, [r5, #0]
 80113c8:	b103      	cbz	r3, 80113cc <_fstat_r+0x1c>
 80113ca:	6023      	str	r3, [r4, #0]
 80113cc:	bd38      	pop	{r3, r4, r5, pc}
 80113ce:	bf00      	nop
 80113d0:	20000a28 	.word	0x20000a28

080113d4 <_isatty_r>:
 80113d4:	b538      	push	{r3, r4, r5, lr}
 80113d6:	4d06      	ldr	r5, [pc, #24]	@ (80113f0 <_isatty_r+0x1c>)
 80113d8:	2300      	movs	r3, #0
 80113da:	4604      	mov	r4, r0
 80113dc:	4608      	mov	r0, r1
 80113de:	602b      	str	r3, [r5, #0]
 80113e0:	f7f0 fde6 	bl	8001fb0 <_isatty>
 80113e4:	1c43      	adds	r3, r0, #1
 80113e6:	d102      	bne.n	80113ee <_isatty_r+0x1a>
 80113e8:	682b      	ldr	r3, [r5, #0]
 80113ea:	b103      	cbz	r3, 80113ee <_isatty_r+0x1a>
 80113ec:	6023      	str	r3, [r4, #0]
 80113ee:	bd38      	pop	{r3, r4, r5, pc}
 80113f0:	20000a28 	.word	0x20000a28

080113f4 <fmod>:
 80113f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113f6:	ed2d 8b02 	vpush	{d8}
 80113fa:	ec57 6b10 	vmov	r6, r7, d0
 80113fe:	ec55 4b11 	vmov	r4, r5, d1
 8011402:	f000 f825 	bl	8011450 <__ieee754_fmod>
 8011406:	4622      	mov	r2, r4
 8011408:	462b      	mov	r3, r5
 801140a:	4630      	mov	r0, r6
 801140c:	4639      	mov	r1, r7
 801140e:	eeb0 8a40 	vmov.f32	s16, s0
 8011412:	eef0 8a60 	vmov.f32	s17, s1
 8011416:	f7ef fbb1 	bl	8000b7c <__aeabi_dcmpun>
 801141a:	b990      	cbnz	r0, 8011442 <fmod+0x4e>
 801141c:	2200      	movs	r2, #0
 801141e:	2300      	movs	r3, #0
 8011420:	4620      	mov	r0, r4
 8011422:	4629      	mov	r1, r5
 8011424:	f7ef fb78 	bl	8000b18 <__aeabi_dcmpeq>
 8011428:	b158      	cbz	r0, 8011442 <fmod+0x4e>
 801142a:	f7fc fc5f 	bl	800dcec <__errno>
 801142e:	2321      	movs	r3, #33	@ 0x21
 8011430:	6003      	str	r3, [r0, #0]
 8011432:	2200      	movs	r2, #0
 8011434:	2300      	movs	r3, #0
 8011436:	4610      	mov	r0, r2
 8011438:	4619      	mov	r1, r3
 801143a:	f7ef fa2f 	bl	800089c <__aeabi_ddiv>
 801143e:	ec41 0b18 	vmov	d8, r0, r1
 8011442:	eeb0 0a48 	vmov.f32	s0, s16
 8011446:	eef0 0a68 	vmov.f32	s1, s17
 801144a:	ecbd 8b02 	vpop	{d8}
 801144e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011450 <__ieee754_fmod>:
 8011450:	ec53 2b11 	vmov	r2, r3, d1
 8011454:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8011458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801145c:	ea52 040c 	orrs.w	r4, r2, ip
 8011460:	ec51 0b10 	vmov	r0, r1, d0
 8011464:	461e      	mov	r6, r3
 8011466:	4617      	mov	r7, r2
 8011468:	4696      	mov	lr, r2
 801146a:	d00c      	beq.n	8011486 <__ieee754_fmod+0x36>
 801146c:	4c77      	ldr	r4, [pc, #476]	@ (801164c <__ieee754_fmod+0x1fc>)
 801146e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8011472:	45a0      	cmp	r8, r4
 8011474:	4689      	mov	r9, r1
 8011476:	d806      	bhi.n	8011486 <__ieee754_fmod+0x36>
 8011478:	4254      	negs	r4, r2
 801147a:	4d75      	ldr	r5, [pc, #468]	@ (8011650 <__ieee754_fmod+0x200>)
 801147c:	4314      	orrs	r4, r2
 801147e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8011482:	42ac      	cmp	r4, r5
 8011484:	d909      	bls.n	801149a <__ieee754_fmod+0x4a>
 8011486:	f7ef f8df 	bl	8000648 <__aeabi_dmul>
 801148a:	4602      	mov	r2, r0
 801148c:	460b      	mov	r3, r1
 801148e:	f7ef fa05 	bl	800089c <__aeabi_ddiv>
 8011492:	ec41 0b10 	vmov	d0, r0, r1
 8011496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801149a:	45e0      	cmp	r8, ip
 801149c:	4682      	mov	sl, r0
 801149e:	4604      	mov	r4, r0
 80114a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80114a4:	dc09      	bgt.n	80114ba <__ieee754_fmod+0x6a>
 80114a6:	dbf4      	blt.n	8011492 <__ieee754_fmod+0x42>
 80114a8:	4282      	cmp	r2, r0
 80114aa:	d8f2      	bhi.n	8011492 <__ieee754_fmod+0x42>
 80114ac:	d105      	bne.n	80114ba <__ieee754_fmod+0x6a>
 80114ae:	4b69      	ldr	r3, [pc, #420]	@ (8011654 <__ieee754_fmod+0x204>)
 80114b0:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80114b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80114b8:	e7eb      	b.n	8011492 <__ieee754_fmod+0x42>
 80114ba:	4a65      	ldr	r2, [pc, #404]	@ (8011650 <__ieee754_fmod+0x200>)
 80114bc:	ea19 0f02 	tst.w	r9, r2
 80114c0:	d148      	bne.n	8011554 <__ieee754_fmod+0x104>
 80114c2:	f1b8 0f00 	cmp.w	r8, #0
 80114c6:	d13d      	bne.n	8011544 <__ieee754_fmod+0xf4>
 80114c8:	4963      	ldr	r1, [pc, #396]	@ (8011658 <__ieee754_fmod+0x208>)
 80114ca:	4653      	mov	r3, sl
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	dc36      	bgt.n	801153e <__ieee754_fmod+0xee>
 80114d0:	4216      	tst	r6, r2
 80114d2:	d14f      	bne.n	8011574 <__ieee754_fmod+0x124>
 80114d4:	f1bc 0f00 	cmp.w	ip, #0
 80114d8:	d144      	bne.n	8011564 <__ieee754_fmod+0x114>
 80114da:	4a5f      	ldr	r2, [pc, #380]	@ (8011658 <__ieee754_fmod+0x208>)
 80114dc:	463b      	mov	r3, r7
 80114de:	2b00      	cmp	r3, #0
 80114e0:	dc3d      	bgt.n	801155e <__ieee754_fmod+0x10e>
 80114e2:	485e      	ldr	r0, [pc, #376]	@ (801165c <__ieee754_fmod+0x20c>)
 80114e4:	4281      	cmp	r1, r0
 80114e6:	db4a      	blt.n	801157e <__ieee754_fmod+0x12e>
 80114e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80114ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80114f0:	485a      	ldr	r0, [pc, #360]	@ (801165c <__ieee754_fmod+0x20c>)
 80114f2:	4282      	cmp	r2, r0
 80114f4:	db57      	blt.n	80115a6 <__ieee754_fmod+0x156>
 80114f6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80114fa:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 80114fe:	1a89      	subs	r1, r1, r2
 8011500:	1b98      	subs	r0, r3, r6
 8011502:	eba4 070e 	sub.w	r7, r4, lr
 8011506:	2900      	cmp	r1, #0
 8011508:	d162      	bne.n	80115d0 <__ieee754_fmod+0x180>
 801150a:	4574      	cmp	r4, lr
 801150c:	bf38      	it	cc
 801150e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8011512:	2800      	cmp	r0, #0
 8011514:	bfa4      	itt	ge
 8011516:	463c      	movge	r4, r7
 8011518:	4603      	movge	r3, r0
 801151a:	ea53 0104 	orrs.w	r1, r3, r4
 801151e:	d0c6      	beq.n	80114ae <__ieee754_fmod+0x5e>
 8011520:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011524:	db69      	blt.n	80115fa <__ieee754_fmod+0x1aa>
 8011526:	494d      	ldr	r1, [pc, #308]	@ (801165c <__ieee754_fmod+0x20c>)
 8011528:	428a      	cmp	r2, r1
 801152a:	db6c      	blt.n	8011606 <__ieee754_fmod+0x1b6>
 801152c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011530:	432b      	orrs	r3, r5
 8011532:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8011536:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801153a:	4620      	mov	r0, r4
 801153c:	e7a9      	b.n	8011492 <__ieee754_fmod+0x42>
 801153e:	3901      	subs	r1, #1
 8011540:	005b      	lsls	r3, r3, #1
 8011542:	e7c3      	b.n	80114cc <__ieee754_fmod+0x7c>
 8011544:	4945      	ldr	r1, [pc, #276]	@ (801165c <__ieee754_fmod+0x20c>)
 8011546:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801154a:	2b00      	cmp	r3, #0
 801154c:	ddc0      	ble.n	80114d0 <__ieee754_fmod+0x80>
 801154e:	3901      	subs	r1, #1
 8011550:	005b      	lsls	r3, r3, #1
 8011552:	e7fa      	b.n	801154a <__ieee754_fmod+0xfa>
 8011554:	ea4f 5128 	mov.w	r1, r8, asr #20
 8011558:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801155c:	e7b8      	b.n	80114d0 <__ieee754_fmod+0x80>
 801155e:	3a01      	subs	r2, #1
 8011560:	005b      	lsls	r3, r3, #1
 8011562:	e7bc      	b.n	80114de <__ieee754_fmod+0x8e>
 8011564:	4a3d      	ldr	r2, [pc, #244]	@ (801165c <__ieee754_fmod+0x20c>)
 8011566:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801156a:	2b00      	cmp	r3, #0
 801156c:	ddb9      	ble.n	80114e2 <__ieee754_fmod+0x92>
 801156e:	3a01      	subs	r2, #1
 8011570:	005b      	lsls	r3, r3, #1
 8011572:	e7fa      	b.n	801156a <__ieee754_fmod+0x11a>
 8011574:	ea4f 522c 	mov.w	r2, ip, asr #20
 8011578:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801157c:	e7b1      	b.n	80114e2 <__ieee754_fmod+0x92>
 801157e:	1a40      	subs	r0, r0, r1
 8011580:	281f      	cmp	r0, #31
 8011582:	dc0a      	bgt.n	801159a <__ieee754_fmod+0x14a>
 8011584:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8011588:	fa08 f800 	lsl.w	r8, r8, r0
 801158c:	fa2a f303 	lsr.w	r3, sl, r3
 8011590:	ea43 0308 	orr.w	r3, r3, r8
 8011594:	fa0a f400 	lsl.w	r4, sl, r0
 8011598:	e7aa      	b.n	80114f0 <__ieee754_fmod+0xa0>
 801159a:	4b31      	ldr	r3, [pc, #196]	@ (8011660 <__ieee754_fmod+0x210>)
 801159c:	1a5b      	subs	r3, r3, r1
 801159e:	fa0a f303 	lsl.w	r3, sl, r3
 80115a2:	2400      	movs	r4, #0
 80115a4:	e7a4      	b.n	80114f0 <__ieee754_fmod+0xa0>
 80115a6:	1a80      	subs	r0, r0, r2
 80115a8:	281f      	cmp	r0, #31
 80115aa:	dc0a      	bgt.n	80115c2 <__ieee754_fmod+0x172>
 80115ac:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 80115b0:	fa0c fc00 	lsl.w	ip, ip, r0
 80115b4:	fa27 f606 	lsr.w	r6, r7, r6
 80115b8:	ea46 060c 	orr.w	r6, r6, ip
 80115bc:	fa07 fe00 	lsl.w	lr, r7, r0
 80115c0:	e79d      	b.n	80114fe <__ieee754_fmod+0xae>
 80115c2:	4e27      	ldr	r6, [pc, #156]	@ (8011660 <__ieee754_fmod+0x210>)
 80115c4:	1ab6      	subs	r6, r6, r2
 80115c6:	fa07 f606 	lsl.w	r6, r7, r6
 80115ca:	f04f 0e00 	mov.w	lr, #0
 80115ce:	e796      	b.n	80114fe <__ieee754_fmod+0xae>
 80115d0:	4574      	cmp	r4, lr
 80115d2:	bf38      	it	cc
 80115d4:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80115d8:	2800      	cmp	r0, #0
 80115da:	da05      	bge.n	80115e8 <__ieee754_fmod+0x198>
 80115dc:	0fe0      	lsrs	r0, r4, #31
 80115de:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80115e2:	0064      	lsls	r4, r4, #1
 80115e4:	3901      	subs	r1, #1
 80115e6:	e78b      	b.n	8011500 <__ieee754_fmod+0xb0>
 80115e8:	ea50 0307 	orrs.w	r3, r0, r7
 80115ec:	f43f af5f 	beq.w	80114ae <__ieee754_fmod+0x5e>
 80115f0:	0ffb      	lsrs	r3, r7, #31
 80115f2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80115f6:	007c      	lsls	r4, r7, #1
 80115f8:	e7f4      	b.n	80115e4 <__ieee754_fmod+0x194>
 80115fa:	0fe1      	lsrs	r1, r4, #31
 80115fc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8011600:	0064      	lsls	r4, r4, #1
 8011602:	3a01      	subs	r2, #1
 8011604:	e78c      	b.n	8011520 <__ieee754_fmod+0xd0>
 8011606:	1a89      	subs	r1, r1, r2
 8011608:	2914      	cmp	r1, #20
 801160a:	dc0a      	bgt.n	8011622 <__ieee754_fmod+0x1d2>
 801160c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8011610:	fa03 f202 	lsl.w	r2, r3, r2
 8011614:	40cc      	lsrs	r4, r1
 8011616:	4322      	orrs	r2, r4
 8011618:	410b      	asrs	r3, r1
 801161a:	ea43 0105 	orr.w	r1, r3, r5
 801161e:	4610      	mov	r0, r2
 8011620:	e737      	b.n	8011492 <__ieee754_fmod+0x42>
 8011622:	291f      	cmp	r1, #31
 8011624:	dc07      	bgt.n	8011636 <__ieee754_fmod+0x1e6>
 8011626:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 801162a:	40cc      	lsrs	r4, r1
 801162c:	fa03 f202 	lsl.w	r2, r3, r2
 8011630:	4322      	orrs	r2, r4
 8011632:	462b      	mov	r3, r5
 8011634:	e7f1      	b.n	801161a <__ieee754_fmod+0x1ca>
 8011636:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 801163a:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 801163e:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8011642:	32e2      	adds	r2, #226	@ 0xe2
 8011644:	fa43 f202 	asr.w	r2, r3, r2
 8011648:	e7f3      	b.n	8011632 <__ieee754_fmod+0x1e2>
 801164a:	bf00      	nop
 801164c:	7fefffff 	.word	0x7fefffff
 8011650:	7ff00000 	.word	0x7ff00000
 8011654:	08011b50 	.word	0x08011b50
 8011658:	fffffbed 	.word	0xfffffbed
 801165c:	fffffc02 	.word	0xfffffc02
 8011660:	fffffbe2 	.word	0xfffffbe2

08011664 <_init>:
 8011664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011666:	bf00      	nop
 8011668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801166a:	bc08      	pop	{r3}
 801166c:	469e      	mov	lr, r3
 801166e:	4770      	bx	lr

08011670 <_fini>:
 8011670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011672:	bf00      	nop
 8011674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011676:	bc08      	pop	{r3}
 8011678:	469e      	mov	lr, r3
 801167a:	4770      	bx	lr
