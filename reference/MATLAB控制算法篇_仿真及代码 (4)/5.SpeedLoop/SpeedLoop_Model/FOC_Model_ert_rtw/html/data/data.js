var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"speedloop/FOC_Model","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\Users\\Jay\\Desktop\\G4\\Simulink\\5.SpeedLoop\\SpeedLoop_Model\\FOC_Model_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 1.15\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Sat Nov 25 13:32:26 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"FOC_Model.h\"                 /* Model's header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(rtM, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model for base rate */\r\n  FOC_Model_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example \"main\" function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific.  This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  FOC_Model_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.0001 seconds (the model's base sample time) here.  The\r\n   * call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(rtM) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  /* Disable rt_OneStep here */\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"FOC_Model.c","type":"source","group":"model","path":"C:\\Users\\Jay\\Desktop\\G4\\Simulink\\5.SpeedLoop\\SpeedLoop_Model\\FOC_Model_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: FOC_Model.c\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 1.15\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Sat Nov 25 13:32:26 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"FOC_Model.h\"\r\n\r\n/* Named constants for Chart: '<S2>/Chart' */\r\n#define IN_AlignStage                  ((uint8_T)1U)\r\n#define IN_IDLE                        ((uint8_T)2U)\r\n#define IN_OpenStage                   ((uint8_T)3U)\r\n#define IN_RunStage                    ((uint8_T)4U)\r\n#define NumBitsPerChar                 8U\r\n#ifndef UCHAR_MAX\r\n#include <limits.h>\r\n#endif\r\n\r\n#if ( UCHAR_MAX != (0xFFU) ) || ( SCHAR_MAX != (0x7F) )\r\n#error Code was generated for compiler with different sized uchar/char. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( USHRT_MAX != (0xFFFFU) ) || ( SHRT_MAX != (0x7FFF) )\r\n#error Code was generated for compiler with different sized ushort/short. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( UINT_MAX != (0xFFFFFFFFU) ) || ( INT_MAX != (0x7FFFFFFF) )\r\n#error Code was generated for compiler with different sized uint/int. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( ULONG_MAX != (0xFFFFFFFFU) ) || ( LONG_MAX != (0x7FFFFFFF) )\r\n#error Code was generated for compiler with different sized ulong/long. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n/* Skipping ulong_long/long_long check: insufficient preprocessor integer range. */\r\n\r\n/* Exported block signals */\r\nreal32_T ThetaOpen;                    /* '<S2>/Merge' */\r\n\r\n/* Exported data definition */\r\n\r\n/* Definition for custom storage class: Struct */\r\nmotor_type motor = {\r\n  /* Pn */\r\n  2.0F\r\n};\r\n\r\nspd_kpki_type spd_kpki = {\r\n  /* spd_ki */\r\n  0.0144F,\r\n\r\n  /* spd_kp */\r\n  0.3389F\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\nextern real32_T rt_modf_snf(real32_T u0, real32_T u1);\r\nstatic void SVPWM(real32_T rtu_Valpha, real32_T rtu_Vbeta, real32_T rtu_v_bus,\r\n                  real32_T rty_tABC[3]);\r\nstatic void rate_scheduler(void);\r\nstatic real_T rtGetNaN(void);\r\nstatic real32_T rtGetNaNF(void);\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nstatic void rt_InitInfAndNaN(size_t realSize);\r\nstatic boolean_T rtIsInf(real_T value);\r\nstatic boolean_T rtIsInfF(real32_T value);\r\nstatic boolean_T rtIsNaN(real_T value);\r\nstatic boolean_T rtIsNaNF(real32_T value);\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordH;\r\n    uint32_T wordL;\r\n  } words;\r\n} BigEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordL;\r\n    uint32_T wordH;\r\n  } words;\r\n} LittleEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  union {\r\n    real32_T wordLreal;\r\n    uint32_T wordLuint;\r\n  } wordL;\r\n} IEEESingle;\r\n\r\nreal_T rtInf;\r\nreal_T rtMinusInf;\r\nreal_T rtNaN;\r\nreal32_T rtInfF;\r\nreal32_T rtMinusInfF;\r\nreal32_T rtNaNF;\r\nstatic real_T rtGetInf(void);\r\nstatic real32_T rtGetInfF(void);\r\nstatic real_T rtGetMinusInf(void);\r\nstatic real32_T rtGetMinusInfF(void);\r\n\r\n/*\r\n * Initialize rtNaN needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetNaN(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T nan = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    nan = rtGetNaNF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF80000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    nan = tmpVal.fltVal;\r\n  }\r\n\r\n  return nan;\r\n}\r\n\r\n/*\r\n * Initialize rtNaNF needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetNaNF(void)\r\n{\r\n  IEEESingle nanF = { { 0.0F } };\r\n\r\n  nanF.wordL.wordLuint = 0xFFC00000U;\r\n  return nanF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize the rtInf, rtMinusInf, and rtNaN needed by the\r\n * generated code. NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic void rt_InitInfAndNaN(size_t realSize)\r\n{\r\n  (void) (realSize);\r\n  rtNaN = rtGetNaN();\r\n  rtNaNF = rtGetNaNF();\r\n  rtInf = rtGetInf();\r\n  rtInfF = rtGetInfF();\r\n  rtMinusInf = rtGetMinusInf();\r\n  rtMinusInfF = rtGetMinusInfF();\r\n}\r\n\r\n/* Test if value is infinite */\r\nstatic boolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nstatic boolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\r\n}\r\n\r\n/* Test if value is not a number */\r\nstatic boolean_T rtIsNaN(real_T value)\r\n{\r\n  boolean_T result = (boolean_T) 0;\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  if (bitsPerReal == 32U) {\r\n    result = rtIsNaNF((real32_T)value);\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.fltVal = value;\r\n    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&\r\n                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\r\n                          (tmpVal.bitVal.words.wordL != 0) ));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nstatic boolean_T rtIsNaNF(real32_T value)\r\n{\r\n  IEEESingle tmp;\r\n  tmp.wordL.wordLreal = value;\r\n  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\r\n                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\r\n}\r\n\r\n/*\r\n * Initialize rtInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T inf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    inf = rtGetInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    inf = tmpVal.fltVal;\r\n  }\r\n\r\n  return inf;\r\n}\r\n\r\n/*\r\n * Initialize rtInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetInfF(void)\r\n{\r\n  IEEESingle infF;\r\n  infF.wordL.wordLuint = 0x7F800000U;\r\n  return infF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetMinusInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T minf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    minf = rtGetMinusInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    minf = tmpVal.fltVal;\r\n  }\r\n\r\n  return minf;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetMinusInfF(void)\r\n{\r\n  IEEESingle minfF;\r\n  minfF.wordL.wordLuint = 0xFF800000U;\r\n  return minfF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n *         This function updates active task flag for each subrate.\r\n *         The function is called at model base rate, hence the\r\n *         generated code self-manages all its subrates.\r\n */\r\nstatic void rate_scheduler(void)\r\n{\r\n  /* Compute which subrates run during the next base time step.  Subrates\r\n   * are an integer multiple of the base rate counter.  Therefore, the subtask\r\n   * counter is reset when it reaches its limit (zero means run).\r\n   */\r\n  (rtM->Timing.TaskCounters.TID[1])++;\r\n  if ((rtM->Timing.TaskCounters.TID[1]) > 9) {/* Sample time: [0.001s, 0.0s] */\r\n    rtM->Timing.TaskCounters.TID[1] = 0;\r\n  }\r\n}\r\n\r\n/* Output and update for atomic system: '<S2>/SVPWM' */\r\nstatic void SVPWM(real32_T rtu_Valpha, real32_T rtu_Vbeta, real32_T rtu_v_bus,\r\n                  real32_T rty_tABC[3])\r\n{\r\n  real32_T rtb_Min;\r\n  real32_T rtb_Sum1_a;\r\n  real32_T rtb_Sum_o;\r\n\r\n  /* Gain: '<S14>/Gain' */\r\n  rtb_Min = -0.5F * rtu_Valpha;\r\n\r\n  /* Gain: '<S14>/Gain1' */\r\n  rtb_Sum1_a = 0.866025388F * rtu_Vbeta;\r\n\r\n  /* Sum: '<S14>/Sum' */\r\n  rtb_Sum_o = rtb_Min + rtb_Sum1_a;\r\n\r\n  /* Sum: '<S14>/Sum1' */\r\n  rtb_Sum1_a = rtb_Min - rtb_Sum1_a;\r\n\r\n  /* Gain: '<S15>/Gain' incorporates:\r\n   *  MinMax: '<S15>/Min'\r\n   *  MinMax: '<S15>/Min1'\r\n   *  Sum: '<S15>/Sum'\r\n   */\r\n  rtb_Min = (fminf(fminf(rtu_Valpha, rtb_Sum_o), rtb_Sum1_a) + fmaxf(fmaxf\r\n              (rtu_Valpha, rtb_Sum_o), rtb_Sum1_a)) * -0.5F;\r\n\r\n  /* Sum: '<S12>/Sum' */\r\n  rty_tABC[0] = rtb_Min + rtu_Valpha;\r\n  rty_tABC[1] = rtb_Min + rtb_Sum_o;\r\n  rty_tABC[2] = rtb_Min + rtb_Sum1_a;\r\n\r\n  /* Gain: '<S12>/PWM_HalfPeriod' incorporates:\r\n   *  Constant: '<S12>/Constant'\r\n   *  Gain: '<S12>/Gain'\r\n   *  Product: '<S12>/Divide'\r\n   *  Sum: '<S12>/Sum1'\r\n   */\r\n  rty_tABC[0] = (-rty_tABC[0] / rtu_v_bus + 0.5F) * 8000.0F;\r\n  rty_tABC[1] = (-rty_tABC[1] / rtu_v_bus + 0.5F) * 8000.0F;\r\n  rty_tABC[2] = (-rty_tABC[2] / rtu_v_bus + 0.5F) * 8000.0F;\r\n}\r\n\r\nreal32_T rt_modf_snf(real32_T u0, real32_T u1)\r\n{\r\n  real32_T y;\r\n  y = u0;\r\n  if (u1 == 0.0F) {\r\n    if (u0 == 0.0F) {\r\n      y = u1;\r\n    }\r\n  } else if (rtIsNaNF(u0) || rtIsNaNF(u1) || rtIsInfF(u0)) {\r\n    y = (rtNaNF);\r\n  } else if (u0 == 0.0F) {\r\n    y = 0.0F / u1;\r\n  } else if (rtIsInfF(u1)) {\r\n    if ((u1 < 0.0F) != (u0 < 0.0F)) {\r\n      y = u1;\r\n    }\r\n  } else {\r\n    boolean_T yEq;\r\n    y = fmodf(u0, u1);\r\n    yEq = (y == 0.0F);\r\n    if ((!yEq) && (u1 > floorf(u1))) {\r\n      real32_T q;\r\n      q = fabsf(u0 / u1);\r\n      yEq = !(fabsf(q - floorf(q + 0.5F)) > FLT_EPSILON * q);\r\n    }\r\n\r\n    if (yEq) {\r\n      y = u1 * 0.0F;\r\n    } else if ((u0 < 0.0F) != (u1 < 0.0F)) {\r\n      y += u1;\r\n    }\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\n/* Model step function */\r\nvoid FOC_Model_step(void)\r\n{\r\n  real32_T Integrator;\r\n  real32_T rtb_IntegralGain;\r\n  real32_T rtb_Saturation;\r\n  real32_T rtb_SignPreIntegrator;\r\n  real32_T rtb_SignPreIntegrator_l;\r\n  real32_T rtb_SinCos;\r\n  real32_T rtb_SinCos1;\r\n  real32_T rtb_Sum;\r\n  int16_T rtb_IProdOut_d;\r\n  int16_T rtb_IProdOut_f;\r\n\r\n  /* Outputs for Atomic SubSystem: '<Root>/FOC_Model' */\r\n  if (rtM->Timing.TaskCounters.TID[1] == 0) {\r\n    uint32_T speedloop_ELAPS_T;\r\n\r\n    /* S-Function (fcgen): '<S1>/Function-Call Generator' incorporates:\r\n     *  SubSystem: '<S1>/speedloop'\r\n     */\r\n    if (rtDW.speedloop_RESET_ELAPS_T) {\r\n      speedloop_ELAPS_T = 0U;\r\n    } else {\r\n      speedloop_ELAPS_T = rtM->Timing.clockTick1 - rtDW.speedloop_PREV_T;\r\n    }\r\n\r\n    rtDW.speedloop_PREV_T = rtM->Timing.clockTick1;\r\n    rtDW.speedloop_RESET_ELAPS_T = false;\r\n\r\n    /* Sum: '<S3>/Sum2' incorporates:\r\n     *  Inport: '<Root>/SpeedFd'\r\n     *  Inport: '<Root>/SpeedRef'\r\n     */\r\n    rtb_IntegralGain = (real32_T)rtU.SpeedRef - rtU.SpeedFd;\r\n\r\n    /* DiscreteIntegrator: '<S152>/Integrator' */\r\n    if (rtDW.Integrator_SYSTEM_ENABLE != 0) {\r\n      /* DiscreteIntegrator: '<S152>/Integrator' */\r\n      Integrator = rtDW.Integrator_DSTATE_h;\r\n    } else {\r\n      /* DiscreteIntegrator: '<S152>/Integrator' */\r\n      Integrator = 0.001F * (real32_T)speedloop_ELAPS_T * rtDW.Integrator_PREV_U\r\n        + rtDW.Integrator_DSTATE_h;\r\n    }\r\n\r\n    /* End of DiscreteIntegrator: '<S152>/Integrator' */\r\n\r\n    /* Sum: '<S161>/Sum' incorporates:\r\n     *  Gain: '<S157>/Proportional Gain'\r\n     */\r\n    rtb_Sum = spd_kpki.spd_kp * rtb_IntegralGain + Integrator;\r\n\r\n    /* DeadZone: '<S145>/DeadZone' incorporates:\r\n     *  Saturate: '<S159>/Saturation'\r\n     */\r\n    if (rtb_Sum > 3.0F) {\r\n      rtb_SignPreIntegrator_l = rtb_Sum - 3.0F;\r\n\r\n      /* Saturate: '<S159>/Saturation' */\r\n      rtDW.Saturation = 3.0F;\r\n    } else {\r\n      if (rtb_Sum >= -3.0F) {\r\n        rtb_SignPreIntegrator_l = 0.0F;\r\n      } else {\r\n        rtb_SignPreIntegrator_l = rtb_Sum - -3.0F;\r\n      }\r\n\r\n      if (rtb_Sum < -3.0F) {\r\n        /* Saturate: '<S159>/Saturation' */\r\n        rtDW.Saturation = -3.0F;\r\n      } else {\r\n        /* Saturate: '<S159>/Saturation' */\r\n        rtDW.Saturation = rtb_Sum;\r\n      }\r\n    }\r\n\r\n    /* End of DeadZone: '<S145>/DeadZone' */\r\n\r\n    /* Gain: '<S149>/Integral Gain' */\r\n    rtb_IntegralGain *= spd_kpki.spd_ki;\r\n\r\n    /* Update for DiscreteIntegrator: '<S152>/Integrator' */\r\n    rtDW.Integrator_SYSTEM_ENABLE = 0U;\r\n    rtDW.Integrator_DSTATE_h = Integrator;\r\n\r\n    /* Signum: '<S143>/SignPreSat' */\r\n    if (rtb_SignPreIntegrator_l < 0.0F) {\r\n      Integrator = -1.0F;\r\n    } else if (rtb_SignPreIntegrator_l > 0.0F) {\r\n      Integrator = 1.0F;\r\n    } else if (rtb_SignPreIntegrator_l == 0.0F) {\r\n      Integrator = 0.0F;\r\n    } else {\r\n      Integrator = (rtNaNF);\r\n    }\r\n\r\n    /* End of Signum: '<S143>/SignPreSat' */\r\n\r\n    /* Signum: '<S143>/SignPreIntegrator' */\r\n    if (rtb_IntegralGain < 0.0F) {\r\n      rtb_SinCos1 = -1.0F;\r\n    } else if (rtb_IntegralGain > 0.0F) {\r\n      rtb_SinCos1 = 1.0F;\r\n    } else if (rtb_IntegralGain == 0.0F) {\r\n      rtb_SinCos1 = 0.0F;\r\n    } else {\r\n      rtb_SinCos1 = (rtNaNF);\r\n    }\r\n\r\n    /* End of Signum: '<S143>/SignPreIntegrator' */\r\n\r\n    /* Switch: '<S143>/Switch' incorporates:\r\n     *  DataTypeConversion: '<S143>/DataTypeConv1'\r\n     *  DataTypeConversion: '<S143>/DataTypeConv2'\r\n     *  Gain: '<S143>/ZeroGain'\r\n     *  Logic: '<S143>/AND3'\r\n     *  RelationalOperator: '<S143>/Equal1'\r\n     *  RelationalOperator: '<S143>/NotEqual'\r\n     */\r\n    if ((0.0F * rtb_Sum != rtb_SignPreIntegrator_l) && ((int8_T)Integrator ==\r\n         (int8_T)rtb_SinCos1)) {\r\n      /* Update for DiscreteIntegrator: '<S152>/Integrator' incorporates:\r\n       *  Constant: '<S143>/Constant1'\r\n       */\r\n      rtDW.Integrator_PREV_U = 0.0F;\r\n    } else {\r\n      /* Update for DiscreteIntegrator: '<S152>/Integrator' */\r\n      rtDW.Integrator_PREV_U = rtb_IntegralGain;\r\n    }\r\n\r\n    /* End of Switch: '<S143>/Switch' */\r\n    /* End of Outputs for S-Function (fcgen): '<S1>/Function-Call Generator' */\r\n  }\r\n\r\n  /* Outputs for Atomic SubSystem: '<S1>/currloop' */\r\n  /* Sum: '<S6>/Add1' incorporates:\r\n   *  Gain: '<S6>/Gain'\r\n   *  Gain: '<S6>/Gain1'\r\n   *  Inport: '<Root>/ia'\r\n   *  Inport: '<Root>/ib'\r\n   *  Inport: '<Root>/ic'\r\n   *  Sum: '<S6>/Add'\r\n   */\r\n  rtb_SignPreIntegrator_l = 0.666666687F * rtU.ia - (rtU.ib + rtU.ic) *\r\n    0.333333343F;\r\n\r\n  /* Chart: '<S2>/Chart' incorporates:\r\n   *  Inport: '<Root>/Motor_OnOff'\r\n   */\r\n  if (rtDW.temporalCounter_i1 < 32767U) {\r\n    rtDW.temporalCounter_i1++;\r\n  }\r\n\r\n  if (rtDW.is_active_c3_FOC_Model == 0U) {\r\n    rtDW.is_active_c3_FOC_Model = 1U;\r\n    rtDW.is_c3_FOC_Model = IN_IDLE;\r\n  } else {\r\n    switch (rtDW.is_c3_FOC_Model) {\r\n     case IN_AlignStage:\r\n      if (rtDW.temporalCounter_i1 >= 2000) {\r\n        rtDW.is_c3_FOC_Model = IN_OpenStage;\r\n        rtDW.temporalCounter_i1 = 0U;\r\n        rtDW.ZReset = 0.0;\r\n        rtDW.cnt = 0.0;\r\n      } else if (rtU.Motor_OnOff == 0.0F) {\r\n        rtDW.is_c3_FOC_Model = IN_IDLE;\r\n      } else {\r\n        rtDW.Motor_state = 2.0;\r\n      }\r\n      break;\r\n\r\n     case IN_IDLE:\r\n      if (rtU.Motor_OnOff == 1.0F) {\r\n        rtDW.is_c3_FOC_Model = IN_AlignStage;\r\n        rtDW.temporalCounter_i1 = 0U;\r\n      } else {\r\n        rtDW.Motor_state = 1.0;\r\n      }\r\n      break;\r\n\r\n     case IN_OpenStage:\r\n      if (rtU.Motor_OnOff == 0.0F) {\r\n        rtDW.is_c3_FOC_Model = IN_IDLE;\r\n      } else if (rtDW.temporalCounter_i1 >= 20000) {\r\n        rtDW.is_c3_FOC_Model = IN_RunStage;\r\n      } else {\r\n        if (rtDW.cnt == 1.0) {\r\n          rtDW.ZReset = 1.0;\r\n        }\r\n\r\n        rtDW.cnt = 1.0;\r\n        rtDW.Motor_state = 3.0;\r\n      }\r\n      break;\r\n\r\n     default:\r\n      /* case IN_RunStage: */\r\n      if (rtU.Motor_OnOff == 0.0F) {\r\n        rtDW.is_c3_FOC_Model = IN_IDLE;\r\n      } else {\r\n        rtDW.Motor_state = 4.0;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  /* End of Chart: '<S2>/Chart' */\r\n\r\n  /* SwitchCase: '<S2>/Switch Case' */\r\n  switch ((int32_T)rtDW.Motor_state) {\r\n   case 1:\r\n    /* Outputs for IfAction SubSystem: '<S2>/If Action Subsystem' incorporates:\r\n     *  ActionPort: '<S7>/Action Port'\r\n     */\r\n    /* Merge: '<S2>/Merge' incorporates:\r\n     *  Constant: '<S7>/Constant'\r\n     *  SignalConversion generated from: '<S7>/theta_fd'\r\n     */\r\n    ThetaOpen = 0.0F;\r\n\r\n    /* Merge: '<S2>/Merge1' incorporates:\r\n     *  Constant: '<S7>/Constant1'\r\n     *  SignalConversion generated from: '<S7>/iq_ref'\r\n     */\r\n    rtDW.Merge1 = 0.0F;\r\n\r\n    /* End of Outputs for SubSystem: '<S2>/If Action Subsystem' */\r\n    break;\r\n\r\n   case 2:\r\n    /* Outputs for IfAction SubSystem: '<S2>/If Action Subsystem1' incorporates:\r\n     *  ActionPort: '<S8>/Action Port'\r\n     */\r\n    /* Merge: '<S2>/Merge' incorporates:\r\n     *  Constant: '<S8>/Constant'\r\n     *  SignalConversion generated from: '<S8>/theta_fd'\r\n     */\r\n    ThetaOpen = 0.0F;\r\n\r\n    /* Merge: '<S2>/Merge1' incorporates:\r\n     *  Constant: '<S8>/Constant1'\r\n     *  SignalConversion generated from: '<S8>/iq_ref'\r\n     */\r\n    rtDW.Merge1 = 0.5F;\r\n\r\n    /* End of Outputs for SubSystem: '<S2>/If Action Subsystem1' */\r\n    break;\r\n\r\n   case 3:\r\n    /* Outputs for IfAction SubSystem: '<S2>/If Action Subsystem2' incorporates:\r\n     *  ActionPort: '<S9>/Action Port'\r\n     */\r\n    /* DiscreteIntegrator: '<S9>/Discrete-Time Integrator' */\r\n    if ((rtDW.ZReset > 0.0) && (rtDW.DiscreteTimeIntegrator_PrevRese <= 0)) {\r\n      rtDW.DiscreteTimeIntegrator_DSTATE = 0.0F;\r\n    }\r\n\r\n    rtb_IntegralGain = rtDW.DiscreteTimeIntegrator_DSTATE;\r\n\r\n    /* End of DiscreteIntegrator: '<S9>/Discrete-Time Integrator' */\r\n\r\n    /* DiscreteIntegrator: '<S9>/Discrete-Time Integrator1' */\r\n    if ((rtDW.ZReset > 0.0) && (rtDW.DiscreteTimeIntegrator1_PrevRes <= 0)) {\r\n      rtDW.DiscreteTimeIntegrator1_DSTATE = 0.0F;\r\n    }\r\n\r\n    /* Merge: '<S2>/Merge' incorporates:\r\n     *  Constant: '<S9>/Constant1'\r\n     *  DiscreteIntegrator: '<S9>/Discrete-Time Integrator1'\r\n     *  Math: '<S9>/Mod'\r\n     */\r\n    ThetaOpen = rt_modf_snf(rtDW.DiscreteTimeIntegrator1_DSTATE, 6.28318548F);\r\n\r\n    /* Merge: '<S2>/Merge1' incorporates:\r\n     *  Constant: '<S2>/Constant5'\r\n     *  Inport: '<S9>/iq_ref'\r\n     */\r\n    rtDW.Merge1 = 1.0F;\r\n\r\n    /* Update for DiscreteIntegrator: '<S9>/Discrete-Time Integrator' incorporates:\r\n     *  Gain: '<S9>/Gain'\r\n     *  Product: '<S9>/Product'\r\n     */\r\n    rtDW.DiscreteTimeIntegrator_DSTATE += motor.Pn * 83.7758F * 0.5F * 0.0001F;\r\n    if (rtDW.ZReset > 0.0) {\r\n      rtDW.DiscreteTimeIntegrator_PrevRese = 1;\r\n    } else if (rtDW.ZReset < 0.0) {\r\n      rtDW.DiscreteTimeIntegrator_PrevRese = -1;\r\n    } else if (rtDW.ZReset == 0.0) {\r\n      rtDW.DiscreteTimeIntegrator_PrevRese = 0;\r\n    } else {\r\n      rtDW.DiscreteTimeIntegrator_PrevRese = 2;\r\n    }\r\n\r\n    /* End of Update for DiscreteIntegrator: '<S9>/Discrete-Time Integrator' */\r\n\r\n    /* Update for DiscreteIntegrator: '<S9>/Discrete-Time Integrator1' */\r\n    rtDW.DiscreteTimeIntegrator1_DSTATE += 0.0001F * rtb_IntegralGain;\r\n    if (rtDW.ZReset > 0.0) {\r\n      rtDW.DiscreteTimeIntegrator1_PrevRes = 1;\r\n    } else if (rtDW.ZReset < 0.0) {\r\n      rtDW.DiscreteTimeIntegrator1_PrevRes = -1;\r\n    } else if (rtDW.ZReset == 0.0) {\r\n      rtDW.DiscreteTimeIntegrator1_PrevRes = 0;\r\n    } else {\r\n      rtDW.DiscreteTimeIntegrator1_PrevRes = 2;\r\n    }\r\n\r\n    /* End of Update for DiscreteIntegrator: '<S9>/Discrete-Time Integrator1' */\r\n    /* End of Outputs for SubSystem: '<S2>/If Action Subsystem2' */\r\n    break;\r\n\r\n   case 4:\r\n    /* Outputs for IfAction SubSystem: '<S2>/If Action Subsystem3' incorporates:\r\n     *  ActionPort: '<S10>/Action Port'\r\n     */\r\n    /* Merge: '<S2>/Merge' incorporates:\r\n     *  Inport: '<Root>/theta'\r\n     *  Inport: '<S10>/theta'\r\n     */\r\n    ThetaOpen = rtU.theta;\r\n\r\n    /* Merge: '<S2>/Merge1' incorporates:\r\n     *  Inport: '<S10>/iq_ref'\r\n     */\r\n    rtDW.Merge1 = rtDW.Saturation;\r\n\r\n    /* End of Outputs for SubSystem: '<S2>/If Action Subsystem3' */\r\n    break;\r\n  }\r\n\r\n  /* End of SwitchCase: '<S2>/Switch Case' */\r\n\r\n  /* Trigonometry: '<S2>/SinCos1' */\r\n  rtb_SinCos1 = cosf(ThetaOpen);\r\n\r\n  /* Gain: '<S6>/Gain2' incorporates:\r\n   *  Inport: '<Root>/ib'\r\n   *  Inport: '<Root>/ic'\r\n   *  Sum: '<S6>/Add2'\r\n   */\r\n  rtb_IntegralGain = (rtU.ib - rtU.ic) * 0.577350259F;\r\n\r\n  /* Trigonometry: '<S2>/SinCos' */\r\n  rtb_SinCos = sinf(ThetaOpen);\r\n\r\n  /* Sum: '<S13>/Sum1' incorporates:\r\n   *  Constant: '<S13>/Constant'\r\n   *  Product: '<S11>/Product'\r\n   *  Product: '<S11>/Product1'\r\n   *  Sum: '<S11>/Add'\r\n   */\r\n  rtb_Sum = 0.0F - (rtb_SignPreIntegrator_l * rtb_SinCos1 + rtb_IntegralGain *\r\n                    rtb_SinCos);\r\n\r\n  /* Sum: '<S60>/Sum' incorporates:\r\n   *  Constant: '<S13>/Constant3'\r\n   *  DiscreteIntegrator: '<S51>/Integrator'\r\n   *  Product: '<S56>/PProd Out'\r\n   */\r\n  Integrator = rtb_Sum * 0.26F + (real32_T)rtDW.Integrator_DSTATE_p * 0.0001F;\r\n\r\n  /* Saturate: '<S58>/Saturation' */\r\n  if (Integrator > 12.4707661F) {\r\n    rtb_Saturation = 12.4707661F;\r\n  } else if (Integrator < -12.4707661F) {\r\n    rtb_Saturation = -12.4707661F;\r\n  } else {\r\n    rtb_Saturation = Integrator;\r\n  }\r\n\r\n  /* End of Saturate: '<S58>/Saturation' */\r\n\r\n  /* Sum: '<S13>/Sum7' incorporates:\r\n   *  Product: '<S11>/Product2'\r\n   *  Product: '<S11>/Product3'\r\n   *  Sum: '<S11>/Add1'\r\n   */\r\n  rtb_IntegralGain = rtDW.Merge1 - (rtb_IntegralGain * rtb_SinCos1 -\r\n    rtb_SignPreIntegrator_l * rtb_SinCos);\r\n\r\n  /* Sum: '<S110>/Sum' incorporates:\r\n   *  Constant: '<S13>/Constant1'\r\n   *  DiscreteIntegrator: '<S101>/Integrator'\r\n   *  Product: '<S106>/PProd Out'\r\n   */\r\n  rtb_SignPreIntegrator_l = rtb_IntegralGain * 0.26F + rtDW.Integrator_DSTATE;\r\n\r\n  /* Saturate: '<S108>/Saturation' */\r\n  if (rtb_SignPreIntegrator_l > 12.4707661F) {\r\n    rtb_SignPreIntegrator = 12.4707661F;\r\n  } else if (rtb_SignPreIntegrator_l < -12.4707661F) {\r\n    rtb_SignPreIntegrator = -12.4707661F;\r\n  } else {\r\n    rtb_SignPreIntegrator = rtb_SignPreIntegrator_l;\r\n  }\r\n\r\n  /* End of Saturate: '<S108>/Saturation' */\r\n\r\n  /* Outputs for Atomic SubSystem: '<S2>/SVPWM' */\r\n  /* Sum: '<S4>/Add' incorporates:\r\n   *  Inport: '<Root>/v_bus'\r\n   *  Outport: '<Root>/tABC'\r\n   *  Product: '<S4>/Product'\r\n   *  Product: '<S4>/Product1'\r\n   *  Product: '<S4>/Product2'\r\n   *  Product: '<S4>/Product3'\r\n   *  Sum: '<S4>/Add1'\r\n   */\r\n  SVPWM(rtb_Saturation * rtb_SinCos1 - rtb_SignPreIntegrator * rtb_SinCos,\r\n        rtb_Saturation * rtb_SinCos + rtb_SignPreIntegrator * rtb_SinCos1,\r\n        rtU.v_bus, rtY.tABC);\r\n\r\n  /* End of Outputs for SubSystem: '<S2>/SVPWM' */\r\n\r\n  /* Gain: '<S42>/ZeroGain' */\r\n  rtb_SinCos1 = 0.0F * Integrator;\r\n\r\n  /* DeadZone: '<S44>/DeadZone' */\r\n  if (Integrator > 12.4707661F) {\r\n    Integrator -= 12.4707661F;\r\n  } else if (Integrator >= -12.4707661F) {\r\n    Integrator = 0.0F;\r\n  } else {\r\n    Integrator -= -12.4707661F;\r\n  }\r\n\r\n  /* End of DeadZone: '<S44>/DeadZone' */\r\n\r\n  /* Product: '<S48>/IProd Out' incorporates:\r\n   *  Constant: '<S13>/Constant4'\r\n   */\r\n  rtb_IProdOut_d = (int16_T)floorf(rtb_Sum * 35.0F);\r\n\r\n  /* Gain: '<S92>/ZeroGain' */\r\n  rtb_Sum = 0.0F * rtb_SignPreIntegrator_l;\r\n\r\n  /* DeadZone: '<S94>/DeadZone' */\r\n  if (rtb_SignPreIntegrator_l > 12.4707661F) {\r\n    rtb_SignPreIntegrator_l -= 12.4707661F;\r\n  } else if (rtb_SignPreIntegrator_l >= -12.4707661F) {\r\n    rtb_SignPreIntegrator_l = 0.0F;\r\n  } else {\r\n    rtb_SignPreIntegrator_l -= -12.4707661F;\r\n  }\r\n\r\n  /* End of DeadZone: '<S94>/DeadZone' */\r\n\r\n  /* Product: '<S98>/IProd Out' incorporates:\r\n   *  Constant: '<S13>/Constant2'\r\n   */\r\n  rtb_IntegralGain *= 35.0F;\r\n\r\n  /* Signum: '<S42>/SignPreSat' */\r\n  if (Integrator < 0.0F) {\r\n    rtb_SinCos = -1.0F;\r\n  } else if (Integrator > 0.0F) {\r\n    rtb_SinCos = 1.0F;\r\n  } else if (Integrator == 0.0F) {\r\n    rtb_SinCos = 0.0F;\r\n  } else {\r\n    rtb_SinCos = (rtNaNF);\r\n  }\r\n\r\n  /* End of Signum: '<S42>/SignPreSat' */\r\n\r\n  /* Signum: '<S42>/SignPreIntegrator' */\r\n  if (rtb_IProdOut_d < 0) {\r\n    rtb_IProdOut_f = -1;\r\n  } else {\r\n    rtb_IProdOut_f = (int16_T)(rtb_IProdOut_d > 0);\r\n  }\r\n\r\n  /* End of Signum: '<S42>/SignPreIntegrator' */\r\n\r\n  /* Switch: '<S42>/Switch' incorporates:\r\n   *  Constant: '<S42>/Constant1'\r\n   *  DataTypeConversion: '<S42>/DataTypeConv1'\r\n   *  DataTypeConversion: '<S42>/DataTypeConv2'\r\n   *  Logic: '<S42>/AND3'\r\n   *  RelationalOperator: '<S42>/Equal1'\r\n   *  RelationalOperator: '<S42>/NotEqual'\r\n   */\r\n  if ((rtb_SinCos1 != Integrator) && ((int8_T)rtb_SinCos == rtb_IProdOut_f)) {\r\n    rtb_IProdOut_d = 0;\r\n  }\r\n\r\n  /* End of Switch: '<S42>/Switch' */\r\n\r\n  /* Update for DiscreteIntegrator: '<S51>/Integrator' */\r\n  rtDW.Integrator_DSTATE_p += rtb_IProdOut_d;\r\n\r\n  /* Signum: '<S92>/SignPreSat' */\r\n  if (rtb_SignPreIntegrator_l < 0.0F) {\r\n    Integrator = -1.0F;\r\n  } else if (rtb_SignPreIntegrator_l > 0.0F) {\r\n    Integrator = 1.0F;\r\n  } else if (rtb_SignPreIntegrator_l == 0.0F) {\r\n    Integrator = 0.0F;\r\n  } else {\r\n    Integrator = (rtNaNF);\r\n  }\r\n\r\n  /* End of Signum: '<S92>/SignPreSat' */\r\n\r\n  /* Signum: '<S92>/SignPreIntegrator' */\r\n  if (rtb_IntegralGain < 0.0F) {\r\n    rtb_SinCos1 = -1.0F;\r\n  } else if (rtb_IntegralGain > 0.0F) {\r\n    rtb_SinCos1 = 1.0F;\r\n  } else if (rtb_IntegralGain == 0.0F) {\r\n    rtb_SinCos1 = 0.0F;\r\n  } else {\r\n    rtb_SinCos1 = (rtNaNF);\r\n  }\r\n\r\n  /* End of Signum: '<S92>/SignPreIntegrator' */\r\n\r\n  /* Switch: '<S92>/Switch' incorporates:\r\n   *  Constant: '<S92>/Constant1'\r\n   *  DataTypeConversion: '<S92>/DataTypeConv1'\r\n   *  DataTypeConversion: '<S92>/DataTypeConv2'\r\n   *  Logic: '<S92>/AND3'\r\n   *  RelationalOperator: '<S92>/Equal1'\r\n   *  RelationalOperator: '<S92>/NotEqual'\r\n   */\r\n  if ((rtb_Sum != rtb_SignPreIntegrator_l) && ((int8_T)Integrator == (int8_T)\r\n       rtb_SinCos1)) {\r\n    rtb_IntegralGain = 0.0F;\r\n  }\r\n\r\n  /* End of Switch: '<S92>/Switch' */\r\n\r\n  /* Update for DiscreteIntegrator: '<S101>/Integrator' */\r\n  rtDW.Integrator_DSTATE += 0.0001F * rtb_IntegralGain;\r\n\r\n  /* End of Outputs for SubSystem: '<S1>/currloop' */\r\n  /* End of Outputs for SubSystem: '<Root>/FOC_Model' */\r\n  if (rtM->Timing.TaskCounters.TID[1] == 0) {\r\n    /* Update absolute timer for sample time: [0.001s, 0.0s] */\r\n    /* The \"clockTick1\" counts the number of times the code of this task has\r\n     * been executed. The resolution of this integer timer is 0.001, which is the step size\r\n     * of the task. Size of \"clockTick1\" ensures timer will not overflow during the\r\n     * application lifespan selected.\r\n     */\r\n    rtM->Timing.clockTick1++;\r\n  }\r\n\r\n  rate_scheduler();\r\n}\r\n\r\n/* Model initialize function */\r\nvoid FOC_Model_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize non-finites */\r\n  rt_InitInfAndNaN(sizeof(real_T));\r\n\r\n  /* SystemInitialize for Atomic SubSystem: '<Root>/FOC_Model' */\r\n  /* SystemInitialize for Atomic SubSystem: '<S1>/currloop' */\r\n  /* SystemInitialize for IfAction SubSystem: '<S2>/If Action Subsystem2' */\r\n  /* InitializeConditions for DiscreteIntegrator: '<S9>/Discrete-Time Integrator' */\r\n  rtDW.DiscreteTimeIntegrator_PrevRese = 2;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S9>/Discrete-Time Integrator1' */\r\n  rtDW.DiscreteTimeIntegrator1_PrevRes = 2;\r\n\r\n  /* End of SystemInitialize for SubSystem: '<S2>/If Action Subsystem2' */\r\n  /* End of SystemInitialize for SubSystem: '<S1>/currloop' */\r\n  /* End of SystemInitialize for SubSystem: '<Root>/FOC_Model' */\r\n\r\n  /* Enable for Atomic SubSystem: '<Root>/FOC_Model' */\r\n  /* Enable for S-Function (fcgen): '<S1>/Function-Call Generator' incorporates:\r\n   *  SubSystem: '<S1>/speedloop'\r\n   */\r\n  rtDW.speedloop_RESET_ELAPS_T = true;\r\n\r\n  /* Enable for DiscreteIntegrator: '<S152>/Integrator' */\r\n  rtDW.Integrator_SYSTEM_ENABLE = 1U;\r\n\r\n  /* End of Enable for S-Function (fcgen): '<S1>/Function-Call Generator' */\r\n  /* End of Enable for SubSystem: '<Root>/FOC_Model' */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"FOC_Model.h","type":"header","group":"model","path":"C:\\Users\\Jay\\Desktop\\G4\\Simulink\\5.SpeedLoop\\SpeedLoop_Model\\FOC_Model_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: FOC_Model.h\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 1.15\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Sat Nov 25 13:32:26 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_FOC_Model_h_\r\n#define RTW_HEADER_FOC_Model_h_\r\n#include <stddef.h>\r\n#include <float.h>\r\n#include <math.h>\r\n#ifndef FOC_Model_COMMON_INCLUDES_\r\n#define FOC_Model_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* FOC_Model_COMMON_INCLUDES_ */\r\n\r\n/* Model Code Variants */\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T Motor_state;                  /* '<S2>/Chart' */\r\n  real_T ZReset;                       /* '<S2>/Chart' */\r\n  real_T cnt;                          /* '<S2>/Chart' */\r\n  real32_T Merge1;                     /* '<S2>/Merge1' */\r\n  real32_T Saturation;                 /* '<S159>/Saturation' */\r\n  real32_T Integrator_DSTATE;          /* '<S101>/Integrator' */\r\n  real32_T DiscreteTimeIntegrator_DSTATE;/* '<S9>/Discrete-Time Integrator' */\r\n  real32_T DiscreteTimeIntegrator1_DSTATE;/* '<S9>/Discrete-Time Integrator1' */\r\n  real32_T Integrator_DSTATE_h;        /* '<S152>/Integrator' */\r\n  real32_T Integrator_PREV_U;          /* '<S152>/Integrator' */\r\n  uint32_T speedloop_PREV_T;           /* '<S1>/speedloop' */\r\n  int16_T Integrator_DSTATE_p;         /* '<S51>/Integrator' */\r\n  uint16_T temporalCounter_i1;         /* '<S2>/Chart' */\r\n  int8_T DiscreteTimeIntegrator_PrevRese;/* '<S9>/Discrete-Time Integrator' */\r\n  int8_T DiscreteTimeIntegrator1_PrevRes;/* '<S9>/Discrete-Time Integrator1' */\r\n  uint8_T is_active_c3_FOC_Model;      /* '<S2>/Chart' */\r\n  uint8_T is_c3_FOC_Model;             /* '<S2>/Chart' */\r\n  uint8_T Integrator_SYSTEM_ENABLE;    /* '<S152>/Integrator' */\r\n  boolean_T speedloop_RESET_ELAPS_T;   /* '<S1>/speedloop' */\r\n} DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real32_T ia;                         /* '<Root>/ia' */\r\n  real32_T ib;                         /* '<Root>/ib' */\r\n  real32_T ic;                         /* '<Root>/ic' */\r\n  real32_T v_bus;                      /* '<Root>/v_bus' */\r\n  real32_T Motor_OnOff;                /* '<Root>/Motor_OnOff' */\r\n  real_T SpeedRef;                     /* '<Root>/SpeedRef' */\r\n  real32_T SpeedFd;                    /* '<Root>/SpeedFd' */\r\n  real32_T theta;                      /* '<Root>/theta' */\r\n} ExtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real32_T tABC[3];                    /* '<Root>/tABC' */\r\n} ExtY;\r\n\r\n/* Type definition for custom storage class: Struct */\r\ntypedef struct motor_tag {\r\n  real32_T Pn;                         /* Referenced by: '<S9>/Gain' */\r\n} motor_type;\r\n\r\ntypedef struct spd_kpki_tag {\r\n  real32_T spd_ki;                   /* Referenced by: '<S149>/Integral Gain' */\r\n  real32_T spd_kp;               /* Referenced by: '<S157>/Proportional Gain' */\r\n} spd_kpki_type;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  const char_T * volatile errorStatus;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint32_T clockTick1;\r\n    struct {\r\n      uint8_T TID[2];\r\n    } TaskCounters;\r\n  } Timing;\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/*\r\n * Exported Global Signals\r\n *\r\n * Note: Exported global signals are block signals with an exported global\r\n * storage class designation.  Code generation will declare the memory for\r\n * these signals and export their symbols.\r\n *\r\n */\r\nextern real32_T ThetaOpen;             /* '<S2>/Merge' */\r\n\r\n/* Model entry point functions */\r\nextern void FOC_Model_initialize(void);\r\nextern void FOC_Model_step(void);\r\n\r\n/* Exported data declaration */\r\n\r\n/* Declaration for custom storage class: Struct */\r\nextern motor_type motor;\r\nextern spd_kpki_type spd_kpki;\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S2>/Scope' : Unused code path elimination\r\n * Block '<S13>/Scope' : Unused code path elimination\r\n * Block '<S2>/Data Type Conversion3' : Eliminate redundant data type conversion\r\n * Block '<S2>/Data Type Conversion4' : Eliminate redundant data type conversion\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('speedloop/FOC_Model')    - opens subsystem speedloop/FOC_Model\r\n * hilite_system('speedloop/FOC_Model/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'speedloop'\r\n * '<S1>'   : 'speedloop/FOC_Model'\r\n * '<S2>'   : 'speedloop/FOC_Model/currloop'\r\n * '<S3>'   : 'speedloop/FOC_Model/speedloop'\r\n * '<S4>'   : 'speedloop/FOC_Model/currloop/AntiPark'\r\n * '<S5>'   : 'speedloop/FOC_Model/currloop/Chart'\r\n * '<S6>'   : 'speedloop/FOC_Model/currloop/Clark'\r\n * '<S7>'   : 'speedloop/FOC_Model/currloop/If Action Subsystem'\r\n * '<S8>'   : 'speedloop/FOC_Model/currloop/If Action Subsystem1'\r\n * '<S9>'   : 'speedloop/FOC_Model/currloop/If Action Subsystem2'\r\n * '<S10>'  : 'speedloop/FOC_Model/currloop/If Action Subsystem3'\r\n * '<S11>'  : 'speedloop/FOC_Model/currloop/Park'\r\n * '<S12>'  : 'speedloop/FOC_Model/currloop/SVPWM'\r\n * '<S13>'  : 'speedloop/FOC_Model/currloop/idq_Controller'\r\n * '<S14>'  : 'speedloop/FOC_Model/currloop/SVPWM/AntiClark'\r\n * '<S15>'  : 'speedloop/FOC_Model/currloop/SVPWM/ei_t'\r\n * '<S16>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1'\r\n * '<S17>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2'\r\n * '<S18>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Anti-windup'\r\n * '<S19>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/D Gain'\r\n * '<S20>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Filter'\r\n * '<S21>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Filter ICs'\r\n * '<S22>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/I Gain'\r\n * '<S23>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Ideal P Gain'\r\n * '<S24>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Ideal P Gain Fdbk'\r\n * '<S25>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Integrator'\r\n * '<S26>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Integrator ICs'\r\n * '<S27>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/N Copy'\r\n * '<S28>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/N Gain'\r\n * '<S29>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/P Copy'\r\n * '<S30>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Parallel P Gain'\r\n * '<S31>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Reset Signal'\r\n * '<S32>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Saturation'\r\n * '<S33>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Saturation Fdbk'\r\n * '<S34>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Sum'\r\n * '<S35>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Sum Fdbk'\r\n * '<S36>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Tracking Mode'\r\n * '<S37>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Tracking Mode Sum'\r\n * '<S38>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Tsamp - Integral'\r\n * '<S39>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Tsamp - Ngain'\r\n * '<S40>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/postSat Signal'\r\n * '<S41>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/preSat Signal'\r\n * '<S42>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Anti-windup/Disc. Clamping Parallel'\r\n * '<S43>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n * '<S44>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Anti-windup/Disc. Clamping Parallel/Dead Zone/Enabled'\r\n * '<S45>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/D Gain/Disabled'\r\n * '<S46>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Filter/Disabled'\r\n * '<S47>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Filter ICs/Disabled'\r\n * '<S48>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/I Gain/External Parameters'\r\n * '<S49>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Ideal P Gain/Passthrough'\r\n * '<S50>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Ideal P Gain Fdbk/Disabled'\r\n * '<S51>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Integrator/Discrete'\r\n * '<S52>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Integrator ICs/Internal IC'\r\n * '<S53>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/N Copy/Disabled wSignal Specification'\r\n * '<S54>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/N Gain/Disabled'\r\n * '<S55>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/P Copy/Disabled'\r\n * '<S56>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Parallel P Gain/External Parameters'\r\n * '<S57>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Reset Signal/Disabled'\r\n * '<S58>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Saturation/Enabled'\r\n * '<S59>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Saturation Fdbk/Disabled'\r\n * '<S60>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Sum/Sum_PI'\r\n * '<S61>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Sum Fdbk/Disabled'\r\n * '<S62>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Tracking Mode/Disabled'\r\n * '<S63>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Tracking Mode Sum/Passthrough'\r\n * '<S64>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Tsamp - Integral/Passthrough'\r\n * '<S65>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/Tsamp - Ngain/Passthrough'\r\n * '<S66>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/postSat Signal/Forward_Path'\r\n * '<S67>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller1/preSat Signal/Forward_Path'\r\n * '<S68>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Anti-windup'\r\n * '<S69>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/D Gain'\r\n * '<S70>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Filter'\r\n * '<S71>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Filter ICs'\r\n * '<S72>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/I Gain'\r\n * '<S73>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Ideal P Gain'\r\n * '<S74>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Ideal P Gain Fdbk'\r\n * '<S75>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Integrator'\r\n * '<S76>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Integrator ICs'\r\n * '<S77>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/N Copy'\r\n * '<S78>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/N Gain'\r\n * '<S79>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/P Copy'\r\n * '<S80>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Parallel P Gain'\r\n * '<S81>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Reset Signal'\r\n * '<S82>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Saturation'\r\n * '<S83>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Saturation Fdbk'\r\n * '<S84>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Sum'\r\n * '<S85>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Sum Fdbk'\r\n * '<S86>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Tracking Mode'\r\n * '<S87>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Tracking Mode Sum'\r\n * '<S88>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Tsamp - Integral'\r\n * '<S89>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Tsamp - Ngain'\r\n * '<S90>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/postSat Signal'\r\n * '<S91>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/preSat Signal'\r\n * '<S92>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Anti-windup/Disc. Clamping Parallel'\r\n * '<S93>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n * '<S94>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Anti-windup/Disc. Clamping Parallel/Dead Zone/Enabled'\r\n * '<S95>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/D Gain/Disabled'\r\n * '<S96>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Filter/Disabled'\r\n * '<S97>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Filter ICs/Disabled'\r\n * '<S98>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/I Gain/External Parameters'\r\n * '<S99>'  : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Ideal P Gain/Passthrough'\r\n * '<S100>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Ideal P Gain Fdbk/Disabled'\r\n * '<S101>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Integrator/Discrete'\r\n * '<S102>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Integrator ICs/Internal IC'\r\n * '<S103>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/N Copy/Disabled wSignal Specification'\r\n * '<S104>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/N Gain/Disabled'\r\n * '<S105>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/P Copy/Disabled'\r\n * '<S106>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Parallel P Gain/External Parameters'\r\n * '<S107>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Reset Signal/Disabled'\r\n * '<S108>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Saturation/Enabled'\r\n * '<S109>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Saturation Fdbk/Disabled'\r\n * '<S110>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Sum/Sum_PI'\r\n * '<S111>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Sum Fdbk/Disabled'\r\n * '<S112>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Tracking Mode/Disabled'\r\n * '<S113>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Tracking Mode Sum/Passthrough'\r\n * '<S114>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Tsamp - Integral/Passthrough'\r\n * '<S115>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/Tsamp - Ngain/Passthrough'\r\n * '<S116>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/postSat Signal/Forward_Path'\r\n * '<S117>' : 'speedloop/FOC_Model/currloop/idq_Controller/PID Controller2/preSat Signal/Forward_Path'\r\n * '<S118>' : 'speedloop/FOC_Model/speedloop/PID Controller3'\r\n * '<S119>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Anti-windup'\r\n * '<S120>' : 'speedloop/FOC_Model/speedloop/PID Controller3/D Gain'\r\n * '<S121>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Filter'\r\n * '<S122>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Filter ICs'\r\n * '<S123>' : 'speedloop/FOC_Model/speedloop/PID Controller3/I Gain'\r\n * '<S124>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Ideal P Gain'\r\n * '<S125>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Ideal P Gain Fdbk'\r\n * '<S126>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Integrator'\r\n * '<S127>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Integrator ICs'\r\n * '<S128>' : 'speedloop/FOC_Model/speedloop/PID Controller3/N Copy'\r\n * '<S129>' : 'speedloop/FOC_Model/speedloop/PID Controller3/N Gain'\r\n * '<S130>' : 'speedloop/FOC_Model/speedloop/PID Controller3/P Copy'\r\n * '<S131>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Parallel P Gain'\r\n * '<S132>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Reset Signal'\r\n * '<S133>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Saturation'\r\n * '<S134>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Saturation Fdbk'\r\n * '<S135>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Sum'\r\n * '<S136>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Sum Fdbk'\r\n * '<S137>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Tracking Mode'\r\n * '<S138>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Tracking Mode Sum'\r\n * '<S139>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Tsamp - Integral'\r\n * '<S140>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Tsamp - Ngain'\r\n * '<S141>' : 'speedloop/FOC_Model/speedloop/PID Controller3/postSat Signal'\r\n * '<S142>' : 'speedloop/FOC_Model/speedloop/PID Controller3/preSat Signal'\r\n * '<S143>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Anti-windup/Disc. Clamping Parallel'\r\n * '<S144>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n * '<S145>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Anti-windup/Disc. Clamping Parallel/Dead Zone/Enabled'\r\n * '<S146>' : 'speedloop/FOC_Model/speedloop/PID Controller3/D Gain/Disabled'\r\n * '<S147>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Filter/Disabled'\r\n * '<S148>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Filter ICs/Disabled'\r\n * '<S149>' : 'speedloop/FOC_Model/speedloop/PID Controller3/I Gain/Internal Parameters'\r\n * '<S150>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Ideal P Gain/Passthrough'\r\n * '<S151>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Ideal P Gain Fdbk/Disabled'\r\n * '<S152>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Integrator/Discrete'\r\n * '<S153>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Integrator ICs/Internal IC'\r\n * '<S154>' : 'speedloop/FOC_Model/speedloop/PID Controller3/N Copy/Disabled wSignal Specification'\r\n * '<S155>' : 'speedloop/FOC_Model/speedloop/PID Controller3/N Gain/Disabled'\r\n * '<S156>' : 'speedloop/FOC_Model/speedloop/PID Controller3/P Copy/Disabled'\r\n * '<S157>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Parallel P Gain/Internal Parameters'\r\n * '<S158>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Reset Signal/Disabled'\r\n * '<S159>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Saturation/Enabled'\r\n * '<S160>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Saturation Fdbk/Disabled'\r\n * '<S161>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Sum/Sum_PI'\r\n * '<S162>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Sum Fdbk/Disabled'\r\n * '<S163>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Tracking Mode/Disabled'\r\n * '<S164>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Tracking Mode Sum/Passthrough'\r\n * '<S165>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Tsamp - Integral/Passthrough'\r\n * '<S166>' : 'speedloop/FOC_Model/speedloop/PID Controller3/Tsamp - Ngain/Passthrough'\r\n * '<S167>' : 'speedloop/FOC_Model/speedloop/PID Controller3/postSat Signal/Forward_Path'\r\n * '<S168>' : 'speedloop/FOC_Model/speedloop/PID Controller3/preSat Signal/Forward_Path'\r\n */\r\n#endif                                 /* RTW_HEADER_FOC_Model_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\Jay\\Desktop\\G4\\Simulink\\5.SpeedLoop\\SpeedLoop_Model\\FOC_Model_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 1.15\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Sat Nov 25 13:32:26 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};