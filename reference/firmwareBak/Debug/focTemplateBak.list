
focTemplateBak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be74  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800c04c  0800c04c  0000d04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0a4  0800c0a4  0000e0a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0a4  0800c0a4  0000d0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0ac  0800c0ac  0000e0a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0ac  0800c0ac  0000d0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c0b0  0800c0b0  0000d0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  0800c0b4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  200000a8  0800c15c  0000e0a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  0800c15c  0000e630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025c10  00000000  00000000  0000e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005245  00000000  00000000  00033ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e40  00000000  00000000  00038f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000172b  00000000  00000000  0003ad70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262f6  00000000  00000000  0003c49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028e96  00000000  00000000  00062791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec72d  00000000  00000000  0008b627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177d54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fc8  00000000  00000000  00177d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0017fd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a8 	.word	0x200000a8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c034 	.word	0x0800c034

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000ac 	.word	0x200000ac
 8000214:	0800c034 	.word	0x0800c034

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b09a      	sub	sp, #104	@ 0x68
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d8a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d96:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000d9a:	2220      	movs	r2, #32
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f00b f90e 	bl	800bfc0 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000da4:	463b      	mov	r3, r7
 8000da6:	223c      	movs	r2, #60	@ 0x3c
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f00b f908 	bl	800bfc0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000db0:	4b4d      	ldr	r3, [pc, #308]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000db2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000db6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000db8:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000dba:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000dbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc0:	4b49      	ldr	r3, [pc, #292]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc6:	4b48      	ldr	r3, [pc, #288]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000dcc:	4b46      	ldr	r3, [pc, #280]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dd2:	4b45      	ldr	r3, [pc, #276]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd8:	4b43      	ldr	r3, [pc, #268]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000dda:	2204      	movs	r2, #4
 8000ddc:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dde:	4b42      	ldr	r3, [pc, #264]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de4:	4b40      	ldr	r3, [pc, #256]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000dea:	4b3f      	ldr	r3, [pc, #252]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000df0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e04:	4b38      	ldr	r3, [pc, #224]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e0c:	4b36      	ldr	r3, [pc, #216]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e12:	4b35      	ldr	r3, [pc, #212]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e1a:	4833      	ldr	r0, [pc, #204]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000e1c:	f001 fd62 	bl	80028e4 <HAL_ADC_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e26:	f000 fd06 	bl	8001836 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e2e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e32:	4619      	mov	r1, r3
 8000e34:	482c      	ldr	r0, [pc, #176]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000e36:	f003 fe8b 	bl	8004b50 <HAL_ADCEx_MultiModeConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000e40:	f000 fcf9 	bl	8001836 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e44:	4b29      	ldr	r3, [pc, #164]	@ (8000eec <MX_ADC1_Init+0x168>)
 8000e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e48:	2306      	movs	r3, #6
 8000e4a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e50:	237f      	movs	r3, #127	@ 0x7f
 8000e52:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e54:	2304      	movs	r3, #4
 8000e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e60:	4619      	mov	r1, r3
 8000e62:	4821      	ldr	r0, [pc, #132]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000e64:	f002 f8fa 	bl	800305c <HAL_ADC_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000e6e:	f000 fce2 	bl	8001836 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <MX_ADC1_Init+0x16c>)
 8000e74:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e76:	2309      	movs	r3, #9
 8000e78:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e7e:	237f      	movs	r3, #127	@ 0x7f
 8000e80:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e82:	2304      	movs	r3, #4
 8000e84:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000ea0:	2384      	movs	r3, #132	@ 0x84
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000ea4:	2380      	movs	r3, #128	@ 0x80
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000eb4:	f003 f96c 	bl	8004190 <HAL_ADCEx_InjectedConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8000ebe:	f000 fcba 	bl	8001836 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <MX_ADC1_Init+0x170>)
 8000ec4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000ec6:	f240 130f 	movw	r3, #271	@ 0x10f
 8000eca:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <MX_ADC1_Init+0x164>)
 8000ed2:	f003 f95d 	bl	8004190 <HAL_ADCEx_InjectedConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8000edc:	f000 fcab 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	3768      	adds	r7, #104	@ 0x68
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200000c4 	.word	0x200000c4
 8000eec:	2e300800 	.word	0x2e300800
 8000ef0:	0c900008 	.word	0x0c900008
 8000ef4:	32601000 	.word	0x32601000

08000ef8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b098      	sub	sp, #96	@ 0x60
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000efe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f02:	223c      	movs	r2, #60	@ 0x3c
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f00b f85a 	bl	800bfc0 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2220      	movs	r2, #32
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f00b f854 	bl	800bfc0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f18:	4b3f      	ldr	r3, [pc, #252]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f1a:	4a40      	ldr	r2, [pc, #256]	@ (800101c <MX_ADC2_Init+0x124>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000f1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f20:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f24:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f26:	4b3c      	ldr	r3, [pc, #240]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000f32:	4b39      	ldr	r3, [pc, #228]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f38:	4b37      	ldr	r3, [pc, #220]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3e:	4b36      	ldr	r3, [pc, #216]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f40:	2204      	movs	r2, #4
 8000f42:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f44:	4b34      	ldr	r3, [pc, #208]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f4a:	4b33      	ldr	r3, [pc, #204]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000f50:	4b31      	ldr	r3, [pc, #196]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f56:	4b30      	ldr	r3, [pc, #192]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f64:	4b2c      	ldr	r3, [pc, #176]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f72:	4b29      	ldr	r3, [pc, #164]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000f78:	4b27      	ldr	r3, [pc, #156]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f80:	4825      	ldr	r0, [pc, #148]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000f82:	f001 fcaf 	bl	80028e4 <HAL_ADC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC2_Init+0x98>
  {
    Error_Handler();
 8000f8c:	f000 fc53 	bl	8001836 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f90:	4b23      	ldr	r3, [pc, #140]	@ (8001020 <MX_ADC2_Init+0x128>)
 8000f92:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f94:	2309      	movs	r3, #9
 8000f96:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f9c:	237f      	movs	r3, #127	@ 0x7f
 8000f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigInjected.InjectedOffset = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000fbe:	2384      	movs	r3, #132	@ 0x84
 8000fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000fc2:	2380      	movs	r3, #128	@ 0x80
 8000fc4:	653b      	str	r3, [r7, #80]	@ 0x50
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000fcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4811      	ldr	r0, [pc, #68]	@ (8001018 <MX_ADC2_Init+0x120>)
 8000fd4:	f003 f8dc 	bl	8004190 <HAL_ADCEx_InjectedConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 8000fde:	f000 fc2a 	bl	8001836 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <MX_ADC2_Init+0x12c>)
 8000fe4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe6:	2306      	movs	r3, #6
 8000fe8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fee:	237f      	movs	r3, #127	@ 0x7f
 8000ff0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	@ (8001018 <MX_ADC2_Init+0x120>)
 8001000:	f002 f82c 	bl	800305c <HAL_ADC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC2_Init+0x116>
  {
    Error_Handler();
 800100a:	f000 fc14 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	3760      	adds	r7, #96	@ 0x60
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000130 	.word	0x20000130
 800101c:	50000100 	.word	0x50000100
 8001020:	0c900008 	.word	0x0c900008
 8001024:	04300002 	.word	0x04300002

08001028 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b09e      	sub	sp, #120	@ 0x78
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001040:	f107 0320 	add.w	r3, r7, #32
 8001044:	2244      	movs	r2, #68	@ 0x44
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f00a ffb9 	bl	800bfc0 <memset>
  if(adcHandle->Instance==ADC1)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001056:	d15f      	bne.n	8001118 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001058:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800105c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800105e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001062:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001064:	f107 0320 	add.w	r3, r7, #32
 8001068:	4618      	mov	r0, r3
 800106a:	f006 fbdb 	bl	8007824 <HAL_RCCEx_PeriphCLKConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001074:	f000 fbdf 	bl	8001836 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001078:	4b4f      	ldr	r3, [pc, #316]	@ (80011b8 <HAL_ADC_MspInit+0x190>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	4a4e      	ldr	r2, [pc, #312]	@ (80011b8 <HAL_ADC_MspInit+0x190>)
 8001080:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001082:	4b4d      	ldr	r3, [pc, #308]	@ (80011b8 <HAL_ADC_MspInit+0x190>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d10b      	bne.n	80010a2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800108a:	4b4c      	ldr	r3, [pc, #304]	@ (80011bc <HAL_ADC_MspInit+0x194>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	4a4b      	ldr	r2, [pc, #300]	@ (80011bc <HAL_ADC_MspInit+0x194>)
 8001090:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001096:	4b49      	ldr	r3, [pc, #292]	@ (80011bc <HAL_ADC_MspInit+0x194>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	4b46      	ldr	r3, [pc, #280]	@ (80011bc <HAL_ADC_MspInit+0x194>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	4a45      	ldr	r2, [pc, #276]	@ (80011bc <HAL_ADC_MspInit+0x194>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ae:	4b43      	ldr	r3, [pc, #268]	@ (80011bc <HAL_ADC_MspInit+0x194>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b40      	ldr	r3, [pc, #256]	@ (80011bc <HAL_ADC_MspInit+0x194>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	4a3f      	ldr	r2, [pc, #252]	@ (80011bc <HAL_ADC_MspInit+0x194>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c6:	4b3d      	ldr	r3, [pc, #244]	@ (80011bc <HAL_ADC_MspInit+0x194>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010d2:	2304      	movs	r3, #4
 80010d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d6:	2303      	movs	r3, #3
 80010d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e8:	f005 fb06 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 80010ec:	f241 0302 	movw	r3, #4098	@ 0x1002
 80010f0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f2:	2303      	movs	r3, #3
 80010f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010fe:	4619      	mov	r1, r3
 8001100:	482f      	ldr	r0, [pc, #188]	@ (80011c0 <HAL_ADC_MspInit+0x198>)
 8001102:	f005 faf9 	bl	80066f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	2012      	movs	r0, #18
 800110c:	f004 f8c7 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001110:	2012      	movs	r0, #18
 8001112:	f004 f8de 	bl	80052d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001116:	e04a      	b.n	80011ae <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a29      	ldr	r2, [pc, #164]	@ (80011c4 <HAL_ADC_MspInit+0x19c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d145      	bne.n	80011ae <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001126:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001128:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800112c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	4618      	mov	r0, r3
 8001134:	f006 fb76 	bl	8007824 <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 800113e:	f000 fb7a 	bl	8001836 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001142:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <HAL_ADC_MspInit+0x190>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	4a1b      	ldr	r2, [pc, #108]	@ (80011b8 <HAL_ADC_MspInit+0x190>)
 800114a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800114c:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <HAL_ADC_MspInit+0x190>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d10b      	bne.n	800116c <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001154:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <HAL_ADC_MspInit+0x194>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001158:	4a18      	ldr	r2, [pc, #96]	@ (80011bc <HAL_ADC_MspInit+0x194>)
 800115a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800115e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001160:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <HAL_ADC_MspInit+0x194>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <HAL_ADC_MspInit+0x194>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001170:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <HAL_ADC_MspInit+0x194>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001178:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <HAL_ADC_MspInit+0x194>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8001184:	2341      	movs	r3, #65	@ 0x41
 8001186:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001188:	2303      	movs	r3, #3
 800118a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001194:	4619      	mov	r1, r3
 8001196:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119a:	f005 faad 	bl	80066f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2012      	movs	r0, #18
 80011a4:	f004 f87b 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011a8:	2012      	movs	r0, #18
 80011aa:	f004 f892 	bl	80052d2 <HAL_NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3778      	adds	r7, #120	@ 0x78
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000019c 	.word	0x2000019c
 80011bc:	40021000 	.word	0x40021000
 80011c0:	48000400 	.word	0x48000400
 80011c4:	50000100 	.word	0x50000100

080011c8 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_COMP1_Init+0x44>)
 80011ce:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <MX_COMP1_Init+0x48>)
 80011d0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_COMP1_Init+0x44>)
 80011d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d8:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_COMP1_Init+0x44>)
 80011dc:	2240      	movs	r2, #64	@ 0x40
 80011de:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <MX_COMP1_Init+0x44>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_COMP1_Init+0x44>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80011ec:	4b07      	ldr	r3, [pc, #28]	@ (800120c <MX_COMP1_Init+0x44>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_COMP1_Init+0x44>)
 80011f4:	2211      	movs	r2, #17
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	@ (800120c <MX_COMP1_Init+0x44>)
 80011fa:	f003 fe0b 	bl	8004e14 <HAL_COMP_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8001204:	f000 fb17 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200001a0 	.word	0x200001a0
 8001210:	40010200 	.word	0x40010200

08001214 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <HAL_COMP_MspInit+0x6c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d11f      	bne.n	8001276 <HAL_COMP_MspInit+0x62>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <HAL_COMP_MspInit+0x70>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <HAL_COMP_MspInit+0x70>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <HAL_COMP_MspInit+0x70>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800124e:	2302      	movs	r3, #2
 8001250:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001252:	2303      	movs	r3, #3
 8001254:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	4619      	mov	r1, r3
 8001260:	4809      	ldr	r0, [pc, #36]	@ (8001288 <HAL_COMP_MspInit+0x74>)
 8001262:	f005 fa49 	bl	80066f8 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	2040      	movs	r0, #64	@ 0x40
 800126c:	f004 f817 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8001270:	2040      	movs	r0, #64	@ 0x40
 8001272:	f004 f82e 	bl	80052d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001276:	bf00      	nop
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40010200 	.word	0x40010200
 8001284:	40021000 	.word	0x40021000
 8001288:	48000400 	.word	0x48000400

0800128c <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac3;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	@ 0x30
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001292:	463b      	mov	r3, r7
 8001294:	2230      	movs	r2, #48	@ 0x30
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f00a fe91 	bl	800bfc0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800129e:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <MX_DAC1_Init+0x6c>)
 80012a0:	4a16      	ldr	r2, [pc, #88]	@ (80012fc <MX_DAC1_Init+0x70>)
 80012a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012a4:	4814      	ldr	r0, [pc, #80]	@ (80012f8 <MX_DAC1_Init+0x6c>)
 80012a6:	f004 f82e 	bl	8005306 <HAL_DAC_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012b0:	f000 fac1 	bl	8001836 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80012b4:	2302      	movs	r3, #2
 80012b6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	@ (80012f8 <MX_DAC1_Init+0x6c>)
 80012e0:	f004 f8ce 	bl	8005480 <HAL_DAC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80012ea:	f000 faa4 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3730      	adds	r7, #48	@ 0x30
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200001c4 	.word	0x200001c4
 80012fc:	50000800 	.word	0x50000800

08001300 <MX_DAC3_Init>:
/* DAC3 init function */
void MX_DAC3_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	@ 0x30
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001306:	463b      	mov	r3, r7
 8001308:	2230      	movs	r2, #48	@ 0x30
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f00a fe57 	bl	800bfc0 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8001312:	4b16      	ldr	r3, [pc, #88]	@ (800136c <MX_DAC3_Init+0x6c>)
 8001314:	4a16      	ldr	r2, [pc, #88]	@ (8001370 <MX_DAC3_Init+0x70>)
 8001316:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001318:	4814      	ldr	r0, [pc, #80]	@ (800136c <MX_DAC3_Init+0x6c>)
 800131a:	f003 fff4 	bl	8005306 <HAL_DAC_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001324:	f000 fa87 	bl	8001836 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001328:	2302      	movs	r3, #2
 800132a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001340:	2302      	movs	r3, #2
 8001342:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001344:	2302      	movs	r3, #2
 8001346:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	@ (800136c <MX_DAC3_Init+0x6c>)
 8001354:	f004 f894 	bl	8005480 <HAL_DAC_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800135e:	f000 fa6a 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	3730      	adds	r7, #48	@ 0x30
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001d8 	.word	0x200001d8
 8001370:	50001000 	.word	0x50001000

08001374 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a1e      	ldr	r2, [pc, #120]	@ (800140c <HAL_DAC_MspInit+0x98>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d125      	bne.n	80013e2 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001396:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <HAL_DAC_MspInit+0x9c>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	4a1d      	ldr	r2, [pc, #116]	@ (8001410 <HAL_DAC_MspInit+0x9c>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <HAL_DAC_MspInit+0x9c>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <HAL_DAC_MspInit+0x9c>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	4a17      	ldr	r2, [pc, #92]	@ (8001410 <HAL_DAC_MspInit+0x9c>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <HAL_DAC_MspInit+0x9c>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013c6:	2310      	movs	r3, #16
 80013c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ca:	2303      	movs	r3, #3
 80013cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013dc:	f005 f98c 	bl	80066f8 <HAL_GPIO_Init>
    __HAL_RCC_DAC3_CLK_ENABLE();
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 80013e0:	e010      	b.n	8001404 <HAL_DAC_MspInit+0x90>
  else if(dacHandle->Instance==DAC3)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001414 <HAL_DAC_MspInit+0xa0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d10b      	bne.n	8001404 <HAL_DAC_MspInit+0x90>
    __HAL_RCC_DAC3_CLK_ENABLE();
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <HAL_DAC_MspInit+0x9c>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	4a07      	ldr	r2, [pc, #28]	@ (8001410 <HAL_DAC_MspInit+0x9c>)
 80013f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <HAL_DAC_MspInit+0x9c>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	@ 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	50000800 	.word	0x50000800
 8001410:	40021000 	.word	0x40021000
 8001414:	50001000 	.word	0x50001000

08001418 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800141e:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <MX_DMA_Init+0x50>)
 8001420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001422:	4a11      	ldr	r2, [pc, #68]	@ (8001468 <MX_DMA_Init+0x50>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	6493      	str	r3, [r2, #72]	@ 0x48
 800142a:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <MX_DMA_Init+0x50>)
 800142c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001436:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <MX_DMA_Init+0x50>)
 8001438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800143a:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <MX_DMA_Init+0x50>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6493      	str	r3, [r2, #72]	@ 0x48
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <MX_DMA_Init+0x50>)
 8001444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	200b      	movs	r0, #11
 8001454:	f003 ff23 	bl	800529e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001458:	200b      	movs	r0, #11
 800145a:	f003 ff3a 	bl	80052d2 <HAL_NVIC_EnableIRQ>

}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000

0800146c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001470:	4b1f      	ldr	r3, [pc, #124]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 8001472:	4a20      	ldr	r2, [pc, #128]	@ (80014f4 <MX_FDCAN1_Init+0x88>)
 8001474:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001476:	4b1e      	ldr	r3, [pc, #120]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 8001478:	2200      	movs	r2, #0
 800147a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800147c:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001482:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001488:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 800148a:	2200      	movs	r2, #0
 800148c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800148e:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 8001490:	2200      	movs	r2, #0
 8001492:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001494:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 8001496:	2200      	movs	r2, #0
 8001498:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 800149c:	2214      	movs	r2, #20
 800149e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80014a0:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 80014a6:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 80014a8:	220a      	movs	r2, #10
 80014aa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 80014ac:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 80014ae:	2205      	movs	r2, #5
 80014b0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 80014b2:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 80014b4:	2214      	movs	r2, #20
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80014b8:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 80014be:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 80014c0:	220a      	movs	r2, #10
 80014c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 80014c6:	2205      	movs	r2, #5
 80014c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 80014d8:	2200      	movs	r2, #0
 80014da:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <MX_FDCAN1_Init+0x84>)
 80014de:	f004 fcb9 	bl	8005e54 <HAL_FDCAN_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80014e8:	f000 f9a5 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200001ec 	.word	0x200001ec
 80014f4:	40006400 	.word	0x40006400

080014f8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b09a      	sub	sp, #104	@ 0x68
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	2244      	movs	r2, #68	@ 0x44
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f00a fd51 	bl	800bfc0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a24      	ldr	r2, [pc, #144]	@ (80015b4 <HAL_FDCAN_MspInit+0xbc>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d141      	bne.n	80015ac <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001528:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800152c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800152e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001532:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4618      	mov	r0, r3
 800153a:	f006 f973 	bl	8007824 <HAL_RCCEx_PeriphCLKConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001544:	f000 f977 	bl	8001836 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001548:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <HAL_FDCAN_MspInit+0xc0>)
 800154a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154c:	4a1a      	ldr	r2, [pc, #104]	@ (80015b8 <HAL_FDCAN_MspInit+0xc0>)
 800154e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001552:	6593      	str	r3, [r2, #88]	@ 0x58
 8001554:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <HAL_FDCAN_MspInit+0xc0>)
 8001556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <HAL_FDCAN_MspInit+0xc0>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001564:	4a14      	ldr	r2, [pc, #80]	@ (80015b8 <HAL_FDCAN_MspInit+0xc0>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_FDCAN_MspInit+0xc0>)
 800156e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001578:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800157c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800158a:	2309      	movs	r3, #9
 800158c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001592:	4619      	mov	r1, r3
 8001594:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001598:	f005 f8ae 	bl	80066f8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2100      	movs	r1, #0
 80015a0:	2015      	movs	r0, #21
 80015a2:	f003 fe7c 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80015a6:	2015      	movs	r0, #21
 80015a8:	f003 fe93 	bl	80052d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80015ac:	bf00      	nop
 80015ae:	3768      	adds	r7, #104	@ 0x68
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40006400 	.word	0x40006400
 80015b8:	40021000 	.word	0x40021000

080015bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	@ 0x28
 80015c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	4b2e      	ldr	r3, [pc, #184]	@ (800168c <MX_GPIO_Init+0xd0>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	4a2d      	ldr	r2, [pc, #180]	@ (800168c <MX_GPIO_Init+0xd0>)
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015de:	4b2b      	ldr	r3, [pc, #172]	@ (800168c <MX_GPIO_Init+0xd0>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ea:	4b28      	ldr	r3, [pc, #160]	@ (800168c <MX_GPIO_Init+0xd0>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	4a27      	ldr	r2, [pc, #156]	@ (800168c <MX_GPIO_Init+0xd0>)
 80015f0:	f043 0320 	orr.w	r3, r3, #32
 80015f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f6:	4b25      	ldr	r3, [pc, #148]	@ (800168c <MX_GPIO_Init+0xd0>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	f003 0320 	and.w	r3, r3, #32
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b22      	ldr	r3, [pc, #136]	@ (800168c <MX_GPIO_Init+0xd0>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	4a21      	ldr	r2, [pc, #132]	@ (800168c <MX_GPIO_Init+0xd0>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160e:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <MX_GPIO_Init+0xd0>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <MX_GPIO_Init+0xd0>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	4a1b      	ldr	r2, [pc, #108]	@ (800168c <MX_GPIO_Init+0xd0>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <MX_GPIO_Init+0xd0>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	2150      	movs	r1, #80	@ 0x50
 8001636:	4816      	ldr	r0, [pc, #88]	@ (8001690 <MX_GPIO_Init+0xd4>)
 8001638:	f005 f9e0 	bl	80069fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 800163c:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001642:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	480f      	ldr	r0, [pc, #60]	@ (8001690 <MX_GPIO_Init+0xd4>)
 8001654:	f005 f850 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001658:	2350      	movs	r3, #80	@ 0x50
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4808      	ldr	r0, [pc, #32]	@ (8001690 <MX_GPIO_Init+0xd4>)
 8001670:	f005 f842 	bl	80066f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2028      	movs	r0, #40	@ 0x28
 800167a:	f003 fe10 	bl	800529e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800167e:	2028      	movs	r0, #40	@ 0x28
 8001680:	f003 fe27 	bl	80052d2 <HAL_NVIC_EnableIRQ>

}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	@ 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40021000 	.word	0x40021000
 8001690:	48000800 	.word	0x48000800

08001694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001698:	f000 fe61 	bl	800235e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169c:	f000 f882 	bl	80017a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a0:	f7ff ff8c 	bl	80015bc <MX_GPIO_Init>
  MX_DMA_Init();
 80016a4:	f7ff feb8 	bl	8001418 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80016a8:	f000 fd56 	bl	8002158 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80016ac:	f7ff fb6a 	bl	8000d84 <MX_ADC1_Init>
  MX_ADC2_Init();
 80016b0:	f7ff fc22 	bl	8000ef8 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 80016b4:	f000 f8c6 	bl	8001844 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 80016b8:	f000 f8ec 	bl	8001894 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 80016bc:	f000 f912 	bl	80018e4 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 80016c0:	f000 fb0e 	bl	8001ce0 <MX_TIM1_Init>
  MX_COMP1_Init();
 80016c4:	f7ff fd80 	bl	80011c8 <MX_COMP1_Init>
  MX_DAC1_Init();
 80016c8:	f7ff fde0 	bl	800128c <MX_DAC1_Init>
  MX_DAC3_Init();
 80016cc:	f7ff fe18 	bl	8001300 <MX_DAC3_Init>
  MX_FDCAN1_Init();
 80016d0:	f7ff fecc 	bl	800146c <MX_FDCAN1_Init>
  MX_TIM4_Init();
 80016d4:	f000 fbf8 	bl	8001ec8 <MX_TIM4_Init>
  MX_SPI1_Init();
 80016d8:	f000 f9a2 	bl	8001a20 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_OPAMP_Start(&hopamp1);
 80016dc:	4826      	ldr	r0, [pc, #152]	@ (8001778 <main+0xe4>)
 80016de:	f005 fa8d 	bl	8006bfc <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 80016e2:	4826      	ldr	r0, [pc, #152]	@ (800177c <main+0xe8>)
 80016e4:	f005 fa8a 	bl	8006bfc <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 80016e8:	4825      	ldr	r0, [pc, #148]	@ (8001780 <main+0xec>)
 80016ea:	f005 fa87 	bl	8006bfc <HAL_OPAMP_Start>
  // HAL_UART_Receive_IT(&huart3, (uint8_t *)&aRxBuffer, 1);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80016ee:	217f      	movs	r1, #127	@ 0x7f
 80016f0:	4824      	ldr	r0, [pc, #144]	@ (8001784 <main+0xf0>)
 80016f2:	f002 fb2d 	bl	8003d50 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80016f6:	217f      	movs	r1, #127	@ 0x7f
 80016f8:	4823      	ldr	r0, [pc, #140]	@ (8001788 <main+0xf4>)
 80016fa:	f002 fb29 	bl	8003d50 <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <main+0xf0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2220      	movs	r2, #32
 8001704:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 8001706:	4b1f      	ldr	r3, [pc, #124]	@ (8001784 <main+0xf0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2204      	movs	r2, #4
 800170c:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <main+0xf4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2220      	movs	r2, #32
 8001714:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001716:	481b      	ldr	r0, [pc, #108]	@ (8001784 <main+0xf0>)
 8001718:	f002 fc2c 	bl	8003f74 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 800171c:	481a      	ldr	r0, [pc, #104]	@ (8001788 <main+0xf4>)
 800171e:	f002 fb79 	bl	8003e14 <HAL_ADCEx_InjectedStart>
  TIM1->ARR = 8000 - 1;
 8001722:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <main+0xf8>)
 8001724:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001728:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->CCR4 = 8000 - 2;
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <main+0xf8>)
 800172c:	f641 723e 	movw	r2, #7998	@ 0x1f3e
 8001730:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_Base_Start(&htim1);
 8001732:	4817      	ldr	r0, [pc, #92]	@ (8001790 <main+0xfc>)
 8001734:	f006 fb68 	bl	8007e08 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001738:	210c      	movs	r1, #12
 800173a:	4815      	ldr	r0, [pc, #84]	@ (8001790 <main+0xfc>)
 800173c:	f006 fc28 	bl	8007f90 <HAL_TIM_PWM_Start>
  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 3000);
 8001740:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001744:	2200      	movs	r2, #0
 8001746:	2100      	movs	r1, #0
 8001748:	4812      	ldr	r0, [pc, #72]	@ (8001794 <main+0x100>)
 800174a:	f003 fe6b 	bl	8005424 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
 800174e:	2100      	movs	r1, #0
 8001750:	4810      	ldr	r0, [pc, #64]	@ (8001794 <main+0x100>)
 8001752:	f003 fdfb 	bl	800534c <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001756:	2100      	movs	r1, #0
 8001758:	480f      	ldr	r0, [pc, #60]	@ (8001798 <main+0x104>)
 800175a:	f003 fdf7 	bl	800534c <HAL_DAC_Start>
  HAL_COMP_Start(&hcomp1);
 800175e:	480f      	ldr	r0, [pc, #60]	@ (800179c <main+0x108>)
 8001760:	f003 fc34 	bl	8004fcc <HAL_COMP_Start>
  HAL_TIMEx_HallSensor_Start_IT(&htim4);
 8001764:	480e      	ldr	r0, [pc, #56]	@ (80017a0 <main+0x10c>)
 8001766:	f007 fea3 	bl	80094b0 <HAL_TIMEx_HallSensor_Start_IT>
  FDCAN_Config();
 800176a:	f00a fb3d 	bl	800bde8 <FDCAN_Config>
  appInit();
 800176e:	f009 fddb 	bl	800b328 <appInit>
    //    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
    //    HAL_Delay(10);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 8001772:	f00a f9bf 	bl	800baf4 <userMain>
 8001776:	e7fc      	b.n	8001772 <main+0xde>
 8001778:	20000250 	.word	0x20000250
 800177c:	2000028c 	.word	0x2000028c
 8001780:	200002c8 	.word	0x200002c8
 8001784:	200000c4 	.word	0x200000c4
 8001788:	20000130 	.word	0x20000130
 800178c:	40012c00 	.word	0x40012c00
 8001790:	20000368 	.word	0x20000368
 8001794:	200001d8 	.word	0x200001d8
 8001798:	200001c4 	.word	0x200001c4
 800179c:	200001a0 	.word	0x200001a0
 80017a0:	200003b4 	.word	0x200003b4

080017a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b094      	sub	sp, #80	@ 0x50
 80017a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017aa:	f107 0318 	add.w	r3, r7, #24
 80017ae:	2238      	movs	r2, #56	@ 0x38
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f00a fc04 	bl	800bfc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f005 fa4a 	bl	8006c60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017d4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d6:	2302      	movs	r3, #2
 80017d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017da:	2303      	movs	r3, #3
 80017dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80017de:	2303      	movs	r3, #3
 80017e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80017e2:	2328      	movs	r3, #40	@ 0x28
 80017e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e6:	2302      	movs	r3, #2
 80017e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017ea:	2302      	movs	r3, #2
 80017ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017ee:	2302      	movs	r3, #2
 80017f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f2:	f107 0318 	add.w	r3, r7, #24
 80017f6:	4618      	mov	r0, r3
 80017f8:	f005 fae6 	bl	8006dc8 <HAL_RCC_OscConfig>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001802:	f000 f818 	bl	8001836 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001806:	230f      	movs	r3, #15
 8001808:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800180a:	2303      	movs	r3, #3
 800180c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2104      	movs	r1, #4
 800181e:	4618      	mov	r0, r3
 8001820:	f005 fde4 	bl	80073ec <HAL_RCC_ClockConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800182a:	f000 f804 	bl	8001836 <Error_Handler>
  }
}
 800182e:	bf00      	nop
 8001830:	3750      	adds	r7, #80	@ 0x50
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183a:	b672      	cpsid	i
}
 800183c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800183e:	bf00      	nop
 8001840:	e7fd      	b.n	800183e <Error_Handler+0x8>
	...

08001844 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001848:	4b10      	ldr	r3, [pc, #64]	@ (800188c <MX_OPAMP1_Init+0x48>)
 800184a:	4a11      	ldr	r2, [pc, #68]	@ (8001890 <MX_OPAMP1_Init+0x4c>)
 800184c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800184e:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <MX_OPAMP1_Init+0x48>)
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 8001854:	4b0d      	ldr	r3, [pc, #52]	@ (800188c <MX_OPAMP1_Init+0x48>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 800185a:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <MX_OPAMP1_Init+0x48>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <MX_OPAMP1_Init+0x48>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <MX_OPAMP1_Init+0x48>)
 8001868:	2200      	movs	r2, #0
 800186a:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800186c:	4b07      	ldr	r3, [pc, #28]	@ (800188c <MX_OPAMP1_Init+0x48>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001872:	4b06      	ldr	r3, [pc, #24]	@ (800188c <MX_OPAMP1_Init+0x48>)
 8001874:	2200      	movs	r2, #0
 8001876:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001878:	4804      	ldr	r0, [pc, #16]	@ (800188c <MX_OPAMP1_Init+0x48>)
 800187a:	f005 f8ef 	bl	8006a5c <HAL_OPAMP_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_OPAMP1_Init+0x44>
  {
    Error_Handler();
 8001884:	f7ff ffd7 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000250 	.word	0x20000250
 8001890:	40010300 	.word	0x40010300

08001894 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001898:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <MX_OPAMP2_Init+0x48>)
 800189a:	4a11      	ldr	r2, [pc, #68]	@ (80018e0 <MX_OPAMP2_Init+0x4c>)
 800189c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800189e:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <MX_OPAMP2_Init+0x48>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_STANDALONE_MODE;
 80018a4:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <MX_OPAMP2_Init+0x48>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 80018aa:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <MX_OPAMP2_Init+0x48>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80018b0:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <MX_OPAMP2_Init+0x48>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <MX_OPAMP2_Init+0x48>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80018bc:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <MX_OPAMP2_Init+0x48>)
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <MX_OPAMP2_Init+0x48>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80018c8:	4804      	ldr	r0, [pc, #16]	@ (80018dc <MX_OPAMP2_Init+0x48>)
 80018ca:	f005 f8c7 	bl	8006a5c <HAL_OPAMP_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_OPAMP2_Init+0x44>
  {
    Error_Handler();
 80018d4:	f7ff ffaf 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	2000028c 	.word	0x2000028c
 80018e0:	40010304 	.word	0x40010304

080018e4 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80018e8:	4b10      	ldr	r3, [pc, #64]	@ (800192c <MX_OPAMP3_Init+0x48>)
 80018ea:	4a11      	ldr	r2, [pc, #68]	@ (8001930 <MX_OPAMP3_Init+0x4c>)
 80018ec:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80018ee:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <MX_OPAMP3_Init+0x48>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_STANDALONE_MODE;
 80018f4:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <MX_OPAMP3_Init+0x48>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  hopamp3.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 80018fa:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <MX_OPAMP3_Init+0x48>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001900:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <MX_OPAMP3_Init+0x48>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <MX_OPAMP3_Init+0x48>)
 8001908:	2200      	movs	r2, #0
 800190a:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800190c:	4b07      	ldr	r3, [pc, #28]	@ (800192c <MX_OPAMP3_Init+0x48>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <MX_OPAMP3_Init+0x48>)
 8001914:	2200      	movs	r2, #0
 8001916:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	@ (800192c <MX_OPAMP3_Init+0x48>)
 800191a:	f005 f89f 	bl	8006a5c <HAL_OPAMP_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_OPAMP3_Init+0x44>
  {
    Error_Handler();
 8001924:	f7ff ff87 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200002c8 	.word	0x200002c8
 8001930:	40010308 	.word	0x40010308

08001934 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	@ 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a2e      	ldr	r2, [pc, #184]	@ (8001a0c <HAL_OPAMP_MspInit+0xd8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d119      	bne.n	800198a <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b2e      	ldr	r3, [pc, #184]	@ (8001a10 <HAL_OPAMP_MspInit+0xdc>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a10 <HAL_OPAMP_MspInit+0xdc>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001962:	4b2b      	ldr	r3, [pc, #172]	@ (8001a10 <HAL_OPAMP_MspInit+0xdc>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800196e:	230e      	movs	r3, #14
 8001970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001972:	2303      	movs	r3, #3
 8001974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001984:	f004 feb8 	bl	80066f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8001988:	e03b      	b.n	8001a02 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a21      	ldr	r2, [pc, #132]	@ (8001a14 <HAL_OPAMP_MspInit+0xe0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d119      	bne.n	80019c8 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001994:	4b1e      	ldr	r3, [pc, #120]	@ (8001a10 <HAL_OPAMP_MspInit+0xdc>)
 8001996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001998:	4a1d      	ldr	r2, [pc, #116]	@ (8001a10 <HAL_OPAMP_MspInit+0xdc>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <HAL_OPAMP_MspInit+0xdc>)
 80019a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019ac:	23e0      	movs	r3, #224	@ 0xe0
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b0:	2303      	movs	r3, #3
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019c2:	f004 fe99 	bl	80066f8 <HAL_GPIO_Init>
}
 80019c6:	e01c      	b.n	8001a02 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a12      	ldr	r2, [pc, #72]	@ (8001a18 <HAL_OPAMP_MspInit+0xe4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d117      	bne.n	8001a02 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <HAL_OPAMP_MspInit+0xdc>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a10 <HAL_OPAMP_MspInit+0xdc>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019de:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <HAL_OPAMP_MspInit+0xdc>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80019ea:	2307      	movs	r3, #7
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ee:	2303      	movs	r3, #3
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4807      	ldr	r0, [pc, #28]	@ (8001a1c <HAL_OPAMP_MspInit+0xe8>)
 80019fe:	f004 fe7b 	bl	80066f8 <HAL_GPIO_Init>
}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	@ 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40010300 	.word	0x40010300
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40010304 	.word	0x40010304
 8001a18:	40010308 	.word	0x40010308
 8001a1c:	48000400 	.word	0x48000400

08001a20 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <MX_SPI1_Init+0x74>)
 8001a26:	4a1c      	ldr	r2, [pc, #112]	@ (8001a98 <MX_SPI1_Init+0x78>)
 8001a28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <MX_SPI1_Init+0x74>)
 8001a2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a32:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <MX_SPI1_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001a38:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <MX_SPI1_Init+0x74>)
 8001a3a:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001a3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a40:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <MX_SPI1_Init+0x74>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a46:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <MX_SPI1_Init+0x74>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <MX_SPI1_Init+0x74>)
 8001a4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <MX_SPI1_Init+0x74>)
 8001a56:	2218      	movs	r2, #24
 8001a58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a94 <MX_SPI1_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <MX_SPI1_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <MX_SPI1_Init+0x74>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <MX_SPI1_Init+0x74>)
 8001a6e:	2207      	movs	r2, #7
 8001a70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a72:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <MX_SPI1_Init+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <MX_SPI1_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <MX_SPI1_Init+0x74>)
 8001a80:	f006 f8c0 	bl	8007c04 <HAL_SPI_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a8a:	f7ff fed4 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000304 	.word	0x20000304
 8001a98:	40013000 	.word	0x40013000

08001a9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	@ 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a17      	ldr	r2, [pc, #92]	@ (8001b18 <HAL_SPI_MspInit+0x7c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d127      	bne.n	8001b0e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001abe:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <HAL_SPI_MspInit+0x80>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac2:	4a16      	ldr	r2, [pc, #88]	@ (8001b1c <HAL_SPI_MspInit+0x80>)
 8001ac4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ac8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aca:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <HAL_SPI_MspInit+0x80>)
 8001acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ace:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <HAL_SPI_MspInit+0x80>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ada:	4a10      	ldr	r2, [pc, #64]	@ (8001b1c <HAL_SPI_MspInit+0x80>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <HAL_SPI_MspInit+0x80>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001aee:	2338      	movs	r3, #56	@ 0x38
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001afe:	2305      	movs	r3, #5
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <HAL_SPI_MspInit+0x84>)
 8001b0a:	f004 fdf5 	bl	80066f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	@ 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40013000 	.word	0x40013000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	48000400 	.word	0x48000400

08001b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b36:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b46:	4a08      	ldr	r2, [pc, #32]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b4e:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b5a:	f005 f925 	bl	8006da8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <NMI_Handler+0x4>

08001b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <HardFault_Handler+0x4>

08001b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <MemManage_Handler+0x4>

08001b84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc2:	f000 fc1f 	bl	8002404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001bd0:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <DMA1_Channel1_IRQHandler+0x10>)
 8001bd2:	f003 fff0 	bl	8005bb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000494 	.word	0x20000494

08001be0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001be4:	4803      	ldr	r0, [pc, #12]	@ (8001bf4 <ADC1_2_IRQHandler+0x14>)
 8001be6:	f001 f801 	bl	8002bec <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001bea:	4803      	ldr	r0, [pc, #12]	@ (8001bf8 <ADC1_2_IRQHandler+0x18>)
 8001bec:	f000 fffe 	bl	8002bec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200000c4 	.word	0x200000c4
 8001bf8:	20000130 	.word	0x20000130

08001bfc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001c00:	4805      	ldr	r0, [pc, #20]	@ (8001c18 <FDCAN1_IT0_IRQHandler+0x1c>)
 8001c02:	f004 fb89 	bl	8006318 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
	HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,RxData);
 8001c06:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <FDCAN1_IT0_IRQHandler+0x20>)
 8001c08:	4a05      	ldr	r2, [pc, #20]	@ (8001c20 <FDCAN1_IT0_IRQHandler+0x24>)
 8001c0a:	2140      	movs	r1, #64	@ 0x40
 8001c0c:	4802      	ldr	r0, [pc, #8]	@ (8001c18 <FDCAN1_IT0_IRQHandler+0x1c>)
 8001c0e:	f004 fa7b 	bl	8006108 <HAL_FDCAN_GetRxMessage>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200001ec 	.word	0x200001ec
 8001c1c:	20000604 	.word	0x20000604
 8001c20:	200005dc 	.word	0x200005dc

08001c24 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c28:	4802      	ldr	r0, [pc, #8]	@ (8001c34 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001c2a:	f006 fb47 	bl	80082bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000368 	.word	0x20000368

08001c38 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c3c:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c3e:	f006 fb3d 	bl	80082bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000368 	.word	0x20000368

08001c4c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <TIM1_CC_IRQHandler+0x10>)
 8001c52:	f006 fb33 	bl	80082bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000368 	.word	0x20000368

08001c60 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c64:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <TIM4_IRQHandler+0x10>)
 8001c66:	f006 fb29 	bl	80082bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200003b4 	.word	0x200003b4

08001c74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c78:	4802      	ldr	r0, [pc, #8]	@ (8001c84 <USART3_IRQHandler+0x10>)
 8001c7a:	f008 f8dd 	bl	8009e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000400 	.word	0x20000400

08001c88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8001c8c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001c90:	f004 fecc 	bl	8006a2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
 8001c94:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001c98:	f004 fec8 	bl	8006a2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button3_Pin);
 8001c9c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ca0:	f004 fec4 	bl	8006a2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001cac:	4802      	ldr	r0, [pc, #8]	@ (8001cb8 <COMP1_2_3_IRQHandler+0x10>)
 8001cae:	f003 f9d5 	bl	800505c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200001a0 	.word	0x200001a0

08001cbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <SystemInit+0x20>)
 8001cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cc6:	4a05      	ldr	r2, [pc, #20]	@ (8001cdc <SystemInit+0x20>)
 8001cc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ccc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b09e      	sub	sp, #120	@ 0x78
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001d00:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d0c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
 8001d1c:	615a      	str	r2, [r3, #20]
 8001d1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d20:	463b      	mov	r3, r7
 8001d22:	2234      	movs	r2, #52	@ 0x34
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f00a f94a 	bl	800bfc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d2c:	4b64      	ldr	r3, [pc, #400]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001d2e:	4a65      	ldr	r2, [pc, #404]	@ (8001ec4 <MX_TIM1_Init+0x1e4>)
 8001d30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001d32:	4b63      	ldr	r3, [pc, #396]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001d38:	4b61      	ldr	r3, [pc, #388]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8001d3e:	4b60      	ldr	r3, [pc, #384]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001d40:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001d44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001d46:	4b5e      	ldr	r3, [pc, #376]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001d48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d54:	4b5a      	ldr	r3, [pc, #360]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d5a:	4859      	ldr	r0, [pc, #356]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001d5c:	f005 fffd 	bl	8007d5a <HAL_TIM_Base_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001d66:	f7ff fd66 	bl	8001836 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d6e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d70:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001d74:	4619      	mov	r1, r3
 8001d76:	4852      	ldr	r0, [pc, #328]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001d78:	f006 fd04 	bl	8008784 <HAL_TIM_ConfigClockSource>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d82:	f7ff fd58 	bl	8001836 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d86:	484e      	ldr	r0, [pc, #312]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001d88:	f006 f8a0 	bl	8007ecc <HAL_TIM_PWM_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001d92:	f7ff fd50 	bl	8001836 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001d96:	2370      	movs	r3, #112	@ 0x70
 8001d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001da2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001da6:	4619      	mov	r1, r3
 8001da8:	4845      	ldr	r0, [pc, #276]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001daa:	f007 fd23 	bl	80097f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001db4:	f7ff fd3f 	bl	8001836 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001db8:	2302      	movs	r3, #2
 8001dba:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001dc4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2101      	movs	r1, #1
 8001dcc:	483c      	ldr	r0, [pc, #240]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001dce:	f007 fe1f 	bl	8009a10 <HAL_TIMEx_ConfigBreakInput>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001dd8:	f7ff fd2d 	bl	8001836 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ddc:	2360      	movs	r3, #96	@ 0x60
 8001dde:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de4:	2300      	movs	r3, #0
 8001de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001de8:	2300      	movs	r3, #0
 8001dea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	4619      	mov	r1, r3
 8001e00:	482f      	ldr	r0, [pc, #188]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001e02:	f006 fbab 	bl	800855c <HAL_TIM_PWM_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001e0c:	f7ff fd13 	bl	8001836 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e10:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e14:	2204      	movs	r2, #4
 8001e16:	4619      	mov	r1, r3
 8001e18:	4829      	ldr	r0, [pc, #164]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001e1a:	f006 fb9f 	bl	800855c <HAL_TIM_PWM_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001e24:	f7ff fd07 	bl	8001836 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e28:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4823      	ldr	r0, [pc, #140]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001e32:	f006 fb93 	bl	800855c <HAL_TIM_PWM_ConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 8001e3c:	f7ff fcfb 	bl	8001836 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001e40:	2370      	movs	r3, #112	@ 0x70
 8001e42:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 7998;
 8001e44:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8001e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e4a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e4e:	220c      	movs	r2, #12
 8001e50:	4619      	mov	r1, r3
 8001e52:	481b      	ldr	r0, [pc, #108]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001e54:	f006 fb82 	bl	800855c <HAL_TIM_PWM_ConfigChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 8001e5e:	f7ff fcea 	bl	8001836 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 120;
 8001e6e:	2378      	movs	r3, #120	@ 0x78
 8001e70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001e72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 2;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4807      	ldr	r0, [pc, #28]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001ea2:	f007 fd29 	bl	80098f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM1_Init+0x1d0>
  {
    Error_Handler();
 8001eac:	f7ff fcc3 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001eb0:	4803      	ldr	r0, [pc, #12]	@ (8001ec0 <MX_TIM1_Init+0x1e0>)
 8001eb2:	f000 f8e9 	bl	8002088 <HAL_TIM_MspPostInit>

}
 8001eb6:	bf00      	nop
 8001eb8:	3778      	adds	r7, #120	@ 0x78
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000368 	.word	0x20000368
 8001ec4:	40012c00 	.word	0x40012c00

08001ec8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08c      	sub	sp, #48	@ 0x30
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ece:	f107 0320 	add.w	r3, r7, #32
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ef4:	4b26      	ldr	r3, [pc, #152]	@ (8001f90 <MX_TIM4_Init+0xc8>)
 8001ef6:	4a27      	ldr	r2, [pc, #156]	@ (8001f94 <MX_TIM4_Init+0xcc>)
 8001ef8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001efa:	4b25      	ldr	r3, [pc, #148]	@ (8001f90 <MX_TIM4_Init+0xc8>)
 8001efc:	220f      	movs	r2, #15
 8001efe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f00:	4b23      	ldr	r3, [pc, #140]	@ (8001f90 <MX_TIM4_Init+0xc8>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f06:	4b22      	ldr	r3, [pc, #136]	@ (8001f90 <MX_TIM4_Init+0xc8>)
 8001f08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0e:	4b20      	ldr	r3, [pc, #128]	@ (8001f90 <MX_TIM4_Init+0xc8>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f14:	4b1e      	ldr	r3, [pc, #120]	@ (8001f90 <MX_TIM4_Init+0xc8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f1a:	481d      	ldr	r0, [pc, #116]	@ (8001f90 <MX_TIM4_Init+0xc8>)
 8001f1c:	f005 ff1d 	bl	8007d5a <HAL_TIM_Base_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001f26:	f7ff fc86 	bl	8001836 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f2e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f30:	f107 0320 	add.w	r3, r7, #32
 8001f34:	4619      	mov	r1, r3
 8001f36:	4816      	ldr	r0, [pc, #88]	@ (8001f90 <MX_TIM4_Init+0xc8>)
 8001f38:	f006 fc24 	bl	8008784 <HAL_TIM_ConfigClockSource>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001f42:	f7ff fc78 	bl	8001836 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 10;
 8001f4e:	230a      	movs	r3, #10
 8001f50:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 5;
 8001f52:	2305      	movs	r3, #5
 8001f54:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 8001f56:	f107 0310 	add.w	r3, r7, #16
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <MX_TIM4_Init+0xc8>)
 8001f5e:	f007 f9ee 	bl	800933e <HAL_TIMEx_HallSensor_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 8001f68:	f7ff fc65 	bl	8001836 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001f6c:	2350      	movs	r3, #80	@ 0x50
 8001f6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	4805      	ldr	r0, [pc, #20]	@ (8001f90 <MX_TIM4_Init+0xc8>)
 8001f7a:	f007 fc3b 	bl	80097f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001f84:	f7ff fc57 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	3730      	adds	r7, #48	@ 0x30
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	200003b4 	.word	0x200003b4
 8001f94:	40000800 	.word	0x40000800

08001f98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	@ 0x28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a30      	ldr	r2, [pc, #192]	@ (8002078 <HAL_TIM_Base_MspInit+0xe0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d124      	bne.n	8002004 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fba:	4b30      	ldr	r3, [pc, #192]	@ (800207c <HAL_TIM_Base_MspInit+0xe4>)
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800207c <HAL_TIM_Base_MspInit+0xe4>)
 8001fc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800207c <HAL_TIM_Base_MspInit+0xe4>)
 8001fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2018      	movs	r0, #24
 8001fd8:	f003 f961 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001fdc:	2018      	movs	r0, #24
 8001fde:	f003 f978 	bl	80052d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2019      	movs	r0, #25
 8001fe8:	f003 f959 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001fec:	2019      	movs	r0, #25
 8001fee:	f003 f970 	bl	80052d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	201b      	movs	r0, #27
 8001ff8:	f003 f951 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ffc:	201b      	movs	r0, #27
 8001ffe:	f003 f968 	bl	80052d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002002:	e035      	b.n	8002070 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM4)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1d      	ldr	r2, [pc, #116]	@ (8002080 <HAL_TIM_Base_MspInit+0xe8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d130      	bne.n	8002070 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800200e:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <HAL_TIM_Base_MspInit+0xe4>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002012:	4a1a      	ldr	r2, [pc, #104]	@ (800207c <HAL_TIM_Base_MspInit+0xe4>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	6593      	str	r3, [r2, #88]	@ 0x58
 800201a:	4b18      	ldr	r3, [pc, #96]	@ (800207c <HAL_TIM_Base_MspInit+0xe4>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b15      	ldr	r3, [pc, #84]	@ (800207c <HAL_TIM_Base_MspInit+0xe4>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	4a14      	ldr	r2, [pc, #80]	@ (800207c <HAL_TIM_Base_MspInit+0xe4>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002032:	4b12      	ldr	r3, [pc, #72]	@ (800207c <HAL_TIM_Base_MspInit+0xe4>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800203e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002050:	2302      	movs	r3, #2
 8002052:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	4619      	mov	r1, r3
 800205a:	480a      	ldr	r0, [pc, #40]	@ (8002084 <HAL_TIM_Base_MspInit+0xec>)
 800205c:	f004 fb4c 	bl	80066f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2100      	movs	r1, #0
 8002064:	201e      	movs	r0, #30
 8002066:	f003 f91a 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800206a:	201e      	movs	r0, #30
 800206c:	f003 f931 	bl	80052d2 <HAL_NVIC_EnableIRQ>
}
 8002070:	bf00      	nop
 8002072:	3728      	adds	r7, #40	@ 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40012c00 	.word	0x40012c00
 800207c:	40021000 	.word	0x40021000
 8002080:	40000800 	.word	0x40000800
 8002084:	48000400 	.word	0x48000400

08002088 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	@ 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a29      	ldr	r2, [pc, #164]	@ (800214c <HAL_TIM_MspPostInit+0xc4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d14b      	bne.n	8002142 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <HAL_TIM_MspPostInit+0xc8>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ae:	4a28      	ldr	r2, [pc, #160]	@ (8002150 <HAL_TIM_MspPostInit+0xc8>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020b6:	4b26      	ldr	r3, [pc, #152]	@ (8002150 <HAL_TIM_MspPostInit+0xc8>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	4b23      	ldr	r3, [pc, #140]	@ (8002150 <HAL_TIM_MspPostInit+0xc8>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c6:	4a22      	ldr	r2, [pc, #136]	@ (8002150 <HAL_TIM_MspPostInit+0xc8>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ce:	4b20      	ldr	r3, [pc, #128]	@ (8002150 <HAL_TIM_MspPostInit+0xc8>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80020da:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80020de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2300      	movs	r3, #0
 80020ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80020ec:	2306      	movs	r3, #6
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	4619      	mov	r1, r3
 80020f6:	4817      	ldr	r0, [pc, #92]	@ (8002154 <HAL_TIM_MspPostInit+0xcc>)
 80020f8:	f004 fafe 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800210e:	2304      	movs	r3, #4
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	480e      	ldr	r0, [pc, #56]	@ (8002154 <HAL_TIM_MspPostInit+0xcc>)
 800211a:	f004 faed 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800211e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002130:	2306      	movs	r3, #6
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4619      	mov	r1, r3
 800213a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800213e:	f004 fadb 	bl	80066f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002142:	bf00      	nop
 8002144:	3728      	adds	r7, #40	@ 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40012c00 	.word	0x40012c00
 8002150:	40021000 	.word	0x40021000
 8002154:	48000400 	.word	0x48000400

08002158 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800215c:	4b22      	ldr	r3, [pc, #136]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 800215e:	4a23      	ldr	r2, [pc, #140]	@ (80021ec <MX_USART3_UART_Init+0x94>)
 8002160:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002162:	4b21      	ldr	r3, [pc, #132]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 8002164:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002168:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800216a:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002170:	4b1d      	ldr	r3, [pc, #116]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 8002172:	2200      	movs	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002176:	4b1c      	ldr	r3, [pc, #112]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800217c:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 800217e:	220c      	movs	r2, #12
 8002180:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002182:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002188:	4b17      	ldr	r3, [pc, #92]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800218e:	4b16      	ldr	r3, [pc, #88]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 8002190:	2200      	movs	r2, #0
 8002192:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002194:	4b14      	ldr	r3, [pc, #80]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 8002196:	2200      	movs	r2, #0
 8002198:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800219a:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 800219c:	2200      	movs	r2, #0
 800219e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021a0:	4811      	ldr	r0, [pc, #68]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 80021a2:	f007 fd78 	bl	8009c96 <HAL_UART_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80021ac:	f7ff fb43 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021b0:	2100      	movs	r1, #0
 80021b2:	480d      	ldr	r0, [pc, #52]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 80021b4:	f008 ffed 	bl	800b192 <HAL_UARTEx_SetTxFifoThreshold>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80021be:	f7ff fb3a 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021c2:	2100      	movs	r1, #0
 80021c4:	4808      	ldr	r0, [pc, #32]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 80021c6:	f009 f822 	bl	800b20e <HAL_UARTEx_SetRxFifoThreshold>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80021d0:	f7ff fb31 	bl	8001836 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80021d4:	4804      	ldr	r0, [pc, #16]	@ (80021e8 <MX_USART3_UART_Init+0x90>)
 80021d6:	f008 ffa3 	bl	800b120 <HAL_UARTEx_DisableFifoMode>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80021e0:	f7ff fb29 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000400 	.word	0x20000400
 80021ec:	40004800 	.word	0x40004800

080021f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b09a      	sub	sp, #104	@ 0x68
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002208:	f107 0310 	add.w	r3, r7, #16
 800220c:	2244      	movs	r2, #68	@ 0x44
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f009 fed5 	bl	800bfc0 <memset>
  if(uartHandle->Instance==USART3)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a37      	ldr	r2, [pc, #220]	@ (80022f8 <HAL_UART_MspInit+0x108>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d167      	bne.n	80022f0 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002220:	2304      	movs	r3, #4
 8002222:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002228:	f107 0310 	add.w	r3, r7, #16
 800222c:	4618      	mov	r0, r3
 800222e:	f005 faf9 	bl	8007824 <HAL_RCCEx_PeriphCLKConfig>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002238:	f7ff fafd 	bl	8001836 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800223c:	4b2f      	ldr	r3, [pc, #188]	@ (80022fc <HAL_UART_MspInit+0x10c>)
 800223e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002240:	4a2e      	ldr	r2, [pc, #184]	@ (80022fc <HAL_UART_MspInit+0x10c>)
 8002242:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002246:	6593      	str	r3, [r2, #88]	@ 0x58
 8002248:	4b2c      	ldr	r3, [pc, #176]	@ (80022fc <HAL_UART_MspInit+0x10c>)
 800224a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002254:	4b29      	ldr	r3, [pc, #164]	@ (80022fc <HAL_UART_MspInit+0x10c>)
 8002256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002258:	4a28      	ldr	r2, [pc, #160]	@ (80022fc <HAL_UART_MspInit+0x10c>)
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002260:	4b26      	ldr	r3, [pc, #152]	@ (80022fc <HAL_UART_MspInit+0x10c>)
 8002262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800226c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002270:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800227e:	2307      	movs	r3, #7
 8002280:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002286:	4619      	mov	r1, r3
 8002288:	481d      	ldr	r0, [pc, #116]	@ (8002300 <HAL_UART_MspInit+0x110>)
 800228a:	f004 fa35 	bl	80066f8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 800228e:	4b1d      	ldr	r3, [pc, #116]	@ (8002304 <HAL_UART_MspInit+0x114>)
 8002290:	4a1d      	ldr	r2, [pc, #116]	@ (8002308 <HAL_UART_MspInit+0x118>)
 8002292:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002294:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_UART_MspInit+0x114>)
 8002296:	221d      	movs	r2, #29
 8002298:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800229a:	4b1a      	ldr	r3, [pc, #104]	@ (8002304 <HAL_UART_MspInit+0x114>)
 800229c:	2210      	movs	r2, #16
 800229e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a0:	4b18      	ldr	r3, [pc, #96]	@ (8002304 <HAL_UART_MspInit+0x114>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022a6:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <HAL_UART_MspInit+0x114>)
 80022a8:	2280      	movs	r2, #128	@ 0x80
 80022aa:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ac:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <HAL_UART_MspInit+0x114>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022b2:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <HAL_UART_MspInit+0x114>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80022b8:	4b12      	ldr	r3, [pc, #72]	@ (8002304 <HAL_UART_MspInit+0x114>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022be:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <HAL_UART_MspInit+0x114>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80022c4:	480f      	ldr	r0, [pc, #60]	@ (8002304 <HAL_UART_MspInit+0x114>)
 80022c6:	f003 fa93 	bl	80057f0 <HAL_DMA_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80022d0:	f7ff fab1 	bl	8001836 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002304 <HAL_UART_MspInit+0x114>)
 80022d8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80022da:	4a0a      	ldr	r2, [pc, #40]	@ (8002304 <HAL_UART_MspInit+0x114>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2100      	movs	r1, #0
 80022e4:	2027      	movs	r0, #39	@ 0x27
 80022e6:	f002 ffda 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022ea:	2027      	movs	r0, #39	@ 0x27
 80022ec:	f002 fff1 	bl	80052d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022f0:	bf00      	nop
 80022f2:	3768      	adds	r7, #104	@ 0x68
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40004800 	.word	0x40004800
 80022fc:	40021000 	.word	0x40021000
 8002300:	48000400 	.word	0x48000400
 8002304:	20000494 	.word	0x20000494
 8002308:	40020008 	.word	0x40020008

0800230c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800230c:	480d      	ldr	r0, [pc, #52]	@ (8002344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800230e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002310:	f7ff fcd4 	bl	8001cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002314:	480c      	ldr	r0, [pc, #48]	@ (8002348 <LoopForever+0x6>)
  ldr r1, =_edata
 8002316:	490d      	ldr	r1, [pc, #52]	@ (800234c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002318:	4a0d      	ldr	r2, [pc, #52]	@ (8002350 <LoopForever+0xe>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800231c:	e002      	b.n	8002324 <LoopCopyDataInit>

0800231e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002322:	3304      	adds	r3, #4

08002324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002328:	d3f9      	bcc.n	800231e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800232c:	4c0a      	ldr	r4, [pc, #40]	@ (8002358 <LoopForever+0x16>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002330:	e001      	b.n	8002336 <LoopFillZerobss>

08002332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002334:	3204      	adds	r2, #4

08002336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002338:	d3fb      	bcc.n	8002332 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800233a:	f009 fe49 	bl	800bfd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800233e:	f7ff f9a9 	bl	8001694 <main>

08002342 <LoopForever>:

LoopForever:
    b LoopForever
 8002342:	e7fe      	b.n	8002342 <LoopForever>
  ldr   r0, =_estack
 8002344:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800234c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8002350:	0800c0b4 	.word	0x0800c0b4
  ldr r2, =_sbss
 8002354:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002358:	20000630 	.word	0x20000630

0800235c <COMP4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800235c:	e7fe      	b.n	800235c <COMP4_IRQHandler>

0800235e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002368:	2003      	movs	r0, #3
 800236a:	f002 ff8d 	bl	8005288 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800236e:	200f      	movs	r0, #15
 8002370:	f000 f80e 	bl	8002390 <HAL_InitTick>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	71fb      	strb	r3, [r7, #7]
 800237e:	e001      	b.n	8002384 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002380:	f7ff fbd0 	bl	8001b24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002384:	79fb      	ldrb	r3, [r7, #7]

}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800239c:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <HAL_InitTick+0x68>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d022      	beq.n	80023ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80023a4:	4b15      	ldr	r3, [pc, #84]	@ (80023fc <HAL_InitTick+0x6c>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b13      	ldr	r3, [pc, #76]	@ (80023f8 <HAL_InitTick+0x68>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	4618      	mov	r0, r3
 80023ba:	f002 ff98 	bl	80052ee <HAL_SYSTICK_Config>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10f      	bne.n	80023e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b0f      	cmp	r3, #15
 80023c8:	d809      	bhi.n	80023de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ca:	2200      	movs	r2, #0
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	f04f 30ff 	mov.w	r0, #4294967295
 80023d2:	f002 ff64 	bl	800529e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <HAL_InitTick+0x70>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	e007      	b.n	80023ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	e004      	b.n	80023ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	e001      	b.n	80023ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000008 	.word	0x20000008
 80023fc:	20000000 	.word	0x20000000
 8002400:	20000004 	.word	0x20000004

08002404 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <HAL_IncTick+0x1c>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <HAL_IncTick+0x20>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4413      	add	r3, r2
 8002412:	4a03      	ldr	r2, [pc, #12]	@ (8002420 <HAL_IncTick+0x1c>)
 8002414:	6013      	str	r3, [r2, #0]
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	200004f4 	.word	0x200004f4
 8002424:	20000008 	.word	0x20000008

08002428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b03      	ldr	r3, [pc, #12]	@ (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	200004f4 	.word	0x200004f4

08002440 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	609a      	str	r2, [r3, #8]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	609a      	str	r2, [r3, #8]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3360      	adds	r3, #96	@ 0x60
 80024ba:	461a      	mov	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <LL_ADC_SetOffset+0x44>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024e0:	bf00      	nop
 80024e2:	371c      	adds	r7, #28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	03fff000 	.word	0x03fff000

080024f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3360      	adds	r3, #96	@ 0x60
 80024fe:	461a      	mov	r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3360      	adds	r3, #96	@ 0x60
 800252c:	461a      	mov	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	431a      	orrs	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002552:	b480      	push	{r7}
 8002554:	b087      	sub	sp, #28
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3360      	adds	r3, #96	@ 0x60
 8002562:	461a      	mov	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	431a      	orrs	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800257c:	bf00      	nop
 800257e:	371c      	adds	r7, #28
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	3360      	adds	r3, #96	@ 0x60
 8002598:	461a      	mov	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80025b2:	bf00      	nop
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	615a      	str	r2, [r3, #20]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800260a:	b480      	push	{r7}
 800260c:	b087      	sub	sp, #28
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3330      	adds	r3, #48	@ 0x30
 800261a:	461a      	mov	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	4413      	add	r3, r2
 8002628:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	211f      	movs	r1, #31
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	401a      	ands	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	0e9b      	lsrs	r3, r3, #26
 8002642:	f003 011f 	and.w	r1, r3, #31
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	431a      	orrs	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	3314      	adds	r3, #20
 8002698:	461a      	mov	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	0e5b      	lsrs	r3, r3, #25
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	4413      	add	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	0d1b      	lsrs	r3, r3, #20
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	2107      	movs	r1, #7
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	401a      	ands	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	0d1b      	lsrs	r3, r3, #20
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	431a      	orrs	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026d2:	bf00      	nop
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f8:	43db      	mvns	r3, r3
 80026fa:	401a      	ands	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f003 0318 	and.w	r3, r3, #24
 8002702:	4908      	ldr	r1, [pc, #32]	@ (8002724 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002704:	40d9      	lsrs	r1, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	400b      	ands	r3, r1
 800270a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270e:	431a      	orrs	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	0007ffff 	.word	0x0007ffff

08002728 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 031f 	and.w	r3, r3, #31
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002770:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6093      	str	r3, [r2, #8]
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002794:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002798:	d101      	bne.n	800279e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80027bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027e8:	d101      	bne.n	80027ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800280c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002834:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002838:	f043 0202 	orr.w	r2, r3, #2
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <LL_ADC_IsEnabled+0x18>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <LL_ADC_IsEnabled+0x1a>
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b02      	cmp	r3, #2
 8002884:	d101      	bne.n	800288a <LL_ADC_IsDisableOngoing+0x18>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <LL_ADC_IsDisableOngoing+0x1a>
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d101      	bne.n	80028b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d101      	bne.n	80028d6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b089      	sub	sp, #36	@ 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e167      	b.n	8002bce <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002908:	2b00      	cmp	r3, #0
 800290a:	d109      	bne.n	8002920 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7fe fb8b 	bl	8001028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff2d 	bl	8002784 <LL_ADC_IsDeepPowerDownEnabled>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d004      	beq.n	800293a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff13 	bl	8002760 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff48 	bl	80027d4 <LL_ADC_IsInternalRegulatorEnabled>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d115      	bne.n	8002976 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff ff2c 	bl	80027ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002954:	4ba0      	ldr	r3, [pc, #640]	@ (8002bd8 <HAL_ADC_Init+0x2f4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	099b      	lsrs	r3, r3, #6
 800295a:	4aa0      	ldr	r2, [pc, #640]	@ (8002bdc <HAL_ADC_Init+0x2f8>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	099b      	lsrs	r3, r3, #6
 8002962:	3301      	adds	r3, #1
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002968:	e002      	b.n	8002970 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3b01      	subs	r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f9      	bne.n	800296a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff2a 	bl	80027d4 <LL_ADC_IsInternalRegulatorEnabled>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10d      	bne.n	80029a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	f043 0210 	orr.w	r2, r3, #16
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002996:	f043 0201 	orr.w	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff76 	bl	8002898 <LL_ADC_REG_IsConversionOngoing>
 80029ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 8100 	bne.w	8002bbc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 80fc 	bne.w	8002bbc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80029cc:	f043 0202 	orr.w	r2, r3, #2
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff37 	bl	800284c <LL_ADC_IsEnabled>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d111      	bne.n	8002a08 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80029e8:	f7ff ff30 	bl	800284c <LL_ADC_IsEnabled>
 80029ec:	4604      	mov	r4, r0
 80029ee:	487c      	ldr	r0, [pc, #496]	@ (8002be0 <HAL_ADC_Init+0x2fc>)
 80029f0:	f7ff ff2c 	bl	800284c <LL_ADC_IsEnabled>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4323      	orrs	r3, r4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d105      	bne.n	8002a08 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4619      	mov	r1, r3
 8002a02:	4878      	ldr	r0, [pc, #480]	@ (8002be4 <HAL_ADC_Init+0x300>)
 8002a04:	f7ff fd1c 	bl	8002440 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7f5b      	ldrb	r3, [r3, #29]
 8002a0c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a12:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a18:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a1e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a26:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d106      	bne.n	8002a44 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	045b      	lsls	r3, r3, #17
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d009      	beq.n	8002a60 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a58:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	4b60      	ldr	r3, [pc, #384]	@ (8002be8 <HAL_ADC_Init+0x304>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	69b9      	ldr	r1, [r7, #24]
 8002a70:	430b      	orrs	r3, r1
 8002a72:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff ff15 	bl	80028be <LL_ADC_INJ_IsConversionOngoing>
 8002a94:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d16d      	bne.n	8002b78 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d16a      	bne.n	8002b78 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002aa6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002aae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002abe:	f023 0302 	bic.w	r3, r3, #2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	69b9      	ldr	r1, [r7, #24]
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d017      	beq.n	8002b04 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ae2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002aec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002af0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6911      	ldr	r1, [r2, #16]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	430b      	orrs	r3, r1
 8002afe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002b02:	e013      	b.n	8002b2c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002b12:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b28:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d118      	bne.n	8002b68 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b4c:	4311      	orrs	r1, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002b52:	4311      	orrs	r1, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0201 	orr.w	r2, r2, #1
 8002b64:	611a      	str	r2, [r3, #16]
 8002b66:	e007      	b.n	8002b78 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0201 	bic.w	r2, r2, #1
 8002b76:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d10c      	bne.n	8002b9a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	f023 010f 	bic.w	r1, r3, #15
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	1e5a      	subs	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b98:	e007      	b.n	8002baa <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 020f 	bic.w	r2, r2, #15
 8002ba8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bae:	f023 0303 	bic.w	r3, r3, #3
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bba:	e007      	b.n	8002bcc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc0:	f043 0210 	orr.w	r2, r3, #16
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	@ 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd90      	pop	{r4, r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	053e2d63 	.word	0x053e2d63
 8002be0:	50000100 	.word	0x50000100
 8002be4:	50000300 	.word	0x50000300
 8002be8:	fff04007 	.word	0xfff04007

08002bec <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	@ 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c08:	4883      	ldr	r0, [pc, #524]	@ (8002e18 <HAL_ADC_IRQHandler+0x22c>)
 8002c0a:	f7ff fd8d 	bl	8002728 <LL_ADC_GetMultimode>
 8002c0e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d017      	beq.n	8002c4a <HAL_ADC_IRQHandler+0x5e>
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d012      	beq.n	8002c4a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c34:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f001 fa9d 	bl	800417c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2202      	movs	r2, #2
 8002c48:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d004      	beq.n	8002c5e <HAL_ADC_IRQHandler+0x72>
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10a      	bne.n	8002c74 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8085 	beq.w	8002d74 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d07f      	beq.n	8002d74 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c84:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fca7 	bl	80025e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d064      	beq.n	8002d66 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a5e      	ldr	r2, [pc, #376]	@ (8002e1c <HAL_ADC_IRQHandler+0x230>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d002      	beq.n	8002cac <HAL_ADC_IRQHandler+0xc0>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	e001      	b.n	8002cb0 <HAL_ADC_IRQHandler+0xc4>
 8002cac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d008      	beq.n	8002cca <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b05      	cmp	r3, #5
 8002cc2:	d002      	beq.n	8002cca <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b09      	cmp	r3, #9
 8002cc8:	d104      	bne.n	8002cd4 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	623b      	str	r3, [r7, #32]
 8002cd2:	e00d      	b.n	8002cf0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a50      	ldr	r2, [pc, #320]	@ (8002e1c <HAL_ADC_IRQHandler+0x230>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d002      	beq.n	8002ce4 <HAL_ADC_IRQHandler+0xf8>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	e001      	b.n	8002ce8 <HAL_ADC_IRQHandler+0xfc>
 8002ce4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ce8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d135      	bne.n	8002d66 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d12e      	bne.n	8002d66 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fdc3 	bl	8002898 <LL_ADC_REG_IsConversionOngoing>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d11a      	bne.n	8002d4e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 020c 	bic.w	r2, r2, #12
 8002d26:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d112      	bne.n	8002d66 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d44:	f043 0201 	orr.w	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d4c:	e00b      	b.n	8002d66 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d52:	f043 0210 	orr.w	r2, r3, #16
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5e:	f043 0201 	orr.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f95a 	bl	8003020 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	220c      	movs	r2, #12
 8002d72:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d004      	beq.n	8002d88 <HAL_ADC_IRQHandler+0x19c>
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10b      	bne.n	8002da0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 809e 	beq.w	8002ed0 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 8098 	beq.w	8002ed0 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fc50 	bl	8002662 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002dc2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fc0b 	bl	80025e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dce:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a11      	ldr	r2, [pc, #68]	@ (8002e1c <HAL_ADC_IRQHandler+0x230>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d002      	beq.n	8002de0 <HAL_ADC_IRQHandler+0x1f4>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	e001      	b.n	8002de4 <HAL_ADC_IRQHandler+0x1f8>
 8002de0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6812      	ldr	r2, [r2, #0]
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d008      	beq.n	8002dfe <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b06      	cmp	r3, #6
 8002df6:	d002      	beq.n	8002dfe <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b07      	cmp	r3, #7
 8002dfc:	d104      	bne.n	8002e08 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	623b      	str	r3, [r7, #32]
 8002e06:	e011      	b.n	8002e2c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a03      	ldr	r2, [pc, #12]	@ (8002e1c <HAL_ADC_IRQHandler+0x230>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d006      	beq.n	8002e20 <HAL_ADC_IRQHandler+0x234>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	e005      	b.n	8002e24 <HAL_ADC_IRQHandler+0x238>
 8002e18:	50000300 	.word	0x50000300
 8002e1c:	50000100 	.word	0x50000100
 8002e20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e24:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d047      	beq.n	8002ec2 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_ADC_IRQHandler+0x260>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d03f      	beq.n	8002ec2 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d13a      	bne.n	8002ec2 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e56:	2b40      	cmp	r3, #64	@ 0x40
 8002e58:	d133      	bne.n	8002ec2 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d12e      	bne.n	8002ec2 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fd28 	bl	80028be <LL_ADC_INJ_IsConversionOngoing>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d11a      	bne.n	8002eaa <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e82:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d112      	bne.n	8002ec2 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ea8:	e00b      	b.n	8002ec2 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eae:	f043 0210 	orr.w	r2, r3, #16
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eba:	f043 0201 	orr.w	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f008 fe70 	bl	800bba8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2260      	movs	r2, #96	@ 0x60
 8002ece:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d011      	beq.n	8002efe <HAL_ADC_IRQHandler+0x312>
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00c      	beq.n	8002efe <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f89f 	bl	8003034 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2280      	movs	r2, #128	@ 0x80
 8002efc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d012      	beq.n	8002f2e <HAL_ADC_IRQHandler+0x342>
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f001 f918 	bl	8004154 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d012      	beq.n	8002f5e <HAL_ADC_IRQHandler+0x372>
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00d      	beq.n	8002f5e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f46:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f001 f90a 	bl	8004168 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d036      	beq.n	8002fd6 <HAL_ADC_IRQHandler+0x3ea>
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d031      	beq.n	8002fd6 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f7e:	e014      	b.n	8002faa <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f86:	4825      	ldr	r0, [pc, #148]	@ (800301c <HAL_ADC_IRQHandler+0x430>)
 8002f88:	f7ff fbdc 	bl	8002744 <LL_ADC_GetMultiDMATransfer>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002f92:	2301      	movs	r3, #1
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f96:	e008      	b.n	8002faa <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d10e      	bne.n	8002fce <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc0:	f043 0202 	orr.w	r2, r3, #2
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f83d 	bl	8003048 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2210      	movs	r2, #16
 8002fd4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d018      	beq.n	8003012 <HAL_ADC_IRQHandler+0x426>
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d013      	beq.n	8003012 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffa:	f043 0208 	orr.w	r2, r3, #8
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800300a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f001 f897 	bl	8004140 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003012:	bf00      	nop
 8003014:	3728      	adds	r7, #40	@ 0x28
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	50000300 	.word	0x50000300

08003020 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b0b6      	sub	sp, #216	@ 0xd8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_ADC_ConfigChannel+0x22>
 800307a:	2302      	movs	r3, #2
 800307c:	e3c8      	b.n	8003810 <HAL_ADC_ConfigChannel+0x7b4>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fc04 	bl	8002898 <LL_ADC_REG_IsConversionOngoing>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	f040 83ad 	bne.w	80037f2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6859      	ldr	r1, [r3, #4]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	f7ff fab0 	bl	800260a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fbf2 	bl	8002898 <LL_ADC_REG_IsConversionOngoing>
 80030b4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fbfe 	bl	80028be <LL_ADC_INJ_IsConversionOngoing>
 80030c2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f040 81d9 	bne.w	8003482 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f040 81d4 	bne.w	8003482 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030e2:	d10f      	bne.n	8003104 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6818      	ldr	r0, [r3, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2200      	movs	r2, #0
 80030ee:	4619      	mov	r1, r3
 80030f0:	f7ff faca 	bl	8002688 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fa5e 	bl	80025be <LL_ADC_SetSamplingTimeCommonConfig>
 8003102:	e00e      	b.n	8003122 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6819      	ldr	r1, [r3, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	461a      	mov	r2, r3
 8003112:	f7ff fab9 	bl	8002688 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2100      	movs	r1, #0
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fa4e 	bl	80025be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	08db      	lsrs	r3, r3, #3
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b04      	cmp	r3, #4
 8003142:	d022      	beq.n	800318a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	6919      	ldr	r1, [r3, #16]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003154:	f7ff f9a8 	bl	80024a8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6919      	ldr	r1, [r3, #16]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	461a      	mov	r2, r3
 8003166:	f7ff f9f4 	bl	8002552 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003176:	2b01      	cmp	r3, #1
 8003178:	d102      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x124>
 800317a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800317e:	e000      	b.n	8003182 <HAL_ADC_ConfigChannel+0x126>
 8003180:	2300      	movs	r3, #0
 8003182:	461a      	mov	r2, r3
 8003184:	f7ff fa00 	bl	8002588 <LL_ADC_SetOffsetSaturation>
 8003188:	e17b      	b.n	8003482 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff f9ad 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8003196:	4603      	mov	r3, r0
 8003198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10a      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x15a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff f9a2 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 80031ac:	4603      	mov	r3, r0
 80031ae:	0e9b      	lsrs	r3, r3, #26
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	e01e      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x198>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff f997 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031cc:	fa93 f3a3 	rbit	r3, r3
 80031d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80031e4:	2320      	movs	r3, #32
 80031e6:	e004      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80031e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031ec:	fab3 f383 	clz	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d105      	bne.n	800320c <HAL_ADC_ConfigChannel+0x1b0>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	0e9b      	lsrs	r3, r3, #26
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	e018      	b.n	800323e <HAL_ADC_ConfigChannel+0x1e2>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003224:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003228:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003230:	2320      	movs	r3, #32
 8003232:	e004      	b.n	800323e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003234:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800323e:	429a      	cmp	r2, r3
 8003240:	d106      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2200      	movs	r2, #0
 8003248:	2100      	movs	r1, #0
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff f966 	bl	800251c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2101      	movs	r1, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff f94a 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 800325c:	4603      	mov	r3, r0
 800325e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <HAL_ADC_ConfigChannel+0x220>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2101      	movs	r1, #1
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff f93f 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8003272:	4603      	mov	r3, r0
 8003274:	0e9b      	lsrs	r3, r3, #26
 8003276:	f003 021f 	and.w	r2, r3, #31
 800327a:	e01e      	b.n	80032ba <HAL_ADC_ConfigChannel+0x25e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff f934 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8003288:	4603      	mov	r3, r0
 800328a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800329a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800329e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80032a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80032aa:	2320      	movs	r3, #32
 80032ac:	e004      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80032ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032b2:	fab3 f383 	clz	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d105      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x276>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	0e9b      	lsrs	r3, r3, #26
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	e018      	b.n	8003304 <HAL_ADC_ConfigChannel+0x2a8>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80032e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80032ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80032f6:	2320      	movs	r3, #32
 80032f8:	e004      	b.n	8003304 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80032fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032fe:	fab3 f383 	clz	r3, r3
 8003302:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003304:	429a      	cmp	r2, r3
 8003306:	d106      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2200      	movs	r2, #0
 800330e:	2101      	movs	r1, #1
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff f903 	bl	800251c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2102      	movs	r1, #2
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff f8e7 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8003322:	4603      	mov	r3, r0
 8003324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x2e6>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2102      	movs	r1, #2
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff f8dc 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8003338:	4603      	mov	r3, r0
 800333a:	0e9b      	lsrs	r3, r3, #26
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	e01e      	b.n	8003380 <HAL_ADC_ConfigChannel+0x324>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2102      	movs	r1, #2
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff f8d1 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 800334e:	4603      	mov	r3, r0
 8003350:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003358:	fa93 f3a3 	rbit	r3, r3
 800335c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003360:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003364:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003368:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003370:	2320      	movs	r3, #32
 8003372:	e004      	b.n	800337e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003374:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003378:	fab3 f383 	clz	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x33c>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	0e9b      	lsrs	r3, r3, #26
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	e016      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x36a>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80033aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80033b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80033b8:	2320      	movs	r3, #32
 80033ba:	e004      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80033bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033c0:	fab3 f383 	clz	r3, r3
 80033c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d106      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	2102      	movs	r1, #2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff f8a2 	bl	800251c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2103      	movs	r1, #3
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff f886 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x3a8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2103      	movs	r1, #3
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff f87b 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 80033fa:	4603      	mov	r3, r0
 80033fc:	0e9b      	lsrs	r3, r3, #26
 80033fe:	f003 021f 	and.w	r2, r3, #31
 8003402:	e017      	b.n	8003434 <HAL_ADC_ConfigChannel+0x3d8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2103      	movs	r1, #3
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff f870 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8003410:	4603      	mov	r3, r0
 8003412:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800341c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800341e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003420:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003426:	2320      	movs	r3, #32
 8003428:	e003      	b.n	8003432 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800342a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800342c:	fab3 f383 	clz	r3, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343c:	2b00      	cmp	r3, #0
 800343e:	d105      	bne.n	800344c <HAL_ADC_ConfigChannel+0x3f0>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	0e9b      	lsrs	r3, r3, #26
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	e011      	b.n	8003470 <HAL_ADC_ConfigChannel+0x414>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800345a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800345c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800345e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003464:	2320      	movs	r3, #32
 8003466:	e003      	b.n	8003470 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003470:	429a      	cmp	r2, r3
 8003472:	d106      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2200      	movs	r2, #0
 800347a:	2103      	movs	r1, #3
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff f84d 	bl	800251c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff f9e0 	bl	800284c <LL_ADC_IsEnabled>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	f040 8140 	bne.w	8003714 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6819      	ldr	r1, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	461a      	mov	r2, r3
 80034a2:	f7ff f91d 	bl	80026e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	4a8f      	ldr	r2, [pc, #572]	@ (80036e8 <HAL_ADC_ConfigChannel+0x68c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	f040 8131 	bne.w	8003714 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10b      	bne.n	80034da <HAL_ADC_ConfigChannel+0x47e>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	0e9b      	lsrs	r3, r3, #26
 80034c8:	3301      	adds	r3, #1
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	2b09      	cmp	r3, #9
 80034d0:	bf94      	ite	ls
 80034d2:	2301      	movls	r3, #1
 80034d4:	2300      	movhi	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	e019      	b.n	800350e <HAL_ADC_ConfigChannel+0x4b2>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80034e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034ea:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80034ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80034f2:	2320      	movs	r3, #32
 80034f4:	e003      	b.n	80034fe <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80034f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034f8:	fab3 f383 	clz	r3, r3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	3301      	adds	r3, #1
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	2b09      	cmp	r3, #9
 8003506:	bf94      	ite	ls
 8003508:	2301      	movls	r3, #1
 800350a:	2300      	movhi	r3, #0
 800350c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800350e:	2b00      	cmp	r3, #0
 8003510:	d079      	beq.n	8003606 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351a:	2b00      	cmp	r3, #0
 800351c:	d107      	bne.n	800352e <HAL_ADC_ConfigChannel+0x4d2>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	0e9b      	lsrs	r3, r3, #26
 8003524:	3301      	adds	r3, #1
 8003526:	069b      	lsls	r3, r3, #26
 8003528:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800352c:	e015      	b.n	800355a <HAL_ADC_ConfigChannel+0x4fe>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800353c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800353e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003546:	2320      	movs	r3, #32
 8003548:	e003      	b.n	8003552 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800354a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	3301      	adds	r3, #1
 8003554:	069b      	lsls	r3, r3, #26
 8003556:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_ADC_ConfigChannel+0x51e>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	0e9b      	lsrs	r3, r3, #26
 800356c:	3301      	adds	r3, #1
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	2101      	movs	r1, #1
 8003574:	fa01 f303 	lsl.w	r3, r1, r3
 8003578:	e017      	b.n	80035aa <HAL_ADC_ConfigChannel+0x54e>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800358a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800358c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003592:	2320      	movs	r3, #32
 8003594:	e003      	b.n	800359e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003598:	fab3 f383 	clz	r3, r3
 800359c:	b2db      	uxtb	r3, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f303 	lsl.w	r3, r1, r3
 80035aa:	ea42 0103 	orr.w	r1, r2, r3
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10a      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x574>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	0e9b      	lsrs	r3, r3, #26
 80035c0:	3301      	adds	r3, #1
 80035c2:	f003 021f 	and.w	r2, r3, #31
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	051b      	lsls	r3, r3, #20
 80035ce:	e018      	b.n	8003602 <HAL_ADC_ConfigChannel+0x5a6>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d8:	fa93 f3a3 	rbit	r3, r3
 80035dc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80035de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80035e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80035e8:	2320      	movs	r3, #32
 80035ea:	e003      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80035ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	3301      	adds	r3, #1
 80035f6:	f003 021f 	and.w	r2, r3, #31
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003602:	430b      	orrs	r3, r1
 8003604:	e081      	b.n	800370a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360e:	2b00      	cmp	r3, #0
 8003610:	d107      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x5c6>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	0e9b      	lsrs	r3, r3, #26
 8003618:	3301      	adds	r3, #1
 800361a:	069b      	lsls	r3, r3, #26
 800361c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003620:	e015      	b.n	800364e <HAL_ADC_ConfigChannel+0x5f2>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003632:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800363a:	2320      	movs	r3, #32
 800363c:	e003      	b.n	8003646 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	fab3 f383 	clz	r3, r3
 8003644:	b2db      	uxtb	r3, r3
 8003646:	3301      	adds	r3, #1
 8003648:	069b      	lsls	r3, r3, #26
 800364a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_ADC_ConfigChannel+0x612>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	3301      	adds	r3, #1
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	2101      	movs	r1, #1
 8003668:	fa01 f303 	lsl.w	r3, r1, r3
 800366c:	e017      	b.n	800369e <HAL_ADC_ConfigChannel+0x642>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	61fb      	str	r3, [r7, #28]
  return result;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003686:	2320      	movs	r3, #32
 8003688:	e003      	b.n	8003692 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	fab3 f383 	clz	r3, r3
 8003690:	b2db      	uxtb	r3, r3
 8003692:	3301      	adds	r3, #1
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	ea42 0103 	orr.w	r1, r2, r3
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10d      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x66e>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	0e9b      	lsrs	r3, r3, #26
 80036b4:	3301      	adds	r3, #1
 80036b6:	f003 021f 	and.w	r2, r3, #31
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	3b1e      	subs	r3, #30
 80036c2:	051b      	lsls	r3, r3, #20
 80036c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036c8:	e01e      	b.n	8003708 <HAL_ADC_ConfigChannel+0x6ac>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	613b      	str	r3, [r7, #16]
  return result;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d104      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80036e2:	2320      	movs	r3, #32
 80036e4:	e006      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x698>
 80036e6:	bf00      	nop
 80036e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	f003 021f 	and.w	r2, r3, #31
 80036fa:	4613      	mov	r3, r2
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	4413      	add	r3, r2
 8003700:	3b1e      	subs	r3, #30
 8003702:	051b      	lsls	r3, r3, #20
 8003704:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003708:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800370e:	4619      	mov	r1, r3
 8003710:	f7fe ffba 	bl	8002688 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4b3f      	ldr	r3, [pc, #252]	@ (8003818 <HAL_ADC_ConfigChannel+0x7bc>)
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d071      	beq.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003720:	483e      	ldr	r0, [pc, #248]	@ (800381c <HAL_ADC_ConfigChannel+0x7c0>)
 8003722:	f7fe feb3 	bl	800248c <LL_ADC_GetCommonPathInternalCh>
 8003726:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a3c      	ldr	r2, [pc, #240]	@ (8003820 <HAL_ADC_ConfigChannel+0x7c4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d004      	beq.n	800373e <HAL_ADC_ConfigChannel+0x6e2>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a3a      	ldr	r2, [pc, #232]	@ (8003824 <HAL_ADC_ConfigChannel+0x7c8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d127      	bne.n	800378e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800373e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003742:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d121      	bne.n	800378e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003752:	d157      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003758:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800375c:	4619      	mov	r1, r3
 800375e:	482f      	ldr	r0, [pc, #188]	@ (800381c <HAL_ADC_ConfigChannel+0x7c0>)
 8003760:	f7fe fe81 	bl	8002466 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003764:	4b30      	ldr	r3, [pc, #192]	@ (8003828 <HAL_ADC_ConfigChannel+0x7cc>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	4a30      	ldr	r2, [pc, #192]	@ (800382c <HAL_ADC_ConfigChannel+0x7d0>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	4613      	mov	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800377e:	e002      	b.n	8003786 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3b01      	subs	r3, #1
 8003784:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f9      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800378c:	e03a      	b.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a27      	ldr	r2, [pc, #156]	@ (8003830 <HAL_ADC_ConfigChannel+0x7d4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d113      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800379c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10d      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a22      	ldr	r2, [pc, #136]	@ (8003834 <HAL_ADC_ConfigChannel+0x7d8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d02a      	beq.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037b6:	4619      	mov	r1, r3
 80037b8:	4818      	ldr	r0, [pc, #96]	@ (800381c <HAL_ADC_ConfigChannel+0x7c0>)
 80037ba:	f7fe fe54 	bl	8002466 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037be:	e021      	b.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003838 <HAL_ADC_ConfigChannel+0x7dc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d11c      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d116      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a16      	ldr	r2, [pc, #88]	@ (8003834 <HAL_ADC_ConfigChannel+0x7d8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d011      	beq.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037e8:	4619      	mov	r1, r3
 80037ea:	480c      	ldr	r0, [pc, #48]	@ (800381c <HAL_ADC_ConfigChannel+0x7c0>)
 80037ec:	f7fe fe3b 	bl	8002466 <LL_ADC_SetCommonPathInternalCh>
 80037f0:	e008      	b.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f6:	f043 0220 	orr.w	r2, r3, #32
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800380c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003810:	4618      	mov	r0, r3
 8003812:	37d8      	adds	r7, #216	@ 0xd8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	80080000 	.word	0x80080000
 800381c:	50000300 	.word	0x50000300
 8003820:	c3210000 	.word	0xc3210000
 8003824:	90c00010 	.word	0x90c00010
 8003828:	20000000 	.word	0x20000000
 800382c:	053e2d63 	.word	0x053e2d63
 8003830:	c7520000 	.word	0xc7520000
 8003834:	50000100 	.word	0x50000100
 8003838:	cb840000 	.word	0xcb840000

0800383c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003844:	2300      	movs	r3, #0
 8003846:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7fe fffd 	bl	800284c <LL_ADC_IsEnabled>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d169      	bne.n	800392c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	4b36      	ldr	r3, [pc, #216]	@ (8003938 <ADC_Enable+0xfc>)
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00d      	beq.n	8003882 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386a:	f043 0210 	orr.w	r2, r3, #16
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003876:	f043 0201 	orr.w	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e055      	b.n	800392e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe ffb8 	bl	80027fc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800388c:	482b      	ldr	r0, [pc, #172]	@ (800393c <ADC_Enable+0x100>)
 800388e:	f7fe fdfd 	bl	800248c <LL_ADC_GetCommonPathInternalCh>
 8003892:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003894:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003898:	2b00      	cmp	r3, #0
 800389a:	d013      	beq.n	80038c4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800389c:	4b28      	ldr	r3, [pc, #160]	@ (8003940 <ADC_Enable+0x104>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	4a28      	ldr	r2, [pc, #160]	@ (8003944 <ADC_Enable+0x108>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	099b      	lsrs	r3, r3, #6
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038b6:	e002      	b.n	80038be <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f9      	bne.n	80038b8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80038c4:	f7fe fdb0 	bl	8002428 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038ca:	e028      	b.n	800391e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe ffbb 	bl	800284c <LL_ADC_IsEnabled>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe ff8b 	bl	80027fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038e6:	f7fe fd9f 	bl	8002428 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d914      	bls.n	800391e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d00d      	beq.n	800391e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003906:	f043 0210 	orr.w	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003912:	f043 0201 	orr.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e007      	b.n	800392e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	d1cf      	bne.n	80038cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	8000003f 	.word	0x8000003f
 800393c:	50000300 	.word	0x50000300
 8003940:	20000000 	.word	0x20000000
 8003944:	053e2d63 	.word	0x053e2d63

08003948 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7fe ff8c 	bl	8002872 <LL_ADC_IsDisableOngoing>
 800395a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe ff73 	bl	800284c <LL_ADC_IsEnabled>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d047      	beq.n	80039fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d144      	bne.n	80039fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 030d 	and.w	r3, r3, #13
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10c      	bne.n	800399a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe ff4d 	bl	8002824 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2203      	movs	r2, #3
 8003990:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003992:	f7fe fd49 	bl	8002428 <HAL_GetTick>
 8003996:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003998:	e029      	b.n	80039ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399e:	f043 0210 	orr.w	r2, r3, #16
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039aa:	f043 0201 	orr.w	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e023      	b.n	80039fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039b6:	f7fe fd37 	bl	8002428 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d914      	bls.n	80039ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d6:	f043 0210 	orr.w	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e2:	f043 0201 	orr.w	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e007      	b.n	80039fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1dc      	bne.n	80039b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <LL_ADC_SetCommonPathInternalCh>:
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <LL_ADC_GetCommonPathInternalCh>:
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <LL_ADC_SetOffset>:
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3360      	adds	r3, #96	@ 0x60
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <LL_ADC_SetOffset+0x44>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	601a      	str	r2, [r3, #0]
}
 8003a80:	bf00      	nop
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	03fff000 	.word	0x03fff000

08003a90 <LL_ADC_GetOffsetChannel>:
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3360      	adds	r3, #96	@ 0x60
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <LL_ADC_SetOffsetState>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3360      	adds	r3, #96	@ 0x60
 8003acc:	461a      	mov	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	601a      	str	r2, [r3, #0]
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <LL_ADC_SetOffsetSign>:
{
 8003af2:	b480      	push	{r7}
 8003af4:	b087      	sub	sp, #28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3360      	adds	r3, #96	@ 0x60
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	601a      	str	r2, [r3, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <LL_ADC_SetOffsetSaturation>:
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3360      	adds	r3, #96	@ 0x60
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	601a      	str	r2, [r3, #0]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	615a      	str	r2, [r3, #20]
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <LL_ADC_INJ_GetTrigAuto>:
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_ADC_SetChannelSamplingTime>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3314      	adds	r3, #20
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	0e5b      	lsrs	r3, r3, #25
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	4413      	add	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	0d1b      	lsrs	r3, r3, #20
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	2107      	movs	r1, #7
 8003bce:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	0d1b      	lsrs	r3, r3, #20
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	fa01 f303 	lsl.w	r3, r1, r3
 8003be4:	431a      	orrs	r2, r3
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	601a      	str	r2, [r3, #0]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <LL_ADC_SetChannelSingleDiff>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c10:	43db      	mvns	r3, r3
 8003c12:	401a      	ands	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f003 0318 	and.w	r3, r3, #24
 8003c1a:	4908      	ldr	r1, [pc, #32]	@ (8003c3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c1c:	40d9      	lsrs	r1, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	400b      	ands	r3, r1
 8003c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c26:	431a      	orrs	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	0007ffff 	.word	0x0007ffff

08003c40 <LL_ADC_GetMultimode>:
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 031f 	and.w	r3, r3, #31
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <LL_ADC_IsEnabled>:
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <LL_ADC_IsEnabled+0x18>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <LL_ADC_IsEnabled+0x1a>
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <LL_ADC_StartCalibration>:
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003c94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_ADC_IsCalibrationOnGoing>:
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cc8:	d101      	bne.n	8003cce <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_ADC_REG_IsConversionOngoing>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d101      	bne.n	8003cf4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <LL_ADC_INJ_StartConversion>:
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d12:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d16:	f043 0208 	orr.w	r2, r3, #8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	609a      	str	r2, [r3, #8]
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <LL_ADC_INJ_IsConversionOngoing>:
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d101      	bne.n	8003d42 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_ADCEx_Calibration_Start+0x1c>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e04d      	b.n	8003e08 <HAL_ADCEx_Calibration_Start+0xb8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff fde7 	bl	8003948 <ADC_Disable>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d136      	bne.n	8003df2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d88:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d8c:	f023 0302 	bic.w	r3, r3, #2
 8003d90:	f043 0202 	orr.w	r2, r3, #2
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6839      	ldr	r1, [r7, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff ff6f 	bl	8003c82 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003da4:	e014      	b.n	8003dd0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	3301      	adds	r3, #1
 8003daa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4a18      	ldr	r2, [pc, #96]	@ (8003e10 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d90d      	bls.n	8003dd0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db8:	f023 0312 	bic.w	r3, r3, #18
 8003dbc:	f043 0210 	orr.w	r2, r3, #16
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e01b      	b.n	8003e08 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff ff6d 	bl	8003cb4 <LL_ADC_IsCalibrationOnGoing>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e2      	bne.n	8003da6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de4:	f023 0303 	bic.w	r3, r3, #3
 8003de8:	f043 0201 	orr.w	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003df0:	e005      	b.n	8003dfe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df6:	f043 0210 	orr.w	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	0004de01 	.word	0x0004de01

08003e14 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e1c:	4853      	ldr	r0, [pc, #332]	@ (8003f6c <HAL_ADCEx_InjectedStart+0x158>)
 8003e1e:	f7ff ff0f 	bl	8003c40 <LL_ADC_GetMultimode>
 8003e22:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff ff7e 	bl	8003d2a <LL_ADC_INJ_IsConversionOngoing>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8003e34:	2302      	movs	r3, #2
 8003e36:	e094      	b.n	8003f62 <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e42:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e4a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d107      	bne.n	8003e68 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5c:	f043 0220 	orr.w	r2, r3, #32
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e07c      	b.n	8003f62 <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_ADCEx_InjectedStart+0x62>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e075      	b.n	8003f62 <HAL_ADCEx_InjectedStart+0x14e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff fcdc 	bl	800383c <ADC_Enable>
 8003e84:	4603      	mov	r3, r0
 8003e86:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d164      	bne.n	8003f58 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d006      	beq.n	8003ea8 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e9e:	f023 0208 	bic.w	r2, r3, #8
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	661a      	str	r2, [r3, #96]	@ 0x60
 8003ea6:	e002      	b.n	8003eae <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003eb6:	f023 0301 	bic.w	r3, r3, #1
 8003eba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8003f70 <HAL_ADCEx_InjectedStart+0x15c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d002      	beq.n	8003ed2 <HAL_ADCEx_InjectedStart+0xbe>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	e001      	b.n	8003ed6 <HAL_ADCEx_InjectedStart+0xc2>
 8003ed2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6812      	ldr	r2, [r2, #0]
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d002      	beq.n	8003ee4 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d105      	bne.n	8003ef0 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2260      	movs	r2, #96	@ 0x60
 8003ef6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1a      	ldr	r2, [pc, #104]	@ (8003f70 <HAL_ADCEx_InjectedStart+0x15c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d002      	beq.n	8003f10 <HAL_ADCEx_InjectedStart+0xfc>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	e001      	b.n	8003f14 <HAL_ADCEx_InjectedStart+0x100>
 8003f10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d008      	beq.n	8003f2e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b06      	cmp	r3, #6
 8003f26:	d002      	beq.n	8003f2e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b07      	cmp	r3, #7
 8003f2c:	d10d      	bne.n	8003f4a <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff fe26 	bl	8003b84 <LL_ADC_INJ_GetTrigAuto>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d110      	bne.n	8003f60 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff fedd 	bl	8003d02 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003f48:	e00a      	b.n	8003f60 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f56:	e003      	b.n	8003f60 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	50000300 	.word	0x50000300
 8003f70:	50000100 	.word	0x50000100

08003f74 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f7c:	486e      	ldr	r0, [pc, #440]	@ (8004138 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8003f7e:	f7ff fe5f 	bl	8003c40 <LL_ADC_GetMultimode>
 8003f82:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fece 	bl	8003d2a <LL_ADC_INJ_IsConversionOngoing>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
 8003f96:	e0ca      	b.n	800412e <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fa2:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003faa:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d107      	bne.n	8003fc8 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fbc:	f043 0220 	orr.w	r2, r3, #32
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0b2      	b.n	800412e <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_ADCEx_InjectedStart_IT+0x62>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e0ab      	b.n	800412e <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff fc2c 	bl	800383c <ADC_Enable>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f040 809a 	bne.w	8004124 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d006      	beq.n	800400a <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004000:	f023 0208 	bic.w	r2, r3, #8
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	661a      	str	r2, [r3, #96]	@ 0x60
 8004008:	e002      	b.n	8004010 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004014:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004018:	f023 0301 	bic.w	r3, r3, #1
 800401c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a44      	ldr	r2, [pc, #272]	@ (800413c <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d002      	beq.n	8004034 <HAL_ADCEx_InjectedStart_IT+0xc0>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	e001      	b.n	8004038 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8004034:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	4293      	cmp	r3, r2
 800403e:	d002      	beq.n	8004046 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d105      	bne.n	8004052 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2260      	movs	r2, #96	@ 0x60
 8004058:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800407e:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	2b08      	cmp	r3, #8
 8004086:	d110      	bne.n	80040aa <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0220 	bic.w	r2, r2, #32
 8004096:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040a6:	605a      	str	r2, [r3, #4]
          break;
 80040a8:	e010      	b.n	80040cc <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040b8:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0220 	orr.w	r2, r2, #32
 80040c8:	605a      	str	r2, [r3, #4]
          break;
 80040ca:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1a      	ldr	r2, [pc, #104]	@ (800413c <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d002      	beq.n	80040dc <HAL_ADCEx_InjectedStart_IT+0x168>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	e001      	b.n	80040e0 <HAL_ADCEx_InjectedStart_IT+0x16c>
 80040dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d008      	beq.n	80040fa <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b06      	cmp	r3, #6
 80040f2:	d002      	beq.n	80040fa <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2b07      	cmp	r3, #7
 80040f8:	d10d      	bne.n	8004116 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff fd40 	bl	8003b84 <LL_ADC_INJ_GetTrigAuto>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d110      	bne.n	800412c <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fdf7 	bl	8003d02 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004114:	e00a      	b.n	800412c <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004122:	e003      	b.n	800412c <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800412c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	50000300 	.word	0x50000300
 800413c:	50000100 	.word	0x50000100

08004140 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b0b6      	sub	sp, #216	@ 0xd8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d102      	bne.n	80041ba <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80041b4:	2302      	movs	r3, #2
 80041b6:	f000 bcb5 	b.w	8004b24 <HAL_ADCEx_InjectedConfigChannel+0x994>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d130      	bne.n	8004234 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b09      	cmp	r3, #9
 80041d8:	d179      	bne.n	80042ce <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d010      	beq.n	8004204 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	0e9b      	lsrs	r3, r3, #26
 80041e8:	025b      	lsls	r3, r3, #9
 80041ea:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f2:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80041f6:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004202:	e007      	b.n	8004214 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	0e9b      	lsrs	r3, r3, #26
 800420a:	025b      	lsls	r3, r3, #9
 800420c:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8004210:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800421a:	4b84      	ldr	r3, [pc, #528]	@ (800442c <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 800421c:	4013      	ands	r3, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004226:	430b      	orrs	r3, r1
 8004228:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004230:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004232:	e04c      	b.n	80042ce <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004238:	2b00      	cmp	r3, #0
 800423a:	d11d      	bne.n	8004278 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	6a1a      	ldr	r2, [r3, #32]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00d      	beq.n	800426e <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425c:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004260:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800426c:	e004      	b.n	8004278 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	3b01      	subs	r3, #1
 8004274:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	0e9b      	lsrs	r3, r3, #26
 800427e:	f003 021f 	and.w	r2, r3, #31
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800429c:	1e5a      	subs	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80042a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042be:	4b5b      	ldr	r3, [pc, #364]	@ (800442c <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	430b      	orrs	r3, r1
 80042cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fd29 	bl	8003d2a <LL_ADC_INJ_IsConversionOngoing>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d124      	bne.n	8004328 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d112      	bne.n	800430e <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80042f8:	055a      	lsls	r2, r3, #21
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004300:	051b      	lsls	r3, r3, #20
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	e00c      	b.n	8004328 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800431e:	055a      	lsls	r2, r3, #21
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fcd5 	bl	8003cdc <LL_ADC_REG_IsConversionOngoing>
 8004332:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fcf5 	bl	8003d2a <LL_ADC_INJ_IsConversionOngoing>
 8004340:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004348:	2b00      	cmp	r3, #0
 800434a:	f040 822e 	bne.w	80047aa <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800434e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004352:	2b00      	cmp	r3, #0
 8004354:	f040 8229 	bne.w	80047aa <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	2b00      	cmp	r3, #0
 8004366:	d116      	bne.n	8004396 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800436e:	2b01      	cmp	r3, #1
 8004370:	d108      	bne.n	8004384 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8004380:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004382:	e01f      	b.n	80043c4 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004392:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004394:	e016      	b.n	80043c4 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800439c:	2b01      	cmp	r3, #1
 800439e:	d109      	bne.n	80043b4 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80043b2:	e007      	b.n	80043c4 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80043c2:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d110      	bne.n	80043f0 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e0:	430b      	orrs	r3, r1
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0202 	orr.w	r2, r2, #2
 80043ec:	611a      	str	r2, [r3, #16]
 80043ee:	e007      	b.n	8004400 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0202 	bic.w	r2, r2, #2
 80043fe:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004408:	d112      	bne.n	8004430 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2200      	movs	r2, #0
 8004414:	4619      	mov	r1, r3
 8004416:	f7ff fbc3 	bl	8003ba0 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff fb9b 	bl	8003b5e <LL_ADC_SetSamplingTimeCommonConfig>
 8004428:	e011      	b.n	800444e <HAL_ADCEx_InjectedConfigChannel+0x2be>
 800442a:	bf00      	nop
 800442c:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 800443c:	461a      	mov	r2, r3
 800443e:	f7ff fbaf 	bl	8003ba0 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2100      	movs	r1, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fb88 	bl	8003b5e <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	695a      	ldr	r2, [r3, #20]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	08db      	lsrs	r3, r3, #3
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2b04      	cmp	r3, #4
 800446e:	d022      	beq.n	80044b6 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	6919      	ldr	r1, [r3, #16]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004480:	f7ff fae2 	bl	8003a48 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	6919      	ldr	r1, [r3, #16]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	461a      	mov	r2, r3
 8004492:	f7ff fb2e 	bl	8003af2 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d102      	bne.n	80044ac <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80044a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044aa:	e000      	b.n	80044ae <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80044ac:	2300      	movs	r3, #0
 80044ae:	461a      	mov	r2, r3
 80044b0:	f7ff fb3a 	bl	8003b28 <LL_ADC_SetOffsetSaturation>
 80044b4:	e179      	b.n	80047aa <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fae7 	bl	8003a90 <LL_ADC_GetOffsetChannel>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <HAL_ADCEx_InjectedConfigChannel+0x352>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2100      	movs	r1, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fadc 	bl	8003a90 <LL_ADC_GetOffsetChannel>
 80044d8:	4603      	mov	r3, r0
 80044da:	0e9b      	lsrs	r3, r3, #26
 80044dc:	f003 021f 	and.w	r2, r3, #31
 80044e0:	e01e      	b.n	8004520 <HAL_ADCEx_InjectedConfigChannel+0x390>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2100      	movs	r1, #0
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fad1 	bl	8003a90 <LL_ADC_GetOffsetChannel>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80044f8:	fa93 f3a3 	rbit	r3, r3
 80044fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004500:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004504:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004508:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004510:	2320      	movs	r3, #32
 8004512:	e004      	b.n	800451e <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004514:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004518:	fab3 f383 	clz	r3, r3
 800451c:	b2db      	uxtb	r3, r3
 800451e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004528:	2b00      	cmp	r3, #0
 800452a:	d105      	bne.n	8004538 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	0e9b      	lsrs	r3, r3, #26
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	e018      	b.n	800456a <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004540:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004544:	fa93 f3a3 	rbit	r3, r3
 8004548:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800454c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004550:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004554:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 800455c:	2320      	movs	r3, #32
 800455e:	e004      	b.n	800456a <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8004560:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004564:	fab3 f383 	clz	r3, r3
 8004568:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800456a:	429a      	cmp	r2, r3
 800456c:	d106      	bne.n	800457c <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2200      	movs	r2, #0
 8004574:	2100      	movs	r1, #0
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff faa0 	bl	8003abc <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2101      	movs	r1, #1
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fa84 	bl	8003a90 <LL_ADC_GetOffsetChannel>
 8004588:	4603      	mov	r3, r0
 800458a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10a      	bne.n	80045a8 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2101      	movs	r1, #1
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fa79 	bl	8003a90 <LL_ADC_GetOffsetChannel>
 800459e:	4603      	mov	r3, r0
 80045a0:	0e9b      	lsrs	r3, r3, #26
 80045a2:	f003 021f 	and.w	r2, r3, #31
 80045a6:	e01e      	b.n	80045e6 <HAL_ADCEx_InjectedConfigChannel+0x456>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2101      	movs	r1, #1
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff fa6e 	bl	8003a90 <LL_ADC_GetOffsetChannel>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045be:	fa93 f3a3 	rbit	r3, r3
 80045c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80045c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80045ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 80045d6:	2320      	movs	r3, #32
 80045d8:	e004      	b.n	80045e4 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 80045da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80045de:	fab3 f383 	clz	r3, r3
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d105      	bne.n	80045fe <HAL_ADCEx_InjectedConfigChannel+0x46e>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	0e9b      	lsrs	r3, r3, #26
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	e018      	b.n	8004630 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800460a:	fa93 f3a3 	rbit	r3, r3
 800460e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004612:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004616:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800461a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004622:	2320      	movs	r3, #32
 8004624:	e004      	b.n	8004630 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004626:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800462a:	fab3 f383 	clz	r3, r3
 800462e:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004630:	429a      	cmp	r2, r3
 8004632:	d106      	bne.n	8004642 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2200      	movs	r2, #0
 800463a:	2101      	movs	r1, #1
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff fa3d 	bl	8003abc <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2102      	movs	r1, #2
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff fa21 	bl	8003a90 <LL_ADC_GetOffsetChannel>
 800464e:	4603      	mov	r3, r0
 8004650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10a      	bne.n	800466e <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2102      	movs	r1, #2
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fa16 	bl	8003a90 <LL_ADC_GetOffsetChannel>
 8004664:	4603      	mov	r3, r0
 8004666:	0e9b      	lsrs	r3, r3, #26
 8004668:	f003 021f 	and.w	r2, r3, #31
 800466c:	e01e      	b.n	80046ac <HAL_ADCEx_InjectedConfigChannel+0x51c>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2102      	movs	r1, #2
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff fa0b 	bl	8003a90 <LL_ADC_GetOffsetChannel>
 800467a:	4603      	mov	r3, r0
 800467c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004680:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004684:	fa93 f3a3 	rbit	r3, r3
 8004688:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800468c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004690:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004694:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 800469c:	2320      	movs	r3, #32
 800469e:	e004      	b.n	80046aa <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80046a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046a4:	fab3 f383 	clz	r3, r3
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d105      	bne.n	80046c4 <HAL_ADCEx_InjectedConfigChannel+0x534>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	0e9b      	lsrs	r3, r3, #26
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	e014      	b.n	80046ee <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046cc:	fa93 f3a3 	rbit	r3, r3
 80046d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80046d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80046d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 80046e0:	2320      	movs	r3, #32
 80046e2:	e004      	b.n	80046ee <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 80046e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046e8:	fab3 f383 	clz	r3, r3
 80046ec:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d106      	bne.n	8004700 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2200      	movs	r2, #0
 80046f8:	2102      	movs	r1, #2
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff f9de 	bl	8003abc <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2103      	movs	r1, #3
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff f9c2 	bl	8003a90 <LL_ADC_GetOffsetChannel>
 800470c:	4603      	mov	r3, r0
 800470e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10a      	bne.n	800472c <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2103      	movs	r1, #3
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff f9b7 	bl	8003a90 <LL_ADC_GetOffsetChannel>
 8004722:	4603      	mov	r3, r0
 8004724:	0e9b      	lsrs	r3, r3, #26
 8004726:	f003 021f 	and.w	r2, r3, #31
 800472a:	e017      	b.n	800475c <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2103      	movs	r1, #3
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff f9ac 	bl	8003a90 <LL_ADC_GetOffsetChannel>
 8004738:	4603      	mov	r3, r0
 800473a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800473e:	fa93 f3a3 	rbit	r3, r3
 8004742:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004746:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004748:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 800474e:	2320      	movs	r3, #32
 8004750:	e003      	b.n	800475a <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004754:	fab3 f383 	clz	r3, r3
 8004758:	b2db      	uxtb	r3, r3
 800475a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	0e9b      	lsrs	r3, r3, #26
 800476e:	f003 031f 	and.w	r3, r3, #31
 8004772:	e011      	b.n	8004798 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800477c:	fa93 f3a3 	rbit	r3, r3
 8004780:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004782:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004784:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004786:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 800478c:	2320      	movs	r3, #32
 800478e:	e003      	b.n	8004798 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004790:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004792:	fab3 f383 	clz	r3, r3
 8004796:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004798:	429a      	cmp	r2, r3
 800479a:	d106      	bne.n	80047aa <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2200      	movs	r2, #0
 80047a2:	2103      	movs	r1, #3
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff f989 	bl	8003abc <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fa54 	bl	8003c5c <LL_ADC_IsEnabled>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f040 8140 	bne.w	8004a3c <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6818      	ldr	r0, [r3, #0]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	6819      	ldr	r1, [r3, #0]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	461a      	mov	r2, r3
 80047ca:	f7ff fa15 	bl	8003bf8 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	4a8f      	ldr	r2, [pc, #572]	@ (8004a10 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	f040 8131 	bne.w	8004a3c <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10b      	bne.n	8004802 <HAL_ADCEx_InjectedConfigChannel+0x672>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	0e9b      	lsrs	r3, r3, #26
 80047f0:	3301      	adds	r3, #1
 80047f2:	f003 031f 	and.w	r3, r3, #31
 80047f6:	2b09      	cmp	r3, #9
 80047f8:	bf94      	ite	ls
 80047fa:	2301      	movls	r3, #1
 80047fc:	2300      	movhi	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	e019      	b.n	8004836 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004808:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800480a:	fa93 f3a3 	rbit	r3, r3
 800480e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004812:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004814:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 800481a:	2320      	movs	r3, #32
 800481c:	e003      	b.n	8004826 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 800481e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	b2db      	uxtb	r3, r3
 8004826:	3301      	adds	r3, #1
 8004828:	f003 031f 	and.w	r3, r3, #31
 800482c:	2b09      	cmp	r3, #9
 800482e:	bf94      	ite	ls
 8004830:	2301      	movls	r3, #1
 8004832:	2300      	movhi	r3, #0
 8004834:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004836:	2b00      	cmp	r3, #0
 8004838:	d079      	beq.n	800492e <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004842:	2b00      	cmp	r3, #0
 8004844:	d107      	bne.n	8004856 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	0e9b      	lsrs	r3, r3, #26
 800484c:	3301      	adds	r3, #1
 800484e:	069b      	lsls	r3, r3, #26
 8004850:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004854:	e015      	b.n	8004882 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800485e:	fa93 f3a3 	rbit	r3, r3
 8004862:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004866:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 800486e:	2320      	movs	r3, #32
 8004870:	e003      	b.n	800487a <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004874:	fab3 f383 	clz	r3, r3
 8004878:	b2db      	uxtb	r3, r3
 800487a:	3301      	adds	r3, #1
 800487c:	069b      	lsls	r3, r3, #26
 800487e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800488a:	2b00      	cmp	r3, #0
 800488c:	d109      	bne.n	80048a2 <HAL_ADCEx_InjectedConfigChannel+0x712>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	0e9b      	lsrs	r3, r3, #26
 8004894:	3301      	adds	r3, #1
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	2101      	movs	r1, #1
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	e017      	b.n	80048d2 <HAL_ADCEx_InjectedConfigChannel+0x742>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80048b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048b2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80048b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80048ba:	2320      	movs	r3, #32
 80048bc:	e003      	b.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 80048be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048c0:	fab3 f383 	clz	r3, r3
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	3301      	adds	r3, #1
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	2101      	movs	r1, #1
 80048ce:	fa01 f303 	lsl.w	r3, r1, r3
 80048d2:	ea42 0103 	orr.w	r1, r2, r3
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10a      	bne.n	80048f8 <HAL_ADCEx_InjectedConfigChannel+0x768>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	0e9b      	lsrs	r3, r3, #26
 80048e8:	3301      	adds	r3, #1
 80048ea:	f003 021f 	and.w	r2, r3, #31
 80048ee:	4613      	mov	r3, r2
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	4413      	add	r3, r2
 80048f4:	051b      	lsls	r3, r3, #20
 80048f6:	e018      	b.n	800492a <HAL_ADCEx_InjectedConfigChannel+0x79a>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004900:	fa93 f3a3 	rbit	r3, r3
 8004904:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004908:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800490a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004910:	2320      	movs	r3, #32
 8004912:	e003      	b.n	800491c <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004916:	fab3 f383 	clz	r3, r3
 800491a:	b2db      	uxtb	r3, r3
 800491c:	3301      	adds	r3, #1
 800491e:	f003 021f 	and.w	r2, r3, #31
 8004922:	4613      	mov	r3, r2
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	4413      	add	r3, r2
 8004928:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800492a:	430b      	orrs	r3, r1
 800492c:	e081      	b.n	8004a32 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004936:	2b00      	cmp	r3, #0
 8004938:	d107      	bne.n	800494a <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	0e9b      	lsrs	r3, r3, #26
 8004940:	3301      	adds	r3, #1
 8004942:	069b      	lsls	r3, r3, #26
 8004944:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004948:	e015      	b.n	8004976 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800495c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004962:	2320      	movs	r3, #32
 8004964:	e003      	b.n	800496e <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004968:	fab3 f383 	clz	r3, r3
 800496c:	b2db      	uxtb	r3, r3
 800496e:	3301      	adds	r3, #1
 8004970:	069b      	lsls	r3, r3, #26
 8004972:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	0e9b      	lsrs	r3, r3, #26
 8004988:	3301      	adds	r3, #1
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	2101      	movs	r1, #1
 8004990:	fa01 f303 	lsl.w	r3, r1, r3
 8004994:	e017      	b.n	80049c6 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	fa93 f3a3 	rbit	r3, r3
 80049a2:	61bb      	str	r3, [r7, #24]
  return result;
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80049ae:	2320      	movs	r3, #32
 80049b0:	e003      	b.n	80049ba <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	fab3 f383 	clz	r3, r3
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	3301      	adds	r3, #1
 80049bc:	f003 031f 	and.w	r3, r3, #31
 80049c0:	2101      	movs	r1, #1
 80049c2:	fa01 f303 	lsl.w	r3, r1, r3
 80049c6:	ea42 0103 	orr.w	r1, r2, r3
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10d      	bne.n	80049f2 <HAL_ADCEx_InjectedConfigChannel+0x862>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	0e9b      	lsrs	r3, r3, #26
 80049dc:	3301      	adds	r3, #1
 80049de:	f003 021f 	and.w	r2, r3, #31
 80049e2:	4613      	mov	r3, r2
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	4413      	add	r3, r2
 80049e8:	3b1e      	subs	r3, #30
 80049ea:	051b      	lsls	r3, r3, #20
 80049ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049f0:	e01e      	b.n	8004a30 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	fa93 f3a3 	rbit	r3, r3
 80049fe:	60fb      	str	r3, [r7, #12]
  return result;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004a0a:	2320      	movs	r3, #32
 8004a0c:	e006      	b.n	8004a1c <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004a0e:	bf00      	nop
 8004a10:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	fab3 f383 	clz	r3, r3
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	f003 021f 	and.w	r2, r3, #31
 8004a22:	4613      	mov	r3, r2
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	4413      	add	r3, r2
 8004a28:	3b1e      	subs	r3, #30
 8004a2a:	051b      	lsls	r3, r3, #20
 8004a2c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a30:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a36:	4619      	mov	r1, r3
 8004a38:	f7ff f8b2 	bl	8003ba0 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4b3a      	ldr	r3, [pc, #232]	@ (8004b2c <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d067      	beq.n	8004b18 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a48:	4839      	ldr	r0, [pc, #228]	@ (8004b30 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004a4a:	f7fe ffef 	bl	8003a2c <LL_ADC_GetCommonPathInternalCh>
 8004a4e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a37      	ldr	r2, [pc, #220]	@ (8004b34 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d004      	beq.n	8004a66 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a35      	ldr	r2, [pc, #212]	@ (8004b38 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d127      	bne.n	8004ab6 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d121      	bne.n	8004ab6 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a7a:	d14d      	bne.n	8004b18 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a84:	4619      	mov	r1, r3
 8004a86:	482a      	ldr	r0, [pc, #168]	@ (8004b30 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004a88:	f7fe ffbd 	bl	8003a06 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8004b3c <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	099b      	lsrs	r3, r3, #6
 8004a92:	4a2b      	ldr	r2, [pc, #172]	@ (8004b40 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004a94:	fba2 2303 	umull	r2, r3, r2, r3
 8004a98:	099a      	lsrs	r2, r3, #6
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004aa4:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004aa6:	e002      	b.n	8004aae <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f9      	bne.n	8004aa8 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ab4:	e030      	b.n	8004b18 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a22      	ldr	r2, [pc, #136]	@ (8004b44 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d113      	bne.n	8004ae8 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ac4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10d      	bne.n	8004ae8 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b48 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d020      	beq.n	8004b18 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ad6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4813      	ldr	r0, [pc, #76]	@ (8004b30 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004ae2:	f7fe ff90 	bl	8003a06 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ae6:	e017      	b.n	8004b18 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a17      	ldr	r2, [pc, #92]	@ (8004b4c <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d112      	bne.n	8004b18 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004af2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10c      	bne.n	8004b18 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a11      	ldr	r2, [pc, #68]	@ (8004b48 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d007      	beq.n	8004b18 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b10:	4619      	mov	r1, r3
 8004b12:	4807      	ldr	r0, [pc, #28]	@ (8004b30 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004b14:	f7fe ff77 	bl	8003a06 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b20:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	37d8      	adds	r7, #216	@ 0xd8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	80080000 	.word	0x80080000
 8004b30:	50000300 	.word	0x50000300
 8004b34:	c3210000 	.word	0xc3210000
 8004b38:	90c00010 	.word	0x90c00010
 8004b3c:	20000000 	.word	0x20000000
 8004b40:	053e2d63 	.word	0x053e2d63
 8004b44:	c7520000 	.word	0xc7520000
 8004b48:	50000100 	.word	0x50000100
 8004b4c:	cb840000 	.word	0xcb840000

08004b50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b0a1      	sub	sp, #132	@ 0x84
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e08b      	b.n	8004c86 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004b76:	2300      	movs	r3, #0
 8004b78:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b86:	d102      	bne.n	8004b8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b88:	4b41      	ldr	r3, [pc, #260]	@ (8004c90 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	e001      	b.n	8004b92 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10b      	bne.n	8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9c:	f043 0220 	orr.w	r2, r3, #32
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e06a      	b.n	8004c86 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff f892 	bl	8003cdc <LL_ADC_REG_IsConversionOngoing>
 8004bb8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff f88c 	bl	8003cdc <LL_ADC_REG_IsConversionOngoing>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d14c      	bne.n	8004c64 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004bca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d149      	bne.n	8004c64 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bd0:	4b30      	ldr	r3, [pc, #192]	@ (8004c94 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004bd2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d028      	beq.n	8004c2e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004bdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	6859      	ldr	r1, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004bee:	035b      	lsls	r3, r3, #13
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bf6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bf8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004bfc:	f7ff f82e 	bl	8003c5c <LL_ADC_IsEnabled>
 8004c00:	4604      	mov	r4, r0
 8004c02:	4823      	ldr	r0, [pc, #140]	@ (8004c90 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c04:	f7ff f82a 	bl	8003c5c <LL_ADC_IsEnabled>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4323      	orrs	r3, r4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d133      	bne.n	8004c78 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c18:	f023 030f 	bic.w	r3, r3, #15
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	6811      	ldr	r1, [r2, #0]
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	6892      	ldr	r2, [r2, #8]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	431a      	orrs	r2, r3
 8004c28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c2a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c2c:	e024      	b.n	8004c78 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c38:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c3a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c3e:	f7ff f80d 	bl	8003c5c <LL_ADC_IsEnabled>
 8004c42:	4604      	mov	r4, r0
 8004c44:	4812      	ldr	r0, [pc, #72]	@ (8004c90 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c46:	f7ff f809 	bl	8003c5c <LL_ADC_IsEnabled>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4323      	orrs	r3, r4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d112      	bne.n	8004c78 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004c52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c5a:	f023 030f 	bic.w	r3, r3, #15
 8004c5e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004c60:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c62:	e009      	b.n	8004c78 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c68:	f043 0220 	orr.w	r2, r3, #32
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004c76:	e000      	b.n	8004c7a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c78:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c82:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3784      	adds	r7, #132	@ 0x84
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd90      	pop	{r4, r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	50000100 	.word	0x50000100
 8004c94:	50000300 	.word	0x50000300

08004c98 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004ca0:	4b05      	ldr	r3, [pc, #20]	@ (8004cb8 <LL_EXTI_EnableIT_0_31+0x20>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	4904      	ldr	r1, [pc, #16]	@ (8004cb8 <LL_EXTI_EnableIT_0_31+0x20>)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	600b      	str	r3, [r1, #0]
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	40010400 	.word	0x40010400

08004cbc <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004cc4:	4b06      	ldr	r3, [pc, #24]	@ (8004ce0 <LL_EXTI_DisableIT_0_31+0x24>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	4904      	ldr	r1, [pc, #16]	@ (8004ce0 <LL_EXTI_DisableIT_0_31+0x24>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	600b      	str	r3, [r1, #0]
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40010400 	.word	0x40010400

08004ce4 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004cec:	4b05      	ldr	r3, [pc, #20]	@ (8004d04 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	4904      	ldr	r1, [pc, #16]	@ (8004d04 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	604b      	str	r3, [r1, #4]

}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40010400 	.word	0x40010400

08004d08 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004d10:	4b06      	ldr	r3, [pc, #24]	@ (8004d2c <LL_EXTI_DisableEvent_0_31+0x24>)
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	43db      	mvns	r3, r3
 8004d18:	4904      	ldr	r1, [pc, #16]	@ (8004d2c <LL_EXTI_DisableEvent_0_31+0x24>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	604b      	str	r3, [r1, #4]
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40010400 	.word	0x40010400

08004d30 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004d38:	4b05      	ldr	r3, [pc, #20]	@ (8004d50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	4904      	ldr	r1, [pc, #16]	@ (8004d50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	608b      	str	r3, [r1, #8]

}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	40010400 	.word	0x40010400

08004d54 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004d5c:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	43db      	mvns	r3, r3
 8004d64:	4904      	ldr	r1, [pc, #16]	@ (8004d78 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	608b      	str	r3, [r1, #8]

}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40010400 	.word	0x40010400

08004d7c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004d84:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	4904      	ldr	r1, [pc, #16]	@ (8004d9c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60cb      	str	r3, [r1, #12]
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	40010400 	.word	0x40010400

08004da0 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004da8:	4b06      	ldr	r3, [pc, #24]	@ (8004dc4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	43db      	mvns	r3, r3
 8004db0:	4904      	ldr	r1, [pc, #16]	@ (8004dc4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	60cb      	str	r3, [r1, #12]
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40010400 	.word	0x40010400

08004dc8 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004dd0:	4b07      	ldr	r3, [pc, #28]	@ (8004df0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004dd2:	695a      	ldr	r2, [r3, #20]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d101      	bne.n	8004de2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	40010400 	.word	0x40010400

08004df4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004dfc:	4a04      	ldr	r2, [pc, #16]	@ (8004e10 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6153      	str	r3, [r2, #20]
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40010400 	.word	0x40010400

08004e14 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d102      	bne.n	8004e30 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	77fb      	strb	r3, [r7, #31]
 8004e2e:	e0bc      	b.n	8004faa <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e3e:	d102      	bne.n	8004e46 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	77fb      	strb	r3, [r7, #31]
 8004e44:	e0b1      	b.n	8004faa <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	7f5b      	ldrb	r3, [r3, #29]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d108      	bne.n	8004e62 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7fc f9d9 	bl	8001214 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e6c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	4b48      	ldr	r3, [pc, #288]	@ (8004fb4 <HAL_COMP_Init+0x1a0>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6812      	ldr	r2, [r2, #0]
 8004e9a:	6979      	ldr	r1, [r7, #20]
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d016      	beq.n	8004edc <HAL_COMP_Init+0xc8>
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d113      	bne.n	8004edc <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004eb4:	4b40      	ldr	r3, [pc, #256]	@ (8004fb8 <HAL_COMP_Init+0x1a4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	099b      	lsrs	r3, r3, #6
 8004eba:	4a40      	ldr	r2, [pc, #256]	@ (8004fbc <HAL_COMP_Init+0x1a8>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	099b      	lsrs	r3, r3, #6
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004ece:	e002      	b.n	8004ed6 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1f9      	bne.n	8004ed0 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a37      	ldr	r2, [pc, #220]	@ (8004fc0 <HAL_COMP_Init+0x1ac>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d012      	beq.n	8004f0c <HAL_COMP_Init+0xf8>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a36      	ldr	r2, [pc, #216]	@ (8004fc4 <HAL_COMP_Init+0x1b0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00a      	beq.n	8004f06 <HAL_COMP_Init+0xf2>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a34      	ldr	r2, [pc, #208]	@ (8004fc8 <HAL_COMP_Init+0x1b4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d102      	bne.n	8004f00 <HAL_COMP_Init+0xec>
 8004efa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004efe:	e007      	b.n	8004f10 <HAL_COMP_Init+0xfc>
 8004f00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004f04:	e004      	b.n	8004f10 <HAL_COMP_Init+0xfc>
 8004f06:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004f0a:	e001      	b.n	8004f10 <HAL_COMP_Init+0xfc>
 8004f0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004f10:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d037      	beq.n	8004f8e <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f003 0310 	and.w	r3, r3, #16
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8004f2a:	6938      	ldr	r0, [r7, #16]
 8004f2c:	f7ff ff00 	bl	8004d30 <LL_EXTI_EnableRisingTrig_0_31>
 8004f30:	e002      	b.n	8004f38 <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8004f32:	6938      	ldr	r0, [r7, #16]
 8004f34:	f7ff ff0e 	bl	8004d54 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004f44:	6938      	ldr	r0, [r7, #16]
 8004f46:	f7ff ff19 	bl	8004d7c <LL_EXTI_EnableFallingTrig_0_31>
 8004f4a:	e002      	b.n	8004f52 <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8004f4c:	6938      	ldr	r0, [r7, #16]
 8004f4e:	f7ff ff27 	bl	8004da0 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 8004f52:	6938      	ldr	r0, [r7, #16]
 8004f54:	f7ff ff4e 	bl	8004df4 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 8004f64:	6938      	ldr	r0, [r7, #16]
 8004f66:	f7ff febd 	bl	8004ce4 <LL_EXTI_EnableEvent_0_31>
 8004f6a:	e002      	b.n	8004f72 <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004f6c:	6938      	ldr	r0, [r7, #16]
 8004f6e:	f7ff fecb 	bl	8004d08 <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 8004f7e:	6938      	ldr	r0, [r7, #16]
 8004f80:	f7ff fe8a 	bl	8004c98 <LL_EXTI_EnableIT_0_31>
 8004f84:	e009      	b.n	8004f9a <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 8004f86:	6938      	ldr	r0, [r7, #16]
 8004f88:	f7ff fe98 	bl	8004cbc <LL_EXTI_DisableIT_0_31>
 8004f8c:	e005      	b.n	8004f9a <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 8004f8e:	6938      	ldr	r0, [r7, #16]
 8004f90:	f7ff feba 	bl	8004d08 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8004f94:	6938      	ldr	r0, [r7, #16]
 8004f96:	f7ff fe91 	bl	8004cbc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	7f5b      	ldrb	r3, [r3, #29]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d102      	bne.n	8004faa <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8004faa:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3720      	adds	r7, #32
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	ff007e0f 	.word	0xff007e0f
 8004fb8:	20000000 	.word	0x20000000
 8004fbc:	053e2d63 	.word	0x053e2d63
 8004fc0:	40010200 	.word	0x40010200
 8004fc4:	40010204 	.word	0x40010204
 8004fc8:	40010208 	.word	0x40010208

08004fcc <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d102      	bne.n	8004fe8 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	73fb      	strb	r3, [r7, #15]
 8004fe6:	e02e      	b.n	8005046 <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ff6:	d102      	bne.n	8004ffe <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
 8004ffc:	e023      	b.n	8005046 <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	7f5b      	ldrb	r3, [r3, #29]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	d11c      	bne.n	8005042 <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0201 	orr.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 800501e:	4b0d      	ldr	r3, [pc, #52]	@ (8005054 <HAL_COMP_Start+0x88>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a0d      	ldr	r2, [pc, #52]	@ (8005058 <HAL_COMP_Start+0x8c>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	0cda      	lsrs	r2, r3, #19
 800502a:	4613      	mov	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005032:	e002      	b.n	800503a <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	3b01      	subs	r3, #1
 8005038:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f9      	bne.n	8005034 <HAL_COMP_Start+0x68>
 8005040:	e001      	b.n	8005046 <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	20000000 	.word	0x20000000
 8005058:	431bde83 	.word	0x431bde83

0800505c <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a17      	ldr	r2, [pc, #92]	@ (80050c8 <HAL_COMP_IRQHandler+0x6c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d012      	beq.n	8005094 <HAL_COMP_IRQHandler+0x38>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a16      	ldr	r2, [pc, #88]	@ (80050cc <HAL_COMP_IRQHandler+0x70>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00a      	beq.n	800508e <HAL_COMP_IRQHandler+0x32>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a14      	ldr	r2, [pc, #80]	@ (80050d0 <HAL_COMP_IRQHandler+0x74>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d102      	bne.n	8005088 <HAL_COMP_IRQHandler+0x2c>
 8005082:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005086:	e007      	b.n	8005098 <HAL_COMP_IRQHandler+0x3c>
 8005088:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800508c:	e004      	b.n	8005098 <HAL_COMP_IRQHandler+0x3c>
 800508e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005092:	e001      	b.n	8005098 <HAL_COMP_IRQHandler+0x3c>
 8005094:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005098:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800509e:	68b8      	ldr	r0, [r7, #8]
 80050a0:	f7ff fe92 	bl	8004dc8 <LL_EXTI_IsActiveFlag_0_31>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 80050aa:	2301      	movs	r3, #1
 80050ac:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_COMP_IRQHandler+0x64>
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
    }
#else
    LL_EXTI_ClearFlag_0_31(exti_line);
 80050b4:	68b8      	ldr	r0, [r7, #8]
 80050b6:	f7ff fe9d 	bl	8004df4 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f80a 	bl	80050d4 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 80050c0:	bf00      	nop
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40010200 	.word	0x40010200
 80050cc:	40010204 	.word	0x40010204
 80050d0:	40010208 	.word	0x40010208

080050d4 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050f8:	4b0c      	ldr	r3, [pc, #48]	@ (800512c <__NVIC_SetPriorityGrouping+0x44>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005104:	4013      	ands	r3, r2
 8005106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005110:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800511a:	4a04      	ldr	r2, [pc, #16]	@ (800512c <__NVIC_SetPriorityGrouping+0x44>)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	60d3      	str	r3, [r2, #12]
}
 8005120:	bf00      	nop
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	e000ed00 	.word	0xe000ed00

08005130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005134:	4b04      	ldr	r3, [pc, #16]	@ (8005148 <__NVIC_GetPriorityGrouping+0x18>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	0a1b      	lsrs	r3, r3, #8
 800513a:	f003 0307 	and.w	r3, r3, #7
}
 800513e:	4618      	mov	r0, r3
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	e000ed00 	.word	0xe000ed00

0800514c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515a:	2b00      	cmp	r3, #0
 800515c:	db0b      	blt.n	8005176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	f003 021f 	and.w	r2, r3, #31
 8005164:	4907      	ldr	r1, [pc, #28]	@ (8005184 <__NVIC_EnableIRQ+0x38>)
 8005166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	2001      	movs	r0, #1
 800516e:	fa00 f202 	lsl.w	r2, r0, r2
 8005172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	e000e100 	.word	0xe000e100

08005188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	6039      	str	r1, [r7, #0]
 8005192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005198:	2b00      	cmp	r3, #0
 800519a:	db0a      	blt.n	80051b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	490c      	ldr	r1, [pc, #48]	@ (80051d4 <__NVIC_SetPriority+0x4c>)
 80051a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a6:	0112      	lsls	r2, r2, #4
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	440b      	add	r3, r1
 80051ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051b0:	e00a      	b.n	80051c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	4908      	ldr	r1, [pc, #32]	@ (80051d8 <__NVIC_SetPriority+0x50>)
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	3b04      	subs	r3, #4
 80051c0:	0112      	lsls	r2, r2, #4
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	440b      	add	r3, r1
 80051c6:	761a      	strb	r2, [r3, #24]
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	e000e100 	.word	0xe000e100
 80051d8:	e000ed00 	.word	0xe000ed00

080051dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051dc:	b480      	push	{r7}
 80051de:	b089      	sub	sp, #36	@ 0x24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f1c3 0307 	rsb	r3, r3, #7
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	bf28      	it	cs
 80051fa:	2304      	movcs	r3, #4
 80051fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	3304      	adds	r3, #4
 8005202:	2b06      	cmp	r3, #6
 8005204:	d902      	bls.n	800520c <NVIC_EncodePriority+0x30>
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	3b03      	subs	r3, #3
 800520a:	e000      	b.n	800520e <NVIC_EncodePriority+0x32>
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005210:	f04f 32ff 	mov.w	r2, #4294967295
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43da      	mvns	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	401a      	ands	r2, r3
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005224:	f04f 31ff 	mov.w	r1, #4294967295
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	fa01 f303 	lsl.w	r3, r1, r3
 800522e:	43d9      	mvns	r1, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005234:	4313      	orrs	r3, r2
         );
}
 8005236:	4618      	mov	r0, r3
 8005238:	3724      	adds	r7, #36	@ 0x24
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3b01      	subs	r3, #1
 8005250:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005254:	d301      	bcc.n	800525a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005256:	2301      	movs	r3, #1
 8005258:	e00f      	b.n	800527a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800525a:	4a0a      	ldr	r2, [pc, #40]	@ (8005284 <SysTick_Config+0x40>)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3b01      	subs	r3, #1
 8005260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005262:	210f      	movs	r1, #15
 8005264:	f04f 30ff 	mov.w	r0, #4294967295
 8005268:	f7ff ff8e 	bl	8005188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800526c:	4b05      	ldr	r3, [pc, #20]	@ (8005284 <SysTick_Config+0x40>)
 800526e:	2200      	movs	r2, #0
 8005270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005272:	4b04      	ldr	r3, [pc, #16]	@ (8005284 <SysTick_Config+0x40>)
 8005274:	2207      	movs	r2, #7
 8005276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	e000e010 	.word	0xe000e010

08005288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff ff29 	bl	80050e8 <__NVIC_SetPriorityGrouping>
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b086      	sub	sp, #24
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	4603      	mov	r3, r0
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052ac:	f7ff ff40 	bl	8005130 <__NVIC_GetPriorityGrouping>
 80052b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	6978      	ldr	r0, [r7, #20]
 80052b8:	f7ff ff90 	bl	80051dc <NVIC_EncodePriority>
 80052bc:	4602      	mov	r2, r0
 80052be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052c2:	4611      	mov	r1, r2
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff ff5f 	bl	8005188 <__NVIC_SetPriority>
}
 80052ca:	bf00      	nop
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b082      	sub	sp, #8
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	4603      	mov	r3, r0
 80052da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff ff33 	bl	800514c <__NVIC_EnableIRQ>
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7ff ffa4 	bl	8005244 <SysTick_Config>
 80052fc:	4603      	mov	r3, r0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e014      	b.n	8005342 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	791b      	ldrb	r3, [r3, #4]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d105      	bne.n	800532e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7fc f823 	bl	8001374 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2202      	movs	r2, #2
 8005332:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e056      	b.n	800540e <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	795b      	ldrb	r3, [r3, #5]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_DAC_Start+0x20>
 8005368:	2302      	movs	r3, #2
 800536a:	e050      	b.n	800540e <HAL_DAC_Start+0xc2>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2202      	movs	r2, #2
 8005376:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6819      	ldr	r1, [r3, #0]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2201      	movs	r2, #1
 8005386:	409a      	lsls	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005390:	4b22      	ldr	r3, [pc, #136]	@ (800541c <HAL_DAC_Start+0xd0>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	099b      	lsrs	r3, r3, #6
 8005396:	4a22      	ldr	r2, [pc, #136]	@ (8005420 <HAL_DAC_Start+0xd4>)
 8005398:	fba2 2303 	umull	r2, r3, r2, r3
 800539c:	099b      	lsrs	r3, r3, #6
 800539e:	3301      	adds	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80053a2:	e002      	b.n	80053aa <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1f9      	bne.n	80053a4 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10f      	bne.n	80053d6 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d11d      	bne.n	8005400 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	605a      	str	r2, [r3, #4]
 80053d4:	e014      	b.n	8005400 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	f003 0310 	and.w	r3, r3, #16
 80053e6:	2102      	movs	r1, #2
 80053e8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d107      	bne.n	8005400 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0202 	orr.w	r2, r2, #2
 80053fe:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000000 	.word	0x20000000
 8005420:	053e2d63 	.word	0x053e2d63

08005424 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005432:	2300      	movs	r3, #0
 8005434:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e018      	b.n	8005472 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d105      	bne.n	800545e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4413      	add	r3, r2
 8005458:	3308      	adds	r3, #8
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	e004      	b.n	8005468 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4413      	add	r3, r2
 8005464:	3314      	adds	r3, #20
 8005466:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	461a      	mov	r2, r3
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	@ 0x28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <HAL_DAC_ConfigChannel+0x1c>
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e19e      	b.n	80057de <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	795b      	ldrb	r3, [r3, #5]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_DAC_ConfigChannel+0x2c>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e198      	b.n	80057de <HAL_DAC_ConfigChannel+0x35e>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2201      	movs	r2, #1
 80054b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2202      	movs	r2, #2
 80054b6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d17a      	bne.n	80055b6 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80054c0:	f7fc ffb2 	bl	8002428 <HAL_GetTick>
 80054c4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d13d      	bne.n	8005548 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80054cc:	e018      	b.n	8005500 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80054ce:	f7fc ffab 	bl	8002428 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d911      	bls.n	8005500 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f043 0208 	orr.w	r2, r3, #8
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2203      	movs	r2, #3
 80054fa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e16e      	b.n	80057de <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005506:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1df      	bne.n	80054ce <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005516:	641a      	str	r2, [r3, #64]	@ 0x40
 8005518:	e020      	b.n	800555c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800551a:	f7fc ff85 	bl	8002428 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	d90f      	bls.n	8005548 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800552e:	2b00      	cmp	r3, #0
 8005530:	da0a      	bge.n	8005548 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f043 0208 	orr.w	r2, r3, #8
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2203      	movs	r2, #3
 8005542:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e14a      	b.n	80057de <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554e:	2b00      	cmp	r3, #0
 8005550:	dbe3      	blt.n	800551a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800555a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800556c:	fa01 f303 	lsl.w	r3, r1, r3
 8005570:	43db      	mvns	r3, r3
 8005572:	ea02 0103 	and.w	r1, r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f003 0310 	and.w	r3, r3, #16
 8005580:	409a      	lsls	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f003 0310 	and.w	r3, r3, #16
 8005596:	21ff      	movs	r1, #255	@ 0xff
 8005598:	fa01 f303 	lsl.w	r3, r1, r3
 800559c:	43db      	mvns	r3, r3
 800559e:	ea02 0103 	and.w	r1, r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	409a      	lsls	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d11d      	bne.n	80055fa <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	221f      	movs	r2, #31
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	43db      	mvns	r3, r3
 80055d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d6:	4013      	ands	r3, r2
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f003 0310 	and.w	r3, r3, #16
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ee:	4313      	orrs	r3, r2
 80055f0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005600:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2207      	movs	r2, #7
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	43db      	mvns	r3, r3
 8005610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005612:	4013      	ands	r3, r2
 8005614:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d102      	bne.n	8005624 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800561e:	2300      	movs	r3, #0
 8005620:	623b      	str	r3, [r7, #32]
 8005622:	e00f      	b.n	8005644 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	2b02      	cmp	r3, #2
 800562a:	d102      	bne.n	8005632 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800562c:	2301      	movs	r3, #1
 800562e:	623b      	str	r3, [r7, #32]
 8005630:	e008      	b.n	8005644 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d102      	bne.n	8005640 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800563a:	2301      	movs	r3, #1
 800563c:	623b      	str	r3, [r7, #32]
 800563e:	e001      	b.n	8005644 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005640:	2300      	movs	r3, #0
 8005642:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	6a3a      	ldr	r2, [r7, #32]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f003 0310 	and.w	r3, r3, #16
 800565a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	43db      	mvns	r3, r3
 8005664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005666:	4013      	ands	r3, r2
 8005668:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	791b      	ldrb	r3, [r3, #4]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d102      	bne.n	8005678 <HAL_DAC_ConfigChannel+0x1f8>
 8005672:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005676:	e000      	b.n	800567a <HAL_DAC_ConfigChannel+0x1fa>
 8005678:	2300      	movs	r3, #0
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f003 0310 	and.w	r3, r3, #16
 8005686:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	43db      	mvns	r3, r3
 8005690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005692:	4013      	ands	r3, r2
 8005694:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	795b      	ldrb	r3, [r3, #5]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d102      	bne.n	80056a4 <HAL_DAC_ConfigChannel+0x224>
 800569e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056a2:	e000      	b.n	80056a6 <HAL_DAC_ConfigChannel+0x226>
 80056a4:	2300      	movs	r3, #0
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80056ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ae:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80056b2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d114      	bne.n	80056e6 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80056bc:	f002 f834 	bl	8007728 <HAL_RCC_GetHCLKFreq>
 80056c0:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4a48      	ldr	r2, [pc, #288]	@ (80057e8 <HAL_DAC_ConfigChannel+0x368>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d904      	bls.n	80056d4 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d2:	e00f      	b.n	80056f4 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	4a45      	ldr	r2, [pc, #276]	@ (80057ec <HAL_DAC_ConfigChannel+0x36c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d90a      	bls.n	80056f2 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80056dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056e4:	e006      	b.n	80056f4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ec:	4313      	orrs	r3, r2
 80056ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80056f0:	e000      	b.n	80056f4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80056f2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f003 0310 	and.w	r3, r3, #16
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005702:	4313      	orrs	r3, r2
 8005704:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800570c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6819      	ldr	r1, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f003 0310 	and.w	r3, r3, #16
 800571a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	43da      	mvns	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	400a      	ands	r2, r1
 800572a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f003 0310 	and.w	r3, r3, #16
 800573a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	43db      	mvns	r3, r3
 8005744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005746:	4013      	ands	r3, r2
 8005748:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800575e:	4313      	orrs	r3, r2
 8005760:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005768:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6819      	ldr	r1, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	22c0      	movs	r2, #192	@ 0xc0
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	43da      	mvns	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	400a      	ands	r2, r1
 8005784:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	089b      	lsrs	r3, r3, #2
 800578c:	f003 030f 	and.w	r3, r3, #15
 8005790:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	089b      	lsrs	r3, r3, #2
 8005798:	021b      	lsls	r3, r3, #8
 800579a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f003 0310 	and.w	r3, r3, #16
 80057b0:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80057b4:	fa01 f303 	lsl.w	r3, r1, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	ea02 0103 	and.w	r1, r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f003 0310 	and.w	r3, r3, #16
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	409a      	lsls	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80057dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3728      	adds	r7, #40	@ 0x28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	09896800 	.word	0x09896800
 80057ec:	04c4b400 	.word	0x04c4b400

080057f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e08d      	b.n	800591e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	4b47      	ldr	r3, [pc, #284]	@ (8005928 <HAL_DMA_Init+0x138>)
 800580a:	429a      	cmp	r2, r3
 800580c:	d80f      	bhi.n	800582e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	4b45      	ldr	r3, [pc, #276]	@ (800592c <HAL_DMA_Init+0x13c>)
 8005816:	4413      	add	r3, r2
 8005818:	4a45      	ldr	r2, [pc, #276]	@ (8005930 <HAL_DMA_Init+0x140>)
 800581a:	fba2 2303 	umull	r2, r3, r2, r3
 800581e:	091b      	lsrs	r3, r3, #4
 8005820:	009a      	lsls	r2, r3, #2
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a42      	ldr	r2, [pc, #264]	@ (8005934 <HAL_DMA_Init+0x144>)
 800582a:	641a      	str	r2, [r3, #64]	@ 0x40
 800582c:	e00e      	b.n	800584c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	4b40      	ldr	r3, [pc, #256]	@ (8005938 <HAL_DMA_Init+0x148>)
 8005836:	4413      	add	r3, r2
 8005838:	4a3d      	ldr	r2, [pc, #244]	@ (8005930 <HAL_DMA_Init+0x140>)
 800583a:	fba2 2303 	umull	r2, r3, r2, r3
 800583e:	091b      	lsrs	r3, r3, #4
 8005840:	009a      	lsls	r2, r3, #2
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a3c      	ldr	r2, [pc, #240]	@ (800593c <HAL_DMA_Init+0x14c>)
 800584a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005866:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005870:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800587c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005888:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fa76 	bl	8005d90 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058ac:	d102      	bne.n	80058b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80058c8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d010      	beq.n	80058f4 <HAL_DMA_Init+0x104>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d80c      	bhi.n	80058f4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fa96 	bl	8005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80058f0:	605a      	str	r2, [r3, #4]
 80058f2:	e008      	b.n	8005906 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40020407 	.word	0x40020407
 800592c:	bffdfff8 	.word	0xbffdfff8
 8005930:	cccccccd 	.word	0xcccccccd
 8005934:	40020000 	.word	0x40020000
 8005938:	bffdfbf8 	.word	0xbffdfbf8
 800593c:	40020400 	.word	0x40020400

08005940 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_DMA_Start_IT+0x20>
 800595c:	2302      	movs	r3, #2
 800595e:	e066      	b.n	8005a2e <HAL_DMA_Start_IT+0xee>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b01      	cmp	r3, #1
 8005972:	d155      	bne.n	8005a20 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0201 	bic.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f9bb 	bl	8005d14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d008      	beq.n	80059b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 020e 	orr.w	r2, r2, #14
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	e00f      	b.n	80059d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0204 	bic.w	r2, r2, #4
 80059c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 020a 	orr.w	r2, r2, #10
 80059d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d007      	beq.n	80059f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d007      	beq.n	8005a0e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a0c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0201 	orr.w	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	e005      	b.n	8005a2c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005a28:	2302      	movs	r3, #2
 8005a2a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d005      	beq.n	8005a5a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2204      	movs	r2, #4
 8005a52:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	73fb      	strb	r3, [r7, #15]
 8005a58:	e037      	b.n	8005aca <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 020e 	bic.w	r2, r2, #14
 8005a68:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a78:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0201 	bic.w	r2, r2, #1
 8005a88:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8e:	f003 021f 	and.w	r2, r3, #31
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	2101      	movs	r1, #1
 8005a98:	fa01 f202 	lsl.w	r2, r1, r2
 8005a9c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005aa6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00c      	beq.n	8005aca <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005abe:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ac8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d00d      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2204      	movs	r2, #4
 8005b04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	73fb      	strb	r3, [r7, #15]
 8005b1a:	e047      	b.n	8005bac <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 020e 	bic.w	r2, r2, #14
 8005b2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0201 	bic.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b50:	f003 021f 	and.w	r2, r3, #31
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b58:	2101      	movs	r1, #1
 8005b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b5e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b68:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00c      	beq.n	8005b8c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b80:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005b8a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	4798      	blx	r3
    }
  }
  return status;
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd2:	f003 031f 	and.w	r3, r3, #31
 8005bd6:	2204      	movs	r2, #4
 8005bd8:	409a      	lsls	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d026      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x7a>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d021      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0320 	and.w	r3, r3, #32
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d107      	bne.n	8005c0a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0204 	bic.w	r2, r2, #4
 8005c08:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c0e:	f003 021f 	and.w	r2, r3, #31
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c16:	2104      	movs	r1, #4
 8005c18:	fa01 f202 	lsl.w	r2, r1, r2
 8005c1c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d071      	beq.n	8005d0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005c2e:	e06c      	b.n	8005d0a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c34:	f003 031f 	and.w	r3, r3, #31
 8005c38:	2202      	movs	r2, #2
 8005c3a:	409a      	lsls	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d02e      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d029      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10b      	bne.n	8005c74 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 020a 	bic.w	r2, r2, #10
 8005c6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c78:	f003 021f 	and.w	r2, r3, #31
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c80:	2102      	movs	r1, #2
 8005c82:	fa01 f202 	lsl.w	r2, r1, r2
 8005c86:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d038      	beq.n	8005d0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005ca0:	e033      	b.n	8005d0a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	2208      	movs	r2, #8
 8005cac:	409a      	lsls	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d02a      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d025      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 020e 	bic.w	r2, r2, #14
 8005cce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd4:	f003 021f 	and.w	r2, r3, #31
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cdc:	2101      	movs	r1, #1
 8005cde:	fa01 f202 	lsl.w	r2, r1, r2
 8005ce2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d004      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005d0a:	bf00      	nop
 8005d0c:	bf00      	nop
}
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d2a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d004      	beq.n	8005d3e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005d3c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d42:	f003 021f 	and.w	r2, r3, #31
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	2b10      	cmp	r3, #16
 8005d60:	d108      	bne.n	8005d74 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d72:	e007      	b.n	8005d84 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	60da      	str	r2, [r3, #12]
}
 8005d84:	bf00      	nop
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4b16      	ldr	r3, [pc, #88]	@ (8005df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d802      	bhi.n	8005daa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005da4:	4b15      	ldr	r3, [pc, #84]	@ (8005dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005da6:	617b      	str	r3, [r7, #20]
 8005da8:	e001      	b.n	8005dae <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005daa:	4b15      	ldr	r3, [pc, #84]	@ (8005e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005dac:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	3b08      	subs	r3, #8
 8005dba:	4a12      	ldr	r2, [pc, #72]	@ (8005e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc0:	091b      	lsrs	r3, r3, #4
 8005dc2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc8:	089b      	lsrs	r3, r3, #2
 8005dca:	009a      	lsls	r2, r3, #2
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4413      	add	r3, r2
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8005e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005dda:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f003 031f 	and.w	r3, r3, #31
 8005de2:	2201      	movs	r2, #1
 8005de4:	409a      	lsls	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40020407 	.word	0x40020407
 8005dfc:	40020800 	.word	0x40020800
 8005e00:	40020820 	.word	0x40020820
 8005e04:	cccccccd 	.word	0xcccccccd
 8005e08:	40020880 	.word	0x40020880

08005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	461a      	mov	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a08      	ldr	r2, [pc, #32]	@ (8005e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005e2e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	f003 031f 	and.w	r3, r3, #31
 8005e38:	2201      	movs	r2, #1
 8005e3a:	409a      	lsls	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005e40:	bf00      	nop
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	1000823f 	.word	0x1000823f
 8005e50:	40020940 	.word	0x40020940

08005e54 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e147      	b.n	80060f6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fb fb3c 	bl	80014f8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0210 	bic.w	r2, r2, #16
 8005e8e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e90:	f7fc faca 	bl	8002428 <HAL_GetTick>
 8005e94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005e96:	e012      	b.n	8005ebe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005e98:	f7fc fac6 	bl	8002428 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b0a      	cmp	r3, #10
 8005ea4:	d90b      	bls.n	8005ebe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eaa:	f043 0201 	orr.w	r2, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2203      	movs	r2, #3
 8005eb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e11b      	b.n	80060f6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d0e5      	beq.n	8005e98 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699a      	ldr	r2, [r3, #24]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0201 	orr.w	r2, r2, #1
 8005eda:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005edc:	f7fc faa4 	bl	8002428 <HAL_GetTick>
 8005ee0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005ee2:	e012      	b.n	8005f0a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005ee4:	f7fc faa0 	bl	8002428 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b0a      	cmp	r3, #10
 8005ef0:	d90b      	bls.n	8005f0a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ef6:	f043 0201 	orr.w	r2, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2203      	movs	r2, #3
 8005f02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e0f5      	b.n	80060f6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0e5      	beq.n	8005ee4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0202 	orr.w	r2, r2, #2
 8005f26:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a74      	ldr	r2, [pc, #464]	@ (8006100 <HAL_FDCAN_Init+0x2ac>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d103      	bne.n	8005f3a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005f32:	4a74      	ldr	r2, [pc, #464]	@ (8006104 <HAL_FDCAN_Init+0x2b0>)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	7c1b      	ldrb	r3, [r3, #16]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d108      	bne.n	8005f54 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699a      	ldr	r2, [r3, #24]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f50:	619a      	str	r2, [r3, #24]
 8005f52:	e007      	b.n	8005f64 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	699a      	ldr	r2, [r3, #24]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f62:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	7c5b      	ldrb	r3, [r3, #17]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d108      	bne.n	8005f7e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f7a:	619a      	str	r2, [r3, #24]
 8005f7c:	e007      	b.n	8005f8e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	699a      	ldr	r2, [r3, #24]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005f8c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	7c9b      	ldrb	r3, [r3, #18]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d108      	bne.n	8005fa8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	699a      	ldr	r2, [r3, #24]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005fa4:	619a      	str	r2, [r3, #24]
 8005fa6:	e007      	b.n	8005fb8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005fb6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	699a      	ldr	r2, [r3, #24]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005fdc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0210 	bic.w	r2, r2, #16
 8005fec:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d108      	bne.n	8006008 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699a      	ldr	r2, [r3, #24]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0204 	orr.w	r2, r2, #4
 8006004:	619a      	str	r2, [r3, #24]
 8006006:	e02c      	b.n	8006062 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d028      	beq.n	8006062 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d01c      	beq.n	8006052 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699a      	ldr	r2, [r3, #24]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006026:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0210 	orr.w	r2, r2, #16
 8006036:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	2b03      	cmp	r3, #3
 800603e:	d110      	bne.n	8006062 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0220 	orr.w	r2, r2, #32
 800604e:	619a      	str	r2, [r3, #24]
 8006050:	e007      	b.n	8006062 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699a      	ldr	r2, [r3, #24]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0220 	orr.w	r2, r2, #32
 8006060:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	3b01      	subs	r3, #1
 8006068:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	3b01      	subs	r3, #1
 8006070:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006072:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800607a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	3b01      	subs	r3, #1
 8006084:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800608a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800608c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006096:	d115      	bne.n	80060c4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a2:	3b01      	subs	r3, #1
 80060a4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80060a6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ac:	3b01      	subs	r3, #1
 80060ae:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80060b0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b8:	3b01      	subs	r3, #1
 80060ba:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80060c0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80060c2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fab6 	bl	800664c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40006400 	.word	0x40006400
 8006104:	40006500 	.word	0x40006500

08006108 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006108:	b480      	push	{r7}
 800610a:	b08b      	sub	sp, #44	@ 0x2c
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006120:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006122:	7efb      	ldrb	r3, [r7, #27]
 8006124:	2b02      	cmp	r3, #2
 8006126:	f040 80e8 	bne.w	80062fa <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b40      	cmp	r3, #64	@ 0x40
 800612e:	d137      	bne.n	80061a0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006138:	f003 030f 	and.w	r3, r3, #15
 800613c:	2b00      	cmp	r3, #0
 800613e:	d107      	bne.n	8006150 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006144:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e0db      	b.n	8006308 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006158:	0e1b      	lsrs	r3, r3, #24
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b01      	cmp	r3, #1
 8006160:	d10a      	bne.n	8006178 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800616a:	0a5b      	lsrs	r3, r3, #9
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006174:	2301      	movs	r3, #1
 8006176:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006180:	0a1b      	lsrs	r3, r3, #8
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	4413      	add	r3, r2
 800618a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	4613      	mov	r3, r2
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4413      	add	r3, r2
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	440b      	add	r3, r1
 800619c:	627b      	str	r3, [r7, #36]	@ 0x24
 800619e:	e036      	b.n	800620e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061a8:	f003 030f 	and.w	r3, r3, #15
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d107      	bne.n	80061c0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e0a3      	b.n	8006308 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061c8:	0e1b      	lsrs	r3, r3, #24
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d10a      	bne.n	80061e8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061da:	0a1b      	lsrs	r3, r3, #8
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d101      	bne.n	80061e8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80061e4:	2301      	movs	r3, #1
 80061e6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061f0:	0a1b      	lsrs	r3, r3, #8
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	4413      	add	r3, r2
 80061fa:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	4613      	mov	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	4413      	add	r3, r2
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	440b      	add	r3, r1
 800620c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d107      	bne.n	8006232 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	0c9b      	lsrs	r3, r3, #18
 8006228:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	e005      	b.n	800623e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	3304      	adds	r3, #4
 800625a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800625c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	b29a      	uxth	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8006266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	0c1b      	lsrs	r3, r3, #16
 800626c:	f003 020f 	and.w	r2, r3, #15
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	0e1b      	lsrs	r3, r3, #24
 8006292:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	0fda      	lsrs	r2, r3, #31
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80062a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a6:	3304      	adds	r3, #4
 80062a8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80062ae:	2300      	movs	r3, #0
 80062b0:	623b      	str	r3, [r7, #32]
 80062b2:	e00a      	b.n	80062ca <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	441a      	add	r2, r3
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	440b      	add	r3, r1
 80062c0:	7812      	ldrb	r2, [r2, #0]
 80062c2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	3301      	adds	r3, #1
 80062c8:	623b      	str	r3, [r7, #32]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	4a11      	ldr	r2, [pc, #68]	@ (8006314 <HAL_FDCAN_GetRxMessage+0x20c>)
 80062d0:	5cd3      	ldrb	r3, [r2, r3]
 80062d2:	461a      	mov	r2, r3
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d3ec      	bcc.n	80062b4 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b40      	cmp	r3, #64	@ 0x40
 80062de:	d105      	bne.n	80062ec <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80062ea:	e004      	b.n	80062f6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e006      	b.n	8006308 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062fe:	f043 0208 	orr.w	r2, r3, #8
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
  }
}
 8006308:	4618      	mov	r0, r3
 800630a:	372c      	adds	r7, #44	@ 0x2c
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	0800c064 	.word	0x0800c064

08006318 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08c      	sub	sp, #48	@ 0x30
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006326:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800632a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006334:	4013      	ands	r3, r2
 8006336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800633e:	f003 0307 	and.w	r3, r3, #7
 8006342:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800634a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800634c:	4013      	ands	r3, r2
 800634e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006356:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800635a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006364:	4013      	ands	r3, r2
 8006366:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800636e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8006372:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637a:	6a3a      	ldr	r2, [r7, #32]
 800637c:	4013      	ands	r3, r2
 800637e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006386:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800638a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	4013      	ands	r3, r2
 8006396:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800639e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063a6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00b      	beq.n	80063ca <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d006      	beq.n	80063ca <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2240      	movs	r2, #64	@ 0x40
 80063c2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f921 	bl	800660c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d019      	beq.n	8006408 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d014      	beq.n	8006408 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80063e6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4013      	ands	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80063fe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006400:	6939      	ldr	r1, [r7, #16]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f8e3 	bl	80065ce <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640a:	2b00      	cmp	r3, #0
 800640c:	d007      	beq.n	800641e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006414:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f8a2 	bl	8006562 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800641e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006420:	2b00      	cmp	r3, #0
 8006422:	d007      	beq.n	8006434 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800642a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800642c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f8a2 	bl	8006578 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006436:	2b00      	cmp	r3, #0
 8006438:	d007      	beq.n	800644a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006440:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006442:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f8a2 	bl	800658e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00c      	beq.n	800646e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800645a:	2b00      	cmp	r3, #0
 800645c:	d007      	beq.n	800646e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006466:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f89b 	bl	80065a4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006474:	2b00      	cmp	r3, #0
 8006476:	d018      	beq.n	80064aa <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800647e:	2b00      	cmp	r3, #0
 8006480:	d013      	beq.n	80064aa <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800648a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4013      	ands	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2280      	movs	r2, #128	@ 0x80
 80064a0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80064a2:	68f9      	ldr	r1, [r7, #12]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f887 	bl	80065b8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00c      	beq.n	80064ce <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d007      	beq.n	80064ce <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80064c6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f88b 	bl	80065e4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00c      	beq.n	80064f2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d007      	beq.n	80064f2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80064ea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f883 	bl	80065f8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00f      	beq.n	800651c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800650e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006514:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d007      	beq.n	8006532 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800652a:	69f9      	ldr	r1, [r7, #28]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f881 	bl	8006634 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d009      	beq.n	800654c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6a3a      	ldr	r2, [r7, #32]
 800653e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f863 	bl	8006620 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800655a:	bf00      	nop
 800655c:	3730      	adds	r7, #48	@ 0x30
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80065c2:	bf00      	nop
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
	...

0800664c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006654:	4b27      	ldr	r3, [pc, #156]	@ (80066f4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8006656:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006666:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800666e:	041a      	lsls	r2, r3, #16
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800668c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006694:	061a      	lsls	r2, r3, #24
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	e005      	b.n	80066da <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	3304      	adds	r3, #4
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d3f3      	bcc.n	80066ce <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80066e6:	bf00      	nop
 80066e8:	bf00      	nop
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	4000a400 	.word	0x4000a400

080066f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006702:	2300      	movs	r3, #0
 8006704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006706:	e15a      	b.n	80069be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	2101      	movs	r1, #1
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	fa01 f303 	lsl.w	r3, r1, r3
 8006714:	4013      	ands	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 814c 	beq.w	80069b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	2b01      	cmp	r3, #1
 800672a:	d005      	beq.n	8006738 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006734:	2b02      	cmp	r3, #2
 8006736:	d130      	bne.n	800679a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	2203      	movs	r2, #3
 8006744:	fa02 f303 	lsl.w	r3, r2, r3
 8006748:	43db      	mvns	r3, r3
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4013      	ands	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	fa02 f303 	lsl.w	r3, r2, r3
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4313      	orrs	r3, r2
 8006760:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800676e:	2201      	movs	r2, #1
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	fa02 f303 	lsl.w	r3, r2, r3
 8006776:	43db      	mvns	r3, r3
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	4013      	ands	r3, r2
 800677c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	091b      	lsrs	r3, r3, #4
 8006784:	f003 0201 	and.w	r2, r3, #1
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	fa02 f303 	lsl.w	r3, r2, r3
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d017      	beq.n	80067d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	2203      	movs	r2, #3
 80067b2:	fa02 f303 	lsl.w	r3, r2, r3
 80067b6:	43db      	mvns	r3, r3
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4013      	ands	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f003 0303 	and.w	r3, r3, #3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d123      	bne.n	800682a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	08da      	lsrs	r2, r3, #3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	3208      	adds	r2, #8
 80067ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	220f      	movs	r2, #15
 80067fa:	fa02 f303 	lsl.w	r3, r2, r3
 80067fe:	43db      	mvns	r3, r3
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	4013      	ands	r3, r2
 8006804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	691a      	ldr	r2, [r3, #16]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	fa02 f303 	lsl.w	r3, r2, r3
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	08da      	lsrs	r2, r3, #3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3208      	adds	r2, #8
 8006824:	6939      	ldr	r1, [r7, #16]
 8006826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	2203      	movs	r2, #3
 8006836:	fa02 f303 	lsl.w	r3, r2, r3
 800683a:	43db      	mvns	r3, r3
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4013      	ands	r3, r2
 8006840:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f003 0203 	and.w	r2, r3, #3
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	fa02 f303 	lsl.w	r3, r2, r3
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 80a6 	beq.w	80069b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800686c:	4b5b      	ldr	r3, [pc, #364]	@ (80069dc <HAL_GPIO_Init+0x2e4>)
 800686e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006870:	4a5a      	ldr	r2, [pc, #360]	@ (80069dc <HAL_GPIO_Init+0x2e4>)
 8006872:	f043 0301 	orr.w	r3, r3, #1
 8006876:	6613      	str	r3, [r2, #96]	@ 0x60
 8006878:	4b58      	ldr	r3, [pc, #352]	@ (80069dc <HAL_GPIO_Init+0x2e4>)
 800687a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	60bb      	str	r3, [r7, #8]
 8006882:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006884:	4a56      	ldr	r2, [pc, #344]	@ (80069e0 <HAL_GPIO_Init+0x2e8>)
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	089b      	lsrs	r3, r3, #2
 800688a:	3302      	adds	r3, #2
 800688c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006890:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f003 0303 	and.w	r3, r3, #3
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	220f      	movs	r2, #15
 800689c:	fa02 f303 	lsl.w	r3, r2, r3
 80068a0:	43db      	mvns	r3, r3
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	4013      	ands	r3, r2
 80068a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80068ae:	d01f      	beq.n	80068f0 <HAL_GPIO_Init+0x1f8>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a4c      	ldr	r2, [pc, #304]	@ (80069e4 <HAL_GPIO_Init+0x2ec>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d019      	beq.n	80068ec <HAL_GPIO_Init+0x1f4>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a4b      	ldr	r2, [pc, #300]	@ (80069e8 <HAL_GPIO_Init+0x2f0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d013      	beq.n	80068e8 <HAL_GPIO_Init+0x1f0>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a4a      	ldr	r2, [pc, #296]	@ (80069ec <HAL_GPIO_Init+0x2f4>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d00d      	beq.n	80068e4 <HAL_GPIO_Init+0x1ec>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a49      	ldr	r2, [pc, #292]	@ (80069f0 <HAL_GPIO_Init+0x2f8>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d007      	beq.n	80068e0 <HAL_GPIO_Init+0x1e8>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a48      	ldr	r2, [pc, #288]	@ (80069f4 <HAL_GPIO_Init+0x2fc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d101      	bne.n	80068dc <HAL_GPIO_Init+0x1e4>
 80068d8:	2305      	movs	r3, #5
 80068da:	e00a      	b.n	80068f2 <HAL_GPIO_Init+0x1fa>
 80068dc:	2306      	movs	r3, #6
 80068de:	e008      	b.n	80068f2 <HAL_GPIO_Init+0x1fa>
 80068e0:	2304      	movs	r3, #4
 80068e2:	e006      	b.n	80068f2 <HAL_GPIO_Init+0x1fa>
 80068e4:	2303      	movs	r3, #3
 80068e6:	e004      	b.n	80068f2 <HAL_GPIO_Init+0x1fa>
 80068e8:	2302      	movs	r3, #2
 80068ea:	e002      	b.n	80068f2 <HAL_GPIO_Init+0x1fa>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e000      	b.n	80068f2 <HAL_GPIO_Init+0x1fa>
 80068f0:	2300      	movs	r3, #0
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	f002 0203 	and.w	r2, r2, #3
 80068f8:	0092      	lsls	r2, r2, #2
 80068fa:	4093      	lsls	r3, r2
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	4313      	orrs	r3, r2
 8006900:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006902:	4937      	ldr	r1, [pc, #220]	@ (80069e0 <HAL_GPIO_Init+0x2e8>)
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	089b      	lsrs	r3, r3, #2
 8006908:	3302      	adds	r3, #2
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006910:	4b39      	ldr	r3, [pc, #228]	@ (80069f8 <HAL_GPIO_Init+0x300>)
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	43db      	mvns	r3, r3
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4013      	ands	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4313      	orrs	r3, r2
 8006932:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006934:	4a30      	ldr	r2, [pc, #192]	@ (80069f8 <HAL_GPIO_Init+0x300>)
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800693a:	4b2f      	ldr	r3, [pc, #188]	@ (80069f8 <HAL_GPIO_Init+0x300>)
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	43db      	mvns	r3, r3
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	4013      	ands	r3, r2
 8006948:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800695e:	4a26      	ldr	r2, [pc, #152]	@ (80069f8 <HAL_GPIO_Init+0x300>)
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006964:	4b24      	ldr	r3, [pc, #144]	@ (80069f8 <HAL_GPIO_Init+0x300>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	43db      	mvns	r3, r3
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4013      	ands	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d003      	beq.n	8006988 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006988:	4a1b      	ldr	r2, [pc, #108]	@ (80069f8 <HAL_GPIO_Init+0x300>)
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800698e:	4b1a      	ldr	r3, [pc, #104]	@ (80069f8 <HAL_GPIO_Init+0x300>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	43db      	mvns	r3, r3
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4013      	ands	r3, r2
 800699c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80069b2:	4a11      	ldr	r2, [pc, #68]	@ (80069f8 <HAL_GPIO_Init+0x300>)
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	3301      	adds	r3, #1
 80069bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	fa22 f303 	lsr.w	r3, r2, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f47f ae9d 	bne.w	8006708 <HAL_GPIO_Init+0x10>
  }
}
 80069ce:	bf00      	nop
 80069d0:	bf00      	nop
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	40021000 	.word	0x40021000
 80069e0:	40010000 	.word	0x40010000
 80069e4:	48000400 	.word	0x48000400
 80069e8:	48000800 	.word	0x48000800
 80069ec:	48000c00 	.word	0x48000c00
 80069f0:	48001000 	.word	0x48001000
 80069f4:	48001400 	.word	0x48001400
 80069f8:	40010400 	.word	0x40010400

080069fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	807b      	strh	r3, [r7, #2]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a0c:	787b      	ldrb	r3, [r7, #1]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a12:	887a      	ldrh	r2, [r7, #2]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006a18:	e002      	b.n	8006a20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006a1a:	887a      	ldrh	r2, [r7, #2]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	4603      	mov	r3, r0
 8006a34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006a36:	4b08      	ldr	r3, [pc, #32]	@ (8006a58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a38:	695a      	ldr	r2, [r3, #20]
 8006a3a:	88fb      	ldrh	r3, [r7, #6]
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d006      	beq.n	8006a50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a42:	4a05      	ldr	r2, [pc, #20]	@ (8006a58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a44:	88fb      	ldrh	r3, [r7, #6]
 8006a46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a48:	88fb      	ldrh	r3, [r7, #6]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f005 f85e 	bl	800bb0c <HAL_GPIO_EXTI_Callback>
  }
}
 8006a50:	bf00      	nop
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	40010400 	.word	0x40010400

08006a5c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e0bb      	b.n	8006bea <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b05      	cmp	r3, #5
 8006a7c:	d101      	bne.n	8006a82 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e0b3      	b.n	8006bea <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d101      	bne.n	8006a92 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e0ab      	b.n	8006bea <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a92:	4b58      	ldr	r3, [pc, #352]	@ (8006bf4 <HAL_OPAMP_Init+0x198>)
 8006a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a96:	4a57      	ldr	r2, [pc, #348]	@ (8006bf4 <HAL_OPAMP_Init+0x198>)
 8006a98:	f043 0301 	orr.w	r3, r3, #1
 8006a9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8006a9e:	4b55      	ldr	r3, [pc, #340]	@ (8006bf4 <HAL_OPAMP_Init+0x198>)
 8006aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	60bb      	str	r3, [r7, #8]
 8006aa8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d103      	bne.n	8006abe <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7fa ff38 	bl	8001934 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2b40      	cmp	r3, #64	@ 0x40
 8006aca:	d003      	beq.n	8006ad4 <HAL_OPAMP_Init+0x78>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	2b60      	cmp	r3, #96	@ 0x60
 8006ad2:	d133      	bne.n	8006b3c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f023 0110 	bic.w	r1, r3, #16
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	4b41      	ldr	r3, [pc, #260]	@ (8006bf8 <HAL_OPAMP_Init+0x19c>)
 8006af2:	4013      	ands	r3, r2
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6851      	ldr	r1, [r2, #4]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6892      	ldr	r2, [r2, #8]
 8006afc:	4311      	orrs	r1, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6912      	ldr	r2, [r2, #16]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	6879      	ldr	r1, [r7, #4]
 8006b06:	7d09      	ldrb	r1, [r1, #20]
 8006b08:	2901      	cmp	r1, #1
 8006b0a:	d102      	bne.n	8006b12 <HAL_OPAMP_Init+0xb6>
 8006b0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b10:	e000      	b.n	8006b14 <HAL_OPAMP_Init+0xb8>
 8006b12:	2100      	movs	r1, #0
 8006b14:	4311      	orrs	r1, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b1a:	4311      	orrs	r1, r2
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006b20:	4311      	orrs	r1, r2
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b26:	04d2      	lsls	r2, r2, #19
 8006b28:	4311      	orrs	r1, r2
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b2e:	0612      	lsls	r2, r2, #24
 8006b30:	4311      	orrs	r1, r2
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	6812      	ldr	r2, [r2, #0]
 8006b36:	430b      	orrs	r3, r1
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	e035      	b.n	8006ba8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f023 0110 	bic.w	r1, r3, #16
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	4b27      	ldr	r3, [pc, #156]	@ (8006bf8 <HAL_OPAMP_Init+0x19c>)
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6851      	ldr	r1, [r2, #4]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6892      	ldr	r2, [r2, #8]
 8006b64:	4311      	orrs	r1, r2
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	68d2      	ldr	r2, [r2, #12]
 8006b6a:	4311      	orrs	r1, r2
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6912      	ldr	r2, [r2, #16]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	7d09      	ldrb	r1, [r1, #20]
 8006b76:	2901      	cmp	r1, #1
 8006b78:	d102      	bne.n	8006b80 <HAL_OPAMP_Init+0x124>
 8006b7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b7e:	e000      	b.n	8006b82 <HAL_OPAMP_Init+0x126>
 8006b80:	2100      	movs	r1, #0
 8006b82:	4311      	orrs	r1, r2
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b88:	4311      	orrs	r1, r2
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006b8e:	4311      	orrs	r1, r2
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b94:	04d2      	lsls	r2, r2, #19
 8006b96:	4311      	orrs	r1, r2
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b9c:	0612      	lsls	r2, r2, #24
 8006b9e:	4311      	orrs	r1, r2
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6812      	ldr	r2, [r2, #0]
 8006ba4:	430b      	orrs	r3, r1
 8006ba6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	db10      	blt.n	8006bd4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	699a      	ldr	r2, [r3, #24]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d103      	bne.n	8006be8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	e0003e11 	.word	0xe0003e11

08006bfc <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d102      	bne.n	8006c14 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	73fb      	strb	r3, [r7, #15]
 8006c12:	e01d      	b.n	8006c50 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b05      	cmp	r3, #5
 8006c1e:	d102      	bne.n	8006c26 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	73fb      	strb	r3, [r7, #15]
 8006c24:	e014      	b.n	8006c50 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d10c      	bne.n	8006c4c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f042 0201 	orr.w	r2, r2, #1
 8006c40:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2204      	movs	r2, #4
 8006c46:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8006c4a:	e001      	b.n	8006c50 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
	...

08006c60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d141      	bne.n	8006cf2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c6e:	4b4b      	ldr	r3, [pc, #300]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c7a:	d131      	bne.n	8006ce0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c7c:	4b47      	ldr	r3, [pc, #284]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c82:	4a46      	ldr	r2, [pc, #280]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c8c:	4b43      	ldr	r3, [pc, #268]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c94:	4a41      	ldr	r2, [pc, #260]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c9c:	4b40      	ldr	r3, [pc, #256]	@ (8006da0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2232      	movs	r2, #50	@ 0x32
 8006ca2:	fb02 f303 	mul.w	r3, r2, r3
 8006ca6:	4a3f      	ldr	r2, [pc, #252]	@ (8006da4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cac:	0c9b      	lsrs	r3, r3, #18
 8006cae:	3301      	adds	r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cb2:	e002      	b.n	8006cba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cba:	4b38      	ldr	r3, [pc, #224]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc6:	d102      	bne.n	8006cce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1f2      	bne.n	8006cb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006cce:	4b33      	ldr	r3, [pc, #204]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cda:	d158      	bne.n	8006d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e057      	b.n	8006d90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006cf0:	e04d      	b.n	8006d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cf8:	d141      	bne.n	8006d7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006cfa:	4b28      	ldr	r3, [pc, #160]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d06:	d131      	bne.n	8006d6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d08:	4b24      	ldr	r3, [pc, #144]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d0e:	4a23      	ldr	r2, [pc, #140]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d18:	4b20      	ldr	r3, [pc, #128]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d20:	4a1e      	ldr	r2, [pc, #120]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d28:	4b1d      	ldr	r3, [pc, #116]	@ (8006da0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2232      	movs	r2, #50	@ 0x32
 8006d2e:	fb02 f303 	mul.w	r3, r2, r3
 8006d32:	4a1c      	ldr	r2, [pc, #112]	@ (8006da4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006d34:	fba2 2303 	umull	r2, r3, r2, r3
 8006d38:	0c9b      	lsrs	r3, r3, #18
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d3e:	e002      	b.n	8006d46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d46:	4b15      	ldr	r3, [pc, #84]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d52:	d102      	bne.n	8006d5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1f2      	bne.n	8006d40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d5a:	4b10      	ldr	r3, [pc, #64]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d66:	d112      	bne.n	8006d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e011      	b.n	8006d90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d72:	4a0a      	ldr	r2, [pc, #40]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006d7c:	e007      	b.n	8006d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d7e:	4b07      	ldr	r3, [pc, #28]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d86:	4a05      	ldr	r2, [pc, #20]	@ (8006d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006d8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	40007000 	.word	0x40007000
 8006da0:	20000000 	.word	0x20000000
 8006da4:	431bde83 	.word	0x431bde83

08006da8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006dac:	4b05      	ldr	r3, [pc, #20]	@ (8006dc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	4a04      	ldr	r2, [pc, #16]	@ (8006dc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006db2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006db6:	6093      	str	r3, [r2, #8]
}
 8006db8:	bf00      	nop
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40007000 	.word	0x40007000

08006dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e2fe      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d075      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006de6:	4b97      	ldr	r3, [pc, #604]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 030c 	and.w	r3, r3, #12
 8006dee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006df0:	4b94      	ldr	r3, [pc, #592]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f003 0303 	and.w	r3, r3, #3
 8006df8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	2b0c      	cmp	r3, #12
 8006dfe:	d102      	bne.n	8006e06 <HAL_RCC_OscConfig+0x3e>
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d002      	beq.n	8006e0c <HAL_RCC_OscConfig+0x44>
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d10b      	bne.n	8006e24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e0c:	4b8d      	ldr	r3, [pc, #564]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d05b      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x108>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d157      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e2d9      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e2c:	d106      	bne.n	8006e3c <HAL_RCC_OscConfig+0x74>
 8006e2e:	4b85      	ldr	r3, [pc, #532]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a84      	ldr	r2, [pc, #528]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e38:	6013      	str	r3, [r2, #0]
 8006e3a:	e01d      	b.n	8006e78 <HAL_RCC_OscConfig+0xb0>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e44:	d10c      	bne.n	8006e60 <HAL_RCC_OscConfig+0x98>
 8006e46:	4b7f      	ldr	r3, [pc, #508]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a7e      	ldr	r2, [pc, #504]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	4b7c      	ldr	r3, [pc, #496]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a7b      	ldr	r2, [pc, #492]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	e00b      	b.n	8006e78 <HAL_RCC_OscConfig+0xb0>
 8006e60:	4b78      	ldr	r3, [pc, #480]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a77      	ldr	r2, [pc, #476]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e6a:	6013      	str	r3, [r2, #0]
 8006e6c:	4b75      	ldr	r3, [pc, #468]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a74      	ldr	r2, [pc, #464]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d013      	beq.n	8006ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e80:	f7fb fad2 	bl	8002428 <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e88:	f7fb face 	bl	8002428 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b64      	cmp	r3, #100	@ 0x64
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e29e      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e9a:	4b6a      	ldr	r3, [pc, #424]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0f0      	beq.n	8006e88 <HAL_RCC_OscConfig+0xc0>
 8006ea6:	e014      	b.n	8006ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea8:	f7fb fabe 	bl	8002428 <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006eb0:	f7fb faba 	bl	8002428 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b64      	cmp	r3, #100	@ 0x64
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e28a      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ec2:	4b60      	ldr	r3, [pc, #384]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1f0      	bne.n	8006eb0 <HAL_RCC_OscConfig+0xe8>
 8006ece:	e000      	b.n	8006ed2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d075      	beq.n	8006fca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ede:	4b59      	ldr	r3, [pc, #356]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 030c 	and.w	r3, r3, #12
 8006ee6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ee8:	4b56      	ldr	r3, [pc, #344]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f003 0303 	and.w	r3, r3, #3
 8006ef0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b0c      	cmp	r3, #12
 8006ef6:	d102      	bne.n	8006efe <HAL_RCC_OscConfig+0x136>
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d002      	beq.n	8006f04 <HAL_RCC_OscConfig+0x13c>
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b04      	cmp	r3, #4
 8006f02:	d11f      	bne.n	8006f44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f04:	4b4f      	ldr	r3, [pc, #316]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d005      	beq.n	8006f1c <HAL_RCC_OscConfig+0x154>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e25d      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f1c:	4b49      	ldr	r3, [pc, #292]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	061b      	lsls	r3, r3, #24
 8006f2a:	4946      	ldr	r1, [pc, #280]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006f30:	4b45      	ldr	r3, [pc, #276]	@ (8007048 <HAL_RCC_OscConfig+0x280>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fb fa2b 	bl	8002390 <HAL_InitTick>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d043      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e249      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d023      	beq.n	8006f94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a3c      	ldr	r2, [pc, #240]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f58:	f7fb fa66 	bl	8002428 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f60:	f7fb fa62 	bl	8002428 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e232      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f72:	4b34      	ldr	r3, [pc, #208]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d0f0      	beq.n	8006f60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f7e:	4b31      	ldr	r3, [pc, #196]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	061b      	lsls	r3, r3, #24
 8006f8c:	492d      	ldr	r1, [pc, #180]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	604b      	str	r3, [r1, #4]
 8006f92:	e01a      	b.n	8006fca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f94:	4b2b      	ldr	r3, [pc, #172]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a2a      	ldr	r2, [pc, #168]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006f9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa0:	f7fb fa42 	bl	8002428 <HAL_GetTick>
 8006fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fa6:	e008      	b.n	8006fba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fa8:	f7fb fa3e 	bl	8002428 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e20e      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fba:	4b22      	ldr	r3, [pc, #136]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1f0      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x1e0>
 8006fc6:	e000      	b.n	8006fca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0308 	and.w	r3, r3, #8
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d041      	beq.n	800705a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d01c      	beq.n	8007018 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fde:	4b19      	ldr	r3, [pc, #100]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fe4:	4a17      	ldr	r2, [pc, #92]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fee:	f7fb fa1b 	bl	8002428 <HAL_GetTick>
 8006ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ff4:	e008      	b.n	8007008 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ff6:	f7fb fa17 	bl	8002428 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d901      	bls.n	8007008 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e1e7      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007008:	4b0e      	ldr	r3, [pc, #56]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 800700a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0ef      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x22e>
 8007016:	e020      	b.n	800705a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007018:	4b0a      	ldr	r3, [pc, #40]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 800701a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800701e:	4a09      	ldr	r2, [pc, #36]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8007020:	f023 0301 	bic.w	r3, r3, #1
 8007024:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007028:	f7fb f9fe 	bl	8002428 <HAL_GetTick>
 800702c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800702e:	e00d      	b.n	800704c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007030:	f7fb f9fa 	bl	8002428 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b02      	cmp	r3, #2
 800703c:	d906      	bls.n	800704c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e1ca      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
 8007042:	bf00      	nop
 8007044:	40021000 	.word	0x40021000
 8007048:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800704c:	4b8c      	ldr	r3, [pc, #560]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 800704e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1ea      	bne.n	8007030 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0304 	and.w	r3, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 80a6 	beq.w	80071b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007068:	2300      	movs	r3, #0
 800706a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800706c:	4b84      	ldr	r3, [pc, #528]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 800706e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <HAL_RCC_OscConfig+0x2b4>
 8007078:	2301      	movs	r3, #1
 800707a:	e000      	b.n	800707e <HAL_RCC_OscConfig+0x2b6>
 800707c:	2300      	movs	r3, #0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00d      	beq.n	800709e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007082:	4b7f      	ldr	r3, [pc, #508]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 8007084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007086:	4a7e      	ldr	r2, [pc, #504]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 8007088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800708c:	6593      	str	r3, [r2, #88]	@ 0x58
 800708e:	4b7c      	ldr	r3, [pc, #496]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 8007090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800709a:	2301      	movs	r3, #1
 800709c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800709e:	4b79      	ldr	r3, [pc, #484]	@ (8007284 <HAL_RCC_OscConfig+0x4bc>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d118      	bne.n	80070dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070aa:	4b76      	ldr	r3, [pc, #472]	@ (8007284 <HAL_RCC_OscConfig+0x4bc>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a75      	ldr	r2, [pc, #468]	@ (8007284 <HAL_RCC_OscConfig+0x4bc>)
 80070b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070b6:	f7fb f9b7 	bl	8002428 <HAL_GetTick>
 80070ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070bc:	e008      	b.n	80070d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070be:	f7fb f9b3 	bl	8002428 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d901      	bls.n	80070d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e183      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070d0:	4b6c      	ldr	r3, [pc, #432]	@ (8007284 <HAL_RCC_OscConfig+0x4bc>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0f0      	beq.n	80070be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d108      	bne.n	80070f6 <HAL_RCC_OscConfig+0x32e>
 80070e4:	4b66      	ldr	r3, [pc, #408]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 80070e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ea:	4a65      	ldr	r2, [pc, #404]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 80070ec:	f043 0301 	orr.w	r3, r3, #1
 80070f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80070f4:	e024      	b.n	8007140 <HAL_RCC_OscConfig+0x378>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	2b05      	cmp	r3, #5
 80070fc:	d110      	bne.n	8007120 <HAL_RCC_OscConfig+0x358>
 80070fe:	4b60      	ldr	r3, [pc, #384]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 8007100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007104:	4a5e      	ldr	r2, [pc, #376]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 8007106:	f043 0304 	orr.w	r3, r3, #4
 800710a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800710e:	4b5c      	ldr	r3, [pc, #368]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 8007110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007114:	4a5a      	ldr	r2, [pc, #360]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 8007116:	f043 0301 	orr.w	r3, r3, #1
 800711a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800711e:	e00f      	b.n	8007140 <HAL_RCC_OscConfig+0x378>
 8007120:	4b57      	ldr	r3, [pc, #348]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 8007122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007126:	4a56      	ldr	r2, [pc, #344]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 8007128:	f023 0301 	bic.w	r3, r3, #1
 800712c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007130:	4b53      	ldr	r3, [pc, #332]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 8007132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007136:	4a52      	ldr	r2, [pc, #328]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 8007138:	f023 0304 	bic.w	r3, r3, #4
 800713c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d016      	beq.n	8007176 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007148:	f7fb f96e 	bl	8002428 <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800714e:	e00a      	b.n	8007166 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007150:	f7fb f96a 	bl	8002428 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800715e:	4293      	cmp	r3, r2
 8007160:	d901      	bls.n	8007166 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e138      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007166:	4b46      	ldr	r3, [pc, #280]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 8007168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0ed      	beq.n	8007150 <HAL_RCC_OscConfig+0x388>
 8007174:	e015      	b.n	80071a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007176:	f7fb f957 	bl	8002428 <HAL_GetTick>
 800717a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800717c:	e00a      	b.n	8007194 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800717e:	f7fb f953 	bl	8002428 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800718c:	4293      	cmp	r3, r2
 800718e:	d901      	bls.n	8007194 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e121      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007194:	4b3a      	ldr	r3, [pc, #232]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 8007196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1ed      	bne.n	800717e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071a2:	7ffb      	ldrb	r3, [r7, #31]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d105      	bne.n	80071b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071a8:	4b35      	ldr	r3, [pc, #212]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 80071aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ac:	4a34      	ldr	r2, [pc, #208]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 80071ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0320 	and.w	r3, r3, #32
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d03c      	beq.n	800723a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01c      	beq.n	8007202 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 80071ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071ce:	4a2c      	ldr	r2, [pc, #176]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 80071d0:	f043 0301 	orr.w	r3, r3, #1
 80071d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d8:	f7fb f926 	bl	8002428 <HAL_GetTick>
 80071dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071e0:	f7fb f922 	bl	8002428 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e0f2      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071f2:	4b23      	ldr	r3, [pc, #140]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 80071f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0ef      	beq.n	80071e0 <HAL_RCC_OscConfig+0x418>
 8007200:	e01b      	b.n	800723a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007202:	4b1f      	ldr	r3, [pc, #124]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 8007204:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007208:	4a1d      	ldr	r2, [pc, #116]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 800720a:	f023 0301 	bic.w	r3, r3, #1
 800720e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007212:	f7fb f909 	bl	8002428 <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800721a:	f7fb f905 	bl	8002428 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e0d5      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800722c:	4b14      	ldr	r3, [pc, #80]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 800722e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1ef      	bne.n	800721a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 80c9 	beq.w	80073d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007244:	4b0e      	ldr	r3, [pc, #56]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f003 030c 	and.w	r3, r3, #12
 800724c:	2b0c      	cmp	r3, #12
 800724e:	f000 8083 	beq.w	8007358 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	2b02      	cmp	r3, #2
 8007258:	d15e      	bne.n	8007318 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800725a:	4b09      	ldr	r3, [pc, #36]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a08      	ldr	r2, [pc, #32]	@ (8007280 <HAL_RCC_OscConfig+0x4b8>)
 8007260:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007266:	f7fb f8df 	bl	8002428 <HAL_GetTick>
 800726a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800726c:	e00c      	b.n	8007288 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800726e:	f7fb f8db 	bl	8002428 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d905      	bls.n	8007288 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e0ab      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
 8007280:	40021000 	.word	0x40021000
 8007284:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007288:	4b55      	ldr	r3, [pc, #340]	@ (80073e0 <HAL_RCC_OscConfig+0x618>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1ec      	bne.n	800726e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007294:	4b52      	ldr	r3, [pc, #328]	@ (80073e0 <HAL_RCC_OscConfig+0x618>)
 8007296:	68da      	ldr	r2, [r3, #12]
 8007298:	4b52      	ldr	r3, [pc, #328]	@ (80073e4 <HAL_RCC_OscConfig+0x61c>)
 800729a:	4013      	ands	r3, r2
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6a11      	ldr	r1, [r2, #32]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072a4:	3a01      	subs	r2, #1
 80072a6:	0112      	lsls	r2, r2, #4
 80072a8:	4311      	orrs	r1, r2
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80072ae:	0212      	lsls	r2, r2, #8
 80072b0:	4311      	orrs	r1, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80072b6:	0852      	lsrs	r2, r2, #1
 80072b8:	3a01      	subs	r2, #1
 80072ba:	0552      	lsls	r2, r2, #21
 80072bc:	4311      	orrs	r1, r2
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80072c2:	0852      	lsrs	r2, r2, #1
 80072c4:	3a01      	subs	r2, #1
 80072c6:	0652      	lsls	r2, r2, #25
 80072c8:	4311      	orrs	r1, r2
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80072ce:	06d2      	lsls	r2, r2, #27
 80072d0:	430a      	orrs	r2, r1
 80072d2:	4943      	ldr	r1, [pc, #268]	@ (80073e0 <HAL_RCC_OscConfig+0x618>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072d8:	4b41      	ldr	r3, [pc, #260]	@ (80073e0 <HAL_RCC_OscConfig+0x618>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a40      	ldr	r2, [pc, #256]	@ (80073e0 <HAL_RCC_OscConfig+0x618>)
 80072de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80072e4:	4b3e      	ldr	r3, [pc, #248]	@ (80073e0 <HAL_RCC_OscConfig+0x618>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	4a3d      	ldr	r2, [pc, #244]	@ (80073e0 <HAL_RCC_OscConfig+0x618>)
 80072ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f0:	f7fb f89a 	bl	8002428 <HAL_GetTick>
 80072f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072f6:	e008      	b.n	800730a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072f8:	f7fb f896 	bl	8002428 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	2b02      	cmp	r3, #2
 8007304:	d901      	bls.n	800730a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e066      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800730a:	4b35      	ldr	r3, [pc, #212]	@ (80073e0 <HAL_RCC_OscConfig+0x618>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0f0      	beq.n	80072f8 <HAL_RCC_OscConfig+0x530>
 8007316:	e05e      	b.n	80073d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007318:	4b31      	ldr	r3, [pc, #196]	@ (80073e0 <HAL_RCC_OscConfig+0x618>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a30      	ldr	r2, [pc, #192]	@ (80073e0 <HAL_RCC_OscConfig+0x618>)
 800731e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007324:	f7fb f880 	bl	8002428 <HAL_GetTick>
 8007328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800732a:	e008      	b.n	800733e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800732c:	f7fb f87c 	bl	8002428 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e04c      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800733e:	4b28      	ldr	r3, [pc, #160]	@ (80073e0 <HAL_RCC_OscConfig+0x618>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1f0      	bne.n	800732c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800734a:	4b25      	ldr	r3, [pc, #148]	@ (80073e0 <HAL_RCC_OscConfig+0x618>)
 800734c:	68da      	ldr	r2, [r3, #12]
 800734e:	4924      	ldr	r1, [pc, #144]	@ (80073e0 <HAL_RCC_OscConfig+0x618>)
 8007350:	4b25      	ldr	r3, [pc, #148]	@ (80073e8 <HAL_RCC_OscConfig+0x620>)
 8007352:	4013      	ands	r3, r2
 8007354:	60cb      	str	r3, [r1, #12]
 8007356:	e03e      	b.n	80073d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d101      	bne.n	8007364 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e039      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007364:	4b1e      	ldr	r3, [pc, #120]	@ (80073e0 <HAL_RCC_OscConfig+0x618>)
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f003 0203 	and.w	r2, r3, #3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	429a      	cmp	r2, r3
 8007376:	d12c      	bne.n	80073d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007382:	3b01      	subs	r3, #1
 8007384:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007386:	429a      	cmp	r2, r3
 8007388:	d123      	bne.n	80073d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007394:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007396:	429a      	cmp	r2, r3
 8007398:	d11b      	bne.n	80073d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d113      	bne.n	80073d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b4:	085b      	lsrs	r3, r3, #1
 80073b6:	3b01      	subs	r3, #1
 80073b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d109      	bne.n	80073d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073c8:	085b      	lsrs	r3, r3, #1
 80073ca:	3b01      	subs	r3, #1
 80073cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d001      	beq.n	80073d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e000      	b.n	80073d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3720      	adds	r7, #32
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	40021000 	.word	0x40021000
 80073e4:	019f800c 	.word	0x019f800c
 80073e8:	feeefffc 	.word	0xfeeefffc

080073ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80073f6:	2300      	movs	r3, #0
 80073f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e11e      	b.n	8007642 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007404:	4b91      	ldr	r3, [pc, #580]	@ (800764c <HAL_RCC_ClockConfig+0x260>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 030f 	and.w	r3, r3, #15
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	429a      	cmp	r2, r3
 8007410:	d910      	bls.n	8007434 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007412:	4b8e      	ldr	r3, [pc, #568]	@ (800764c <HAL_RCC_ClockConfig+0x260>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f023 020f 	bic.w	r2, r3, #15
 800741a:	498c      	ldr	r1, [pc, #560]	@ (800764c <HAL_RCC_ClockConfig+0x260>)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	4313      	orrs	r3, r2
 8007420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007422:	4b8a      	ldr	r3, [pc, #552]	@ (800764c <HAL_RCC_ClockConfig+0x260>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	429a      	cmp	r2, r3
 800742e:	d001      	beq.n	8007434 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e106      	b.n	8007642 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d073      	beq.n	8007528 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	2b03      	cmp	r3, #3
 8007446:	d129      	bne.n	800749c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007448:	4b81      	ldr	r3, [pc, #516]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e0f4      	b.n	8007642 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007458:	f000 f99e 	bl	8007798 <RCC_GetSysClockFreqFromPLLSource>
 800745c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	4a7c      	ldr	r2, [pc, #496]	@ (8007654 <HAL_RCC_ClockConfig+0x268>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d93f      	bls.n	80074e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007466:	4b7a      	ldr	r3, [pc, #488]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d009      	beq.n	8007486 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800747a:	2b00      	cmp	r3, #0
 800747c:	d033      	beq.n	80074e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007482:	2b00      	cmp	r3, #0
 8007484:	d12f      	bne.n	80074e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007486:	4b72      	ldr	r3, [pc, #456]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800748e:	4a70      	ldr	r2, [pc, #448]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 8007490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007494:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007496:	2380      	movs	r3, #128	@ 0x80
 8007498:	617b      	str	r3, [r7, #20]
 800749a:	e024      	b.n	80074e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d107      	bne.n	80074b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074a4:	4b6a      	ldr	r3, [pc, #424]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d109      	bne.n	80074c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e0c6      	b.n	8007642 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074b4:	4b66      	ldr	r3, [pc, #408]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e0be      	b.n	8007642 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80074c4:	f000 f8ce 	bl	8007664 <HAL_RCC_GetSysClockFreq>
 80074c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	4a61      	ldr	r2, [pc, #388]	@ (8007654 <HAL_RCC_ClockConfig+0x268>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d909      	bls.n	80074e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80074d2:	4b5f      	ldr	r3, [pc, #380]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074da:	4a5d      	ldr	r2, [pc, #372]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 80074dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80074e2:	2380      	movs	r3, #128	@ 0x80
 80074e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074e6:	4b5a      	ldr	r3, [pc, #360]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f023 0203 	bic.w	r2, r3, #3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	4957      	ldr	r1, [pc, #348]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f8:	f7fa ff96 	bl	8002428 <HAL_GetTick>
 80074fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074fe:	e00a      	b.n	8007516 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007500:	f7fa ff92 	bl	8002428 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800750e:	4293      	cmp	r3, r2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e095      	b.n	8007642 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007516:	4b4e      	ldr	r3, [pc, #312]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 020c 	and.w	r2, r3, #12
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	429a      	cmp	r2, r3
 8007526:	d1eb      	bne.n	8007500 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0302 	and.w	r3, r3, #2
 8007530:	2b00      	cmp	r3, #0
 8007532:	d023      	beq.n	800757c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0304 	and.w	r3, r3, #4
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007540:	4b43      	ldr	r3, [pc, #268]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	4a42      	ldr	r2, [pc, #264]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 8007546:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800754a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0308 	and.w	r3, r3, #8
 8007554:	2b00      	cmp	r3, #0
 8007556:	d007      	beq.n	8007568 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007558:	4b3d      	ldr	r3, [pc, #244]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007560:	4a3b      	ldr	r2, [pc, #236]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 8007562:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007566:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007568:	4b39      	ldr	r3, [pc, #228]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	4936      	ldr	r1, [pc, #216]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 8007576:	4313      	orrs	r3, r2
 8007578:	608b      	str	r3, [r1, #8]
 800757a:	e008      	b.n	800758e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	2b80      	cmp	r3, #128	@ 0x80
 8007580:	d105      	bne.n	800758e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007582:	4b33      	ldr	r3, [pc, #204]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	4a32      	ldr	r2, [pc, #200]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 8007588:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800758c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800758e:	4b2f      	ldr	r3, [pc, #188]	@ (800764c <HAL_RCC_ClockConfig+0x260>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 030f 	and.w	r3, r3, #15
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	429a      	cmp	r2, r3
 800759a:	d21d      	bcs.n	80075d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800759c:	4b2b      	ldr	r3, [pc, #172]	@ (800764c <HAL_RCC_ClockConfig+0x260>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f023 020f 	bic.w	r2, r3, #15
 80075a4:	4929      	ldr	r1, [pc, #164]	@ (800764c <HAL_RCC_ClockConfig+0x260>)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80075ac:	f7fa ff3c 	bl	8002428 <HAL_GetTick>
 80075b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075b2:	e00a      	b.n	80075ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075b4:	f7fa ff38 	bl	8002428 <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d901      	bls.n	80075ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e03b      	b.n	8007642 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ca:	4b20      	ldr	r3, [pc, #128]	@ (800764c <HAL_RCC_ClockConfig+0x260>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d1ed      	bne.n	80075b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d008      	beq.n	80075f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	4917      	ldr	r1, [pc, #92]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d009      	beq.n	8007616 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007602:	4b13      	ldr	r3, [pc, #76]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	490f      	ldr	r1, [pc, #60]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 8007612:	4313      	orrs	r3, r2
 8007614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007616:	f000 f825 	bl	8007664 <HAL_RCC_GetSysClockFreq>
 800761a:	4602      	mov	r2, r0
 800761c:	4b0c      	ldr	r3, [pc, #48]	@ (8007650 <HAL_RCC_ClockConfig+0x264>)
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	091b      	lsrs	r3, r3, #4
 8007622:	f003 030f 	and.w	r3, r3, #15
 8007626:	490c      	ldr	r1, [pc, #48]	@ (8007658 <HAL_RCC_ClockConfig+0x26c>)
 8007628:	5ccb      	ldrb	r3, [r1, r3]
 800762a:	f003 031f 	and.w	r3, r3, #31
 800762e:	fa22 f303 	lsr.w	r3, r2, r3
 8007632:	4a0a      	ldr	r2, [pc, #40]	@ (800765c <HAL_RCC_ClockConfig+0x270>)
 8007634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007636:	4b0a      	ldr	r3, [pc, #40]	@ (8007660 <HAL_RCC_ClockConfig+0x274>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f7fa fea8 	bl	8002390 <HAL_InitTick>
 8007640:	4603      	mov	r3, r0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	40022000 	.word	0x40022000
 8007650:	40021000 	.word	0x40021000
 8007654:	04c4b400 	.word	0x04c4b400
 8007658:	0800c04c 	.word	0x0800c04c
 800765c:	20000000 	.word	0x20000000
 8007660:	20000004 	.word	0x20000004

08007664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007664:	b480      	push	{r7}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800766a:	4b2c      	ldr	r3, [pc, #176]	@ (800771c <HAL_RCC_GetSysClockFreq+0xb8>)
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 030c 	and.w	r3, r3, #12
 8007672:	2b04      	cmp	r3, #4
 8007674:	d102      	bne.n	800767c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007676:	4b2a      	ldr	r3, [pc, #168]	@ (8007720 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007678:	613b      	str	r3, [r7, #16]
 800767a:	e047      	b.n	800770c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800767c:	4b27      	ldr	r3, [pc, #156]	@ (800771c <HAL_RCC_GetSysClockFreq+0xb8>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f003 030c 	and.w	r3, r3, #12
 8007684:	2b08      	cmp	r3, #8
 8007686:	d102      	bne.n	800768e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007688:	4b26      	ldr	r3, [pc, #152]	@ (8007724 <HAL_RCC_GetSysClockFreq+0xc0>)
 800768a:	613b      	str	r3, [r7, #16]
 800768c:	e03e      	b.n	800770c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800768e:	4b23      	ldr	r3, [pc, #140]	@ (800771c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 030c 	and.w	r3, r3, #12
 8007696:	2b0c      	cmp	r3, #12
 8007698:	d136      	bne.n	8007708 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800769a:	4b20      	ldr	r3, [pc, #128]	@ (800771c <HAL_RCC_GetSysClockFreq+0xb8>)
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	f003 0303 	and.w	r3, r3, #3
 80076a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076a4:	4b1d      	ldr	r3, [pc, #116]	@ (800771c <HAL_RCC_GetSysClockFreq+0xb8>)
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	091b      	lsrs	r3, r3, #4
 80076aa:	f003 030f 	and.w	r3, r3, #15
 80076ae:	3301      	adds	r3, #1
 80076b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d10c      	bne.n	80076d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076b8:	4a1a      	ldr	r2, [pc, #104]	@ (8007724 <HAL_RCC_GetSysClockFreq+0xc0>)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c0:	4a16      	ldr	r2, [pc, #88]	@ (800771c <HAL_RCC_GetSysClockFreq+0xb8>)
 80076c2:	68d2      	ldr	r2, [r2, #12]
 80076c4:	0a12      	lsrs	r2, r2, #8
 80076c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80076ca:	fb02 f303 	mul.w	r3, r2, r3
 80076ce:	617b      	str	r3, [r7, #20]
      break;
 80076d0:	e00c      	b.n	80076ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076d2:	4a13      	ldr	r2, [pc, #76]	@ (8007720 <HAL_RCC_GetSysClockFreq+0xbc>)
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076da:	4a10      	ldr	r2, [pc, #64]	@ (800771c <HAL_RCC_GetSysClockFreq+0xb8>)
 80076dc:	68d2      	ldr	r2, [r2, #12]
 80076de:	0a12      	lsrs	r2, r2, #8
 80076e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80076e4:	fb02 f303 	mul.w	r3, r2, r3
 80076e8:	617b      	str	r3, [r7, #20]
      break;
 80076ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80076ec:	4b0b      	ldr	r3, [pc, #44]	@ (800771c <HAL_RCC_GetSysClockFreq+0xb8>)
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	0e5b      	lsrs	r3, r3, #25
 80076f2:	f003 0303 	and.w	r3, r3, #3
 80076f6:	3301      	adds	r3, #1
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	fbb2 f3f3 	udiv	r3, r2, r3
 8007704:	613b      	str	r3, [r7, #16]
 8007706:	e001      	b.n	800770c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007708:	2300      	movs	r3, #0
 800770a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800770c:	693b      	ldr	r3, [r7, #16]
}
 800770e:	4618      	mov	r0, r3
 8007710:	371c      	adds	r7, #28
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	40021000 	.word	0x40021000
 8007720:	00f42400 	.word	0x00f42400
 8007724:	016e3600 	.word	0x016e3600

08007728 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007728:	b480      	push	{r7}
 800772a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800772c:	4b03      	ldr	r3, [pc, #12]	@ (800773c <HAL_RCC_GetHCLKFreq+0x14>)
 800772e:	681b      	ldr	r3, [r3, #0]
}
 8007730:	4618      	mov	r0, r3
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	20000000 	.word	0x20000000

08007740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007744:	f7ff fff0 	bl	8007728 <HAL_RCC_GetHCLKFreq>
 8007748:	4602      	mov	r2, r0
 800774a:	4b06      	ldr	r3, [pc, #24]	@ (8007764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	0a1b      	lsrs	r3, r3, #8
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	4904      	ldr	r1, [pc, #16]	@ (8007768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007756:	5ccb      	ldrb	r3, [r1, r3]
 8007758:	f003 031f 	and.w	r3, r3, #31
 800775c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007760:	4618      	mov	r0, r3
 8007762:	bd80      	pop	{r7, pc}
 8007764:	40021000 	.word	0x40021000
 8007768:	0800c05c 	.word	0x0800c05c

0800776c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007770:	f7ff ffda 	bl	8007728 <HAL_RCC_GetHCLKFreq>
 8007774:	4602      	mov	r2, r0
 8007776:	4b06      	ldr	r3, [pc, #24]	@ (8007790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	0adb      	lsrs	r3, r3, #11
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	4904      	ldr	r1, [pc, #16]	@ (8007794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007782:	5ccb      	ldrb	r3, [r1, r3]
 8007784:	f003 031f 	and.w	r3, r3, #31
 8007788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800778c:	4618      	mov	r0, r3
 800778e:	bd80      	pop	{r7, pc}
 8007790:	40021000 	.word	0x40021000
 8007794:	0800c05c 	.word	0x0800c05c

08007798 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800779e:	4b1e      	ldr	r3, [pc, #120]	@ (8007818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f003 0303 	and.w	r3, r3, #3
 80077a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	091b      	lsrs	r3, r3, #4
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	3301      	adds	r3, #1
 80077b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d10c      	bne.n	80077d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077bc:	4a17      	ldr	r2, [pc, #92]	@ (800781c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c4:	4a14      	ldr	r2, [pc, #80]	@ (8007818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077c6:	68d2      	ldr	r2, [r2, #12]
 80077c8:	0a12      	lsrs	r2, r2, #8
 80077ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80077ce:	fb02 f303 	mul.w	r3, r2, r3
 80077d2:	617b      	str	r3, [r7, #20]
    break;
 80077d4:	e00c      	b.n	80077f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077d6:	4a12      	ldr	r2, [pc, #72]	@ (8007820 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	fbb2 f3f3 	udiv	r3, r2, r3
 80077de:	4a0e      	ldr	r2, [pc, #56]	@ (8007818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077e0:	68d2      	ldr	r2, [r2, #12]
 80077e2:	0a12      	lsrs	r2, r2, #8
 80077e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80077e8:	fb02 f303 	mul.w	r3, r2, r3
 80077ec:	617b      	str	r3, [r7, #20]
    break;
 80077ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077f0:	4b09      	ldr	r3, [pc, #36]	@ (8007818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	0e5b      	lsrs	r3, r3, #25
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	3301      	adds	r3, #1
 80077fc:	005b      	lsls	r3, r3, #1
 80077fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	fbb2 f3f3 	udiv	r3, r2, r3
 8007808:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800780a:	687b      	ldr	r3, [r7, #4]
}
 800780c:	4618      	mov	r0, r3
 800780e:	371c      	adds	r7, #28
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	40021000 	.word	0x40021000
 800781c:	016e3600 	.word	0x016e3600
 8007820:	00f42400 	.word	0x00f42400

08007824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800782c:	2300      	movs	r3, #0
 800782e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007830:	2300      	movs	r3, #0
 8007832:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 8098 	beq.w	8007972 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007842:	2300      	movs	r3, #0
 8007844:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007846:	4b43      	ldr	r3, [pc, #268]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800784a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10d      	bne.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007852:	4b40      	ldr	r3, [pc, #256]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007856:	4a3f      	ldr	r2, [pc, #252]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800785c:	6593      	str	r3, [r2, #88]	@ 0x58
 800785e:	4b3d      	ldr	r3, [pc, #244]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007866:	60bb      	str	r3, [r7, #8]
 8007868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800786a:	2301      	movs	r3, #1
 800786c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800786e:	4b3a      	ldr	r3, [pc, #232]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a39      	ldr	r2, [pc, #228]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007878:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800787a:	f7fa fdd5 	bl	8002428 <HAL_GetTick>
 800787e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007880:	e009      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007882:	f7fa fdd1 	bl	8002428 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d902      	bls.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	74fb      	strb	r3, [r7, #19]
        break;
 8007894:	e005      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007896:	4b30      	ldr	r3, [pc, #192]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0ef      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80078a2:	7cfb      	ldrb	r3, [r7, #19]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d159      	bne.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80078a8:	4b2a      	ldr	r3, [pc, #168]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d01e      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d019      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80078c4:	4b23      	ldr	r3, [pc, #140]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078d0:	4b20      	ldr	r3, [pc, #128]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d6:	4a1f      	ldr	r2, [pc, #124]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e6:	4a1b      	ldr	r2, [pc, #108]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80078f0:	4a18      	ldr	r2, [pc, #96]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d016      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007902:	f7fa fd91 	bl	8002428 <HAL_GetTick>
 8007906:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007908:	e00b      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800790a:	f7fa fd8d 	bl	8002428 <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007918:	4293      	cmp	r3, r2
 800791a:	d902      	bls.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	74fb      	strb	r3, [r7, #19]
            break;
 8007920:	e006      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007922:	4b0c      	ldr	r3, [pc, #48]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007928:	f003 0302 	and.w	r3, r3, #2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d0ec      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007930:	7cfb      	ldrb	r3, [r7, #19]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10b      	bne.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007936:	4b07      	ldr	r3, [pc, #28]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800793c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007944:	4903      	ldr	r1, [pc, #12]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007946:	4313      	orrs	r3, r2
 8007948:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800794c:	e008      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800794e:	7cfb      	ldrb	r3, [r7, #19]
 8007950:	74bb      	strb	r3, [r7, #18]
 8007952:	e005      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007954:	40021000 	.word	0x40021000
 8007958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800795c:	7cfb      	ldrb	r3, [r7, #19]
 800795e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007960:	7c7b      	ldrb	r3, [r7, #17]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d105      	bne.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007966:	4ba6      	ldr	r3, [pc, #664]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800796a:	4aa5      	ldr	r2, [pc, #660]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800796c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007970:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800797e:	4ba0      	ldr	r3, [pc, #640]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007984:	f023 0203 	bic.w	r2, r3, #3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	499c      	ldr	r1, [pc, #624]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800798e:	4313      	orrs	r3, r2
 8007990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00a      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80079a0:	4b97      	ldr	r3, [pc, #604]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079a6:	f023 020c 	bic.w	r2, r3, #12
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	4994      	ldr	r1, [pc, #592]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0304 	and.w	r3, r3, #4
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00a      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80079c2:	4b8f      	ldr	r3, [pc, #572]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	498b      	ldr	r1, [pc, #556]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0308 	and.w	r3, r3, #8
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00a      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80079e4:	4b86      	ldr	r3, [pc, #536]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	4983      	ldr	r1, [pc, #524]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a06:	4b7e      	ldr	r3, [pc, #504]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a0c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	497a      	ldr	r1, [pc, #488]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00a      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a28:	4b75      	ldr	r3, [pc, #468]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a2e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	4972      	ldr	r1, [pc, #456]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a4a:	4b6d      	ldr	r3, [pc, #436]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a50:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	4969      	ldr	r1, [pc, #420]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00a      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a6c:	4b64      	ldr	r3, [pc, #400]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a72:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	4961      	ldr	r1, [pc, #388]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a8e:	4b5c      	ldr	r3, [pc, #368]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9c:	4958      	ldr	r1, [pc, #352]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d015      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ab0:	4b53      	ldr	r3, [pc, #332]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ab6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abe:	4950      	ldr	r1, [pc, #320]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ace:	d105      	bne.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ad0:	4b4b      	ldr	r3, [pc, #300]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	4a4a      	ldr	r2, [pc, #296]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ada:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d015      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ae8:	4b45      	ldr	r3, [pc, #276]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af6:	4942      	ldr	r1, [pc, #264]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b06:	d105      	bne.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b08:	4b3d      	ldr	r3, [pc, #244]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	4a3c      	ldr	r2, [pc, #240]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d015      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b20:	4b37      	ldr	r3, [pc, #220]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b26:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b2e:	4934      	ldr	r1, [pc, #208]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b3e:	d105      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b40:	4b2f      	ldr	r3, [pc, #188]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	4a2e      	ldr	r2, [pc, #184]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d015      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b58:	4b29      	ldr	r3, [pc, #164]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b66:	4926      	ldr	r1, [pc, #152]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b76:	d105      	bne.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b78:	4b21      	ldr	r3, [pc, #132]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	4a20      	ldr	r2, [pc, #128]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d015      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b90:	4b1b      	ldr	r3, [pc, #108]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9e:	4918      	ldr	r1, [pc, #96]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007baa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bae:	d105      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bb0:	4b13      	ldr	r3, [pc, #76]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	4a12      	ldr	r2, [pc, #72]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d015      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd6:	490a      	ldr	r1, [pc, #40]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007be2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007be6:	d105      	bne.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007be8:	4b05      	ldr	r3, [pc, #20]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	4a04      	ldr	r2, [pc, #16]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bf2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007bf4:	7cbb      	ldrb	r3, [r7, #18]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	40021000 	.word	0x40021000

08007c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e09d      	b.n	8007d52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d108      	bne.n	8007c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c26:	d009      	beq.n	8007c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	61da      	str	r2, [r3, #28]
 8007c2e:	e005      	b.n	8007c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d106      	bne.n	8007c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7f9 ff20 	bl	8001a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c7c:	d902      	bls.n	8007c84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60fb      	str	r3, [r7, #12]
 8007c82:	e002      	b.n	8007c8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007c92:	d007      	beq.n	8007ca4 <HAL_SPI_Init+0xa0>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c9c:	d002      	beq.n	8007ca4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007cb4:	431a      	orrs	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ce6:	ea42 0103 	orr.w	r1, r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	0c1b      	lsrs	r3, r3, #16
 8007d00:	f003 0204 	and.w	r2, r3, #4
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d08:	f003 0310 	and.w	r3, r3, #16
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007d20:	ea42 0103 	orr.w	r1, r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	69da      	ldr	r2, [r3, #28]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b082      	sub	sp, #8
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e049      	b.n	8007e00 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d106      	bne.n	8007d86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7fa f909 	bl	8001f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	3304      	adds	r3, #4
 8007d96:	4619      	mov	r1, r3
 8007d98:	4610      	mov	r0, r2
 8007d9a:	f000 fe15 	bl	80089c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d001      	beq.n	8007e20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e042      	b.n	8007ea6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a21      	ldr	r2, [pc, #132]	@ (8007eb4 <HAL_TIM_Base_Start+0xac>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d018      	beq.n	8007e64 <HAL_TIM_Base_Start+0x5c>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e3a:	d013      	beq.n	8007e64 <HAL_TIM_Base_Start+0x5c>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a1d      	ldr	r2, [pc, #116]	@ (8007eb8 <HAL_TIM_Base_Start+0xb0>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d00e      	beq.n	8007e64 <HAL_TIM_Base_Start+0x5c>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8007ebc <HAL_TIM_Base_Start+0xb4>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d009      	beq.n	8007e64 <HAL_TIM_Base_Start+0x5c>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a1a      	ldr	r2, [pc, #104]	@ (8007ec0 <HAL_TIM_Base_Start+0xb8>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d004      	beq.n	8007e64 <HAL_TIM_Base_Start+0x5c>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a19      	ldr	r2, [pc, #100]	@ (8007ec4 <HAL_TIM_Base_Start+0xbc>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d115      	bne.n	8007e90 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	4b17      	ldr	r3, [pc, #92]	@ (8007ec8 <HAL_TIM_Base_Start+0xc0>)
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2b06      	cmp	r3, #6
 8007e74:	d015      	beq.n	8007ea2 <HAL_TIM_Base_Start+0x9a>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e7c:	d011      	beq.n	8007ea2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f042 0201 	orr.w	r2, r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e8e:	e008      	b.n	8007ea2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0201 	orr.w	r2, r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	e000      	b.n	8007ea4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	40012c00 	.word	0x40012c00
 8007eb8:	40000400 	.word	0x40000400
 8007ebc:	40000800 	.word	0x40000800
 8007ec0:	40013400 	.word	0x40013400
 8007ec4:	40014000 	.word	0x40014000
 8007ec8:	00010007 	.word	0x00010007

08007ecc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e049      	b.n	8007f72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d106      	bne.n	8007ef8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f841 	bl	8007f7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3304      	adds	r3, #4
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	f000 fd5c 	bl	80089c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b083      	sub	sp, #12
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f82:	bf00      	nop
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
	...

08007f90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d109      	bne.n	8007fb4 <HAL_TIM_PWM_Start+0x24>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	bf14      	ite	ne
 8007fac:	2301      	movne	r3, #1
 8007fae:	2300      	moveq	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	e03c      	b.n	800802e <HAL_TIM_PWM_Start+0x9e>
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2b04      	cmp	r3, #4
 8007fb8:	d109      	bne.n	8007fce <HAL_TIM_PWM_Start+0x3e>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	bf14      	ite	ne
 8007fc6:	2301      	movne	r3, #1
 8007fc8:	2300      	moveq	r3, #0
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	e02f      	b.n	800802e <HAL_TIM_PWM_Start+0x9e>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d109      	bne.n	8007fe8 <HAL_TIM_PWM_Start+0x58>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	bf14      	ite	ne
 8007fe0:	2301      	movne	r3, #1
 8007fe2:	2300      	moveq	r3, #0
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	e022      	b.n	800802e <HAL_TIM_PWM_Start+0x9e>
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2b0c      	cmp	r3, #12
 8007fec:	d109      	bne.n	8008002 <HAL_TIM_PWM_Start+0x72>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	bf14      	ite	ne
 8007ffa:	2301      	movne	r3, #1
 8007ffc:	2300      	moveq	r3, #0
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	e015      	b.n	800802e <HAL_TIM_PWM_Start+0x9e>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b10      	cmp	r3, #16
 8008006:	d109      	bne.n	800801c <HAL_TIM_PWM_Start+0x8c>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b01      	cmp	r3, #1
 8008012:	bf14      	ite	ne
 8008014:	2301      	movne	r3, #1
 8008016:	2300      	moveq	r3, #0
 8008018:	b2db      	uxtb	r3, r3
 800801a:	e008      	b.n	800802e <HAL_TIM_PWM_Start+0x9e>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b01      	cmp	r3, #1
 8008026:	bf14      	ite	ne
 8008028:	2301      	movne	r3, #1
 800802a:	2300      	moveq	r3, #0
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e097      	b.n	8008166 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d104      	bne.n	8008046 <HAL_TIM_PWM_Start+0xb6>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008044:	e023      	b.n	800808e <HAL_TIM_PWM_Start+0xfe>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b04      	cmp	r3, #4
 800804a:	d104      	bne.n	8008056 <HAL_TIM_PWM_Start+0xc6>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2202      	movs	r2, #2
 8008050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008054:	e01b      	b.n	800808e <HAL_TIM_PWM_Start+0xfe>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b08      	cmp	r3, #8
 800805a:	d104      	bne.n	8008066 <HAL_TIM_PWM_Start+0xd6>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008064:	e013      	b.n	800808e <HAL_TIM_PWM_Start+0xfe>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b0c      	cmp	r3, #12
 800806a:	d104      	bne.n	8008076 <HAL_TIM_PWM_Start+0xe6>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008074:	e00b      	b.n	800808e <HAL_TIM_PWM_Start+0xfe>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b10      	cmp	r3, #16
 800807a:	d104      	bne.n	8008086 <HAL_TIM_PWM_Start+0xf6>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008084:	e003      	b.n	800808e <HAL_TIM_PWM_Start+0xfe>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2202      	movs	r2, #2
 800808a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2201      	movs	r2, #1
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	4618      	mov	r0, r3
 8008098:	f001 f92c 	bl	80092f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a33      	ldr	r2, [pc, #204]	@ (8008170 <HAL_TIM_PWM_Start+0x1e0>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d013      	beq.n	80080ce <HAL_TIM_PWM_Start+0x13e>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a32      	ldr	r2, [pc, #200]	@ (8008174 <HAL_TIM_PWM_Start+0x1e4>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d00e      	beq.n	80080ce <HAL_TIM_PWM_Start+0x13e>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a30      	ldr	r2, [pc, #192]	@ (8008178 <HAL_TIM_PWM_Start+0x1e8>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d009      	beq.n	80080ce <HAL_TIM_PWM_Start+0x13e>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a2f      	ldr	r2, [pc, #188]	@ (800817c <HAL_TIM_PWM_Start+0x1ec>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d004      	beq.n	80080ce <HAL_TIM_PWM_Start+0x13e>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a2d      	ldr	r2, [pc, #180]	@ (8008180 <HAL_TIM_PWM_Start+0x1f0>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d101      	bne.n	80080d2 <HAL_TIM_PWM_Start+0x142>
 80080ce:	2301      	movs	r3, #1
 80080d0:	e000      	b.n	80080d4 <HAL_TIM_PWM_Start+0x144>
 80080d2:	2300      	movs	r3, #0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d007      	beq.n	80080e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a20      	ldr	r2, [pc, #128]	@ (8008170 <HAL_TIM_PWM_Start+0x1e0>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d018      	beq.n	8008124 <HAL_TIM_PWM_Start+0x194>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080fa:	d013      	beq.n	8008124 <HAL_TIM_PWM_Start+0x194>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a20      	ldr	r2, [pc, #128]	@ (8008184 <HAL_TIM_PWM_Start+0x1f4>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d00e      	beq.n	8008124 <HAL_TIM_PWM_Start+0x194>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a1f      	ldr	r2, [pc, #124]	@ (8008188 <HAL_TIM_PWM_Start+0x1f8>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d009      	beq.n	8008124 <HAL_TIM_PWM_Start+0x194>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a17      	ldr	r2, [pc, #92]	@ (8008174 <HAL_TIM_PWM_Start+0x1e4>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d004      	beq.n	8008124 <HAL_TIM_PWM_Start+0x194>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a16      	ldr	r2, [pc, #88]	@ (8008178 <HAL_TIM_PWM_Start+0x1e8>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d115      	bne.n	8008150 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689a      	ldr	r2, [r3, #8]
 800812a:	4b18      	ldr	r3, [pc, #96]	@ (800818c <HAL_TIM_PWM_Start+0x1fc>)
 800812c:	4013      	ands	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b06      	cmp	r3, #6
 8008134:	d015      	beq.n	8008162 <HAL_TIM_PWM_Start+0x1d2>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800813c:	d011      	beq.n	8008162 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f042 0201 	orr.w	r2, r2, #1
 800814c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800814e:	e008      	b.n	8008162 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f042 0201 	orr.w	r2, r2, #1
 800815e:	601a      	str	r2, [r3, #0]
 8008160:	e000      	b.n	8008164 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008162:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	40012c00 	.word	0x40012c00
 8008174:	40013400 	.word	0x40013400
 8008178:	40014000 	.word	0x40014000
 800817c:	40014400 	.word	0x40014400
 8008180:	40014800 	.word	0x40014800
 8008184:	40000400 	.word	0x40000400
 8008188:	40000800 	.word	0x40000800
 800818c:	00010007 	.word	0x00010007

08008190 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2200      	movs	r2, #0
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f001 f8a6 	bl	80092f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a3e      	ldr	r2, [pc, #248]	@ (80082a8 <HAL_TIM_PWM_Stop+0x118>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d013      	beq.n	80081da <HAL_TIM_PWM_Stop+0x4a>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a3d      	ldr	r2, [pc, #244]	@ (80082ac <HAL_TIM_PWM_Stop+0x11c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d00e      	beq.n	80081da <HAL_TIM_PWM_Stop+0x4a>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a3b      	ldr	r2, [pc, #236]	@ (80082b0 <HAL_TIM_PWM_Stop+0x120>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d009      	beq.n	80081da <HAL_TIM_PWM_Stop+0x4a>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a3a      	ldr	r2, [pc, #232]	@ (80082b4 <HAL_TIM_PWM_Stop+0x124>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d004      	beq.n	80081da <HAL_TIM_PWM_Stop+0x4a>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a38      	ldr	r2, [pc, #224]	@ (80082b8 <HAL_TIM_PWM_Stop+0x128>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d101      	bne.n	80081de <HAL_TIM_PWM_Stop+0x4e>
 80081da:	2301      	movs	r3, #1
 80081dc:	e000      	b.n	80081e0 <HAL_TIM_PWM_Stop+0x50>
 80081de:	2300      	movs	r3, #0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d017      	beq.n	8008214 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6a1a      	ldr	r2, [r3, #32]
 80081ea:	f241 1311 	movw	r3, #4369	@ 0x1111
 80081ee:	4013      	ands	r3, r2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10f      	bne.n	8008214 <HAL_TIM_PWM_Stop+0x84>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6a1a      	ldr	r2, [r3, #32]
 80081fa:	f244 4344 	movw	r3, #17476	@ 0x4444
 80081fe:	4013      	ands	r3, r2
 8008200:	2b00      	cmp	r3, #0
 8008202:	d107      	bne.n	8008214 <HAL_TIM_PWM_Stop+0x84>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008212:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6a1a      	ldr	r2, [r3, #32]
 800821a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800821e:	4013      	ands	r3, r2
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10f      	bne.n	8008244 <HAL_TIM_PWM_Stop+0xb4>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6a1a      	ldr	r2, [r3, #32]
 800822a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800822e:	4013      	ands	r3, r2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d107      	bne.n	8008244 <HAL_TIM_PWM_Stop+0xb4>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f022 0201 	bic.w	r2, r2, #1
 8008242:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d104      	bne.n	8008254 <HAL_TIM_PWM_Stop+0xc4>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008252:	e023      	b.n	800829c <HAL_TIM_PWM_Stop+0x10c>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	2b04      	cmp	r3, #4
 8008258:	d104      	bne.n	8008264 <HAL_TIM_PWM_Stop+0xd4>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008262:	e01b      	b.n	800829c <HAL_TIM_PWM_Stop+0x10c>
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	2b08      	cmp	r3, #8
 8008268:	d104      	bne.n	8008274 <HAL_TIM_PWM_Stop+0xe4>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008272:	e013      	b.n	800829c <HAL_TIM_PWM_Stop+0x10c>
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	2b0c      	cmp	r3, #12
 8008278:	d104      	bne.n	8008284 <HAL_TIM_PWM_Stop+0xf4>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008282:	e00b      	b.n	800829c <HAL_TIM_PWM_Stop+0x10c>
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2b10      	cmp	r3, #16
 8008288:	d104      	bne.n	8008294 <HAL_TIM_PWM_Stop+0x104>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008292:	e003      	b.n	800829c <HAL_TIM_PWM_Stop+0x10c>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	40012c00 	.word	0x40012c00
 80082ac:	40013400 	.word	0x40013400
 80082b0:	40014000 	.word	0x40014000
 80082b4:	40014400 	.word	0x40014400
 80082b8:	40014800 	.word	0x40014800

080082bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d020      	beq.n	8008320 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f003 0302 	and.w	r3, r3, #2
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01b      	beq.n	8008320 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f06f 0202 	mvn.w	r2, #2
 80082f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	f003 0303 	and.w	r3, r3, #3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f003 fd64 	bl	800bdd4 <HAL_TIM_IC_CaptureCallback>
 800830c:	e005      	b.n	800831a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fb3c 	bl	800898c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fb43 	bl	80089a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f003 0304 	and.w	r3, r3, #4
 8008326:	2b00      	cmp	r3, #0
 8008328:	d020      	beq.n	800836c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b00      	cmp	r3, #0
 8008332:	d01b      	beq.n	800836c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f06f 0204 	mvn.w	r2, #4
 800833c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2202      	movs	r2, #2
 8008342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f003 fd3e 	bl	800bdd4 <HAL_TIM_IC_CaptureCallback>
 8008358:	e005      	b.n	8008366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fb16 	bl	800898c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fb1d 	bl	80089a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f003 0308 	and.w	r3, r3, #8
 8008372:	2b00      	cmp	r3, #0
 8008374:	d020      	beq.n	80083b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f003 0308 	and.w	r3, r3, #8
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01b      	beq.n	80083b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f06f 0208 	mvn.w	r2, #8
 8008388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2204      	movs	r2, #4
 800838e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	f003 0303 	and.w	r3, r3, #3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f003 fd18 	bl	800bdd4 <HAL_TIM_IC_CaptureCallback>
 80083a4:	e005      	b.n	80083b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 faf0 	bl	800898c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 faf7 	bl	80089a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f003 0310 	and.w	r3, r3, #16
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d020      	beq.n	8008404 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f003 0310 	and.w	r3, r3, #16
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d01b      	beq.n	8008404 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f06f 0210 	mvn.w	r2, #16
 80083d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2208      	movs	r2, #8
 80083da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f003 fcf2 	bl	800bdd4 <HAL_TIM_IC_CaptureCallback>
 80083f0:	e005      	b.n	80083fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 faca 	bl	800898c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fad1 	bl	80089a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00c      	beq.n	8008428 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f003 0301 	and.w	r3, r3, #1
 8008414:	2b00      	cmp	r3, #0
 8008416:	d007      	beq.n	8008428 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f06f 0201 	mvn.w	r2, #1
 8008420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 faa8 	bl	8008978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800842e:	2b00      	cmp	r3, #0
 8008430:	d104      	bne.n	800843c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00c      	beq.n	8008456 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008442:	2b00      	cmp	r3, #0
 8008444:	d007      	beq.n	8008456 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800844e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 fbbf 	bl	8009bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00c      	beq.n	800847a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008466:	2b00      	cmp	r3, #0
 8008468:	d007      	beq.n	800847a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f001 fbb7 	bl	8009be8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00c      	beq.n	800849e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800848a:	2b00      	cmp	r3, #0
 800848c:	d007      	beq.n	800849e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fa8b 	bl	80089b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	f003 0320 	and.w	r3, r3, #32
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00c      	beq.n	80084c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f003 0320 	and.w	r3, r3, #32
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d007      	beq.n	80084c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f06f 0220 	mvn.w	r2, #32
 80084ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f001 fb7f 	bl	8009bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00c      	beq.n	80084e6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d007      	beq.n	80084e6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80084de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f001 fb8b 	bl	8009bfc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00c      	beq.n	800850a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d007      	beq.n	800850a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f001 fb83 	bl	8009c10 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00c      	beq.n	800852e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d007      	beq.n	800852e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f001 fb7b 	bl	8009c24 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00c      	beq.n	8008552 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d007      	beq.n	8008552 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800854a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f001 fb73 	bl	8009c38 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008552:	bf00      	nop
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
	...

0800855c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008572:	2b01      	cmp	r3, #1
 8008574:	d101      	bne.n	800857a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008576:	2302      	movs	r3, #2
 8008578:	e0ff      	b.n	800877a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2b14      	cmp	r3, #20
 8008586:	f200 80f0 	bhi.w	800876a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800858a:	a201      	add	r2, pc, #4	@ (adr r2, 8008590 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800858c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008590:	080085e5 	.word	0x080085e5
 8008594:	0800876b 	.word	0x0800876b
 8008598:	0800876b 	.word	0x0800876b
 800859c:	0800876b 	.word	0x0800876b
 80085a0:	08008625 	.word	0x08008625
 80085a4:	0800876b 	.word	0x0800876b
 80085a8:	0800876b 	.word	0x0800876b
 80085ac:	0800876b 	.word	0x0800876b
 80085b0:	08008667 	.word	0x08008667
 80085b4:	0800876b 	.word	0x0800876b
 80085b8:	0800876b 	.word	0x0800876b
 80085bc:	0800876b 	.word	0x0800876b
 80085c0:	080086a7 	.word	0x080086a7
 80085c4:	0800876b 	.word	0x0800876b
 80085c8:	0800876b 	.word	0x0800876b
 80085cc:	0800876b 	.word	0x0800876b
 80085d0:	080086e9 	.word	0x080086e9
 80085d4:	0800876b 	.word	0x0800876b
 80085d8:	0800876b 	.word	0x0800876b
 80085dc:	0800876b 	.word	0x0800876b
 80085e0:	08008729 	.word	0x08008729
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68b9      	ldr	r1, [r7, #8]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 fa88 	bl	8008b00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	699a      	ldr	r2, [r3, #24]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f042 0208 	orr.w	r2, r2, #8
 80085fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	699a      	ldr	r2, [r3, #24]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f022 0204 	bic.w	r2, r2, #4
 800860e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6999      	ldr	r1, [r3, #24]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	691a      	ldr	r2, [r3, #16]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	430a      	orrs	r2, r1
 8008620:	619a      	str	r2, [r3, #24]
      break;
 8008622:	e0a5      	b.n	8008770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68b9      	ldr	r1, [r7, #8]
 800862a:	4618      	mov	r0, r3
 800862c:	f000 faf8 	bl	8008c20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	699a      	ldr	r2, [r3, #24]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800863e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	699a      	ldr	r2, [r3, #24]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800864e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6999      	ldr	r1, [r3, #24]
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	021a      	lsls	r2, r3, #8
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	430a      	orrs	r2, r1
 8008662:	619a      	str	r2, [r3, #24]
      break;
 8008664:	e084      	b.n	8008770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68b9      	ldr	r1, [r7, #8]
 800866c:	4618      	mov	r0, r3
 800866e:	f000 fb61 	bl	8008d34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	69da      	ldr	r2, [r3, #28]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f042 0208 	orr.w	r2, r2, #8
 8008680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69da      	ldr	r2, [r3, #28]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f022 0204 	bic.w	r2, r2, #4
 8008690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	69d9      	ldr	r1, [r3, #28]
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	691a      	ldr	r2, [r3, #16]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	430a      	orrs	r2, r1
 80086a2:	61da      	str	r2, [r3, #28]
      break;
 80086a4:	e064      	b.n	8008770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68b9      	ldr	r1, [r7, #8]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f000 fbc9 	bl	8008e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	69da      	ldr	r2, [r3, #28]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	69da      	ldr	r2, [r3, #28]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	69d9      	ldr	r1, [r3, #28]
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	021a      	lsls	r2, r3, #8
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	430a      	orrs	r2, r1
 80086e4:	61da      	str	r2, [r3, #28]
      break;
 80086e6:	e043      	b.n	8008770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68b9      	ldr	r1, [r7, #8]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 fc32 	bl	8008f58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f042 0208 	orr.w	r2, r2, #8
 8008702:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 0204 	bic.w	r2, r2, #4
 8008712:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	691a      	ldr	r2, [r3, #16]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008726:	e023      	b.n	8008770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	4618      	mov	r0, r3
 8008730:	f000 fc76 	bl	8009020 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008742:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008752:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	021a      	lsls	r2, r3, #8
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	430a      	orrs	r2, r1
 8008766:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008768:	e002      	b.n	8008770 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	75fb      	strb	r3, [r7, #23]
      break;
 800876e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008778:	7dfb      	ldrb	r3, [r7, #23]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3718      	adds	r7, #24
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop

08008784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008798:	2b01      	cmp	r3, #1
 800879a:	d101      	bne.n	80087a0 <HAL_TIM_ConfigClockSource+0x1c>
 800879c:	2302      	movs	r3, #2
 800879e:	e0de      	b.n	800895e <HAL_TIM_ConfigClockSource+0x1da>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2202      	movs	r2, #2
 80087ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80087be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80087c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a63      	ldr	r2, [pc, #396]	@ (8008968 <HAL_TIM_ConfigClockSource+0x1e4>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	f000 80a9 	beq.w	8008932 <HAL_TIM_ConfigClockSource+0x1ae>
 80087e0:	4a61      	ldr	r2, [pc, #388]	@ (8008968 <HAL_TIM_ConfigClockSource+0x1e4>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	f200 80ae 	bhi.w	8008944 <HAL_TIM_ConfigClockSource+0x1c0>
 80087e8:	4a60      	ldr	r2, [pc, #384]	@ (800896c <HAL_TIM_ConfigClockSource+0x1e8>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	f000 80a1 	beq.w	8008932 <HAL_TIM_ConfigClockSource+0x1ae>
 80087f0:	4a5e      	ldr	r2, [pc, #376]	@ (800896c <HAL_TIM_ConfigClockSource+0x1e8>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	f200 80a6 	bhi.w	8008944 <HAL_TIM_ConfigClockSource+0x1c0>
 80087f8:	4a5d      	ldr	r2, [pc, #372]	@ (8008970 <HAL_TIM_ConfigClockSource+0x1ec>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	f000 8099 	beq.w	8008932 <HAL_TIM_ConfigClockSource+0x1ae>
 8008800:	4a5b      	ldr	r2, [pc, #364]	@ (8008970 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008802:	4293      	cmp	r3, r2
 8008804:	f200 809e 	bhi.w	8008944 <HAL_TIM_ConfigClockSource+0x1c0>
 8008808:	4a5a      	ldr	r2, [pc, #360]	@ (8008974 <HAL_TIM_ConfigClockSource+0x1f0>)
 800880a:	4293      	cmp	r3, r2
 800880c:	f000 8091 	beq.w	8008932 <HAL_TIM_ConfigClockSource+0x1ae>
 8008810:	4a58      	ldr	r2, [pc, #352]	@ (8008974 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008812:	4293      	cmp	r3, r2
 8008814:	f200 8096 	bhi.w	8008944 <HAL_TIM_ConfigClockSource+0x1c0>
 8008818:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800881c:	f000 8089 	beq.w	8008932 <HAL_TIM_ConfigClockSource+0x1ae>
 8008820:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008824:	f200 808e 	bhi.w	8008944 <HAL_TIM_ConfigClockSource+0x1c0>
 8008828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800882c:	d03e      	beq.n	80088ac <HAL_TIM_ConfigClockSource+0x128>
 800882e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008832:	f200 8087 	bhi.w	8008944 <HAL_TIM_ConfigClockSource+0x1c0>
 8008836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800883a:	f000 8086 	beq.w	800894a <HAL_TIM_ConfigClockSource+0x1c6>
 800883e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008842:	d87f      	bhi.n	8008944 <HAL_TIM_ConfigClockSource+0x1c0>
 8008844:	2b70      	cmp	r3, #112	@ 0x70
 8008846:	d01a      	beq.n	800887e <HAL_TIM_ConfigClockSource+0xfa>
 8008848:	2b70      	cmp	r3, #112	@ 0x70
 800884a:	d87b      	bhi.n	8008944 <HAL_TIM_ConfigClockSource+0x1c0>
 800884c:	2b60      	cmp	r3, #96	@ 0x60
 800884e:	d050      	beq.n	80088f2 <HAL_TIM_ConfigClockSource+0x16e>
 8008850:	2b60      	cmp	r3, #96	@ 0x60
 8008852:	d877      	bhi.n	8008944 <HAL_TIM_ConfigClockSource+0x1c0>
 8008854:	2b50      	cmp	r3, #80	@ 0x50
 8008856:	d03c      	beq.n	80088d2 <HAL_TIM_ConfigClockSource+0x14e>
 8008858:	2b50      	cmp	r3, #80	@ 0x50
 800885a:	d873      	bhi.n	8008944 <HAL_TIM_ConfigClockSource+0x1c0>
 800885c:	2b40      	cmp	r3, #64	@ 0x40
 800885e:	d058      	beq.n	8008912 <HAL_TIM_ConfigClockSource+0x18e>
 8008860:	2b40      	cmp	r3, #64	@ 0x40
 8008862:	d86f      	bhi.n	8008944 <HAL_TIM_ConfigClockSource+0x1c0>
 8008864:	2b30      	cmp	r3, #48	@ 0x30
 8008866:	d064      	beq.n	8008932 <HAL_TIM_ConfigClockSource+0x1ae>
 8008868:	2b30      	cmp	r3, #48	@ 0x30
 800886a:	d86b      	bhi.n	8008944 <HAL_TIM_ConfigClockSource+0x1c0>
 800886c:	2b20      	cmp	r3, #32
 800886e:	d060      	beq.n	8008932 <HAL_TIM_ConfigClockSource+0x1ae>
 8008870:	2b20      	cmp	r3, #32
 8008872:	d867      	bhi.n	8008944 <HAL_TIM_ConfigClockSource+0x1c0>
 8008874:	2b00      	cmp	r3, #0
 8008876:	d05c      	beq.n	8008932 <HAL_TIM_ConfigClockSource+0x1ae>
 8008878:	2b10      	cmp	r3, #16
 800887a:	d05a      	beq.n	8008932 <HAL_TIM_ConfigClockSource+0x1ae>
 800887c:	e062      	b.n	8008944 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800888e:	f000 fd11 	bl	80092b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80088a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	609a      	str	r2, [r3, #8]
      break;
 80088aa:	e04f      	b.n	800894c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088bc:	f000 fcfa 	bl	80092b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689a      	ldr	r2, [r3, #8]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80088ce:	609a      	str	r2, [r3, #8]
      break;
 80088d0:	e03c      	b.n	800894c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088de:	461a      	mov	r2, r3
 80088e0:	f000 fc6c 	bl	80091bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2150      	movs	r1, #80	@ 0x50
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 fcc5 	bl	800927a <TIM_ITRx_SetConfig>
      break;
 80088f0:	e02c      	b.n	800894c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088fe:	461a      	mov	r2, r3
 8008900:	f000 fc8b 	bl	800921a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2160      	movs	r1, #96	@ 0x60
 800890a:	4618      	mov	r0, r3
 800890c:	f000 fcb5 	bl	800927a <TIM_ITRx_SetConfig>
      break;
 8008910:	e01c      	b.n	800894c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800891e:	461a      	mov	r2, r3
 8008920:	f000 fc4c 	bl	80091bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2140      	movs	r1, #64	@ 0x40
 800892a:	4618      	mov	r0, r3
 800892c:	f000 fca5 	bl	800927a <TIM_ITRx_SetConfig>
      break;
 8008930:	e00c      	b.n	800894c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4619      	mov	r1, r3
 800893c:	4610      	mov	r0, r2
 800893e:	f000 fc9c 	bl	800927a <TIM_ITRx_SetConfig>
      break;
 8008942:	e003      	b.n	800894c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	73fb      	strb	r3, [r7, #15]
      break;
 8008948:	e000      	b.n	800894c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800894a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	00100070 	.word	0x00100070
 800896c:	00100040 	.word	0x00100040
 8008970:	00100030 	.word	0x00100030
 8008974:	00100020 	.word	0x00100020

08008978 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a42      	ldr	r2, [pc, #264]	@ (8008ae4 <TIM_Base_SetConfig+0x11c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00f      	beq.n	8008a00 <TIM_Base_SetConfig+0x38>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089e6:	d00b      	beq.n	8008a00 <TIM_Base_SetConfig+0x38>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a3f      	ldr	r2, [pc, #252]	@ (8008ae8 <TIM_Base_SetConfig+0x120>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d007      	beq.n	8008a00 <TIM_Base_SetConfig+0x38>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a3e      	ldr	r2, [pc, #248]	@ (8008aec <TIM_Base_SetConfig+0x124>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d003      	beq.n	8008a00 <TIM_Base_SetConfig+0x38>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a3d      	ldr	r2, [pc, #244]	@ (8008af0 <TIM_Base_SetConfig+0x128>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d108      	bne.n	8008a12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a33      	ldr	r2, [pc, #204]	@ (8008ae4 <TIM_Base_SetConfig+0x11c>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d01b      	beq.n	8008a52 <TIM_Base_SetConfig+0x8a>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a20:	d017      	beq.n	8008a52 <TIM_Base_SetConfig+0x8a>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a30      	ldr	r2, [pc, #192]	@ (8008ae8 <TIM_Base_SetConfig+0x120>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d013      	beq.n	8008a52 <TIM_Base_SetConfig+0x8a>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a2f      	ldr	r2, [pc, #188]	@ (8008aec <TIM_Base_SetConfig+0x124>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d00f      	beq.n	8008a52 <TIM_Base_SetConfig+0x8a>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a2e      	ldr	r2, [pc, #184]	@ (8008af0 <TIM_Base_SetConfig+0x128>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d00b      	beq.n	8008a52 <TIM_Base_SetConfig+0x8a>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8008af4 <TIM_Base_SetConfig+0x12c>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d007      	beq.n	8008a52 <TIM_Base_SetConfig+0x8a>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a2c      	ldr	r2, [pc, #176]	@ (8008af8 <TIM_Base_SetConfig+0x130>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d003      	beq.n	8008a52 <TIM_Base_SetConfig+0x8a>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8008afc <TIM_Base_SetConfig+0x134>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d108      	bne.n	8008a64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	689a      	ldr	r2, [r3, #8]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a16      	ldr	r2, [pc, #88]	@ (8008ae4 <TIM_Base_SetConfig+0x11c>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d00f      	beq.n	8008ab0 <TIM_Base_SetConfig+0xe8>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a17      	ldr	r2, [pc, #92]	@ (8008af0 <TIM_Base_SetConfig+0x128>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d00b      	beq.n	8008ab0 <TIM_Base_SetConfig+0xe8>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a16      	ldr	r2, [pc, #88]	@ (8008af4 <TIM_Base_SetConfig+0x12c>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d007      	beq.n	8008ab0 <TIM_Base_SetConfig+0xe8>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a15      	ldr	r2, [pc, #84]	@ (8008af8 <TIM_Base_SetConfig+0x130>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d003      	beq.n	8008ab0 <TIM_Base_SetConfig+0xe8>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a14      	ldr	r2, [pc, #80]	@ (8008afc <TIM_Base_SetConfig+0x134>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d103      	bne.n	8008ab8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	691a      	ldr	r2, [r3, #16]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d105      	bne.n	8008ad6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	f023 0201 	bic.w	r2, r3, #1
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	611a      	str	r2, [r3, #16]
  }
}
 8008ad6:	bf00      	nop
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	40012c00 	.word	0x40012c00
 8008ae8:	40000400 	.word	0x40000400
 8008aec:	40000800 	.word	0x40000800
 8008af0:	40013400 	.word	0x40013400
 8008af4:	40014000 	.word	0x40014000
 8008af8:	40014400 	.word	0x40014400
 8008afc:	40014800 	.word	0x40014800

08008b00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a1b      	ldr	r3, [r3, #32]
 8008b14:	f023 0201 	bic.w	r2, r3, #1
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0303 	bic.w	r3, r3, #3
 8008b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f023 0302 	bic.w	r3, r3, #2
 8008b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8008c0c <TIM_OC1_SetConfig+0x10c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d00f      	beq.n	8008b80 <TIM_OC1_SetConfig+0x80>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a2b      	ldr	r2, [pc, #172]	@ (8008c10 <TIM_OC1_SetConfig+0x110>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d00b      	beq.n	8008b80 <TIM_OC1_SetConfig+0x80>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8008c14 <TIM_OC1_SetConfig+0x114>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d007      	beq.n	8008b80 <TIM_OC1_SetConfig+0x80>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a29      	ldr	r2, [pc, #164]	@ (8008c18 <TIM_OC1_SetConfig+0x118>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d003      	beq.n	8008b80 <TIM_OC1_SetConfig+0x80>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a28      	ldr	r2, [pc, #160]	@ (8008c1c <TIM_OC1_SetConfig+0x11c>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d10c      	bne.n	8008b9a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f023 0308 	bic.w	r3, r3, #8
 8008b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f023 0304 	bic.w	r3, r3, #4
 8008b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8008c0c <TIM_OC1_SetConfig+0x10c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d00f      	beq.n	8008bc2 <TIM_OC1_SetConfig+0xc2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8008c10 <TIM_OC1_SetConfig+0x110>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d00b      	beq.n	8008bc2 <TIM_OC1_SetConfig+0xc2>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a19      	ldr	r2, [pc, #100]	@ (8008c14 <TIM_OC1_SetConfig+0x114>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d007      	beq.n	8008bc2 <TIM_OC1_SetConfig+0xc2>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a18      	ldr	r2, [pc, #96]	@ (8008c18 <TIM_OC1_SetConfig+0x118>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d003      	beq.n	8008bc2 <TIM_OC1_SetConfig+0xc2>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a17      	ldr	r2, [pc, #92]	@ (8008c1c <TIM_OC1_SetConfig+0x11c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d111      	bne.n	8008be6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	621a      	str	r2, [r3, #32]
}
 8008c00:	bf00      	nop
 8008c02:	371c      	adds	r7, #28
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	40012c00 	.word	0x40012c00
 8008c10:	40013400 	.word	0x40013400
 8008c14:	40014000 	.word	0x40014000
 8008c18:	40014400 	.word	0x40014400
 8008c1c:	40014800 	.word	0x40014800

08008c20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a1b      	ldr	r3, [r3, #32]
 8008c34:	f023 0210 	bic.w	r2, r3, #16
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	021b      	lsls	r3, r3, #8
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f023 0320 	bic.w	r3, r3, #32
 8008c6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	011b      	lsls	r3, r3, #4
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a28      	ldr	r2, [pc, #160]	@ (8008d20 <TIM_OC2_SetConfig+0x100>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d003      	beq.n	8008c8c <TIM_OC2_SetConfig+0x6c>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a27      	ldr	r2, [pc, #156]	@ (8008d24 <TIM_OC2_SetConfig+0x104>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d10d      	bne.n	8008ca8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	011b      	lsls	r3, r3, #4
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ca6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a1d      	ldr	r2, [pc, #116]	@ (8008d20 <TIM_OC2_SetConfig+0x100>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d00f      	beq.n	8008cd0 <TIM_OC2_SetConfig+0xb0>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8008d24 <TIM_OC2_SetConfig+0x104>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d00b      	beq.n	8008cd0 <TIM_OC2_SetConfig+0xb0>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a1b      	ldr	r2, [pc, #108]	@ (8008d28 <TIM_OC2_SetConfig+0x108>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d007      	beq.n	8008cd0 <TIM_OC2_SetConfig+0xb0>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8008d2c <TIM_OC2_SetConfig+0x10c>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d003      	beq.n	8008cd0 <TIM_OC2_SetConfig+0xb0>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a19      	ldr	r2, [pc, #100]	@ (8008d30 <TIM_OC2_SetConfig+0x110>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d113      	bne.n	8008cf8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008cd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008cde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	621a      	str	r2, [r3, #32]
}
 8008d12:	bf00      	nop
 8008d14:	371c      	adds	r7, #28
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	40012c00 	.word	0x40012c00
 8008d24:	40013400 	.word	0x40013400
 8008d28:	40014000 	.word	0x40014000
 8008d2c:	40014400 	.word	0x40014400
 8008d30:	40014800 	.word	0x40014800

08008d34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a1b      	ldr	r3, [r3, #32]
 8008d48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 0303 	bic.w	r3, r3, #3
 8008d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	021b      	lsls	r3, r3, #8
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a27      	ldr	r2, [pc, #156]	@ (8008e30 <TIM_OC3_SetConfig+0xfc>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d003      	beq.n	8008d9e <TIM_OC3_SetConfig+0x6a>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a26      	ldr	r2, [pc, #152]	@ (8008e34 <TIM_OC3_SetConfig+0x100>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d10d      	bne.n	8008dba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	021b      	lsls	r3, r3, #8
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8008e30 <TIM_OC3_SetConfig+0xfc>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d00f      	beq.n	8008de2 <TIM_OC3_SetConfig+0xae>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8008e34 <TIM_OC3_SetConfig+0x100>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d00b      	beq.n	8008de2 <TIM_OC3_SetConfig+0xae>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8008e38 <TIM_OC3_SetConfig+0x104>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d007      	beq.n	8008de2 <TIM_OC3_SetConfig+0xae>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a19      	ldr	r2, [pc, #100]	@ (8008e3c <TIM_OC3_SetConfig+0x108>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d003      	beq.n	8008de2 <TIM_OC3_SetConfig+0xae>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a18      	ldr	r2, [pc, #96]	@ (8008e40 <TIM_OC3_SetConfig+0x10c>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d113      	bne.n	8008e0a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	011b      	lsls	r3, r3, #4
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	011b      	lsls	r3, r3, #4
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	621a      	str	r2, [r3, #32]
}
 8008e24:	bf00      	nop
 8008e26:	371c      	adds	r7, #28
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	40012c00 	.word	0x40012c00
 8008e34:	40013400 	.word	0x40013400
 8008e38:	40014000 	.word	0x40014000
 8008e3c:	40014400 	.word	0x40014400
 8008e40:	40014800 	.word	0x40014800

08008e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b087      	sub	sp, #28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a1b      	ldr	r3, [r3, #32]
 8008e58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	69db      	ldr	r3, [r3, #28]
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	021b      	lsls	r3, r3, #8
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	031b      	lsls	r3, r3, #12
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a28      	ldr	r2, [pc, #160]	@ (8008f44 <TIM_OC4_SetConfig+0x100>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d003      	beq.n	8008eb0 <TIM_OC4_SetConfig+0x6c>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a27      	ldr	r2, [pc, #156]	@ (8008f48 <TIM_OC4_SetConfig+0x104>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d10d      	bne.n	8008ecc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	031b      	lsls	r3, r3, #12
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008eca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a1d      	ldr	r2, [pc, #116]	@ (8008f44 <TIM_OC4_SetConfig+0x100>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d00f      	beq.n	8008ef4 <TIM_OC4_SetConfig+0xb0>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8008f48 <TIM_OC4_SetConfig+0x104>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d00b      	beq.n	8008ef4 <TIM_OC4_SetConfig+0xb0>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a1b      	ldr	r2, [pc, #108]	@ (8008f4c <TIM_OC4_SetConfig+0x108>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d007      	beq.n	8008ef4 <TIM_OC4_SetConfig+0xb0>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8008f50 <TIM_OC4_SetConfig+0x10c>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d003      	beq.n	8008ef4 <TIM_OC4_SetConfig+0xb0>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a19      	ldr	r2, [pc, #100]	@ (8008f54 <TIM_OC4_SetConfig+0x110>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d113      	bne.n	8008f1c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008efa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f02:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	019b      	lsls	r3, r3, #6
 8008f0a:	693a      	ldr	r2, [r7, #16]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	019b      	lsls	r3, r3, #6
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	621a      	str	r2, [r3, #32]
}
 8008f36:	bf00      	nop
 8008f38:	371c      	adds	r7, #28
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	40012c00 	.word	0x40012c00
 8008f48:	40013400 	.word	0x40013400
 8008f4c:	40014000 	.word	0x40014000
 8008f50:	40014400 	.word	0x40014400
 8008f54:	40014800 	.word	0x40014800

08008f58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a1b      	ldr	r3, [r3, #32]
 8008f6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008f9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	041b      	lsls	r3, r3, #16
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a17      	ldr	r2, [pc, #92]	@ (800900c <TIM_OC5_SetConfig+0xb4>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d00f      	beq.n	8008fd2 <TIM_OC5_SetConfig+0x7a>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a16      	ldr	r2, [pc, #88]	@ (8009010 <TIM_OC5_SetConfig+0xb8>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d00b      	beq.n	8008fd2 <TIM_OC5_SetConfig+0x7a>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a15      	ldr	r2, [pc, #84]	@ (8009014 <TIM_OC5_SetConfig+0xbc>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d007      	beq.n	8008fd2 <TIM_OC5_SetConfig+0x7a>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a14      	ldr	r2, [pc, #80]	@ (8009018 <TIM_OC5_SetConfig+0xc0>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d003      	beq.n	8008fd2 <TIM_OC5_SetConfig+0x7a>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a13      	ldr	r2, [pc, #76]	@ (800901c <TIM_OC5_SetConfig+0xc4>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d109      	bne.n	8008fe6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	021b      	lsls	r3, r3, #8
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	621a      	str	r2, [r3, #32]
}
 8009000:	bf00      	nop
 8009002:	371c      	adds	r7, #28
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	40012c00 	.word	0x40012c00
 8009010:	40013400 	.word	0x40013400
 8009014:	40014000 	.word	0x40014000
 8009018:	40014400 	.word	0x40014400
 800901c:	40014800 	.word	0x40014800

08009020 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6a1b      	ldr	r3, [r3, #32]
 8009034:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800904e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	021b      	lsls	r3, r3, #8
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	4313      	orrs	r3, r2
 800905e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	051b      	lsls	r3, r3, #20
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	4313      	orrs	r3, r2
 8009072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a18      	ldr	r2, [pc, #96]	@ (80090d8 <TIM_OC6_SetConfig+0xb8>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d00f      	beq.n	800909c <TIM_OC6_SetConfig+0x7c>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a17      	ldr	r2, [pc, #92]	@ (80090dc <TIM_OC6_SetConfig+0xbc>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d00b      	beq.n	800909c <TIM_OC6_SetConfig+0x7c>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a16      	ldr	r2, [pc, #88]	@ (80090e0 <TIM_OC6_SetConfig+0xc0>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d007      	beq.n	800909c <TIM_OC6_SetConfig+0x7c>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a15      	ldr	r2, [pc, #84]	@ (80090e4 <TIM_OC6_SetConfig+0xc4>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d003      	beq.n	800909c <TIM_OC6_SetConfig+0x7c>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a14      	ldr	r2, [pc, #80]	@ (80090e8 <TIM_OC6_SetConfig+0xc8>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d109      	bne.n	80090b0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	029b      	lsls	r3, r3, #10
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	685a      	ldr	r2, [r3, #4]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	621a      	str	r2, [r3, #32]
}
 80090ca:	bf00      	nop
 80090cc:	371c      	adds	r7, #28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	40012c00 	.word	0x40012c00
 80090dc:	40013400 	.word	0x40013400
 80090e0:	40014000 	.word	0x40014000
 80090e4:	40014400 	.word	0x40014400
 80090e8:	40014800 	.word	0x40014800

080090ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
 80090f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6a1b      	ldr	r3, [r3, #32]
 8009104:	f023 0201 	bic.w	r2, r3, #1
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	4a24      	ldr	r2, [pc, #144]	@ (80091a8 <TIM_TI1_SetConfig+0xbc>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d013      	beq.n	8009142 <TIM_TI1_SetConfig+0x56>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009120:	d00f      	beq.n	8009142 <TIM_TI1_SetConfig+0x56>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	4a21      	ldr	r2, [pc, #132]	@ (80091ac <TIM_TI1_SetConfig+0xc0>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d00b      	beq.n	8009142 <TIM_TI1_SetConfig+0x56>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4a20      	ldr	r2, [pc, #128]	@ (80091b0 <TIM_TI1_SetConfig+0xc4>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d007      	beq.n	8009142 <TIM_TI1_SetConfig+0x56>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	4a1f      	ldr	r2, [pc, #124]	@ (80091b4 <TIM_TI1_SetConfig+0xc8>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d003      	beq.n	8009142 <TIM_TI1_SetConfig+0x56>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	4a1e      	ldr	r2, [pc, #120]	@ (80091b8 <TIM_TI1_SetConfig+0xcc>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d101      	bne.n	8009146 <TIM_TI1_SetConfig+0x5a>
 8009142:	2301      	movs	r3, #1
 8009144:	e000      	b.n	8009148 <TIM_TI1_SetConfig+0x5c>
 8009146:	2300      	movs	r3, #0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d008      	beq.n	800915e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	f023 0303 	bic.w	r3, r3, #3
 8009152:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4313      	orrs	r3, r2
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e003      	b.n	8009166 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f043 0301 	orr.w	r3, r3, #1
 8009164:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800916c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	011b      	lsls	r3, r3, #4
 8009172:	b2db      	uxtb	r3, r3
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	4313      	orrs	r3, r2
 8009178:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f023 030a 	bic.w	r3, r3, #10
 8009180:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	f003 030a 	and.w	r3, r3, #10
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	4313      	orrs	r3, r2
 800918c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	621a      	str	r2, [r3, #32]
}
 800919a:	bf00      	nop
 800919c:	371c      	adds	r7, #28
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	40012c00 	.word	0x40012c00
 80091ac:	40000400 	.word	0x40000400
 80091b0:	40000800 	.word	0x40000800
 80091b4:	40013400 	.word	0x40013400
 80091b8:	40014000 	.word	0x40014000

080091bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6a1b      	ldr	r3, [r3, #32]
 80091cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6a1b      	ldr	r3, [r3, #32]
 80091d2:	f023 0201 	bic.w	r2, r3, #1
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	011b      	lsls	r3, r3, #4
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	f023 030a 	bic.w	r3, r3, #10
 80091f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	4313      	orrs	r3, r2
 8009200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	621a      	str	r2, [r3, #32]
}
 800920e:	bf00      	nop
 8009210:	371c      	adds	r7, #28
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr

0800921a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800921a:	b480      	push	{r7}
 800921c:	b087      	sub	sp, #28
 800921e:	af00      	add	r7, sp, #0
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	60b9      	str	r1, [r7, #8]
 8009224:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	f023 0210 	bic.w	r2, r3, #16
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009244:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	031b      	lsls	r3, r3, #12
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	4313      	orrs	r3, r2
 800924e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009256:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	011b      	lsls	r3, r3, #4
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	4313      	orrs	r3, r2
 8009260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	621a      	str	r2, [r3, #32]
}
 800926e:	bf00      	nop
 8009270:	371c      	adds	r7, #28
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800927a:	b480      	push	{r7}
 800927c:	b085      	sub	sp, #20
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	4313      	orrs	r3, r2
 800929c:	f043 0307 	orr.w	r3, r3, #7
 80092a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	609a      	str	r2, [r3, #8]
}
 80092a8:	bf00      	nop
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b087      	sub	sp, #28
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
 80092c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80092ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	021a      	lsls	r2, r3, #8
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	431a      	orrs	r2, r3
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	4313      	orrs	r3, r2
 80092dc:	697a      	ldr	r2, [r7, #20]
 80092de:	4313      	orrs	r3, r2
 80092e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	697a      	ldr	r2, [r7, #20]
 80092e6:	609a      	str	r2, [r3, #8]
}
 80092e8:	bf00      	nop
 80092ea:	371c      	adds	r7, #28
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b087      	sub	sp, #28
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	f003 031f 	and.w	r3, r3, #31
 8009306:	2201      	movs	r2, #1
 8009308:	fa02 f303 	lsl.w	r3, r2, r3
 800930c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6a1a      	ldr	r2, [r3, #32]
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	43db      	mvns	r3, r3
 8009316:	401a      	ands	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6a1a      	ldr	r2, [r3, #32]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	f003 031f 	and.w	r3, r3, #31
 8009326:	6879      	ldr	r1, [r7, #4]
 8009328:	fa01 f303 	lsl.w	r3, r1, r3
 800932c:	431a      	orrs	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	621a      	str	r2, [r3, #32]
}
 8009332:	bf00      	nop
 8009334:	371c      	adds	r7, #28
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b08a      	sub	sp, #40	@ 0x28
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e0a0      	b.n	8009494 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d106      	bne.n	800936c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f898 	bl	800949c <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2202      	movs	r2, #2
 8009370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3304      	adds	r3, #4
 800937c:	4619      	mov	r1, r3
 800937e:	4610      	mov	r0, r2
 8009380:	f7ff fb22 	bl	80089c8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	6819      	ldr	r1, [r3, #0]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	2203      	movs	r2, #3
 8009392:	f7ff feab 	bl	80090ec <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	699a      	ldr	r2, [r3, #24]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f022 020c 	bic.w	r2, r2, #12
 80093a4:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6999      	ldr	r1, [r3, #24]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	430a      	orrs	r2, r1
 80093b6:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80093c6:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	6812      	ldr	r2, [r2, #0]
 80093d2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80093d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093da:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	689a      	ldr	r2, [r3, #8]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093ea:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	6812      	ldr	r2, [r2, #0]
 80093f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093fa:	f023 0307 	bic.w	r3, r3, #7
 80093fe:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	689a      	ldr	r2, [r3, #8]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f042 0204 	orr.w	r2, r2, #4
 800940e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8009410:	2300      	movs	r3, #0
 8009412:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009414:	2300      	movs	r3, #0
 8009416:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8009418:	2370      	movs	r3, #112	@ 0x70
 800941a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800941c:	2300      	movs	r3, #0
 800941e:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009420:	2300      	movs	r3, #0
 8009422:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009424:	2300      	movs	r3, #0
 8009426:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f107 020c 	add.w	r2, r7, #12
 8009436:	4611      	mov	r1, r2
 8009438:	4618      	mov	r0, r3
 800943a:	f7ff fbf1 	bl	8008c20 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	6812      	ldr	r2, [r2, #0]
 8009448:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800944c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009450:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	685a      	ldr	r2, [r3, #4]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8009460:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2201      	movs	r2, #1
 8009466:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2201      	movs	r2, #1
 800946e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3728      	adds	r7, #40	@ 0x28
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80094be:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80094c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094ce:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094d6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d108      	bne.n	80094f0 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80094de:	7bbb      	ldrb	r3, [r7, #14]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d105      	bne.n	80094f0 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80094e4:	7b7b      	ldrb	r3, [r7, #13]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d102      	bne.n	80094f0 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80094ea:	7b3b      	ldrb	r3, [r7, #12]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d001      	beq.n	80094f4 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e05d      	b.n	80095b0 <HAL_TIMEx_HallSensor_Start_IT+0x100>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2202      	movs	r2, #2
 80094f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2202      	movs	r2, #2
 8009500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2202      	movs	r2, #2
 8009508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2202      	movs	r2, #2
 8009510:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68da      	ldr	r2, [r3, #12]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f042 0202 	orr.w	r2, r2, #2
 8009522:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2201      	movs	r2, #1
 800952a:	2100      	movs	r1, #0
 800952c:	4618      	mov	r0, r3
 800952e:	f7ff fee1 	bl	80092f4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a20      	ldr	r2, [pc, #128]	@ (80095b8 <HAL_TIMEx_HallSensor_Start_IT+0x108>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d018      	beq.n	800956e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009544:	d013      	beq.n	800956e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a1c      	ldr	r2, [pc, #112]	@ (80095bc <HAL_TIMEx_HallSensor_Start_IT+0x10c>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d00e      	beq.n	800956e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a1a      	ldr	r2, [pc, #104]	@ (80095c0 <HAL_TIMEx_HallSensor_Start_IT+0x110>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d009      	beq.n	800956e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a19      	ldr	r2, [pc, #100]	@ (80095c4 <HAL_TIMEx_HallSensor_Start_IT+0x114>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d004      	beq.n	800956e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a17      	ldr	r2, [pc, #92]	@ (80095c8 <HAL_TIMEx_HallSensor_Start_IT+0x118>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d115      	bne.n	800959a <HAL_TIMEx_HallSensor_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	4b15      	ldr	r3, [pc, #84]	@ (80095cc <HAL_TIMEx_HallSensor_Start_IT+0x11c>)
 8009576:	4013      	ands	r3, r2
 8009578:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	2b06      	cmp	r3, #6
 800957e:	d015      	beq.n	80095ac <HAL_TIMEx_HallSensor_Start_IT+0xfc>
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009586:	d011      	beq.n	80095ac <HAL_TIMEx_HallSensor_Start_IT+0xfc>
    {
      __HAL_TIM_ENABLE(htim);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f042 0201 	orr.w	r2, r2, #1
 8009596:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009598:	e008      	b.n	80095ac <HAL_TIMEx_HallSensor_Start_IT+0xfc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f042 0201 	orr.w	r2, r2, #1
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	e000      	b.n	80095ae <HAL_TIMEx_HallSensor_Start_IT+0xfe>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	40012c00 	.word	0x40012c00
 80095bc:	40000400 	.word	0x40000400
 80095c0:	40000800 	.word	0x40000800
 80095c4:	40013400 	.word	0x40013400
 80095c8:	40014000 	.word	0x40014000
 80095cc:	00010007 	.word	0x00010007

080095d0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d109      	bne.n	80095f4 <HAL_TIMEx_PWMN_Start+0x24>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	bf14      	ite	ne
 80095ec:	2301      	movne	r3, #1
 80095ee:	2300      	moveq	r3, #0
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	e022      	b.n	800963a <HAL_TIMEx_PWMN_Start+0x6a>
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	2b04      	cmp	r3, #4
 80095f8:	d109      	bne.n	800960e <HAL_TIMEx_PWMN_Start+0x3e>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009600:	b2db      	uxtb	r3, r3
 8009602:	2b01      	cmp	r3, #1
 8009604:	bf14      	ite	ne
 8009606:	2301      	movne	r3, #1
 8009608:	2300      	moveq	r3, #0
 800960a:	b2db      	uxtb	r3, r3
 800960c:	e015      	b.n	800963a <HAL_TIMEx_PWMN_Start+0x6a>
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	2b08      	cmp	r3, #8
 8009612:	d109      	bne.n	8009628 <HAL_TIMEx_PWMN_Start+0x58>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800961a:	b2db      	uxtb	r3, r3
 800961c:	2b01      	cmp	r3, #1
 800961e:	bf14      	ite	ne
 8009620:	2301      	movne	r3, #1
 8009622:	2300      	moveq	r3, #0
 8009624:	b2db      	uxtb	r3, r3
 8009626:	e008      	b.n	800963a <HAL_TIMEx_PWMN_Start+0x6a>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b01      	cmp	r3, #1
 8009632:	bf14      	ite	ne
 8009634:	2301      	movne	r3, #1
 8009636:	2300      	moveq	r3, #0
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e069      	b.n	8009716 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d104      	bne.n	8009652 <HAL_TIMEx_PWMN_Start+0x82>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009650:	e013      	b.n	800967a <HAL_TIMEx_PWMN_Start+0xaa>
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b04      	cmp	r3, #4
 8009656:	d104      	bne.n	8009662 <HAL_TIMEx_PWMN_Start+0x92>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2202      	movs	r2, #2
 800965c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009660:	e00b      	b.n	800967a <HAL_TIMEx_PWMN_Start+0xaa>
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	2b08      	cmp	r3, #8
 8009666:	d104      	bne.n	8009672 <HAL_TIMEx_PWMN_Start+0xa2>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2202      	movs	r2, #2
 800966c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009670:	e003      	b.n	800967a <HAL_TIMEx_PWMN_Start+0xaa>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2202      	movs	r2, #2
 8009676:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2204      	movs	r2, #4
 8009680:	6839      	ldr	r1, [r7, #0]
 8009682:	4618      	mov	r0, r3
 8009684:	f000 fae2 	bl	8009c4c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009696:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a20      	ldr	r2, [pc, #128]	@ (8009720 <HAL_TIMEx_PWMN_Start+0x150>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d018      	beq.n	80096d4 <HAL_TIMEx_PWMN_Start+0x104>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096aa:	d013      	beq.n	80096d4 <HAL_TIMEx_PWMN_Start+0x104>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a1c      	ldr	r2, [pc, #112]	@ (8009724 <HAL_TIMEx_PWMN_Start+0x154>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d00e      	beq.n	80096d4 <HAL_TIMEx_PWMN_Start+0x104>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a1b      	ldr	r2, [pc, #108]	@ (8009728 <HAL_TIMEx_PWMN_Start+0x158>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d009      	beq.n	80096d4 <HAL_TIMEx_PWMN_Start+0x104>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a19      	ldr	r2, [pc, #100]	@ (800972c <HAL_TIMEx_PWMN_Start+0x15c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d004      	beq.n	80096d4 <HAL_TIMEx_PWMN_Start+0x104>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a18      	ldr	r2, [pc, #96]	@ (8009730 <HAL_TIMEx_PWMN_Start+0x160>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d115      	bne.n	8009700 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689a      	ldr	r2, [r3, #8]
 80096da:	4b16      	ldr	r3, [pc, #88]	@ (8009734 <HAL_TIMEx_PWMN_Start+0x164>)
 80096dc:	4013      	ands	r3, r2
 80096de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2b06      	cmp	r3, #6
 80096e4:	d015      	beq.n	8009712 <HAL_TIMEx_PWMN_Start+0x142>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096ec:	d011      	beq.n	8009712 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f042 0201 	orr.w	r2, r2, #1
 80096fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096fe:	e008      	b.n	8009712 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f042 0201 	orr.w	r2, r2, #1
 800970e:	601a      	str	r2, [r3, #0]
 8009710:	e000      	b.n	8009714 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009712:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	40012c00 	.word	0x40012c00
 8009724:	40000400 	.word	0x40000400
 8009728:	40000800 	.word	0x40000800
 800972c:	40013400 	.word	0x40013400
 8009730:	40014000 	.word	0x40014000
 8009734:	00010007 	.word	0x00010007

08009738 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2200      	movs	r2, #0
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	4618      	mov	r0, r3
 800974c:	f000 fa7e 	bl	8009c4c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6a1a      	ldr	r2, [r3, #32]
 8009756:	f241 1311 	movw	r3, #4369	@ 0x1111
 800975a:	4013      	ands	r3, r2
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10f      	bne.n	8009780 <HAL_TIMEx_PWMN_Stop+0x48>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6a1a      	ldr	r2, [r3, #32]
 8009766:	f244 4344 	movw	r3, #17476	@ 0x4444
 800976a:	4013      	ands	r3, r2
 800976c:	2b00      	cmp	r3, #0
 800976e:	d107      	bne.n	8009780 <HAL_TIMEx_PWMN_Stop+0x48>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800977e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6a1a      	ldr	r2, [r3, #32]
 8009786:	f241 1311 	movw	r3, #4369	@ 0x1111
 800978a:	4013      	ands	r3, r2
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10f      	bne.n	80097b0 <HAL_TIMEx_PWMN_Stop+0x78>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6a1a      	ldr	r2, [r3, #32]
 8009796:	f244 4344 	movw	r3, #17476	@ 0x4444
 800979a:	4013      	ands	r3, r2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d107      	bne.n	80097b0 <HAL_TIMEx_PWMN_Stop+0x78>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 0201 	bic.w	r2, r2, #1
 80097ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d104      	bne.n	80097c0 <HAL_TIMEx_PWMN_Stop+0x88>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2201      	movs	r2, #1
 80097ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097be:	e013      	b.n	80097e8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	2b04      	cmp	r3, #4
 80097c4:	d104      	bne.n	80097d0 <HAL_TIMEx_PWMN_Stop+0x98>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097ce:	e00b      	b.n	80097e8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	2b08      	cmp	r3, #8
 80097d4:	d104      	bne.n	80097e0 <HAL_TIMEx_PWMN_Stop+0xa8>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80097de:	e003      	b.n	80097e8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
	...

080097f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009804:	2b01      	cmp	r3, #1
 8009806:	d101      	bne.n	800980c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009808:	2302      	movs	r3, #2
 800980a:	e065      	b.n	80098d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2202      	movs	r2, #2
 8009818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a2c      	ldr	r2, [pc, #176]	@ (80098e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d004      	beq.n	8009840 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a2b      	ldr	r2, [pc, #172]	@ (80098e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d108      	bne.n	8009852 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009846:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	4313      	orrs	r3, r2
 8009850:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800985c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	4313      	orrs	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a1b      	ldr	r2, [pc, #108]	@ (80098e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d018      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009882:	d013      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a18      	ldr	r2, [pc, #96]	@ (80098ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d00e      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a17      	ldr	r2, [pc, #92]	@ (80098f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d009      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a12      	ldr	r2, [pc, #72]	@ (80098e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d004      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a13      	ldr	r2, [pc, #76]	@ (80098f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d10c      	bne.n	80098c6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	40012c00 	.word	0x40012c00
 80098e8:	40013400 	.word	0x40013400
 80098ec:	40000400 	.word	0x40000400
 80098f0:	40000800 	.word	0x40000800
 80098f4:	40014000 	.word	0x40014000

080098f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009902:	2300      	movs	r3, #0
 8009904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800990c:	2b01      	cmp	r3, #1
 800990e:	d101      	bne.n	8009914 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009910:	2302      	movs	r3, #2
 8009912:	e073      	b.n	80099fc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	4313      	orrs	r3, r2
 8009928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	4313      	orrs	r3, r2
 8009936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	4313      	orrs	r3, r2
 8009944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4313      	orrs	r3, r2
 8009952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	4313      	orrs	r3, r2
 8009960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	4313      	orrs	r3, r2
 800996e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800997a:	4313      	orrs	r3, r2
 800997c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	041b      	lsls	r3, r3, #16
 800998a:	4313      	orrs	r3, r2
 800998c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	4313      	orrs	r3, r2
 800999a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a19      	ldr	r2, [pc, #100]	@ (8009a08 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d004      	beq.n	80099b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a18      	ldr	r2, [pc, #96]	@ (8009a0c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d11c      	bne.n	80099ea <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ba:	051b      	lsls	r3, r3, #20
 80099bc:	4313      	orrs	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d8:	4313      	orrs	r3, r2
 80099da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e6:	4313      	orrs	r3, r2
 80099e8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr
 8009a08:	40012c00 	.word	0x40012c00
 8009a0c:	40013400 	.word	0x40013400

08009a10 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b08b      	sub	sp, #44	@ 0x2c
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d101      	bne.n	8009a30 <HAL_TIMEx_ConfigBreakInput+0x20>
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	e0c1      	b.n	8009bb4 <HAL_TIMEx_ConfigBreakInput+0x1a4>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	2b0f      	cmp	r3, #15
 8009a40:	d854      	bhi.n	8009aec <HAL_TIMEx_ConfigBreakInput+0xdc>
 8009a42:	a201      	add	r2, pc, #4	@ (adr r2, 8009a48 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8009a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a48:	08009a89 	.word	0x08009a89
 8009a4c:	08009a9d 	.word	0x08009a9d
 8009a50:	08009aed 	.word	0x08009aed
 8009a54:	08009ab1 	.word	0x08009ab1
 8009a58:	08009aed 	.word	0x08009aed
 8009a5c:	08009aed 	.word	0x08009aed
 8009a60:	08009aed 	.word	0x08009aed
 8009a64:	08009ac5 	.word	0x08009ac5
 8009a68:	08009aed 	.word	0x08009aed
 8009a6c:	08009aed 	.word	0x08009aed
 8009a70:	08009aed 	.word	0x08009aed
 8009a74:	08009aed 	.word	0x08009aed
 8009a78:	08009aed 	.word	0x08009aed
 8009a7c:	08009aed 	.word	0x08009aed
 8009a80:	08009aed 	.word	0x08009aed
 8009a84:	08009ad9 	.word	0x08009ad9
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8009a90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a94:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8009a96:	2309      	movs	r3, #9
 8009a98:	617b      	str	r3, [r7, #20]
      break;
 8009a9a:	e030      	b.n	8009afe <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8009a9c:	2302      	movs	r3, #2
 8009a9e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8009aa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009aa8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8009aaa:	230a      	movs	r3, #10
 8009aac:	617b      	str	r3, [r7, #20]
      break;
 8009aae:	e026      	b.n	8009afe <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8009ab0:	2304      	movs	r3, #4
 8009ab2:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8009ab8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009abc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8009abe:	230b      	movs	r3, #11
 8009ac0:	617b      	str	r3, [r7, #20]
      break;
 8009ac2:	e01c      	b.n	8009afe <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8009ac4:	2308      	movs	r3, #8
 8009ac6:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8009acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ad0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8009ad2:	230c      	movs	r3, #12
 8009ad4:	617b      	str	r3, [r7, #20]
      break;
 8009ad6:	e012      	b.n	8009afe <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 8009ad8:	2310      	movs	r3, #16
 8009ada:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8009adc:	2304      	movs	r3, #4
 8009ade:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8009ae0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009ae4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8009ae6:	230d      	movs	r3, #13
 8009ae8:	617b      	str	r3, [r7, #20]
      break;
 8009aea:	e008      	b.n	8009afe <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8009aec:	2300      	movs	r3, #0
 8009aee:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8009af0:	2300      	movs	r3, #0
 8009af2:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8009af8:	2300      	movs	r3, #0
 8009afa:	617b      	str	r3, [r7, #20]
      break;
 8009afc:	bf00      	nop
    }
  }

  switch (BreakInput)
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d003      	beq.n	8009b0c <HAL_TIMEx_ConfigBreakInput+0xfc>
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d025      	beq.n	8009b56 <HAL_TIMEx_ConfigBreakInput+0x146>
 8009b0a:	e049      	b.n	8009ba0 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b12:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009b14:	6a3b      	ldr	r3, [r7, #32]
 8009b16:	43db      	mvns	r3, r3
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	685a      	ldr	r2, [r3, #4]
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	409a      	lsls	r2, r3
 8009b26:	6a3b      	ldr	r3, [r7, #32]
 8009b28:	4013      	ands	r3, r2
 8009b2a:	693a      	ldr	r2, [r7, #16]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	43db      	mvns	r3, r3
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	4013      	ands	r3, r2
 8009b38:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	689a      	ldr	r2, [r3, #8]
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	409a      	lsls	r2, r3
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	4013      	ands	r3, r2
 8009b46:	693a      	ldr	r2, [r7, #16]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	693a      	ldr	r2, [r7, #16]
 8009b52:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8009b54:	e028      	b.n	8009ba8 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b5c:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	43db      	mvns	r3, r3
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	4013      	ands	r3, r2
 8009b66:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	409a      	lsls	r2, r3
 8009b70:	6a3b      	ldr	r3, [r7, #32]
 8009b72:	4013      	ands	r3, r2
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	43db      	mvns	r3, r3
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	4013      	ands	r3, r2
 8009b82:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	689a      	ldr	r2, [r3, #8]
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	409a      	lsls	r2, r3
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	4013      	ands	r3, r2
 8009b90:	693a      	ldr	r2, [r7, #16]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8009b9e:	e003      	b.n	8009ba8 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8009ba6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	372c      	adds	r7, #44	@ 0x2c
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b087      	sub	sp, #28
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	f003 030f 	and.w	r3, r3, #15
 8009c5e:	2204      	movs	r2, #4
 8009c60:	fa02 f303 	lsl.w	r3, r2, r3
 8009c64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6a1a      	ldr	r2, [r3, #32]
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	43db      	mvns	r3, r3
 8009c6e:	401a      	ands	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6a1a      	ldr	r2, [r3, #32]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	f003 030f 	and.w	r3, r3, #15
 8009c7e:	6879      	ldr	r1, [r7, #4]
 8009c80:	fa01 f303 	lsl.w	r3, r1, r3
 8009c84:	431a      	orrs	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	621a      	str	r2, [r3, #32]
}
 8009c8a:	bf00      	nop
 8009c8c:	371c      	adds	r7, #28
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b082      	sub	sp, #8
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d101      	bne.n	8009ca8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e042      	b.n	8009d2e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d106      	bne.n	8009cc0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7f8 fa98 	bl	80021f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2224      	movs	r2, #36	@ 0x24
 8009cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f022 0201 	bic.w	r2, r2, #1
 8009cd6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fec3 	bl	800aa6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fbf4 	bl	800a4d4 <UART_SetConfig>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d101      	bne.n	8009cf6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e01b      	b.n	8009d2e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	685a      	ldr	r2, [r3, #4]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009d04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689a      	ldr	r2, [r3, #8]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009d14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f042 0201 	orr.w	r2, r2, #1
 8009d24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 ff42 	bl	800abb0 <UART_CheckIdleState>
 8009d2c:	4603      	mov	r3, r0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
	...

08009d38 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08a      	sub	sp, #40	@ 0x28
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	4613      	mov	r3, r2
 8009d44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d4c:	2b20      	cmp	r3, #32
 8009d4e:	d167      	bne.n	8009e20 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d002      	beq.n	8009d5c <HAL_UART_Transmit_DMA+0x24>
 8009d56:	88fb      	ldrh	r3, [r7, #6]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d101      	bne.n	8009d60 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e060      	b.n	8009e22 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	88fa      	ldrh	r2, [r7, #6]
 8009d6a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	88fa      	ldrh	r2, [r7, #6]
 8009d72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2221      	movs	r2, #33	@ 0x21
 8009d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d028      	beq.n	8009de0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d92:	4a26      	ldr	r2, [pc, #152]	@ (8009e2c <HAL_UART_Transmit_DMA+0xf4>)
 8009d94:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d9a:	4a25      	ldr	r2, [pc, #148]	@ (8009e30 <HAL_UART_Transmit_DMA+0xf8>)
 8009d9c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009da2:	4a24      	ldr	r2, [pc, #144]	@ (8009e34 <HAL_UART_Transmit_DMA+0xfc>)
 8009da4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009daa:	2200      	movs	r2, #0
 8009dac:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009db6:	4619      	mov	r1, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	3328      	adds	r3, #40	@ 0x28
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	88fb      	ldrh	r3, [r7, #6]
 8009dc2:	f7fb fdbd 	bl	8005940 <HAL_DMA_Start_IT>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d009      	beq.n	8009de0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2210      	movs	r2, #16
 8009dd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2220      	movs	r2, #32
 8009dd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e020      	b.n	8009e22 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2240      	movs	r2, #64	@ 0x40
 8009de6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	3308      	adds	r3, #8
 8009dee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	e853 3f00 	ldrex	r3, [r3]
 8009df6:	613b      	str	r3, [r7, #16]
   return(result);
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3308      	adds	r3, #8
 8009e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e08:	623a      	str	r2, [r7, #32]
 8009e0a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0c:	69f9      	ldr	r1, [r7, #28]
 8009e0e:	6a3a      	ldr	r2, [r7, #32]
 8009e10:	e841 2300 	strex	r3, r2, [r1]
 8009e14:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1e5      	bne.n	8009de8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	e000      	b.n	8009e22 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009e20:	2302      	movs	r3, #2
  }
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3728      	adds	r7, #40	@ 0x28
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	0800af2d 	.word	0x0800af2d
 8009e30:	0800afc7 	.word	0x0800afc7
 8009e34:	0800afe3 	.word	0x0800afe3

08009e38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b0ba      	sub	sp, #232	@ 0xe8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009e62:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009e66:	4013      	ands	r3, r2
 8009e68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009e6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d11b      	bne.n	8009eac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e78:	f003 0320 	and.w	r3, r3, #32
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d015      	beq.n	8009eac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e84:	f003 0320 	and.w	r3, r3, #32
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d105      	bne.n	8009e98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d009      	beq.n	8009eac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 82e3 	beq.w	800a468 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	4798      	blx	r3
      }
      return;
 8009eaa:	e2dd      	b.n	800a468 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009eac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 8123 	beq.w	800a0fc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009eb6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009eba:	4b8d      	ldr	r3, [pc, #564]	@ (800a0f0 <HAL_UART_IRQHandler+0x2b8>)
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d106      	bne.n	8009ed0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009ec2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009ec6:	4b8b      	ldr	r3, [pc, #556]	@ (800a0f4 <HAL_UART_IRQHandler+0x2bc>)
 8009ec8:	4013      	ands	r3, r2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f000 8116 	beq.w	800a0fc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ed4:	f003 0301 	and.w	r3, r3, #1
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d011      	beq.n	8009f00 <HAL_UART_IRQHandler+0xc8>
 8009edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00b      	beq.n	8009f00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2201      	movs	r2, #1
 8009eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ef6:	f043 0201 	orr.w	r2, r3, #1
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f04:	f003 0302 	and.w	r3, r3, #2
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d011      	beq.n	8009f30 <HAL_UART_IRQHandler+0xf8>
 8009f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f10:	f003 0301 	and.w	r3, r3, #1
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00b      	beq.n	8009f30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2202      	movs	r2, #2
 8009f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f26:	f043 0204 	orr.w	r2, r3, #4
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f34:	f003 0304 	and.w	r3, r3, #4
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d011      	beq.n	8009f60 <HAL_UART_IRQHandler+0x128>
 8009f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00b      	beq.n	8009f60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2204      	movs	r2, #4
 8009f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f56:	f043 0202 	orr.w	r2, r3, #2
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f64:	f003 0308 	and.w	r3, r3, #8
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d017      	beq.n	8009f9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f70:	f003 0320 	and.w	r3, r3, #32
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d105      	bne.n	8009f84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009f78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009f7c:	4b5c      	ldr	r3, [pc, #368]	@ (800a0f0 <HAL_UART_IRQHandler+0x2b8>)
 8009f7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00b      	beq.n	8009f9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2208      	movs	r2, #8
 8009f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f92:	f043 0208 	orr.w	r2, r3, #8
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d012      	beq.n	8009fce <HAL_UART_IRQHandler+0x196>
 8009fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00c      	beq.n	8009fce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009fbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fc4:	f043 0220 	orr.w	r2, r3, #32
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f000 8249 	beq.w	800a46c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fde:	f003 0320 	and.w	r3, r3, #32
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d013      	beq.n	800a00e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fea:	f003 0320 	and.w	r3, r3, #32
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d105      	bne.n	8009ffe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d007      	beq.n	800a00e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a002:	2b00      	cmp	r3, #0
 800a004:	d003      	beq.n	800a00e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a014:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a022:	2b40      	cmp	r3, #64	@ 0x40
 800a024:	d005      	beq.n	800a032 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a02a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d054      	beq.n	800a0dc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 ff14 	bl	800ae60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a042:	2b40      	cmp	r3, #64	@ 0x40
 800a044:	d146      	bne.n	800a0d4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3308      	adds	r3, #8
 800a04c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a050:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a054:	e853 3f00 	ldrex	r3, [r3]
 800a058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a05c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a060:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	3308      	adds	r3, #8
 800a06e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a072:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a076:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a07e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a082:	e841 2300 	strex	r3, r2, [r1]
 800a086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a08a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1d9      	bne.n	800a046 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d017      	beq.n	800a0cc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0a2:	4a15      	ldr	r2, [pc, #84]	@ (800a0f8 <HAL_UART_IRQHandler+0x2c0>)
 800a0a4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fb fd1b 	bl	8005ae8 <HAL_DMA_Abort_IT>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d019      	beq.n	800a0ec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a0c6:	4610      	mov	r0, r2
 800a0c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ca:	e00f      	b.n	800a0ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f9eb 	bl	800a4a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0d2:	e00b      	b.n	800a0ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f9e7 	bl	800a4a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0da:	e007      	b.n	800a0ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f9e3 	bl	800a4a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a0ea:	e1bf      	b.n	800a46c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ec:	bf00      	nop
    return;
 800a0ee:	e1bd      	b.n	800a46c <HAL_UART_IRQHandler+0x634>
 800a0f0:	10000001 	.word	0x10000001
 800a0f4:	04000120 	.word	0x04000120
 800a0f8:	0800b063 	.word	0x0800b063

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a100:	2b01      	cmp	r3, #1
 800a102:	f040 8153 	bne.w	800a3ac <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a10a:	f003 0310 	and.w	r3, r3, #16
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f000 814c 	beq.w	800a3ac <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a118:	f003 0310 	and.w	r3, r3, #16
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f000 8145 	beq.w	800a3ac <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2210      	movs	r2, #16
 800a128:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a134:	2b40      	cmp	r3, #64	@ 0x40
 800a136:	f040 80bb 	bne.w	800a2b0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a148:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f000 818f 	beq.w	800a470 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a158:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a15c:	429a      	cmp	r2, r3
 800a15e:	f080 8187 	bcs.w	800a470 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a168:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 0320 	and.w	r3, r3, #32
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f040 8087 	bne.w	800a28e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a188:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a18c:	e853 3f00 	ldrex	r3, [r3]
 800a190:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a194:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a19c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a1aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a1ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a1b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a1ba:	e841 2300 	strex	r3, r2, [r1]
 800a1be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a1c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1da      	bne.n	800a180 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3308      	adds	r3, #8
 800a1d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a1d4:	e853 3f00 	ldrex	r3, [r3]
 800a1d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a1da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1dc:	f023 0301 	bic.w	r3, r3, #1
 800a1e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	3308      	adds	r3, #8
 800a1ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a1ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a1f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a1f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a1fa:	e841 2300 	strex	r3, r2, [r1]
 800a1fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a200:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1e1      	bne.n	800a1ca <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3308      	adds	r3, #8
 800a20c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a210:	e853 3f00 	ldrex	r3, [r3]
 800a214:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a216:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a21c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3308      	adds	r3, #8
 800a226:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a22a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a22c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a230:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a232:	e841 2300 	strex	r3, r2, [r1]
 800a236:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a238:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1e3      	bne.n	800a206 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2220      	movs	r2, #32
 800a242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a254:	e853 3f00 	ldrex	r3, [r3]
 800a258:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a25a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a25c:	f023 0310 	bic.w	r3, r3, #16
 800a260:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	461a      	mov	r2, r3
 800a26a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a26e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a270:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a272:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a274:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a276:	e841 2300 	strex	r3, r2, [r1]
 800a27a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a27c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1e4      	bne.n	800a24c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fb fbd4 	bl	8005a36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2202      	movs	r2, #2
 800a292:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 f907 	bl	800a4bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a2ae:	e0df      	b.n	800a470 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f000 80d1 	beq.w	800a474 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800a2d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f000 80cc 	beq.w	800a474 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e4:	e853 3f00 	ldrex	r3, [r3]
 800a2e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a2fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800a300:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a302:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a304:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a306:	e841 2300 	strex	r3, r2, [r1]
 800a30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a30c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1e4      	bne.n	800a2dc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	3308      	adds	r3, #8
 800a318:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31c:	e853 3f00 	ldrex	r3, [r3]
 800a320:	623b      	str	r3, [r7, #32]
   return(result);
 800a322:	6a3b      	ldr	r3, [r7, #32]
 800a324:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a328:	f023 0301 	bic.w	r3, r3, #1
 800a32c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3308      	adds	r3, #8
 800a336:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a33a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a33c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a342:	e841 2300 	strex	r3, r2, [r1]
 800a346:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1e1      	bne.n	800a312 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2220      	movs	r2, #32
 800a352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	e853 3f00 	ldrex	r3, [r3]
 800a36e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f023 0310 	bic.w	r3, r3, #16
 800a376:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	461a      	mov	r2, r3
 800a380:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a384:	61fb      	str	r3, [r7, #28]
 800a386:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a388:	69b9      	ldr	r1, [r7, #24]
 800a38a:	69fa      	ldr	r2, [r7, #28]
 800a38c:	e841 2300 	strex	r3, r2, [r1]
 800a390:	617b      	str	r3, [r7, #20]
   return(result);
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1e4      	bne.n	800a362 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2202      	movs	r2, #2
 800a39c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a39e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f889 	bl	800a4bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a3aa:	e063      	b.n	800a474 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a3ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00e      	beq.n	800a3d6 <HAL_UART_IRQHandler+0x59e>
 800a3b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d008      	beq.n	800a3d6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a3cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fe88 	bl	800b0e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a3d4:	e051      	b.n	800a47a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a3d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d014      	beq.n	800a40c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a3e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d105      	bne.n	800a3fa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a3ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d008      	beq.n	800a40c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d03a      	beq.n	800a478 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	4798      	blx	r3
    }
    return;
 800a40a:	e035      	b.n	800a478 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a40c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a414:	2b00      	cmp	r3, #0
 800a416:	d009      	beq.n	800a42c <HAL_UART_IRQHandler+0x5f4>
 800a418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a41c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a420:	2b00      	cmp	r3, #0
 800a422:	d003      	beq.n	800a42c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fe32 	bl	800b08e <UART_EndTransmit_IT>
    return;
 800a42a:	e026      	b.n	800a47a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a430:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a434:	2b00      	cmp	r3, #0
 800a436:	d009      	beq.n	800a44c <HAL_UART_IRQHandler+0x614>
 800a438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a43c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d003      	beq.n	800a44c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fe61 	bl	800b10c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a44a:	e016      	b.n	800a47a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a44c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a450:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d010      	beq.n	800a47a <HAL_UART_IRQHandler+0x642>
 800a458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	da0c      	bge.n	800a47a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 fe49 	bl	800b0f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a466:	e008      	b.n	800a47a <HAL_UART_IRQHandler+0x642>
      return;
 800a468:	bf00      	nop
 800a46a:	e006      	b.n	800a47a <HAL_UART_IRQHandler+0x642>
    return;
 800a46c:	bf00      	nop
 800a46e:	e004      	b.n	800a47a <HAL_UART_IRQHandler+0x642>
      return;
 800a470:	bf00      	nop
 800a472:	e002      	b.n	800a47a <HAL_UART_IRQHandler+0x642>
      return;
 800a474:	bf00      	nop
 800a476:	e000      	b.n	800a47a <HAL_UART_IRQHandler+0x642>
    return;
 800a478:	bf00      	nop
  }
}
 800a47a:	37e8      	adds	r7, #232	@ 0xe8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a488:	bf00      	nop
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a49c:	bf00      	nop
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4d8:	b08c      	sub	sp, #48	@ 0x30
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	69db      	ldr	r3, [r3, #28]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	4bab      	ldr	r3, [pc, #684]	@ (800a7b0 <UART_SetConfig+0x2dc>)
 800a504:	4013      	ands	r3, r2
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	6812      	ldr	r2, [r2, #0]
 800a50a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a50c:	430b      	orrs	r3, r1
 800a50e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	68da      	ldr	r2, [r3, #12]
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	430a      	orrs	r2, r1
 800a524:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	699b      	ldr	r3, [r3, #24]
 800a52a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4aa0      	ldr	r2, [pc, #640]	@ (800a7b4 <UART_SetConfig+0x2e0>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d004      	beq.n	800a540 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	6a1b      	ldr	r3, [r3, #32]
 800a53a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a53c:	4313      	orrs	r3, r2
 800a53e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a54a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	6812      	ldr	r2, [r2, #0]
 800a552:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a554:	430b      	orrs	r3, r1
 800a556:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55e:	f023 010f 	bic.w	r1, r3, #15
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	430a      	orrs	r2, r1
 800a56c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a91      	ldr	r2, [pc, #580]	@ (800a7b8 <UART_SetConfig+0x2e4>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d125      	bne.n	800a5c4 <UART_SetConfig+0xf0>
 800a578:	4b90      	ldr	r3, [pc, #576]	@ (800a7bc <UART_SetConfig+0x2e8>)
 800a57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a57e:	f003 0303 	and.w	r3, r3, #3
 800a582:	2b03      	cmp	r3, #3
 800a584:	d81a      	bhi.n	800a5bc <UART_SetConfig+0xe8>
 800a586:	a201      	add	r2, pc, #4	@ (adr r2, 800a58c <UART_SetConfig+0xb8>)
 800a588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58c:	0800a59d 	.word	0x0800a59d
 800a590:	0800a5ad 	.word	0x0800a5ad
 800a594:	0800a5a5 	.word	0x0800a5a5
 800a598:	0800a5b5 	.word	0x0800a5b5
 800a59c:	2301      	movs	r3, #1
 800a59e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5a2:	e0d6      	b.n	800a752 <UART_SetConfig+0x27e>
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5aa:	e0d2      	b.n	800a752 <UART_SetConfig+0x27e>
 800a5ac:	2304      	movs	r3, #4
 800a5ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5b2:	e0ce      	b.n	800a752 <UART_SetConfig+0x27e>
 800a5b4:	2308      	movs	r3, #8
 800a5b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5ba:	e0ca      	b.n	800a752 <UART_SetConfig+0x27e>
 800a5bc:	2310      	movs	r3, #16
 800a5be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5c2:	e0c6      	b.n	800a752 <UART_SetConfig+0x27e>
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a7d      	ldr	r2, [pc, #500]	@ (800a7c0 <UART_SetConfig+0x2ec>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d138      	bne.n	800a640 <UART_SetConfig+0x16c>
 800a5ce:	4b7b      	ldr	r3, [pc, #492]	@ (800a7bc <UART_SetConfig+0x2e8>)
 800a5d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5d4:	f003 030c 	and.w	r3, r3, #12
 800a5d8:	2b0c      	cmp	r3, #12
 800a5da:	d82d      	bhi.n	800a638 <UART_SetConfig+0x164>
 800a5dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e4 <UART_SetConfig+0x110>)
 800a5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e2:	bf00      	nop
 800a5e4:	0800a619 	.word	0x0800a619
 800a5e8:	0800a639 	.word	0x0800a639
 800a5ec:	0800a639 	.word	0x0800a639
 800a5f0:	0800a639 	.word	0x0800a639
 800a5f4:	0800a629 	.word	0x0800a629
 800a5f8:	0800a639 	.word	0x0800a639
 800a5fc:	0800a639 	.word	0x0800a639
 800a600:	0800a639 	.word	0x0800a639
 800a604:	0800a621 	.word	0x0800a621
 800a608:	0800a639 	.word	0x0800a639
 800a60c:	0800a639 	.word	0x0800a639
 800a610:	0800a639 	.word	0x0800a639
 800a614:	0800a631 	.word	0x0800a631
 800a618:	2300      	movs	r3, #0
 800a61a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a61e:	e098      	b.n	800a752 <UART_SetConfig+0x27e>
 800a620:	2302      	movs	r3, #2
 800a622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a626:	e094      	b.n	800a752 <UART_SetConfig+0x27e>
 800a628:	2304      	movs	r3, #4
 800a62a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a62e:	e090      	b.n	800a752 <UART_SetConfig+0x27e>
 800a630:	2308      	movs	r3, #8
 800a632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a636:	e08c      	b.n	800a752 <UART_SetConfig+0x27e>
 800a638:	2310      	movs	r3, #16
 800a63a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a63e:	e088      	b.n	800a752 <UART_SetConfig+0x27e>
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a5f      	ldr	r2, [pc, #380]	@ (800a7c4 <UART_SetConfig+0x2f0>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d125      	bne.n	800a696 <UART_SetConfig+0x1c2>
 800a64a:	4b5c      	ldr	r3, [pc, #368]	@ (800a7bc <UART_SetConfig+0x2e8>)
 800a64c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a650:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a654:	2b30      	cmp	r3, #48	@ 0x30
 800a656:	d016      	beq.n	800a686 <UART_SetConfig+0x1b2>
 800a658:	2b30      	cmp	r3, #48	@ 0x30
 800a65a:	d818      	bhi.n	800a68e <UART_SetConfig+0x1ba>
 800a65c:	2b20      	cmp	r3, #32
 800a65e:	d00a      	beq.n	800a676 <UART_SetConfig+0x1a2>
 800a660:	2b20      	cmp	r3, #32
 800a662:	d814      	bhi.n	800a68e <UART_SetConfig+0x1ba>
 800a664:	2b00      	cmp	r3, #0
 800a666:	d002      	beq.n	800a66e <UART_SetConfig+0x19a>
 800a668:	2b10      	cmp	r3, #16
 800a66a:	d008      	beq.n	800a67e <UART_SetConfig+0x1aa>
 800a66c:	e00f      	b.n	800a68e <UART_SetConfig+0x1ba>
 800a66e:	2300      	movs	r3, #0
 800a670:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a674:	e06d      	b.n	800a752 <UART_SetConfig+0x27e>
 800a676:	2302      	movs	r3, #2
 800a678:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a67c:	e069      	b.n	800a752 <UART_SetConfig+0x27e>
 800a67e:	2304      	movs	r3, #4
 800a680:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a684:	e065      	b.n	800a752 <UART_SetConfig+0x27e>
 800a686:	2308      	movs	r3, #8
 800a688:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a68c:	e061      	b.n	800a752 <UART_SetConfig+0x27e>
 800a68e:	2310      	movs	r3, #16
 800a690:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a694:	e05d      	b.n	800a752 <UART_SetConfig+0x27e>
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a4b      	ldr	r2, [pc, #300]	@ (800a7c8 <UART_SetConfig+0x2f4>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d125      	bne.n	800a6ec <UART_SetConfig+0x218>
 800a6a0:	4b46      	ldr	r3, [pc, #280]	@ (800a7bc <UART_SetConfig+0x2e8>)
 800a6a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a6aa:	2bc0      	cmp	r3, #192	@ 0xc0
 800a6ac:	d016      	beq.n	800a6dc <UART_SetConfig+0x208>
 800a6ae:	2bc0      	cmp	r3, #192	@ 0xc0
 800a6b0:	d818      	bhi.n	800a6e4 <UART_SetConfig+0x210>
 800a6b2:	2b80      	cmp	r3, #128	@ 0x80
 800a6b4:	d00a      	beq.n	800a6cc <UART_SetConfig+0x1f8>
 800a6b6:	2b80      	cmp	r3, #128	@ 0x80
 800a6b8:	d814      	bhi.n	800a6e4 <UART_SetConfig+0x210>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d002      	beq.n	800a6c4 <UART_SetConfig+0x1f0>
 800a6be:	2b40      	cmp	r3, #64	@ 0x40
 800a6c0:	d008      	beq.n	800a6d4 <UART_SetConfig+0x200>
 800a6c2:	e00f      	b.n	800a6e4 <UART_SetConfig+0x210>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ca:	e042      	b.n	800a752 <UART_SetConfig+0x27e>
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6d2:	e03e      	b.n	800a752 <UART_SetConfig+0x27e>
 800a6d4:	2304      	movs	r3, #4
 800a6d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6da:	e03a      	b.n	800a752 <UART_SetConfig+0x27e>
 800a6dc:	2308      	movs	r3, #8
 800a6de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6e2:	e036      	b.n	800a752 <UART_SetConfig+0x27e>
 800a6e4:	2310      	movs	r3, #16
 800a6e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ea:	e032      	b.n	800a752 <UART_SetConfig+0x27e>
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a30      	ldr	r2, [pc, #192]	@ (800a7b4 <UART_SetConfig+0x2e0>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d12a      	bne.n	800a74c <UART_SetConfig+0x278>
 800a6f6:	4b31      	ldr	r3, [pc, #196]	@ (800a7bc <UART_SetConfig+0x2e8>)
 800a6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a700:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a704:	d01a      	beq.n	800a73c <UART_SetConfig+0x268>
 800a706:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a70a:	d81b      	bhi.n	800a744 <UART_SetConfig+0x270>
 800a70c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a710:	d00c      	beq.n	800a72c <UART_SetConfig+0x258>
 800a712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a716:	d815      	bhi.n	800a744 <UART_SetConfig+0x270>
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d003      	beq.n	800a724 <UART_SetConfig+0x250>
 800a71c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a720:	d008      	beq.n	800a734 <UART_SetConfig+0x260>
 800a722:	e00f      	b.n	800a744 <UART_SetConfig+0x270>
 800a724:	2300      	movs	r3, #0
 800a726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a72a:	e012      	b.n	800a752 <UART_SetConfig+0x27e>
 800a72c:	2302      	movs	r3, #2
 800a72e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a732:	e00e      	b.n	800a752 <UART_SetConfig+0x27e>
 800a734:	2304      	movs	r3, #4
 800a736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a73a:	e00a      	b.n	800a752 <UART_SetConfig+0x27e>
 800a73c:	2308      	movs	r3, #8
 800a73e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a742:	e006      	b.n	800a752 <UART_SetConfig+0x27e>
 800a744:	2310      	movs	r3, #16
 800a746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a74a:	e002      	b.n	800a752 <UART_SetConfig+0x27e>
 800a74c:	2310      	movs	r3, #16
 800a74e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a17      	ldr	r2, [pc, #92]	@ (800a7b4 <UART_SetConfig+0x2e0>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	f040 80a8 	bne.w	800a8ae <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a75e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a762:	2b08      	cmp	r3, #8
 800a764:	d834      	bhi.n	800a7d0 <UART_SetConfig+0x2fc>
 800a766:	a201      	add	r2, pc, #4	@ (adr r2, 800a76c <UART_SetConfig+0x298>)
 800a768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a76c:	0800a791 	.word	0x0800a791
 800a770:	0800a7d1 	.word	0x0800a7d1
 800a774:	0800a799 	.word	0x0800a799
 800a778:	0800a7d1 	.word	0x0800a7d1
 800a77c:	0800a79f 	.word	0x0800a79f
 800a780:	0800a7d1 	.word	0x0800a7d1
 800a784:	0800a7d1 	.word	0x0800a7d1
 800a788:	0800a7d1 	.word	0x0800a7d1
 800a78c:	0800a7a7 	.word	0x0800a7a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a790:	f7fc ffd6 	bl	8007740 <HAL_RCC_GetPCLK1Freq>
 800a794:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a796:	e021      	b.n	800a7dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a798:	4b0c      	ldr	r3, [pc, #48]	@ (800a7cc <UART_SetConfig+0x2f8>)
 800a79a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a79c:	e01e      	b.n	800a7dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a79e:	f7fc ff61 	bl	8007664 <HAL_RCC_GetSysClockFreq>
 800a7a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a7a4:	e01a      	b.n	800a7dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a7ac:	e016      	b.n	800a7dc <UART_SetConfig+0x308>
 800a7ae:	bf00      	nop
 800a7b0:	cfff69f3 	.word	0xcfff69f3
 800a7b4:	40008000 	.word	0x40008000
 800a7b8:	40013800 	.word	0x40013800
 800a7bc:	40021000 	.word	0x40021000
 800a7c0:	40004400 	.word	0x40004400
 800a7c4:	40004800 	.word	0x40004800
 800a7c8:	40004c00 	.word	0x40004c00
 800a7cc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a7da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	f000 812a 	beq.w	800aa38 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e8:	4a9e      	ldr	r2, [pc, #632]	@ (800aa64 <UART_SetConfig+0x590>)
 800a7ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7f6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	005b      	lsls	r3, r3, #1
 800a800:	4413      	add	r3, r2
 800a802:	69ba      	ldr	r2, [r7, #24]
 800a804:	429a      	cmp	r2, r3
 800a806:	d305      	bcc.n	800a814 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a80e:	69ba      	ldr	r2, [r7, #24]
 800a810:	429a      	cmp	r2, r3
 800a812:	d903      	bls.n	800a81c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a81a:	e10d      	b.n	800aa38 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81e:	2200      	movs	r2, #0
 800a820:	60bb      	str	r3, [r7, #8]
 800a822:	60fa      	str	r2, [r7, #12]
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a828:	4a8e      	ldr	r2, [pc, #568]	@ (800aa64 <UART_SetConfig+0x590>)
 800a82a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a82e:	b29b      	uxth	r3, r3
 800a830:	2200      	movs	r2, #0
 800a832:	603b      	str	r3, [r7, #0]
 800a834:	607a      	str	r2, [r7, #4]
 800a836:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a83a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a83e:	f7f6 f929 	bl	8000a94 <__aeabi_uldivmod>
 800a842:	4602      	mov	r2, r0
 800a844:	460b      	mov	r3, r1
 800a846:	4610      	mov	r0, r2
 800a848:	4619      	mov	r1, r3
 800a84a:	f04f 0200 	mov.w	r2, #0
 800a84e:	f04f 0300 	mov.w	r3, #0
 800a852:	020b      	lsls	r3, r1, #8
 800a854:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a858:	0202      	lsls	r2, r0, #8
 800a85a:	6979      	ldr	r1, [r7, #20]
 800a85c:	6849      	ldr	r1, [r1, #4]
 800a85e:	0849      	lsrs	r1, r1, #1
 800a860:	2000      	movs	r0, #0
 800a862:	460c      	mov	r4, r1
 800a864:	4605      	mov	r5, r0
 800a866:	eb12 0804 	adds.w	r8, r2, r4
 800a86a:	eb43 0905 	adc.w	r9, r3, r5
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	469a      	mov	sl, r3
 800a876:	4693      	mov	fp, r2
 800a878:	4652      	mov	r2, sl
 800a87a:	465b      	mov	r3, fp
 800a87c:	4640      	mov	r0, r8
 800a87e:	4649      	mov	r1, r9
 800a880:	f7f6 f908 	bl	8000a94 <__aeabi_uldivmod>
 800a884:	4602      	mov	r2, r0
 800a886:	460b      	mov	r3, r1
 800a888:	4613      	mov	r3, r2
 800a88a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a88c:	6a3b      	ldr	r3, [r7, #32]
 800a88e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a892:	d308      	bcc.n	800a8a6 <UART_SetConfig+0x3d2>
 800a894:	6a3b      	ldr	r3, [r7, #32]
 800a896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a89a:	d204      	bcs.n	800a8a6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6a3a      	ldr	r2, [r7, #32]
 800a8a2:	60da      	str	r2, [r3, #12]
 800a8a4:	e0c8      	b.n	800aa38 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a8ac:	e0c4      	b.n	800aa38 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8b6:	d167      	bne.n	800a988 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a8b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a8bc:	2b08      	cmp	r3, #8
 800a8be:	d828      	bhi.n	800a912 <UART_SetConfig+0x43e>
 800a8c0:	a201      	add	r2, pc, #4	@ (adr r2, 800a8c8 <UART_SetConfig+0x3f4>)
 800a8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c6:	bf00      	nop
 800a8c8:	0800a8ed 	.word	0x0800a8ed
 800a8cc:	0800a8f5 	.word	0x0800a8f5
 800a8d0:	0800a8fd 	.word	0x0800a8fd
 800a8d4:	0800a913 	.word	0x0800a913
 800a8d8:	0800a903 	.word	0x0800a903
 800a8dc:	0800a913 	.word	0x0800a913
 800a8e0:	0800a913 	.word	0x0800a913
 800a8e4:	0800a913 	.word	0x0800a913
 800a8e8:	0800a90b 	.word	0x0800a90b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8ec:	f7fc ff28 	bl	8007740 <HAL_RCC_GetPCLK1Freq>
 800a8f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a8f2:	e014      	b.n	800a91e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8f4:	f7fc ff3a 	bl	800776c <HAL_RCC_GetPCLK2Freq>
 800a8f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a8fa:	e010      	b.n	800a91e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8fc:	4b5a      	ldr	r3, [pc, #360]	@ (800aa68 <UART_SetConfig+0x594>)
 800a8fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a900:	e00d      	b.n	800a91e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a902:	f7fc feaf 	bl	8007664 <HAL_RCC_GetSysClockFreq>
 800a906:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a908:	e009      	b.n	800a91e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a90a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a90e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a910:	e005      	b.n	800a91e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a912:	2300      	movs	r3, #0
 800a914:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a91c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a920:	2b00      	cmp	r3, #0
 800a922:	f000 8089 	beq.w	800aa38 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a92a:	4a4e      	ldr	r2, [pc, #312]	@ (800aa64 <UART_SetConfig+0x590>)
 800a92c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a930:	461a      	mov	r2, r3
 800a932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a934:	fbb3 f3f2 	udiv	r3, r3, r2
 800a938:	005a      	lsls	r2, r3, #1
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	085b      	lsrs	r3, r3, #1
 800a940:	441a      	add	r2, r3
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	fbb2 f3f3 	udiv	r3, r2, r3
 800a94a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a94c:	6a3b      	ldr	r3, [r7, #32]
 800a94e:	2b0f      	cmp	r3, #15
 800a950:	d916      	bls.n	800a980 <UART_SetConfig+0x4ac>
 800a952:	6a3b      	ldr	r3, [r7, #32]
 800a954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a958:	d212      	bcs.n	800a980 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	f023 030f 	bic.w	r3, r3, #15
 800a962:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	085b      	lsrs	r3, r3, #1
 800a968:	b29b      	uxth	r3, r3
 800a96a:	f003 0307 	and.w	r3, r3, #7
 800a96e:	b29a      	uxth	r2, r3
 800a970:	8bfb      	ldrh	r3, [r7, #30]
 800a972:	4313      	orrs	r3, r2
 800a974:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	8bfa      	ldrh	r2, [r7, #30]
 800a97c:	60da      	str	r2, [r3, #12]
 800a97e:	e05b      	b.n	800aa38 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a986:	e057      	b.n	800aa38 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a988:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a98c:	2b08      	cmp	r3, #8
 800a98e:	d828      	bhi.n	800a9e2 <UART_SetConfig+0x50e>
 800a990:	a201      	add	r2, pc, #4	@ (adr r2, 800a998 <UART_SetConfig+0x4c4>)
 800a992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a996:	bf00      	nop
 800a998:	0800a9bd 	.word	0x0800a9bd
 800a99c:	0800a9c5 	.word	0x0800a9c5
 800a9a0:	0800a9cd 	.word	0x0800a9cd
 800a9a4:	0800a9e3 	.word	0x0800a9e3
 800a9a8:	0800a9d3 	.word	0x0800a9d3
 800a9ac:	0800a9e3 	.word	0x0800a9e3
 800a9b0:	0800a9e3 	.word	0x0800a9e3
 800a9b4:	0800a9e3 	.word	0x0800a9e3
 800a9b8:	0800a9db 	.word	0x0800a9db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9bc:	f7fc fec0 	bl	8007740 <HAL_RCC_GetPCLK1Freq>
 800a9c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9c2:	e014      	b.n	800a9ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9c4:	f7fc fed2 	bl	800776c <HAL_RCC_GetPCLK2Freq>
 800a9c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9ca:	e010      	b.n	800a9ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a9cc:	4b26      	ldr	r3, [pc, #152]	@ (800aa68 <UART_SetConfig+0x594>)
 800a9ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9d0:	e00d      	b.n	800a9ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9d2:	f7fc fe47 	bl	8007664 <HAL_RCC_GetSysClockFreq>
 800a9d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9d8:	e009      	b.n	800a9ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9e0:	e005      	b.n	800a9ee <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a9ec:	bf00      	nop
    }

    if (pclk != 0U)
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d021      	beq.n	800aa38 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f8:	4a1a      	ldr	r2, [pc, #104]	@ (800aa64 <UART_SetConfig+0x590>)
 800a9fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa02:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	085b      	lsrs	r3, r3, #1
 800aa0c:	441a      	add	r2, r3
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa18:	6a3b      	ldr	r3, [r7, #32]
 800aa1a:	2b0f      	cmp	r3, #15
 800aa1c:	d909      	bls.n	800aa32 <UART_SetConfig+0x55e>
 800aa1e:	6a3b      	ldr	r3, [r7, #32]
 800aa20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa24:	d205      	bcs.n	800aa32 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	60da      	str	r2, [r3, #12]
 800aa30:	e002      	b.n	800aa38 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	2200      	movs	r2, #0
 800aa52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aa54:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3730      	adds	r7, #48	@ 0x30
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa62:	bf00      	nop
 800aa64:	0800c074 	.word	0x0800c074
 800aa68:	00f42400 	.word	0x00f42400

0800aa6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa78:	f003 0308 	and.w	r3, r3, #8
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00a      	beq.n	800aa96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	430a      	orrs	r2, r1
 800aa94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa9a:	f003 0301 	and.w	r3, r3, #1
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00a      	beq.n	800aab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	430a      	orrs	r2, r1
 800aab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aabc:	f003 0302 	and.w	r3, r3, #2
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00a      	beq.n	800aada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	430a      	orrs	r2, r1
 800aad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aade:	f003 0304 	and.w	r3, r3, #4
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00a      	beq.n	800aafc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	430a      	orrs	r2, r1
 800aafa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab00:	f003 0310 	and.w	r3, r3, #16
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00a      	beq.n	800ab1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	430a      	orrs	r2, r1
 800ab1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab22:	f003 0320 	and.w	r3, r3, #32
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00a      	beq.n	800ab40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	430a      	orrs	r2, r1
 800ab3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d01a      	beq.n	800ab82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	430a      	orrs	r2, r1
 800ab60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab6a:	d10a      	bne.n	800ab82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	430a      	orrs	r2, r1
 800ab80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00a      	beq.n	800aba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	430a      	orrs	r2, r1
 800aba2:	605a      	str	r2, [r3, #4]
  }
}
 800aba4:	bf00      	nop
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b098      	sub	sp, #96	@ 0x60
 800abb4:	af02      	add	r7, sp, #8
 800abb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800abc0:	f7f7 fc32 	bl	8002428 <HAL_GetTick>
 800abc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0308 	and.w	r3, r3, #8
 800abd0:	2b08      	cmp	r3, #8
 800abd2:	d12f      	bne.n	800ac34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abdc:	2200      	movs	r2, #0
 800abde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f88e 	bl	800ad04 <UART_WaitOnFlagUntilTimeout>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d022      	beq.n	800ac34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf6:	e853 3f00 	ldrex	r3, [r3]
 800abfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800abfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac02:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	461a      	mov	r2, r3
 800ac0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac0c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac14:	e841 2300 	strex	r3, r2, [r1]
 800ac18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d1e6      	bne.n	800abee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2220      	movs	r2, #32
 800ac24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e063      	b.n	800acfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 0304 	and.w	r3, r3, #4
 800ac3e:	2b04      	cmp	r3, #4
 800ac40:	d149      	bne.n	800acd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac46:	9300      	str	r3, [sp, #0]
 800ac48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f857 	bl	800ad04 <UART_WaitOnFlagUntilTimeout>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d03c      	beq.n	800acd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac64:	e853 3f00 	ldrex	r3, [r3]
 800ac68:	623b      	str	r3, [r7, #32]
   return(result);
 800ac6a:	6a3b      	ldr	r3, [r7, #32]
 800ac6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	461a      	mov	r2, r3
 800ac78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac7a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac82:	e841 2300 	strex	r3, r2, [r1]
 800ac86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1e6      	bne.n	800ac5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3308      	adds	r3, #8
 800ac94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	e853 3f00 	ldrex	r3, [r3]
 800ac9c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f023 0301 	bic.w	r3, r3, #1
 800aca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3308      	adds	r3, #8
 800acac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acae:	61fa      	str	r2, [r7, #28]
 800acb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb2:	69b9      	ldr	r1, [r7, #24]
 800acb4:	69fa      	ldr	r2, [r7, #28]
 800acb6:	e841 2300 	strex	r3, r2, [r1]
 800acba:	617b      	str	r3, [r7, #20]
   return(result);
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1e5      	bne.n	800ac8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2220      	movs	r2, #32
 800acc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acd2:	2303      	movs	r3, #3
 800acd4:	e012      	b.n	800acfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2220      	movs	r2, #32
 800acda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2220      	movs	r2, #32
 800ace2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3758      	adds	r7, #88	@ 0x58
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	603b      	str	r3, [r7, #0]
 800ad10:	4613      	mov	r3, r2
 800ad12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad14:	e04f      	b.n	800adb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad1c:	d04b      	beq.n	800adb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad1e:	f7f7 fb83 	bl	8002428 <HAL_GetTick>
 800ad22:	4602      	mov	r2, r0
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	1ad3      	subs	r3, r2, r3
 800ad28:	69ba      	ldr	r2, [r7, #24]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d302      	bcc.n	800ad34 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d101      	bne.n	800ad38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad34:	2303      	movs	r3, #3
 800ad36:	e04e      	b.n	800add6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f003 0304 	and.w	r3, r3, #4
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d037      	beq.n	800adb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	2b80      	cmp	r3, #128	@ 0x80
 800ad4a:	d034      	beq.n	800adb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2b40      	cmp	r3, #64	@ 0x40
 800ad50:	d031      	beq.n	800adb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	69db      	ldr	r3, [r3, #28]
 800ad58:	f003 0308 	and.w	r3, r3, #8
 800ad5c:	2b08      	cmp	r3, #8
 800ad5e:	d110      	bne.n	800ad82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2208      	movs	r2, #8
 800ad66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f000 f879 	bl	800ae60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2208      	movs	r2, #8
 800ad72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e029      	b.n	800add6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	69db      	ldr	r3, [r3, #28]
 800ad88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad90:	d111      	bne.n	800adb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ad9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f000 f85f 	bl	800ae60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2220      	movs	r2, #32
 800ada6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e00f      	b.n	800add6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	69da      	ldr	r2, [r3, #28]
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	4013      	ands	r3, r2
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	bf0c      	ite	eq
 800adc6:	2301      	moveq	r3, #1
 800adc8:	2300      	movne	r3, #0
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	461a      	mov	r2, r3
 800adce:	79fb      	ldrb	r3, [r7, #7]
 800add0:	429a      	cmp	r2, r3
 800add2:	d0a0      	beq.n	800ad16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800adde:	b480      	push	{r7}
 800ade0:	b08f      	sub	sp, #60	@ 0x3c
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adec:	6a3b      	ldr	r3, [r7, #32]
 800adee:	e853 3f00 	ldrex	r3, [r3]
 800adf2:	61fb      	str	r3, [r7, #28]
   return(result);
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800adfa:	637b      	str	r3, [r7, #52]	@ 0x34
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	461a      	mov	r2, r3
 800ae02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae06:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae0c:	e841 2300 	strex	r3, r2, [r1]
 800ae10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d1e6      	bne.n	800ade6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	3308      	adds	r3, #8
 800ae1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	e853 3f00 	ldrex	r3, [r3]
 800ae26:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ae2e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3308      	adds	r3, #8
 800ae36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae38:	61ba      	str	r2, [r7, #24]
 800ae3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3c:	6979      	ldr	r1, [r7, #20]
 800ae3e:	69ba      	ldr	r2, [r7, #24]
 800ae40:	e841 2300 	strex	r3, r2, [r1]
 800ae44:	613b      	str	r3, [r7, #16]
   return(result);
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1e5      	bne.n	800ae18 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2220      	movs	r2, #32
 800ae50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ae54:	bf00      	nop
 800ae56:	373c      	adds	r7, #60	@ 0x3c
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b095      	sub	sp, #84	@ 0x54
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae70:	e853 3f00 	ldrex	r3, [r3]
 800ae74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	461a      	mov	r2, r3
 800ae84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae86:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae88:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae8e:	e841 2300 	strex	r3, r2, [r1]
 800ae92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1e6      	bne.n	800ae68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	3308      	adds	r3, #8
 800aea0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea2:	6a3b      	ldr	r3, [r7, #32]
 800aea4:	e853 3f00 	ldrex	r3, [r3]
 800aea8:	61fb      	str	r3, [r7, #28]
   return(result);
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aeb0:	f023 0301 	bic.w	r3, r3, #1
 800aeb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	3308      	adds	r3, #8
 800aebc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aebe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aec0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aec4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aec6:	e841 2300 	strex	r3, r2, [r1]
 800aeca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1e3      	bne.n	800ae9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d118      	bne.n	800af0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	e853 3f00 	ldrex	r3, [r3]
 800aee6:	60bb      	str	r3, [r7, #8]
   return(result);
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	f023 0310 	bic.w	r3, r3, #16
 800aeee:	647b      	str	r3, [r7, #68]	@ 0x44
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	461a      	mov	r2, r3
 800aef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aef8:	61bb      	str	r3, [r7, #24]
 800aefa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefc:	6979      	ldr	r1, [r7, #20]
 800aefe:	69ba      	ldr	r2, [r7, #24]
 800af00:	e841 2300 	strex	r3, r2, [r1]
 800af04:	613b      	str	r3, [r7, #16]
   return(result);
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1e6      	bne.n	800aeda <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2220      	movs	r2, #32
 800af10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800af20:	bf00      	nop
 800af22:	3754      	adds	r7, #84	@ 0x54
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b090      	sub	sp, #64	@ 0x40
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af38:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0320 	and.w	r3, r3, #32
 800af44:	2b00      	cmp	r3, #0
 800af46:	d137      	bne.n	800afb8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800af48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af4a:	2200      	movs	r2, #0
 800af4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	3308      	adds	r3, #8
 800af56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5a:	e853 3f00 	ldrex	r3, [r3]
 800af5e:	623b      	str	r3, [r7, #32]
   return(result);
 800af60:	6a3b      	ldr	r3, [r7, #32]
 800af62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af66:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	3308      	adds	r3, #8
 800af6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af70:	633a      	str	r2, [r7, #48]	@ 0x30
 800af72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af78:	e841 2300 	strex	r3, r2, [r1]
 800af7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1e5      	bne.n	800af50 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	e853 3f00 	ldrex	r3, [r3]
 800af90:	60fb      	str	r3, [r7, #12]
   return(result);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af98:	637b      	str	r3, [r7, #52]	@ 0x34
 800af9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	461a      	mov	r2, r3
 800afa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afa2:	61fb      	str	r3, [r7, #28]
 800afa4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa6:	69b9      	ldr	r1, [r7, #24]
 800afa8:	69fa      	ldr	r2, [r7, #28]
 800afaa:	e841 2300 	strex	r3, r2, [r1]
 800afae:	617b      	str	r3, [r7, #20]
   return(result);
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1e6      	bne.n	800af84 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afb6:	e002      	b.n	800afbe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800afb8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800afba:	f7ff fa61 	bl	800a480 <HAL_UART_TxCpltCallback>
}
 800afbe:	bf00      	nop
 800afc0:	3740      	adds	r7, #64	@ 0x40
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b084      	sub	sp, #16
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f7ff fa5d 	bl	800a494 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afda:	bf00      	nop
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b086      	sub	sp, #24
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aff6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800affe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b00a:	2b80      	cmp	r3, #128	@ 0x80
 800b00c:	d109      	bne.n	800b022 <UART_DMAError+0x40>
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	2b21      	cmp	r3, #33	@ 0x21
 800b012:	d106      	bne.n	800b022 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	2200      	movs	r2, #0
 800b018:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b01c:	6978      	ldr	r0, [r7, #20]
 800b01e:	f7ff fede 	bl	800adde <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b02c:	2b40      	cmp	r3, #64	@ 0x40
 800b02e:	d109      	bne.n	800b044 <UART_DMAError+0x62>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2b22      	cmp	r3, #34	@ 0x22
 800b034:	d106      	bne.n	800b044 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	2200      	movs	r2, #0
 800b03a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b03e:	6978      	ldr	r0, [r7, #20]
 800b040:	f7ff ff0e 	bl	800ae60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b04a:	f043 0210 	orr.w	r2, r3, #16
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b054:	6978      	ldr	r0, [r7, #20]
 800b056:	f7ff fa27 	bl	800a4a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b05a:	bf00      	nop
 800b05c:	3718      	adds	r7, #24
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b084      	sub	sp, #16
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b06e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7ff fa11 	bl	800a4a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b086:	bf00      	nop
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b088      	sub	sp, #32
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	e853 3f00 	ldrex	r3, [r3]
 800b0a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0aa:	61fb      	str	r3, [r7, #28]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	61bb      	str	r3, [r7, #24]
 800b0b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b8:	6979      	ldr	r1, [r7, #20]
 800b0ba:	69ba      	ldr	r2, [r7, #24]
 800b0bc:	e841 2300 	strex	r3, r2, [r1]
 800b0c0:	613b      	str	r3, [r7, #16]
   return(result);
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1e6      	bne.n	800b096 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2220      	movs	r2, #32
 800b0cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f7ff f9d2 	bl	800a480 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0dc:	bf00      	nop
 800b0de:	3720      	adds	r7, #32
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b0ec:	bf00      	nop
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b114:	bf00      	nop
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d101      	bne.n	800b136 <HAL_UARTEx_DisableFifoMode+0x16>
 800b132:	2302      	movs	r3, #2
 800b134:	e027      	b.n	800b186 <HAL_UARTEx_DisableFifoMode+0x66>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2201      	movs	r2, #1
 800b13a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2224      	movs	r2, #36	@ 0x24
 800b142:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f022 0201 	bic.w	r2, r2, #1
 800b15c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b164:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2220      	movs	r2, #32
 800b178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b084      	sub	sp, #16
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d101      	bne.n	800b1aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	e02d      	b.n	800b206 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2224      	movs	r2, #36	@ 0x24
 800b1b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f022 0201 	bic.w	r2, r2, #1
 800b1d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	689b      	ldr	r3, [r3, #8]
 800b1d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	683a      	ldr	r2, [r7, #0]
 800b1e2:	430a      	orrs	r2, r1
 800b1e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 f850 	bl	800b28c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2220      	movs	r2, #32
 800b1f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b084      	sub	sp, #16
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d101      	bne.n	800b226 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b222:	2302      	movs	r3, #2
 800b224:	e02d      	b.n	800b282 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2201      	movs	r2, #1
 800b22a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2224      	movs	r2, #36	@ 0x24
 800b232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f022 0201 	bic.w	r2, r2, #1
 800b24c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	430a      	orrs	r2, r1
 800b260:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f812 	bl	800b28c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2220      	movs	r2, #32
 800b274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
	...

0800b28c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b085      	sub	sp, #20
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d108      	bne.n	800b2ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b2ac:	e031      	b.n	800b312 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b2ae:	2308      	movs	r3, #8
 800b2b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b2b2:	2308      	movs	r3, #8
 800b2b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	0e5b      	lsrs	r3, r3, #25
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	f003 0307 	and.w	r3, r3, #7
 800b2c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	0f5b      	lsrs	r3, r3, #29
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	f003 0307 	and.w	r3, r3, #7
 800b2d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2d6:	7bbb      	ldrb	r3, [r7, #14]
 800b2d8:	7b3a      	ldrb	r2, [r7, #12]
 800b2da:	4911      	ldr	r1, [pc, #68]	@ (800b320 <UARTEx_SetNbDataToProcess+0x94>)
 800b2dc:	5c8a      	ldrb	r2, [r1, r2]
 800b2de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b2e2:	7b3a      	ldrb	r2, [r7, #12]
 800b2e4:	490f      	ldr	r1, [pc, #60]	@ (800b324 <UARTEx_SetNbDataToProcess+0x98>)
 800b2e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
 800b2f6:	7b7a      	ldrb	r2, [r7, #13]
 800b2f8:	4909      	ldr	r1, [pc, #36]	@ (800b320 <UARTEx_SetNbDataToProcess+0x94>)
 800b2fa:	5c8a      	ldrb	r2, [r1, r2]
 800b2fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b300:	7b7a      	ldrb	r2, [r7, #13]
 800b302:	4908      	ldr	r1, [pc, #32]	@ (800b324 <UARTEx_SetNbDataToProcess+0x98>)
 800b304:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b306:	fb93 f3f2 	sdiv	r3, r3, r2
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b312:	bf00      	nop
 800b314:	3714      	adds	r7, #20
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	0800c08c 	.word	0x0800c08c
 800b324:	0800c094 	.word	0x0800c094

0800b328 <appInit>:
#endif
/*
deal per 100ms
*/
void appInit()
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	af00      	add	r7, sp, #0
    motorInit();
 800b32c:	f000 f95e 	bl	800b5ec <motorInit>
}
 800b330:	bf00      	nop
 800b332:	bd80      	pop	{r7, pc}

0800b334 <appRunning>:

void appRunning()
{
 800b334:	b580      	push	{r7, lr}
 800b336:	af00      	add	r7, sp, #0
#if KEY_ENABLE
    getKeyState(&keyState);
#endif

#if NEED_COMMUNICATION
    uartRxProcess();
 800b338:	f000 f83e 	bl	800b3b8 <uartRxProcess>
            errNo = ntcErr;
        }
    }
#endif

    _1s = getOneSecFlag();
 800b33c:	f000 fe18 	bl	800bf70 <getOneSecFlag>
 800b340:	4603      	mov	r3, r0
 800b342:	461a      	mov	r2, r3
 800b344:	4b1a      	ldr	r3, [pc, #104]	@ (800b3b0 <appRunning+0x7c>)
 800b346:	701a      	strb	r2, [r3, #0]

    switch (devState)
 800b348:	4b1a      	ldr	r3, [pc, #104]	@ (800b3b4 <appRunning+0x80>)
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	2b06      	cmp	r3, #6
 800b34e:	d823      	bhi.n	800b398 <appRunning+0x64>
 800b350:	a201      	add	r2, pc, #4	@ (adr r2, 800b358 <appRunning+0x24>)
 800b352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b356:	bf00      	nop
 800b358:	0800b375 	.word	0x0800b375
 800b35c:	0800b381 	.word	0x0800b381
 800b360:	0800b37b 	.word	0x0800b37b
 800b364:	0800b399 	.word	0x0800b399
 800b368:	0800b387 	.word	0x0800b387
 800b36c:	0800b38d 	.word	0x0800b38d
 800b370:	0800b393 	.word	0x0800b393
    {
    case POWER_ON:
        poweringOn();
 800b374:	f000 f82e 	bl	800b3d4 <poweringOn>
        break;
 800b378:	e00e      	b.n	800b398 <appRunning+0x64>

    case STANDBY:
        standingby();
 800b37a:	f000 f843 	bl	800b404 <standingby>
        break;
 800b37e:	e00b      	b.n	800b398 <appRunning+0x64>

    case SET:
        setting();
 800b380:	f000 f847 	bl	800b412 <setting>
        break;
 800b384:	e008      	b.n	800b398 <appRunning+0x64>

    case WORK:
        working();
 800b386:	f000 f84b 	bl	800b420 <working>
        break;
 800b38a:	e005      	b.n	800b398 <appRunning+0x64>

    case TEST:
        testing();
 800b38c:	f000 f84f 	bl	800b42e <testing>
        break;
 800b390:	e002      	b.n	800b398 <appRunning+0x64>

    case FAULT:
        faulting();
 800b392:	f000 f853 	bl	800b43c <faulting>
        break;
 800b396:	bf00      	nop
#if DISPLAY_ENABLE
    displayDataUpdate();
#endif

#if NEED_COMMUNICATION
    uartTxProcess();
 800b398:	f000 f815 	bl	800b3c6 <uartTxProcess>
#endif
    if (_1s)
 800b39c:	4b04      	ldr	r3, [pc, #16]	@ (800b3b0 <appRunning+0x7c>)
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d002      	beq.n	800b3aa <appRunning+0x76>
//            errNo = 3;
//            FAULT_INIT;
//        }
#endif
        // beepOnce();
        _1s = 0;
 800b3a4:	4b02      	ldr	r3, [pc, #8]	@ (800b3b0 <appRunning+0x7c>)
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	701a      	strb	r2, [r3, #0]
    }
}
 800b3aa:	bf00      	nop
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	200004f9 	.word	0x200004f9
 800b3b4:	200004f8 	.word	0x200004f8

0800b3b8 <uartRxProcess>:

#if NEED_COMMUNICATION

static void uartRxProcess()
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	af00      	add	r7, sp, #0
    //        }
    //
    //        rxUart.len = 0;
    //        rxUart.toProcessData = 0;
    //    }
}
 800b3bc:	bf00      	nop
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <uartTxProcess>:
static void uartTxProcess()
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	af00      	add	r7, sp, #0
#if SEND_RCC_DATA == 0
    sprintf(tempData, "K%d%dX\n", (int)devState);
#endif
}
 800b3ca:	bf00      	nop
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <poweringOn>:
#endif
#if DEBUG_DISPLAY
uchar i;
#endif
static void poweringOn()
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	af00      	add	r7, sp, #0
    // for (i = 0; i < NUM_OF_COM; i++)
    // {
    //     displayDataBuf[i].byte = 0xFF;
    // }

    if (++cnt >= 10)
 800b3d8:	4b08      	ldr	r3, [pc, #32]	@ (800b3fc <poweringOn+0x28>)
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	4b06      	ldr	r3, [pc, #24]	@ (800b3fc <poweringOn+0x28>)
 800b3e2:	701a      	strb	r2, [r3, #0]
 800b3e4:	4b05      	ldr	r3, [pc, #20]	@ (800b3fc <poweringOn+0x28>)
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	2b09      	cmp	r3, #9
 800b3ea:	d902      	bls.n	800b3f2 <poweringOn+0x1e>
                STANDBY_INIT;
        }
        else
            STANDBY_INIT;
#else
        STANDBY_INIT;
 800b3ec:	4b04      	ldr	r3, [pc, #16]	@ (800b400 <poweringOn+0x2c>)
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	701a      	strb	r2, [r3, #0]
#endif
    }

#endif
}
 800b3f2:	bf00      	nop
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	200004fa 	.word	0x200004fa
 800b400:	200004f8 	.word	0x200004f8

0800b404 <standingby>:

static void standingby()
{
 800b404:	b480      	push	{r7}
 800b406:	af00      	add	r7, sp, #0
}
 800b408:	bf00      	nop
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr

0800b412 <setting>:
static void setting()
{
 800b412:	b480      	push	{r7}
 800b414:	af00      	add	r7, sp, #0
}
 800b416:	bf00      	nop
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <working>:
static void working()
{
 800b420:	b480      	push	{r7}
 800b422:	af00      	add	r7, sp, #0
}
 800b424:	bf00      	nop
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <testing>:

static void testing()
{
 800b42e:	b480      	push	{r7}
 800b430:	af00      	add	r7, sp, #0
}
 800b432:	bf00      	nop
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <faulting>:

static void faulting()
{
 800b43c:	b480      	push	{r7}
 800b43e:	af00      	add	r7, sp, #0
}
 800b440:	bf00      	nop
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr
 800b44a:	0000      	movs	r0, r0
 800b44c:	0000      	movs	r0, r0
	...

0800b450 <_sin>:

// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0
 800b456:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f7f5 f840 	bl	80004e0 <__aeabi_f2d>
 800b460:	a339      	add	r3, pc, #228	@ (adr r3, 800b548 <_sin+0xf8>)
 800b462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b466:	f7f5 f893 	bl	8000590 <__aeabi_dmul>
 800b46a:	4602      	mov	r2, r0
 800b46c:	460b      	mov	r3, r1
 800b46e:	4610      	mov	r0, r2
 800b470:	4619      	mov	r1, r3
 800b472:	f7f5 fa9f 	bl	80009b4 <__aeabi_d2uiz>
 800b476:	4603      	mov	r3, r0
 800b478:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	0a1b      	lsrs	r3, r3, #8
 800b484:	b2db      	uxtb	r3, r3
 800b486:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b48c:	d80b      	bhi.n	800b4a6 <_sin+0x56>
  {
    t1 = sine_array[i];
 800b48e:	4a2c      	ldr	r2, [pc, #176]	@ (800b540 <_sin+0xf0>)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b496:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	3301      	adds	r3, #1
 800b49c:	4a28      	ldr	r2, [pc, #160]	@ (800b540 <_sin+0xf0>)
 800b49e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4a2:	613b      	str	r3, [r7, #16]
 800b4a4:	e033      	b.n	800b50e <_sin+0xbe>
  }
  else if (i < 128)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4aa:	d80e      	bhi.n	800b4ca <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800b4b2:	4a23      	ldr	r2, [pc, #140]	@ (800b540 <_sin+0xf0>)
 800b4b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4b8:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800b4c0:	4a1f      	ldr	r2, [pc, #124]	@ (800b540 <_sin+0xf0>)
 800b4c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4c6:	613b      	str	r3, [r7, #16]
 800b4c8:	e021      	b.n	800b50e <_sin+0xbe>
  }
  else if (i < 192)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2bbf      	cmp	r3, #191	@ 0xbf
 800b4ce:	d80e      	bhi.n	800b4ee <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	3b80      	subs	r3, #128	@ 0x80
 800b4d4:	4a1a      	ldr	r2, [pc, #104]	@ (800b540 <_sin+0xf0>)
 800b4d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4da:	425b      	negs	r3, r3
 800b4dc:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	3b7f      	subs	r3, #127	@ 0x7f
 800b4e2:	4a17      	ldr	r2, [pc, #92]	@ (800b540 <_sin+0xf0>)
 800b4e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4e8:	425b      	negs	r3, r3
 800b4ea:	613b      	str	r3, [r7, #16]
 800b4ec:	e00f      	b.n	800b50e <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800b4f4:	4a12      	ldr	r2, [pc, #72]	@ (800b540 <_sin+0xf0>)
 800b4f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4fa:	425b      	negs	r3, r3
 800b4fc:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800b504:	4a0e      	ldr	r2, [pc, #56]	@ (800b540 <_sin+0xf0>)
 800b506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b50a:	425b      	negs	r3, r3
 800b50c:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800b50e:	693a      	ldr	r2, [r7, #16]
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	1ad3      	subs	r3, r2, r3
 800b514:	68ba      	ldr	r2, [r7, #8]
 800b516:	fb02 f303 	mul.w	r3, r2, r3
 800b51a:	121a      	asrs	r2, r3, #8
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	4413      	add	r3, r2
 800b520:	ee07 3a90 	vmov	s15, r3
 800b524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b528:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800b544 <_sin+0xf4>
 800b52c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b530:	eeb0 0a67 	vmov.f32	s0, s15
 800b534:	3718      	adds	r7, #24
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	f3af 8000 	nop.w
 800b540:	20000024 	.word	0x20000024
 800b544:	38000000 	.word	0x38000000
 800b548:	6446f9b4 	.word	0x6446f9b4
 800b54c:	40c45f30 	.word	0x40c45f30

0800b550 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800b55a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b55e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800b5a8 <_cos+0x58>
 800b562:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b566:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800b56a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b56e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800b5ac <_cos+0x5c>
 800b572:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b57a:	dd06      	ble.n	800b58a <_cos+0x3a>
 800b57c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b580:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800b5ac <_cos+0x5c>
 800b584:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b588:	e001      	b.n	800b58e <_cos+0x3e>
 800b58a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b58e:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800b592:	ed97 0a03 	vldr	s0, [r7, #12]
 800b596:	f7ff ff5b 	bl	800b450 <_sin>
 800b59a:	eef0 7a40 	vmov.f32	s15, s0
}
 800b59e:	eeb0 0a67 	vmov.f32	s0, s15
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	3fc90fdb 	.word	0x3fc90fdb
 800b5ac:	40c90fdb 	.word	0x40c90fdb

0800b5b0 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	ed87 0a03 	vstr	s0, [r7, #12]
 800b5ba:	60b8      	str	r0, [r7, #8]
 800b5bc:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800b5be:	ed97 0a03 	vldr	s0, [r7, #12]
 800b5c2:	f7ff ff45 	bl	800b450 <_sin>
 800b5c6:	eef0 7a40 	vmov.f32	s15, s0
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800b5d0:	ed97 0a03 	vldr	s0, [r7, #12]
 800b5d4:	f7ff ffbc 	bl	800b550 <_cos>
 800b5d8:	eef0 7a40 	vmov.f32	s15, s0
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	edc3 7a00 	vstr	s15, [r3]
}
 800b5e2:	bf00      	nop
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
	...

0800b5ec <motorInit>:
FocParameters fp1;

static void setPwm1(unsigned short int a, unsigned short int b, unsigned short int c);

void motorInit()
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	af00      	add	r7, sp, #0

    fp1.Uq = 2.0f;
 800b5f0:	4b08      	ldr	r3, [pc, #32]	@ (800b614 <motorInit+0x28>)
 800b5f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800b5f6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    fp1.pole_pairs = 7;
 800b5fa:	4b06      	ldr	r3, [pc, #24]	@ (800b614 <motorInit+0x28>)
 800b5fc:	2207      	movs	r2, #7
 800b5fe:	721a      	strb	r2, [r3, #8]
    fp1.setPwm = setPwm1;
 800b600:	4b04      	ldr	r3, [pc, #16]	@ (800b614 <motorInit+0x28>)
 800b602:	4a05      	ldr	r2, [pc, #20]	@ (800b618 <motorInit+0x2c>)
 800b604:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
 800b608:	bf00      	nop
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	20000510 	.word	0x20000510
 800b618:	0800b61d 	.word	0x0800b61d

0800b61c <setPwm1>:
//    fp->angle_el = _electricalAngle(fp->shaft_angle, fp->pole_pairs);
//    SVPWM(fp);
}

static void setPwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	4603      	mov	r3, r0
 800b624:	80fb      	strh	r3, [r7, #6]
 800b626:	460b      	mov	r3, r1
 800b628:	80bb      	strh	r3, [r7, #4]
 800b62a:	4613      	mov	r3, r2
 800b62c:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = a;
 800b62e:	4a07      	ldr	r2, [pc, #28]	@ (800b64c <setPwm1+0x30>)
 800b630:	88fb      	ldrh	r3, [r7, #6]
 800b632:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800b634:	4a05      	ldr	r2, [pc, #20]	@ (800b64c <setPwm1+0x30>)
 800b636:	88bb      	ldrh	r3, [r7, #4]
 800b638:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = c;
 800b63a:	4a04      	ldr	r2, [pc, #16]	@ (800b64c <setPwm1+0x30>)
 800b63c:	887b      	ldrh	r3, [r7, #2]
 800b63e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800b640:	bf00      	nop
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr
 800b64c:	40012c00 	.word	0x40012c00

0800b650 <setPhaseVoltage1>:

void setPhaseVoltage1(float Uq, float Ud, float angle_el)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b092      	sub	sp, #72	@ 0x48
 800b654:	af00      	add	r7, sp, #0
 800b656:	ed87 0a03 	vstr	s0, [r7, #12]
 800b65a:	edc7 0a02 	vstr	s1, [r7, #8]
 800b65e:	ed87 1a01 	vstr	s2, [r7, #4]

    Uq = _constrain(Uq, -UqMAX, UqMAX);
 800b662:	edd7 7a03 	vldr	s15, [r7, #12]
 800b666:	ed9f 7acd 	vldr	s14, [pc, #820]	@ 800b99c <setPhaseVoltage1+0x34c>
 800b66a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b672:	d501      	bpl.n	800b678 <setPhaseVoltage1+0x28>
 800b674:	4bca      	ldr	r3, [pc, #808]	@ (800b9a0 <setPhaseVoltage1+0x350>)
 800b676:	e00b      	b.n	800b690 <setPhaseVoltage1+0x40>
 800b678:	edd7 7a03 	vldr	s15, [r7, #12]
 800b67c:	ed9f 7ac9 	vldr	s14, [pc, #804]	@ 800b9a4 <setPhaseVoltage1+0x354>
 800b680:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b688:	dd01      	ble.n	800b68e <setPhaseVoltage1+0x3e>
 800b68a:	4bc7      	ldr	r3, [pc, #796]	@ (800b9a8 <setPhaseVoltage1+0x358>)
 800b68c:	e000      	b.n	800b690 <setPhaseVoltage1+0x40>
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	60fb      	str	r3, [r7, #12]

    float ct;
    float st;
    _sincos(angle_el, &st, &ct);
 800b692:	f107 0214 	add.w	r2, r7, #20
 800b696:	f107 0310 	add.w	r3, r7, #16
 800b69a:	4611      	mov	r1, r2
 800b69c:	4618      	mov	r0, r3
 800b69e:	ed97 0a01 	vldr	s0, [r7, #4]
 800b6a2:	f7ff ff85 	bl	800b5b0 <_sincos>
    // Park逆变换
    float Ualpha = -Uq * st + Ud * ct;
 800b6a6:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6aa:	eeb1 7a67 	vneg.f32	s14, s15
 800b6ae:	edd7 7a04 	vldr	s15, [r7, #16]
 800b6b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6b6:	edd7 6a05 	vldr	s13, [r7, #20]
 800b6ba:	edd7 7a02 	vldr	s15, [r7, #8]
 800b6be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b6c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6c6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float Ubeta = Uq * ct + Ud * st;
 800b6ca:	ed97 7a05 	vldr	s14, [r7, #20]
 800b6ce:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6d6:	edd7 6a04 	vldr	s13, [r7, #16]
 800b6da:	edd7 7a02 	vldr	s15, [r7, #8]
 800b6de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b6e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6e6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    uint32_t d1, d2, d3;
    float tFirst = 0, tSecond = 0;
 800b6ea:	f04f 0300 	mov.w	r3, #0
 800b6ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6f0:	f04f 0300 	mov.w	r3, #0
 800b6f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float K = _SQRT3 * HALP_PWM_PERIOD / U_DC;
 800b6f6:	4bad      	ldr	r3, [pc, #692]	@ (800b9ac <setPhaseVoltage1+0x35c>)
 800b6f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    float X = K * Ubeta;
 800b6fa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b6fe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800b702:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b706:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float Y = K * (_SQRT3 * Ualpha / 2.0f - Ubeta / 2.0f);
 800b70a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800b70e:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 800b9b0 <setPhaseVoltage1+0x360>
 800b712:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b716:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b71a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b71e:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800b722:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800b726:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800b72a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b72e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b736:	edc7 7a08 	vstr	s15, [r7, #32]
    float Z = K * (-_SQRT3 * Ualpha / 2.0f - Ubeta / 2.0f);
 800b73a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800b73e:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 800b9b4 <setPhaseVoltage1+0x364>
 800b742:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b746:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b74a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b74e:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800b752:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800b756:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800b75a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b75e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b762:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b766:	edc7 7a07 	vstr	s15, [r7, #28]

    uint8_t sector = sectorRemap[(X > 0.0f) + ((Y > 0.0f) << 1) + ((Z > 0.0f) << 2)]; // sector = A + 2B + 4C
 800b76a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b76e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b776:	bfcc      	ite	gt
 800b778:	2301      	movgt	r3, #1
 800b77a:	2300      	movle	r3, #0
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	461a      	mov	r2, r3
 800b780:	edd7 7a08 	vldr	s15, [r7, #32]
 800b784:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b78c:	dd01      	ble.n	800b792 <setPhaseVoltage1+0x142>
 800b78e:	2302      	movs	r3, #2
 800b790:	e000      	b.n	800b794 <setPhaseVoltage1+0x144>
 800b792:	2300      	movs	r3, #0
 800b794:	4413      	add	r3, r2
 800b796:	edd7 7a07 	vldr	s15, [r7, #28]
 800b79a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a2:	dd01      	ble.n	800b7a8 <setPhaseVoltage1+0x158>
 800b7a4:	2204      	movs	r2, #4
 800b7a6:	e000      	b.n	800b7aa <setPhaseVoltage1+0x15a>
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	4413      	add	r3, r2
 800b7ac:	4a82      	ldr	r2, [pc, #520]	@ (800b9b8 <setPhaseVoltage1+0x368>)
 800b7ae:	5cd3      	ldrb	r3, [r2, r3]
 800b7b0:	76fb      	strb	r3, [r7, #27]

    switch (sector)
 800b7b2:	7efb      	ldrb	r3, [r7, #27]
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	2b05      	cmp	r3, #5
 800b7b8:	f200 8172 	bhi.w	800baa0 <setPhaseVoltage1+0x450>
 800b7bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b7c4 <setPhaseVoltage1+0x174>)
 800b7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c2:	bf00      	nop
 800b7c4:	0800b7dd 	.word	0x0800b7dd
 800b7c8:	0800b845 	.word	0x0800b845
 800b7cc:	0800b8bd 	.word	0x0800b8bd
 800b7d0:	0800b925 	.word	0x0800b925
 800b7d4:	0800b9c1 	.word	0x0800b9c1
 800b7d8:	0800ba29 	.word	0x0800ba29
    {
    case 1:
        tFirst = Y;
 800b7dc:	6a3b      	ldr	r3, [r7, #32]
 800b7de:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = X;
 800b7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d1 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800b7e4:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800b9bc <setPhaseVoltage1+0x36c>
 800b7e8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b7ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b7f0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800b7f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b7f8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b7fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b804:	ee17 3a90 	vmov	r3, s15
 800b808:	647b      	str	r3, [r7, #68]	@ 0x44
        d2 = d1 + tFirst;
 800b80a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b80c:	ee07 3a90 	vmov	s15, r3
 800b810:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b814:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b81c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b820:	ee17 3a90 	vmov	r3, s15
 800b824:	643b      	str	r3, [r7, #64]	@ 0x40
        d3 = d2 + tSecond;
 800b826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b828:	ee07 3a90 	vmov	s15, r3
 800b82c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b830:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800b834:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b83c:	ee17 3a90 	vmov	r3, s15
 800b840:	63fb      	str	r3, [r7, #60]	@ 0x3c

        break;
 800b842:	e12d      	b.n	800baa0 <setPhaseVoltage1+0x450>
    case 2:
        tFirst = -Y;
 800b844:	edd7 7a08 	vldr	s15, [r7, #32]
 800b848:	eef1 7a67 	vneg.f32	s15, s15
 800b84c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -Z;
 800b850:	edd7 7a07 	vldr	s15, [r7, #28]
 800b854:	eef1 7a67 	vneg.f32	s15, s15
 800b858:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d2 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800b85c:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 800b9bc <setPhaseVoltage1+0x36c>
 800b860:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b864:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b868:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800b86c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b870:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b87c:	ee17 3a90 	vmov	r3, s15
 800b880:	643b      	str	r3, [r7, #64]	@ 0x40
        d1 = d2 + tFirst;
 800b882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b884:	ee07 3a90 	vmov	s15, r3
 800b888:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b88c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b890:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b898:	ee17 3a90 	vmov	r3, s15
 800b89c:	647b      	str	r3, [r7, #68]	@ 0x44
        d3 = d1 + tSecond;
 800b89e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8a0:	ee07 3a90 	vmov	s15, r3
 800b8a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b8a8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800b8ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8b4:	ee17 3a90 	vmov	r3, s15
 800b8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

        break;
 800b8ba:	e0f1      	b.n	800baa0 <setPhaseVoltage1+0x450>
    case 3:
        tFirst = X;
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8be:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = Z;
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d2 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800b8c4:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800b9bc <setPhaseVoltage1+0x36c>
 800b8c8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b8cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b8d0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800b8d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b8d8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b8dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8e4:	ee17 3a90 	vmov	r3, s15
 800b8e8:	643b      	str	r3, [r7, #64]	@ 0x40
        d3 = d2 + tFirst;
 800b8ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8ec:	ee07 3a90 	vmov	s15, r3
 800b8f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b8f4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b8f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b900:	ee17 3a90 	vmov	r3, s15
 800b904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d1 = d3 + tSecond;
 800b906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b908:	ee07 3a90 	vmov	s15, r3
 800b90c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b910:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800b914:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b91c:	ee17 3a90 	vmov	r3, s15
 800b920:	647b      	str	r3, [r7, #68]	@ 0x44

        break;
 800b922:	e0bd      	b.n	800baa0 <setPhaseVoltage1+0x450>
    case 4:
        tFirst = -X;
 800b924:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b928:	eef1 7a67 	vneg.f32	s15, s15
 800b92c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -Y;
 800b930:	edd7 7a08 	vldr	s15, [r7, #32]
 800b934:	eef1 7a67 	vneg.f32	s15, s15
 800b938:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d3 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800b93c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800b9bc <setPhaseVoltage1+0x36c>
 800b940:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b944:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b948:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800b94c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b950:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b95c:	ee17 3a90 	vmov	r3, s15
 800b960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d2 = d3 + tFirst;
 800b962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b964:	ee07 3a90 	vmov	s15, r3
 800b968:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b96c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b970:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b978:	ee17 3a90 	vmov	r3, s15
 800b97c:	643b      	str	r3, [r7, #64]	@ 0x40
        d1 = d2 + tSecond;
 800b97e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b980:	ee07 3a90 	vmov	s15, r3
 800b984:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b988:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800b98c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b994:	ee17 3a90 	vmov	r3, s15
 800b998:	647b      	str	r3, [r7, #68]	@ 0x44

        break;
 800b99a:	e081      	b.n	800baa0 <setPhaseVoltage1+0x450>
 800b99c:	c0ddb3d7 	.word	0xc0ddb3d7
 800b9a0:	c0ddb3d7 	.word	0xc0ddb3d7
 800b9a4:	40ddb3d7 	.word	0x40ddb3d7
 800b9a8:	40ddb3d7 	.word	0x40ddb3d7
 800b9ac:	4490566b 	.word	0x4490566b
 800b9b0:	3fddb3d7 	.word	0x3fddb3d7
 800b9b4:	bfddb3d7 	.word	0xbfddb3d7
 800b9b8:	0800c09c 	.word	0x0800c09c
 800b9bc:	45fa0000 	.word	0x45fa0000

    case 5:
        tFirst = Z;
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = Y;
 800b9c4:	6a3b      	ldr	r3, [r7, #32]
 800b9c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d3 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800b9c8:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 800b9bc <setPhaseVoltage1+0x36c>
 800b9cc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b9d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b9d4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800b9d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b9dc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b9e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9e8:	ee17 3a90 	vmov	r3, s15
 800b9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d1 = d3 + tFirst;
 800b9ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9f0:	ee07 3a90 	vmov	s15, r3
 800b9f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b9f8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b9fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba04:	ee17 3a90 	vmov	r3, s15
 800ba08:	647b      	str	r3, [r7, #68]	@ 0x44
        d2 = d1 + tSecond;
 800ba0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba0c:	ee07 3a90 	vmov	s15, r3
 800ba10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba14:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ba18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba20:	ee17 3a90 	vmov	r3, s15
 800ba24:	643b      	str	r3, [r7, #64]	@ 0x40

        break;
 800ba26:	e03b      	b.n	800baa0 <setPhaseVoltage1+0x450>

    case 6:
        tFirst = -Z;
 800ba28:	edd7 7a07 	vldr	s15, [r7, #28]
 800ba2c:	eef1 7a67 	vneg.f32	s15, s15
 800ba30:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -X;
 800ba34:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800ba38:	eef1 7a67 	vneg.f32	s15, s15
 800ba3c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d1 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800ba40:	ed1f 7a22 	vldr	s14, [pc, #-136]	@ 800b9bc <setPhaseVoltage1+0x36c>
 800ba44:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800ba48:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ba4c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ba50:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ba54:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ba58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba60:	ee17 3a90 	vmov	r3, s15
 800ba64:	647b      	str	r3, [r7, #68]	@ 0x44
        d3 = d1 + tFirst;
 800ba66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba68:	ee07 3a90 	vmov	s15, r3
 800ba6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba70:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800ba74:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba7c:	ee17 3a90 	vmov	r3, s15
 800ba80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d2 = d3 + tSecond;
 800ba82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba84:	ee07 3a90 	vmov	s15, r3
 800ba88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba8c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ba90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba98:	ee17 3a90 	vmov	r3, s15
 800ba9c:	643b      	str	r3, [r7, #64]	@ 0x40

        break;
 800ba9e:	bf00      	nop
    }
#if SEND_RCC_DATA
    load_data[0] = d1;
 800baa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800baa2:	ee07 3a90 	vmov	s15, r3
 800baa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baaa:	4b10      	ldr	r3, [pc, #64]	@ (800baec <setPhaseVoltage1+0x49c>)
 800baac:	edc3 7a00 	vstr	s15, [r3]
    load_data[1] = d2;
 800bab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bab2:	ee07 3a90 	vmov	s15, r3
 800bab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baba:	4b0c      	ldr	r3, [pc, #48]	@ (800baec <setPhaseVoltage1+0x49c>)
 800babc:	edc3 7a01 	vstr	s15, [r3, #4]
    load_data[2] = d3;
 800bac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bac2:	ee07 3a90 	vmov	s15, r3
 800bac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baca:	4b08      	ldr	r3, [pc, #32]	@ (800baec <setPhaseVoltage1+0x49c>)
 800bacc:	edc3 7a02 	vstr	s15, [r3, #8]
//    load_data[3] = Uq;
#endif
    PWM_GENERATE(d1, d2, d3);
 800bad0:	4a07      	ldr	r2, [pc, #28]	@ (800baf0 <setPhaseVoltage1+0x4a0>)
 800bad2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bad4:	6353      	str	r3, [r2, #52]	@ 0x34
 800bad6:	4a06      	ldr	r2, [pc, #24]	@ (800baf0 <setPhaseVoltage1+0x4a0>)
 800bad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bada:	6393      	str	r3, [r2, #56]	@ 0x38
 800badc:	4a04      	ldr	r2, [pc, #16]	@ (800baf0 <setPhaseVoltage1+0x4a0>)
 800bade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bae0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800bae2:	bf00      	nop
 800bae4:	3748      	adds	r7, #72	@ 0x48
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	200004fc 	.word	0x200004fc
 800baf0:	40012c00 	.word	0x40012c00

0800baf4 <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
static bool powerLost;
void userMain(void)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	af00      	add	r7, sp, #0
	// {
	// 	_30ms = 0;
	// 	sensoring();
	// }

	if (get100MsFlag())
 800baf8:	f000 fa4e 	bl	800bf98 <get100MsFlag>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <userMain+0x12>
	{
		appRunning();
 800bb02:	f7ff fc17 	bl	800b334 <appRunning>
	}
}
 800bb06:	bf00      	nop
 800bb08:	bd80      	pop	{r7, pc}
	...

0800bb0c <HAL_GPIO_EXTI_Callback>:
void setPowerLost()
{
	powerLost = 1;
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	4603      	mov	r3, r0
 800bb14:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	if (Button3_Pin == GPIO_Pin)
 800bb16:	88fb      	ldrh	r3, [r7, #6]
 800bb18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb1c:	d13a      	bne.n	800bb94 <HAL_GPIO_EXTI_Callback+0x88>
	{
		Motor_state = ~Motor_state;
 800bb1e:	4b1f      	ldr	r3, [pc, #124]	@ (800bb9c <HAL_GPIO_EXTI_Callback+0x90>)
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	43db      	mvns	r3, r3
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	4b1d      	ldr	r3, [pc, #116]	@ (800bb9c <HAL_GPIO_EXTI_Callback+0x90>)
 800bb28:	701a      	strb	r2, [r3, #0]
		if (0 == Motor_state)
 800bb2a:	4b1c      	ldr	r3, [pc, #112]	@ (800bb9c <HAL_GPIO_EXTI_Callback+0x90>)
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d118      	bne.n	800bb64 <HAL_GPIO_EXTI_Callback+0x58>
		{
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800bb32:	2100      	movs	r1, #0
 800bb34:	481a      	ldr	r0, [pc, #104]	@ (800bba0 <HAL_GPIO_EXTI_Callback+0x94>)
 800bb36:	f7fc fb2b 	bl	8008190 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800bb3a:	2104      	movs	r1, #4
 800bb3c:	4818      	ldr	r0, [pc, #96]	@ (800bba0 <HAL_GPIO_EXTI_Callback+0x94>)
 800bb3e:	f7fc fb27 	bl	8008190 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800bb42:	2108      	movs	r1, #8
 800bb44:	4816      	ldr	r0, [pc, #88]	@ (800bba0 <HAL_GPIO_EXTI_Callback+0x94>)
 800bb46:	f7fc fb23 	bl	8008190 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	4814      	ldr	r0, [pc, #80]	@ (800bba0 <HAL_GPIO_EXTI_Callback+0x94>)
 800bb4e:	f7fd fdf3 	bl	8009738 <HAL_TIMEx_PWMN_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800bb52:	2104      	movs	r1, #4
 800bb54:	4812      	ldr	r0, [pc, #72]	@ (800bba0 <HAL_GPIO_EXTI_Callback+0x94>)
 800bb56:	f7fd fdef 	bl	8009738 <HAL_TIMEx_PWMN_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800bb5a:	2108      	movs	r1, #8
 800bb5c:	4810      	ldr	r0, [pc, #64]	@ (800bba0 <HAL_GPIO_EXTI_Callback+0x94>)
 800bb5e:	f7fd fdeb 	bl	8009738 <HAL_TIMEx_PWMN_Stop>
		}
	}
	/* NOTE: This function should not be modified, when the callback is needed,
			 the HAL_GPIO_EXTI_Callback could be implemented in the user file
	 */
}
 800bb62:	e017      	b.n	800bb94 <HAL_GPIO_EXTI_Callback+0x88>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800bb64:	2100      	movs	r1, #0
 800bb66:	480e      	ldr	r0, [pc, #56]	@ (800bba0 <HAL_GPIO_EXTI_Callback+0x94>)
 800bb68:	f7fc fa12 	bl	8007f90 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800bb6c:	2104      	movs	r1, #4
 800bb6e:	480c      	ldr	r0, [pc, #48]	@ (800bba0 <HAL_GPIO_EXTI_Callback+0x94>)
 800bb70:	f7fc fa0e 	bl	8007f90 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800bb74:	2108      	movs	r1, #8
 800bb76:	480a      	ldr	r0, [pc, #40]	@ (800bba0 <HAL_GPIO_EXTI_Callback+0x94>)
 800bb78:	f7fc fa0a 	bl	8007f90 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	4808      	ldr	r0, [pc, #32]	@ (800bba0 <HAL_GPIO_EXTI_Callback+0x94>)
 800bb80:	f7fd fd26 	bl	80095d0 <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800bb84:	2104      	movs	r1, #4
 800bb86:	4806      	ldr	r0, [pc, #24]	@ (800bba0 <HAL_GPIO_EXTI_Callback+0x94>)
 800bb88:	f7fd fd22 	bl	80095d0 <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800bb8c:	2108      	movs	r1, #8
 800bb8e:	4804      	ldr	r0, [pc, #16]	@ (800bba0 <HAL_GPIO_EXTI_Callback+0x94>)
 800bb90:	f7fd fd1e 	bl	80095d0 <HAL_TIMEx_PWMN_Start>
}
 800bb94:	bf00      	nop
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	200005cc 	.word	0x200005cc
 800bba0:	20000368 	.word	0x20000368
 800bba4:	00000000 	.word	0x00000000

0800bba8 <HAL_ADCEx_InjectedConvCpltCallback>:
	USART3->TDR = (uint8_t)ch;
	return ch;
}

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
	static uint8_t cnt;
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hadc);
	if (hadc == &hadc1)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	4a73      	ldr	r2, [pc, #460]	@ (800bd80 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	f040 80db 	bne.w	800bd70 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>
	{
		if (ADC_offset == 0)
 800bbba:	4b72      	ldr	r3, [pc, #456]	@ (800bd84 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d156      	bne.n	800bc70 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>
		{
			cnt++;
 800bbc2:	4b71      	ldr	r3, [pc, #452]	@ (800bd88 <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	b2da      	uxtb	r2, r3
 800bbca:	4b6f      	ldr	r3, [pc, #444]	@ (800bd88 <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 800bbcc:	701a      	strb	r2, [r3, #0]
			adc1_in1 = hadc1.Instance->JDR1;
 800bbce:	4b6c      	ldr	r3, [pc, #432]	@ (800bd80 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	4b6c      	ldr	r3, [pc, #432]	@ (800bd8c <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 800bbda:	801a      	strh	r2, [r3, #0]
			adc1_in2 = hadc2.Instance->JDR1;
 800bbdc:	4b6c      	ldr	r3, [pc, #432]	@ (800bd90 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	4b6b      	ldr	r3, [pc, #428]	@ (800bd94 <HAL_ADCEx_InjectedConvCpltCallback+0x1ec>)
 800bbe8:	801a      	strh	r2, [r3, #0]
			adc1_in3 = hadc1.Instance->JDR2;
 800bbea:	4b65      	ldr	r3, [pc, #404]	@ (800bd80 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	4b68      	ldr	r3, [pc, #416]	@ (800bd98 <HAL_ADCEx_InjectedConvCpltCallback+0x1f0>)
 800bbf6:	801a      	strh	r2, [r3, #0]
			IA_Offset += adc1_in1;
 800bbf8:	4b68      	ldr	r3, [pc, #416]	@ (800bd9c <HAL_ADCEx_InjectedConvCpltCallback+0x1f4>)
 800bbfa:	881a      	ldrh	r2, [r3, #0]
 800bbfc:	4b63      	ldr	r3, [pc, #396]	@ (800bd8c <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 800bbfe:	881b      	ldrh	r3, [r3, #0]
 800bc00:	4413      	add	r3, r2
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	4b65      	ldr	r3, [pc, #404]	@ (800bd9c <HAL_ADCEx_InjectedConvCpltCallback+0x1f4>)
 800bc06:	801a      	strh	r2, [r3, #0]
			IB_Offset += adc1_in2;
 800bc08:	4b65      	ldr	r3, [pc, #404]	@ (800bda0 <HAL_ADCEx_InjectedConvCpltCallback+0x1f8>)
 800bc0a:	881a      	ldrh	r2, [r3, #0]
 800bc0c:	4b61      	ldr	r3, [pc, #388]	@ (800bd94 <HAL_ADCEx_InjectedConvCpltCallback+0x1ec>)
 800bc0e:	881b      	ldrh	r3, [r3, #0]
 800bc10:	4413      	add	r3, r2
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	4b62      	ldr	r3, [pc, #392]	@ (800bda0 <HAL_ADCEx_InjectedConvCpltCallback+0x1f8>)
 800bc16:	801a      	strh	r2, [r3, #0]
			IC_Offset += adc1_in3;
 800bc18:	4b62      	ldr	r3, [pc, #392]	@ (800bda4 <HAL_ADCEx_InjectedConvCpltCallback+0x1fc>)
 800bc1a:	881a      	ldrh	r2, [r3, #0]
 800bc1c:	4b5e      	ldr	r3, [pc, #376]	@ (800bd98 <HAL_ADCEx_InjectedConvCpltCallback+0x1f0>)
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	4413      	add	r3, r2
 800bc22:	b29a      	uxth	r2, r3
 800bc24:	4b5f      	ldr	r3, [pc, #380]	@ (800bda4 <HAL_ADCEx_InjectedConvCpltCallback+0x1fc>)
 800bc26:	801a      	strh	r2, [r3, #0]
			if (cnt >= 10)
 800bc28:	4b57      	ldr	r3, [pc, #348]	@ (800bd88 <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	2b09      	cmp	r3, #9
 800bc2e:	f240 809f 	bls.w	800bd70 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>
			{
				ADC_offset = 1;
 800bc32:	4b54      	ldr	r3, [pc, #336]	@ (800bd84 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 800bc34:	2201      	movs	r2, #1
 800bc36:	701a      	strb	r2, [r3, #0]
				IA_Offset = IA_Offset / 10;
 800bc38:	4b58      	ldr	r3, [pc, #352]	@ (800bd9c <HAL_ADCEx_InjectedConvCpltCallback+0x1f4>)
 800bc3a:	881b      	ldrh	r3, [r3, #0]
 800bc3c:	4a5a      	ldr	r2, [pc, #360]	@ (800bda8 <HAL_ADCEx_InjectedConvCpltCallback+0x200>)
 800bc3e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc42:	08db      	lsrs	r3, r3, #3
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	4b55      	ldr	r3, [pc, #340]	@ (800bd9c <HAL_ADCEx_InjectedConvCpltCallback+0x1f4>)
 800bc48:	801a      	strh	r2, [r3, #0]
				IB_Offset = IB_Offset / 10;
 800bc4a:	4b55      	ldr	r3, [pc, #340]	@ (800bda0 <HAL_ADCEx_InjectedConvCpltCallback+0x1f8>)
 800bc4c:	881b      	ldrh	r3, [r3, #0]
 800bc4e:	4a56      	ldr	r2, [pc, #344]	@ (800bda8 <HAL_ADCEx_InjectedConvCpltCallback+0x200>)
 800bc50:	fba2 2303 	umull	r2, r3, r2, r3
 800bc54:	08db      	lsrs	r3, r3, #3
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	4b51      	ldr	r3, [pc, #324]	@ (800bda0 <HAL_ADCEx_InjectedConvCpltCallback+0x1f8>)
 800bc5a:	801a      	strh	r2, [r3, #0]
				IC_Offset = IC_Offset / 10;
 800bc5c:	4b51      	ldr	r3, [pc, #324]	@ (800bda4 <HAL_ADCEx_InjectedConvCpltCallback+0x1fc>)
 800bc5e:	881b      	ldrh	r3, [r3, #0]
 800bc60:	4a51      	ldr	r2, [pc, #324]	@ (800bda8 <HAL_ADCEx_InjectedConvCpltCallback+0x200>)
 800bc62:	fba2 2303 	umull	r2, r3, r2, r3
 800bc66:	08db      	lsrs	r3, r3, #3
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	4b4e      	ldr	r3, [pc, #312]	@ (800bda4 <HAL_ADCEx_InjectedConvCpltCallback+0x1fc>)
 800bc6c:	801a      	strh	r2, [r3, #0]
	}

	/* NOTE : This function should not be modified. When the callback is needed,
			  function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
	*/
}
 800bc6e:	e07f      	b.n	800bd70 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>
			adc1_in1 = hadc1.Instance->JDR1;
 800bc70:	4b43      	ldr	r3, [pc, #268]	@ (800bd80 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	4b44      	ldr	r3, [pc, #272]	@ (800bd8c <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 800bc7c:	801a      	strh	r2, [r3, #0]
			adc1_in3 = hadc1.Instance->JDR2;
 800bc7e:	4b40      	ldr	r3, [pc, #256]	@ (800bd80 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc86:	b29a      	uxth	r2, r3
 800bc88:	4b43      	ldr	r3, [pc, #268]	@ (800bd98 <HAL_ADCEx_InjectedConvCpltCallback+0x1f0>)
 800bc8a:	801a      	strh	r2, [r3, #0]
			adc1_in2 = hadc2.Instance->JDR1;
 800bc8c:	4b40      	ldr	r3, [pc, #256]	@ (800bd90 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	4b3f      	ldr	r3, [pc, #252]	@ (800bd94 <HAL_ADCEx_InjectedConvCpltCallback+0x1ec>)
 800bc98:	801a      	strh	r2, [r3, #0]
			Ia = (adc1_in1 - IA_Offset) * 0.02197f;
 800bc9a:	4b3c      	ldr	r3, [pc, #240]	@ (800bd8c <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 800bc9c:	881b      	ldrh	r3, [r3, #0]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	4b3e      	ldr	r3, [pc, #248]	@ (800bd9c <HAL_ADCEx_InjectedConvCpltCallback+0x1f4>)
 800bca2:	881b      	ldrh	r3, [r3, #0]
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	ee07 3a90 	vmov	s15, r3
 800bcaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcae:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800bdac <HAL_ADCEx_InjectedConvCpltCallback+0x204>
 800bcb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcb6:	4b3e      	ldr	r3, [pc, #248]	@ (800bdb0 <HAL_ADCEx_InjectedConvCpltCallback+0x208>)
 800bcb8:	edc3 7a00 	vstr	s15, [r3]
			Ib = (adc1_in2 - IB_Offset) * 0.02197f;
 800bcbc:	4b35      	ldr	r3, [pc, #212]	@ (800bd94 <HAL_ADCEx_InjectedConvCpltCallback+0x1ec>)
 800bcbe:	881b      	ldrh	r3, [r3, #0]
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	4b37      	ldr	r3, [pc, #220]	@ (800bda0 <HAL_ADCEx_InjectedConvCpltCallback+0x1f8>)
 800bcc4:	881b      	ldrh	r3, [r3, #0]
 800bcc6:	1ad3      	subs	r3, r2, r3
 800bcc8:	ee07 3a90 	vmov	s15, r3
 800bccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcd0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800bdac <HAL_ADCEx_InjectedConvCpltCallback+0x204>
 800bcd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcd8:	4b36      	ldr	r3, [pc, #216]	@ (800bdb4 <HAL_ADCEx_InjectedConvCpltCallback+0x20c>)
 800bcda:	edc3 7a00 	vstr	s15, [r3]
			Ic = (adc1_in3 - IC_Offset) * 0.02197f;
 800bcde:	4b2e      	ldr	r3, [pc, #184]	@ (800bd98 <HAL_ADCEx_InjectedConvCpltCallback+0x1f0>)
 800bce0:	881b      	ldrh	r3, [r3, #0]
 800bce2:	461a      	mov	r2, r3
 800bce4:	4b2f      	ldr	r3, [pc, #188]	@ (800bda4 <HAL_ADCEx_InjectedConvCpltCallback+0x1fc>)
 800bce6:	881b      	ldrh	r3, [r3, #0]
 800bce8:	1ad3      	subs	r3, r2, r3
 800bcea:	ee07 3a90 	vmov	s15, r3
 800bcee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcf2:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800bdac <HAL_ADCEx_InjectedConvCpltCallback+0x204>
 800bcf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcfa:	4b2f      	ldr	r3, [pc, #188]	@ (800bdb8 <HAL_ADCEx_InjectedConvCpltCallback+0x210>)
 800bcfc:	edc3 7a00 	vstr	s15, [r3]
			elecAngle += 0.01;
 800bd00:	4b2e      	ldr	r3, [pc, #184]	@ (800bdbc <HAL_ADCEx_InjectedConvCpltCallback+0x214>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7f4 fbeb 	bl	80004e0 <__aeabi_f2d>
 800bd0a:	a31b      	add	r3, pc, #108	@ (adr r3, 800bd78 <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 800bd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd10:	f7f4 fa88 	bl	8000224 <__adddf3>
 800bd14:	4602      	mov	r2, r0
 800bd16:	460b      	mov	r3, r1
 800bd18:	4610      	mov	r0, r2
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	f7f4 fe6a 	bl	80009f4 <__aeabi_d2f>
 800bd20:	4603      	mov	r3, r0
 800bd22:	4a26      	ldr	r2, [pc, #152]	@ (800bdbc <HAL_ADCEx_InjectedConvCpltCallback+0x214>)
 800bd24:	6013      	str	r3, [r2, #0]
			if (elecAngle >= _2PI)
 800bd26:	4b25      	ldr	r3, [pc, #148]	@ (800bdbc <HAL_ADCEx_InjectedConvCpltCallback+0x214>)
 800bd28:	edd3 7a00 	vldr	s15, [r3]
 800bd2c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800bdc0 <HAL_ADCEx_InjectedConvCpltCallback+0x218>
 800bd30:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd38:	db03      	blt.n	800bd42 <HAL_ADCEx_InjectedConvCpltCallback+0x19a>
				elecAngle = 0;
 800bd3a:	4b20      	ldr	r3, [pc, #128]	@ (800bdbc <HAL_ADCEx_InjectedConvCpltCallback+0x214>)
 800bd3c:	f04f 0200 	mov.w	r2, #0
 800bd40:	601a      	str	r2, [r3, #0]
			setPhaseVoltage1(2, 0, elecAngle);
 800bd42:	4b1e      	ldr	r3, [pc, #120]	@ (800bdbc <HAL_ADCEx_InjectedConvCpltCallback+0x214>)
 800bd44:	edd3 7a00 	vldr	s15, [r3]
 800bd48:	eeb0 1a67 	vmov.f32	s2, s15
 800bd4c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800bdc4 <HAL_ADCEx_InjectedConvCpltCallback+0x21c>
 800bd50:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800bd54:	f7ff fc7c 	bl	800b650 <setPhaseVoltage1>
			dealPer100us();
 800bd58:	f000 f84e 	bl	800bdf8 <dealPer100us>
			memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
 800bd5c:	2214      	movs	r2, #20
 800bd5e:	491a      	ldr	r1, [pc, #104]	@ (800bdc8 <HAL_ADCEx_InjectedConvCpltCallback+0x220>)
 800bd60:	481a      	ldr	r0, [pc, #104]	@ (800bdcc <HAL_ADCEx_InjectedConvCpltCallback+0x224>)
 800bd62:	f000 f959 	bl	800c018 <memcpy>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, 6 * 4);
 800bd66:	2218      	movs	r2, #24
 800bd68:	4918      	ldr	r1, [pc, #96]	@ (800bdcc <HAL_ADCEx_InjectedConvCpltCallback+0x224>)
 800bd6a:	4819      	ldr	r0, [pc, #100]	@ (800bdd0 <HAL_ADCEx_InjectedConvCpltCallback+0x228>)
 800bd6c:	f7fd ffe4 	bl	8009d38 <HAL_UART_Transmit_DMA>
}
 800bd70:	bf00      	nop
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	47ae147b 	.word	0x47ae147b
 800bd7c:	3f847ae1 	.word	0x3f847ae1
 800bd80:	200000c4 	.word	0x200000c4
 800bd84:	200005da 	.word	0x200005da
 800bd88:	2000060c 	.word	0x2000060c
 800bd8c:	200005d4 	.word	0x200005d4
 800bd90:	20000130 	.word	0x20000130
 800bd94:	200005d6 	.word	0x200005d6
 800bd98:	200005d8 	.word	0x200005d8
 800bd9c:	200005ce 	.word	0x200005ce
 800bda0:	200005d0 	.word	0x200005d0
 800bda4:	200005d2 	.word	0x200005d2
 800bda8:	cccccccd 	.word	0xcccccccd
 800bdac:	3cb3fa6e 	.word	0x3cb3fa6e
 800bdb0:	200005c0 	.word	0x200005c0
 800bdb4:	200005c4 	.word	0x200005c4
 800bdb8:	200005c8 	.word	0x200005c8
 800bdbc:	20000610 	.word	0x20000610
 800bdc0:	40c90fdb 	.word	0x40c90fdb
 800bdc4:	00000000 	.word	0x00000000
 800bdc8:	200004fc 	.word	0x200004fc
 800bdcc:	2000000c 	.word	0x2000000c
 800bdd0:	20000400 	.word	0x20000400

0800bdd4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
	// }

	/* NOTE : This function should not be modified, when the callback is needed,
			  the HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 800bddc:	bf00      	nop
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <FDCAN_Config>:

void FDCAN_Config(void)
{
 800bde8:	b480      	push	{r7}
 800bdea:	af00      	add	r7, sp, #0
	// TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	// TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	// TxHeader.MessageMarker = 0x52;

	// HAL_FDCAN_Start(&hfdcan1);
}
 800bdec:	bf00      	nop
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
	...

0800bdf8 <dealPer100us>:
static uchar withoutZeroCnt, powerOnCnt;

static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag;

void dealPer100us()
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800bdfc:	4b08      	ldr	r3, [pc, #32]	@ (800be20 <dealPer100us+0x28>)
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	3301      	adds	r3, #1
 800be02:	b2da      	uxtb	r2, r3
 800be04:	4b06      	ldr	r3, [pc, #24]	@ (800be20 <dealPer100us+0x28>)
 800be06:	701a      	strb	r2, [r3, #0]
 800be08:	4b05      	ldr	r3, [pc, #20]	@ (800be20 <dealPer100us+0x28>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	2b09      	cmp	r3, #9
 800be0e:	d904      	bls.n	800be1a <dealPer100us+0x22>
    {
        cnt = 0;
 800be10:	4b03      	ldr	r3, [pc, #12]	@ (800be20 <dealPer100us+0x28>)
 800be12:	2200      	movs	r2, #0
 800be14:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800be16:	f000 f805 	bl	800be24 <dealPerMs>
    }

#if ZERO_POLL
    zeroPolling();
#endif
}
 800be1a:	bf00      	nop
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	20000624 	.word	0x20000624

0800be24 <dealPerMs>:

// 定时器中断调用
 void dealPerMs()
{
 800be24:	b480      	push	{r7}
 800be26:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt;
    if (++_5msCnt >= 5)
 800be28:	4b40      	ldr	r3, [pc, #256]	@ (800bf2c <dealPerMs+0x108>)
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	3301      	adds	r3, #1
 800be2e:	b2da      	uxtb	r2, r3
 800be30:	4b3e      	ldr	r3, [pc, #248]	@ (800bf2c <dealPerMs+0x108>)
 800be32:	701a      	strb	r2, [r3, #0]
 800be34:	4b3d      	ldr	r3, [pc, #244]	@ (800bf2c <dealPerMs+0x108>)
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	2b04      	cmp	r3, #4
 800be3a:	d905      	bls.n	800be48 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800be3c:	4b3b      	ldr	r3, [pc, #236]	@ (800bf2c <dealPerMs+0x108>)
 800be3e:	2200      	movs	r2, #0
 800be40:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800be42:	4b3b      	ldr	r3, [pc, #236]	@ (800bf30 <dealPerMs+0x10c>)
 800be44:	2201      	movs	r2, #1
 800be46:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800be48:	4b3a      	ldr	r3, [pc, #232]	@ (800bf34 <dealPerMs+0x110>)
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	3301      	adds	r3, #1
 800be4e:	b2da      	uxtb	r2, r3
 800be50:	4b38      	ldr	r3, [pc, #224]	@ (800bf34 <dealPerMs+0x110>)
 800be52:	701a      	strb	r2, [r3, #0]
 800be54:	4b37      	ldr	r3, [pc, #220]	@ (800bf34 <dealPerMs+0x110>)
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	2b09      	cmp	r3, #9
 800be5a:	d905      	bls.n	800be68 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800be5c:	4b35      	ldr	r3, [pc, #212]	@ (800bf34 <dealPerMs+0x110>)
 800be5e:	2200      	movs	r2, #0
 800be60:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800be62:	4b35      	ldr	r3, [pc, #212]	@ (800bf38 <dealPerMs+0x114>)
 800be64:	2201      	movs	r2, #1
 800be66:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800be68:	4b34      	ldr	r3, [pc, #208]	@ (800bf3c <dealPerMs+0x118>)
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	3301      	adds	r3, #1
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	4b32      	ldr	r3, [pc, #200]	@ (800bf3c <dealPerMs+0x118>)
 800be72:	701a      	strb	r2, [r3, #0]
 800be74:	4b31      	ldr	r3, [pc, #196]	@ (800bf3c <dealPerMs+0x118>)
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	2b13      	cmp	r3, #19
 800be7a:	d905      	bls.n	800be88 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800be7c:	4b2f      	ldr	r3, [pc, #188]	@ (800bf3c <dealPerMs+0x118>)
 800be7e:	2200      	movs	r2, #0
 800be80:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800be82:	4b2f      	ldr	r3, [pc, #188]	@ (800bf40 <dealPerMs+0x11c>)
 800be84:	2201      	movs	r2, #1
 800be86:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800be88:	4b2e      	ldr	r3, [pc, #184]	@ (800bf44 <dealPerMs+0x120>)
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	3301      	adds	r3, #1
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	4b2c      	ldr	r3, [pc, #176]	@ (800bf44 <dealPerMs+0x120>)
 800be92:	701a      	strb	r2, [r3, #0]
 800be94:	4b2b      	ldr	r3, [pc, #172]	@ (800bf44 <dealPerMs+0x120>)
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	2b1d      	cmp	r3, #29
 800be9a:	d905      	bls.n	800bea8 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800be9c:	4b29      	ldr	r3, [pc, #164]	@ (800bf44 <dealPerMs+0x120>)
 800be9e:	2200      	movs	r2, #0
 800bea0:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800bea2:	4b29      	ldr	r3, [pc, #164]	@ (800bf48 <dealPerMs+0x124>)
 800bea4:	2201      	movs	r2, #1
 800bea6:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800bea8:	4b28      	ldr	r3, [pc, #160]	@ (800bf4c <dealPerMs+0x128>)
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	3301      	adds	r3, #1
 800beae:	b2da      	uxtb	r2, r3
 800beb0:	4b26      	ldr	r3, [pc, #152]	@ (800bf4c <dealPerMs+0x128>)
 800beb2:	701a      	strb	r2, [r3, #0]
 800beb4:	4b25      	ldr	r3, [pc, #148]	@ (800bf4c <dealPerMs+0x128>)
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	2b63      	cmp	r3, #99	@ 0x63
 800beba:	d905      	bls.n	800bec8 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800bebc:	4b23      	ldr	r3, [pc, #140]	@ (800bf4c <dealPerMs+0x128>)
 800bebe:	2200      	movs	r2, #0
 800bec0:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800bec2:	4b23      	ldr	r3, [pc, #140]	@ (800bf50 <dealPerMs+0x12c>)
 800bec4:	2201      	movs	r2, #1
 800bec6:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800bec8:	4b22      	ldr	r3, [pc, #136]	@ (800bf54 <dealPerMs+0x130>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	3301      	adds	r3, #1
 800bece:	4a21      	ldr	r2, [pc, #132]	@ (800bf54 <dealPerMs+0x130>)
 800bed0:	6013      	str	r3, [r2, #0]
 800bed2:	4b20      	ldr	r3, [pc, #128]	@ (800bf54 <dealPerMs+0x130>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800beda:	d305      	bcc.n	800bee8 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800bedc:	4b1d      	ldr	r3, [pc, #116]	@ (800bf54 <dealPerMs+0x130>)
 800bede:	2200      	movs	r2, #0
 800bee0:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800bee2:	4b1d      	ldr	r3, [pc, #116]	@ (800bf58 <dealPerMs+0x134>)
 800bee4:	2201      	movs	r2, #1
 800bee6:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800bee8:	4b1c      	ldr	r3, [pc, #112]	@ (800bf5c <dealPerMs+0x138>)
 800beea:	2232      	movs	r2, #50	@ 0x32
 800beec:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800beee:	4b1c      	ldr	r3, [pc, #112]	@ (800bf60 <dealPerMs+0x13c>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	3301      	adds	r3, #1
 800bef4:	4a1a      	ldr	r2, [pc, #104]	@ (800bf60 <dealPerMs+0x13c>)
 800bef6:	6013      	str	r3, [r2, #0]
 800bef8:	4b19      	ldr	r3, [pc, #100]	@ (800bf60 <dealPerMs+0x13c>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf00:	d305      	bcc.n	800bf0e <dealPerMs+0xea>
    {
        _1msCnt = 0;
 800bf02:	4b17      	ldr	r3, [pc, #92]	@ (800bf60 <dealPerMs+0x13c>)
 800bf04:	2200      	movs	r2, #0
 800bf06:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800bf08:	4b16      	ldr	r3, [pc, #88]	@ (800bf64 <dealPerMs+0x140>)
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800bf0e:	4b16      	ldr	r3, [pc, #88]	@ (800bf68 <dealPerMs+0x144>)
 800bf10:	2201      	movs	r2, #1
 800bf12:	701a      	strb	r2, [r3, #0]
        memorize();
        // beepOnce();
    }
#else
    if (withoutZeroCnt < ZERO_ERR_TIME)
        withoutZeroCnt++;
 800bf14:	4b15      	ldr	r3, [pc, #84]	@ (800bf6c <dealPerMs+0x148>)
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	b2da      	uxtb	r2, r3
 800bf1c:	4b13      	ldr	r3, [pc, #76]	@ (800bf6c <dealPerMs+0x148>)
 800bf1e:	701a      	strb	r2, [r3, #0]
    //             }
    //         }
    //         //	else
    //     }
    // #endif
}
 800bf20:	bf00      	nop
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	20000625 	.word	0x20000625
 800bf30:	2000061e 	.word	0x2000061e
 800bf34:	20000626 	.word	0x20000626
 800bf38:	2000061f 	.word	0x2000061f
 800bf3c:	20000627 	.word	0x20000627
 800bf40:	20000620 	.word	0x20000620
 800bf44:	20000628 	.word	0x20000628
 800bf48:	20000621 	.word	0x20000621
 800bf4c:	20000629 	.word	0x20000629
 800bf50:	20000622 	.word	0x20000622
 800bf54:	2000062c 	.word	0x2000062c
 800bf58:	20000623 	.word	0x20000623
 800bf5c:	2000061c 	.word	0x2000061c
 800bf60:	20000618 	.word	0x20000618
 800bf64:	20000614 	.word	0x20000614
 800bf68:	20000615 	.word	0x20000615
 800bf6c:	2000061d 	.word	0x2000061d

0800bf70 <getOneSecFlag>:
    }
}
#endif

bool getOneSecFlag()
{
 800bf70:	b480      	push	{r7}
 800bf72:	af00      	add	r7, sp, #0
    if (_1s)
 800bf74:	4b07      	ldr	r3, [pc, #28]	@ (800bf94 <getOneSecFlag+0x24>)
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d004      	beq.n	800bf86 <getOneSecFlag+0x16>
    {
        _1s = 0;
 800bf7c:	4b05      	ldr	r3, [pc, #20]	@ (800bf94 <getOneSecFlag+0x24>)
 800bf7e:	2200      	movs	r2, #0
 800bf80:	701a      	strb	r2, [r3, #0]
        return 1;
 800bf82:	2301      	movs	r3, #1
 800bf84:	e000      	b.n	800bf88 <getOneSecFlag+0x18>
    }
    else
        return 0;
 800bf86:	2300      	movs	r3, #0
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	20000614 	.word	0x20000614

0800bf98 <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800bf98:	b480      	push	{r7}
 800bf9a:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800bf9c:	4b07      	ldr	r3, [pc, #28]	@ (800bfbc <get100MsFlag+0x24>)
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d004      	beq.n	800bfae <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800bfa4:	4b05      	ldr	r3, [pc, #20]	@ (800bfbc <get100MsFlag+0x24>)
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	701a      	strb	r2, [r3, #0]
        return 1;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e000      	b.n	800bfb0 <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800bfae:	2300      	movs	r3, #0
    }
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	20000622 	.word	0x20000622

0800bfc0 <memset>:
 800bfc0:	4402      	add	r2, r0
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d100      	bne.n	800bfca <memset+0xa>
 800bfc8:	4770      	bx	lr
 800bfca:	f803 1b01 	strb.w	r1, [r3], #1
 800bfce:	e7f9      	b.n	800bfc4 <memset+0x4>

0800bfd0 <__libc_init_array>:
 800bfd0:	b570      	push	{r4, r5, r6, lr}
 800bfd2:	4d0d      	ldr	r5, [pc, #52]	@ (800c008 <__libc_init_array+0x38>)
 800bfd4:	4c0d      	ldr	r4, [pc, #52]	@ (800c00c <__libc_init_array+0x3c>)
 800bfd6:	1b64      	subs	r4, r4, r5
 800bfd8:	10a4      	asrs	r4, r4, #2
 800bfda:	2600      	movs	r6, #0
 800bfdc:	42a6      	cmp	r6, r4
 800bfde:	d109      	bne.n	800bff4 <__libc_init_array+0x24>
 800bfe0:	4d0b      	ldr	r5, [pc, #44]	@ (800c010 <__libc_init_array+0x40>)
 800bfe2:	4c0c      	ldr	r4, [pc, #48]	@ (800c014 <__libc_init_array+0x44>)
 800bfe4:	f000 f826 	bl	800c034 <_init>
 800bfe8:	1b64      	subs	r4, r4, r5
 800bfea:	10a4      	asrs	r4, r4, #2
 800bfec:	2600      	movs	r6, #0
 800bfee:	42a6      	cmp	r6, r4
 800bff0:	d105      	bne.n	800bffe <__libc_init_array+0x2e>
 800bff2:	bd70      	pop	{r4, r5, r6, pc}
 800bff4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bff8:	4798      	blx	r3
 800bffa:	3601      	adds	r6, #1
 800bffc:	e7ee      	b.n	800bfdc <__libc_init_array+0xc>
 800bffe:	f855 3b04 	ldr.w	r3, [r5], #4
 800c002:	4798      	blx	r3
 800c004:	3601      	adds	r6, #1
 800c006:	e7f2      	b.n	800bfee <__libc_init_array+0x1e>
 800c008:	0800c0ac 	.word	0x0800c0ac
 800c00c:	0800c0ac 	.word	0x0800c0ac
 800c010:	0800c0ac 	.word	0x0800c0ac
 800c014:	0800c0b0 	.word	0x0800c0b0

0800c018 <memcpy>:
 800c018:	440a      	add	r2, r1
 800c01a:	4291      	cmp	r1, r2
 800c01c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c020:	d100      	bne.n	800c024 <memcpy+0xc>
 800c022:	4770      	bx	lr
 800c024:	b510      	push	{r4, lr}
 800c026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c02a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c02e:	4291      	cmp	r1, r2
 800c030:	d1f9      	bne.n	800c026 <memcpy+0xe>
 800c032:	bd10      	pop	{r4, pc}

0800c034 <_init>:
 800c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c036:	bf00      	nop
 800c038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c03a:	bc08      	pop	{r3}
 800c03c:	469e      	mov	lr, r3
 800c03e:	4770      	bx	lr

0800c040 <_fini>:
 800c040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c042:	bf00      	nop
 800c044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c046:	bc08      	pop	{r3}
 800c048:	469e      	mov	lr, r3
 800c04a:	4770      	bx	lr
