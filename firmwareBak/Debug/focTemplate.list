
focTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000128b4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08012a98  08012a98  00013a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013030  08013030  00015258  2**0
                  CONTENTS
  4 .ARM          00000008  08013030  08013030  00014030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013038  08013038  00015258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013038  08013038  00014038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801303c  0801303c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  08013040  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  20000258  08013298  00015258  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac8  08013298  00015ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002824c  00000000  00000000  00015288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000635d  00000000  00000000  0003d4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d0  00000000  00000000  00043838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018e1  00000000  00000000  00045908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fce  00000000  00000000  000471e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003154f  00000000  00000000  000711b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef29e  00000000  00000000  000a2706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001919a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009be0  00000000  00000000  001919e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0019b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000258 	.word	0x20000258
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012a7c 	.word	0x08012a7c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000025c 	.word	0x2000025c
 800021c:	08012a7c 	.word	0x08012a7c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00e fe0e 	bl	800fc70 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00e fe08 	bl	800fc70 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <MX_ADC1_Init+0x164>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <MX_ADC1_Init+0x164>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <MX_ADC1_Init+0x164>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <MX_ADC1_Init+0x164>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010cc:	f001 fdce 	bl	8002c6c <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fcca 	bl	8001a6e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010e6:	f003 ffc1 	bl	800506c <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fcbd 	bl	8001a6e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_ADC1_Init+0x168>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4821      	ldr	r0, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001114:	f002 fa30 	bl	8003578 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fca6 	bl	8001a6e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC1_Init+0x16c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001150:	2384      	movs	r3, #132	@ 0x84
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001164:	f003 faa2 	bl	80046ac <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fc7e 	bl	8001a6e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_ADC1_Init+0x170>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001182:	f003 fa93 	bl	80046ac <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fc6f 	bl	8001a6e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000274 	.word	0x20000274
 800119c:	2e300800 	.word	0x2e300800
 80011a0:	0c900008 	.word	0x0c900008
 80011a4:	32601000 	.word	0x32601000

080011a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b098      	sub	sp, #96	@ 0x60
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b2:	223c      	movs	r2, #60	@ 0x3c
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f00e fd5a 	bl	800fc70 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2220      	movs	r2, #32
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00e fd54 	bl	800fc70 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011c8:	4b3f      	ldr	r3, [pc, #252]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011ca:	4a40      	ldr	r2, [pc, #256]	@ (80012cc <MX_ADC2_Init+0x124>)
 80011cc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011ce:	4b3e      	ldr	r3, [pc, #248]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011d6:	4b3c      	ldr	r3, [pc, #240]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011dc:	4b3a      	ldr	r3, [pc, #232]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011e2:	4b39      	ldr	r3, [pc, #228]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e8:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ee:	4b36      	ldr	r3, [pc, #216]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011f0:	2204      	movs	r2, #4
 80011f2:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011f4:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011fa:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001200:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001202:	2201      	movs	r2, #1
 8001204:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001206:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120e:	4b2e      	ldr	r3, [pc, #184]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001210:	2200      	movs	r2, #0
 8001212:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001214:	4b2c      	ldr	r3, [pc, #176]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001216:	2200      	movs	r2, #0
 8001218:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800121a:	4b2b      	ldr	r3, [pc, #172]	@ (80012c8 <MX_ADC2_Init+0x120>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001222:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001224:	2200      	movs	r2, #0
 8001226:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001228:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <MX_ADC2_Init+0x120>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001230:	4825      	ldr	r0, [pc, #148]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001232:	f001 fd1b 	bl	8002c6c <HAL_ADC_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC2_Init+0x98>
  {
    Error_Handler();
 800123c:	f000 fc17 	bl	8001a6e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001240:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <MX_ADC2_Init+0x128>)
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001244:	2309      	movs	r3, #9
 8001246:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001248:	2301      	movs	r3, #1
 800124a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800124c:	237f      	movs	r3, #127	@ 0x7f
 800124e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001250:	2304      	movs	r3, #4
 8001252:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigInjected.InjectedOffset = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 800126e:	2384      	movs	r3, #132	@ 0x84
 8001270:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001272:	2380      	movs	r3, #128	@ 0x80
 8001274:	653b      	str	r3, [r7, #80]	@ 0x50
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800127c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001280:	4619      	mov	r1, r3
 8001282:	4811      	ldr	r0, [pc, #68]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001284:	f003 fa12 	bl	80046ac <HAL_ADCEx_InjectedConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 800128e:	f000 fbee 	bl	8001a6e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <MX_ADC2_Init+0x12c>)
 8001294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001296:	2306      	movs	r3, #6
 8001298:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800129e:	237f      	movs	r3, #127	@ 0x7f
 80012a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a2:	2304      	movs	r3, #4
 80012a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4806      	ldr	r0, [pc, #24]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80012b0:	f002 f962 	bl	8003578 <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC2_Init+0x116>
  {
    Error_Handler();
 80012ba:	f000 fbd8 	bl	8001a6e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	3760      	adds	r7, #96	@ 0x60
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200002e0 	.word	0x200002e0
 80012cc:	50000100 	.word	0x50000100
 80012d0:	0c900008 	.word	0x0c900008
 80012d4:	04300002 	.word	0x04300002

080012d8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b09e      	sub	sp, #120	@ 0x78
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	2244      	movs	r2, #68	@ 0x44
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f00e fcb9 	bl	800fc70 <memset>
  if(adcHandle->Instance==ADC1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001306:	d15f      	bne.n	80013c8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001308:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800130c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800130e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001312:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	4618      	mov	r0, r3
 800131a:	f006 f98d 	bl	8007638 <HAL_RCCEx_PeriphCLKConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001324:	f000 fba3 	bl	8001a6e <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001328:	4b4f      	ldr	r3, [pc, #316]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	4a4e      	ldr	r2, [pc, #312]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 8001330:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001332:	4b4d      	ldr	r3, [pc, #308]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10b      	bne.n	8001352 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800133a:	4b4c      	ldr	r3, [pc, #304]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a4b      	ldr	r2, [pc, #300]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001340:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b49      	ldr	r3, [pc, #292]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b46      	ldr	r3, [pc, #280]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4a45      	ldr	r2, [pc, #276]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135e:	4b43      	ldr	r3, [pc, #268]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4b40      	ldr	r3, [pc, #256]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a3f      	ldr	r2, [pc, #252]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b3d      	ldr	r3, [pc, #244]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001382:	2304      	movs	r3, #4
 8001384:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	2303      	movs	r3, #3
 8001388:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001398:	f005 f8b8 	bl	800650c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 800139c:	f241 0302 	movw	r3, #4098	@ 0x1002
 80013a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013ae:	4619      	mov	r1, r3
 80013b0:	482f      	ldr	r0, [pc, #188]	@ (8001470 <HAL_ADC_MspInit+0x198>)
 80013b2:	f005 f8ab 	bl	800650c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2012      	movs	r0, #18
 80013bc:	f004 f9b5 	bl	800572a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013c0:	2012      	movs	r0, #18
 80013c2:	f004 f9cc 	bl	800575e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80013c6:	e04a      	b.n	800145e <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a29      	ldr	r2, [pc, #164]	@ (8001474 <HAL_ADC_MspInit+0x19c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d145      	bne.n	800145e <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013d8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	4618      	mov	r0, r3
 80013e4:	f006 f928 	bl	8007638 <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80013ee:	f000 fb3e 	bl	8001a6e <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d10b      	bne.n	800141c <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001408:	4a18      	ldr	r2, [pc, #96]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800140a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800140e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001410:	4b16      	ldr	r3, [pc, #88]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001414:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001420:	4a12      	ldr	r2, [pc, #72]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001428:	4b10      	ldr	r3, [pc, #64]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8001434:	2341      	movs	r3, #65	@ 0x41
 8001436:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001438:	2303      	movs	r3, #3
 800143a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144a:	f005 f85f 	bl	800650c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2012      	movs	r0, #18
 8001454:	f004 f969 	bl	800572a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001458:	2012      	movs	r0, #18
 800145a:	f004 f980 	bl	800575e <HAL_NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3778      	adds	r7, #120	@ 0x78
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000034c 	.word	0x2000034c
 800146c:	40021000 	.word	0x40021000
 8001470:	48000400 	.word	0x48000400
 8001474:	50000100 	.word	0x50000100

08001478 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_COMP1_Init+0x44>)
 800147e:	4a10      	ldr	r2, [pc, #64]	@ (80014c0 <MX_COMP1_Init+0x48>)
 8001480:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001488:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_COMP1_Init+0x44>)
 800148c:	2240      	movs	r2, #64	@ 0x40
 800148e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001490:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <MX_COMP1_Init+0x44>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_COMP1_Init+0x44>)
 80014a4:	2211      	movs	r2, #17
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_COMP1_Init+0x44>)
 80014aa:	f003 ff41 	bl	8005330 <HAL_COMP_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 80014b4:	f000 fadb 	bl	8001a6e <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000350 	.word	0x20000350
 80014c0:	40010200 	.word	0x40010200

080014c4 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a13      	ldr	r2, [pc, #76]	@ (8001530 <HAL_COMP_MspInit+0x6c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d11f      	bne.n	8001526 <HAL_COMP_MspInit+0x62>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014fe:	2302      	movs	r3, #2
 8001500:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001502:	2303      	movs	r3, #3
 8001504:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	4619      	mov	r1, r3
 8001510:	4809      	ldr	r0, [pc, #36]	@ (8001538 <HAL_COMP_MspInit+0x74>)
 8001512:	f004 fffb 	bl	800650c <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 1, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2101      	movs	r1, #1
 800151a:	2040      	movs	r0, #64	@ 0x40
 800151c:	f004 f905 	bl	800572a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8001520:	2040      	movs	r0, #64	@ 0x40
 8001522:	f004 f91c 	bl	800575e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40010200 	.word	0x40010200
 8001534:	40021000 	.word	0x40021000
 8001538:	48000400 	.word	0x48000400

0800153c <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2230      	movs	r2, #48	@ 0x30
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f00e fb91 	bl	800fc70 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800154e:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001550:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <MX_DAC3_Init+0x70>)
 8001552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001554:	4814      	ldr	r0, [pc, #80]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001556:	f004 f91c 	bl	8005792 <HAL_DAC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001560:	f000 fa85 	bl	8001a6e <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001564:	2302      	movs	r3, #2
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800157c:	2302      	movs	r3, #2
 800157e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001590:	f004 f922 	bl	80057d8 <HAL_DAC_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800159a:	f000 fa68 	bl	8001a6e <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3730      	adds	r7, #48	@ 0x30
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000374 	.word	0x20000374
 80015ac:	50001000 	.word	0x50001000

080015b0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <HAL_DAC_MspInit+0x38>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10b      	bne.n	80015da <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	50001000 	.word	0x50001000
 80015ec:	40021000 	.word	0x40021000

080015f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015f6:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <MX_DMA_Init+0x60>)
 80015f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fa:	4a15      	ldr	r2, [pc, #84]	@ (8001650 <MX_DMA_Init+0x60>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6493      	str	r3, [r2, #72]	@ 0x48
 8001602:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <MX_DMA_Init+0x60>)
 8001604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <MX_DMA_Init+0x60>)
 8001610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001612:	4a0f      	ldr	r2, [pc, #60]	@ (8001650 <MX_DMA_Init+0x60>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6493      	str	r3, [r2, #72]	@ 0x48
 800161a:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <MX_DMA_Init+0x60>)
 800161c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2101      	movs	r1, #1
 800162a:	200b      	movs	r0, #11
 800162c:	f004 f87d 	bl	800572a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001630:	200b      	movs	r0, #11
 8001632:	f004 f894 	bl	800575e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2101      	movs	r1, #1
 800163a:	200c      	movs	r0, #12
 800163c:	f004 f875 	bl	800572a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001640:	200c      	movs	r0, #12
 8001642:	f004 f88c 	bl	800575e <HAL_NVIC_EnableIRQ>

}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001658:	4b1f      	ldr	r3, [pc, #124]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 800165a:	4a20      	ldr	r2, [pc, #128]	@ (80016dc <MX_FDCAN1_Init+0x88>)
 800165c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001664:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800166a:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001672:	2200      	movs	r2, #0
 8001674:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001676:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001678:	2200      	movs	r2, #0
 800167a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800167c:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 800167e:	2200      	movs	r2, #0
 8001680:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001684:	2214      	movs	r2, #20
 8001686:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001688:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 800168a:	2201      	movs	r2, #1
 800168c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001690:	220a      	movs	r2, #10
 8001692:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8001694:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 8001696:	2205      	movs	r2, #5
 8001698:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 800169a:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 800169c:	2214      	movs	r2, #20
 800169e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80016a0:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016a8:	220a      	movs	r2, #10
 80016aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016ae:	2205      	movs	r2, #5
 80016b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 80016b8:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80016c4:	4804      	ldr	r0, [pc, #16]	@ (80016d8 <MX_FDCAN1_Init+0x84>)
 80016c6:	f004 fd71 	bl	80061ac <HAL_FDCAN_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80016d0:	f000 f9cd 	bl	8001a6e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000388 	.word	0x20000388
 80016dc:	40006400 	.word	0x40006400

080016e0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b09a      	sub	sp, #104	@ 0x68
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	2244      	movs	r2, #68	@ 0x44
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f00e fab5 	bl	800fc70 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a20      	ldr	r2, [pc, #128]	@ (800178c <HAL_FDCAN_MspInit+0xac>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d139      	bne.n	8001784 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001714:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001716:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800171a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	4618      	mov	r0, r3
 8001722:	f005 ff89 	bl	8007638 <HAL_RCCEx_PeriphCLKConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800172c:	f000 f99f 	bl	8001a6e <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001730:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001734:	4a16      	ldr	r2, [pc, #88]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 8001736:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800173a:	6593      	str	r3, [r2, #88]	@ 0x58
 800173c:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	4a10      	ldr	r2, [pc, #64]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <HAL_FDCAN_MspInit+0xb0>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001760:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001764:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001772:	2309      	movs	r3, #9
 8001774:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001780:	f004 fec4 	bl	800650c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001784:	bf00      	nop
 8001786:	3768      	adds	r7, #104	@ 0x68
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40006400 	.word	0x40006400
 8001790:	40021000 	.word	0x40021000

08001794 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	4b4a      	ldr	r3, [pc, #296]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	4a49      	ldr	r2, [pc, #292]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b6:	4b47      	ldr	r3, [pc, #284]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c2:	4b44      	ldr	r3, [pc, #272]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	4a43      	ldr	r2, [pc, #268]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017c8:	f043 0320 	orr.w	r3, r3, #32
 80017cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ce:	4b41      	ldr	r3, [pc, #260]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b3e      	ldr	r3, [pc, #248]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	4a3d      	ldr	r2, [pc, #244]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e6:	4b3b      	ldr	r3, [pc, #236]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	4b38      	ldr	r3, [pc, #224]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	4a37      	ldr	r2, [pc, #220]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fe:	4b35      	ldr	r3, [pc, #212]	@ (80018d4 <MX_GPIO_Init+0x140>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	2110      	movs	r1, #16
 800180e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001812:	f005 f815 	bl	8006840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2150      	movs	r1, #80	@ 0x50
 800181a:	482f      	ldr	r0, [pc, #188]	@ (80018d8 <MX_GPIO_Init+0x144>)
 800181c:	f005 f810 	bl	8006840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001826:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182a:	f005 f809 	bl	8006840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001834:	4829      	ldr	r0, [pc, #164]	@ (80018dc <MX_GPIO_Init+0x148>)
 8001836:	f005 f803 	bl	8006840 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11;
 800183a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4822      	ldr	r0, [pc, #136]	@ (80018d8 <MX_GPIO_Init+0x144>)
 8001850:	f004 fe5c 	bl	800650c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001854:	2310      	movs	r3, #16
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001860:	2303      	movs	r3, #3
 8001862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800186e:	f004 fe4d 	bl	800650c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001872:	2350      	movs	r3, #80	@ 0x50
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001876:	2301      	movs	r3, #1
 8001878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	4813      	ldr	r0, [pc, #76]	@ (80018d8 <MX_GPIO_Init+0x144>)
 800188a:	f004 fe3f 	bl	800650c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800188e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	2301      	movs	r3, #1
 8001896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018aa:	f004 fe2f 	bl	800650c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	4805      	ldr	r0, [pc, #20]	@ (80018dc <MX_GPIO_Init+0x148>)
 80018c8:	f004 fe20 	bl	800650c <HAL_GPIO_Init>

}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	@ 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	48000800 	.word	0x48000800
 80018dc:	48000400 	.word	0x48000400

080018e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e4:	f000 feeb 	bl	80026be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e8:	f000 f878 	bl	80019dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ec:	f7ff ff52 	bl	8001794 <MX_GPIO_Init>
  MX_DMA_Init();
 80018f0:	f7ff fe7e 	bl	80015f0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80018f4:	f000 fdb0 	bl	8002458 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80018f8:	f7ff fb9c 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 80018fc:	f7ff fc54 	bl	80011a8 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 8001900:	f000 f8bc 	bl	8001a7c <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001904:	f000 f8e2 	bl	8001acc <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001908:	f000 f908 	bl	8001b1c <MX_OPAMP3_Init>
  MX_TIM1_Init();
 800190c:	f000 fb88 	bl	8002020 <MX_TIM1_Init>
  MX_COMP1_Init();
 8001910:	f7ff fdb2 	bl	8001478 <MX_COMP1_Init>
  MX_DAC3_Init();
 8001914:	f7ff fe12 	bl	800153c <MX_DAC3_Init>
  MX_FDCAN1_Init();
 8001918:	f7ff fe9c 	bl	8001654 <MX_FDCAN1_Init>
  MX_TIM4_Init();
 800191c:	f000 fc74 	bl	8002208 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001920:	f000 f99a 	bl	8001c58 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 8001924:	f00b fc0a 	bl	800d13c <appInit>
  HAL_OPAMP_Start(&hopamp1);
 8001928:	4824      	ldr	r0, [pc, #144]	@ (80019bc <main+0xdc>)
 800192a:	f005 f871 	bl	8006a10 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 800192e:	4824      	ldr	r0, [pc, #144]	@ (80019c0 <main+0xe0>)
 8001930:	f005 f86e 	bl	8006a10 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8001934:	4823      	ldr	r0, [pc, #140]	@ (80019c4 <main+0xe4>)
 8001936:	f005 f86b 	bl	8006a10 <HAL_OPAMP_Start>
  // HAL_UART_Receive_IT(&huart3, (uint8_t *)&aRxBuffer, 1);
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800193a:	2264      	movs	r2, #100	@ 0x64
 800193c:	4922      	ldr	r1, [pc, #136]	@ (80019c8 <main+0xe8>)
 800193e:	4823      	ldr	r0, [pc, #140]	@ (80019cc <main+0xec>)
 8001940:	f009 fefd 	bl	800b73e <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001944:	217f      	movs	r1, #127	@ 0x7f
 8001946:	4822      	ldr	r0, [pc, #136]	@ (80019d0 <main+0xf0>)
 8001948:	f002 fc90 	bl	800426c <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800194c:	217f      	movs	r1, #127	@ 0x7f
 800194e:	4821      	ldr	r0, [pc, #132]	@ (80019d4 <main+0xf4>)
 8001950:	f002 fc8c 	bl	800426c <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 8001954:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <main+0xf0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2220      	movs	r2, #32
 800195a:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 800195c:	4b1c      	ldr	r3, [pc, #112]	@ (80019d0 <main+0xf0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2204      	movs	r2, #4
 8001962:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 8001964:	4b1b      	ldr	r3, [pc, #108]	@ (80019d4 <main+0xf4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2220      	movs	r2, #32
 800196a:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 800196c:	4818      	ldr	r0, [pc, #96]	@ (80019d0 <main+0xf0>)
 800196e:	f002 fd8f 	bl	8004490 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 8001972:	4818      	ldr	r0, [pc, #96]	@ (80019d4 <main+0xf4>)
 8001974:	f002 fcdc 	bl	8004330 <HAL_ADCEx_InjectedStart>

  HAL_TIM_Base_Start(&htim1);
 8001978:	4817      	ldr	r0, [pc, #92]	@ (80019d8 <main+0xf8>)
 800197a:	f006 fce5 	bl	8008348 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800197e:	210c      	movs	r1, #12
 8001980:	4815      	ldr	r0, [pc, #84]	@ (80019d8 <main+0xf8>)
 8001982:	f006 fda5 	bl	80084d0 <HAL_TIM_PWM_Start>
  // HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
  // //  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
  // HAL_COMP_Start(&hcomp1);
  // HAL_TIMEx_HallSensor_Start_IT(&htim4);
  // FDCAN_Config();
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001986:	2100      	movs	r1, #0
 8001988:	4813      	ldr	r0, [pc, #76]	@ (80019d8 <main+0xf8>)
 800198a:	f006 fda1 	bl	80084d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800198e:	2104      	movs	r1, #4
 8001990:	4811      	ldr	r0, [pc, #68]	@ (80019d8 <main+0xf8>)
 8001992:	f006 fd9d 	bl	80084d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001996:	2108      	movs	r1, #8
 8001998:	480f      	ldr	r0, [pc, #60]	@ (80019d8 <main+0xf8>)
 800199a:	f006 fd99 	bl	80084d0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800199e:	2100      	movs	r1, #0
 80019a0:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <main+0xf8>)
 80019a2:	f007 fead 	bl	8009700 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80019a6:	2104      	movs	r1, #4
 80019a8:	480b      	ldr	r0, [pc, #44]	@ (80019d8 <main+0xf8>)
 80019aa:	f007 fea9 	bl	8009700 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80019ae:	2108      	movs	r1, #8
 80019b0:	4809      	ldr	r0, [pc, #36]	@ (80019d8 <main+0xf8>)
 80019b2:	f007 fea5 	bl	8009700 <HAL_TIMEx_PWMN_Start>
    //    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
    //    HAL_Delay(10);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 80019b6:	f00c fa45 	bl	800de44 <userMain>
 80019ba:	e7fc      	b.n	80019b6 <main+0xd6>
 80019bc:	200003ec 	.word	0x200003ec
 80019c0:	20000428 	.word	0x20000428
 80019c4:	20000464 	.word	0x20000464
 80019c8:	200008a4 	.word	0x200008a4
 80019cc:	200005a0 	.word	0x200005a0
 80019d0:	20000274 	.word	0x20000274
 80019d4:	200002e0 	.word	0x200002e0
 80019d8:	20000508 	.word	0x20000508

080019dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b094      	sub	sp, #80	@ 0x50
 80019e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e2:	f107 0318 	add.w	r3, r7, #24
 80019e6:	2238      	movs	r2, #56	@ 0x38
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f00e f940 	bl	800fc70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80019fe:	2000      	movs	r0, #0
 8001a00:	f005 f838 	bl	8006a74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a04:	2301      	movs	r3, #1
 8001a06:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a0c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a12:	2303      	movs	r3, #3
 8001a14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8001a16:	2303      	movs	r3, #3
 8001a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001a1a:	2328      	movs	r3, #40	@ 0x28
 8001a1c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a22:	2302      	movs	r3, #2
 8001a24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a26:	2302      	movs	r3, #2
 8001a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2a:	f107 0318 	add.w	r3, r7, #24
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f005 f8d4 	bl	8006bdc <HAL_RCC_OscConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001a3a:	f000 f818 	bl	8001a6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3e:	230f      	movs	r3, #15
 8001a40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a42:	2303      	movs	r3, #3
 8001a44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2104      	movs	r1, #4
 8001a56:	4618      	mov	r0, r3
 8001a58:	f005 fbd2 	bl	8007200 <HAL_RCC_ClockConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001a62:	f000 f804 	bl	8001a6e <Error_Handler>
  }
}
 8001a66:	bf00      	nop
 8001a68:	3750      	adds	r7, #80	@ 0x50
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a72:	b672      	cpsid	i
}
 8001a74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a76:	bf00      	nop
 8001a78:	e7fd      	b.n	8001a76 <Error_Handler+0x8>
	...

08001a7c <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001a80:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <MX_OPAMP1_Init+0x48>)
 8001a82:	4a11      	ldr	r2, [pc, #68]	@ (8001ac8 <MX_OPAMP1_Init+0x4c>)
 8001a84:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001a86:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <MX_OPAMP1_Init+0x48>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac4 <MX_OPAMP1_Init+0x48>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001a92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <MX_OPAMP1_Init+0x48>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001a98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <MX_OPAMP1_Init+0x48>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <MX_OPAMP1_Init+0x48>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <MX_OPAMP1_Init+0x48>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <MX_OPAMP1_Init+0x48>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001ab0:	4804      	ldr	r0, [pc, #16]	@ (8001ac4 <MX_OPAMP1_Init+0x48>)
 8001ab2:	f004 fedd 	bl	8006870 <HAL_OPAMP_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_OPAMP1_Init+0x44>
  {
    Error_Handler();
 8001abc:	f7ff ffd7 	bl	8001a6e <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200003ec 	.word	0x200003ec
 8001ac8:	40010300 	.word	0x40010300

08001acc <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001ad0:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <MX_OPAMP2_Init+0x48>)
 8001ad2:	4a11      	ldr	r2, [pc, #68]	@ (8001b18 <MX_OPAMP2_Init+0x4c>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <MX_OPAMP2_Init+0x48>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_STANDALONE_MODE;
 8001adc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b14 <MX_OPAMP2_Init+0x48>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <MX_OPAMP2_Init+0x48>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <MX_OPAMP2_Init+0x48>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <MX_OPAMP2_Init+0x48>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001af4:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <MX_OPAMP2_Init+0x48>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <MX_OPAMP2_Init+0x48>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001b00:	4804      	ldr	r0, [pc, #16]	@ (8001b14 <MX_OPAMP2_Init+0x48>)
 8001b02:	f004 feb5 	bl	8006870 <HAL_OPAMP_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_OPAMP2_Init+0x44>
  {
    Error_Handler();
 8001b0c:	f7ff ffaf 	bl	8001a6e <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000428 	.word	0x20000428
 8001b18:	40010304 	.word	0x40010304

08001b1c <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001b20:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <MX_OPAMP3_Init+0x48>)
 8001b22:	4a11      	ldr	r2, [pc, #68]	@ (8001b68 <MX_OPAMP3_Init+0x4c>)
 8001b24:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001b26:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <MX_OPAMP3_Init+0x48>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_STANDALONE_MODE;
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <MX_OPAMP3_Init+0x48>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  hopamp3.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001b32:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <MX_OPAMP3_Init+0x48>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <MX_OPAMP3_Init+0x48>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_OPAMP3_Init+0x48>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <MX_OPAMP3_Init+0x48>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <MX_OPAMP3_Init+0x48>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001b50:	4804      	ldr	r0, [pc, #16]	@ (8001b64 <MX_OPAMP3_Init+0x48>)
 8001b52:	f004 fe8d 	bl	8006870 <HAL_OPAMP_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_OPAMP3_Init+0x44>
  {
    Error_Handler();
 8001b5c:	f7ff ff87 	bl	8001a6e <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000464 	.word	0x20000464
 8001b68:	40010308 	.word	0x40010308

08001b6c <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a2e      	ldr	r2, [pc, #184]	@ (8001c44 <HAL_OPAMP_MspInit+0xd8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d119      	bne.n	8001bc2 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c48 <HAL_OPAMP_MspInit+0xdc>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b92:	4a2d      	ldr	r2, [pc, #180]	@ (8001c48 <HAL_OPAMP_MspInit+0xdc>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c48 <HAL_OPAMP_MspInit+0xdc>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ba6:	230e      	movs	r3, #14
 8001ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001baa:	2303      	movs	r3, #3
 8001bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bbc:	f004 fca6 	bl	800650c <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8001bc0:	e03b      	b.n	8001c3a <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a21      	ldr	r2, [pc, #132]	@ (8001c4c <HAL_OPAMP_MspInit+0xe0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d119      	bne.n	8001c00 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c48 <HAL_OPAMP_MspInit+0xdc>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c48 <HAL_OPAMP_MspInit+0xdc>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <HAL_OPAMP_MspInit+0xdc>)
 8001bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001be4:	23e0      	movs	r3, #224	@ 0xe0
 8001be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be8:	2303      	movs	r3, #3
 8001bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bfa:	f004 fc87 	bl	800650c <HAL_GPIO_Init>
}
 8001bfe:	e01c      	b.n	8001c3a <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <HAL_OPAMP_MspInit+0xe4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d117      	bne.n	8001c3a <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <HAL_OPAMP_MspInit+0xdc>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c48 <HAL_OPAMP_MspInit+0xdc>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c16:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <HAL_OPAMP_MspInit+0xdc>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001c22:	2307      	movs	r3, #7
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c26:	2303      	movs	r3, #3
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	4807      	ldr	r0, [pc, #28]	@ (8001c54 <HAL_OPAMP_MspInit+0xe8>)
 8001c36:	f004 fc69 	bl	800650c <HAL_GPIO_Init>
}
 8001c3a:	bf00      	nop
 8001c3c:	3728      	adds	r7, #40	@ 0x28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40010300 	.word	0x40010300
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010304 	.word	0x40010304
 8001c50:	40010308 	.word	0x40010308
 8001c54:	48000400 	.word	0x48000400

08001c58 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <MX_SPI1_Init+0x74>)
 8001c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd0 <MX_SPI1_Init+0x78>)
 8001c60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <MX_SPI1_Init+0x74>)
 8001c64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c6a:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <MX_SPI1_Init+0x74>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001c70:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <MX_SPI1_Init+0x74>)
 8001c72:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001c76:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c78:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <MX_SPI1_Init+0x74>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c7e:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <MX_SPI1_Init+0x74>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c84:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <MX_SPI1_Init+0x74>)
 8001c86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c8a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <MX_SPI1_Init+0x74>)
 8001c8e:	2218      	movs	r2, #24
 8001c90:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <MX_SPI1_Init+0x74>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <MX_SPI1_Init+0x74>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <MX_SPI1_Init+0x74>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <MX_SPI1_Init+0x74>)
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001caa:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <MX_SPI1_Init+0x74>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <MX_SPI1_Init+0x74>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cb6:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <MX_SPI1_Init+0x74>)
 8001cb8:	f005 feae 	bl	8007a18 <HAL_SPI_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001cc2:	f7ff fed4 	bl	8001a6e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200004a0 	.word	0x200004a0
 8001cd0:	40013000 	.word	0x40013000

08001cd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	@ 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a17      	ldr	r2, [pc, #92]	@ (8001d50 <HAL_SPI_MspInit+0x7c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d127      	bne.n	8001d46 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cf6:	4b17      	ldr	r3, [pc, #92]	@ (8001d54 <HAL_SPI_MspInit+0x80>)
 8001cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cfa:	4a16      	ldr	r2, [pc, #88]	@ (8001d54 <HAL_SPI_MspInit+0x80>)
 8001cfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d00:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d02:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <HAL_SPI_MspInit+0x80>)
 8001d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <HAL_SPI_MspInit+0x80>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d12:	4a10      	ldr	r2, [pc, #64]	@ (8001d54 <HAL_SPI_MspInit+0x80>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <HAL_SPI_MspInit+0x80>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d26:	2338      	movs	r3, #56	@ 0x38
 8001d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d36:	2305      	movs	r3, #5
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4805      	ldr	r0, [pc, #20]	@ (8001d58 <HAL_SPI_MspInit+0x84>)
 8001d42:	f004 fbe3 	bl	800650c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d46:	bf00      	nop
 8001d48:	3728      	adds	r7, #40	@ 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40013000 	.word	0x40013000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	48000400 	.word	0x48000400

08001d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <HAL_MspInit+0x44>)
 8001d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d66:	4a0e      	ldr	r2, [pc, #56]	@ (8001da0 <HAL_MspInit+0x44>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <HAL_MspInit+0x44>)
 8001d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <HAL_MspInit+0x44>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7e:	4a08      	ldr	r2, [pc, #32]	@ (8001da0 <HAL_MspInit+0x44>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d84:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <HAL_MspInit+0x44>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d92:	f004 ff13 	bl	8006bbc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000

08001da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <NMI_Handler+0x4>

08001dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <HardFault_Handler+0x4>

08001db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <MemManage_Handler+0x4>

08001dbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <BusFault_Handler+0x4>

08001dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <UsageFault_Handler+0x4>

08001dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dfa:	f000 fcb3 	bl	8002764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <DMA1_Channel1_IRQHandler+0x10>)
 8001e0a:	f004 f880 	bl	8005f0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000634 	.word	0x20000634

08001e18 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001e1c:	4802      	ldr	r0, [pc, #8]	@ (8001e28 <DMA1_Channel2_IRQHandler+0x10>)
 8001e1e:	f004 f876 	bl	8005f0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000694 	.word	0x20000694

08001e2c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e30:	4803      	ldr	r0, [pc, #12]	@ (8001e40 <ADC1_2_IRQHandler+0x14>)
 8001e32:	f001 f969 	bl	8003108 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001e36:	4803      	ldr	r0, [pc, #12]	@ (8001e44 <ADC1_2_IRQHandler+0x18>)
 8001e38:	f001 f966 	bl	8003108 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000274 	.word	0x20000274
 8001e44:	200002e0 	.word	0x200002e0

08001e48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e4c:	4802      	ldr	r0, [pc, #8]	@ (8001e58 <USART3_IRQHandler+0x10>)
 8001e4e:	f008 f8d3 	bl	8009ff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200005a0 	.word	0x200005a0

08001e5c <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001e60:	4802      	ldr	r0, [pc, #8]	@ (8001e6c <COMP1_2_3_IRQHandler+0x10>)
 8001e62:	f003 fb41 	bl	80054e8 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000350 	.word	0x20000350

08001e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return 1;
 8001e74:	2301      	movs	r3, #1
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_kill>:

int _kill(int pid, int sig)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e8a:	f00d ff55 	bl	800fd38 <__errno>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2216      	movs	r2, #22
 8001e92:	601a      	str	r2, [r3, #0]
  return -1;
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_exit>:

void _exit (int status)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ffe7 	bl	8001e80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eb2:	bf00      	nop
 8001eb4:	e7fd      	b.n	8001eb2 <_exit+0x12>

08001eb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	e00a      	b.n	8001ede <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ec8:	f3af 8000 	nop.w
 8001ecc:	4601      	mov	r1, r0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	60ba      	str	r2, [r7, #8]
 8001ed4:	b2ca      	uxtb	r2, r1
 8001ed6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	dbf0      	blt.n	8001ec8 <_read+0x12>
  }

  return len;
 8001ee6:	687b      	ldr	r3, [r7, #4]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	e009      	b.n	8001f16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	60ba      	str	r2, [r7, #8]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	dbf1      	blt.n	8001f02 <_write+0x12>
  }
  return len;
 8001f1e:	687b      	ldr	r3, [r7, #4]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_close>:

int _close(int file)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f50:	605a      	str	r2, [r3, #4]
  return 0;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_isatty>:

int _isatty(int file)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f68:	2301      	movs	r3, #1
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b085      	sub	sp, #20
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f98:	4a14      	ldr	r2, [pc, #80]	@ (8001fec <_sbrk+0x5c>)
 8001f9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <_sbrk+0x60>)
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa4:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fac:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <_sbrk+0x64>)
 8001fae:	4a12      	ldr	r2, [pc, #72]	@ (8001ff8 <_sbrk+0x68>)
 8001fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <_sbrk+0x64>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d207      	bcs.n	8001fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc0:	f00d feba 	bl	800fd38 <__errno>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295
 8001fce:	e009      	b.n	8001fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd0:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd6:	4b07      	ldr	r3, [pc, #28]	@ (8001ff4 <_sbrk+0x64>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	4a05      	ldr	r2, [pc, #20]	@ (8001ff4 <_sbrk+0x64>)
 8001fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20008000 	.word	0x20008000
 8001ff0:	00000400 	.word	0x00000400
 8001ff4:	20000504 	.word	0x20000504
 8001ff8:	20000ac8 	.word	0x20000ac8

08001ffc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <SystemInit+0x20>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002006:	4a05      	ldr	r2, [pc, #20]	@ (800201c <SystemInit+0x20>)
 8002008:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800200c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b09e      	sub	sp, #120	@ 0x78
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002026:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002034:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002040:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800204c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
 800205c:	615a      	str	r2, [r3, #20]
 800205e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002060:	463b      	mov	r3, r7
 8002062:	2234      	movs	r2, #52	@ 0x34
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f00d fe02 	bl	800fc70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800206c:	4b64      	ldr	r3, [pc, #400]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 800206e:	4a65      	ldr	r2, [pc, #404]	@ (8002204 <MX_TIM1_Init+0x1e4>)
 8002070:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8002072:	4b63      	ldr	r3, [pc, #396]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002078:	4b61      	ldr	r3, [pc, #388]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 800207a:	2220      	movs	r2, #32
 800207c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 800207e:	4b60      	ldr	r3, [pc, #384]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 8002080:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002084:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002086:	4b5e      	ldr	r3, [pc, #376]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 8002088:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800208c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800208e:	4b5c      	ldr	r3, [pc, #368]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 8002090:	2201      	movs	r2, #1
 8002092:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002094:	4b5a      	ldr	r3, [pc, #360]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800209a:	4859      	ldr	r0, [pc, #356]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 800209c:	f006 f8fc 	bl	8008298 <HAL_TIM_Base_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80020a6:	f7ff fce2 	bl	8001a6e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020b0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80020b4:	4619      	mov	r1, r3
 80020b6:	4852      	ldr	r0, [pc, #328]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 80020b8:	f006 fcb4 	bl	8008a24 <HAL_TIM_ConfigClockSource>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80020c2:	f7ff fcd4 	bl	8001a6e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020c6:	484e      	ldr	r0, [pc, #312]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 80020c8:	f006 f9a0 	bl	800840c <HAL_TIM_PWM_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80020d2:	f7ff fccc 	bl	8001a6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80020d6:	2370      	movs	r3, #112	@ 0x70
 80020d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020e2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80020e6:	4619      	mov	r1, r3
 80020e8:	4845      	ldr	r0, [pc, #276]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 80020ea:	f007 fc1b 	bl	8009924 <HAL_TIMEx_MasterConfigSynchronization>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80020f4:	f7ff fcbb 	bl	8001a6e <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80020f8:	2302      	movs	r3, #2
 80020fa:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80020fc:	2301      	movs	r3, #1
 80020fe:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002100:	2300      	movs	r3, #0
 8002102:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002104:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002108:	461a      	mov	r2, r3
 800210a:	2101      	movs	r1, #1
 800210c:	483c      	ldr	r0, [pc, #240]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 800210e:	f007 fd17 	bl	8009b40 <HAL_TIMEx_ConfigBreakInput>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002118:	f7ff fca9 	bl	8001a6e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800211c:	2360      	movs	r3, #96	@ 0x60
 800211e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002124:	2300      	movs	r3, #0
 8002126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002128:	2300      	movs	r3, #0
 800212a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002130:	2300      	movs	r3, #0
 8002132:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002138:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800213c:	2200      	movs	r2, #0
 800213e:	4619      	mov	r1, r3
 8002140:	482f      	ldr	r0, [pc, #188]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 8002142:	f006 fb5b 	bl	80087fc <HAL_TIM_PWM_ConfigChannel>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800214c:	f7ff fc8f 	bl	8001a6e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002150:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002154:	2204      	movs	r2, #4
 8002156:	4619      	mov	r1, r3
 8002158:	4829      	ldr	r0, [pc, #164]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 800215a:	f006 fb4f 	bl	80087fc <HAL_TIM_PWM_ConfigChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8002164:	f7ff fc83 	bl	8001a6e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002168:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800216c:	2208      	movs	r2, #8
 800216e:	4619      	mov	r1, r3
 8002170:	4823      	ldr	r0, [pc, #140]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 8002172:	f006 fb43 	bl	80087fc <HAL_TIM_PWM_ConfigChannel>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 800217c:	f7ff fc77 	bl	8001a6e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002180:	2370      	movs	r3, #112	@ 0x70
 8002182:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 7998;
 8002184:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8002188:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800218a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800218e:	220c      	movs	r2, #12
 8002190:	4619      	mov	r1, r3
 8002192:	481b      	ldr	r0, [pc, #108]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 8002194:	f006 fb32 	bl	80087fc <HAL_TIM_PWM_ConfigChannel>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 800219e:	f7ff fc66 	bl	8001a6e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 120;
 80021ae:	2378      	movs	r3, #120	@ 0x78
 80021b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80021b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 2;
 80021be:	2302      	movs	r3, #2
 80021c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021dc:	463b      	mov	r3, r7
 80021de:	4619      	mov	r1, r3
 80021e0:	4807      	ldr	r0, [pc, #28]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 80021e2:	f007 fc21 	bl	8009a28 <HAL_TIMEx_ConfigBreakDeadTime>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM1_Init+0x1d0>
  {
    Error_Handler();
 80021ec:	f7ff fc3f 	bl	8001a6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021f0:	4803      	ldr	r0, [pc, #12]	@ (8002200 <MX_TIM1_Init+0x1e0>)
 80021f2:	f000 f8c9 	bl	8002388 <HAL_TIM_MspPostInit>

}
 80021f6:	bf00      	nop
 80021f8:	3778      	adds	r7, #120	@ 0x78
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000508 	.word	0x20000508
 8002204:	40012c00 	.word	0x40012c00

08002208 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08c      	sub	sp, #48	@ 0x30
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800220e:	f107 0320 	add.w	r3, r7, #32
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 800221c:	f107 0310 	add.w	r3, r7, #16
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002234:	4b26      	ldr	r3, [pc, #152]	@ (80022d0 <MX_TIM4_Init+0xc8>)
 8002236:	4a27      	ldr	r2, [pc, #156]	@ (80022d4 <MX_TIM4_Init+0xcc>)
 8002238:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800223a:	4b25      	ldr	r3, [pc, #148]	@ (80022d0 <MX_TIM4_Init+0xc8>)
 800223c:	220f      	movs	r2, #15
 800223e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002240:	4b23      	ldr	r3, [pc, #140]	@ (80022d0 <MX_TIM4_Init+0xc8>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002246:	4b22      	ldr	r3, [pc, #136]	@ (80022d0 <MX_TIM4_Init+0xc8>)
 8002248:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800224c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224e:	4b20      	ldr	r3, [pc, #128]	@ (80022d0 <MX_TIM4_Init+0xc8>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002254:	4b1e      	ldr	r3, [pc, #120]	@ (80022d0 <MX_TIM4_Init+0xc8>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800225a:	481d      	ldr	r0, [pc, #116]	@ (80022d0 <MX_TIM4_Init+0xc8>)
 800225c:	f006 f81c 	bl	8008298 <HAL_TIM_Base_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8002266:	f7ff fc02 	bl	8001a6e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800226e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002270:	f107 0320 	add.w	r3, r7, #32
 8002274:	4619      	mov	r1, r3
 8002276:	4816      	ldr	r0, [pc, #88]	@ (80022d0 <MX_TIM4_Init+0xc8>)
 8002278:	f006 fbd4 	bl	8008a24 <HAL_TIM_ConfigClockSource>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002282:	f7ff fbf4 	bl	8001a6e <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 10;
 800228e:	230a      	movs	r3, #10
 8002290:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 5;
 8002292:	2305      	movs	r3, #5
 8002294:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 8002296:	f107 0310 	add.w	r3, r7, #16
 800229a:	4619      	mov	r1, r3
 800229c:	480c      	ldr	r0, [pc, #48]	@ (80022d0 <MX_TIM4_Init+0xc8>)
 800229e:	f007 f976 	bl	800958e <HAL_TIMEx_HallSensor_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 80022a8:	f7ff fbe1 	bl	8001a6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80022ac:	2350      	movs	r3, #80	@ 0x50
 80022ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	4619      	mov	r1, r3
 80022b8:	4805      	ldr	r0, [pc, #20]	@ (80022d0 <MX_TIM4_Init+0xc8>)
 80022ba:	f007 fb33 	bl	8009924 <HAL_TIMEx_MasterConfigSynchronization>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 80022c4:	f7ff fbd3 	bl	8001a6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80022c8:	bf00      	nop
 80022ca:	3730      	adds	r7, #48	@ 0x30
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000554 	.word	0x20000554
 80022d4:	40000800 	.word	0x40000800

080022d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	@ 0x28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a20      	ldr	r2, [pc, #128]	@ (8002378 <HAL_TIM_Base_MspInit+0xa0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10c      	bne.n	8002314 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022fa:	4b20      	ldr	r3, [pc, #128]	@ (800237c <HAL_TIM_Base_MspInit+0xa4>)
 80022fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fe:	4a1f      	ldr	r2, [pc, #124]	@ (800237c <HAL_TIM_Base_MspInit+0xa4>)
 8002300:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002304:	6613      	str	r3, [r2, #96]	@ 0x60
 8002306:	4b1d      	ldr	r3, [pc, #116]	@ (800237c <HAL_TIM_Base_MspInit+0xa4>)
 8002308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002312:	e02d      	b.n	8002370 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM4)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a19      	ldr	r2, [pc, #100]	@ (8002380 <HAL_TIM_Base_MspInit+0xa8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d128      	bne.n	8002370 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800231e:	4b17      	ldr	r3, [pc, #92]	@ (800237c <HAL_TIM_Base_MspInit+0xa4>)
 8002320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002322:	4a16      	ldr	r2, [pc, #88]	@ (800237c <HAL_TIM_Base_MspInit+0xa4>)
 8002324:	f043 0304 	orr.w	r3, r3, #4
 8002328:	6593      	str	r3, [r2, #88]	@ 0x58
 800232a:	4b14      	ldr	r3, [pc, #80]	@ (800237c <HAL_TIM_Base_MspInit+0xa4>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	4b11      	ldr	r3, [pc, #68]	@ (800237c <HAL_TIM_Base_MspInit+0xa4>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233a:	4a10      	ldr	r2, [pc, #64]	@ (800237c <HAL_TIM_Base_MspInit+0xa4>)
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002342:	4b0e      	ldr	r3, [pc, #56]	@ (800237c <HAL_TIM_Base_MspInit+0xa4>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800234e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002360:	2302      	movs	r3, #2
 8002362:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	4619      	mov	r1, r3
 800236a:	4806      	ldr	r0, [pc, #24]	@ (8002384 <HAL_TIM_Base_MspInit+0xac>)
 800236c:	f004 f8ce 	bl	800650c <HAL_GPIO_Init>
}
 8002370:	bf00      	nop
 8002372:	3728      	adds	r7, #40	@ 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40012c00 	.word	0x40012c00
 800237c:	40021000 	.word	0x40021000
 8002380:	40000800 	.word	0x40000800
 8002384:	48000400 	.word	0x48000400

08002388 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	@ 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a29      	ldr	r2, [pc, #164]	@ (800244c <HAL_TIM_MspPostInit+0xc4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d14b      	bne.n	8002442 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023aa:	4b29      	ldr	r3, [pc, #164]	@ (8002450 <HAL_TIM_MspPostInit+0xc8>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ae:	4a28      	ldr	r2, [pc, #160]	@ (8002450 <HAL_TIM_MspPostInit+0xc8>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023b6:	4b26      	ldr	r3, [pc, #152]	@ (8002450 <HAL_TIM_MspPostInit+0xc8>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	4b23      	ldr	r3, [pc, #140]	@ (8002450 <HAL_TIM_MspPostInit+0xc8>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c6:	4a22      	ldr	r2, [pc, #136]	@ (8002450 <HAL_TIM_MspPostInit+0xc8>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ce:	4b20      	ldr	r3, [pc, #128]	@ (8002450 <HAL_TIM_MspPostInit+0xc8>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80023da:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80023de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	2300      	movs	r3, #0
 80023ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80023ec:	2306      	movs	r3, #6
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	4619      	mov	r1, r3
 80023f6:	4817      	ldr	r0, [pc, #92]	@ (8002454 <HAL_TIM_MspPostInit+0xcc>)
 80023f8:	f004 f888 	bl	800650c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800240e:	2304      	movs	r3, #4
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	480e      	ldr	r0, [pc, #56]	@ (8002454 <HAL_TIM_MspPostInit+0xcc>)
 800241a:	f004 f877 	bl	800650c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800241e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002430:	2306      	movs	r3, #6
 8002432:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	4619      	mov	r1, r3
 800243a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800243e:	f004 f865 	bl	800650c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002442:	bf00      	nop
 8002444:	3728      	adds	r7, #40	@ 0x28
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40012c00 	.word	0x40012c00
 8002450:	40021000 	.word	0x40021000
 8002454:	48000400 	.word	0x48000400

08002458 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800245c:	4b22      	ldr	r3, [pc, #136]	@ (80024e8 <MX_USART3_UART_Init+0x90>)
 800245e:	4a23      	ldr	r2, [pc, #140]	@ (80024ec <MX_USART3_UART_Init+0x94>)
 8002460:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002462:	4b21      	ldr	r3, [pc, #132]	@ (80024e8 <MX_USART3_UART_Init+0x90>)
 8002464:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002468:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800246a:	4b1f      	ldr	r3, [pc, #124]	@ (80024e8 <MX_USART3_UART_Init+0x90>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002470:	4b1d      	ldr	r3, [pc, #116]	@ (80024e8 <MX_USART3_UART_Init+0x90>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002476:	4b1c      	ldr	r3, [pc, #112]	@ (80024e8 <MX_USART3_UART_Init+0x90>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800247c:	4b1a      	ldr	r3, [pc, #104]	@ (80024e8 <MX_USART3_UART_Init+0x90>)
 800247e:	220c      	movs	r2, #12
 8002480:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002482:	4b19      	ldr	r3, [pc, #100]	@ (80024e8 <MX_USART3_UART_Init+0x90>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002488:	4b17      	ldr	r3, [pc, #92]	@ (80024e8 <MX_USART3_UART_Init+0x90>)
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800248e:	4b16      	ldr	r3, [pc, #88]	@ (80024e8 <MX_USART3_UART_Init+0x90>)
 8002490:	2200      	movs	r2, #0
 8002492:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002494:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <MX_USART3_UART_Init+0x90>)
 8002496:	2200      	movs	r2, #0
 8002498:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800249a:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <MX_USART3_UART_Init+0x90>)
 800249c:	2200      	movs	r2, #0
 800249e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024a0:	4811      	ldr	r0, [pc, #68]	@ (80024e8 <MX_USART3_UART_Init+0x90>)
 80024a2:	f007 fc4a 	bl	8009d3a <HAL_UART_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80024ac:	f7ff fadf 	bl	8001a6e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024b0:	2100      	movs	r1, #0
 80024b2:	480d      	ldr	r0, [pc, #52]	@ (80024e8 <MX_USART3_UART_Init+0x90>)
 80024b4:	f009 f8c7 	bl	800b646 <HAL_UARTEx_SetTxFifoThreshold>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80024be:	f7ff fad6 	bl	8001a6e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024c2:	2100      	movs	r1, #0
 80024c4:	4808      	ldr	r0, [pc, #32]	@ (80024e8 <MX_USART3_UART_Init+0x90>)
 80024c6:	f009 f8fc 	bl	800b6c2 <HAL_UARTEx_SetRxFifoThreshold>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80024d0:	f7ff facd 	bl	8001a6e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80024d4:	4804      	ldr	r0, [pc, #16]	@ (80024e8 <MX_USART3_UART_Init+0x90>)
 80024d6:	f009 f87d 	bl	800b5d4 <HAL_UARTEx_DisableFifoMode>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80024e0:	f7ff fac5 	bl	8001a6e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200005a0 	.word	0x200005a0
 80024ec:	40004800 	.word	0x40004800

080024f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b09a      	sub	sp, #104	@ 0x68
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002508:	f107 0310 	add.w	r3, r7, #16
 800250c:	2244      	movs	r2, #68	@ 0x44
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f00d fbad 	bl	800fc70 <memset>
  if(uartHandle->Instance==USART3)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a4d      	ldr	r2, [pc, #308]	@ (8002650 <HAL_UART_MspInit+0x160>)
 800251c:	4293      	cmp	r3, r2
 800251e:	f040 8092 	bne.w	8002646 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002522:	2304      	movs	r3, #4
 8002524:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800252a:	f107 0310 	add.w	r3, r7, #16
 800252e:	4618      	mov	r0, r3
 8002530:	f005 f882 	bl	8007638 <HAL_RCCEx_PeriphCLKConfig>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800253a:	f7ff fa98 	bl	8001a6e <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800253e:	4b45      	ldr	r3, [pc, #276]	@ (8002654 <HAL_UART_MspInit+0x164>)
 8002540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002542:	4a44      	ldr	r2, [pc, #272]	@ (8002654 <HAL_UART_MspInit+0x164>)
 8002544:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002548:	6593      	str	r3, [r2, #88]	@ 0x58
 800254a:	4b42      	ldr	r3, [pc, #264]	@ (8002654 <HAL_UART_MspInit+0x164>)
 800254c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	4b3f      	ldr	r3, [pc, #252]	@ (8002654 <HAL_UART_MspInit+0x164>)
 8002558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255a:	4a3e      	ldr	r2, [pc, #248]	@ (8002654 <HAL_UART_MspInit+0x164>)
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002562:	4b3c      	ldr	r3, [pc, #240]	@ (8002654 <HAL_UART_MspInit+0x164>)
 8002564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800256e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002572:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	2300      	movs	r3, #0
 800257e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002580:	2307      	movs	r3, #7
 8002582:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002584:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002588:	4619      	mov	r1, r3
 800258a:	4833      	ldr	r0, [pc, #204]	@ (8002658 <HAL_UART_MspInit+0x168>)
 800258c:	f003 ffbe 	bl	800650c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 8002590:	4b32      	ldr	r3, [pc, #200]	@ (800265c <HAL_UART_MspInit+0x16c>)
 8002592:	4a33      	ldr	r2, [pc, #204]	@ (8002660 <HAL_UART_MspInit+0x170>)
 8002594:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002596:	4b31      	ldr	r3, [pc, #196]	@ (800265c <HAL_UART_MspInit+0x16c>)
 8002598:	221d      	movs	r2, #29
 800259a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800259c:	4b2f      	ldr	r3, [pc, #188]	@ (800265c <HAL_UART_MspInit+0x16c>)
 800259e:	2210      	movs	r2, #16
 80025a0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025a2:	4b2e      	ldr	r3, [pc, #184]	@ (800265c <HAL_UART_MspInit+0x16c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025a8:	4b2c      	ldr	r3, [pc, #176]	@ (800265c <HAL_UART_MspInit+0x16c>)
 80025aa:	2280      	movs	r2, #128	@ 0x80
 80025ac:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025ae:	4b2b      	ldr	r3, [pc, #172]	@ (800265c <HAL_UART_MspInit+0x16c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025b4:	4b29      	ldr	r3, [pc, #164]	@ (800265c <HAL_UART_MspInit+0x16c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80025ba:	4b28      	ldr	r3, [pc, #160]	@ (800265c <HAL_UART_MspInit+0x16c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025c0:	4b26      	ldr	r3, [pc, #152]	@ (800265c <HAL_UART_MspInit+0x16c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80025c6:	4825      	ldr	r0, [pc, #148]	@ (800265c <HAL_UART_MspInit+0x16c>)
 80025c8:	f003 fabe 	bl	8005b48 <HAL_DMA_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80025d2:	f7ff fa4c 	bl	8001a6e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a20      	ldr	r2, [pc, #128]	@ (800265c <HAL_UART_MspInit+0x16c>)
 80025da:	67da      	str	r2, [r3, #124]	@ 0x7c
 80025dc:	4a1f      	ldr	r2, [pc, #124]	@ (800265c <HAL_UART_MspInit+0x16c>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel2;
 80025e2:	4b20      	ldr	r3, [pc, #128]	@ (8002664 <HAL_UART_MspInit+0x174>)
 80025e4:	4a20      	ldr	r2, [pc, #128]	@ (8002668 <HAL_UART_MspInit+0x178>)
 80025e6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80025e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002664 <HAL_UART_MspInit+0x174>)
 80025ea:	221c      	movs	r2, #28
 80025ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <HAL_UART_MspInit+0x174>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_UART_MspInit+0x174>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002664 <HAL_UART_MspInit+0x174>)
 80025fc:	2280      	movs	r2, #128	@ 0x80
 80025fe:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002600:	4b18      	ldr	r3, [pc, #96]	@ (8002664 <HAL_UART_MspInit+0x174>)
 8002602:	2200      	movs	r2, #0
 8002604:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002606:	4b17      	ldr	r3, [pc, #92]	@ (8002664 <HAL_UART_MspInit+0x174>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800260c:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <HAL_UART_MspInit+0x174>)
 800260e:	2200      	movs	r2, #0
 8002610:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002612:	4b14      	ldr	r3, [pc, #80]	@ (8002664 <HAL_UART_MspInit+0x174>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002618:	4812      	ldr	r0, [pc, #72]	@ (8002664 <HAL_UART_MspInit+0x174>)
 800261a:	f003 fa95 	bl	8005b48 <HAL_DMA_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8002624:	f7ff fa23 	bl	8001a6e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a0e      	ldr	r2, [pc, #56]	@ (8002664 <HAL_UART_MspInit+0x174>)
 800262c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002630:	4a0c      	ldr	r2, [pc, #48]	@ (8002664 <HAL_UART_MspInit+0x174>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2101      	movs	r1, #1
 800263a:	2027      	movs	r0, #39	@ 0x27
 800263c:	f003 f875 	bl	800572a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002640:	2027      	movs	r0, #39	@ 0x27
 8002642:	f003 f88c 	bl	800575e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002646:	bf00      	nop
 8002648:	3768      	adds	r7, #104	@ 0x68
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40004800 	.word	0x40004800
 8002654:	40021000 	.word	0x40021000
 8002658:	48000400 	.word	0x48000400
 800265c:	20000634 	.word	0x20000634
 8002660:	40020008 	.word	0x40020008
 8002664:	20000694 	.word	0x20000694
 8002668:	4002001c 	.word	0x4002001c

0800266c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800266c:	480d      	ldr	r0, [pc, #52]	@ (80026a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800266e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002670:	f7ff fcc4 	bl	8001ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002674:	480c      	ldr	r0, [pc, #48]	@ (80026a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002676:	490d      	ldr	r1, [pc, #52]	@ (80026ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002678:	4a0d      	ldr	r2, [pc, #52]	@ (80026b0 <LoopForever+0xe>)
  movs r3, #0
 800267a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800267c:	e002      	b.n	8002684 <LoopCopyDataInit>

0800267e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800267e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002682:	3304      	adds	r3, #4

08002684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002688:	d3f9      	bcc.n	800267e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268a:	4a0a      	ldr	r2, [pc, #40]	@ (80026b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800268c:	4c0a      	ldr	r4, [pc, #40]	@ (80026b8 <LoopForever+0x16>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002690:	e001      	b.n	8002696 <LoopFillZerobss>

08002692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002694:	3204      	adds	r2, #4

08002696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002698:	d3fb      	bcc.n	8002692 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800269a:	f00d fb53 	bl	800fd44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800269e:	f7ff f91f 	bl	80018e0 <main>

080026a2 <LoopForever>:

LoopForever:
    b LoopForever
 80026a2:	e7fe      	b.n	80026a2 <LoopForever>
  ldr   r0, =_estack
 80026a4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80026a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ac:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 80026b0:	08013040 	.word	0x08013040
  ldr r2, =_sbss
 80026b4:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80026b8:	20000ac8 	.word	0x20000ac8

080026bc <COMP4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026bc:	e7fe      	b.n	80026bc <COMP4_IRQHandler>

080026be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c8:	2003      	movs	r0, #3
 80026ca:	f003 f823 	bl	8005714 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026ce:	200f      	movs	r0, #15
 80026d0:	f000 f80e 	bl	80026f0 <HAL_InitTick>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	71fb      	strb	r3, [r7, #7]
 80026de:	e001      	b.n	80026e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026e0:	f7ff fb3c 	bl	8001d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026e4:	79fb      	ldrb	r3, [r7, #7]

}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026fc:	4b16      	ldr	r3, [pc, #88]	@ (8002758 <HAL_InitTick+0x68>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d022      	beq.n	800274a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002704:	4b15      	ldr	r3, [pc, #84]	@ (800275c <HAL_InitTick+0x6c>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b13      	ldr	r3, [pc, #76]	@ (8002758 <HAL_InitTick+0x68>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002710:	fbb1 f3f3 	udiv	r3, r1, r3
 8002714:	fbb2 f3f3 	udiv	r3, r2, r3
 8002718:	4618      	mov	r0, r3
 800271a:	f003 f82e 	bl	800577a <HAL_SYSTICK_Config>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10f      	bne.n	8002744 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b0f      	cmp	r3, #15
 8002728:	d809      	bhi.n	800273e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800272a:	2200      	movs	r2, #0
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	f04f 30ff 	mov.w	r0, #4294967295
 8002732:	f002 fffa 	bl	800572a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002736:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <HAL_InitTick+0x70>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e007      	b.n	800274e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
 8002742:	e004      	b.n	800274e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	e001      	b.n	800274e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800274e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000008 	.word	0x20000008
 800275c:	20000000 	.word	0x20000000
 8002760:	20000004 	.word	0x20000004

08002764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002768:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_IncTick+0x1c>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b05      	ldr	r3, [pc, #20]	@ (8002784 <HAL_IncTick+0x20>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4413      	add	r3, r2
 8002772:	4a03      	ldr	r2, [pc, #12]	@ (8002780 <HAL_IncTick+0x1c>)
 8002774:	6013      	str	r3, [r2, #0]
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	200006f4 	.word	0x200006f4
 8002784:	20000008 	.word	0x20000008

08002788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return uwTick;
 800278c:	4b03      	ldr	r3, [pc, #12]	@ (800279c <HAL_GetTick+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	200006f4 	.word	0x200006f4

080027a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	609a      	str	r2, [r3, #8]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	609a      	str	r2, [r3, #8]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3360      	adds	r3, #96	@ 0x60
 800281a:	461a      	mov	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b08      	ldr	r3, [pc, #32]	@ (800284c <LL_ADC_SetOffset+0x44>)
 800282a:	4013      	ands	r3, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	4313      	orrs	r3, r2
 8002838:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002840:	bf00      	nop
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	03fff000 	.word	0x03fff000

08002850 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3360      	adds	r3, #96	@ 0x60
 800285e:	461a      	mov	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3360      	adds	r3, #96	@ 0x60
 800288c:	461a      	mov	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028a6:	bf00      	nop
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b087      	sub	sp, #28
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	3360      	adds	r3, #96	@ 0x60
 80028c2:	461a      	mov	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80028dc:	bf00      	nop
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3360      	adds	r3, #96	@ 0x60
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	431a      	orrs	r2, r3
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	615a      	str	r2, [r3, #20]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800296a:	b480      	push	{r7}
 800296c:	b087      	sub	sp, #28
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3330      	adds	r3, #48	@ 0x30
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	4413      	add	r3, r2
 8002988:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	211f      	movs	r1, #31
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	401a      	ands	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	0e9b      	lsrs	r3, r3, #26
 80029a2:	f003 011f 	and.w	r1, r3, #31
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	431a      	orrs	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ce:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3314      	adds	r3, #20
 80029f8:	461a      	mov	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	0e5b      	lsrs	r3, r3, #25
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	4413      	add	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	0d1b      	lsrs	r3, r3, #20
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2107      	movs	r1, #7
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	0d1b      	lsrs	r3, r3, #20
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f003 0318 	and.w	r3, r3, #24
 8002a62:	4908      	ldr	r1, [pc, #32]	@ (8002a84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a64:	40d9      	lsrs	r1, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	400b      	ands	r3, r1
 8002a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	0007ffff 	.word	0x0007ffff

08002a88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 031f 	and.w	r3, r3, #31
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002ad0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6093      	str	r3, [r2, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002af4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002af8:	d101      	bne.n	8002afe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b20:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b48:	d101      	bne.n	8002b4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b70:	f043 0201 	orr.w	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b98:	f043 0202 	orr.w	r2, r3, #2
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <LL_ADC_IsEnabled+0x18>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <LL_ADC_IsEnabled+0x1a>
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d101      	bne.n	8002bea <LL_ADC_IsDisableOngoing+0x18>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <LL_ADC_IsDisableOngoing+0x1a>
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c0c:	f043 0204 	orr.w	r2, r3, #4
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d101      	bne.n	8002c38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d101      	bne.n	8002c5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b089      	sub	sp, #36	@ 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e167      	b.n	8002f56 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7fe fb1f 	bl	80012d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff19 	bl	8002ae4 <LL_ADC_IsDeepPowerDownEnabled>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d004      	beq.n	8002cc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff feff 	bl	8002ac0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ff34 	bl	8002b34 <LL_ADC_IsInternalRegulatorEnabled>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d115      	bne.n	8002cfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff18 	bl	8002b0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cdc:	4ba0      	ldr	r3, [pc, #640]	@ (8002f60 <HAL_ADC_Init+0x2f4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	4aa0      	ldr	r2, [pc, #640]	@ (8002f64 <HAL_ADC_Init+0x2f8>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cf0:	e002      	b.n	8002cf8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f9      	bne.n	8002cf2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff ff16 	bl	8002b34 <LL_ADC_IsInternalRegulatorEnabled>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10d      	bne.n	8002d2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d12:	f043 0210 	orr.w	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1e:	f043 0201 	orr.w	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff ff76 	bl	8002c20 <LL_ADC_REG_IsConversionOngoing>
 8002d34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 8100 	bne.w	8002f44 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f040 80fc 	bne.w	8002f44 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d50:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d54:	f043 0202 	orr.w	r2, r3, #2
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff23 	bl	8002bac <LL_ADC_IsEnabled>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d111      	bne.n	8002d90 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d6c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d70:	f7ff ff1c 	bl	8002bac <LL_ADC_IsEnabled>
 8002d74:	4604      	mov	r4, r0
 8002d76:	487c      	ldr	r0, [pc, #496]	@ (8002f68 <HAL_ADC_Init+0x2fc>)
 8002d78:	f7ff ff18 	bl	8002bac <LL_ADC_IsEnabled>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	4323      	orrs	r3, r4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d105      	bne.n	8002d90 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4878      	ldr	r0, [pc, #480]	@ (8002f6c <HAL_ADC_Init+0x300>)
 8002d8c:	f7ff fd08 	bl	80027a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	7f5b      	ldrb	r3, [r3, #29]
 8002d94:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d9a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002da0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002da6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dae:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d106      	bne.n	8002dcc <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	045b      	lsls	r3, r3, #17
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d009      	beq.n	8002de8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	4b60      	ldr	r3, [pc, #384]	@ (8002f70 <HAL_ADC_Init+0x304>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	69b9      	ldr	r1, [r7, #24]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff15 	bl	8002c46 <LL_ADC_INJ_IsConversionOngoing>
 8002e1c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d16d      	bne.n	8002f00 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d16a      	bne.n	8002f00 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e2e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e36:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e46:	f023 0302 	bic.w	r3, r3, #2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	69b9      	ldr	r1, [r7, #24]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d017      	beq.n	8002e8c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e6a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e74:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6911      	ldr	r1, [r2, #16]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002e8a:	e013      	b.n	8002eb4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002e9a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002eac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eb0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d118      	bne.n	8002ef0 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ed4:	4311      	orrs	r1, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002eda:	4311      	orrs	r1, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	611a      	str	r2, [r3, #16]
 8002eee:	e007      	b.n	8002f00 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d10c      	bne.n	8002f22 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	f023 010f 	bic.w	r1, r3, #15
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	1e5a      	subs	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f20:	e007      	b.n	8002f32 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 020f 	bic.w	r2, r2, #15
 8002f30:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f36:	f023 0303 	bic.w	r3, r3, #3
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f42:	e007      	b.n	8002f54 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f48:	f043 0210 	orr.w	r2, r3, #16
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f54:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3724      	adds	r7, #36	@ 0x24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd90      	pop	{r4, r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000000 	.word	0x20000000
 8002f64:	053e2d63 	.word	0x053e2d63
 8002f68:	50000100 	.word	0x50000100
 8002f6c:	50000300 	.word	0x50000300
 8002f70:	fff04007 	.word	0xfff04007

08002f74 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f7c:	4859      	ldr	r0, [pc, #356]	@ (80030e4 <HAL_ADC_Start+0x170>)
 8002f7e:	f7ff fd83 	bl	8002a88 <LL_ADC_GetMultimode>
 8002f82:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fe49 	bl	8002c20 <LL_ADC_REG_IsConversionOngoing>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f040 809f 	bne.w	80030d4 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_ADC_Start+0x30>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e09a      	b.n	80030da <HAL_ADC_Start+0x166>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fed3 	bl	8003d58 <ADC_Enable>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f040 8086 	bne.w	80030ca <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a44      	ldr	r2, [pc, #272]	@ (80030e8 <HAL_ADC_Start+0x174>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d002      	beq.n	8002fe2 <HAL_ADC_Start+0x6e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	e001      	b.n	8002fe6 <HAL_ADC_Start+0x72>
 8002fe2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d002      	beq.n	8002ff4 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d105      	bne.n	8003000 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003004:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300c:	d106      	bne.n	800301c <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003012:	f023 0206 	bic.w	r2, r3, #6
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	661a      	str	r2, [r3, #96]	@ 0x60
 800301a:	e002      	b.n	8003022 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	221c      	movs	r2, #28
 8003028:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a2c      	ldr	r2, [pc, #176]	@ (80030e8 <HAL_ADC_Start+0x174>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d002      	beq.n	8003042 <HAL_ADC_Start+0xce>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	e001      	b.n	8003046 <HAL_ADC_Start+0xd2>
 8003042:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	4293      	cmp	r3, r2
 800304c:	d008      	beq.n	8003060 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b05      	cmp	r3, #5
 8003058:	d002      	beq.n	8003060 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b09      	cmp	r3, #9
 800305e:	d114      	bne.n	800308a <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d007      	beq.n	800307e <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003072:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003076:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fdb8 	bl	8002bf8 <LL_ADC_REG_StartConversion>
 8003088:	e026      	b.n	80030d8 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a13      	ldr	r2, [pc, #76]	@ (80030e8 <HAL_ADC_Start+0x174>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d002      	beq.n	80030a6 <HAL_ADC_Start+0x132>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	e001      	b.n	80030aa <HAL_ADC_Start+0x136>
 80030a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030aa:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00f      	beq.n	80030d8 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030c0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030c8:	e006      	b.n	80030d8 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80030d2:	e001      	b.n	80030d8 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
 80030d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	50000300 	.word	0x50000300
 80030e8:	50000100 	.word	0x50000100

080030ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	@ 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003124:	4883      	ldr	r0, [pc, #524]	@ (8003334 <HAL_ADC_IRQHandler+0x22c>)
 8003126:	f7ff fcaf 	bl	8002a88 <LL_ADC_GetMultimode>
 800312a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d017      	beq.n	8003166 <HAL_ADC_IRQHandler+0x5e>
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d012      	beq.n	8003166 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003150:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f001 fa9d 	bl	8004698 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2202      	movs	r2, #2
 8003164:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d004      	beq.n	800317a <HAL_ADC_IRQHandler+0x72>
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10a      	bne.n	8003190 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8085 	beq.w	8003290 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d07f      	beq.n	8003290 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fbc9 	bl	8002944 <LL_ADC_REG_IsTriggerSourceSWStart>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d064      	beq.n	8003282 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a5e      	ldr	r2, [pc, #376]	@ (8003338 <HAL_ADC_IRQHandler+0x230>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d002      	beq.n	80031c8 <HAL_ADC_IRQHandler+0xc0>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	e001      	b.n	80031cc <HAL_ADC_IRQHandler+0xc4>
 80031c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d008      	beq.n	80031e6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b05      	cmp	r3, #5
 80031de:	d002      	beq.n	80031e6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b09      	cmp	r3, #9
 80031e4:	d104      	bne.n	80031f0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	623b      	str	r3, [r7, #32]
 80031ee:	e00d      	b.n	800320c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a50      	ldr	r2, [pc, #320]	@ (8003338 <HAL_ADC_IRQHandler+0x230>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d002      	beq.n	8003200 <HAL_ADC_IRQHandler+0xf8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	e001      	b.n	8003204 <HAL_ADC_IRQHandler+0xfc>
 8003200:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003204:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d135      	bne.n	8003282 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b08      	cmp	r3, #8
 8003222:	d12e      	bne.n	8003282 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fcf9 	bl	8002c20 <LL_ADC_REG_IsConversionOngoing>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d11a      	bne.n	800326a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 020c 	bic.w	r2, r2, #12
 8003242:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003248:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003254:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d112      	bne.n	8003282 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003268:	e00b      	b.n	8003282 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326e:	f043 0210 	orr.w	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327a:	f043 0201 	orr.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f95a 	bl	800353c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	220c      	movs	r2, #12
 800328e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b00      	cmp	r3, #0
 8003298:	d004      	beq.n	80032a4 <HAL_ADC_IRQHandler+0x19c>
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10b      	bne.n	80032bc <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 809e 	beq.w	80033ec <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8098 	beq.w	80033ec <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d105      	bne.n	80032d4 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032cc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fb72 	bl	80029c2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80032de:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fb2d 	bl	8002944 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032ea:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a11      	ldr	r2, [pc, #68]	@ (8003338 <HAL_ADC_IRQHandler+0x230>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d002      	beq.n	80032fc <HAL_ADC_IRQHandler+0x1f4>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	e001      	b.n	8003300 <HAL_ADC_IRQHandler+0x1f8>
 80032fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	4293      	cmp	r3, r2
 8003306:	d008      	beq.n	800331a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b06      	cmp	r3, #6
 8003312:	d002      	beq.n	800331a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b07      	cmp	r3, #7
 8003318:	d104      	bne.n	8003324 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	623b      	str	r3, [r7, #32]
 8003322:	e011      	b.n	8003348 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a03      	ldr	r2, [pc, #12]	@ (8003338 <HAL_ADC_IRQHandler+0x230>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d006      	beq.n	800333c <HAL_ADC_IRQHandler+0x234>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	e005      	b.n	8003340 <HAL_ADC_IRQHandler+0x238>
 8003334:	50000300 	.word	0x50000300
 8003338:	50000100 	.word	0x50000100
 800333c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003340:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d047      	beq.n	80033de <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d007      	beq.n	8003368 <HAL_ADC_IRQHandler+0x260>
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d03f      	beq.n	80033de <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003364:	2b00      	cmp	r3, #0
 8003366:	d13a      	bne.n	80033de <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003372:	2b40      	cmp	r3, #64	@ 0x40
 8003374:	d133      	bne.n	80033de <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d12e      	bne.n	80033de <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fc5e 	bl	8002c46 <LL_ADC_INJ_IsConversionOngoing>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d11a      	bne.n	80033c6 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800339e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d112      	bne.n	80033de <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033bc:	f043 0201 	orr.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80033c4:	e00b      	b.n	80033de <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ca:	f043 0210 	orr.w	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f00a f822 	bl	800d428 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2260      	movs	r2, #96	@ 0x60
 80033ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d011      	beq.n	800341a <HAL_ADC_IRQHandler+0x312>
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00c      	beq.n	800341a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f89f 	bl	8003550 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2280      	movs	r2, #128	@ 0x80
 8003418:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	d012      	beq.n	800344a <HAL_ADC_IRQHandler+0x342>
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00d      	beq.n	800344a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003432:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f001 f918 	bl	8004670 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003448:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003450:	2b00      	cmp	r3, #0
 8003452:	d012      	beq.n	800347a <HAL_ADC_IRQHandler+0x372>
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00d      	beq.n	800347a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003462:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f001 f90a 	bl	8004684 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003478:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b00      	cmp	r3, #0
 8003482:	d036      	beq.n	80034f2 <HAL_ADC_IRQHandler+0x3ea>
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	d031      	beq.n	80034f2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d102      	bne.n	800349c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003496:	2301      	movs	r3, #1
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24
 800349a:	e014      	b.n	80034c6 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80034a2:	4825      	ldr	r0, [pc, #148]	@ (8003538 <HAL_ADC_IRQHandler+0x430>)
 80034a4:	f7ff fafe 	bl	8002aa4 <LL_ADC_GetMultiDMATransfer>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80034ae:	2301      	movs	r3, #1
 80034b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b2:	e008      	b.n	80034c6 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80034c2:	2301      	movs	r3, #1
 80034c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d10e      	bne.n	80034ea <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034dc:	f043 0202 	orr.w	r2, r3, #2
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f83d 	bl	8003564 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2210      	movs	r2, #16
 80034f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d018      	beq.n	800352e <HAL_ADC_IRQHandler+0x426>
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003502:	2b00      	cmp	r3, #0
 8003504:	d013      	beq.n	800352e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003516:	f043 0208 	orr.w	r2, r3, #8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003526:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f001 f897 	bl	800465c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800352e:	bf00      	nop
 8003530:	3728      	adds	r7, #40	@ 0x28
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	50000300 	.word	0x50000300

0800353c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b0b6      	sub	sp, #216	@ 0xd8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_ADC_ConfigChannel+0x22>
 8003596:	2302      	movs	r3, #2
 8003598:	e3c8      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x7b4>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fb3a 	bl	8002c20 <LL_ADC_REG_IsConversionOngoing>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 83ad 	bne.w	8003d0e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	6859      	ldr	r1, [r3, #4]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	f7ff f9d2 	bl	800296a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fb28 	bl	8002c20 <LL_ADC_REG_IsConversionOngoing>
 80035d0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fb34 	bl	8002c46 <LL_ADC_INJ_IsConversionOngoing>
 80035de:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 81d9 	bne.w	800399e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f040 81d4 	bne.w	800399e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035fe:	d10f      	bne.n	8003620 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2200      	movs	r2, #0
 800360a:	4619      	mov	r1, r3
 800360c:	f7ff f9ec 	bl	80029e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff f980 	bl	800291e <LL_ADC_SetSamplingTimeCommonConfig>
 800361e:	e00e      	b.n	800363e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6819      	ldr	r1, [r3, #0]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	461a      	mov	r2, r3
 800362e:	f7ff f9db 	bl	80029e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff f970 	bl	800291e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	695a      	ldr	r2, [r3, #20]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	08db      	lsrs	r3, r3, #3
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b04      	cmp	r3, #4
 800365e:	d022      	beq.n	80036a6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	6919      	ldr	r1, [r3, #16]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003670:	f7ff f8ca 	bl	8002808 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6919      	ldr	r1, [r3, #16]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	461a      	mov	r2, r3
 8003682:	f7ff f916 	bl	80028b2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003692:	2b01      	cmp	r3, #1
 8003694:	d102      	bne.n	800369c <HAL_ADC_ConfigChannel+0x124>
 8003696:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800369a:	e000      	b.n	800369e <HAL_ADC_ConfigChannel+0x126>
 800369c:	2300      	movs	r3, #0
 800369e:	461a      	mov	r2, r3
 80036a0:	f7ff f922 	bl	80028e8 <LL_ADC_SetOffsetSaturation>
 80036a4:	e17b      	b.n	800399e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff f8cf 	bl	8002850 <LL_ADC_GetOffsetChannel>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x15a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff f8c4 	bl	8002850 <LL_ADC_GetOffsetChannel>
 80036c8:	4603      	mov	r3, r0
 80036ca:	0e9b      	lsrs	r3, r3, #26
 80036cc:	f003 021f 	and.w	r2, r3, #31
 80036d0:	e01e      	b.n	8003710 <HAL_ADC_ConfigChannel+0x198>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2100      	movs	r1, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff f8b9 	bl	8002850 <LL_ADC_GetOffsetChannel>
 80036de:	4603      	mov	r3, r0
 80036e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80036f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003700:	2320      	movs	r3, #32
 8003702:	e004      	b.n	800370e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003704:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003718:	2b00      	cmp	r3, #0
 800371a:	d105      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x1b0>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	0e9b      	lsrs	r3, r3, #26
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	e018      	b.n	800375a <HAL_ADC_ConfigChannel+0x1e2>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800373c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003740:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003744:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800374c:	2320      	movs	r3, #32
 800374e:	e004      	b.n	800375a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003750:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800375a:	429a      	cmp	r2, r3
 800375c:	d106      	bne.n	800376c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2200      	movs	r2, #0
 8003764:	2100      	movs	r1, #0
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff f888 	bl	800287c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2101      	movs	r1, #1
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff f86c 	bl	8002850 <LL_ADC_GetOffsetChannel>
 8003778:	4603      	mov	r3, r0
 800377a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x220>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2101      	movs	r1, #1
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff f861 	bl	8002850 <LL_ADC_GetOffsetChannel>
 800378e:	4603      	mov	r3, r0
 8003790:	0e9b      	lsrs	r3, r3, #26
 8003792:	f003 021f 	and.w	r2, r3, #31
 8003796:	e01e      	b.n	80037d6 <HAL_ADC_ConfigChannel+0x25e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2101      	movs	r1, #1
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff f856 	bl	8002850 <LL_ADC_GetOffsetChannel>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80037b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80037be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80037c6:	2320      	movs	r3, #32
 80037c8:	e004      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80037ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80037ce:	fab3 f383 	clz	r3, r3
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d105      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x276>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	0e9b      	lsrs	r3, r3, #26
 80037e8:	f003 031f 	and.w	r3, r3, #31
 80037ec:	e018      	b.n	8003820 <HAL_ADC_ConfigChannel+0x2a8>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037fa:	fa93 f3a3 	rbit	r3, r3
 80037fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003802:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003806:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800380a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003812:	2320      	movs	r3, #32
 8003814:	e004      	b.n	8003820 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003816:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800381a:	fab3 f383 	clz	r3, r3
 800381e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003820:	429a      	cmp	r2, r3
 8003822:	d106      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2200      	movs	r2, #0
 800382a:	2101      	movs	r1, #1
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff f825 	bl	800287c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2102      	movs	r1, #2
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff f809 	bl	8002850 <LL_ADC_GetOffsetChannel>
 800383e:	4603      	mov	r3, r0
 8003840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10a      	bne.n	800385e <HAL_ADC_ConfigChannel+0x2e6>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2102      	movs	r1, #2
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe fffe 	bl	8002850 <LL_ADC_GetOffsetChannel>
 8003854:	4603      	mov	r3, r0
 8003856:	0e9b      	lsrs	r3, r3, #26
 8003858:	f003 021f 	and.w	r2, r3, #31
 800385c:	e01e      	b.n	800389c <HAL_ADC_ConfigChannel+0x324>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2102      	movs	r1, #2
 8003864:	4618      	mov	r0, r3
 8003866:	f7fe fff3 	bl	8002850 <LL_ADC_GetOffsetChannel>
 800386a:	4603      	mov	r3, r0
 800386c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003874:	fa93 f3a3 	rbit	r3, r3
 8003878:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800387c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003880:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003884:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800388c:	2320      	movs	r3, #32
 800388e:	e004      	b.n	800389a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003890:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003894:	fab3 f383 	clz	r3, r3
 8003898:	b2db      	uxtb	r3, r3
 800389a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d105      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x33c>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	0e9b      	lsrs	r3, r3, #26
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	e016      	b.n	80038e2 <HAL_ADC_ConfigChannel+0x36a>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038c0:	fa93 f3a3 	rbit	r3, r3
 80038c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80038c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80038cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80038d4:	2320      	movs	r3, #32
 80038d6:	e004      	b.n	80038e2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80038d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038dc:	fab3 f383 	clz	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d106      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2200      	movs	r2, #0
 80038ec:	2102      	movs	r1, #2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe ffc4 	bl	800287c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2103      	movs	r1, #3
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe ffa8 	bl	8002850 <LL_ADC_GetOffsetChannel>
 8003900:	4603      	mov	r3, r0
 8003902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10a      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x3a8>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2103      	movs	r1, #3
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe ff9d 	bl	8002850 <LL_ADC_GetOffsetChannel>
 8003916:	4603      	mov	r3, r0
 8003918:	0e9b      	lsrs	r3, r3, #26
 800391a:	f003 021f 	and.w	r2, r3, #31
 800391e:	e017      	b.n	8003950 <HAL_ADC_ConfigChannel+0x3d8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2103      	movs	r1, #3
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe ff92 	bl	8002850 <LL_ADC_GetOffsetChannel>
 800392c:	4603      	mov	r3, r0
 800392e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003932:	fa93 f3a3 	rbit	r3, r3
 8003936:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003938:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800393a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800393c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003942:	2320      	movs	r3, #32
 8003944:	e003      	b.n	800394e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003946:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003948:	fab3 f383 	clz	r3, r3
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003958:	2b00      	cmp	r3, #0
 800395a:	d105      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x3f0>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0e9b      	lsrs	r3, r3, #26
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	e011      	b.n	800398c <HAL_ADC_ConfigChannel+0x414>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003976:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003978:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800397a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003980:	2320      	movs	r3, #32
 8003982:	e003      	b.n	800398c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003984:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800398c:	429a      	cmp	r2, r3
 800398e:	d106      	bne.n	800399e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2200      	movs	r2, #0
 8003996:	2103      	movs	r1, #3
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe ff6f 	bl	800287c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff f902 	bl	8002bac <LL_ADC_IsEnabled>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f040 8140 	bne.w	8003c30 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	6819      	ldr	r1, [r3, #0]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	461a      	mov	r2, r3
 80039be:	f7ff f83f 	bl	8002a40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	4a8f      	ldr	r2, [pc, #572]	@ (8003c04 <HAL_ADC_ConfigChannel+0x68c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	f040 8131 	bne.w	8003c30 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10b      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x47e>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	0e9b      	lsrs	r3, r3, #26
 80039e4:	3301      	adds	r3, #1
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	2b09      	cmp	r3, #9
 80039ec:	bf94      	ite	ls
 80039ee:	2301      	movls	r3, #1
 80039f0:	2300      	movhi	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	e019      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x4b2>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039fe:	fa93 f3a3 	rbit	r3, r3
 8003a02:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003a04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a06:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003a08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003a0e:	2320      	movs	r3, #32
 8003a10:	e003      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003a12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a14:	fab3 f383 	clz	r3, r3
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	2b09      	cmp	r3, #9
 8003a22:	bf94      	ite	ls
 8003a24:	2301      	movls	r3, #1
 8003a26:	2300      	movhi	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d079      	beq.n	8003b22 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d107      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x4d2>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	0e9b      	lsrs	r3, r3, #26
 8003a40:	3301      	adds	r3, #1
 8003a42:	069b      	lsls	r3, r3, #26
 8003a44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a48:	e015      	b.n	8003a76 <HAL_ADC_ConfigChannel+0x4fe>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a5a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003a62:	2320      	movs	r3, #32
 8003a64:	e003      	b.n	8003a6e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a68:	fab3 f383 	clz	r3, r3
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	069b      	lsls	r3, r3, #26
 8003a72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x51e>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	0e9b      	lsrs	r3, r3, #26
 8003a88:	3301      	adds	r3, #1
 8003a8a:	f003 031f 	and.w	r3, r3, #31
 8003a8e:	2101      	movs	r1, #1
 8003a90:	fa01 f303 	lsl.w	r3, r1, r3
 8003a94:	e017      	b.n	8003ac6 <HAL_ADC_ConfigChannel+0x54e>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003aa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003aae:	2320      	movs	r3, #32
 8003ab0:	e003      	b.n	8003aba <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003ab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ab4:	fab3 f383 	clz	r3, r3
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac6:	ea42 0103 	orr.w	r1, r2, r3
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x574>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	0e9b      	lsrs	r3, r3, #26
 8003adc:	3301      	adds	r3, #1
 8003ade:	f003 021f 	and.w	r2, r3, #31
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	4413      	add	r3, r2
 8003ae8:	051b      	lsls	r3, r3, #20
 8003aea:	e018      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x5a6>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af4:	fa93 f3a3 	rbit	r3, r3
 8003af8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003b04:	2320      	movs	r3, #32
 8003b06:	e003      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b0a:	fab3 f383 	clz	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	3301      	adds	r3, #1
 8003b12:	f003 021f 	and.w	r2, r3, #31
 8003b16:	4613      	mov	r3, r2
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	4413      	add	r3, r2
 8003b1c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	e081      	b.n	8003c26 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d107      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x5c6>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	0e9b      	lsrs	r3, r3, #26
 8003b34:	3301      	adds	r3, #1
 8003b36:	069b      	lsls	r3, r3, #26
 8003b38:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b3c:	e015      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x5f2>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b46:	fa93 f3a3 	rbit	r3, r3
 8003b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003b56:	2320      	movs	r3, #32
 8003b58:	e003      	b.n	8003b62 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5c:	fab3 f383 	clz	r3, r3
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	3301      	adds	r3, #1
 8003b64:	069b      	lsls	r3, r3, #26
 8003b66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x612>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	0e9b      	lsrs	r3, r3, #26
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2101      	movs	r1, #1
 8003b84:	fa01 f303 	lsl.w	r3, r1, r3
 8003b88:	e017      	b.n	8003bba <HAL_ADC_ConfigChannel+0x642>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	fa93 f3a3 	rbit	r3, r3
 8003b96:	61fb      	str	r3, [r7, #28]
  return result;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003ba2:	2320      	movs	r3, #32
 8003ba4:	e003      	b.n	8003bae <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	fab3 f383 	clz	r3, r3
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	ea42 0103 	orr.w	r1, r2, r3
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10d      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x66e>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	0e9b      	lsrs	r3, r3, #26
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	f003 021f 	and.w	r2, r3, #31
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	3b1e      	subs	r3, #30
 8003bde:	051b      	lsls	r3, r3, #20
 8003be0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003be4:	e01e      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x6ac>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	fa93 f3a3 	rbit	r3, r3
 8003bf2:	613b      	str	r3, [r7, #16]
  return result;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d104      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003bfe:	2320      	movs	r3, #32
 8003c00:	e006      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x698>
 8003c02:	bf00      	nop
 8003c04:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	fab3 f383 	clz	r3, r3
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	3301      	adds	r3, #1
 8003c12:	f003 021f 	and.w	r2, r3, #31
 8003c16:	4613      	mov	r3, r2
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3b1e      	subs	r3, #30
 8003c1e:	051b      	lsls	r3, r3, #20
 8003c20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c24:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	f7fe fedc 	bl	80029e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4b3f      	ldr	r3, [pc, #252]	@ (8003d34 <HAL_ADC_ConfigChannel+0x7bc>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d071      	beq.n	8003d20 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c3c:	483e      	ldr	r0, [pc, #248]	@ (8003d38 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c3e:	f7fe fdd5 	bl	80027ec <LL_ADC_GetCommonPathInternalCh>
 8003c42:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a3c      	ldr	r2, [pc, #240]	@ (8003d3c <HAL_ADC_ConfigChannel+0x7c4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d004      	beq.n	8003c5a <HAL_ADC_ConfigChannel+0x6e2>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a3a      	ldr	r2, [pc, #232]	@ (8003d40 <HAL_ADC_ConfigChannel+0x7c8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d127      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d121      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c6e:	d157      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c78:	4619      	mov	r1, r3
 8003c7a:	482f      	ldr	r0, [pc, #188]	@ (8003d38 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c7c:	f7fe fda3 	bl	80027c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c80:	4b30      	ldr	r3, [pc, #192]	@ (8003d44 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	099b      	lsrs	r3, r3, #6
 8003c86:	4a30      	ldr	r2, [pc, #192]	@ (8003d48 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	099b      	lsrs	r3, r3, #6
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	4613      	mov	r3, r2
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	4413      	add	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c9a:	e002      	b.n	8003ca2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f9      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ca8:	e03a      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a27      	ldr	r2, [pc, #156]	@ (8003d4c <HAL_ADC_ConfigChannel+0x7d4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d113      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10d      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a22      	ldr	r2, [pc, #136]	@ (8003d50 <HAL_ADC_ConfigChannel+0x7d8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d02a      	beq.n	8003d20 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4818      	ldr	r0, [pc, #96]	@ (8003d38 <HAL_ADC_ConfigChannel+0x7c0>)
 8003cd6:	f7fe fd76 	bl	80027c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cda:	e021      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d54 <HAL_ADC_ConfigChannel+0x7dc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d11c      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ce6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d116      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a16      	ldr	r2, [pc, #88]	@ (8003d50 <HAL_ADC_ConfigChannel+0x7d8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d011      	beq.n	8003d20 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d04:	4619      	mov	r1, r3
 8003d06:	480c      	ldr	r0, [pc, #48]	@ (8003d38 <HAL_ADC_ConfigChannel+0x7c0>)
 8003d08:	f7fe fd5d 	bl	80027c6 <LL_ADC_SetCommonPathInternalCh>
 8003d0c:	e008      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d12:	f043 0220 	orr.w	r2, r3, #32
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d28:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	37d8      	adds	r7, #216	@ 0xd8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	80080000 	.word	0x80080000
 8003d38:	50000300 	.word	0x50000300
 8003d3c:	c3210000 	.word	0xc3210000
 8003d40:	90c00010 	.word	0x90c00010
 8003d44:	20000000 	.word	0x20000000
 8003d48:	053e2d63 	.word	0x053e2d63
 8003d4c:	c7520000 	.word	0xc7520000
 8003d50:	50000100 	.word	0x50000100
 8003d54:	cb840000 	.word	0xcb840000

08003d58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fe ff1f 	bl	8002bac <LL_ADC_IsEnabled>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d169      	bne.n	8003e48 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	4b36      	ldr	r3, [pc, #216]	@ (8003e54 <ADC_Enable+0xfc>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00d      	beq.n	8003d9e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d86:	f043 0210 	orr.w	r2, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d92:	f043 0201 	orr.w	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e055      	b.n	8003e4a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe feda 	bl	8002b5c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003da8:	482b      	ldr	r0, [pc, #172]	@ (8003e58 <ADC_Enable+0x100>)
 8003daa:	f7fe fd1f 	bl	80027ec <LL_ADC_GetCommonPathInternalCh>
 8003dae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003db0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d013      	beq.n	8003de0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003db8:	4b28      	ldr	r3, [pc, #160]	@ (8003e5c <ADC_Enable+0x104>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	099b      	lsrs	r3, r3, #6
 8003dbe:	4a28      	ldr	r2, [pc, #160]	@ (8003e60 <ADC_Enable+0x108>)
 8003dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc4:	099b      	lsrs	r3, r3, #6
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	4613      	mov	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003dd2:	e002      	b.n	8003dda <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f9      	bne.n	8003dd4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003de0:	f7fe fcd2 	bl	8002788 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003de6:	e028      	b.n	8003e3a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fe fedd 	bl	8002bac <LL_ADC_IsEnabled>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d104      	bne.n	8003e02 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fe fead 	bl	8002b5c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e02:	f7fe fcc1 	bl	8002788 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d914      	bls.n	8003e3a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d00d      	beq.n	8003e3a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e22:	f043 0210 	orr.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e007      	b.n	8003e4a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d1cf      	bne.n	8003de8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	8000003f 	.word	0x8000003f
 8003e58:	50000300 	.word	0x50000300
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	053e2d63 	.word	0x053e2d63

08003e64 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fe feae 	bl	8002bd2 <LL_ADC_IsDisableOngoing>
 8003e76:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fe fe95 	bl	8002bac <LL_ADC_IsEnabled>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d047      	beq.n	8003f18 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d144      	bne.n	8003f18 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 030d 	and.w	r3, r3, #13
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d10c      	bne.n	8003eb6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe fe6f 	bl	8002b84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2203      	movs	r2, #3
 8003eac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003eae:	f7fe fc6b 	bl	8002788 <HAL_GetTick>
 8003eb2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003eb4:	e029      	b.n	8003f0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eba:	f043 0210 	orr.w	r2, r3, #16
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec6:	f043 0201 	orr.w	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e023      	b.n	8003f1a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ed2:	f7fe fc59 	bl	8002788 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d914      	bls.n	8003f0a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef2:	f043 0210 	orr.w	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003efe:	f043 0201 	orr.w	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e007      	b.n	8003f1a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1dc      	bne.n	8003ed2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <LL_ADC_SetCommonPathInternalCh>:
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <LL_ADC_GetCommonPathInternalCh>:
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <LL_ADC_SetOffset>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3360      	adds	r3, #96	@ 0x60
 8003f76:	461a      	mov	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	4b08      	ldr	r3, [pc, #32]	@ (8003fa8 <LL_ADC_SetOffset+0x44>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	601a      	str	r2, [r3, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	03fff000 	.word	0x03fff000

08003fac <LL_ADC_GetOffsetChannel>:
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3360      	adds	r3, #96	@ 0x60
 8003fba:	461a      	mov	r2, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <LL_ADC_SetOffsetState>:
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3360      	adds	r3, #96	@ 0x60
 8003fe8:	461a      	mov	r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	601a      	str	r2, [r3, #0]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <LL_ADC_SetOffsetSign>:
{
 800400e:	b480      	push	{r7}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3360      	adds	r3, #96	@ 0x60
 800401e:	461a      	mov	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	431a      	orrs	r2, r3
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	601a      	str	r2, [r3, #0]
}
 8004038:	bf00      	nop
 800403a:	371c      	adds	r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <LL_ADC_SetOffsetSaturation>:
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3360      	adds	r3, #96	@ 0x60
 8004054:	461a      	mov	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	431a      	orrs	r2, r3
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	601a      	str	r2, [r3, #0]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <LL_ADC_SetSamplingTimeCommonConfig>:
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	615a      	str	r2, [r3, #20]
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <LL_ADC_INJ_GetTrigAuto>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <LL_ADC_SetChannelSamplingTime>:
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3314      	adds	r3, #20
 80040cc:	461a      	mov	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	0e5b      	lsrs	r3, r3, #25
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	4413      	add	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	0d1b      	lsrs	r3, r3, #20
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	2107      	movs	r1, #7
 80040ea:	fa01 f303 	lsl.w	r3, r1, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	401a      	ands	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	0d1b      	lsrs	r3, r3, #20
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	431a      	orrs	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	601a      	str	r2, [r3, #0]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <LL_ADC_SetChannelSingleDiff>:
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412c:	43db      	mvns	r3, r3
 800412e:	401a      	ands	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f003 0318 	and.w	r3, r3, #24
 8004136:	4908      	ldr	r1, [pc, #32]	@ (8004158 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004138:	40d9      	lsrs	r1, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	400b      	ands	r3, r1
 800413e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004142:	431a      	orrs	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 800414a:	bf00      	nop
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	0007ffff 	.word	0x0007ffff

0800415c <LL_ADC_GetMultimode>:
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 031f 	and.w	r3, r3, #31
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_ADC_IsEnabled>:
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <LL_ADC_IsEnabled+0x18>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <LL_ADC_IsEnabled+0x1a>
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <LL_ADC_StartCalibration>:
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80041b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	609a      	str	r2, [r3, #8]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <LL_ADC_IsCalibrationOnGoing>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041e4:	d101      	bne.n	80041ea <LL_ADC_IsCalibrationOnGoing+0x1a>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <LL_ADC_IsCalibrationOnGoing+0x1c>
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_ADC_REG_IsConversionOngoing>:
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b04      	cmp	r3, #4
 800420a:	d101      	bne.n	8004210 <LL_ADC_REG_IsConversionOngoing+0x18>
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <LL_ADC_INJ_StartConversion>:
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800422e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004232:	f043 0208 	orr.w	r2, r3, #8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	609a      	str	r2, [r3, #8]
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <LL_ADC_INJ_IsConversionOngoing>:
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b08      	cmp	r3, #8
 8004258:	d101      	bne.n	800425e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004276:	2300      	movs	r3, #0
 8004278:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <HAL_ADCEx_Calibration_Start+0x1c>
 8004284:	2302      	movs	r3, #2
 8004286:	e04d      	b.n	8004324 <HAL_ADCEx_Calibration_Start+0xb8>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff fde7 	bl	8003e64 <ADC_Disable>
 8004296:	4603      	mov	r3, r0
 8004298:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d136      	bne.n	800430e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80042a8:	f023 0302 	bic.w	r3, r3, #2
 80042ac:	f043 0202 	orr.w	r2, r3, #2
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6839      	ldr	r1, [r7, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff ff6f 	bl	800419e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80042c0:	e014      	b.n	80042ec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	3301      	adds	r3, #1
 80042c6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4a18      	ldr	r2, [pc, #96]	@ (800432c <HAL_ADCEx_Calibration_Start+0xc0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d90d      	bls.n	80042ec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d4:	f023 0312 	bic.w	r3, r3, #18
 80042d8:	f043 0210 	orr.w	r2, r3, #16
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e01b      	b.n	8004324 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff ff6d 	bl	80041d0 <LL_ADC_IsCalibrationOnGoing>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e2      	bne.n	80042c2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004300:	f023 0303 	bic.w	r3, r3, #3
 8004304:	f043 0201 	orr.w	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800430c:	e005      	b.n	800431a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004312:	f043 0210 	orr.w	r2, r3, #16
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004322:	7bfb      	ldrb	r3, [r7, #15]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	0004de01 	.word	0x0004de01

08004330 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004338:	4853      	ldr	r0, [pc, #332]	@ (8004488 <HAL_ADCEx_InjectedStart+0x158>)
 800433a:	f7ff ff0f 	bl	800415c <LL_ADC_GetMultimode>
 800433e:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff ff7e 	bl	8004246 <LL_ADC_INJ_IsConversionOngoing>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8004350:	2302      	movs	r3, #2
 8004352:	e094      	b.n	800447e <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800435e:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004366:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10a      	bne.n	8004384 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d107      	bne.n	8004384 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004378:	f043 0220 	orr.w	r2, r3, #32
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e07c      	b.n	800447e <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_ADCEx_InjectedStart+0x62>
 800438e:	2302      	movs	r3, #2
 8004390:	e075      	b.n	800447e <HAL_ADCEx_InjectedStart+0x14e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff fcdc 	bl	8003d58 <ADC_Enable>
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d164      	bne.n	8004474 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d006      	beq.n	80043c4 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ba:	f023 0208 	bic.w	r2, r3, #8
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	661a      	str	r2, [r3, #96]	@ 0x60
 80043c2:	e002      	b.n	80043ca <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80043d2:	f023 0301 	bic.w	r3, r3, #1
 80043d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a2a      	ldr	r2, [pc, #168]	@ (800448c <HAL_ADCEx_InjectedStart+0x15c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d002      	beq.n	80043ee <HAL_ADCEx_InjectedStart+0xbe>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	e001      	b.n	80043f2 <HAL_ADCEx_InjectedStart+0xc2>
 80043ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6812      	ldr	r2, [r2, #0]
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d002      	beq.n	8004400 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d105      	bne.n	800440c <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004404:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2260      	movs	r2, #96	@ 0x60
 8004412:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1a      	ldr	r2, [pc, #104]	@ (800448c <HAL_ADCEx_InjectedStart+0x15c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d002      	beq.n	800442c <HAL_ADCEx_InjectedStart+0xfc>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	e001      	b.n	8004430 <HAL_ADCEx_InjectedStart+0x100>
 800442c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	4293      	cmp	r3, r2
 8004436:	d008      	beq.n	800444a <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b06      	cmp	r3, #6
 8004442:	d002      	beq.n	800444a <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2b07      	cmp	r3, #7
 8004448:	d10d      	bne.n	8004466 <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fe26 	bl	80040a0 <LL_ADC_INJ_GetTrigAuto>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d110      	bne.n	800447c <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fedd 	bl	800421e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004464:	e00a      	b.n	800447c <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800446a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004472:	e003      	b.n	800447c <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	50000300 	.word	0x50000300
 800448c:	50000100 	.word	0x50000100

08004490 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004498:	486e      	ldr	r0, [pc, #440]	@ (8004654 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 800449a:	f7ff fe5f 	bl	800415c <LL_ADC_GetMultimode>
 800449e:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff fece 	bl	8004246 <LL_ADC_INJ_IsConversionOngoing>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 80044b0:	2302      	movs	r3, #2
 80044b2:	e0ca      	b.n	800464a <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044be:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d107      	bne.n	80044e4 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0b2      	b.n	800464a <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_ADCEx_InjectedStart_IT+0x62>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e0ab      	b.n	800464a <HAL_ADCEx_InjectedStart_IT+0x1ba>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff fc2c 	bl	8003d58 <ADC_Enable>
 8004500:	4603      	mov	r3, r0
 8004502:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b00      	cmp	r3, #0
 8004508:	f040 809a 	bne.w	8004640 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d006      	beq.n	8004526 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451c:	f023 0208 	bic.w	r2, r3, #8
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	661a      	str	r2, [r3, #96]	@ 0x60
 8004524:	e002      	b.n	800452c <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004530:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a44      	ldr	r2, [pc, #272]	@ (8004658 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d002      	beq.n	8004550 <HAL_ADCEx_InjectedStart_IT+0xc0>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	e001      	b.n	8004554 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8004550:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	4293      	cmp	r3, r2
 800455a:	d002      	beq.n	8004562 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d105      	bne.n	800456e <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004566:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2260      	movs	r2, #96	@ 0x60
 8004574:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800459a:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d110      	bne.n	80045c6 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0220 	bic.w	r2, r2, #32
 80045b2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045c2:	605a      	str	r2, [r3, #4]
          break;
 80045c4:	e010      	b.n	80045e8 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045d4:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f042 0220 	orr.w	r2, r2, #32
 80045e4:	605a      	str	r2, [r3, #4]
          break;
 80045e6:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004658 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d002      	beq.n	80045f8 <HAL_ADCEx_InjectedStart_IT+0x168>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	e001      	b.n	80045fc <HAL_ADCEx_InjectedStart_IT+0x16c>
 80045f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	4293      	cmp	r3, r2
 8004602:	d008      	beq.n	8004616 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b06      	cmp	r3, #6
 800460e:	d002      	beq.n	8004616 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2b07      	cmp	r3, #7
 8004614:	d10d      	bne.n	8004632 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fd40 	bl	80040a0 <LL_ADC_INJ_GetTrigAuto>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d110      	bne.n	8004648 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff fdf7 	bl	800421e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004630:	e00a      	b.n	8004648 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004636:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800463e:	e003      	b.n	8004648 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004648:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	50000300 	.word	0x50000300
 8004658:	50000100 	.word	0x50000100

0800465c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b0b6      	sub	sp, #216	@ 0xd8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d102      	bne.n	80046d6 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80046d0:	2302      	movs	r3, #2
 80046d2:	f000 bcb5 	b.w	8005040 <HAL_ADCEx_InjectedConfigChannel+0x994>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d130      	bne.n	8004750 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b09      	cmp	r3, #9
 80046f4:	d179      	bne.n	80047ea <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d010      	beq.n	8004720 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	0e9b      	lsrs	r3, r3, #26
 8004704:	025b      	lsls	r3, r3, #9
 8004706:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004712:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800471e:	e007      	b.n	8004730 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	0e9b      	lsrs	r3, r3, #26
 8004726:	025b      	lsls	r3, r3, #9
 8004728:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 800472c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004736:	4b84      	ldr	r3, [pc, #528]	@ (8004948 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004738:	4013      	ands	r3, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004742:	430b      	orrs	r3, r1
 8004744:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800474c:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800474e:	e04c      	b.n	80047ea <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004754:	2b00      	cmp	r3, #0
 8004756:	d11d      	bne.n	8004794 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	6a1a      	ldr	r2, [r3, #32]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00d      	beq.n	800478a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004778:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800477c:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004788:	e004      	b.n	8004794 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	3b01      	subs	r3, #1
 8004790:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	0e9b      	lsrs	r3, r3, #26
 800479a:	f003 021f 	and.w	r2, r3, #31
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047b8:	1e5a      	subs	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80047c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047da:	4b5b      	ldr	r3, [pc, #364]	@ (8004948 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80047dc:	4013      	ands	r3, r2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	430b      	orrs	r3, r1
 80047e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fd29 	bl	8004246 <LL_ADC_INJ_IsConversionOngoing>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d124      	bne.n	8004844 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004800:	2b00      	cmp	r3, #0
 8004802:	d112      	bne.n	800482a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004814:	055a      	lsls	r2, r3, #21
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800481c:	051b      	lsls	r3, r3, #20
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	60da      	str	r2, [r3, #12]
 8004828:	e00c      	b.n	8004844 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800483a:	055a      	lsls	r2, r3, #21
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fcd5 	bl	80041f8 <LL_ADC_REG_IsConversionOngoing>
 800484e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff fcf5 	bl	8004246 <LL_ADC_INJ_IsConversionOngoing>
 800485c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004860:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004864:	2b00      	cmp	r3, #0
 8004866:	f040 822e 	bne.w	8004cc6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800486a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800486e:	2b00      	cmp	r3, #0
 8004870:	f040 8229 	bne.w	8004cc6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d116      	bne.n	80048b2 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800488a:	2b01      	cmp	r3, #1
 800488c:	d108      	bne.n	80048a0 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800489c:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800489e:	e01f      	b.n	80048e0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80048ae:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80048b0:	e016      	b.n	80048e0 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d109      	bne.n	80048d0 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c0:	f043 0220 	orr.w	r2, r3, #32
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80048ce:	e007      	b.n	80048e0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80048de:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d110      	bne.n	800490c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fc:	430b      	orrs	r3, r1
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0202 	orr.w	r2, r2, #2
 8004908:	611a      	str	r2, [r3, #16]
 800490a:	e007      	b.n	800491c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0202 	bic.w	r2, r2, #2
 800491a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004924:	d112      	bne.n	800494c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2200      	movs	r2, #0
 8004930:	4619      	mov	r1, r3
 8004932:	f7ff fbc3 	bl	80040bc <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff fb9b 	bl	800407a <LL_ADC_SetSamplingTimeCommonConfig>
 8004944:	e011      	b.n	800496a <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8004946:	bf00      	nop
 8004948:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004958:	461a      	mov	r2, r3
 800495a:	f7ff fbaf 	bl	80040bc <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2100      	movs	r1, #0
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff fb88 	bl	800407a <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	695a      	ldr	r2, [r3, #20]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	08db      	lsrs	r3, r3, #3
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2b04      	cmp	r3, #4
 800498a:	d022      	beq.n	80049d2 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	6919      	ldr	r1, [r3, #16]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800499c:	f7ff fae2 	bl	8003f64 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	6919      	ldr	r1, [r3, #16]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	461a      	mov	r2, r3
 80049ae:	f7ff fb2e 	bl	800400e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6818      	ldr	r0, [r3, #0]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d102      	bne.n	80049c8 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80049c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049c6:	e000      	b.n	80049ca <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80049c8:	2300      	movs	r3, #0
 80049ca:	461a      	mov	r2, r3
 80049cc:	f7ff fb3a 	bl	8004044 <LL_ADC_SetOffsetSaturation>
 80049d0:	e179      	b.n	8004cc6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2100      	movs	r1, #0
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff fae7 	bl	8003fac <LL_ADC_GetOffsetChannel>
 80049de:	4603      	mov	r3, r0
 80049e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <HAL_ADCEx_InjectedConfigChannel+0x352>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fadc 	bl	8003fac <LL_ADC_GetOffsetChannel>
 80049f4:	4603      	mov	r3, r0
 80049f6:	0e9b      	lsrs	r3, r3, #26
 80049f8:	f003 021f 	and.w	r2, r3, #31
 80049fc:	e01e      	b.n	8004a3c <HAL_ADCEx_InjectedConfigChannel+0x390>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2100      	movs	r1, #0
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff fad1 	bl	8003fac <LL_ADC_GetOffsetChannel>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004a14:	fa93 f3a3 	rbit	r3, r3
 8004a18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004a1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004a20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004a24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004a2c:	2320      	movs	r3, #32
 8004a2e:	e004      	b.n	8004a3a <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004a30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004a34:	fab3 f383 	clz	r3, r3
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d105      	bne.n	8004a54 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	0e9b      	lsrs	r3, r3, #26
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	e018      	b.n	8004a86 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004a68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004a70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004a78:	2320      	movs	r3, #32
 8004a7a:	e004      	b.n	8004a86 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8004a7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004a80:	fab3 f383 	clz	r3, r3
 8004a84:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d106      	bne.n	8004a98 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2100      	movs	r1, #0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff faa0 	bl	8003fd8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fa84 	bl	8003fac <LL_ADC_GetOffsetChannel>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10a      	bne.n	8004ac4 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff fa79 	bl	8003fac <LL_ADC_GetOffsetChannel>
 8004aba:	4603      	mov	r3, r0
 8004abc:	0e9b      	lsrs	r3, r3, #26
 8004abe:	f003 021f 	and.w	r2, r3, #31
 8004ac2:	e01e      	b.n	8004b02 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2101      	movs	r1, #1
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff fa6e 	bl	8003fac <LL_ADC_GetOffsetChannel>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ada:	fa93 f3a3 	rbit	r3, r3
 8004ade:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004ae2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004aea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004af2:	2320      	movs	r3, #32
 8004af4:	e004      	b.n	8004b00 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004af6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004afa:	fab3 f383 	clz	r3, r3
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d105      	bne.n	8004b1a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	0e9b      	lsrs	r3, r3, #26
 8004b14:	f003 031f 	and.w	r3, r3, #31
 8004b18:	e018      	b.n	8004b4c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b26:	fa93 f3a3 	rbit	r3, r3
 8004b2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004b2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b32:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004b3e:	2320      	movs	r3, #32
 8004b40:	e004      	b.n	8004b4c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004b42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b46:	fab3 f383 	clz	r3, r3
 8004b4a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d106      	bne.n	8004b5e <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2200      	movs	r2, #0
 8004b56:	2101      	movs	r1, #1
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff fa3d 	bl	8003fd8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2102      	movs	r1, #2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fa21 	bl	8003fac <LL_ADC_GetOffsetChannel>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10a      	bne.n	8004b8a <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2102      	movs	r1, #2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fa16 	bl	8003fac <LL_ADC_GetOffsetChannel>
 8004b80:	4603      	mov	r3, r0
 8004b82:	0e9b      	lsrs	r3, r3, #26
 8004b84:	f003 021f 	and.w	r2, r3, #31
 8004b88:	e01e      	b.n	8004bc8 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2102      	movs	r1, #2
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff fa0b 	bl	8003fac <LL_ADC_GetOffsetChannel>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ba0:	fa93 f3a3 	rbit	r3, r3
 8004ba4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004bb8:	2320      	movs	r3, #32
 8004bba:	e004      	b.n	8004bc6 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bc0:	fab3 f383 	clz	r3, r3
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	0e9b      	lsrs	r3, r3, #26
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	e014      	b.n	8004c0a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004be8:	fa93 f3a3 	rbit	r3, r3
 8004bec:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004bee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bf0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004bf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004bfc:	2320      	movs	r3, #32
 8004bfe:	e004      	b.n	8004c0a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004c00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c04:	fab3 f383 	clz	r3, r3
 8004c08:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d106      	bne.n	8004c1c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2200      	movs	r2, #0
 8004c14:	2102      	movs	r1, #2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff f9de 	bl	8003fd8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2103      	movs	r1, #3
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff f9c2 	bl	8003fac <LL_ADC_GetOffsetChannel>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10a      	bne.n	8004c48 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2103      	movs	r1, #3
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff f9b7 	bl	8003fac <LL_ADC_GetOffsetChannel>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	0e9b      	lsrs	r3, r3, #26
 8004c42:	f003 021f 	and.w	r2, r3, #31
 8004c46:	e017      	b.n	8004c78 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2103      	movs	r1, #3
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff f9ac 	bl	8003fac <LL_ADC_GetOffsetChannel>
 8004c54:	4603      	mov	r3, r0
 8004c56:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c5a:	fa93 f3a3 	rbit	r3, r3
 8004c5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c62:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004c64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004c6a:	2320      	movs	r3, #32
 8004c6c:	e003      	b.n	8004c76 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c70:	fab3 f383 	clz	r3, r3
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	0e9b      	lsrs	r3, r3, #26
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	e011      	b.n	8004cb4 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c98:	fa93 f3a3 	rbit	r3, r3
 8004c9c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004c9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004ca2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004ca8:	2320      	movs	r3, #32
 8004caa:	e003      	b.n	8004cb4 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004cac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cae:	fab3 f383 	clz	r3, r3
 8004cb2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d106      	bne.n	8004cc6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2103      	movs	r1, #3
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff f989 	bl	8003fd8 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff fa54 	bl	8004178 <LL_ADC_IsEnabled>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f040 8140 	bne.w	8004f58 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	6819      	ldr	r1, [r3, #0]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	f7ff fa15 	bl	8004114 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	4a8f      	ldr	r2, [pc, #572]	@ (8004f2c <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	f040 8131 	bne.w	8004f58 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10b      	bne.n	8004d1e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	0e9b      	lsrs	r3, r3, #26
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	2b09      	cmp	r3, #9
 8004d14:	bf94      	ite	ls
 8004d16:	2301      	movls	r3, #1
 8004d18:	2300      	movhi	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	e019      	b.n	8004d52 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d26:	fa93 f3a3 	rbit	r3, r3
 8004d2a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004d30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004d36:	2320      	movs	r3, #32
 8004d38:	e003      	b.n	8004d42 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d3c:	fab3 f383 	clz	r3, r3
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	3301      	adds	r3, #1
 8004d44:	f003 031f 	and.w	r3, r3, #31
 8004d48:	2b09      	cmp	r3, #9
 8004d4a:	bf94      	ite	ls
 8004d4c:	2301      	movls	r3, #1
 8004d4e:	2300      	movhi	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d079      	beq.n	8004e4a <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d107      	bne.n	8004d72 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	0e9b      	lsrs	r3, r3, #26
 8004d68:	3301      	adds	r3, #1
 8004d6a:	069b      	lsls	r3, r3, #26
 8004d6c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d70:	e015      	b.n	8004d9e <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d7a:	fa93 f3a3 	rbit	r3, r3
 8004d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004d80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d82:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004d84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004d8a:	2320      	movs	r3, #32
 8004d8c:	e003      	b.n	8004d96 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d90:	fab3 f383 	clz	r3, r3
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	3301      	adds	r3, #1
 8004d98:	069b      	lsls	r3, r3, #26
 8004d9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	0e9b      	lsrs	r3, r3, #26
 8004db0:	3301      	adds	r3, #1
 8004db2:	f003 031f 	and.w	r3, r3, #31
 8004db6:	2101      	movs	r1, #1
 8004db8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbc:	e017      	b.n	8004dee <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dce:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004dd6:	2320      	movs	r3, #32
 8004dd8:	e003      	b.n	8004de2 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ddc:	fab3 f383 	clz	r3, r3
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	3301      	adds	r3, #1
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	2101      	movs	r1, #1
 8004dea:	fa01 f303 	lsl.w	r3, r1, r3
 8004dee:	ea42 0103 	orr.w	r1, r2, r3
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	0e9b      	lsrs	r3, r3, #26
 8004e04:	3301      	adds	r3, #1
 8004e06:	f003 021f 	and.w	r2, r3, #31
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	4413      	add	r3, r2
 8004e10:	051b      	lsls	r3, r3, #20
 8004e12:	e018      	b.n	8004e46 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e1c:	fa93 f3a3 	rbit	r3, r3
 8004e20:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e24:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	e003      	b.n	8004e38 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e32:	fab3 f383 	clz	r3, r3
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	3301      	adds	r3, #1
 8004e3a:	f003 021f 	and.w	r2, r3, #31
 8004e3e:	4613      	mov	r3, r2
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	4413      	add	r3, r2
 8004e44:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e46:	430b      	orrs	r3, r1
 8004e48:	e081      	b.n	8004f4e <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d107      	bne.n	8004e66 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	0e9b      	lsrs	r3, r3, #26
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	069b      	lsls	r3, r3, #26
 8004e60:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e64:	e015      	b.n	8004e92 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6e:	fa93 f3a3 	rbit	r3, r3
 8004e72:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004e7e:	2320      	movs	r3, #32
 8004e80:	e003      	b.n	8004e8a <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e84:	fab3 f383 	clz	r3, r3
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	069b      	lsls	r3, r3, #26
 8004e8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	0e9b      	lsrs	r3, r3, #26
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	f003 031f 	and.w	r3, r3, #31
 8004eaa:	2101      	movs	r1, #1
 8004eac:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb0:	e017      	b.n	8004ee2 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	fa93 f3a3 	rbit	r3, r3
 8004ebe:	61bb      	str	r3, [r7, #24]
  return result;
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004eca:	2320      	movs	r3, #32
 8004ecc:	e003      	b.n	8004ed6 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	fab3 f383 	clz	r3, r3
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	f003 031f 	and.w	r3, r3, #31
 8004edc:	2101      	movs	r1, #1
 8004ede:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee2:	ea42 0103 	orr.w	r1, r2, r3
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10d      	bne.n	8004f0e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	0e9b      	lsrs	r3, r3, #26
 8004ef8:	3301      	adds	r3, #1
 8004efa:	f003 021f 	and.w	r2, r3, #31
 8004efe:	4613      	mov	r3, r2
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	4413      	add	r3, r2
 8004f04:	3b1e      	subs	r3, #30
 8004f06:	051b      	lsls	r3, r3, #20
 8004f08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f0c:	e01e      	b.n	8004f4c <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	fa93 f3a3 	rbit	r3, r3
 8004f1a:	60fb      	str	r3, [r7, #12]
  return result;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d104      	bne.n	8004f30 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004f26:	2320      	movs	r3, #32
 8004f28:	e006      	b.n	8004f38 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004f2a:	bf00      	nop
 8004f2c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	fab3 f383 	clz	r3, r3
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	3301      	adds	r3, #1
 8004f3a:	f003 021f 	and.w	r2, r3, #31
 8004f3e:	4613      	mov	r3, r2
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	4413      	add	r3, r2
 8004f44:	3b1e      	subs	r3, #30
 8004f46:	051b      	lsls	r3, r3, #20
 8004f48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f4c:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f52:	4619      	mov	r1, r3
 8004f54:	f7ff f8b2 	bl	80040bc <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8005048 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d067      	beq.n	8005034 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f64:	4839      	ldr	r0, [pc, #228]	@ (800504c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004f66:	f7fe ffef 	bl	8003f48 <LL_ADC_GetCommonPathInternalCh>
 8004f6a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a37      	ldr	r2, [pc, #220]	@ (8005050 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a35      	ldr	r2, [pc, #212]	@ (8005054 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d127      	bne.n	8004fd2 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d121      	bne.n	8004fd2 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f96:	d14d      	bne.n	8005034 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	482a      	ldr	r0, [pc, #168]	@ (800504c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004fa4:	f7fe ffbd 	bl	8003f22 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8005058 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	099b      	lsrs	r3, r3, #6
 8004fae:	4a2b      	ldr	r2, [pc, #172]	@ (800505c <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb4:	099a      	lsrs	r2, r3, #6
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004fc0:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004fc2:	e002      	b.n	8004fca <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1f9      	bne.n	8004fc4 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fd0:	e030      	b.n	8005034 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a22      	ldr	r2, [pc, #136]	@ (8005060 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d113      	bne.n	8005004 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004fdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fe0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10d      	bne.n	8005004 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1d      	ldr	r2, [pc, #116]	@ (8005064 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d020      	beq.n	8005034 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ff2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ff6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4813      	ldr	r0, [pc, #76]	@ (800504c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004ffe:	f7fe ff90 	bl	8003f22 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005002:	e017      	b.n	8005034 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a17      	ldr	r2, [pc, #92]	@ (8005068 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d112      	bne.n	8005034 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800500e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10c      	bne.n	8005034 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a11      	ldr	r2, [pc, #68]	@ (8005064 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005024:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005028:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800502c:	4619      	mov	r1, r3
 800502e:	4807      	ldr	r0, [pc, #28]	@ (800504c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8005030:	f7fe ff77 	bl	8003f22 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800503c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005040:	4618      	mov	r0, r3
 8005042:	37d8      	adds	r7, #216	@ 0xd8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	80080000 	.word	0x80080000
 800504c:	50000300 	.word	0x50000300
 8005050:	c3210000 	.word	0xc3210000
 8005054:	90c00010 	.word	0x90c00010
 8005058:	20000000 	.word	0x20000000
 800505c:	053e2d63 	.word	0x053e2d63
 8005060:	c7520000 	.word	0xc7520000
 8005064:	50000100 	.word	0x50000100
 8005068:	cb840000 	.word	0xcb840000

0800506c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800506c:	b590      	push	{r4, r7, lr}
 800506e:	b0a1      	sub	sp, #132	@ 0x84
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005086:	2302      	movs	r3, #2
 8005088:	e08b      	b.n	80051a2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005092:	2300      	movs	r3, #0
 8005094:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005096:	2300      	movs	r3, #0
 8005098:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050a2:	d102      	bne.n	80050aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050a4:	4b41      	ldr	r3, [pc, #260]	@ (80051ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80050a6:	60bb      	str	r3, [r7, #8]
 80050a8:	e001      	b.n	80050ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80050aa:	2300      	movs	r3, #0
 80050ac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10b      	bne.n	80050cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b8:	f043 0220 	orr.w	r2, r3, #32
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e06a      	b.n	80051a2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff f892 	bl	80041f8 <LL_ADC_REG_IsConversionOngoing>
 80050d4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff f88c 	bl	80041f8 <LL_ADC_REG_IsConversionOngoing>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d14c      	bne.n	8005180 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80050e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d149      	bne.n	8005180 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050ec:	4b30      	ldr	r3, [pc, #192]	@ (80051b0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80050ee:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d028      	beq.n	800514a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80050f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	6859      	ldr	r1, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800510a:	035b      	lsls	r3, r3, #13
 800510c:	430b      	orrs	r3, r1
 800510e:	431a      	orrs	r2, r3
 8005110:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005112:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005114:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005118:	f7ff f82e 	bl	8004178 <LL_ADC_IsEnabled>
 800511c:	4604      	mov	r4, r0
 800511e:	4823      	ldr	r0, [pc, #140]	@ (80051ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005120:	f7ff f82a 	bl	8004178 <LL_ADC_IsEnabled>
 8005124:	4603      	mov	r3, r0
 8005126:	4323      	orrs	r3, r4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d133      	bne.n	8005194 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800512c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005134:	f023 030f 	bic.w	r3, r3, #15
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	6811      	ldr	r1, [r2, #0]
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	6892      	ldr	r2, [r2, #8]
 8005140:	430a      	orrs	r2, r1
 8005142:	431a      	orrs	r2, r3
 8005144:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005146:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005148:	e024      	b.n	8005194 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800514a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005152:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005154:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005156:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800515a:	f7ff f80d 	bl	8004178 <LL_ADC_IsEnabled>
 800515e:	4604      	mov	r4, r0
 8005160:	4812      	ldr	r0, [pc, #72]	@ (80051ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005162:	f7ff f809 	bl	8004178 <LL_ADC_IsEnabled>
 8005166:	4603      	mov	r3, r0
 8005168:	4323      	orrs	r3, r4
 800516a:	2b00      	cmp	r3, #0
 800516c:	d112      	bne.n	8005194 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800516e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005176:	f023 030f 	bic.w	r3, r3, #15
 800517a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800517c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800517e:	e009      	b.n	8005194 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005184:	f043 0220 	orr.w	r2, r3, #32
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005192:	e000      	b.n	8005196 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005194:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800519e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3784      	adds	r7, #132	@ 0x84
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd90      	pop	{r4, r7, pc}
 80051aa:	bf00      	nop
 80051ac:	50000100 	.word	0x50000100
 80051b0:	50000300 	.word	0x50000300

080051b4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80051bc:	4b05      	ldr	r3, [pc, #20]	@ (80051d4 <LL_EXTI_EnableIT_0_31+0x20>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	4904      	ldr	r1, [pc, #16]	@ (80051d4 <LL_EXTI_EnableIT_0_31+0x20>)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	600b      	str	r3, [r1, #0]
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40010400 	.word	0x40010400

080051d8 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80051e0:	4b06      	ldr	r3, [pc, #24]	@ (80051fc <LL_EXTI_DisableIT_0_31+0x24>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	43db      	mvns	r3, r3
 80051e8:	4904      	ldr	r1, [pc, #16]	@ (80051fc <LL_EXTI_DisableIT_0_31+0x24>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40010400 	.word	0x40010400

08005200 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005208:	4b05      	ldr	r3, [pc, #20]	@ (8005220 <LL_EXTI_EnableEvent_0_31+0x20>)
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	4904      	ldr	r1, [pc, #16]	@ (8005220 <LL_EXTI_EnableEvent_0_31+0x20>)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4313      	orrs	r3, r2
 8005212:	604b      	str	r3, [r1, #4]

}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	40010400 	.word	0x40010400

08005224 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800522c:	4b06      	ldr	r3, [pc, #24]	@ (8005248 <LL_EXTI_DisableEvent_0_31+0x24>)
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	43db      	mvns	r3, r3
 8005234:	4904      	ldr	r1, [pc, #16]	@ (8005248 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005236:	4013      	ands	r3, r2
 8005238:	604b      	str	r3, [r1, #4]
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40010400 	.word	0x40010400

0800524c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005254:	4b05      	ldr	r3, [pc, #20]	@ (800526c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	4904      	ldr	r1, [pc, #16]	@ (800526c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4313      	orrs	r3, r2
 800525e:	608b      	str	r3, [r1, #8]

}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40010400 	.word	0x40010400

08005270 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005278:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	43db      	mvns	r3, r3
 8005280:	4904      	ldr	r1, [pc, #16]	@ (8005294 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005282:	4013      	ands	r3, r2
 8005284:	608b      	str	r3, [r1, #8]

}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40010400 	.word	0x40010400

08005298 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80052a0:	4b05      	ldr	r3, [pc, #20]	@ (80052b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	4904      	ldr	r1, [pc, #16]	@ (80052b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60cb      	str	r3, [r1, #12]
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	40010400 	.word	0x40010400

080052bc <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80052c4:	4b06      	ldr	r3, [pc, #24]	@ (80052e0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	43db      	mvns	r3, r3
 80052cc:	4904      	ldr	r1, [pc, #16]	@ (80052e0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80052ce:	4013      	ands	r3, r2
 80052d0:	60cb      	str	r3, [r1, #12]
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40010400 	.word	0x40010400

080052e4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80052ec:	4b07      	ldr	r3, [pc, #28]	@ (800530c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80052ee:	695a      	ldr	r2, [r3, #20]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4013      	ands	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d101      	bne.n	80052fe <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40010400 	.word	0x40010400

08005310 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005318:	4a04      	ldr	r2, [pc, #16]	@ (800532c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6153      	str	r3, [r2, #20]
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40010400 	.word	0x40010400

08005330 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d102      	bne.n	800534c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	77fb      	strb	r3, [r7, #31]
 800534a:	e0bc      	b.n	80054c6 <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005356:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800535a:	d102      	bne.n	8005362 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	77fb      	strb	r3, [r7, #31]
 8005360:	e0b1      	b.n	80054c6 <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	7f5b      	ldrb	r3, [r3, #29]
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d108      	bne.n	800537e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7fc f8a3 	bl	80014c4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005388:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4b48      	ldr	r3, [pc, #288]	@ (80054d0 <HAL_COMP_Init+0x1a0>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6812      	ldr	r2, [r2, #0]
 80053b6:	6979      	ldr	r1, [r7, #20]
 80053b8:	430b      	orrs	r3, r1
 80053ba:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d016      	beq.n	80053f8 <HAL_COMP_Init+0xc8>
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d113      	bne.n	80053f8 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053d0:	4b40      	ldr	r3, [pc, #256]	@ (80054d4 <HAL_COMP_Init+0x1a4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	099b      	lsrs	r3, r3, #6
 80053d6:	4a40      	ldr	r2, [pc, #256]	@ (80054d8 <HAL_COMP_Init+0x1a8>)
 80053d8:	fba2 2303 	umull	r2, r3, r2, r3
 80053dc:	099b      	lsrs	r3, r3, #6
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80053ea:	e002      	b.n	80053f2 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1f9      	bne.n	80053ec <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a37      	ldr	r2, [pc, #220]	@ (80054dc <HAL_COMP_Init+0x1ac>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d012      	beq.n	8005428 <HAL_COMP_Init+0xf8>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a36      	ldr	r2, [pc, #216]	@ (80054e0 <HAL_COMP_Init+0x1b0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00a      	beq.n	8005422 <HAL_COMP_Init+0xf2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a34      	ldr	r2, [pc, #208]	@ (80054e4 <HAL_COMP_Init+0x1b4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d102      	bne.n	800541c <HAL_COMP_Init+0xec>
 8005416:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800541a:	e007      	b.n	800542c <HAL_COMP_Init+0xfc>
 800541c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005420:	e004      	b.n	800542c <HAL_COMP_Init+0xfc>
 8005422:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005426:	e001      	b.n	800542c <HAL_COMP_Init+0xfc>
 8005428:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800542c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d037      	beq.n	80054aa <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8005446:	6938      	ldr	r0, [r7, #16]
 8005448:	f7ff ff00 	bl	800524c <LL_EXTI_EnableRisingTrig_0_31>
 800544c:	e002      	b.n	8005454 <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800544e:	6938      	ldr	r0, [r7, #16]
 8005450:	f7ff ff0e 	bl	8005270 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005460:	6938      	ldr	r0, [r7, #16]
 8005462:	f7ff ff19 	bl	8005298 <LL_EXTI_EnableFallingTrig_0_31>
 8005466:	e002      	b.n	800546e <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005468:	6938      	ldr	r0, [r7, #16]
 800546a:	f7ff ff27 	bl	80052bc <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 800546e:	6938      	ldr	r0, [r7, #16]
 8005470:	f7ff ff4e 	bl	8005310 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 8005480:	6938      	ldr	r0, [r7, #16]
 8005482:	f7ff febd 	bl	8005200 <LL_EXTI_EnableEvent_0_31>
 8005486:	e002      	b.n	800548e <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005488:	6938      	ldr	r0, [r7, #16]
 800548a:	f7ff fecb 	bl	8005224 <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 800549a:	6938      	ldr	r0, [r7, #16]
 800549c:	f7ff fe8a 	bl	80051b4 <LL_EXTI_EnableIT_0_31>
 80054a0:	e009      	b.n	80054b6 <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 80054a2:	6938      	ldr	r0, [r7, #16]
 80054a4:	f7ff fe98 	bl	80051d8 <LL_EXTI_DisableIT_0_31>
 80054a8:	e005      	b.n	80054b6 <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 80054aa:	6938      	ldr	r0, [r7, #16]
 80054ac:	f7ff feba 	bl	8005224 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 80054b0:	6938      	ldr	r0, [r7, #16]
 80054b2:	f7ff fe91 	bl	80051d8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	7f5b      	ldrb	r3, [r3, #29]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d102      	bne.n	80054c6 <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80054c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3720      	adds	r7, #32
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	ff007e0f 	.word	0xff007e0f
 80054d4:	20000000 	.word	0x20000000
 80054d8:	053e2d63 	.word	0x053e2d63
 80054dc:	40010200 	.word	0x40010200
 80054e0:	40010204 	.word	0x40010204
 80054e4:	40010208 	.word	0x40010208

080054e8 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a17      	ldr	r2, [pc, #92]	@ (8005554 <HAL_COMP_IRQHandler+0x6c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d012      	beq.n	8005520 <HAL_COMP_IRQHandler+0x38>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a16      	ldr	r2, [pc, #88]	@ (8005558 <HAL_COMP_IRQHandler+0x70>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00a      	beq.n	800551a <HAL_COMP_IRQHandler+0x32>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a14      	ldr	r2, [pc, #80]	@ (800555c <HAL_COMP_IRQHandler+0x74>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d102      	bne.n	8005514 <HAL_COMP_IRQHandler+0x2c>
 800550e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005512:	e007      	b.n	8005524 <HAL_COMP_IRQHandler+0x3c>
 8005514:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005518:	e004      	b.n	8005524 <HAL_COMP_IRQHandler+0x3c>
 800551a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800551e:	e001      	b.n	8005524 <HAL_COMP_IRQHandler+0x3c>
 8005520:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005524:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800552a:	68b8      	ldr	r0, [r7, #8]
 800552c:	f7ff feda 	bl	80052e4 <LL_EXTI_IsActiveFlag_0_31>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 8005536:	2301      	movs	r3, #1
 8005538:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_COMP_IRQHandler+0x64>
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
    }
#else
    LL_EXTI_ClearFlag_0_31(exti_line);
 8005540:	68b8      	ldr	r0, [r7, #8]
 8005542:	f7ff fee5 	bl	8005310 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f80a 	bl	8005560 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800554c:	bf00      	nop
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40010200 	.word	0x40010200
 8005558:	40010204 	.word	0x40010204
 800555c:	40010208 	.word	0x40010208

08005560 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005584:	4b0c      	ldr	r3, [pc, #48]	@ (80055b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005590:	4013      	ands	r3, r2
 8005592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800559c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80055a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055a6:	4a04      	ldr	r2, [pc, #16]	@ (80055b8 <__NVIC_SetPriorityGrouping+0x44>)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	60d3      	str	r3, [r2, #12]
}
 80055ac:	bf00      	nop
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	e000ed00 	.word	0xe000ed00

080055bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055c0:	4b04      	ldr	r3, [pc, #16]	@ (80055d4 <__NVIC_GetPriorityGrouping+0x18>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	0a1b      	lsrs	r3, r3, #8
 80055c6:	f003 0307 	and.w	r3, r3, #7
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	e000ed00 	.word	0xe000ed00

080055d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	db0b      	blt.n	8005602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055ea:	79fb      	ldrb	r3, [r7, #7]
 80055ec:	f003 021f 	and.w	r2, r3, #31
 80055f0:	4907      	ldr	r1, [pc, #28]	@ (8005610 <__NVIC_EnableIRQ+0x38>)
 80055f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	2001      	movs	r0, #1
 80055fa:	fa00 f202 	lsl.w	r2, r0, r2
 80055fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	e000e100 	.word	0xe000e100

08005614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	4603      	mov	r3, r0
 800561c:	6039      	str	r1, [r7, #0]
 800561e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005624:	2b00      	cmp	r3, #0
 8005626:	db0a      	blt.n	800563e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	b2da      	uxtb	r2, r3
 800562c:	490c      	ldr	r1, [pc, #48]	@ (8005660 <__NVIC_SetPriority+0x4c>)
 800562e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005632:	0112      	lsls	r2, r2, #4
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	440b      	add	r3, r1
 8005638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800563c:	e00a      	b.n	8005654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	b2da      	uxtb	r2, r3
 8005642:	4908      	ldr	r1, [pc, #32]	@ (8005664 <__NVIC_SetPriority+0x50>)
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	3b04      	subs	r3, #4
 800564c:	0112      	lsls	r2, r2, #4
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	440b      	add	r3, r1
 8005652:	761a      	strb	r2, [r3, #24]
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	e000e100 	.word	0xe000e100
 8005664:	e000ed00 	.word	0xe000ed00

08005668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005668:	b480      	push	{r7}
 800566a:	b089      	sub	sp, #36	@ 0x24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f1c3 0307 	rsb	r3, r3, #7
 8005682:	2b04      	cmp	r3, #4
 8005684:	bf28      	it	cs
 8005686:	2304      	movcs	r3, #4
 8005688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	3304      	adds	r3, #4
 800568e:	2b06      	cmp	r3, #6
 8005690:	d902      	bls.n	8005698 <NVIC_EncodePriority+0x30>
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	3b03      	subs	r3, #3
 8005696:	e000      	b.n	800569a <NVIC_EncodePriority+0x32>
 8005698:	2300      	movs	r3, #0
 800569a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800569c:	f04f 32ff 	mov.w	r2, #4294967295
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	43da      	mvns	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	401a      	ands	r2, r3
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056b0:	f04f 31ff 	mov.w	r1, #4294967295
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ba:	43d9      	mvns	r1, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056c0:	4313      	orrs	r3, r2
         );
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3724      	adds	r7, #36	@ 0x24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
	...

080056d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3b01      	subs	r3, #1
 80056dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056e0:	d301      	bcc.n	80056e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056e2:	2301      	movs	r3, #1
 80056e4:	e00f      	b.n	8005706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005710 <SysTick_Config+0x40>)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056ee:	210f      	movs	r1, #15
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	f7ff ff8e 	bl	8005614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056f8:	4b05      	ldr	r3, [pc, #20]	@ (8005710 <SysTick_Config+0x40>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056fe:	4b04      	ldr	r3, [pc, #16]	@ (8005710 <SysTick_Config+0x40>)
 8005700:	2207      	movs	r2, #7
 8005702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	e000e010 	.word	0xe000e010

08005714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff ff29 	bl	8005574 <__NVIC_SetPriorityGrouping>
}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b086      	sub	sp, #24
 800572e:	af00      	add	r7, sp, #0
 8005730:	4603      	mov	r3, r0
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
 8005736:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005738:	f7ff ff40 	bl	80055bc <__NVIC_GetPriorityGrouping>
 800573c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	6978      	ldr	r0, [r7, #20]
 8005744:	f7ff ff90 	bl	8005668 <NVIC_EncodePriority>
 8005748:	4602      	mov	r2, r0
 800574a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff ff5f 	bl	8005614 <__NVIC_SetPriority>
}
 8005756:	bf00      	nop
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	4603      	mov	r3, r0
 8005766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff ff33 	bl	80055d8 <__NVIC_EnableIRQ>
}
 8005772:	bf00      	nop
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff ffa4 	bl	80056d0 <SysTick_Config>
 8005788:	4603      	mov	r3, r0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e014      	b.n	80057ce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	791b      	ldrb	r3, [r3, #4]
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d105      	bne.n	80057ba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7fb fefb 	bl	80015b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2202      	movs	r2, #2
 80057be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	@ 0x28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <HAL_DAC_ConfigChannel+0x1c>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e19e      	b.n	8005b36 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	795b      	ldrb	r3, [r3, #5]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_DAC_ConfigChannel+0x2c>
 8005800:	2302      	movs	r3, #2
 8005802:	e198      	b.n	8005b36 <HAL_DAC_ConfigChannel+0x35e>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2202      	movs	r2, #2
 800580e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b04      	cmp	r3, #4
 8005816:	d17a      	bne.n	800590e <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005818:	f7fc ffb6 	bl	8002788 <HAL_GetTick>
 800581c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d13d      	bne.n	80058a0 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005824:	e018      	b.n	8005858 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005826:	f7fc ffaf 	bl	8002788 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b01      	cmp	r3, #1
 8005832:	d911      	bls.n	8005858 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f043 0208 	orr.w	r2, r3, #8
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2203      	movs	r2, #3
 8005852:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e16e      	b.n	8005b36 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1df      	bne.n	8005826 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800586e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005870:	e020      	b.n	80058b4 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005872:	f7fc ff89 	bl	8002788 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b01      	cmp	r3, #1
 800587e:	d90f      	bls.n	80058a0 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005886:	2b00      	cmp	r3, #0
 8005888:	da0a      	bge.n	80058a0 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f043 0208 	orr.w	r2, r3, #8
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2203      	movs	r2, #3
 800589a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e14a      	b.n	8005b36 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	dbe3      	blt.n	8005872 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80058c4:	fa01 f303 	lsl.w	r3, r1, r3
 80058c8:	43db      	mvns	r3, r3
 80058ca:	ea02 0103 	and.w	r1, r2, r3
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	409a      	lsls	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	21ff      	movs	r1, #255	@ 0xff
 80058f0:	fa01 f303 	lsl.w	r3, r1, r3
 80058f4:	43db      	mvns	r3, r3
 80058f6:	ea02 0103 	and.w	r1, r2, r3
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	409a      	lsls	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d11d      	bne.n	8005952 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f003 0310 	and.w	r3, r3, #16
 8005924:	221f      	movs	r2, #31
 8005926:	fa02 f303 	lsl.w	r3, r2, r3
 800592a:	43db      	mvns	r3, r3
 800592c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800592e:	4013      	ands	r3, r2
 8005930:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005946:	4313      	orrs	r3, r2
 8005948:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005950:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005958:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f003 0310 	and.w	r3, r3, #16
 8005960:	2207      	movs	r2, #7
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	43db      	mvns	r3, r3
 8005968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800596a:	4013      	ands	r3, r2
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d102      	bne.n	800597c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8005976:	2300      	movs	r3, #0
 8005978:	623b      	str	r3, [r7, #32]
 800597a:	e00f      	b.n	800599c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d102      	bne.n	800598a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005984:	2301      	movs	r3, #1
 8005986:	623b      	str	r3, [r7, #32]
 8005988:	e008      	b.n	800599c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005992:	2301      	movs	r3, #1
 8005994:	623b      	str	r3, [r7, #32]
 8005996:	e001      	b.n	800599c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005998:	2300      	movs	r3, #0
 800599a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	6a3a      	ldr	r2, [r7, #32]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f003 0310 	and.w	r3, r3, #16
 80059b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059b6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ba:	43db      	mvns	r3, r3
 80059bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059be:	4013      	ands	r3, r2
 80059c0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	791b      	ldrb	r3, [r3, #4]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d102      	bne.n	80059d0 <HAL_DAC_ConfigChannel+0x1f8>
 80059ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059ce:	e000      	b.n	80059d2 <HAL_DAC_ConfigChannel+0x1fa>
 80059d0:	2300      	movs	r3, #0
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	43db      	mvns	r3, r3
 80059e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ea:	4013      	ands	r3, r2
 80059ec:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	795b      	ldrb	r3, [r3, #5]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d102      	bne.n	80059fc <HAL_DAC_ConfigChannel+0x224>
 80059f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059fa:	e000      	b.n	80059fe <HAL_DAC_ConfigChannel+0x226>
 80059fc:	2300      	movs	r3, #0
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a06:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d114      	bne.n	8005a3e <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005a14:	f001 fd92 	bl	800753c <HAL_RCC_GetHCLKFreq>
 8005a18:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	4a48      	ldr	r2, [pc, #288]	@ (8005b40 <HAL_DAC_ConfigChannel+0x368>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d904      	bls.n	8005a2c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a2a:	e00f      	b.n	8005a4c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4a45      	ldr	r2, [pc, #276]	@ (8005b44 <HAL_DAC_ConfigChannel+0x36c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d90a      	bls.n	8005a4a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a3c:	e006      	b.n	8005a4c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a44:	4313      	orrs	r3, r2
 8005a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a48:	e000      	b.n	8005a4c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005a4a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f003 0310 	and.w	r3, r3, #16
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6819      	ldr	r1, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f003 0310 	and.w	r3, r3, #16
 8005a72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	43da      	mvns	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	400a      	ands	r2, r1
 8005a82:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f003 0310 	and.w	r3, r3, #16
 8005a92:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	43db      	mvns	r3, r3
 8005a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f003 0310 	and.w	r3, r3, #16
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6819      	ldr	r1, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f003 0310 	and.w	r3, r3, #16
 8005ace:	22c0      	movs	r2, #192	@ 0xc0
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	43da      	mvns	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	400a      	ands	r2, r1
 8005adc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	089b      	lsrs	r3, r3, #2
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	089b      	lsrs	r3, r3, #2
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b10:	43db      	mvns	r3, r3
 8005b12:	ea02 0103 	and.w	r1, r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	409a      	lsls	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005b34:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3728      	adds	r7, #40	@ 0x28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	09896800 	.word	0x09896800
 8005b44:	04c4b400 	.word	0x04c4b400

08005b48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e08d      	b.n	8005c76 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	4b47      	ldr	r3, [pc, #284]	@ (8005c80 <HAL_DMA_Init+0x138>)
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d80f      	bhi.n	8005b86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	4b45      	ldr	r3, [pc, #276]	@ (8005c84 <HAL_DMA_Init+0x13c>)
 8005b6e:	4413      	add	r3, r2
 8005b70:	4a45      	ldr	r2, [pc, #276]	@ (8005c88 <HAL_DMA_Init+0x140>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	091b      	lsrs	r3, r3, #4
 8005b78:	009a      	lsls	r2, r3, #2
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a42      	ldr	r2, [pc, #264]	@ (8005c8c <HAL_DMA_Init+0x144>)
 8005b82:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b84:	e00e      	b.n	8005ba4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	4b40      	ldr	r3, [pc, #256]	@ (8005c90 <HAL_DMA_Init+0x148>)
 8005b8e:	4413      	add	r3, r2
 8005b90:	4a3d      	ldr	r2, [pc, #244]	@ (8005c88 <HAL_DMA_Init+0x140>)
 8005b92:	fba2 2303 	umull	r2, r3, r2, r3
 8005b96:	091b      	lsrs	r3, r3, #4
 8005b98:	009a      	lsls	r2, r3, #2
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a3c      	ldr	r2, [pc, #240]	@ (8005c94 <HAL_DMA_Init+0x14c>)
 8005ba2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fa76 	bl	80060e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c04:	d102      	bne.n	8005c0c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c20:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d010      	beq.n	8005c4c <HAL_DMA_Init+0x104>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d80c      	bhi.n	8005c4c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fa96 	bl	8006164 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c48:	605a      	str	r2, [r3, #4]
 8005c4a:	e008      	b.n	8005c5e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	40020407 	.word	0x40020407
 8005c84:	bffdfff8 	.word	0xbffdfff8
 8005c88:	cccccccd 	.word	0xcccccccd
 8005c8c:	40020000 	.word	0x40020000
 8005c90:	bffdfbf8 	.word	0xbffdfbf8
 8005c94:	40020400 	.word	0x40020400

08005c98 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_DMA_Start_IT+0x20>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e066      	b.n	8005d86 <HAL_DMA_Start_IT+0xee>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d155      	bne.n	8005d78 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0201 	bic.w	r2, r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	68b9      	ldr	r1, [r7, #8]
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 f9bb 	bl	800606c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d008      	beq.n	8005d10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 020e 	orr.w	r2, r2, #14
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e00f      	b.n	8005d30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0204 	bic.w	r2, r2, #4
 8005d1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 020a 	orr.w	r2, r2, #10
 8005d2e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d007      	beq.n	8005d4e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d4c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d007      	beq.n	8005d66 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d64:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0201 	orr.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	e005      	b.n	8005d84 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d80:	2302      	movs	r3, #2
 8005d82:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d005      	beq.n	8005db2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2204      	movs	r2, #4
 8005daa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
 8005db0:	e037      	b.n	8005e22 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 020e 	bic.w	r2, r2, #14
 8005dc0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dd0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0201 	bic.w	r2, r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de6:	f003 021f 	and.w	r2, r3, #31
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dee:	2101      	movs	r1, #1
 8005df0:	fa01 f202 	lsl.w	r2, r1, r2
 8005df4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005dfe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00c      	beq.n	8005e22 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e16:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e20:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d00d      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2204      	movs	r2, #4
 8005e5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	73fb      	strb	r3, [r7, #15]
 8005e72:	e047      	b.n	8005f04 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 020e 	bic.w	r2, r2, #14
 8005e82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0201 	bic.w	r2, r2, #1
 8005e92:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ea2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea8:	f003 021f 	and.w	r2, r3, #31
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8005eb6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ec0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00c      	beq.n	8005ee4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ed8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ee2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	4798      	blx	r3
    }
  }
  return status;
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2a:	f003 031f 	and.w	r3, r3, #31
 8005f2e:	2204      	movs	r2, #4
 8005f30:	409a      	lsls	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4013      	ands	r3, r2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d026      	beq.n	8005f88 <HAL_DMA_IRQHandler+0x7a>
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d021      	beq.n	8005f88 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d107      	bne.n	8005f62 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0204 	bic.w	r2, r2, #4
 8005f60:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f66:	f003 021f 	and.w	r2, r3, #31
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6e:	2104      	movs	r1, #4
 8005f70:	fa01 f202 	lsl.w	r2, r1, r2
 8005f74:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d071      	beq.n	8006062 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005f86:	e06c      	b.n	8006062 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f8c:	f003 031f 	and.w	r3, r3, #31
 8005f90:	2202      	movs	r2, #2
 8005f92:	409a      	lsls	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4013      	ands	r3, r2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d02e      	beq.n	8005ffa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d029      	beq.n	8005ffa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10b      	bne.n	8005fcc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 020a 	bic.w	r2, r2, #10
 8005fc2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd0:	f003 021f 	and.w	r2, r3, #31
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd8:	2102      	movs	r1, #2
 8005fda:	fa01 f202 	lsl.w	r2, r1, r2
 8005fde:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d038      	beq.n	8006062 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005ff8:	e033      	b.n	8006062 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ffe:	f003 031f 	and.w	r3, r3, #31
 8006002:	2208      	movs	r2, #8
 8006004:	409a      	lsls	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4013      	ands	r3, r2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d02a      	beq.n	8006064 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	2b00      	cmp	r3, #0
 8006016:	d025      	beq.n	8006064 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 020e 	bic.w	r2, r2, #14
 8006026:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800602c:	f003 021f 	and.w	r2, r3, #31
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006034:	2101      	movs	r1, #1
 8006036:	fa01 f202 	lsl.w	r2, r1, r2
 800603a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006056:	2b00      	cmp	r3, #0
 8006058:	d004      	beq.n	8006064 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006062:	bf00      	nop
 8006064:	bf00      	nop
}
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006082:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006088:	2b00      	cmp	r3, #0
 800608a:	d004      	beq.n	8006096 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006094:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609a:	f003 021f 	and.w	r2, r3, #31
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a2:	2101      	movs	r1, #1
 80060a4:	fa01 f202 	lsl.w	r2, r1, r2
 80060a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	2b10      	cmp	r3, #16
 80060b8:	d108      	bne.n	80060cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80060ca:	e007      	b.n	80060dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	60da      	str	r2, [r3, #12]
}
 80060dc:	bf00      	nop
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	4b16      	ldr	r3, [pc, #88]	@ (8006150 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d802      	bhi.n	8006102 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80060fc:	4b15      	ldr	r3, [pc, #84]	@ (8006154 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	e001      	b.n	8006106 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8006102:	4b15      	ldr	r3, [pc, #84]	@ (8006158 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006104:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	3b08      	subs	r3, #8
 8006112:	4a12      	ldr	r2, [pc, #72]	@ (800615c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006114:	fba2 2303 	umull	r2, r3, r2, r3
 8006118:	091b      	lsrs	r3, r3, #4
 800611a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006120:	089b      	lsrs	r3, r3, #2
 8006122:	009a      	lsls	r2, r3, #2
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	4413      	add	r3, r2
 8006128:	461a      	mov	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a0b      	ldr	r2, [pc, #44]	@ (8006160 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006132:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f003 031f 	and.w	r3, r3, #31
 800613a:	2201      	movs	r2, #1
 800613c:	409a      	lsls	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40020407 	.word	0x40020407
 8006154:	40020800 	.word	0x40020800
 8006158:	40020820 	.word	0x40020820
 800615c:	cccccccd 	.word	0xcccccccd
 8006160:	40020880 	.word	0x40020880

08006164 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4b0b      	ldr	r3, [pc, #44]	@ (80061a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	461a      	mov	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a08      	ldr	r2, [pc, #32]	@ (80061a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006186:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3b01      	subs	r3, #1
 800618c:	f003 031f 	and.w	r3, r3, #31
 8006190:	2201      	movs	r2, #1
 8006192:	409a      	lsls	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006198:	bf00      	nop
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	1000823f 	.word	0x1000823f
 80061a8:	40020940 	.word	0x40020940

080061ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e147      	b.n	800644e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7fb fa84 	bl	80016e0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0210 	bic.w	r2, r2, #16
 80061e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061e8:	f7fc face 	bl	8002788 <HAL_GetTick>
 80061ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80061ee:	e012      	b.n	8006216 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80061f0:	f7fc faca 	bl	8002788 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b0a      	cmp	r3, #10
 80061fc:	d90b      	bls.n	8006216 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006202:	f043 0201 	orr.w	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2203      	movs	r2, #3
 800620e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e11b      	b.n	800644e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f003 0308 	and.w	r3, r3, #8
 8006220:	2b08      	cmp	r3, #8
 8006222:	d0e5      	beq.n	80061f0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0201 	orr.w	r2, r2, #1
 8006232:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006234:	f7fc faa8 	bl	8002788 <HAL_GetTick>
 8006238:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800623a:	e012      	b.n	8006262 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800623c:	f7fc faa4 	bl	8002788 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b0a      	cmp	r3, #10
 8006248:	d90b      	bls.n	8006262 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800624e:	f043 0201 	orr.w	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2203      	movs	r2, #3
 800625a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e0f5      	b.n	800644e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0e5      	beq.n	800623c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0202 	orr.w	r2, r2, #2
 800627e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a74      	ldr	r2, [pc, #464]	@ (8006458 <HAL_FDCAN_Init+0x2ac>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d103      	bne.n	8006292 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800628a:	4a74      	ldr	r2, [pc, #464]	@ (800645c <HAL_FDCAN_Init+0x2b0>)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	7c1b      	ldrb	r3, [r3, #16]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d108      	bne.n	80062ac <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	699a      	ldr	r2, [r3, #24]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062a8:	619a      	str	r2, [r3, #24]
 80062aa:	e007      	b.n	80062bc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062ba:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	7c5b      	ldrb	r3, [r3, #17]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d108      	bne.n	80062d6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062d2:	619a      	str	r2, [r3, #24]
 80062d4:	e007      	b.n	80062e6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	699a      	ldr	r2, [r3, #24]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	7c9b      	ldrb	r3, [r3, #18]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d108      	bne.n	8006300 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699a      	ldr	r2, [r3, #24]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80062fc:	619a      	str	r2, [r3, #24]
 80062fe:	e007      	b.n	8006310 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699a      	ldr	r2, [r3, #24]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800630e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	699a      	ldr	r2, [r3, #24]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006334:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0210 	bic.w	r2, r2, #16
 8006344:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d108      	bne.n	8006360 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	699a      	ldr	r2, [r3, #24]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f042 0204 	orr.w	r2, r2, #4
 800635c:	619a      	str	r2, [r3, #24]
 800635e:	e02c      	b.n	80063ba <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d028      	beq.n	80063ba <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	2b02      	cmp	r3, #2
 800636e:	d01c      	beq.n	80063aa <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800637e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691a      	ldr	r2, [r3, #16]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0210 	orr.w	r2, r2, #16
 800638e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	2b03      	cmp	r3, #3
 8006396:	d110      	bne.n	80063ba <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0220 	orr.w	r2, r2, #32
 80063a6:	619a      	str	r2, [r3, #24]
 80063a8:	e007      	b.n	80063ba <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	699a      	ldr	r2, [r3, #24]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f042 0220 	orr.w	r2, r2, #32
 80063b8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	3b01      	subs	r3, #1
 80063c0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80063ca:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80063d2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	3b01      	subs	r3, #1
 80063dc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80063e2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80063e4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063ee:	d115      	bne.n	800641c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fa:	3b01      	subs	r3, #1
 80063fc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80063fe:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006404:	3b01      	subs	r3, #1
 8006406:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006408:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006410:	3b01      	subs	r3, #1
 8006412:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006418:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800641a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f814 	bl	8006460 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	40006400 	.word	0x40006400
 800645c:	40006500 	.word	0x40006500

08006460 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006468:	4b27      	ldr	r3, [pc, #156]	@ (8006508 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800646a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800647a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006482:	041a      	lsls	r2, r3, #16
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064a0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a8:	061a      	lsls	r2, r3, #24
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	e005      	b.n	80064ee <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3304      	adds	r3, #4
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d3f3      	bcc.n	80064e2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80064fa:	bf00      	nop
 80064fc:	bf00      	nop
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	4000a400 	.word	0x4000a400

0800650c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006516:	2300      	movs	r3, #0
 8006518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800651a:	e15a      	b.n	80067d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	2101      	movs	r1, #1
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	fa01 f303 	lsl.w	r3, r1, r3
 8006528:	4013      	ands	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 814c 	beq.w	80067cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	2b01      	cmp	r3, #1
 800653e:	d005      	beq.n	800654c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006548:	2b02      	cmp	r3, #2
 800654a:	d130      	bne.n	80065ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	2203      	movs	r2, #3
 8006558:	fa02 f303 	lsl.w	r3, r2, r3
 800655c:	43db      	mvns	r3, r3
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	4013      	ands	r3, r2
 8006562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	fa02 f303 	lsl.w	r3, r2, r3
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4313      	orrs	r3, r2
 8006574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006582:	2201      	movs	r2, #1
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	fa02 f303 	lsl.w	r3, r2, r3
 800658a:	43db      	mvns	r3, r3
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	4013      	ands	r3, r2
 8006590:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	091b      	lsrs	r3, r3, #4
 8006598:	f003 0201 	and.w	r2, r3, #1
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	fa02 f303 	lsl.w	r3, r2, r3
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d017      	beq.n	80065ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	2203      	movs	r2, #3
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	43db      	mvns	r3, r3
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4013      	ands	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d123      	bne.n	800663e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	08da      	lsrs	r2, r3, #3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3208      	adds	r2, #8
 80065fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006602:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	220f      	movs	r2, #15
 800660e:	fa02 f303 	lsl.w	r3, r2, r3
 8006612:	43db      	mvns	r3, r3
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	4013      	ands	r3, r2
 8006618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	691a      	ldr	r2, [r3, #16]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4313      	orrs	r3, r2
 800662e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	08da      	lsrs	r2, r3, #3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3208      	adds	r2, #8
 8006638:	6939      	ldr	r1, [r7, #16]
 800663a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	2203      	movs	r2, #3
 800664a:	fa02 f303 	lsl.w	r3, r2, r3
 800664e:	43db      	mvns	r3, r3
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4013      	ands	r3, r2
 8006654:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f003 0203 	and.w	r2, r3, #3
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	fa02 f303 	lsl.w	r3, r2, r3
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 80a6 	beq.w	80067cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006680:	4b5b      	ldr	r3, [pc, #364]	@ (80067f0 <HAL_GPIO_Init+0x2e4>)
 8006682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006684:	4a5a      	ldr	r2, [pc, #360]	@ (80067f0 <HAL_GPIO_Init+0x2e4>)
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	6613      	str	r3, [r2, #96]	@ 0x60
 800668c:	4b58      	ldr	r3, [pc, #352]	@ (80067f0 <HAL_GPIO_Init+0x2e4>)
 800668e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	60bb      	str	r3, [r7, #8]
 8006696:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006698:	4a56      	ldr	r2, [pc, #344]	@ (80067f4 <HAL_GPIO_Init+0x2e8>)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	089b      	lsrs	r3, r3, #2
 800669e:	3302      	adds	r3, #2
 80066a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f003 0303 	and.w	r3, r3, #3
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	220f      	movs	r2, #15
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	43db      	mvns	r3, r3
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4013      	ands	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80066c2:	d01f      	beq.n	8006704 <HAL_GPIO_Init+0x1f8>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a4c      	ldr	r2, [pc, #304]	@ (80067f8 <HAL_GPIO_Init+0x2ec>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d019      	beq.n	8006700 <HAL_GPIO_Init+0x1f4>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a4b      	ldr	r2, [pc, #300]	@ (80067fc <HAL_GPIO_Init+0x2f0>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d013      	beq.n	80066fc <HAL_GPIO_Init+0x1f0>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a4a      	ldr	r2, [pc, #296]	@ (8006800 <HAL_GPIO_Init+0x2f4>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00d      	beq.n	80066f8 <HAL_GPIO_Init+0x1ec>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a49      	ldr	r2, [pc, #292]	@ (8006804 <HAL_GPIO_Init+0x2f8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d007      	beq.n	80066f4 <HAL_GPIO_Init+0x1e8>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a48      	ldr	r2, [pc, #288]	@ (8006808 <HAL_GPIO_Init+0x2fc>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d101      	bne.n	80066f0 <HAL_GPIO_Init+0x1e4>
 80066ec:	2305      	movs	r3, #5
 80066ee:	e00a      	b.n	8006706 <HAL_GPIO_Init+0x1fa>
 80066f0:	2306      	movs	r3, #6
 80066f2:	e008      	b.n	8006706 <HAL_GPIO_Init+0x1fa>
 80066f4:	2304      	movs	r3, #4
 80066f6:	e006      	b.n	8006706 <HAL_GPIO_Init+0x1fa>
 80066f8:	2303      	movs	r3, #3
 80066fa:	e004      	b.n	8006706 <HAL_GPIO_Init+0x1fa>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e002      	b.n	8006706 <HAL_GPIO_Init+0x1fa>
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <HAL_GPIO_Init+0x1fa>
 8006704:	2300      	movs	r3, #0
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	f002 0203 	and.w	r2, r2, #3
 800670c:	0092      	lsls	r2, r2, #2
 800670e:	4093      	lsls	r3, r2
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006716:	4937      	ldr	r1, [pc, #220]	@ (80067f4 <HAL_GPIO_Init+0x2e8>)
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	089b      	lsrs	r3, r3, #2
 800671c:	3302      	adds	r3, #2
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006724:	4b39      	ldr	r3, [pc, #228]	@ (800680c <HAL_GPIO_Init+0x300>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	43db      	mvns	r3, r3
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4013      	ands	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006748:	4a30      	ldr	r2, [pc, #192]	@ (800680c <HAL_GPIO_Init+0x300>)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800674e:	4b2f      	ldr	r3, [pc, #188]	@ (800680c <HAL_GPIO_Init+0x300>)
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	43db      	mvns	r3, r3
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	4013      	ands	r3, r2
 800675c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006772:	4a26      	ldr	r2, [pc, #152]	@ (800680c <HAL_GPIO_Init+0x300>)
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006778:	4b24      	ldr	r3, [pc, #144]	@ (800680c <HAL_GPIO_Init+0x300>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	43db      	mvns	r3, r3
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	4013      	ands	r3, r2
 8006786:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800679c:	4a1b      	ldr	r2, [pc, #108]	@ (800680c <HAL_GPIO_Init+0x300>)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80067a2:	4b1a      	ldr	r3, [pc, #104]	@ (800680c <HAL_GPIO_Init+0x300>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	43db      	mvns	r3, r3
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	4013      	ands	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067c6:	4a11      	ldr	r2, [pc, #68]	@ (800680c <HAL_GPIO_Init+0x300>)
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	3301      	adds	r3, #1
 80067d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	fa22 f303 	lsr.w	r3, r2, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f47f ae9d 	bne.w	800651c <HAL_GPIO_Init+0x10>
  }
}
 80067e2:	bf00      	nop
 80067e4:	bf00      	nop
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	40021000 	.word	0x40021000
 80067f4:	40010000 	.word	0x40010000
 80067f8:	48000400 	.word	0x48000400
 80067fc:	48000800 	.word	0x48000800
 8006800:	48000c00 	.word	0x48000c00
 8006804:	48001000 	.word	0x48001000
 8006808:	48001400 	.word	0x48001400
 800680c:	40010400 	.word	0x40010400

08006810 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	887b      	ldrh	r3, [r7, #2]
 8006822:	4013      	ands	r3, r2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006828:	2301      	movs	r3, #1
 800682a:	73fb      	strb	r3, [r7, #15]
 800682c:	e001      	b.n	8006832 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800682e:	2300      	movs	r3, #0
 8006830:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006832:	7bfb      	ldrb	r3, [r7, #15]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	807b      	strh	r3, [r7, #2]
 800684c:	4613      	mov	r3, r2
 800684e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006850:	787b      	ldrb	r3, [r7, #1]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006856:	887a      	ldrh	r2, [r7, #2]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800685c:	e002      	b.n	8006864 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800685e:	887a      	ldrh	r2, [r7, #2]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e0bb      	b.n	80069fe <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b05      	cmp	r3, #5
 8006890:	d101      	bne.n	8006896 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e0b3      	b.n	80069fe <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d101      	bne.n	80068a6 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e0ab      	b.n	80069fe <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068a6:	4b58      	ldr	r3, [pc, #352]	@ (8006a08 <HAL_OPAMP_Init+0x198>)
 80068a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068aa:	4a57      	ldr	r2, [pc, #348]	@ (8006a08 <HAL_OPAMP_Init+0x198>)
 80068ac:	f043 0301 	orr.w	r3, r3, #1
 80068b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80068b2:	4b55      	ldr	r3, [pc, #340]	@ (8006a08 <HAL_OPAMP_Init+0x198>)
 80068b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	60bb      	str	r3, [r7, #8]
 80068bc:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d103      	bne.n	80068d2 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7fb f94a 	bl	8001b6c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	2b40      	cmp	r3, #64	@ 0x40
 80068de:	d003      	beq.n	80068e8 <HAL_OPAMP_Init+0x78>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	2b60      	cmp	r3, #96	@ 0x60
 80068e6:	d133      	bne.n	8006950 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f023 0110 	bic.w	r1, r3, #16
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	4b41      	ldr	r3, [pc, #260]	@ (8006a0c <HAL_OPAMP_Init+0x19c>)
 8006906:	4013      	ands	r3, r2
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6851      	ldr	r1, [r2, #4]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6892      	ldr	r2, [r2, #8]
 8006910:	4311      	orrs	r1, r2
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	6912      	ldr	r2, [r2, #16]
 8006916:	430a      	orrs	r2, r1
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	7d09      	ldrb	r1, [r1, #20]
 800691c:	2901      	cmp	r1, #1
 800691e:	d102      	bne.n	8006926 <HAL_OPAMP_Init+0xb6>
 8006920:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006924:	e000      	b.n	8006928 <HAL_OPAMP_Init+0xb8>
 8006926:	2100      	movs	r1, #0
 8006928:	4311      	orrs	r1, r2
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800692e:	4311      	orrs	r1, r2
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006934:	4311      	orrs	r1, r2
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800693a:	04d2      	lsls	r2, r2, #19
 800693c:	4311      	orrs	r1, r2
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006942:	0612      	lsls	r2, r2, #24
 8006944:	4311      	orrs	r1, r2
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6812      	ldr	r2, [r2, #0]
 800694a:	430b      	orrs	r3, r1
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	e035      	b.n	80069bc <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f023 0110 	bic.w	r1, r3, #16
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	4b27      	ldr	r3, [pc, #156]	@ (8006a0c <HAL_OPAMP_Init+0x19c>)
 800696e:	4013      	ands	r3, r2
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6851      	ldr	r1, [r2, #4]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	6892      	ldr	r2, [r2, #8]
 8006978:	4311      	orrs	r1, r2
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	68d2      	ldr	r2, [r2, #12]
 800697e:	4311      	orrs	r1, r2
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6912      	ldr	r2, [r2, #16]
 8006984:	430a      	orrs	r2, r1
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	7d09      	ldrb	r1, [r1, #20]
 800698a:	2901      	cmp	r1, #1
 800698c:	d102      	bne.n	8006994 <HAL_OPAMP_Init+0x124>
 800698e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006992:	e000      	b.n	8006996 <HAL_OPAMP_Init+0x126>
 8006994:	2100      	movs	r1, #0
 8006996:	4311      	orrs	r1, r2
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800699c:	4311      	orrs	r1, r2
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80069a2:	4311      	orrs	r1, r2
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80069a8:	04d2      	lsls	r2, r2, #19
 80069aa:	4311      	orrs	r1, r2
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069b0:	0612      	lsls	r2, r2, #24
 80069b2:	4311      	orrs	r1, r2
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6812      	ldr	r2, [r2, #0]
 80069b8:	430b      	orrs	r3, r1
 80069ba:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	db10      	blt.n	80069e8 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	699a      	ldr	r2, [r3, #24]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	431a      	orrs	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	431a      	orrs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d103      	bne.n	80069fc <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	e0003e11 	.word	0xe0003e11

08006a10 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d102      	bne.n	8006a28 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	73fb      	strb	r3, [r7, #15]
 8006a26:	e01d      	b.n	8006a64 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b05      	cmp	r3, #5
 8006a32:	d102      	bne.n	8006a3a <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	73fb      	strb	r3, [r7, #15]
 8006a38:	e014      	b.n	8006a64 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d10c      	bne.n	8006a60 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0201 	orr.w	r2, r2, #1
 8006a54:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2204      	movs	r2, #4
 8006a5a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8006a5e:	e001      	b.n	8006a64 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
	...

08006a74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d141      	bne.n	8006b06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a82:	4b4b      	ldr	r3, [pc, #300]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a8e:	d131      	bne.n	8006af4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a90:	4b47      	ldr	r3, [pc, #284]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a96:	4a46      	ldr	r2, [pc, #280]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006aa0:	4b43      	ldr	r3, [pc, #268]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006aa8:	4a41      	ldr	r2, [pc, #260]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aaa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006aae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ab0:	4b40      	ldr	r3, [pc, #256]	@ (8006bb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2232      	movs	r2, #50	@ 0x32
 8006ab6:	fb02 f303 	mul.w	r3, r2, r3
 8006aba:	4a3f      	ldr	r2, [pc, #252]	@ (8006bb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006abc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac0:	0c9b      	lsrs	r3, r3, #18
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ac6:	e002      	b.n	8006ace <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ace:	4b38      	ldr	r3, [pc, #224]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ada:	d102      	bne.n	8006ae2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1f2      	bne.n	8006ac8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ae2:	4b33      	ldr	r3, [pc, #204]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aee:	d158      	bne.n	8006ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e057      	b.n	8006ba4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006af4:	4b2e      	ldr	r3, [pc, #184]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006afa:	4a2d      	ldr	r2, [pc, #180]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006afc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006b04:	e04d      	b.n	8006ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b0c:	d141      	bne.n	8006b92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b0e:	4b28      	ldr	r3, [pc, #160]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b1a:	d131      	bne.n	8006b80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b1c:	4b24      	ldr	r3, [pc, #144]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b22:	4a23      	ldr	r2, [pc, #140]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b2c:	4b20      	ldr	r3, [pc, #128]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006b34:	4a1e      	ldr	r2, [pc, #120]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006b3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8006bb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2232      	movs	r2, #50	@ 0x32
 8006b42:	fb02 f303 	mul.w	r3, r2, r3
 8006b46:	4a1c      	ldr	r2, [pc, #112]	@ (8006bb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006b48:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4c:	0c9b      	lsrs	r3, r3, #18
 8006b4e:	3301      	adds	r3, #1
 8006b50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b52:	e002      	b.n	8006b5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b5a:	4b15      	ldr	r3, [pc, #84]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b66:	d102      	bne.n	8006b6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1f2      	bne.n	8006b54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b6e:	4b10      	ldr	r3, [pc, #64]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b7a:	d112      	bne.n	8006ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e011      	b.n	8006ba4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b80:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b86:	4a0a      	ldr	r2, [pc, #40]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006b90:	e007      	b.n	8006ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006b92:	4b07      	ldr	r3, [pc, #28]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006b9a:	4a05      	ldr	r2, [pc, #20]	@ (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ba0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	40007000 	.word	0x40007000
 8006bb4:	20000000 	.word	0x20000000
 8006bb8:	431bde83 	.word	0x431bde83

08006bbc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006bc0:	4b05      	ldr	r3, [pc, #20]	@ (8006bd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	4a04      	ldr	r2, [pc, #16]	@ (8006bd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006bc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006bca:	6093      	str	r3, [r2, #8]
}
 8006bcc:	bf00      	nop
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40007000 	.word	0x40007000

08006bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e2fe      	b.n	80071ec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d075      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bfa:	4b97      	ldr	r3, [pc, #604]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 030c 	and.w	r3, r3, #12
 8006c02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c04:	4b94      	ldr	r3, [pc, #592]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f003 0303 	and.w	r3, r3, #3
 8006c0c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	2b0c      	cmp	r3, #12
 8006c12:	d102      	bne.n	8006c1a <HAL_RCC_OscConfig+0x3e>
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d002      	beq.n	8006c20 <HAL_RCC_OscConfig+0x44>
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d10b      	bne.n	8006c38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c20:	4b8d      	ldr	r3, [pc, #564]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d05b      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x108>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d157      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e2d9      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c40:	d106      	bne.n	8006c50 <HAL_RCC_OscConfig+0x74>
 8006c42:	4b85      	ldr	r3, [pc, #532]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a84      	ldr	r2, [pc, #528]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c4c:	6013      	str	r3, [r2, #0]
 8006c4e:	e01d      	b.n	8006c8c <HAL_RCC_OscConfig+0xb0>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c58:	d10c      	bne.n	8006c74 <HAL_RCC_OscConfig+0x98>
 8006c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a7e      	ldr	r2, [pc, #504]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	4b7c      	ldr	r3, [pc, #496]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a7b      	ldr	r2, [pc, #492]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	e00b      	b.n	8006c8c <HAL_RCC_OscConfig+0xb0>
 8006c74:	4b78      	ldr	r3, [pc, #480]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a77      	ldr	r2, [pc, #476]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	4b75      	ldr	r3, [pc, #468]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a74      	ldr	r2, [pc, #464]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d013      	beq.n	8006cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c94:	f7fb fd78 	bl	8002788 <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c9c:	f7fb fd74 	bl	8002788 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b64      	cmp	r3, #100	@ 0x64
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e29e      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cae:	4b6a      	ldr	r3, [pc, #424]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0f0      	beq.n	8006c9c <HAL_RCC_OscConfig+0xc0>
 8006cba:	e014      	b.n	8006ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cbc:	f7fb fd64 	bl	8002788 <HAL_GetTick>
 8006cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006cc2:	e008      	b.n	8006cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cc4:	f7fb fd60 	bl	8002788 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b64      	cmp	r3, #100	@ 0x64
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e28a      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006cd6:	4b60      	ldr	r3, [pc, #384]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1f0      	bne.n	8006cc4 <HAL_RCC_OscConfig+0xe8>
 8006ce2:	e000      	b.n	8006ce6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d075      	beq.n	8006dde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cf2:	4b59      	ldr	r3, [pc, #356]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f003 030c 	and.w	r3, r3, #12
 8006cfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cfc:	4b56      	ldr	r3, [pc, #344]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f003 0303 	and.w	r3, r3, #3
 8006d04:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b0c      	cmp	r3, #12
 8006d0a:	d102      	bne.n	8006d12 <HAL_RCC_OscConfig+0x136>
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d002      	beq.n	8006d18 <HAL_RCC_OscConfig+0x13c>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	d11f      	bne.n	8006d58 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d18:	4b4f      	ldr	r3, [pc, #316]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <HAL_RCC_OscConfig+0x154>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e25d      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d30:	4b49      	ldr	r3, [pc, #292]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	061b      	lsls	r3, r3, #24
 8006d3e:	4946      	ldr	r1, [pc, #280]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006d44:	4b45      	ldr	r3, [pc, #276]	@ (8006e5c <HAL_RCC_OscConfig+0x280>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fb fcd1 	bl	80026f0 <HAL_InitTick>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d043      	beq.n	8006ddc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e249      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d023      	beq.n	8006da8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d60:	4b3d      	ldr	r3, [pc, #244]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a3c      	ldr	r2, [pc, #240]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d6c:	f7fb fd0c 	bl	8002788 <HAL_GetTick>
 8006d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d72:	e008      	b.n	8006d86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d74:	f7fb fd08 	bl	8002788 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e232      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d86:	4b34      	ldr	r3, [pc, #208]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0f0      	beq.n	8006d74 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d92:	4b31      	ldr	r3, [pc, #196]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	061b      	lsls	r3, r3, #24
 8006da0:	492d      	ldr	r1, [pc, #180]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	604b      	str	r3, [r1, #4]
 8006da6:	e01a      	b.n	8006dde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006da8:	4b2b      	ldr	r3, [pc, #172]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a2a      	ldr	r2, [pc, #168]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006dae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db4:	f7fb fce8 	bl	8002788 <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006dba:	e008      	b.n	8006dce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dbc:	f7fb fce4 	bl	8002788 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e20e      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006dce:	4b22      	ldr	r3, [pc, #136]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1f0      	bne.n	8006dbc <HAL_RCC_OscConfig+0x1e0>
 8006dda:	e000      	b.n	8006dde <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ddc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d041      	beq.n	8006e6e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d01c      	beq.n	8006e2c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006df2:	4b19      	ldr	r3, [pc, #100]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006df8:	4a17      	ldr	r2, [pc, #92]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006dfa:	f043 0301 	orr.w	r3, r3, #1
 8006dfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e02:	f7fb fcc1 	bl	8002788 <HAL_GetTick>
 8006e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e08:	e008      	b.n	8006e1c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e0a:	f7fb fcbd 	bl	8002788 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e1e7      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0ef      	beq.n	8006e0a <HAL_RCC_OscConfig+0x22e>
 8006e2a:	e020      	b.n	8006e6e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e32:	4a09      	ldr	r2, [pc, #36]	@ (8006e58 <HAL_RCC_OscConfig+0x27c>)
 8006e34:	f023 0301 	bic.w	r3, r3, #1
 8006e38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e3c:	f7fb fca4 	bl	8002788 <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e42:	e00d      	b.n	8006e60 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e44:	f7fb fca0 	bl	8002788 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d906      	bls.n	8006e60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e1ca      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
 8006e56:	bf00      	nop
 8006e58:	40021000 	.word	0x40021000
 8006e5c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e60:	4b8c      	ldr	r3, [pc, #560]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1ea      	bne.n	8006e44 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0304 	and.w	r3, r3, #4
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 80a6 	beq.w	8006fc8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006e80:	4b84      	ldr	r3, [pc, #528]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <HAL_RCC_OscConfig+0x2b4>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e000      	b.n	8006e92 <HAL_RCC_OscConfig+0x2b6>
 8006e90:	2300      	movs	r3, #0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00d      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e96:	4b7f      	ldr	r3, [pc, #508]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e9a:	4a7e      	ldr	r2, [pc, #504]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ea0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ea2:	4b7c      	ldr	r3, [pc, #496]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006eb2:	4b79      	ldr	r3, [pc, #484]	@ (8007098 <HAL_RCC_OscConfig+0x4bc>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d118      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ebe:	4b76      	ldr	r3, [pc, #472]	@ (8007098 <HAL_RCC_OscConfig+0x4bc>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a75      	ldr	r2, [pc, #468]	@ (8007098 <HAL_RCC_OscConfig+0x4bc>)
 8006ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006eca:	f7fb fc5d 	bl	8002788 <HAL_GetTick>
 8006ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ed0:	e008      	b.n	8006ee4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ed2:	f7fb fc59 	bl	8002788 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d901      	bls.n	8006ee4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e183      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ee4:	4b6c      	ldr	r3, [pc, #432]	@ (8007098 <HAL_RCC_OscConfig+0x4bc>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0f0      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d108      	bne.n	8006f0a <HAL_RCC_OscConfig+0x32e>
 8006ef8:	4b66      	ldr	r3, [pc, #408]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006efe:	4a65      	ldr	r2, [pc, #404]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006f00:	f043 0301 	orr.w	r3, r3, #1
 8006f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006f08:	e024      	b.n	8006f54 <HAL_RCC_OscConfig+0x378>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	2b05      	cmp	r3, #5
 8006f10:	d110      	bne.n	8006f34 <HAL_RCC_OscConfig+0x358>
 8006f12:	4b60      	ldr	r3, [pc, #384]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f18:	4a5e      	ldr	r2, [pc, #376]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006f1a:	f043 0304 	orr.w	r3, r3, #4
 8006f1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006f22:	4b5c      	ldr	r3, [pc, #368]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f28:	4a5a      	ldr	r2, [pc, #360]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006f2a:	f043 0301 	orr.w	r3, r3, #1
 8006f2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006f32:	e00f      	b.n	8006f54 <HAL_RCC_OscConfig+0x378>
 8006f34:	4b57      	ldr	r3, [pc, #348]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f3a:	4a56      	ldr	r2, [pc, #344]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006f3c:	f023 0301 	bic.w	r3, r3, #1
 8006f40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006f44:	4b53      	ldr	r3, [pc, #332]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f4a:	4a52      	ldr	r2, [pc, #328]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006f4c:	f023 0304 	bic.w	r3, r3, #4
 8006f50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d016      	beq.n	8006f8a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f5c:	f7fb fc14 	bl	8002788 <HAL_GetTick>
 8006f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f62:	e00a      	b.n	8006f7a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f64:	f7fb fc10 	bl	8002788 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e138      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f7a:	4b46      	ldr	r3, [pc, #280]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0ed      	beq.n	8006f64 <HAL_RCC_OscConfig+0x388>
 8006f88:	e015      	b.n	8006fb6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f8a:	f7fb fbfd 	bl	8002788 <HAL_GetTick>
 8006f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f90:	e00a      	b.n	8006fa8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f92:	f7fb fbf9 	bl	8002788 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d901      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e121      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1ed      	bne.n	8006f92 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006fb6:	7ffb      	ldrb	r3, [r7, #31]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d105      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fbc:	4b35      	ldr	r3, [pc, #212]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc0:	4a34      	ldr	r2, [pc, #208]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006fc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fc6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0320 	and.w	r3, r3, #32
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d03c      	beq.n	800704e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01c      	beq.n	8007016 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8006fe4:	f043 0301 	orr.w	r3, r3, #1
 8006fe8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fec:	f7fb fbcc 	bl	8002788 <HAL_GetTick>
 8006ff0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ff2:	e008      	b.n	8007006 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ff4:	f7fb fbc8 	bl	8002788 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d901      	bls.n	8007006 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e0f2      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007006:	4b23      	ldr	r3, [pc, #140]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8007008:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0ef      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x418>
 8007014:	e01b      	b.n	800704e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007016:	4b1f      	ldr	r3, [pc, #124]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8007018:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800701c:	4a1d      	ldr	r2, [pc, #116]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 800701e:	f023 0301 	bic.w	r3, r3, #1
 8007022:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007026:	f7fb fbaf 	bl	8002788 <HAL_GetTick>
 800702a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800702c:	e008      	b.n	8007040 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800702e:	f7fb fbab 	bl	8002788 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d901      	bls.n	8007040 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e0d5      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007040:	4b14      	ldr	r3, [pc, #80]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8007042:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1ef      	bne.n	800702e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 80c9 	beq.w	80071ea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007058:	4b0e      	ldr	r3, [pc, #56]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f003 030c 	and.w	r3, r3, #12
 8007060:	2b0c      	cmp	r3, #12
 8007062:	f000 8083 	beq.w	800716c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d15e      	bne.n	800712c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800706e:	4b09      	ldr	r3, [pc, #36]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a08      	ldr	r2, [pc, #32]	@ (8007094 <HAL_RCC_OscConfig+0x4b8>)
 8007074:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800707a:	f7fb fb85 	bl	8002788 <HAL_GetTick>
 800707e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007080:	e00c      	b.n	800709c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007082:	f7fb fb81 	bl	8002788 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	d905      	bls.n	800709c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e0ab      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
 8007094:	40021000 	.word	0x40021000
 8007098:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800709c:	4b55      	ldr	r3, [pc, #340]	@ (80071f4 <HAL_RCC_OscConfig+0x618>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1ec      	bne.n	8007082 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070a8:	4b52      	ldr	r3, [pc, #328]	@ (80071f4 <HAL_RCC_OscConfig+0x618>)
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	4b52      	ldr	r3, [pc, #328]	@ (80071f8 <HAL_RCC_OscConfig+0x61c>)
 80070ae:	4013      	ands	r3, r2
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	6a11      	ldr	r1, [r2, #32]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80070b8:	3a01      	subs	r2, #1
 80070ba:	0112      	lsls	r2, r2, #4
 80070bc:	4311      	orrs	r1, r2
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80070c2:	0212      	lsls	r2, r2, #8
 80070c4:	4311      	orrs	r1, r2
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80070ca:	0852      	lsrs	r2, r2, #1
 80070cc:	3a01      	subs	r2, #1
 80070ce:	0552      	lsls	r2, r2, #21
 80070d0:	4311      	orrs	r1, r2
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80070d6:	0852      	lsrs	r2, r2, #1
 80070d8:	3a01      	subs	r2, #1
 80070da:	0652      	lsls	r2, r2, #25
 80070dc:	4311      	orrs	r1, r2
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80070e2:	06d2      	lsls	r2, r2, #27
 80070e4:	430a      	orrs	r2, r1
 80070e6:	4943      	ldr	r1, [pc, #268]	@ (80071f4 <HAL_RCC_OscConfig+0x618>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070ec:	4b41      	ldr	r3, [pc, #260]	@ (80071f4 <HAL_RCC_OscConfig+0x618>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a40      	ldr	r2, [pc, #256]	@ (80071f4 <HAL_RCC_OscConfig+0x618>)
 80070f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80070f8:	4b3e      	ldr	r3, [pc, #248]	@ (80071f4 <HAL_RCC_OscConfig+0x618>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	4a3d      	ldr	r2, [pc, #244]	@ (80071f4 <HAL_RCC_OscConfig+0x618>)
 80070fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007102:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007104:	f7fb fb40 	bl	8002788 <HAL_GetTick>
 8007108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800710a:	e008      	b.n	800711e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800710c:	f7fb fb3c 	bl	8002788 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d901      	bls.n	800711e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e066      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800711e:	4b35      	ldr	r3, [pc, #212]	@ (80071f4 <HAL_RCC_OscConfig+0x618>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0f0      	beq.n	800710c <HAL_RCC_OscConfig+0x530>
 800712a:	e05e      	b.n	80071ea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800712c:	4b31      	ldr	r3, [pc, #196]	@ (80071f4 <HAL_RCC_OscConfig+0x618>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a30      	ldr	r2, [pc, #192]	@ (80071f4 <HAL_RCC_OscConfig+0x618>)
 8007132:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007138:	f7fb fb26 	bl	8002788 <HAL_GetTick>
 800713c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800713e:	e008      	b.n	8007152 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007140:	f7fb fb22 	bl	8002788 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b02      	cmp	r3, #2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e04c      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007152:	4b28      	ldr	r3, [pc, #160]	@ (80071f4 <HAL_RCC_OscConfig+0x618>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1f0      	bne.n	8007140 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800715e:	4b25      	ldr	r3, [pc, #148]	@ (80071f4 <HAL_RCC_OscConfig+0x618>)
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	4924      	ldr	r1, [pc, #144]	@ (80071f4 <HAL_RCC_OscConfig+0x618>)
 8007164:	4b25      	ldr	r3, [pc, #148]	@ (80071fc <HAL_RCC_OscConfig+0x620>)
 8007166:	4013      	ands	r3, r2
 8007168:	60cb      	str	r3, [r1, #12]
 800716a:	e03e      	b.n	80071ea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e039      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007178:	4b1e      	ldr	r3, [pc, #120]	@ (80071f4 <HAL_RCC_OscConfig+0x618>)
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f003 0203 	and.w	r2, r3, #3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	429a      	cmp	r2, r3
 800718a:	d12c      	bne.n	80071e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007196:	3b01      	subs	r3, #1
 8007198:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800719a:	429a      	cmp	r2, r3
 800719c:	d123      	bne.n	80071e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d11b      	bne.n	80071e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d113      	bne.n	80071e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c8:	085b      	lsrs	r3, r3, #1
 80071ca:	3b01      	subs	r3, #1
 80071cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d109      	bne.n	80071e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071dc:	085b      	lsrs	r3, r3, #1
 80071de:	3b01      	subs	r3, #1
 80071e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d001      	beq.n	80071ea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e000      	b.n	80071ec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3720      	adds	r7, #32
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	40021000 	.word	0x40021000
 80071f8:	019f800c 	.word	0x019f800c
 80071fc:	feeefffc 	.word	0xfeeefffc

08007200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800720a:	2300      	movs	r3, #0
 800720c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e11e      	b.n	8007456 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007218:	4b91      	ldr	r3, [pc, #580]	@ (8007460 <HAL_RCC_ClockConfig+0x260>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 030f 	and.w	r3, r3, #15
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d910      	bls.n	8007248 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007226:	4b8e      	ldr	r3, [pc, #568]	@ (8007460 <HAL_RCC_ClockConfig+0x260>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f023 020f 	bic.w	r2, r3, #15
 800722e:	498c      	ldr	r1, [pc, #560]	@ (8007460 <HAL_RCC_ClockConfig+0x260>)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	4313      	orrs	r3, r2
 8007234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007236:	4b8a      	ldr	r3, [pc, #552]	@ (8007460 <HAL_RCC_ClockConfig+0x260>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 030f 	and.w	r3, r3, #15
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	429a      	cmp	r2, r3
 8007242:	d001      	beq.n	8007248 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e106      	b.n	8007456 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	d073      	beq.n	800733c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2b03      	cmp	r3, #3
 800725a:	d129      	bne.n	80072b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800725c:	4b81      	ldr	r3, [pc, #516]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e0f4      	b.n	8007456 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800726c:	f000 f99e 	bl	80075ac <RCC_GetSysClockFreqFromPLLSource>
 8007270:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	4a7c      	ldr	r2, [pc, #496]	@ (8007468 <HAL_RCC_ClockConfig+0x268>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d93f      	bls.n	80072fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800727a:	4b7a      	ldr	r3, [pc, #488]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d009      	beq.n	800729a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800728e:	2b00      	cmp	r3, #0
 8007290:	d033      	beq.n	80072fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007296:	2b00      	cmp	r3, #0
 8007298:	d12f      	bne.n	80072fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800729a:	4b72      	ldr	r3, [pc, #456]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072a2:	4a70      	ldr	r2, [pc, #448]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 80072a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80072aa:	2380      	movs	r3, #128	@ 0x80
 80072ac:	617b      	str	r3, [r7, #20]
 80072ae:	e024      	b.n	80072fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d107      	bne.n	80072c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072b8:	4b6a      	ldr	r3, [pc, #424]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d109      	bne.n	80072d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e0c6      	b.n	8007456 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072c8:	4b66      	ldr	r3, [pc, #408]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e0be      	b.n	8007456 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80072d8:	f000 f8ce 	bl	8007478 <HAL_RCC_GetSysClockFreq>
 80072dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	4a61      	ldr	r2, [pc, #388]	@ (8007468 <HAL_RCC_ClockConfig+0x268>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d909      	bls.n	80072fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80072e6:	4b5f      	ldr	r3, [pc, #380]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072ee:	4a5d      	ldr	r2, [pc, #372]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 80072f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80072f6:	2380      	movs	r3, #128	@ 0x80
 80072f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80072fa:	4b5a      	ldr	r3, [pc, #360]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f023 0203 	bic.w	r2, r3, #3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	4957      	ldr	r1, [pc, #348]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 8007308:	4313      	orrs	r3, r2
 800730a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800730c:	f7fb fa3c 	bl	8002788 <HAL_GetTick>
 8007310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007312:	e00a      	b.n	800732a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007314:	f7fb fa38 	bl	8002788 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007322:	4293      	cmp	r3, r2
 8007324:	d901      	bls.n	800732a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e095      	b.n	8007456 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800732a:	4b4e      	ldr	r3, [pc, #312]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f003 020c 	and.w	r2, r3, #12
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	429a      	cmp	r2, r3
 800733a:	d1eb      	bne.n	8007314 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d023      	beq.n	8007390 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007354:	4b43      	ldr	r3, [pc, #268]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	4a42      	ldr	r2, [pc, #264]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 800735a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800735e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b00      	cmp	r3, #0
 800736a:	d007      	beq.n	800737c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800736c:	4b3d      	ldr	r3, [pc, #244]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007374:	4a3b      	ldr	r2, [pc, #236]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 8007376:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800737a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800737c:	4b39      	ldr	r3, [pc, #228]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	4936      	ldr	r1, [pc, #216]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 800738a:	4313      	orrs	r3, r2
 800738c:	608b      	str	r3, [r1, #8]
 800738e:	e008      	b.n	80073a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	2b80      	cmp	r3, #128	@ 0x80
 8007394:	d105      	bne.n	80073a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007396:	4b33      	ldr	r3, [pc, #204]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	4a32      	ldr	r2, [pc, #200]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 800739c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073a2:	4b2f      	ldr	r3, [pc, #188]	@ (8007460 <HAL_RCC_ClockConfig+0x260>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 030f 	and.w	r3, r3, #15
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d21d      	bcs.n	80073ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007460 <HAL_RCC_ClockConfig+0x260>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f023 020f 	bic.w	r2, r3, #15
 80073b8:	4929      	ldr	r1, [pc, #164]	@ (8007460 <HAL_RCC_ClockConfig+0x260>)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	4313      	orrs	r3, r2
 80073be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80073c0:	f7fb f9e2 	bl	8002788 <HAL_GetTick>
 80073c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073c6:	e00a      	b.n	80073de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073c8:	f7fb f9de 	bl	8002788 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e03b      	b.n	8007456 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073de:	4b20      	ldr	r3, [pc, #128]	@ (8007460 <HAL_RCC_ClockConfig+0x260>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 030f 	and.w	r3, r3, #15
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d1ed      	bne.n	80073c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0304 	and.w	r3, r3, #4
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d008      	beq.n	800740a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073f8:	4b1a      	ldr	r3, [pc, #104]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	4917      	ldr	r1, [pc, #92]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 8007406:	4313      	orrs	r3, r2
 8007408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0308 	and.w	r3, r3, #8
 8007412:	2b00      	cmp	r3, #0
 8007414:	d009      	beq.n	800742a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007416:	4b13      	ldr	r3, [pc, #76]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	490f      	ldr	r1, [pc, #60]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 8007426:	4313      	orrs	r3, r2
 8007428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800742a:	f000 f825 	bl	8007478 <HAL_RCC_GetSysClockFreq>
 800742e:	4602      	mov	r2, r0
 8007430:	4b0c      	ldr	r3, [pc, #48]	@ (8007464 <HAL_RCC_ClockConfig+0x264>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	091b      	lsrs	r3, r3, #4
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	490c      	ldr	r1, [pc, #48]	@ (800746c <HAL_RCC_ClockConfig+0x26c>)
 800743c:	5ccb      	ldrb	r3, [r1, r3]
 800743e:	f003 031f 	and.w	r3, r3, #31
 8007442:	fa22 f303 	lsr.w	r3, r2, r3
 8007446:	4a0a      	ldr	r2, [pc, #40]	@ (8007470 <HAL_RCC_ClockConfig+0x270>)
 8007448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800744a:	4b0a      	ldr	r3, [pc, #40]	@ (8007474 <HAL_RCC_ClockConfig+0x274>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f7fb f94e 	bl	80026f0 <HAL_InitTick>
 8007454:	4603      	mov	r3, r0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	40022000 	.word	0x40022000
 8007464:	40021000 	.word	0x40021000
 8007468:	04c4b400 	.word	0x04c4b400
 800746c:	08012bb0 	.word	0x08012bb0
 8007470:	20000000 	.word	0x20000000
 8007474:	20000004 	.word	0x20000004

08007478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800747e:	4b2c      	ldr	r3, [pc, #176]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f003 030c 	and.w	r3, r3, #12
 8007486:	2b04      	cmp	r3, #4
 8007488:	d102      	bne.n	8007490 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800748a:	4b2a      	ldr	r3, [pc, #168]	@ (8007534 <HAL_RCC_GetSysClockFreq+0xbc>)
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	e047      	b.n	8007520 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007490:	4b27      	ldr	r3, [pc, #156]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f003 030c 	and.w	r3, r3, #12
 8007498:	2b08      	cmp	r3, #8
 800749a:	d102      	bne.n	80074a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800749c:	4b26      	ldr	r3, [pc, #152]	@ (8007538 <HAL_RCC_GetSysClockFreq+0xc0>)
 800749e:	613b      	str	r3, [r7, #16]
 80074a0:	e03e      	b.n	8007520 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80074a2:	4b23      	ldr	r3, [pc, #140]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f003 030c 	and.w	r3, r3, #12
 80074aa:	2b0c      	cmp	r3, #12
 80074ac:	d136      	bne.n	800751c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074ae:	4b20      	ldr	r3, [pc, #128]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80074b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	091b      	lsrs	r3, r3, #4
 80074be:	f003 030f 	and.w	r3, r3, #15
 80074c2:	3301      	adds	r3, #1
 80074c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b03      	cmp	r3, #3
 80074ca:	d10c      	bne.n	80074e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80074cc:	4a1a      	ldr	r2, [pc, #104]	@ (8007538 <HAL_RCC_GetSysClockFreq+0xc0>)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d4:	4a16      	ldr	r2, [pc, #88]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074d6:	68d2      	ldr	r2, [r2, #12]
 80074d8:	0a12      	lsrs	r2, r2, #8
 80074da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80074de:	fb02 f303 	mul.w	r3, r2, r3
 80074e2:	617b      	str	r3, [r7, #20]
      break;
 80074e4:	e00c      	b.n	8007500 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80074e6:	4a13      	ldr	r2, [pc, #76]	@ (8007534 <HAL_RCC_GetSysClockFreq+0xbc>)
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ee:	4a10      	ldr	r2, [pc, #64]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074f0:	68d2      	ldr	r2, [r2, #12]
 80074f2:	0a12      	lsrs	r2, r2, #8
 80074f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80074f8:	fb02 f303 	mul.w	r3, r2, r3
 80074fc:	617b      	str	r3, [r7, #20]
      break;
 80074fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007500:	4b0b      	ldr	r3, [pc, #44]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	0e5b      	lsrs	r3, r3, #25
 8007506:	f003 0303 	and.w	r3, r3, #3
 800750a:	3301      	adds	r3, #1
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	fbb2 f3f3 	udiv	r3, r2, r3
 8007518:	613b      	str	r3, [r7, #16]
 800751a:	e001      	b.n	8007520 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007520:	693b      	ldr	r3, [r7, #16]
}
 8007522:	4618      	mov	r0, r3
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	40021000 	.word	0x40021000
 8007534:	00f42400 	.word	0x00f42400
 8007538:	016e3600 	.word	0x016e3600

0800753c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800753c:	b480      	push	{r7}
 800753e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007540:	4b03      	ldr	r3, [pc, #12]	@ (8007550 <HAL_RCC_GetHCLKFreq+0x14>)
 8007542:	681b      	ldr	r3, [r3, #0]
}
 8007544:	4618      	mov	r0, r3
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	20000000 	.word	0x20000000

08007554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007558:	f7ff fff0 	bl	800753c <HAL_RCC_GetHCLKFreq>
 800755c:	4602      	mov	r2, r0
 800755e:	4b06      	ldr	r3, [pc, #24]	@ (8007578 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	0a1b      	lsrs	r3, r3, #8
 8007564:	f003 0307 	and.w	r3, r3, #7
 8007568:	4904      	ldr	r1, [pc, #16]	@ (800757c <HAL_RCC_GetPCLK1Freq+0x28>)
 800756a:	5ccb      	ldrb	r3, [r1, r3]
 800756c:	f003 031f 	and.w	r3, r3, #31
 8007570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007574:	4618      	mov	r0, r3
 8007576:	bd80      	pop	{r7, pc}
 8007578:	40021000 	.word	0x40021000
 800757c:	08012bc0 	.word	0x08012bc0

08007580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007584:	f7ff ffda 	bl	800753c <HAL_RCC_GetHCLKFreq>
 8007588:	4602      	mov	r2, r0
 800758a:	4b06      	ldr	r3, [pc, #24]	@ (80075a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	0adb      	lsrs	r3, r3, #11
 8007590:	f003 0307 	and.w	r3, r3, #7
 8007594:	4904      	ldr	r1, [pc, #16]	@ (80075a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007596:	5ccb      	ldrb	r3, [r1, r3]
 8007598:	f003 031f 	and.w	r3, r3, #31
 800759c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	40021000 	.word	0x40021000
 80075a8:	08012bc0 	.word	0x08012bc0

080075ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80075b2:	4b1e      	ldr	r3, [pc, #120]	@ (800762c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f003 0303 	and.w	r3, r3, #3
 80075ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80075bc:	4b1b      	ldr	r3, [pc, #108]	@ (800762c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	091b      	lsrs	r3, r3, #4
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	3301      	adds	r3, #1
 80075c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d10c      	bne.n	80075ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80075d0:	4a17      	ldr	r2, [pc, #92]	@ (8007630 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d8:	4a14      	ldr	r2, [pc, #80]	@ (800762c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80075da:	68d2      	ldr	r2, [r2, #12]
 80075dc:	0a12      	lsrs	r2, r2, #8
 80075de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80075e2:	fb02 f303 	mul.w	r3, r2, r3
 80075e6:	617b      	str	r3, [r7, #20]
    break;
 80075e8:	e00c      	b.n	8007604 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80075ea:	4a12      	ldr	r2, [pc, #72]	@ (8007634 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f2:	4a0e      	ldr	r2, [pc, #56]	@ (800762c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80075f4:	68d2      	ldr	r2, [r2, #12]
 80075f6:	0a12      	lsrs	r2, r2, #8
 80075f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80075fc:	fb02 f303 	mul.w	r3, r2, r3
 8007600:	617b      	str	r3, [r7, #20]
    break;
 8007602:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007604:	4b09      	ldr	r3, [pc, #36]	@ (800762c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	0e5b      	lsrs	r3, r3, #25
 800760a:	f003 0303 	and.w	r3, r3, #3
 800760e:	3301      	adds	r3, #1
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	fbb2 f3f3 	udiv	r3, r2, r3
 800761c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800761e:	687b      	ldr	r3, [r7, #4]
}
 8007620:	4618      	mov	r0, r3
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	40021000 	.word	0x40021000
 8007630:	016e3600 	.word	0x016e3600
 8007634:	00f42400 	.word	0x00f42400

08007638 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007640:	2300      	movs	r3, #0
 8007642:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007644:	2300      	movs	r3, #0
 8007646:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 8098 	beq.w	8007786 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007656:	2300      	movs	r3, #0
 8007658:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800765a:	4b43      	ldr	r3, [pc, #268]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800765c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800765e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10d      	bne.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007666:	4b40      	ldr	r3, [pc, #256]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800766a:	4a3f      	ldr	r2, [pc, #252]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800766c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007670:	6593      	str	r3, [r2, #88]	@ 0x58
 8007672:	4b3d      	ldr	r3, [pc, #244]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800767a:	60bb      	str	r3, [r7, #8]
 800767c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800767e:	2301      	movs	r3, #1
 8007680:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007682:	4b3a      	ldr	r3, [pc, #232]	@ (800776c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a39      	ldr	r2, [pc, #228]	@ (800776c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800768c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800768e:	f7fb f87b 	bl	8002788 <HAL_GetTick>
 8007692:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007694:	e009      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007696:	f7fb f877 	bl	8002788 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d902      	bls.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	74fb      	strb	r3, [r7, #19]
        break;
 80076a8:	e005      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076aa:	4b30      	ldr	r3, [pc, #192]	@ (800776c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0ef      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80076b6:	7cfb      	ldrb	r3, [r7, #19]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d159      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80076bc:	4b2a      	ldr	r3, [pc, #168]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d01e      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d019      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80076d8:	4b23      	ldr	r3, [pc, #140]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80076e4:	4b20      	ldr	r3, [pc, #128]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80076f4:	4b1c      	ldr	r3, [pc, #112]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007704:	4a18      	ldr	r2, [pc, #96]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d016      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007716:	f7fb f837 	bl	8002788 <HAL_GetTick>
 800771a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800771c:	e00b      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800771e:	f7fb f833 	bl	8002788 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800772c:	4293      	cmp	r3, r2
 800772e:	d902      	bls.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	74fb      	strb	r3, [r7, #19]
            break;
 8007734:	e006      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007736:	4b0c      	ldr	r3, [pc, #48]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d0ec      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007744:	7cfb      	ldrb	r3, [r7, #19]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10b      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800774a:	4b07      	ldr	r3, [pc, #28]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800774c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007750:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007758:	4903      	ldr	r1, [pc, #12]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800775a:	4313      	orrs	r3, r2
 800775c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007760:	e008      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007762:	7cfb      	ldrb	r3, [r7, #19]
 8007764:	74bb      	strb	r3, [r7, #18]
 8007766:	e005      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007768:	40021000 	.word	0x40021000
 800776c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007770:	7cfb      	ldrb	r3, [r7, #19]
 8007772:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007774:	7c7b      	ldrb	r3, [r7, #17]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d105      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800777a:	4ba6      	ldr	r3, [pc, #664]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800777c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800777e:	4aa5      	ldr	r2, [pc, #660]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007780:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007784:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007792:	4ba0      	ldr	r3, [pc, #640]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007798:	f023 0203 	bic.w	r2, r3, #3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	499c      	ldr	r1, [pc, #624]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0302 	and.w	r3, r3, #2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00a      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80077b4:	4b97      	ldr	r3, [pc, #604]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ba:	f023 020c 	bic.w	r2, r3, #12
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	4994      	ldr	r1, [pc, #592]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0304 	and.w	r3, r3, #4
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00a      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80077d6:	4b8f      	ldr	r3, [pc, #572]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	498b      	ldr	r1, [pc, #556]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0308 	and.w	r3, r3, #8
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00a      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80077f8:	4b86      	ldr	r3, [pc, #536]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	4983      	ldr	r1, [pc, #524]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007808:	4313      	orrs	r3, r2
 800780a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800781a:	4b7e      	ldr	r3, [pc, #504]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800781c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007820:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	497a      	ldr	r1, [pc, #488]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800782a:	4313      	orrs	r3, r2
 800782c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00a      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800783c:	4b75      	ldr	r3, [pc, #468]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800783e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007842:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	4972      	ldr	r1, [pc, #456]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800784c:	4313      	orrs	r3, r2
 800784e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800785e:	4b6d      	ldr	r3, [pc, #436]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007864:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	4969      	ldr	r1, [pc, #420]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800786e:	4313      	orrs	r3, r2
 8007870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00a      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007880:	4b64      	ldr	r3, [pc, #400]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007886:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	4961      	ldr	r1, [pc, #388]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007890:	4313      	orrs	r3, r2
 8007892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078a2:	4b5c      	ldr	r3, [pc, #368]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b0:	4958      	ldr	r1, [pc, #352]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d015      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078c4:	4b53      	ldr	r3, [pc, #332]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d2:	4950      	ldr	r1, [pc, #320]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078e2:	d105      	bne.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078e4:	4b4b      	ldr	r3, [pc, #300]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	4a4a      	ldr	r2, [pc, #296]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d015      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80078fc:	4b45      	ldr	r3, [pc, #276]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007902:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790a:	4942      	ldr	r1, [pc, #264]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800790c:	4313      	orrs	r3, r2
 800790e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007916:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800791a:	d105      	bne.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800791c:	4b3d      	ldr	r3, [pc, #244]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	4a3c      	ldr	r2, [pc, #240]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007926:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d015      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007934:	4b37      	ldr	r3, [pc, #220]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800793a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007942:	4934      	ldr	r1, [pc, #208]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007944:	4313      	orrs	r3, r2
 8007946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800794e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007952:	d105      	bne.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007954:	4b2f      	ldr	r3, [pc, #188]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	4a2e      	ldr	r2, [pc, #184]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800795a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800795e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d015      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800796c:	4b29      	ldr	r3, [pc, #164]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800796e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007972:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800797a:	4926      	ldr	r1, [pc, #152]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800797c:	4313      	orrs	r3, r2
 800797e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007986:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800798a:	d105      	bne.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800798c:	4b21      	ldr	r3, [pc, #132]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	4a20      	ldr	r2, [pc, #128]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007992:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007996:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d015      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079a4:	4b1b      	ldr	r3, [pc, #108]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b2:	4918      	ldr	r1, [pc, #96]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079c2:	d105      	bne.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079c4:	4b13      	ldr	r3, [pc, #76]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	4a12      	ldr	r2, [pc, #72]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d015      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80079dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ea:	490a      	ldr	r1, [pc, #40]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079fa:	d105      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80079fc:	4b05      	ldr	r3, [pc, #20]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	4a04      	ldr	r2, [pc, #16]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a06:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007a08:	7cbb      	ldrb	r3, [r7, #18]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	40021000 	.word	0x40021000

08007a18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e09d      	b.n	8007b66 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d108      	bne.n	8007a44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a3a:	d009      	beq.n	8007a50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	61da      	str	r2, [r3, #28]
 8007a42:	e005      	b.n	8007a50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d106      	bne.n	8007a70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7fa f932 	bl	8001cd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a90:	d902      	bls.n	8007a98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007a92:	2300      	movs	r3, #0
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	e002      	b.n	8007a9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007aa6:	d007      	beq.n	8007ab8 <HAL_SPI_Init+0xa0>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007ab0:	d002      	beq.n	8007ab8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	431a      	orrs	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007af0:	431a      	orrs	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007afa:	ea42 0103 	orr.w	r1, r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b02:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	0c1b      	lsrs	r3, r3, #16
 8007b14:	f003 0204 	and.w	r2, r3, #4
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1c:	f003 0310 	and.w	r3, r3, #16
 8007b20:	431a      	orrs	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b26:	f003 0308 	and.w	r3, r3, #8
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007b34:	ea42 0103 	orr.w	r1, r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69da      	ldr	r2, [r3, #28]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b08a      	sub	sp, #40	@ 0x28
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	60f8      	str	r0, [r7, #12]
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	607a      	str	r2, [r7, #4]
 8007b7a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d101      	bne.n	8007b94 <HAL_SPI_TransmitReceive+0x26>
 8007b90:	2302      	movs	r3, #2
 8007b92:	e20a      	b.n	8007faa <HAL_SPI_TransmitReceive+0x43c>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b9c:	f7fa fdf4 	bl	8002788 <HAL_GetTick>
 8007ba0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007ba8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007bb0:	887b      	ldrh	r3, [r7, #2]
 8007bb2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007bb4:	887b      	ldrh	r3, [r7, #2]
 8007bb6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007bb8:	7efb      	ldrb	r3, [r7, #27]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d00e      	beq.n	8007bdc <HAL_SPI_TransmitReceive+0x6e>
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bc4:	d106      	bne.n	8007bd4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d102      	bne.n	8007bd4 <HAL_SPI_TransmitReceive+0x66>
 8007bce:	7efb      	ldrb	r3, [r7, #27]
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	d003      	beq.n	8007bdc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007bda:	e1e0      	b.n	8007f9e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d005      	beq.n	8007bee <HAL_SPI_TransmitReceive+0x80>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d002      	beq.n	8007bee <HAL_SPI_TransmitReceive+0x80>
 8007be8:	887b      	ldrh	r3, [r7, #2]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d103      	bne.n	8007bf6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007bf4:	e1d3      	b.n	8007f9e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d003      	beq.n	8007c0a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2205      	movs	r2, #5
 8007c06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	887a      	ldrh	r2, [r7, #2]
 8007c1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	887a      	ldrh	r2, [r7, #2]
 8007c22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	887a      	ldrh	r2, [r7, #2]
 8007c30:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	887a      	ldrh	r2, [r7, #2]
 8007c36:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c4c:	d802      	bhi.n	8007c54 <HAL_SPI_TransmitReceive+0xe6>
 8007c4e:	8a3b      	ldrh	r3, [r7, #16]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d908      	bls.n	8007c66 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007c62:	605a      	str	r2, [r3, #4]
 8007c64:	e007      	b.n	8007c76 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c74:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c80:	2b40      	cmp	r3, #64	@ 0x40
 8007c82:	d007      	beq.n	8007c94 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c9c:	f240 8081 	bls.w	8007da2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <HAL_SPI_TransmitReceive+0x140>
 8007ca8:	8a7b      	ldrh	r3, [r7, #18]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d16d      	bne.n	8007d8a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb2:	881a      	ldrh	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cbe:	1c9a      	adds	r2, r3, #2
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cd2:	e05a      	b.n	8007d8a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d11b      	bne.n	8007d1a <HAL_SPI_TransmitReceive+0x1ac>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d016      	beq.n	8007d1a <HAL_SPI_TransmitReceive+0x1ac>
 8007cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d113      	bne.n	8007d1a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf6:	881a      	ldrh	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d02:	1c9a      	adds	r2, r3, #2
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d11c      	bne.n	8007d62 <HAL_SPI_TransmitReceive+0x1f4>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d016      	beq.n	8007d62 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3e:	b292      	uxth	r2, r2
 8007d40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d46:	1c9a      	adds	r2, r3, #2
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d62:	f7fa fd11 	bl	8002788 <HAL_GetTick>
 8007d66:	4602      	mov	r2, r0
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d80b      	bhi.n	8007d8a <HAL_SPI_TransmitReceive+0x21c>
 8007d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d78:	d007      	beq.n	8007d8a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007d88:	e109      	b.n	8007f9e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d19f      	bne.n	8007cd4 <HAL_SPI_TransmitReceive+0x166>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d199      	bne.n	8007cd4 <HAL_SPI_TransmitReceive+0x166>
 8007da0:	e0e3      	b.n	8007f6a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <HAL_SPI_TransmitReceive+0x244>
 8007daa:	8a7b      	ldrh	r3, [r7, #18]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	f040 80cf 	bne.w	8007f50 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d912      	bls.n	8007de2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc0:	881a      	ldrh	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dcc:	1c9a      	adds	r2, r3, #2
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	3b02      	subs	r3, #2
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007de0:	e0b6      	b.n	8007f50 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	330c      	adds	r3, #12
 8007dec:	7812      	ldrb	r2, [r2, #0]
 8007dee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	3b01      	subs	r3, #1
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e08:	e0a2      	b.n	8007f50 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d134      	bne.n	8007e82 <HAL_SPI_TransmitReceive+0x314>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d02f      	beq.n	8007e82 <HAL_SPI_TransmitReceive+0x314>
 8007e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d12c      	bne.n	8007e82 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d912      	bls.n	8007e58 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e36:	881a      	ldrh	r2, [r3, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e42:	1c9a      	adds	r2, r3, #2
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	3b02      	subs	r3, #2
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e56:	e012      	b.n	8007e7e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	330c      	adds	r3, #12
 8007e62:	7812      	ldrb	r2, [r2, #0]
 8007e64:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d148      	bne.n	8007f22 <HAL_SPI_TransmitReceive+0x3b4>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d042      	beq.n	8007f22 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d923      	bls.n	8007ef0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68da      	ldr	r2, [r3, #12]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb2:	b292      	uxth	r2, r2
 8007eb4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eba:	1c9a      	adds	r2, r3, #2
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	3b02      	subs	r3, #2
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d81f      	bhi.n	8007f1e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007eec:	605a      	str	r2, [r3, #4]
 8007eee:	e016      	b.n	8007f1e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f103 020c 	add.w	r2, r3, #12
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007efc:	7812      	ldrb	r2, [r2, #0]
 8007efe:	b2d2      	uxtb	r2, r2
 8007f00:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	3b01      	subs	r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f22:	f7fa fc31 	bl	8002788 <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d803      	bhi.n	8007f3a <HAL_SPI_TransmitReceive+0x3cc>
 8007f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f38:	d102      	bne.n	8007f40 <HAL_SPI_TransmitReceive+0x3d2>
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d107      	bne.n	8007f50 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007f4e:	e026      	b.n	8007f9e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f47f af57 	bne.w	8007e0a <HAL_SPI_TransmitReceive+0x29c>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f47f af50 	bne.w	8007e0a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 f94c 	bl	800820c <SPI_EndRxTxTransaction>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d005      	beq.n	8007f86 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2220      	movs	r2, #32
 8007f84:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f94:	e003      	b.n	8007f9e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3728      	adds	r7, #40	@ 0x28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b083      	sub	sp, #12
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007fc0:	b2db      	uxtb	r3, r3
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
	...

08007fd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	603b      	str	r3, [r7, #0]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007fe0:	f7fa fbd2 	bl	8002788 <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe8:	1a9b      	subs	r3, r3, r2
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	4413      	add	r3, r2
 8007fee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ff0:	f7fa fbca 	bl	8002788 <HAL_GetTick>
 8007ff4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ff6:	4b39      	ldr	r3, [pc, #228]	@ (80080dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	015b      	lsls	r3, r3, #5
 8007ffc:	0d1b      	lsrs	r3, r3, #20
 8007ffe:	69fa      	ldr	r2, [r7, #28]
 8008000:	fb02 f303 	mul.w	r3, r2, r3
 8008004:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008006:	e054      	b.n	80080b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800e:	d050      	beq.n	80080b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008010:	f7fa fbba 	bl	8002788 <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	69fa      	ldr	r2, [r7, #28]
 800801c:	429a      	cmp	r2, r3
 800801e:	d902      	bls.n	8008026 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d13d      	bne.n	80080a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008034:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800803e:	d111      	bne.n	8008064 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008048:	d004      	beq.n	8008054 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008052:	d107      	bne.n	8008064 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008062:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800806c:	d10f      	bne.n	800808e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800808c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e017      	b.n	80080d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80080a8:	2300      	movs	r3, #0
 80080aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	3b01      	subs	r3, #1
 80080b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	689a      	ldr	r2, [r3, #8]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	4013      	ands	r3, r2
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	429a      	cmp	r2, r3
 80080c0:	bf0c      	ite	eq
 80080c2:	2301      	moveq	r3, #1
 80080c4:	2300      	movne	r3, #0
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	461a      	mov	r2, r3
 80080ca:	79fb      	ldrb	r3, [r7, #7]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d19b      	bne.n	8008008 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3720      	adds	r7, #32
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000000 	.word	0x20000000

080080e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08a      	sub	sp, #40	@ 0x28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80080ee:	2300      	movs	r3, #0
 80080f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80080f2:	f7fa fb49 	bl	8002788 <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fa:	1a9b      	subs	r3, r3, r2
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	4413      	add	r3, r2
 8008100:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008102:	f7fa fb41 	bl	8002788 <HAL_GetTick>
 8008106:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	330c      	adds	r3, #12
 800810e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008110:	4b3d      	ldr	r3, [pc, #244]	@ (8008208 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	4613      	mov	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	00da      	lsls	r2, r3, #3
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	0d1b      	lsrs	r3, r3, #20
 8008120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008122:	fb02 f303 	mul.w	r3, r2, r3
 8008126:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008128:	e060      	b.n	80081ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008130:	d107      	bne.n	8008142 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d104      	bne.n	8008142 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	b2db      	uxtb	r3, r3
 800813e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008140:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008148:	d050      	beq.n	80081ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800814a:	f7fa fb1d 	bl	8002788 <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008156:	429a      	cmp	r2, r3
 8008158:	d902      	bls.n	8008160 <SPI_WaitFifoStateUntilTimeout+0x80>
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	2b00      	cmp	r3, #0
 800815e:	d13d      	bne.n	80081dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800816e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008178:	d111      	bne.n	800819e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008182:	d004      	beq.n	800818e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800818c:	d107      	bne.n	800819e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800819c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081a6:	d10f      	bne.n	80081c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80081b6:	601a      	str	r2, [r3, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80081c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e010      	b.n	80081fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	3b01      	subs	r3, #1
 80081ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689a      	ldr	r2, [r3, #8]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	4013      	ands	r3, r2
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d196      	bne.n	800812a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3728      	adds	r7, #40	@ 0x28
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	20000000 	.word	0x20000000

0800820c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af02      	add	r7, sp, #8
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2200      	movs	r2, #0
 8008220:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7ff ff5b 	bl	80080e0 <SPI_WaitFifoStateUntilTimeout>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d007      	beq.n	8008240 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008234:	f043 0220 	orr.w	r2, r3, #32
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e027      	b.n	8008290 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2200      	movs	r2, #0
 8008248:	2180      	movs	r1, #128	@ 0x80
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f7ff fec0 	bl	8007fd0 <SPI_WaitFlagStateUntilTimeout>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d007      	beq.n	8008266 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800825a:	f043 0220 	orr.w	r2, r3, #32
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e014      	b.n	8008290 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2200      	movs	r2, #0
 800826e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f7ff ff34 	bl	80080e0 <SPI_WaitFifoStateUntilTimeout>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d007      	beq.n	800828e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008282:	f043 0220 	orr.w	r2, r3, #32
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e000      	b.n	8008290 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e049      	b.n	800833e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d106      	bne.n	80082c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7fa f80a 	bl	80022d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4619      	mov	r1, r3
 80082d6:	4610      	mov	r0, r2
 80082d8:	f000 fc9e 	bl	8008c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b01      	cmp	r3, #1
 800835a:	d001      	beq.n	8008360 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e042      	b.n	80083e6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a21      	ldr	r2, [pc, #132]	@ (80083f4 <HAL_TIM_Base_Start+0xac>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d018      	beq.n	80083a4 <HAL_TIM_Base_Start+0x5c>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800837a:	d013      	beq.n	80083a4 <HAL_TIM_Base_Start+0x5c>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a1d      	ldr	r2, [pc, #116]	@ (80083f8 <HAL_TIM_Base_Start+0xb0>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d00e      	beq.n	80083a4 <HAL_TIM_Base_Start+0x5c>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a1c      	ldr	r2, [pc, #112]	@ (80083fc <HAL_TIM_Base_Start+0xb4>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d009      	beq.n	80083a4 <HAL_TIM_Base_Start+0x5c>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a1a      	ldr	r2, [pc, #104]	@ (8008400 <HAL_TIM_Base_Start+0xb8>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d004      	beq.n	80083a4 <HAL_TIM_Base_Start+0x5c>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a19      	ldr	r2, [pc, #100]	@ (8008404 <HAL_TIM_Base_Start+0xbc>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d115      	bne.n	80083d0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689a      	ldr	r2, [r3, #8]
 80083aa:	4b17      	ldr	r3, [pc, #92]	@ (8008408 <HAL_TIM_Base_Start+0xc0>)
 80083ac:	4013      	ands	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b06      	cmp	r3, #6
 80083b4:	d015      	beq.n	80083e2 <HAL_TIM_Base_Start+0x9a>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083bc:	d011      	beq.n	80083e2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f042 0201 	orr.w	r2, r2, #1
 80083cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ce:	e008      	b.n	80083e2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f042 0201 	orr.w	r2, r2, #1
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	e000      	b.n	80083e4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	40012c00 	.word	0x40012c00
 80083f8:	40000400 	.word	0x40000400
 80083fc:	40000800 	.word	0x40000800
 8008400:	40013400 	.word	0x40013400
 8008404:	40014000 	.word	0x40014000
 8008408:	00010007 	.word	0x00010007

0800840c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e049      	b.n	80084b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d106      	bne.n	8008438 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f841 	bl	80084ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3304      	adds	r3, #4
 8008448:	4619      	mov	r1, r3
 800844a:	4610      	mov	r0, r2
 800844c:	f000 fbe4 	bl	8008c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80084c2:	bf00      	nop
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
	...

080084d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d109      	bne.n	80084f4 <HAL_TIM_PWM_Start+0x24>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	bf14      	ite	ne
 80084ec:	2301      	movne	r3, #1
 80084ee:	2300      	moveq	r3, #0
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	e03c      	b.n	800856e <HAL_TIM_PWM_Start+0x9e>
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d109      	bne.n	800850e <HAL_TIM_PWM_Start+0x3e>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b01      	cmp	r3, #1
 8008504:	bf14      	ite	ne
 8008506:	2301      	movne	r3, #1
 8008508:	2300      	moveq	r3, #0
 800850a:	b2db      	uxtb	r3, r3
 800850c:	e02f      	b.n	800856e <HAL_TIM_PWM_Start+0x9e>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b08      	cmp	r3, #8
 8008512:	d109      	bne.n	8008528 <HAL_TIM_PWM_Start+0x58>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b01      	cmp	r3, #1
 800851e:	bf14      	ite	ne
 8008520:	2301      	movne	r3, #1
 8008522:	2300      	moveq	r3, #0
 8008524:	b2db      	uxtb	r3, r3
 8008526:	e022      	b.n	800856e <HAL_TIM_PWM_Start+0x9e>
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2b0c      	cmp	r3, #12
 800852c:	d109      	bne.n	8008542 <HAL_TIM_PWM_Start+0x72>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b01      	cmp	r3, #1
 8008538:	bf14      	ite	ne
 800853a:	2301      	movne	r3, #1
 800853c:	2300      	moveq	r3, #0
 800853e:	b2db      	uxtb	r3, r3
 8008540:	e015      	b.n	800856e <HAL_TIM_PWM_Start+0x9e>
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b10      	cmp	r3, #16
 8008546:	d109      	bne.n	800855c <HAL_TIM_PWM_Start+0x8c>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b01      	cmp	r3, #1
 8008552:	bf14      	ite	ne
 8008554:	2301      	movne	r3, #1
 8008556:	2300      	moveq	r3, #0
 8008558:	b2db      	uxtb	r3, r3
 800855a:	e008      	b.n	800856e <HAL_TIM_PWM_Start+0x9e>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b01      	cmp	r3, #1
 8008566:	bf14      	ite	ne
 8008568:	2301      	movne	r3, #1
 800856a:	2300      	moveq	r3, #0
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d001      	beq.n	8008576 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e097      	b.n	80086a6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d104      	bne.n	8008586 <HAL_TIM_PWM_Start+0xb6>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2202      	movs	r2, #2
 8008580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008584:	e023      	b.n	80085ce <HAL_TIM_PWM_Start+0xfe>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2b04      	cmp	r3, #4
 800858a:	d104      	bne.n	8008596 <HAL_TIM_PWM_Start+0xc6>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2202      	movs	r2, #2
 8008590:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008594:	e01b      	b.n	80085ce <HAL_TIM_PWM_Start+0xfe>
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b08      	cmp	r3, #8
 800859a:	d104      	bne.n	80085a6 <HAL_TIM_PWM_Start+0xd6>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085a4:	e013      	b.n	80085ce <HAL_TIM_PWM_Start+0xfe>
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b0c      	cmp	r3, #12
 80085aa:	d104      	bne.n	80085b6 <HAL_TIM_PWM_Start+0xe6>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085b4:	e00b      	b.n	80085ce <HAL_TIM_PWM_Start+0xfe>
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2b10      	cmp	r3, #16
 80085ba:	d104      	bne.n	80085c6 <HAL_TIM_PWM_Start+0xf6>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2202      	movs	r2, #2
 80085c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085c4:	e003      	b.n	80085ce <HAL_TIM_PWM_Start+0xfe>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2202      	movs	r2, #2
 80085ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2201      	movs	r2, #1
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 ffb4 	bl	8009544 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a33      	ldr	r2, [pc, #204]	@ (80086b0 <HAL_TIM_PWM_Start+0x1e0>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d013      	beq.n	800860e <HAL_TIM_PWM_Start+0x13e>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a32      	ldr	r2, [pc, #200]	@ (80086b4 <HAL_TIM_PWM_Start+0x1e4>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d00e      	beq.n	800860e <HAL_TIM_PWM_Start+0x13e>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a30      	ldr	r2, [pc, #192]	@ (80086b8 <HAL_TIM_PWM_Start+0x1e8>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d009      	beq.n	800860e <HAL_TIM_PWM_Start+0x13e>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a2f      	ldr	r2, [pc, #188]	@ (80086bc <HAL_TIM_PWM_Start+0x1ec>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d004      	beq.n	800860e <HAL_TIM_PWM_Start+0x13e>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a2d      	ldr	r2, [pc, #180]	@ (80086c0 <HAL_TIM_PWM_Start+0x1f0>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d101      	bne.n	8008612 <HAL_TIM_PWM_Start+0x142>
 800860e:	2301      	movs	r3, #1
 8008610:	e000      	b.n	8008614 <HAL_TIM_PWM_Start+0x144>
 8008612:	2300      	movs	r3, #0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d007      	beq.n	8008628 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008626:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a20      	ldr	r2, [pc, #128]	@ (80086b0 <HAL_TIM_PWM_Start+0x1e0>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d018      	beq.n	8008664 <HAL_TIM_PWM_Start+0x194>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800863a:	d013      	beq.n	8008664 <HAL_TIM_PWM_Start+0x194>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a20      	ldr	r2, [pc, #128]	@ (80086c4 <HAL_TIM_PWM_Start+0x1f4>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d00e      	beq.n	8008664 <HAL_TIM_PWM_Start+0x194>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a1f      	ldr	r2, [pc, #124]	@ (80086c8 <HAL_TIM_PWM_Start+0x1f8>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d009      	beq.n	8008664 <HAL_TIM_PWM_Start+0x194>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a17      	ldr	r2, [pc, #92]	@ (80086b4 <HAL_TIM_PWM_Start+0x1e4>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d004      	beq.n	8008664 <HAL_TIM_PWM_Start+0x194>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a16      	ldr	r2, [pc, #88]	@ (80086b8 <HAL_TIM_PWM_Start+0x1e8>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d115      	bne.n	8008690 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689a      	ldr	r2, [r3, #8]
 800866a:	4b18      	ldr	r3, [pc, #96]	@ (80086cc <HAL_TIM_PWM_Start+0x1fc>)
 800866c:	4013      	ands	r3, r2
 800866e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2b06      	cmp	r3, #6
 8008674:	d015      	beq.n	80086a2 <HAL_TIM_PWM_Start+0x1d2>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800867c:	d011      	beq.n	80086a2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f042 0201 	orr.w	r2, r2, #1
 800868c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800868e:	e008      	b.n	80086a2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0201 	orr.w	r2, r2, #1
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	e000      	b.n	80086a4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	40012c00 	.word	0x40012c00
 80086b4:	40013400 	.word	0x40013400
 80086b8:	40014000 	.word	0x40014000
 80086bc:	40014400 	.word	0x40014400
 80086c0:	40014800 	.word	0x40014800
 80086c4:	40000400 	.word	0x40000400
 80086c8:	40000800 	.word	0x40000800
 80086cc:	00010007 	.word	0x00010007

080086d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2200      	movs	r2, #0
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 ff2e 	bl	8009544 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a3e      	ldr	r2, [pc, #248]	@ (80087e8 <HAL_TIM_PWM_Stop+0x118>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d013      	beq.n	800871a <HAL_TIM_PWM_Stop+0x4a>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a3d      	ldr	r2, [pc, #244]	@ (80087ec <HAL_TIM_PWM_Stop+0x11c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00e      	beq.n	800871a <HAL_TIM_PWM_Stop+0x4a>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a3b      	ldr	r2, [pc, #236]	@ (80087f0 <HAL_TIM_PWM_Stop+0x120>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d009      	beq.n	800871a <HAL_TIM_PWM_Stop+0x4a>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a3a      	ldr	r2, [pc, #232]	@ (80087f4 <HAL_TIM_PWM_Stop+0x124>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d004      	beq.n	800871a <HAL_TIM_PWM_Stop+0x4a>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a38      	ldr	r2, [pc, #224]	@ (80087f8 <HAL_TIM_PWM_Stop+0x128>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d101      	bne.n	800871e <HAL_TIM_PWM_Stop+0x4e>
 800871a:	2301      	movs	r3, #1
 800871c:	e000      	b.n	8008720 <HAL_TIM_PWM_Stop+0x50>
 800871e:	2300      	movs	r3, #0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d017      	beq.n	8008754 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6a1a      	ldr	r2, [r3, #32]
 800872a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800872e:	4013      	ands	r3, r2
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10f      	bne.n	8008754 <HAL_TIM_PWM_Stop+0x84>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6a1a      	ldr	r2, [r3, #32]
 800873a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800873e:	4013      	ands	r3, r2
 8008740:	2b00      	cmp	r3, #0
 8008742:	d107      	bne.n	8008754 <HAL_TIM_PWM_Stop+0x84>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008752:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6a1a      	ldr	r2, [r3, #32]
 800875a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800875e:	4013      	ands	r3, r2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10f      	bne.n	8008784 <HAL_TIM_PWM_Stop+0xb4>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6a1a      	ldr	r2, [r3, #32]
 800876a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800876e:	4013      	ands	r3, r2
 8008770:	2b00      	cmp	r3, #0
 8008772:	d107      	bne.n	8008784 <HAL_TIM_PWM_Stop+0xb4>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f022 0201 	bic.w	r2, r2, #1
 8008782:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d104      	bne.n	8008794 <HAL_TIM_PWM_Stop+0xc4>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008792:	e023      	b.n	80087dc <HAL_TIM_PWM_Stop+0x10c>
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2b04      	cmp	r3, #4
 8008798:	d104      	bne.n	80087a4 <HAL_TIM_PWM_Stop+0xd4>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087a2:	e01b      	b.n	80087dc <HAL_TIM_PWM_Stop+0x10c>
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2b08      	cmp	r3, #8
 80087a8:	d104      	bne.n	80087b4 <HAL_TIM_PWM_Stop+0xe4>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087b2:	e013      	b.n	80087dc <HAL_TIM_PWM_Stop+0x10c>
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2b0c      	cmp	r3, #12
 80087b8:	d104      	bne.n	80087c4 <HAL_TIM_PWM_Stop+0xf4>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087c2:	e00b      	b.n	80087dc <HAL_TIM_PWM_Stop+0x10c>
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	2b10      	cmp	r3, #16
 80087c8:	d104      	bne.n	80087d4 <HAL_TIM_PWM_Stop+0x104>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087d2:	e003      	b.n	80087dc <HAL_TIM_PWM_Stop+0x10c>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	40012c00 	.word	0x40012c00
 80087ec:	40013400 	.word	0x40013400
 80087f0:	40014000 	.word	0x40014000
 80087f4:	40014400 	.word	0x40014400
 80087f8:	40014800 	.word	0x40014800

080087fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008812:	2b01      	cmp	r3, #1
 8008814:	d101      	bne.n	800881a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008816:	2302      	movs	r3, #2
 8008818:	e0ff      	b.n	8008a1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b14      	cmp	r3, #20
 8008826:	f200 80f0 	bhi.w	8008a0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800882a:	a201      	add	r2, pc, #4	@ (adr r2, 8008830 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	08008885 	.word	0x08008885
 8008834:	08008a0b 	.word	0x08008a0b
 8008838:	08008a0b 	.word	0x08008a0b
 800883c:	08008a0b 	.word	0x08008a0b
 8008840:	080088c5 	.word	0x080088c5
 8008844:	08008a0b 	.word	0x08008a0b
 8008848:	08008a0b 	.word	0x08008a0b
 800884c:	08008a0b 	.word	0x08008a0b
 8008850:	08008907 	.word	0x08008907
 8008854:	08008a0b 	.word	0x08008a0b
 8008858:	08008a0b 	.word	0x08008a0b
 800885c:	08008a0b 	.word	0x08008a0b
 8008860:	08008947 	.word	0x08008947
 8008864:	08008a0b 	.word	0x08008a0b
 8008868:	08008a0b 	.word	0x08008a0b
 800886c:	08008a0b 	.word	0x08008a0b
 8008870:	08008989 	.word	0x08008989
 8008874:	08008a0b 	.word	0x08008a0b
 8008878:	08008a0b 	.word	0x08008a0b
 800887c:	08008a0b 	.word	0x08008a0b
 8008880:	080089c9 	.word	0x080089c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68b9      	ldr	r1, [r7, #8]
 800888a:	4618      	mov	r0, r3
 800888c:	f000 fa60 	bl	8008d50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	699a      	ldr	r2, [r3, #24]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0208 	orr.w	r2, r2, #8
 800889e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	699a      	ldr	r2, [r3, #24]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 0204 	bic.w	r2, r2, #4
 80088ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6999      	ldr	r1, [r3, #24]
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	691a      	ldr	r2, [r3, #16]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	430a      	orrs	r2, r1
 80088c0:	619a      	str	r2, [r3, #24]
      break;
 80088c2:	e0a5      	b.n	8008a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68b9      	ldr	r1, [r7, #8]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 fad0 	bl	8008e70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	699a      	ldr	r2, [r3, #24]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	699a      	ldr	r2, [r3, #24]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6999      	ldr	r1, [r3, #24]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	021a      	lsls	r2, r3, #8
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	430a      	orrs	r2, r1
 8008902:	619a      	str	r2, [r3, #24]
      break;
 8008904:	e084      	b.n	8008a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68b9      	ldr	r1, [r7, #8]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 fb39 	bl	8008f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69da      	ldr	r2, [r3, #28]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f042 0208 	orr.w	r2, r2, #8
 8008920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	69da      	ldr	r2, [r3, #28]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f022 0204 	bic.w	r2, r2, #4
 8008930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	69d9      	ldr	r1, [r3, #28]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	691a      	ldr	r2, [r3, #16]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	61da      	str	r2, [r3, #28]
      break;
 8008944:	e064      	b.n	8008a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68b9      	ldr	r1, [r7, #8]
 800894c:	4618      	mov	r0, r3
 800894e:	f000 fba1 	bl	8009094 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	69da      	ldr	r2, [r3, #28]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	69da      	ldr	r2, [r3, #28]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	69d9      	ldr	r1, [r3, #28]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	021a      	lsls	r2, r3, #8
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	61da      	str	r2, [r3, #28]
      break;
 8008986:	e043      	b.n	8008a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68b9      	ldr	r1, [r7, #8]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 fc0a 	bl	80091a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f042 0208 	orr.w	r2, r2, #8
 80089a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f022 0204 	bic.w	r2, r2, #4
 80089b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	691a      	ldr	r2, [r3, #16]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80089c6:	e023      	b.n	8008a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68b9      	ldr	r1, [r7, #8]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 fc4e 	bl	8009270 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	021a      	lsls	r2, r3, #8
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	430a      	orrs	r2, r1
 8008a06:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008a08:	e002      	b.n	8008a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3718      	adds	r7, #24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop

08008a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d101      	bne.n	8008a40 <HAL_TIM_ConfigClockSource+0x1c>
 8008a3c:	2302      	movs	r3, #2
 8008a3e:	e0de      	b.n	8008bfe <HAL_TIM_ConfigClockSource+0x1da>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008a5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a63      	ldr	r2, [pc, #396]	@ (8008c08 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	f000 80a9 	beq.w	8008bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008a80:	4a61      	ldr	r2, [pc, #388]	@ (8008c08 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	f200 80ae 	bhi.w	8008be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008a88:	4a60      	ldr	r2, [pc, #384]	@ (8008c0c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	f000 80a1 	beq.w	8008bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008a90:	4a5e      	ldr	r2, [pc, #376]	@ (8008c0c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	f200 80a6 	bhi.w	8008be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008a98:	4a5d      	ldr	r2, [pc, #372]	@ (8008c10 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	f000 8099 	beq.w	8008bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008aa0:	4a5b      	ldr	r2, [pc, #364]	@ (8008c10 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	f200 809e 	bhi.w	8008be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8008c14 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	f000 8091 	beq.w	8008bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008ab0:	4a58      	ldr	r2, [pc, #352]	@ (8008c14 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	f200 8096 	bhi.w	8008be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008ab8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008abc:	f000 8089 	beq.w	8008bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008ac0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008ac4:	f200 808e 	bhi.w	8008be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008acc:	d03e      	beq.n	8008b4c <HAL_TIM_ConfigClockSource+0x128>
 8008ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ad2:	f200 8087 	bhi.w	8008be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ada:	f000 8086 	beq.w	8008bea <HAL_TIM_ConfigClockSource+0x1c6>
 8008ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ae2:	d87f      	bhi.n	8008be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008ae4:	2b70      	cmp	r3, #112	@ 0x70
 8008ae6:	d01a      	beq.n	8008b1e <HAL_TIM_ConfigClockSource+0xfa>
 8008ae8:	2b70      	cmp	r3, #112	@ 0x70
 8008aea:	d87b      	bhi.n	8008be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008aec:	2b60      	cmp	r3, #96	@ 0x60
 8008aee:	d050      	beq.n	8008b92 <HAL_TIM_ConfigClockSource+0x16e>
 8008af0:	2b60      	cmp	r3, #96	@ 0x60
 8008af2:	d877      	bhi.n	8008be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008af4:	2b50      	cmp	r3, #80	@ 0x50
 8008af6:	d03c      	beq.n	8008b72 <HAL_TIM_ConfigClockSource+0x14e>
 8008af8:	2b50      	cmp	r3, #80	@ 0x50
 8008afa:	d873      	bhi.n	8008be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008afc:	2b40      	cmp	r3, #64	@ 0x40
 8008afe:	d058      	beq.n	8008bb2 <HAL_TIM_ConfigClockSource+0x18e>
 8008b00:	2b40      	cmp	r3, #64	@ 0x40
 8008b02:	d86f      	bhi.n	8008be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008b04:	2b30      	cmp	r3, #48	@ 0x30
 8008b06:	d064      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008b08:	2b30      	cmp	r3, #48	@ 0x30
 8008b0a:	d86b      	bhi.n	8008be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008b0c:	2b20      	cmp	r3, #32
 8008b0e:	d060      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008b10:	2b20      	cmp	r3, #32
 8008b12:	d867      	bhi.n	8008be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d05c      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008b18:	2b10      	cmp	r3, #16
 8008b1a:	d05a      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008b1c:	e062      	b.n	8008be4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b2e:	f000 fce9 	bl	8009504 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008b40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	609a      	str	r2, [r3, #8]
      break;
 8008b4a:	e04f      	b.n	8008bec <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b5c:	f000 fcd2 	bl	8009504 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689a      	ldr	r2, [r3, #8]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b6e:	609a      	str	r2, [r3, #8]
      break;
 8008b70:	e03c      	b.n	8008bec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b7e:	461a      	mov	r2, r3
 8008b80:	f000 fc44 	bl	800940c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2150      	movs	r1, #80	@ 0x50
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 fc9d 	bl	80094ca <TIM_ITRx_SetConfig>
      break;
 8008b90:	e02c      	b.n	8008bec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	f000 fc63 	bl	800946a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2160      	movs	r1, #96	@ 0x60
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fc8d 	bl	80094ca <TIM_ITRx_SetConfig>
      break;
 8008bb0:	e01c      	b.n	8008bec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f000 fc24 	bl	800940c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2140      	movs	r1, #64	@ 0x40
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 fc7d 	bl	80094ca <TIM_ITRx_SetConfig>
      break;
 8008bd0:	e00c      	b.n	8008bec <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	4610      	mov	r0, r2
 8008bde:	f000 fc74 	bl	80094ca <TIM_ITRx_SetConfig>
      break;
 8008be2:	e003      	b.n	8008bec <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	73fb      	strb	r3, [r7, #15]
      break;
 8008be8:	e000      	b.n	8008bec <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008bea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	00100070 	.word	0x00100070
 8008c0c:	00100040 	.word	0x00100040
 8008c10:	00100030 	.word	0x00100030
 8008c14:	00100020 	.word	0x00100020

08008c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a42      	ldr	r2, [pc, #264]	@ (8008d34 <TIM_Base_SetConfig+0x11c>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d00f      	beq.n	8008c50 <TIM_Base_SetConfig+0x38>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c36:	d00b      	beq.n	8008c50 <TIM_Base_SetConfig+0x38>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a3f      	ldr	r2, [pc, #252]	@ (8008d38 <TIM_Base_SetConfig+0x120>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d007      	beq.n	8008c50 <TIM_Base_SetConfig+0x38>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a3e      	ldr	r2, [pc, #248]	@ (8008d3c <TIM_Base_SetConfig+0x124>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d003      	beq.n	8008c50 <TIM_Base_SetConfig+0x38>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a3d      	ldr	r2, [pc, #244]	@ (8008d40 <TIM_Base_SetConfig+0x128>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d108      	bne.n	8008c62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a33      	ldr	r2, [pc, #204]	@ (8008d34 <TIM_Base_SetConfig+0x11c>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d01b      	beq.n	8008ca2 <TIM_Base_SetConfig+0x8a>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c70:	d017      	beq.n	8008ca2 <TIM_Base_SetConfig+0x8a>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a30      	ldr	r2, [pc, #192]	@ (8008d38 <TIM_Base_SetConfig+0x120>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d013      	beq.n	8008ca2 <TIM_Base_SetConfig+0x8a>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a2f      	ldr	r2, [pc, #188]	@ (8008d3c <TIM_Base_SetConfig+0x124>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d00f      	beq.n	8008ca2 <TIM_Base_SetConfig+0x8a>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a2e      	ldr	r2, [pc, #184]	@ (8008d40 <TIM_Base_SetConfig+0x128>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d00b      	beq.n	8008ca2 <TIM_Base_SetConfig+0x8a>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a2d      	ldr	r2, [pc, #180]	@ (8008d44 <TIM_Base_SetConfig+0x12c>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d007      	beq.n	8008ca2 <TIM_Base_SetConfig+0x8a>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a2c      	ldr	r2, [pc, #176]	@ (8008d48 <TIM_Base_SetConfig+0x130>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d003      	beq.n	8008ca2 <TIM_Base_SetConfig+0x8a>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8008d4c <TIM_Base_SetConfig+0x134>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d108      	bne.n	8008cb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	689a      	ldr	r2, [r3, #8]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a16      	ldr	r2, [pc, #88]	@ (8008d34 <TIM_Base_SetConfig+0x11c>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d00f      	beq.n	8008d00 <TIM_Base_SetConfig+0xe8>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a17      	ldr	r2, [pc, #92]	@ (8008d40 <TIM_Base_SetConfig+0x128>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d00b      	beq.n	8008d00 <TIM_Base_SetConfig+0xe8>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a16      	ldr	r2, [pc, #88]	@ (8008d44 <TIM_Base_SetConfig+0x12c>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d007      	beq.n	8008d00 <TIM_Base_SetConfig+0xe8>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a15      	ldr	r2, [pc, #84]	@ (8008d48 <TIM_Base_SetConfig+0x130>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d003      	beq.n	8008d00 <TIM_Base_SetConfig+0xe8>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a14      	ldr	r2, [pc, #80]	@ (8008d4c <TIM_Base_SetConfig+0x134>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d103      	bne.n	8008d08 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	691a      	ldr	r2, [r3, #16]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d105      	bne.n	8008d26 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	f023 0201 	bic.w	r2, r3, #1
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	611a      	str	r2, [r3, #16]
  }
}
 8008d26:	bf00      	nop
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	40012c00 	.word	0x40012c00
 8008d38:	40000400 	.word	0x40000400
 8008d3c:	40000800 	.word	0x40000800
 8008d40:	40013400 	.word	0x40013400
 8008d44:	40014000 	.word	0x40014000
 8008d48:	40014400 	.word	0x40014400
 8008d4c:	40014800 	.word	0x40014800

08008d50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b087      	sub	sp, #28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a1b      	ldr	r3, [r3, #32]
 8008d64:	f023 0201 	bic.w	r2, r3, #1
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 0303 	bic.w	r3, r3, #3
 8008d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f023 0302 	bic.w	r3, r3, #2
 8008d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a2c      	ldr	r2, [pc, #176]	@ (8008e5c <TIM_OC1_SetConfig+0x10c>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d00f      	beq.n	8008dd0 <TIM_OC1_SetConfig+0x80>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a2b      	ldr	r2, [pc, #172]	@ (8008e60 <TIM_OC1_SetConfig+0x110>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d00b      	beq.n	8008dd0 <TIM_OC1_SetConfig+0x80>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a2a      	ldr	r2, [pc, #168]	@ (8008e64 <TIM_OC1_SetConfig+0x114>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d007      	beq.n	8008dd0 <TIM_OC1_SetConfig+0x80>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a29      	ldr	r2, [pc, #164]	@ (8008e68 <TIM_OC1_SetConfig+0x118>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d003      	beq.n	8008dd0 <TIM_OC1_SetConfig+0x80>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a28      	ldr	r2, [pc, #160]	@ (8008e6c <TIM_OC1_SetConfig+0x11c>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d10c      	bne.n	8008dea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	f023 0308 	bic.w	r3, r3, #8
 8008dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f023 0304 	bic.w	r3, r3, #4
 8008de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a1b      	ldr	r2, [pc, #108]	@ (8008e5c <TIM_OC1_SetConfig+0x10c>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d00f      	beq.n	8008e12 <TIM_OC1_SetConfig+0xc2>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a1a      	ldr	r2, [pc, #104]	@ (8008e60 <TIM_OC1_SetConfig+0x110>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d00b      	beq.n	8008e12 <TIM_OC1_SetConfig+0xc2>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a19      	ldr	r2, [pc, #100]	@ (8008e64 <TIM_OC1_SetConfig+0x114>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d007      	beq.n	8008e12 <TIM_OC1_SetConfig+0xc2>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a18      	ldr	r2, [pc, #96]	@ (8008e68 <TIM_OC1_SetConfig+0x118>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d003      	beq.n	8008e12 <TIM_OC1_SetConfig+0xc2>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a17      	ldr	r2, [pc, #92]	@ (8008e6c <TIM_OC1_SetConfig+0x11c>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d111      	bne.n	8008e36 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	621a      	str	r2, [r3, #32]
}
 8008e50:	bf00      	nop
 8008e52:	371c      	adds	r7, #28
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	40012c00 	.word	0x40012c00
 8008e60:	40013400 	.word	0x40013400
 8008e64:	40014000 	.word	0x40014000
 8008e68:	40014400 	.word	0x40014400
 8008e6c:	40014800 	.word	0x40014800

08008e70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a1b      	ldr	r3, [r3, #32]
 8008e84:	f023 0210 	bic.w	r2, r3, #16
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	021b      	lsls	r3, r3, #8
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f023 0320 	bic.w	r3, r3, #32
 8008ebe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	011b      	lsls	r3, r3, #4
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a28      	ldr	r2, [pc, #160]	@ (8008f70 <TIM_OC2_SetConfig+0x100>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d003      	beq.n	8008edc <TIM_OC2_SetConfig+0x6c>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a27      	ldr	r2, [pc, #156]	@ (8008f74 <TIM_OC2_SetConfig+0x104>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d10d      	bne.n	8008ef8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	011b      	lsls	r3, r3, #4
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ef6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a1d      	ldr	r2, [pc, #116]	@ (8008f70 <TIM_OC2_SetConfig+0x100>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d00f      	beq.n	8008f20 <TIM_OC2_SetConfig+0xb0>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a1c      	ldr	r2, [pc, #112]	@ (8008f74 <TIM_OC2_SetConfig+0x104>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d00b      	beq.n	8008f20 <TIM_OC2_SetConfig+0xb0>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8008f78 <TIM_OC2_SetConfig+0x108>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d007      	beq.n	8008f20 <TIM_OC2_SetConfig+0xb0>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a1a      	ldr	r2, [pc, #104]	@ (8008f7c <TIM_OC2_SetConfig+0x10c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d003      	beq.n	8008f20 <TIM_OC2_SetConfig+0xb0>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a19      	ldr	r2, [pc, #100]	@ (8008f80 <TIM_OC2_SetConfig+0x110>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d113      	bne.n	8008f48 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	621a      	str	r2, [r3, #32]
}
 8008f62:	bf00      	nop
 8008f64:	371c      	adds	r7, #28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	40012c00 	.word	0x40012c00
 8008f74:	40013400 	.word	0x40013400
 8008f78:	40014000 	.word	0x40014000
 8008f7c:	40014400 	.word	0x40014400
 8008f80:	40014800 	.word	0x40014800

08008f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b087      	sub	sp, #28
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a1b      	ldr	r3, [r3, #32]
 8008f98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	69db      	ldr	r3, [r3, #28]
 8008faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f023 0303 	bic.w	r3, r3, #3
 8008fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	021b      	lsls	r3, r3, #8
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a27      	ldr	r2, [pc, #156]	@ (8009080 <TIM_OC3_SetConfig+0xfc>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d003      	beq.n	8008fee <TIM_OC3_SetConfig+0x6a>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a26      	ldr	r2, [pc, #152]	@ (8009084 <TIM_OC3_SetConfig+0x100>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d10d      	bne.n	800900a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	021b      	lsls	r3, r3, #8
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a1c      	ldr	r2, [pc, #112]	@ (8009080 <TIM_OC3_SetConfig+0xfc>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d00f      	beq.n	8009032 <TIM_OC3_SetConfig+0xae>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a1b      	ldr	r2, [pc, #108]	@ (8009084 <TIM_OC3_SetConfig+0x100>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d00b      	beq.n	8009032 <TIM_OC3_SetConfig+0xae>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a1a      	ldr	r2, [pc, #104]	@ (8009088 <TIM_OC3_SetConfig+0x104>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d007      	beq.n	8009032 <TIM_OC3_SetConfig+0xae>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a19      	ldr	r2, [pc, #100]	@ (800908c <TIM_OC3_SetConfig+0x108>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d003      	beq.n	8009032 <TIM_OC3_SetConfig+0xae>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a18      	ldr	r2, [pc, #96]	@ (8009090 <TIM_OC3_SetConfig+0x10c>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d113      	bne.n	800905a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	695b      	ldr	r3, [r3, #20]
 8009046:	011b      	lsls	r3, r3, #4
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	4313      	orrs	r3, r2
 800904c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	011b      	lsls	r3, r3, #4
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	4313      	orrs	r3, r2
 8009058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	697a      	ldr	r2, [r7, #20]
 8009072:	621a      	str	r2, [r3, #32]
}
 8009074:	bf00      	nop
 8009076:	371c      	adds	r7, #28
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr
 8009080:	40012c00 	.word	0x40012c00
 8009084:	40013400 	.word	0x40013400
 8009088:	40014000 	.word	0x40014000
 800908c:	40014400 	.word	0x40014400
 8009090:	40014800 	.word	0x40014800

08009094 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009094:	b480      	push	{r7}
 8009096:	b087      	sub	sp, #28
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a1b      	ldr	r3, [r3, #32]
 80090a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a1b      	ldr	r3, [r3, #32]
 80090a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	021b      	lsls	r3, r3, #8
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	4313      	orrs	r3, r2
 80090da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80090e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	031b      	lsls	r3, r3, #12
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a28      	ldr	r2, [pc, #160]	@ (8009194 <TIM_OC4_SetConfig+0x100>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d003      	beq.n	8009100 <TIM_OC4_SetConfig+0x6c>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a27      	ldr	r2, [pc, #156]	@ (8009198 <TIM_OC4_SetConfig+0x104>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d10d      	bne.n	800911c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	031b      	lsls	r3, r3, #12
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	4313      	orrs	r3, r2
 8009112:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800911a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a1d      	ldr	r2, [pc, #116]	@ (8009194 <TIM_OC4_SetConfig+0x100>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d00f      	beq.n	8009144 <TIM_OC4_SetConfig+0xb0>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a1c      	ldr	r2, [pc, #112]	@ (8009198 <TIM_OC4_SetConfig+0x104>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d00b      	beq.n	8009144 <TIM_OC4_SetConfig+0xb0>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a1b      	ldr	r2, [pc, #108]	@ (800919c <TIM_OC4_SetConfig+0x108>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d007      	beq.n	8009144 <TIM_OC4_SetConfig+0xb0>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a1a      	ldr	r2, [pc, #104]	@ (80091a0 <TIM_OC4_SetConfig+0x10c>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d003      	beq.n	8009144 <TIM_OC4_SetConfig+0xb0>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a19      	ldr	r2, [pc, #100]	@ (80091a4 <TIM_OC4_SetConfig+0x110>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d113      	bne.n	800916c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800914a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009152:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	695b      	ldr	r3, [r3, #20]
 8009158:	019b      	lsls	r3, r3, #6
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	4313      	orrs	r3, r2
 800915e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	019b      	lsls	r3, r3, #6
 8009166:	693a      	ldr	r2, [r7, #16]
 8009168:	4313      	orrs	r3, r2
 800916a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	621a      	str	r2, [r3, #32]
}
 8009186:	bf00      	nop
 8009188:	371c      	adds	r7, #28
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	40012c00 	.word	0x40012c00
 8009198:	40013400 	.word	0x40013400
 800919c:	40014000 	.word	0x40014000
 80091a0:	40014400 	.word	0x40014400
 80091a4:	40014800 	.word	0x40014800

080091a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
 80091bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80091ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	041b      	lsls	r3, r3, #16
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a17      	ldr	r2, [pc, #92]	@ (800925c <TIM_OC5_SetConfig+0xb4>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d00f      	beq.n	8009222 <TIM_OC5_SetConfig+0x7a>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a16      	ldr	r2, [pc, #88]	@ (8009260 <TIM_OC5_SetConfig+0xb8>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d00b      	beq.n	8009222 <TIM_OC5_SetConfig+0x7a>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a15      	ldr	r2, [pc, #84]	@ (8009264 <TIM_OC5_SetConfig+0xbc>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d007      	beq.n	8009222 <TIM_OC5_SetConfig+0x7a>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a14      	ldr	r2, [pc, #80]	@ (8009268 <TIM_OC5_SetConfig+0xc0>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d003      	beq.n	8009222 <TIM_OC5_SetConfig+0x7a>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a13      	ldr	r2, [pc, #76]	@ (800926c <TIM_OC5_SetConfig+0xc4>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d109      	bne.n	8009236 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009228:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	021b      	lsls	r3, r3, #8
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	4313      	orrs	r3, r2
 8009234:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	621a      	str	r2, [r3, #32]
}
 8009250:	bf00      	nop
 8009252:	371c      	adds	r7, #28
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	40012c00 	.word	0x40012c00
 8009260:	40013400 	.word	0x40013400
 8009264:	40014000 	.word	0x40014000
 8009268:	40014400 	.word	0x40014400
 800926c:	40014800 	.word	0x40014800

08009270 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800929e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	021b      	lsls	r3, r3, #8
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80092b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	051b      	lsls	r3, r3, #20
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a18      	ldr	r2, [pc, #96]	@ (8009328 <TIM_OC6_SetConfig+0xb8>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d00f      	beq.n	80092ec <TIM_OC6_SetConfig+0x7c>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a17      	ldr	r2, [pc, #92]	@ (800932c <TIM_OC6_SetConfig+0xbc>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d00b      	beq.n	80092ec <TIM_OC6_SetConfig+0x7c>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a16      	ldr	r2, [pc, #88]	@ (8009330 <TIM_OC6_SetConfig+0xc0>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d007      	beq.n	80092ec <TIM_OC6_SetConfig+0x7c>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a15      	ldr	r2, [pc, #84]	@ (8009334 <TIM_OC6_SetConfig+0xc4>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d003      	beq.n	80092ec <TIM_OC6_SetConfig+0x7c>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a14      	ldr	r2, [pc, #80]	@ (8009338 <TIM_OC6_SetConfig+0xc8>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d109      	bne.n	8009300 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	695b      	ldr	r3, [r3, #20]
 80092f8:	029b      	lsls	r3, r3, #10
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	621a      	str	r2, [r3, #32]
}
 800931a:	bf00      	nop
 800931c:	371c      	adds	r7, #28
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
 8009326:	bf00      	nop
 8009328:	40012c00 	.word	0x40012c00
 800932c:	40013400 	.word	0x40013400
 8009330:	40014000 	.word	0x40014000
 8009334:	40014400 	.word	0x40014400
 8009338:	40014800 	.word	0x40014800

0800933c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800933c:	b480      	push	{r7}
 800933e:	b087      	sub	sp, #28
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6a1b      	ldr	r3, [r3, #32]
 800934e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6a1b      	ldr	r3, [r3, #32]
 8009354:	f023 0201 	bic.w	r2, r3, #1
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	4a24      	ldr	r2, [pc, #144]	@ (80093f8 <TIM_TI1_SetConfig+0xbc>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d013      	beq.n	8009392 <TIM_TI1_SetConfig+0x56>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009370:	d00f      	beq.n	8009392 <TIM_TI1_SetConfig+0x56>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	4a21      	ldr	r2, [pc, #132]	@ (80093fc <TIM_TI1_SetConfig+0xc0>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d00b      	beq.n	8009392 <TIM_TI1_SetConfig+0x56>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	4a20      	ldr	r2, [pc, #128]	@ (8009400 <TIM_TI1_SetConfig+0xc4>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d007      	beq.n	8009392 <TIM_TI1_SetConfig+0x56>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	4a1f      	ldr	r2, [pc, #124]	@ (8009404 <TIM_TI1_SetConfig+0xc8>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d003      	beq.n	8009392 <TIM_TI1_SetConfig+0x56>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	4a1e      	ldr	r2, [pc, #120]	@ (8009408 <TIM_TI1_SetConfig+0xcc>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d101      	bne.n	8009396 <TIM_TI1_SetConfig+0x5a>
 8009392:	2301      	movs	r3, #1
 8009394:	e000      	b.n	8009398 <TIM_TI1_SetConfig+0x5c>
 8009396:	2300      	movs	r3, #0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d008      	beq.n	80093ae <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	f023 0303 	bic.w	r3, r3, #3
 80093a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	617b      	str	r3, [r7, #20]
 80093ac:	e003      	b.n	80093b6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f043 0301 	orr.w	r3, r3, #1
 80093b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80093bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	011b      	lsls	r3, r3, #4
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	f023 030a 	bic.w	r3, r3, #10
 80093d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	f003 030a 	and.w	r3, r3, #10
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	4313      	orrs	r3, r2
 80093dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	693a      	ldr	r2, [r7, #16]
 80093e8:	621a      	str	r2, [r3, #32]
}
 80093ea:	bf00      	nop
 80093ec:	371c      	adds	r7, #28
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	40012c00 	.word	0x40012c00
 80093fc:	40000400 	.word	0x40000400
 8009400:	40000800 	.word	0x40000800
 8009404:	40013400 	.word	0x40013400
 8009408:	40014000 	.word	0x40014000

0800940c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6a1b      	ldr	r3, [r3, #32]
 800941c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	f023 0201 	bic.w	r2, r3, #1
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	011b      	lsls	r3, r3, #4
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	4313      	orrs	r3, r2
 8009440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f023 030a 	bic.w	r3, r3, #10
 8009448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4313      	orrs	r3, r2
 8009450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	693a      	ldr	r2, [r7, #16]
 8009456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	621a      	str	r2, [r3, #32]
}
 800945e:	bf00      	nop
 8009460:	371c      	adds	r7, #28
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800946a:	b480      	push	{r7}
 800946c:	b087      	sub	sp, #28
 800946e:	af00      	add	r7, sp, #0
 8009470:	60f8      	str	r0, [r7, #12]
 8009472:	60b9      	str	r1, [r7, #8]
 8009474:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6a1b      	ldr	r3, [r3, #32]
 800947a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6a1b      	ldr	r3, [r3, #32]
 8009480:	f023 0210 	bic.w	r2, r3, #16
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	031b      	lsls	r3, r3, #12
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	4313      	orrs	r3, r2
 800949e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80094a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	011b      	lsls	r3, r3, #4
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	621a      	str	r2, [r3, #32]
}
 80094be:	bf00      	nop
 80094c0:	371c      	adds	r7, #28
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b085      	sub	sp, #20
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80094e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	f043 0307 	orr.w	r3, r3, #7
 80094f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	609a      	str	r2, [r3, #8]
}
 80094f8:	bf00      	nop
 80094fa:	3714      	adds	r7, #20
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009504:	b480      	push	{r7}
 8009506:	b087      	sub	sp, #28
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800951e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	021a      	lsls	r2, r3, #8
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	431a      	orrs	r2, r3
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	4313      	orrs	r3, r2
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	4313      	orrs	r3, r2
 8009530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	609a      	str	r2, [r3, #8]
}
 8009538:	bf00      	nop
 800953a:	371c      	adds	r7, #28
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009544:	b480      	push	{r7}
 8009546:	b087      	sub	sp, #28
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	f003 031f 	and.w	r3, r3, #31
 8009556:	2201      	movs	r2, #1
 8009558:	fa02 f303 	lsl.w	r3, r2, r3
 800955c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6a1a      	ldr	r2, [r3, #32]
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	43db      	mvns	r3, r3
 8009566:	401a      	ands	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6a1a      	ldr	r2, [r3, #32]
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	f003 031f 	and.w	r3, r3, #31
 8009576:	6879      	ldr	r1, [r7, #4]
 8009578:	fa01 f303 	lsl.w	r3, r1, r3
 800957c:	431a      	orrs	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	621a      	str	r2, [r3, #32]
}
 8009582:	bf00      	nop
 8009584:	371c      	adds	r7, #28
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b08a      	sub	sp, #40	@ 0x28
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d101      	bne.n	80095a2 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e0a0      	b.n	80096e4 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d106      	bne.n	80095bc <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f898 	bl	80096ec <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2202      	movs	r2, #2
 80095c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	3304      	adds	r3, #4
 80095cc:	4619      	mov	r1, r3
 80095ce:	4610      	mov	r0, r2
 80095d0:	f7ff fb22 	bl	8008c18 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6818      	ldr	r0, [r3, #0]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	6819      	ldr	r1, [r3, #0]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	2203      	movs	r2, #3
 80095e2:	f7ff feab 	bl	800933c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	699a      	ldr	r2, [r3, #24]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f022 020c 	bic.w	r2, r2, #12
 80095f4:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6999      	ldr	r1, [r3, #24]
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	685a      	ldr	r2, [r3, #4]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	430a      	orrs	r2, r1
 8009606:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009616:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	6812      	ldr	r2, [r2, #0]
 8009622:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800962a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689a      	ldr	r2, [r3, #8]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800963a:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	6812      	ldr	r2, [r2, #0]
 8009646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800964a:	f023 0307 	bic.w	r3, r3, #7
 800964e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689a      	ldr	r2, [r3, #8]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f042 0204 	orr.w	r2, r2, #4
 800965e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8009660:	2300      	movs	r3, #0
 8009662:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009664:	2300      	movs	r3, #0
 8009666:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8009668:	2370      	movs	r3, #112	@ 0x70
 800966a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800966c:	2300      	movs	r3, #0
 800966e:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009670:	2300      	movs	r3, #0
 8009672:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009674:	2300      	movs	r3, #0
 8009676:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f107 020c 	add.w	r2, r7, #12
 8009686:	4611      	mov	r1, r2
 8009688:	4618      	mov	r0, r3
 800968a:	f7ff fbf1 	bl	8008e70 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	6812      	ldr	r2, [r2, #0]
 8009698:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800969c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096a0:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80096b0:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2201      	movs	r2, #1
 80096be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3728      	adds	r7, #40	@ 0x28
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d109      	bne.n	8009724 <HAL_TIMEx_PWMN_Start+0x24>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b01      	cmp	r3, #1
 800971a:	bf14      	ite	ne
 800971c:	2301      	movne	r3, #1
 800971e:	2300      	moveq	r3, #0
 8009720:	b2db      	uxtb	r3, r3
 8009722:	e022      	b.n	800976a <HAL_TIMEx_PWMN_Start+0x6a>
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	2b04      	cmp	r3, #4
 8009728:	d109      	bne.n	800973e <HAL_TIMEx_PWMN_Start+0x3e>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b01      	cmp	r3, #1
 8009734:	bf14      	ite	ne
 8009736:	2301      	movne	r3, #1
 8009738:	2300      	moveq	r3, #0
 800973a:	b2db      	uxtb	r3, r3
 800973c:	e015      	b.n	800976a <HAL_TIMEx_PWMN_Start+0x6a>
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2b08      	cmp	r3, #8
 8009742:	d109      	bne.n	8009758 <HAL_TIMEx_PWMN_Start+0x58>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800974a:	b2db      	uxtb	r3, r3
 800974c:	2b01      	cmp	r3, #1
 800974e:	bf14      	ite	ne
 8009750:	2301      	movne	r3, #1
 8009752:	2300      	moveq	r3, #0
 8009754:	b2db      	uxtb	r3, r3
 8009756:	e008      	b.n	800976a <HAL_TIMEx_PWMN_Start+0x6a>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b01      	cmp	r3, #1
 8009762:	bf14      	ite	ne
 8009764:	2301      	movne	r3, #1
 8009766:	2300      	moveq	r3, #0
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e069      	b.n	8009846 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d104      	bne.n	8009782 <HAL_TIMEx_PWMN_Start+0x82>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2202      	movs	r2, #2
 800977c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009780:	e013      	b.n	80097aa <HAL_TIMEx_PWMN_Start+0xaa>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b04      	cmp	r3, #4
 8009786:	d104      	bne.n	8009792 <HAL_TIMEx_PWMN_Start+0x92>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009790:	e00b      	b.n	80097aa <HAL_TIMEx_PWMN_Start+0xaa>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b08      	cmp	r3, #8
 8009796:	d104      	bne.n	80097a2 <HAL_TIMEx_PWMN_Start+0xa2>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2202      	movs	r2, #2
 800979c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80097a0:	e003      	b.n	80097aa <HAL_TIMEx_PWMN_Start+0xaa>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2202      	movs	r2, #2
 80097a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2204      	movs	r2, #4
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 fa9c 	bl	8009cf0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80097c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a20      	ldr	r2, [pc, #128]	@ (8009850 <HAL_TIMEx_PWMN_Start+0x150>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d018      	beq.n	8009804 <HAL_TIMEx_PWMN_Start+0x104>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097da:	d013      	beq.n	8009804 <HAL_TIMEx_PWMN_Start+0x104>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a1c      	ldr	r2, [pc, #112]	@ (8009854 <HAL_TIMEx_PWMN_Start+0x154>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d00e      	beq.n	8009804 <HAL_TIMEx_PWMN_Start+0x104>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009858 <HAL_TIMEx_PWMN_Start+0x158>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d009      	beq.n	8009804 <HAL_TIMEx_PWMN_Start+0x104>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a19      	ldr	r2, [pc, #100]	@ (800985c <HAL_TIMEx_PWMN_Start+0x15c>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d004      	beq.n	8009804 <HAL_TIMEx_PWMN_Start+0x104>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a18      	ldr	r2, [pc, #96]	@ (8009860 <HAL_TIMEx_PWMN_Start+0x160>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d115      	bne.n	8009830 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	689a      	ldr	r2, [r3, #8]
 800980a:	4b16      	ldr	r3, [pc, #88]	@ (8009864 <HAL_TIMEx_PWMN_Start+0x164>)
 800980c:	4013      	ands	r3, r2
 800980e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2b06      	cmp	r3, #6
 8009814:	d015      	beq.n	8009842 <HAL_TIMEx_PWMN_Start+0x142>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800981c:	d011      	beq.n	8009842 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f042 0201 	orr.w	r2, r2, #1
 800982c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800982e:	e008      	b.n	8009842 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f042 0201 	orr.w	r2, r2, #1
 800983e:	601a      	str	r2, [r3, #0]
 8009840:	e000      	b.n	8009844 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009842:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	40012c00 	.word	0x40012c00
 8009854:	40000400 	.word	0x40000400
 8009858:	40000800 	.word	0x40000800
 800985c:	40013400 	.word	0x40013400
 8009860:	40014000 	.word	0x40014000
 8009864:	00010007 	.word	0x00010007

08009868 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2200      	movs	r2, #0
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fa38 	bl	8009cf0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6a1a      	ldr	r2, [r3, #32]
 8009886:	f241 1311 	movw	r3, #4369	@ 0x1111
 800988a:	4013      	ands	r3, r2
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10f      	bne.n	80098b0 <HAL_TIMEx_PWMN_Stop+0x48>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6a1a      	ldr	r2, [r3, #32]
 8009896:	f244 4344 	movw	r3, #17476	@ 0x4444
 800989a:	4013      	ands	r3, r2
 800989c:	2b00      	cmp	r3, #0
 800989e:	d107      	bne.n	80098b0 <HAL_TIMEx_PWMN_Stop+0x48>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80098ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6a1a      	ldr	r2, [r3, #32]
 80098b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80098ba:	4013      	ands	r3, r2
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10f      	bne.n	80098e0 <HAL_TIMEx_PWMN_Stop+0x78>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6a1a      	ldr	r2, [r3, #32]
 80098c6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80098ca:	4013      	ands	r3, r2
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d107      	bne.n	80098e0 <HAL_TIMEx_PWMN_Stop+0x78>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f022 0201 	bic.w	r2, r2, #1
 80098de:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d104      	bne.n	80098f0 <HAL_TIMEx_PWMN_Stop+0x88>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098ee:	e013      	b.n	8009918 <HAL_TIMEx_PWMN_Stop+0xb0>
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	2b04      	cmp	r3, #4
 80098f4:	d104      	bne.n	8009900 <HAL_TIMEx_PWMN_Stop+0x98>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098fe:	e00b      	b.n	8009918 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	2b08      	cmp	r3, #8
 8009904:	d104      	bne.n	8009910 <HAL_TIMEx_PWMN_Stop+0xa8>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800990e:	e003      	b.n	8009918 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
	...

08009924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009934:	2b01      	cmp	r3, #1
 8009936:	d101      	bne.n	800993c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009938:	2302      	movs	r3, #2
 800993a:	e065      	b.n	8009a08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2202      	movs	r2, #2
 8009948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a2c      	ldr	r2, [pc, #176]	@ (8009a14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d004      	beq.n	8009970 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a2b      	ldr	r2, [pc, #172]	@ (8009a18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d108      	bne.n	8009982 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009976:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	4313      	orrs	r3, r2
 8009980:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009988:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800998c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	4313      	orrs	r3, r2
 8009996:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a1b      	ldr	r2, [pc, #108]	@ (8009a14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d018      	beq.n	80099dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099b2:	d013      	beq.n	80099dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a18      	ldr	r2, [pc, #96]	@ (8009a1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d00e      	beq.n	80099dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a17      	ldr	r2, [pc, #92]	@ (8009a20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d009      	beq.n	80099dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a12      	ldr	r2, [pc, #72]	@ (8009a18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d004      	beq.n	80099dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a13      	ldr	r2, [pc, #76]	@ (8009a24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d10c      	bne.n	80099f6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	40012c00 	.word	0x40012c00
 8009a18:	40013400 	.word	0x40013400
 8009a1c:	40000400 	.word	0x40000400
 8009a20:	40000800 	.word	0x40000800
 8009a24:	40014000 	.word	0x40014000

08009a28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a32:	2300      	movs	r3, #0
 8009a34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d101      	bne.n	8009a44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a40:	2302      	movs	r3, #2
 8009a42:	e073      	b.n	8009b2c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	695b      	ldr	r3, [r3, #20]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	041b      	lsls	r3, r3, #16
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	69db      	ldr	r3, [r3, #28]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a19      	ldr	r2, [pc, #100]	@ (8009b38 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d004      	beq.n	8009ae0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a18      	ldr	r2, [pc, #96]	@ (8009b3c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d11c      	bne.n	8009b1a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aea:	051b      	lsls	r3, r3, #20
 8009aec:	4313      	orrs	r3, r2
 8009aee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	6a1b      	ldr	r3, [r3, #32]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b16:	4313      	orrs	r3, r2
 8009b18:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	40012c00 	.word	0x40012c00
 8009b3c:	40013400 	.word	0x40013400

08009b40 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b08b      	sub	sp, #44	@ 0x2c
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d101      	bne.n	8009b60 <HAL_TIMEx_ConfigBreakInput+0x20>
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	e0c1      	b.n	8009ce4 <HAL_TIMEx_ConfigBreakInput+0x1a4>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	2b0f      	cmp	r3, #15
 8009b70:	d854      	bhi.n	8009c1c <HAL_TIMEx_ConfigBreakInput+0xdc>
 8009b72:	a201      	add	r2, pc, #4	@ (adr r2, 8009b78 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8009b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b78:	08009bb9 	.word	0x08009bb9
 8009b7c:	08009bcd 	.word	0x08009bcd
 8009b80:	08009c1d 	.word	0x08009c1d
 8009b84:	08009be1 	.word	0x08009be1
 8009b88:	08009c1d 	.word	0x08009c1d
 8009b8c:	08009c1d 	.word	0x08009c1d
 8009b90:	08009c1d 	.word	0x08009c1d
 8009b94:	08009bf5 	.word	0x08009bf5
 8009b98:	08009c1d 	.word	0x08009c1d
 8009b9c:	08009c1d 	.word	0x08009c1d
 8009ba0:	08009c1d 	.word	0x08009c1d
 8009ba4:	08009c1d 	.word	0x08009c1d
 8009ba8:	08009c1d 	.word	0x08009c1d
 8009bac:	08009c1d 	.word	0x08009c1d
 8009bb0:	08009c1d 	.word	0x08009c1d
 8009bb4:	08009c09 	.word	0x08009c09
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8009bc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bc4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8009bc6:	2309      	movs	r3, #9
 8009bc8:	617b      	str	r3, [r7, #20]
      break;
 8009bca:	e030      	b.n	8009c2e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8009bcc:	2302      	movs	r3, #2
 8009bce:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8009bd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bd8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8009bda:	230a      	movs	r3, #10
 8009bdc:	617b      	str	r3, [r7, #20]
      break;
 8009bde:	e026      	b.n	8009c2e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8009be0:	2304      	movs	r3, #4
 8009be2:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8009be4:	2302      	movs	r3, #2
 8009be6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8009be8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009bec:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8009bee:	230b      	movs	r3, #11
 8009bf0:	617b      	str	r3, [r7, #20]
      break;
 8009bf2:	e01c      	b.n	8009c2e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8009bf4:	2308      	movs	r3, #8
 8009bf6:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8009bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c00:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8009c02:	230c      	movs	r3, #12
 8009c04:	617b      	str	r3, [r7, #20]
      break;
 8009c06:	e012      	b.n	8009c2e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 8009c08:	2310      	movs	r3, #16
 8009c0a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8009c0c:	2304      	movs	r3, #4
 8009c0e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8009c10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009c14:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8009c16:	230d      	movs	r3, #13
 8009c18:	617b      	str	r3, [r7, #20]
      break;
 8009c1a:	e008      	b.n	8009c2e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8009c20:	2300      	movs	r3, #0
 8009c22:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	617b      	str	r3, [r7, #20]
      break;
 8009c2c:	bf00      	nop
    }
  }

  switch (BreakInput)
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d003      	beq.n	8009c3c <HAL_TIMEx_ConfigBreakInput+0xfc>
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d025      	beq.n	8009c86 <HAL_TIMEx_ConfigBreakInput+0x146>
 8009c3a:	e049      	b.n	8009cd0 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c42:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009c44:	6a3b      	ldr	r3, [r7, #32]
 8009c46:	43db      	mvns	r3, r3
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685a      	ldr	r2, [r3, #4]
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	409a      	lsls	r2, r3
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	4013      	ands	r3, r2
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	43db      	mvns	r3, r3
 8009c64:	693a      	ldr	r2, [r7, #16]
 8009c66:	4013      	ands	r3, r2
 8009c68:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	689a      	ldr	r2, [r3, #8]
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	409a      	lsls	r2, r3
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	4013      	ands	r3, r2
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8009c84:	e028      	b.n	8009cd8 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c8c:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	43db      	mvns	r3, r3
 8009c92:	693a      	ldr	r2, [r7, #16]
 8009c94:	4013      	ands	r3, r2
 8009c96:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	409a      	lsls	r2, r3
 8009ca0:	6a3b      	ldr	r3, [r7, #32]
 8009ca2:	4013      	ands	r3, r2
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	43db      	mvns	r3, r3
 8009cae:	693a      	ldr	r2, [r7, #16]
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	689a      	ldr	r2, [r3, #8]
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	409a      	lsls	r2, r3
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8009cce:	e003      	b.n	8009cd8 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8009cd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	372c      	adds	r7, #44	@ 0x2c
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b087      	sub	sp, #28
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	f003 030f 	and.w	r3, r3, #15
 8009d02:	2204      	movs	r2, #4
 8009d04:	fa02 f303 	lsl.w	r3, r2, r3
 8009d08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6a1a      	ldr	r2, [r3, #32]
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	43db      	mvns	r3, r3
 8009d12:	401a      	ands	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6a1a      	ldr	r2, [r3, #32]
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	f003 030f 	and.w	r3, r3, #15
 8009d22:	6879      	ldr	r1, [r7, #4]
 8009d24:	fa01 f303 	lsl.w	r3, r1, r3
 8009d28:	431a      	orrs	r2, r3
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	621a      	str	r2, [r3, #32]
}
 8009d2e:	bf00      	nop
 8009d30:	371c      	adds	r7, #28
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d101      	bne.n	8009d4c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e042      	b.n	8009dd2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d106      	bne.n	8009d64 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f7f8 fbc6 	bl	80024f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2224      	movs	r2, #36	@ 0x24
 8009d68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f022 0201 	bic.w	r2, r2, #1
 8009d7a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d002      	beq.n	8009d8a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 ff6f 	bl	800ac68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fca0 	bl	800a6d0 <UART_SetConfig>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d101      	bne.n	8009d9a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	e01b      	b.n	8009dd2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009da8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	689a      	ldr	r2, [r3, #8]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009db8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f042 0201 	orr.w	r2, r2, #1
 8009dc8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 ffee 	bl	800adac <UART_CheckIdleState>
 8009dd0:	4603      	mov	r3, r0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b08a      	sub	sp, #40	@ 0x28
 8009dde:	af02      	add	r7, sp, #8
 8009de0:	60f8      	str	r0, [r7, #12]
 8009de2:	60b9      	str	r1, [r7, #8]
 8009de4:	603b      	str	r3, [r7, #0]
 8009de6:	4613      	mov	r3, r2
 8009de8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009df0:	2b20      	cmp	r3, #32
 8009df2:	d17b      	bne.n	8009eec <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d002      	beq.n	8009e00 <HAL_UART_Transmit+0x26>
 8009dfa:	88fb      	ldrh	r3, [r7, #6]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d101      	bne.n	8009e04 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	e074      	b.n	8009eee <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2221      	movs	r2, #33	@ 0x21
 8009e10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e14:	f7f8 fcb8 	bl	8002788 <HAL_GetTick>
 8009e18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	88fa      	ldrh	r2, [r7, #6]
 8009e1e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	88fa      	ldrh	r2, [r7, #6]
 8009e26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e32:	d108      	bne.n	8009e46 <HAL_UART_Transmit+0x6c>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d104      	bne.n	8009e46 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	61bb      	str	r3, [r7, #24]
 8009e44:	e003      	b.n	8009e4e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009e4e:	e030      	b.n	8009eb2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	2200      	movs	r2, #0
 8009e58:	2180      	movs	r1, #128	@ 0x80
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f001 f850 	bl	800af00 <UART_WaitOnFlagUntilTimeout>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d005      	beq.n	8009e72 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2220      	movs	r2, #32
 8009e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	e03d      	b.n	8009eee <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10b      	bne.n	8009e90 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	881b      	ldrh	r3, [r3, #0]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e86:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	3302      	adds	r3, #2
 8009e8c:	61bb      	str	r3, [r7, #24]
 8009e8e:	e007      	b.n	8009ea0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	781a      	ldrb	r2, [r3, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1c8      	bne.n	8009e50 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2140      	movs	r1, #64	@ 0x40
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f001 f819 	bl	800af00 <UART_WaitOnFlagUntilTimeout>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d005      	beq.n	8009ee0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2220      	movs	r2, #32
 8009ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e006      	b.n	8009eee <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2220      	movs	r2, #32
 8009ee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	e000      	b.n	8009eee <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009eec:	2302      	movs	r3, #2
  }
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3720      	adds	r7, #32
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b08a      	sub	sp, #40	@ 0x28
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	4613      	mov	r3, r2
 8009f04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f0c:	2b20      	cmp	r3, #32
 8009f0e:	d167      	bne.n	8009fe0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d002      	beq.n	8009f1c <HAL_UART_Transmit_DMA+0x24>
 8009f16:	88fb      	ldrh	r3, [r7, #6]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d101      	bne.n	8009f20 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e060      	b.n	8009fe2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	88fa      	ldrh	r2, [r7, #6]
 8009f2a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	88fa      	ldrh	r2, [r7, #6]
 8009f32:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2221      	movs	r2, #33	@ 0x21
 8009f42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d028      	beq.n	8009fa0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f52:	4a26      	ldr	r2, [pc, #152]	@ (8009fec <HAL_UART_Transmit_DMA+0xf4>)
 8009f54:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f5a:	4a25      	ldr	r2, [pc, #148]	@ (8009ff0 <HAL_UART_Transmit_DMA+0xf8>)
 8009f5c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f62:	4a24      	ldr	r2, [pc, #144]	@ (8009ff4 <HAL_UART_Transmit_DMA+0xfc>)
 8009f64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f76:	4619      	mov	r1, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3328      	adds	r3, #40	@ 0x28
 8009f7e:	461a      	mov	r2, r3
 8009f80:	88fb      	ldrh	r3, [r7, #6]
 8009f82:	f7fb fe89 	bl	8005c98 <HAL_DMA_Start_IT>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d009      	beq.n	8009fa0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2210      	movs	r2, #16
 8009f90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2220      	movs	r2, #32
 8009f98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e020      	b.n	8009fe2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2240      	movs	r2, #64	@ 0x40
 8009fa6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	3308      	adds	r3, #8
 8009fae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	e853 3f00 	ldrex	r3, [r3]
 8009fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fc8:	623a      	str	r2, [r7, #32]
 8009fca:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fcc:	69f9      	ldr	r1, [r7, #28]
 8009fce:	6a3a      	ldr	r2, [r7, #32]
 8009fd0:	e841 2300 	strex	r3, r2, [r1]
 8009fd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1e5      	bne.n	8009fa8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	e000      	b.n	8009fe2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009fe0:	2302      	movs	r3, #2
  }
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3728      	adds	r7, #40	@ 0x28
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	0800b277 	.word	0x0800b277
 8009ff0:	0800b311 	.word	0x0800b311
 8009ff4:	0800b497 	.word	0x0800b497

08009ff8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b0ba      	sub	sp, #232	@ 0xe8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	69db      	ldr	r3, [r3, #28]
 800a006:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a01e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a022:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a026:	4013      	ands	r3, r2
 800a028:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a02c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a030:	2b00      	cmp	r3, #0
 800a032:	d11b      	bne.n	800a06c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a038:	f003 0320 	and.w	r3, r3, #32
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d015      	beq.n	800a06c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a044:	f003 0320 	and.w	r3, r3, #32
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d105      	bne.n	800a058 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a04c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d009      	beq.n	800a06c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 82e3 	beq.w	800a628 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	4798      	blx	r3
      }
      return;
 800a06a:	e2dd      	b.n	800a628 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a06c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a070:	2b00      	cmp	r3, #0
 800a072:	f000 8123 	beq.w	800a2bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a076:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a07a:	4b8d      	ldr	r3, [pc, #564]	@ (800a2b0 <HAL_UART_IRQHandler+0x2b8>)
 800a07c:	4013      	ands	r3, r2
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d106      	bne.n	800a090 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a082:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a086:	4b8b      	ldr	r3, [pc, #556]	@ (800a2b4 <HAL_UART_IRQHandler+0x2bc>)
 800a088:	4013      	ands	r3, r2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f000 8116 	beq.w	800a2bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a094:	f003 0301 	and.w	r3, r3, #1
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d011      	beq.n	800a0c0 <HAL_UART_IRQHandler+0xc8>
 800a09c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00b      	beq.n	800a0c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0b6:	f043 0201 	orr.w	r2, r3, #1
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0c4:	f003 0302 	and.w	r3, r3, #2
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d011      	beq.n	800a0f0 <HAL_UART_IRQHandler+0xf8>
 800a0cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0d0:	f003 0301 	and.w	r3, r3, #1
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00b      	beq.n	800a0f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2202      	movs	r2, #2
 800a0de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0e6:	f043 0204 	orr.w	r2, r3, #4
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0f4:	f003 0304 	and.w	r3, r3, #4
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d011      	beq.n	800a120 <HAL_UART_IRQHandler+0x128>
 800a0fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00b      	beq.n	800a120 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2204      	movs	r2, #4
 800a10e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a116:	f043 0202 	orr.w	r2, r3, #2
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a124:	f003 0308 	and.w	r3, r3, #8
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d017      	beq.n	800a15c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a12c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a130:	f003 0320 	and.w	r3, r3, #32
 800a134:	2b00      	cmp	r3, #0
 800a136:	d105      	bne.n	800a144 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a138:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a13c:	4b5c      	ldr	r3, [pc, #368]	@ (800a2b0 <HAL_UART_IRQHandler+0x2b8>)
 800a13e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00b      	beq.n	800a15c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2208      	movs	r2, #8
 800a14a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a152:	f043 0208 	orr.w	r2, r3, #8
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a15c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a164:	2b00      	cmp	r3, #0
 800a166:	d012      	beq.n	800a18e <HAL_UART_IRQHandler+0x196>
 800a168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a16c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00c      	beq.n	800a18e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a17c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a184:	f043 0220 	orr.w	r2, r3, #32
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 8249 	beq.w	800a62c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a19e:	f003 0320 	and.w	r3, r3, #32
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d013      	beq.n	800a1ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a1a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1aa:	f003 0320 	and.w	r3, r3, #32
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d105      	bne.n	800a1be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a1b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d007      	beq.n	800a1ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1e2:	2b40      	cmp	r3, #64	@ 0x40
 800a1e4:	d005      	beq.n	800a1f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a1e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a1ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d054      	beq.n	800a29c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 ffd9 	bl	800b1aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a202:	2b40      	cmp	r3, #64	@ 0x40
 800a204:	d146      	bne.n	800a294 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3308      	adds	r3, #8
 800a20c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a210:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a214:	e853 3f00 	ldrex	r3, [r3]
 800a218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a21c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a224:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3308      	adds	r3, #8
 800a22e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a232:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a23e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a242:	e841 2300 	strex	r3, r2, [r1]
 800a246:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a24a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1d9      	bne.n	800a206 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d017      	beq.n	800a28c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a262:	4a15      	ldr	r2, [pc, #84]	@ (800a2b8 <HAL_UART_IRQHandler+0x2c0>)
 800a264:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7fb fde7 	bl	8005e40 <HAL_DMA_Abort_IT>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d019      	beq.n	800a2ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a27e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a286:	4610      	mov	r0, r2
 800a288:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a28a:	e00f      	b.n	800a2ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f9ff 	bl	800a690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a292:	e00b      	b.n	800a2ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f9fb 	bl	800a690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a29a:	e007      	b.n	800a2ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 f9f7 	bl	800a690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a2aa:	e1bf      	b.n	800a62c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ac:	bf00      	nop
    return;
 800a2ae:	e1bd      	b.n	800a62c <HAL_UART_IRQHandler+0x634>
 800a2b0:	10000001 	.word	0x10000001
 800a2b4:	04000120 	.word	0x04000120
 800a2b8:	0800b517 	.word	0x0800b517

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	f040 8153 	bne.w	800a56c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2ca:	f003 0310 	and.w	r3, r3, #16
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f000 814c 	beq.w	800a56c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2d8:	f003 0310 	and.w	r3, r3, #16
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f000 8145 	beq.w	800a56c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2210      	movs	r2, #16
 800a2e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2f4:	2b40      	cmp	r3, #64	@ 0x40
 800a2f6:	f040 80bb 	bne.w	800a470 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a308:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 818f 	beq.w	800a630 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a318:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a31c:	429a      	cmp	r2, r3
 800a31e:	f080 8187 	bcs.w	800a630 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a328:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f003 0320 	and.w	r3, r3, #32
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f040 8087 	bne.w	800a44e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a348:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a34c:	e853 3f00 	ldrex	r3, [r3]
 800a350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a354:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a35c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	461a      	mov	r2, r3
 800a366:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a36a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a36e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a372:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a376:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a37a:	e841 2300 	strex	r3, r2, [r1]
 800a37e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1da      	bne.n	800a340 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3308      	adds	r3, #8
 800a390:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a392:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a394:	e853 3f00 	ldrex	r3, [r3]
 800a398:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a39a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a39c:	f023 0301 	bic.w	r3, r3, #1
 800a3a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3308      	adds	r3, #8
 800a3aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a3ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a3b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a3b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a3ba:	e841 2300 	strex	r3, r2, [r1]
 800a3be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a3c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e1      	bne.n	800a38a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3308      	adds	r3, #8
 800a3cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a3d0:	e853 3f00 	ldrex	r3, [r3]
 800a3d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a3d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	3308      	adds	r3, #8
 800a3e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a3ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a3ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a3f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a3f2:	e841 2300 	strex	r3, r2, [r1]
 800a3f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a3f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1e3      	bne.n	800a3c6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2220      	movs	r2, #32
 800a402:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a414:	e853 3f00 	ldrex	r3, [r3]
 800a418:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a41a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a41c:	f023 0310 	bic.w	r3, r3, #16
 800a420:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	461a      	mov	r2, r3
 800a42a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a42e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a430:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a432:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a434:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a436:	e841 2300 	strex	r3, r2, [r1]
 800a43a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a43c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1e4      	bne.n	800a40c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fb fca0 	bl	8005d8e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2202      	movs	r2, #2
 800a452:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a460:	b29b      	uxth	r3, r3
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	b29b      	uxth	r3, r3
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f002 fffd 	bl	800d468 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a46e:	e0df      	b.n	800a630 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 80d1 	beq.w	800a634 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800a492:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a496:	2b00      	cmp	r3, #0
 800a498:	f000 80cc 	beq.w	800a634 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a4:	e853 3f00 	ldrex	r3, [r3]
 800a4a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a4aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a4be:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4c0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4c6:	e841 2300 	strex	r3, r2, [r1]
 800a4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1e4      	bne.n	800a49c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3308      	adds	r3, #8
 800a4d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4dc:	e853 3f00 	ldrex	r3, [r3]
 800a4e0:	623b      	str	r3, [r7, #32]
   return(result);
 800a4e2:	6a3b      	ldr	r3, [r7, #32]
 800a4e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a4e8:	f023 0301 	bic.w	r3, r3, #1
 800a4ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	3308      	adds	r3, #8
 800a4f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a4fa:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a502:	e841 2300 	strex	r3, r2, [r1]
 800a506:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1e1      	bne.n	800a4d2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2220      	movs	r2, #32
 800a512:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	e853 3f00 	ldrex	r3, [r3]
 800a52e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f023 0310 	bic.w	r3, r3, #16
 800a536:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	461a      	mov	r2, r3
 800a540:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a544:	61fb      	str	r3, [r7, #28]
 800a546:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a548:	69b9      	ldr	r1, [r7, #24]
 800a54a:	69fa      	ldr	r2, [r7, #28]
 800a54c:	e841 2300 	strex	r3, r2, [r1]
 800a550:	617b      	str	r3, [r7, #20]
   return(result);
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1e4      	bne.n	800a522 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2202      	movs	r2, #2
 800a55c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a55e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a562:	4619      	mov	r1, r3
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f002 ff7f 	bl	800d468 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a56a:	e063      	b.n	800a634 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a56c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a570:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00e      	beq.n	800a596 <HAL_UART_IRQHandler+0x59e>
 800a578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a57c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d008      	beq.n	800a596 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a58c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f001 f802 	bl	800b598 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a594:	e051      	b.n	800a63a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a59a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d014      	beq.n	800a5cc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a5a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d105      	bne.n	800a5ba <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a5ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d008      	beq.n	800a5cc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d03a      	beq.n	800a638 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	4798      	blx	r3
    }
    return;
 800a5ca:	e035      	b.n	800a638 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a5cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d009      	beq.n	800a5ec <HAL_UART_IRQHandler+0x5f4>
 800a5d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d003      	beq.n	800a5ec <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 ffac 	bl	800b542 <UART_EndTransmit_IT>
    return;
 800a5ea:	e026      	b.n	800a63a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a5ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d009      	beq.n	800a60c <HAL_UART_IRQHandler+0x614>
 800a5f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d003      	beq.n	800a60c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 ffdb 	bl	800b5c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a60a:	e016      	b.n	800a63a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a60c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a610:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d010      	beq.n	800a63a <HAL_UART_IRQHandler+0x642>
 800a618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	da0c      	bge.n	800a63a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 ffc3 	bl	800b5ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a626:	e008      	b.n	800a63a <HAL_UART_IRQHandler+0x642>
      return;
 800a628:	bf00      	nop
 800a62a:	e006      	b.n	800a63a <HAL_UART_IRQHandler+0x642>
    return;
 800a62c:	bf00      	nop
 800a62e:	e004      	b.n	800a63a <HAL_UART_IRQHandler+0x642>
      return;
 800a630:	bf00      	nop
 800a632:	e002      	b.n	800a63a <HAL_UART_IRQHandler+0x642>
      return;
 800a634:	bf00      	nop
 800a636:	e000      	b.n	800a63a <HAL_UART_IRQHandler+0x642>
    return;
 800a638:	bf00      	nop
  }
}
 800a63a:	37e8      	adds	r7, #232	@ 0xe8
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6b2:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6ba:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	4313      	orrs	r3, r2
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3714      	adds	r7, #20
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
	...

0800a6d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6d4:	b08c      	sub	sp, #48	@ 0x30
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	689a      	ldr	r2, [r3, #8]
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	431a      	orrs	r2, r3
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	695b      	ldr	r3, [r3, #20]
 800a6ee:	431a      	orrs	r2, r3
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	69db      	ldr	r3, [r3, #28]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	4bab      	ldr	r3, [pc, #684]	@ (800a9ac <UART_SetConfig+0x2dc>)
 800a700:	4013      	ands	r3, r2
 800a702:	697a      	ldr	r2, [r7, #20]
 800a704:	6812      	ldr	r2, [r2, #0]
 800a706:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a708:	430b      	orrs	r3, r1
 800a70a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	68da      	ldr	r2, [r3, #12]
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	430a      	orrs	r2, r1
 800a720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4aa0      	ldr	r2, [pc, #640]	@ (800a9b0 <UART_SetConfig+0x2e0>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d004      	beq.n	800a73c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	6a1b      	ldr	r3, [r3, #32]
 800a736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a738:	4313      	orrs	r3, r2
 800a73a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a746:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	6812      	ldr	r2, [r2, #0]
 800a74e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a750:	430b      	orrs	r3, r1
 800a752:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a75a:	f023 010f 	bic.w	r1, r3, #15
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	430a      	orrs	r2, r1
 800a768:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a91      	ldr	r2, [pc, #580]	@ (800a9b4 <UART_SetConfig+0x2e4>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d125      	bne.n	800a7c0 <UART_SetConfig+0xf0>
 800a774:	4b90      	ldr	r3, [pc, #576]	@ (800a9b8 <UART_SetConfig+0x2e8>)
 800a776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a77a:	f003 0303 	and.w	r3, r3, #3
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d81a      	bhi.n	800a7b8 <UART_SetConfig+0xe8>
 800a782:	a201      	add	r2, pc, #4	@ (adr r2, 800a788 <UART_SetConfig+0xb8>)
 800a784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a788:	0800a799 	.word	0x0800a799
 800a78c:	0800a7a9 	.word	0x0800a7a9
 800a790:	0800a7a1 	.word	0x0800a7a1
 800a794:	0800a7b1 	.word	0x0800a7b1
 800a798:	2301      	movs	r3, #1
 800a79a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a79e:	e0d6      	b.n	800a94e <UART_SetConfig+0x27e>
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7a6:	e0d2      	b.n	800a94e <UART_SetConfig+0x27e>
 800a7a8:	2304      	movs	r3, #4
 800a7aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ae:	e0ce      	b.n	800a94e <UART_SetConfig+0x27e>
 800a7b0:	2308      	movs	r3, #8
 800a7b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7b6:	e0ca      	b.n	800a94e <UART_SetConfig+0x27e>
 800a7b8:	2310      	movs	r3, #16
 800a7ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7be:	e0c6      	b.n	800a94e <UART_SetConfig+0x27e>
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a7d      	ldr	r2, [pc, #500]	@ (800a9bc <UART_SetConfig+0x2ec>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d138      	bne.n	800a83c <UART_SetConfig+0x16c>
 800a7ca:	4b7b      	ldr	r3, [pc, #492]	@ (800a9b8 <UART_SetConfig+0x2e8>)
 800a7cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7d0:	f003 030c 	and.w	r3, r3, #12
 800a7d4:	2b0c      	cmp	r3, #12
 800a7d6:	d82d      	bhi.n	800a834 <UART_SetConfig+0x164>
 800a7d8:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e0 <UART_SetConfig+0x110>)
 800a7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7de:	bf00      	nop
 800a7e0:	0800a815 	.word	0x0800a815
 800a7e4:	0800a835 	.word	0x0800a835
 800a7e8:	0800a835 	.word	0x0800a835
 800a7ec:	0800a835 	.word	0x0800a835
 800a7f0:	0800a825 	.word	0x0800a825
 800a7f4:	0800a835 	.word	0x0800a835
 800a7f8:	0800a835 	.word	0x0800a835
 800a7fc:	0800a835 	.word	0x0800a835
 800a800:	0800a81d 	.word	0x0800a81d
 800a804:	0800a835 	.word	0x0800a835
 800a808:	0800a835 	.word	0x0800a835
 800a80c:	0800a835 	.word	0x0800a835
 800a810:	0800a82d 	.word	0x0800a82d
 800a814:	2300      	movs	r3, #0
 800a816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a81a:	e098      	b.n	800a94e <UART_SetConfig+0x27e>
 800a81c:	2302      	movs	r3, #2
 800a81e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a822:	e094      	b.n	800a94e <UART_SetConfig+0x27e>
 800a824:	2304      	movs	r3, #4
 800a826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a82a:	e090      	b.n	800a94e <UART_SetConfig+0x27e>
 800a82c:	2308      	movs	r3, #8
 800a82e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a832:	e08c      	b.n	800a94e <UART_SetConfig+0x27e>
 800a834:	2310      	movs	r3, #16
 800a836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a83a:	e088      	b.n	800a94e <UART_SetConfig+0x27e>
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a5f      	ldr	r2, [pc, #380]	@ (800a9c0 <UART_SetConfig+0x2f0>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d125      	bne.n	800a892 <UART_SetConfig+0x1c2>
 800a846:	4b5c      	ldr	r3, [pc, #368]	@ (800a9b8 <UART_SetConfig+0x2e8>)
 800a848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a84c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a850:	2b30      	cmp	r3, #48	@ 0x30
 800a852:	d016      	beq.n	800a882 <UART_SetConfig+0x1b2>
 800a854:	2b30      	cmp	r3, #48	@ 0x30
 800a856:	d818      	bhi.n	800a88a <UART_SetConfig+0x1ba>
 800a858:	2b20      	cmp	r3, #32
 800a85a:	d00a      	beq.n	800a872 <UART_SetConfig+0x1a2>
 800a85c:	2b20      	cmp	r3, #32
 800a85e:	d814      	bhi.n	800a88a <UART_SetConfig+0x1ba>
 800a860:	2b00      	cmp	r3, #0
 800a862:	d002      	beq.n	800a86a <UART_SetConfig+0x19a>
 800a864:	2b10      	cmp	r3, #16
 800a866:	d008      	beq.n	800a87a <UART_SetConfig+0x1aa>
 800a868:	e00f      	b.n	800a88a <UART_SetConfig+0x1ba>
 800a86a:	2300      	movs	r3, #0
 800a86c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a870:	e06d      	b.n	800a94e <UART_SetConfig+0x27e>
 800a872:	2302      	movs	r3, #2
 800a874:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a878:	e069      	b.n	800a94e <UART_SetConfig+0x27e>
 800a87a:	2304      	movs	r3, #4
 800a87c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a880:	e065      	b.n	800a94e <UART_SetConfig+0x27e>
 800a882:	2308      	movs	r3, #8
 800a884:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a888:	e061      	b.n	800a94e <UART_SetConfig+0x27e>
 800a88a:	2310      	movs	r3, #16
 800a88c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a890:	e05d      	b.n	800a94e <UART_SetConfig+0x27e>
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a4b      	ldr	r2, [pc, #300]	@ (800a9c4 <UART_SetConfig+0x2f4>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d125      	bne.n	800a8e8 <UART_SetConfig+0x218>
 800a89c:	4b46      	ldr	r3, [pc, #280]	@ (800a9b8 <UART_SetConfig+0x2e8>)
 800a89e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a8a6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a8a8:	d016      	beq.n	800a8d8 <UART_SetConfig+0x208>
 800a8aa:	2bc0      	cmp	r3, #192	@ 0xc0
 800a8ac:	d818      	bhi.n	800a8e0 <UART_SetConfig+0x210>
 800a8ae:	2b80      	cmp	r3, #128	@ 0x80
 800a8b0:	d00a      	beq.n	800a8c8 <UART_SetConfig+0x1f8>
 800a8b2:	2b80      	cmp	r3, #128	@ 0x80
 800a8b4:	d814      	bhi.n	800a8e0 <UART_SetConfig+0x210>
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d002      	beq.n	800a8c0 <UART_SetConfig+0x1f0>
 800a8ba:	2b40      	cmp	r3, #64	@ 0x40
 800a8bc:	d008      	beq.n	800a8d0 <UART_SetConfig+0x200>
 800a8be:	e00f      	b.n	800a8e0 <UART_SetConfig+0x210>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8c6:	e042      	b.n	800a94e <UART_SetConfig+0x27e>
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8ce:	e03e      	b.n	800a94e <UART_SetConfig+0x27e>
 800a8d0:	2304      	movs	r3, #4
 800a8d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8d6:	e03a      	b.n	800a94e <UART_SetConfig+0x27e>
 800a8d8:	2308      	movs	r3, #8
 800a8da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8de:	e036      	b.n	800a94e <UART_SetConfig+0x27e>
 800a8e0:	2310      	movs	r3, #16
 800a8e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8e6:	e032      	b.n	800a94e <UART_SetConfig+0x27e>
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a30      	ldr	r2, [pc, #192]	@ (800a9b0 <UART_SetConfig+0x2e0>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d12a      	bne.n	800a948 <UART_SetConfig+0x278>
 800a8f2:	4b31      	ldr	r3, [pc, #196]	@ (800a9b8 <UART_SetConfig+0x2e8>)
 800a8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a8fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a900:	d01a      	beq.n	800a938 <UART_SetConfig+0x268>
 800a902:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a906:	d81b      	bhi.n	800a940 <UART_SetConfig+0x270>
 800a908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a90c:	d00c      	beq.n	800a928 <UART_SetConfig+0x258>
 800a90e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a912:	d815      	bhi.n	800a940 <UART_SetConfig+0x270>
 800a914:	2b00      	cmp	r3, #0
 800a916:	d003      	beq.n	800a920 <UART_SetConfig+0x250>
 800a918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a91c:	d008      	beq.n	800a930 <UART_SetConfig+0x260>
 800a91e:	e00f      	b.n	800a940 <UART_SetConfig+0x270>
 800a920:	2300      	movs	r3, #0
 800a922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a926:	e012      	b.n	800a94e <UART_SetConfig+0x27e>
 800a928:	2302      	movs	r3, #2
 800a92a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a92e:	e00e      	b.n	800a94e <UART_SetConfig+0x27e>
 800a930:	2304      	movs	r3, #4
 800a932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a936:	e00a      	b.n	800a94e <UART_SetConfig+0x27e>
 800a938:	2308      	movs	r3, #8
 800a93a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a93e:	e006      	b.n	800a94e <UART_SetConfig+0x27e>
 800a940:	2310      	movs	r3, #16
 800a942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a946:	e002      	b.n	800a94e <UART_SetConfig+0x27e>
 800a948:	2310      	movs	r3, #16
 800a94a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a17      	ldr	r2, [pc, #92]	@ (800a9b0 <UART_SetConfig+0x2e0>)
 800a954:	4293      	cmp	r3, r2
 800a956:	f040 80a8 	bne.w	800aaaa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a95a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a95e:	2b08      	cmp	r3, #8
 800a960:	d834      	bhi.n	800a9cc <UART_SetConfig+0x2fc>
 800a962:	a201      	add	r2, pc, #4	@ (adr r2, 800a968 <UART_SetConfig+0x298>)
 800a964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a968:	0800a98d 	.word	0x0800a98d
 800a96c:	0800a9cd 	.word	0x0800a9cd
 800a970:	0800a995 	.word	0x0800a995
 800a974:	0800a9cd 	.word	0x0800a9cd
 800a978:	0800a99b 	.word	0x0800a99b
 800a97c:	0800a9cd 	.word	0x0800a9cd
 800a980:	0800a9cd 	.word	0x0800a9cd
 800a984:	0800a9cd 	.word	0x0800a9cd
 800a988:	0800a9a3 	.word	0x0800a9a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a98c:	f7fc fde2 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 800a990:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a992:	e021      	b.n	800a9d8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a994:	4b0c      	ldr	r3, [pc, #48]	@ (800a9c8 <UART_SetConfig+0x2f8>)
 800a996:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a998:	e01e      	b.n	800a9d8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a99a:	f7fc fd6d 	bl	8007478 <HAL_RCC_GetSysClockFreq>
 800a99e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9a0:	e01a      	b.n	800a9d8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9a8:	e016      	b.n	800a9d8 <UART_SetConfig+0x308>
 800a9aa:	bf00      	nop
 800a9ac:	cfff69f3 	.word	0xcfff69f3
 800a9b0:	40008000 	.word	0x40008000
 800a9b4:	40013800 	.word	0x40013800
 800a9b8:	40021000 	.word	0x40021000
 800a9bc:	40004400 	.word	0x40004400
 800a9c0:	40004800 	.word	0x40004800
 800a9c4:	40004c00 	.word	0x40004c00
 800a9c8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a9d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 812a 	beq.w	800ac34 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e4:	4a9e      	ldr	r2, [pc, #632]	@ (800ac60 <UART_SetConfig+0x590>)
 800a9e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9f2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	685a      	ldr	r2, [r3, #4]
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	005b      	lsls	r3, r3, #1
 800a9fc:	4413      	add	r3, r2
 800a9fe:	69ba      	ldr	r2, [r7, #24]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d305      	bcc.n	800aa10 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa0a:	69ba      	ldr	r2, [r7, #24]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d903      	bls.n	800aa18 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aa16:	e10d      	b.n	800ac34 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	60bb      	str	r3, [r7, #8]
 800aa1e:	60fa      	str	r2, [r7, #12]
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa24:	4a8e      	ldr	r2, [pc, #568]	@ (800ac60 <UART_SetConfig+0x590>)
 800aa26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	603b      	str	r3, [r7, #0]
 800aa30:	607a      	str	r2, [r7, #4]
 800aa32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa3a:	f7f6 f94d 	bl	8000cd8 <__aeabi_uldivmod>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	460b      	mov	r3, r1
 800aa42:	4610      	mov	r0, r2
 800aa44:	4619      	mov	r1, r3
 800aa46:	f04f 0200 	mov.w	r2, #0
 800aa4a:	f04f 0300 	mov.w	r3, #0
 800aa4e:	020b      	lsls	r3, r1, #8
 800aa50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa54:	0202      	lsls	r2, r0, #8
 800aa56:	6979      	ldr	r1, [r7, #20]
 800aa58:	6849      	ldr	r1, [r1, #4]
 800aa5a:	0849      	lsrs	r1, r1, #1
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	460c      	mov	r4, r1
 800aa60:	4605      	mov	r5, r0
 800aa62:	eb12 0804 	adds.w	r8, r2, r4
 800aa66:	eb43 0905 	adc.w	r9, r3, r5
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	469a      	mov	sl, r3
 800aa72:	4693      	mov	fp, r2
 800aa74:	4652      	mov	r2, sl
 800aa76:	465b      	mov	r3, fp
 800aa78:	4640      	mov	r0, r8
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	f7f6 f92c 	bl	8000cd8 <__aeabi_uldivmod>
 800aa80:	4602      	mov	r2, r0
 800aa82:	460b      	mov	r3, r1
 800aa84:	4613      	mov	r3, r2
 800aa86:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa88:	6a3b      	ldr	r3, [r7, #32]
 800aa8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa8e:	d308      	bcc.n	800aaa2 <UART_SetConfig+0x3d2>
 800aa90:	6a3b      	ldr	r3, [r7, #32]
 800aa92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa96:	d204      	bcs.n	800aaa2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	6a3a      	ldr	r2, [r7, #32]
 800aa9e:	60da      	str	r2, [r3, #12]
 800aaa0:	e0c8      	b.n	800ac34 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aaa8:	e0c4      	b.n	800ac34 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	69db      	ldr	r3, [r3, #28]
 800aaae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aab2:	d167      	bne.n	800ab84 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800aab4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aab8:	2b08      	cmp	r3, #8
 800aaba:	d828      	bhi.n	800ab0e <UART_SetConfig+0x43e>
 800aabc:	a201      	add	r2, pc, #4	@ (adr r2, 800aac4 <UART_SetConfig+0x3f4>)
 800aabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac2:	bf00      	nop
 800aac4:	0800aae9 	.word	0x0800aae9
 800aac8:	0800aaf1 	.word	0x0800aaf1
 800aacc:	0800aaf9 	.word	0x0800aaf9
 800aad0:	0800ab0f 	.word	0x0800ab0f
 800aad4:	0800aaff 	.word	0x0800aaff
 800aad8:	0800ab0f 	.word	0x0800ab0f
 800aadc:	0800ab0f 	.word	0x0800ab0f
 800aae0:	0800ab0f 	.word	0x0800ab0f
 800aae4:	0800ab07 	.word	0x0800ab07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aae8:	f7fc fd34 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 800aaec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aaee:	e014      	b.n	800ab1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aaf0:	f7fc fd46 	bl	8007580 <HAL_RCC_GetPCLK2Freq>
 800aaf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aaf6:	e010      	b.n	800ab1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aaf8:	4b5a      	ldr	r3, [pc, #360]	@ (800ac64 <UART_SetConfig+0x594>)
 800aafa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aafc:	e00d      	b.n	800ab1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aafe:	f7fc fcbb 	bl	8007478 <HAL_RCC_GetSysClockFreq>
 800ab02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab04:	e009      	b.n	800ab1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab0c:	e005      	b.n	800ab1a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ab18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f000 8089 	beq.w	800ac34 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab26:	4a4e      	ldr	r2, [pc, #312]	@ (800ac60 <UART_SetConfig+0x590>)
 800ab28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab30:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab34:	005a      	lsls	r2, r3, #1
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	085b      	lsrs	r3, r3, #1
 800ab3c:	441a      	add	r2, r3
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab48:	6a3b      	ldr	r3, [r7, #32]
 800ab4a:	2b0f      	cmp	r3, #15
 800ab4c:	d916      	bls.n	800ab7c <UART_SetConfig+0x4ac>
 800ab4e:	6a3b      	ldr	r3, [r7, #32]
 800ab50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab54:	d212      	bcs.n	800ab7c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab56:	6a3b      	ldr	r3, [r7, #32]
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	f023 030f 	bic.w	r3, r3, #15
 800ab5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab60:	6a3b      	ldr	r3, [r7, #32]
 800ab62:	085b      	lsrs	r3, r3, #1
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	f003 0307 	and.w	r3, r3, #7
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	8bfb      	ldrh	r3, [r7, #30]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	8bfa      	ldrh	r2, [r7, #30]
 800ab78:	60da      	str	r2, [r3, #12]
 800ab7a:	e05b      	b.n	800ac34 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ab82:	e057      	b.n	800ac34 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ab88:	2b08      	cmp	r3, #8
 800ab8a:	d828      	bhi.n	800abde <UART_SetConfig+0x50e>
 800ab8c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab94 <UART_SetConfig+0x4c4>)
 800ab8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab92:	bf00      	nop
 800ab94:	0800abb9 	.word	0x0800abb9
 800ab98:	0800abc1 	.word	0x0800abc1
 800ab9c:	0800abc9 	.word	0x0800abc9
 800aba0:	0800abdf 	.word	0x0800abdf
 800aba4:	0800abcf 	.word	0x0800abcf
 800aba8:	0800abdf 	.word	0x0800abdf
 800abac:	0800abdf 	.word	0x0800abdf
 800abb0:	0800abdf 	.word	0x0800abdf
 800abb4:	0800abd7 	.word	0x0800abd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abb8:	f7fc fccc 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 800abbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800abbe:	e014      	b.n	800abea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abc0:	f7fc fcde 	bl	8007580 <HAL_RCC_GetPCLK2Freq>
 800abc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800abc6:	e010      	b.n	800abea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abc8:	4b26      	ldr	r3, [pc, #152]	@ (800ac64 <UART_SetConfig+0x594>)
 800abca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800abcc:	e00d      	b.n	800abea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abce:	f7fc fc53 	bl	8007478 <HAL_RCC_GetSysClockFreq>
 800abd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800abd4:	e009      	b.n	800abea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800abdc:	e005      	b.n	800abea <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800abde:	2300      	movs	r3, #0
 800abe0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800abe8:	bf00      	nop
    }

    if (pclk != 0U)
 800abea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abec:	2b00      	cmp	r3, #0
 800abee:	d021      	beq.n	800ac34 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abf4:	4a1a      	ldr	r2, [pc, #104]	@ (800ac60 <UART_SetConfig+0x590>)
 800abf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abfa:	461a      	mov	r2, r3
 800abfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfe:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	085b      	lsrs	r3, r3, #1
 800ac08:	441a      	add	r2, r3
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac14:	6a3b      	ldr	r3, [r7, #32]
 800ac16:	2b0f      	cmp	r3, #15
 800ac18:	d909      	bls.n	800ac2e <UART_SetConfig+0x55e>
 800ac1a:	6a3b      	ldr	r3, [r7, #32]
 800ac1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac20:	d205      	bcs.n	800ac2e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac22:	6a3b      	ldr	r3, [r7, #32]
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	60da      	str	r2, [r3, #12]
 800ac2c:	e002      	b.n	800ac34 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	2200      	movs	r2, #0
 800ac48:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ac50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3730      	adds	r7, #48	@ 0x30
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac5e:	bf00      	nop
 800ac60:	08012bc8 	.word	0x08012bc8
 800ac64:	00f42400 	.word	0x00f42400

0800ac68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac74:	f003 0308 	and.w	r3, r3, #8
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d00a      	beq.n	800ac92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac96:	f003 0301 	and.w	r3, r3, #1
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00a      	beq.n	800acb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	430a      	orrs	r2, r1
 800acb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb8:	f003 0302 	and.w	r3, r3, #2
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00a      	beq.n	800acd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	430a      	orrs	r2, r1
 800acd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acda:	f003 0304 	and.w	r3, r3, #4
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00a      	beq.n	800acf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	430a      	orrs	r2, r1
 800acf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acfc:	f003 0310 	and.w	r3, r3, #16
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00a      	beq.n	800ad1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	430a      	orrs	r2, r1
 800ad18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad1e:	f003 0320 	and.w	r3, r3, #32
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00a      	beq.n	800ad3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	430a      	orrs	r2, r1
 800ad3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d01a      	beq.n	800ad7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	430a      	orrs	r2, r1
 800ad5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad66:	d10a      	bne.n	800ad7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	430a      	orrs	r2, r1
 800ad7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00a      	beq.n	800ada0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	430a      	orrs	r2, r1
 800ad9e:	605a      	str	r2, [r3, #4]
  }
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b098      	sub	sp, #96	@ 0x60
 800adb0:	af02      	add	r7, sp, #8
 800adb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800adbc:	f7f7 fce4 	bl	8002788 <HAL_GetTick>
 800adc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f003 0308 	and.w	r3, r3, #8
 800adcc:	2b08      	cmp	r3, #8
 800adce:	d12f      	bne.n	800ae30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800add0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800add8:	2200      	movs	r2, #0
 800adda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 f88e 	bl	800af00 <UART_WaitOnFlagUntilTimeout>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d022      	beq.n	800ae30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf2:	e853 3f00 	ldrex	r3, [r3]
 800adf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800adf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adfe:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	461a      	mov	r2, r3
 800ae06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae08:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae10:	e841 2300 	strex	r3, r2, [r1]
 800ae14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1e6      	bne.n	800adea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2220      	movs	r2, #32
 800ae20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e063      	b.n	800aef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f003 0304 	and.w	r3, r3, #4
 800ae3a:	2b04      	cmp	r3, #4
 800ae3c:	d149      	bne.n	800aed2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae42:	9300      	str	r3, [sp, #0]
 800ae44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae46:	2200      	movs	r2, #0
 800ae48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f857 	bl	800af00 <UART_WaitOnFlagUntilTimeout>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d03c      	beq.n	800aed2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae60:	e853 3f00 	ldrex	r3, [r3]
 800ae64:	623b      	str	r3, [r7, #32]
   return(result);
 800ae66:	6a3b      	ldr	r3, [r7, #32]
 800ae68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	461a      	mov	r2, r3
 800ae74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae76:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae7e:	e841 2300 	strex	r3, r2, [r1]
 800ae82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1e6      	bne.n	800ae58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	3308      	adds	r3, #8
 800ae90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	e853 3f00 	ldrex	r3, [r3]
 800ae98:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f023 0301 	bic.w	r3, r3, #1
 800aea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3308      	adds	r3, #8
 800aea8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aeaa:	61fa      	str	r2, [r7, #28]
 800aeac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeae:	69b9      	ldr	r1, [r7, #24]
 800aeb0:	69fa      	ldr	r2, [r7, #28]
 800aeb2:	e841 2300 	strex	r3, r2, [r1]
 800aeb6:	617b      	str	r3, [r7, #20]
   return(result);
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1e5      	bne.n	800ae8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2220      	movs	r2, #32
 800aec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aece:	2303      	movs	r3, #3
 800aed0:	e012      	b.n	800aef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2220      	movs	r2, #32
 800aed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2220      	movs	r2, #32
 800aede:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aef6:	2300      	movs	r3, #0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3758      	adds	r7, #88	@ 0x58
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	603b      	str	r3, [r7, #0]
 800af0c:	4613      	mov	r3, r2
 800af0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af10:	e04f      	b.n	800afb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af18:	d04b      	beq.n	800afb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af1a:	f7f7 fc35 	bl	8002788 <HAL_GetTick>
 800af1e:	4602      	mov	r2, r0
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	69ba      	ldr	r2, [r7, #24]
 800af26:	429a      	cmp	r2, r3
 800af28:	d302      	bcc.n	800af30 <UART_WaitOnFlagUntilTimeout+0x30>
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d101      	bne.n	800af34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	e04e      	b.n	800afd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f003 0304 	and.w	r3, r3, #4
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d037      	beq.n	800afb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	2b80      	cmp	r3, #128	@ 0x80
 800af46:	d034      	beq.n	800afb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	2b40      	cmp	r3, #64	@ 0x40
 800af4c:	d031      	beq.n	800afb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	69db      	ldr	r3, [r3, #28]
 800af54:	f003 0308 	and.w	r3, r3, #8
 800af58:	2b08      	cmp	r3, #8
 800af5a:	d110      	bne.n	800af7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2208      	movs	r2, #8
 800af62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f000 f920 	bl	800b1aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2208      	movs	r2, #8
 800af6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2200      	movs	r2, #0
 800af76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800af7a:	2301      	movs	r3, #1
 800af7c:	e029      	b.n	800afd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	69db      	ldr	r3, [r3, #28]
 800af84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af8c:	d111      	bne.n	800afb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f000 f906 	bl	800b1aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2220      	movs	r2, #32
 800afa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800afae:	2303      	movs	r3, #3
 800afb0:	e00f      	b.n	800afd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	69da      	ldr	r2, [r3, #28]
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	4013      	ands	r3, r2
 800afbc:	68ba      	ldr	r2, [r7, #8]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	bf0c      	ite	eq
 800afc2:	2301      	moveq	r3, #1
 800afc4:	2300      	movne	r3, #0
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	461a      	mov	r2, r3
 800afca:	79fb      	ldrb	r3, [r7, #7]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d0a0      	beq.n	800af12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
	...

0800afdc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b096      	sub	sp, #88	@ 0x58
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	4613      	mov	r3, r2
 800afe8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	88fa      	ldrh	r2, [r7, #6]
 800aff4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2200      	movs	r2, #0
 800affc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2222      	movs	r2, #34	@ 0x22
 800b004:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d02d      	beq.n	800b06e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b018:	4a40      	ldr	r2, [pc, #256]	@ (800b11c <UART_Start_Receive_DMA+0x140>)
 800b01a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b022:	4a3f      	ldr	r2, [pc, #252]	@ (800b120 <UART_Start_Receive_DMA+0x144>)
 800b024:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b02c:	4a3d      	ldr	r2, [pc, #244]	@ (800b124 <UART_Start_Receive_DMA+0x148>)
 800b02e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b036:	2200      	movs	r2, #0
 800b038:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	3324      	adds	r3, #36	@ 0x24
 800b046:	4619      	mov	r1, r3
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b04c:	461a      	mov	r2, r3
 800b04e:	88fb      	ldrh	r3, [r7, #6]
 800b050:	f7fa fe22 	bl	8005c98 <HAL_DMA_Start_IT>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d009      	beq.n	800b06e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2210      	movs	r2, #16
 800b05e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2220      	movs	r2, #32
 800b066:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	e051      	b.n	800b112 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d018      	beq.n	800b0a8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b07e:	e853 3f00 	ldrex	r3, [r3]
 800b082:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b08a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	461a      	mov	r2, r3
 800b092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b094:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b096:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b098:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b09a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b09c:	e841 2300 	strex	r3, r2, [r1]
 800b0a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b0a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1e6      	bne.n	800b076 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	3308      	adds	r3, #8
 800b0ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b2:	e853 3f00 	ldrex	r3, [r3]
 800b0b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ba:	f043 0301 	orr.w	r3, r3, #1
 800b0be:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	3308      	adds	r3, #8
 800b0c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b0c8:	637a      	str	r2, [r7, #52]	@ 0x34
 800b0ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b0ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0d0:	e841 2300 	strex	r3, r2, [r1]
 800b0d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1e5      	bne.n	800b0a8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	3308      	adds	r3, #8
 800b0e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	e853 3f00 	ldrex	r3, [r3]
 800b0ea:	613b      	str	r3, [r7, #16]
   return(result);
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3308      	adds	r3, #8
 800b0fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b0fc:	623a      	str	r2, [r7, #32]
 800b0fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b100:	69f9      	ldr	r1, [r7, #28]
 800b102:	6a3a      	ldr	r2, [r7, #32]
 800b104:	e841 2300 	strex	r3, r2, [r1]
 800b108:	61bb      	str	r3, [r7, #24]
   return(result);
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1e5      	bne.n	800b0dc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3758      	adds	r7, #88	@ 0x58
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	0800b32d 	.word	0x0800b32d
 800b120:	0800b459 	.word	0x0800b459
 800b124:	0800b497 	.word	0x0800b497

0800b128 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b128:	b480      	push	{r7}
 800b12a:	b08f      	sub	sp, #60	@ 0x3c
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b136:	6a3b      	ldr	r3, [r7, #32]
 800b138:	e853 3f00 	ldrex	r3, [r3]
 800b13c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b144:	637b      	str	r3, [r7, #52]	@ 0x34
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	461a      	mov	r2, r3
 800b14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b14e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b150:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b152:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b154:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b156:	e841 2300 	strex	r3, r2, [r1]
 800b15a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1e6      	bne.n	800b130 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	3308      	adds	r3, #8
 800b168:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	e853 3f00 	ldrex	r3, [r3]
 800b170:	60bb      	str	r3, [r7, #8]
   return(result);
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b178:	633b      	str	r3, [r7, #48]	@ 0x30
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3308      	adds	r3, #8
 800b180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b182:	61ba      	str	r2, [r7, #24]
 800b184:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b186:	6979      	ldr	r1, [r7, #20]
 800b188:	69ba      	ldr	r2, [r7, #24]
 800b18a:	e841 2300 	strex	r3, r2, [r1]
 800b18e:	613b      	str	r3, [r7, #16]
   return(result);
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1e5      	bne.n	800b162 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2220      	movs	r2, #32
 800b19a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b19e:	bf00      	nop
 800b1a0:	373c      	adds	r7, #60	@ 0x3c
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1aa:	b480      	push	{r7}
 800b1ac:	b095      	sub	sp, #84	@ 0x54
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ba:	e853 3f00 	ldrex	r3, [r3]
 800b1be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b1d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b1d8:	e841 2300 	strex	r3, r2, [r1]
 800b1dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1e6      	bne.n	800b1b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	3308      	adds	r3, #8
 800b1ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	e853 3f00 	ldrex	r3, [r3]
 800b1f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b1fa:	f023 0301 	bic.w	r3, r3, #1
 800b1fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	3308      	adds	r3, #8
 800b206:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b208:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b20a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b20e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b210:	e841 2300 	strex	r3, r2, [r1]
 800b214:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1e3      	bne.n	800b1e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b220:	2b01      	cmp	r3, #1
 800b222:	d118      	bne.n	800b256 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	e853 3f00 	ldrex	r3, [r3]
 800b230:	60bb      	str	r3, [r7, #8]
   return(result);
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	f023 0310 	bic.w	r3, r3, #16
 800b238:	647b      	str	r3, [r7, #68]	@ 0x44
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	461a      	mov	r2, r3
 800b240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b242:	61bb      	str	r3, [r7, #24]
 800b244:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b246:	6979      	ldr	r1, [r7, #20]
 800b248:	69ba      	ldr	r2, [r7, #24]
 800b24a:	e841 2300 	strex	r3, r2, [r1]
 800b24e:	613b      	str	r3, [r7, #16]
   return(result);
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1e6      	bne.n	800b224 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2220      	movs	r2, #32
 800b25a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b26a:	bf00      	nop
 800b26c:	3754      	adds	r7, #84	@ 0x54
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b090      	sub	sp, #64	@ 0x40
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b282:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 0320 	and.w	r3, r3, #32
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d137      	bne.n	800b302 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b294:	2200      	movs	r2, #0
 800b296:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b29a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	3308      	adds	r3, #8
 800b2a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a4:	e853 3f00 	ldrex	r3, [r3]
 800b2a8:	623b      	str	r3, [r7, #32]
   return(result);
 800b2aa:	6a3b      	ldr	r3, [r7, #32]
 800b2ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b2b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b2b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	3308      	adds	r3, #8
 800b2b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2ba:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2c2:	e841 2300 	strex	r3, r2, [r1]
 800b2c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1e5      	bne.n	800b29a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	e853 3f00 	ldrex	r3, [r3]
 800b2da:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2ec:	61fb      	str	r3, [r7, #28]
 800b2ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f0:	69b9      	ldr	r1, [r7, #24]
 800b2f2:	69fa      	ldr	r2, [r7, #28]
 800b2f4:	e841 2300 	strex	r3, r2, [r1]
 800b2f8:	617b      	str	r3, [r7, #20]
   return(result);
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1e6      	bne.n	800b2ce <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b300:	e002      	b.n	800b308 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b302:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b304:	f7ff f99c 	bl	800a640 <HAL_UART_TxCpltCallback>
}
 800b308:	bf00      	nop
 800b30a:	3740      	adds	r7, #64	@ 0x40
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b31c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f7ff f998 	bl	800a654 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b324:	bf00      	nop
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b09c      	sub	sp, #112	@ 0x70
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b338:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f003 0320 	and.w	r3, r3, #32
 800b344:	2b00      	cmp	r3, #0
 800b346:	d171      	bne.n	800b42c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b34a:	2200      	movs	r2, #0
 800b34c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b350:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b358:	e853 3f00 	ldrex	r3, [r3]
 800b35c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b35e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b364:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b366:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	461a      	mov	r2, r3
 800b36c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b36e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b370:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b372:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b374:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b376:	e841 2300 	strex	r3, r2, [r1]
 800b37a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b37c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d1e6      	bne.n	800b350 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b382:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	3308      	adds	r3, #8
 800b388:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b38c:	e853 3f00 	ldrex	r3, [r3]
 800b390:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b394:	f023 0301 	bic.w	r3, r3, #1
 800b398:	667b      	str	r3, [r7, #100]	@ 0x64
 800b39a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3308      	adds	r3, #8
 800b3a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b3a2:	647a      	str	r2, [r7, #68]	@ 0x44
 800b3a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b3a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b3aa:	e841 2300 	strex	r3, r2, [r1]
 800b3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b3b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1e5      	bne.n	800b382 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	3308      	adds	r3, #8
 800b3bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c0:	e853 3f00 	ldrex	r3, [r3]
 800b3c4:	623b      	str	r3, [r7, #32]
   return(result);
 800b3c6:	6a3b      	ldr	r3, [r7, #32]
 800b3c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800b3ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	3308      	adds	r3, #8
 800b3d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b3d6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b3d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3de:	e841 2300 	strex	r3, r2, [r1]
 800b3e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1e5      	bne.n	800b3b6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b3ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3ec:	2220      	movs	r2, #32
 800b3ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d118      	bne.n	800b42c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	e853 3f00 	ldrex	r3, [r3]
 800b406:	60fb      	str	r3, [r7, #12]
   return(result);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f023 0310 	bic.w	r3, r3, #16
 800b40e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	461a      	mov	r2, r3
 800b416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b418:	61fb      	str	r3, [r7, #28]
 800b41a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41c:	69b9      	ldr	r1, [r7, #24]
 800b41e:	69fa      	ldr	r2, [r7, #28]
 800b420:	e841 2300 	strex	r3, r2, [r1]
 800b424:	617b      	str	r3, [r7, #20]
   return(result);
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d1e6      	bne.n	800b3fa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b42c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b42e:	2200      	movs	r2, #0
 800b430:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b434:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b436:	2b01      	cmp	r3, #1
 800b438:	d107      	bne.n	800b44a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b43a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b43c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b440:	4619      	mov	r1, r3
 800b442:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b444:	f002 f810 	bl	800d468 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b448:	e002      	b.n	800b450 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b44a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b44c:	f7ff f90c 	bl	800a668 <HAL_UART_RxCpltCallback>
}
 800b450:	bf00      	nop
 800b452:	3770      	adds	r7, #112	@ 0x70
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b464:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2201      	movs	r2, #1
 800b46a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b470:	2b01      	cmp	r3, #1
 800b472:	d109      	bne.n	800b488 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b47a:	085b      	lsrs	r3, r3, #1
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	4619      	mov	r1, r3
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f001 fff1 	bl	800d468 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b486:	e002      	b.n	800b48e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f7ff f8f7 	bl	800a67c <HAL_UART_RxHalfCpltCallback>
}
 800b48e:	bf00      	nop
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b086      	sub	sp, #24
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4aa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4b2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4be:	2b80      	cmp	r3, #128	@ 0x80
 800b4c0:	d109      	bne.n	800b4d6 <UART_DMAError+0x40>
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	2b21      	cmp	r3, #33	@ 0x21
 800b4c6:	d106      	bne.n	800b4d6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b4d0:	6978      	ldr	r0, [r7, #20]
 800b4d2:	f7ff fe29 	bl	800b128 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4e0:	2b40      	cmp	r3, #64	@ 0x40
 800b4e2:	d109      	bne.n	800b4f8 <UART_DMAError+0x62>
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2b22      	cmp	r3, #34	@ 0x22
 800b4e8:	d106      	bne.n	800b4f8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b4f2:	6978      	ldr	r0, [r7, #20]
 800b4f4:	f7ff fe59 	bl	800b1aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4fe:	f043 0210 	orr.w	r2, r3, #16
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b508:	6978      	ldr	r0, [r7, #20]
 800b50a:	f7ff f8c1 	bl	800a690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b50e:	bf00      	nop
 800b510:	3718      	adds	r7, #24
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b084      	sub	sp, #16
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b522:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2200      	movs	r2, #0
 800b528:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2200      	movs	r2, #0
 800b530:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f7ff f8ab 	bl	800a690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b53a:	bf00      	nop
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b088      	sub	sp, #32
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	e853 3f00 	ldrex	r3, [r3]
 800b556:	60bb      	str	r3, [r7, #8]
   return(result);
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b55e:	61fb      	str	r3, [r7, #28]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	461a      	mov	r2, r3
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	61bb      	str	r3, [r7, #24]
 800b56a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56c:	6979      	ldr	r1, [r7, #20]
 800b56e:	69ba      	ldr	r2, [r7, #24]
 800b570:	e841 2300 	strex	r3, r2, [r1]
 800b574:	613b      	str	r3, [r7, #16]
   return(result);
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1e6      	bne.n	800b54a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2220      	movs	r2, #32
 800b580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7ff f858 	bl	800a640 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b590:	bf00      	nop
 800b592:	3720      	adds	r7, #32
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b5b4:	bf00      	nop
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d101      	bne.n	800b5ea <HAL_UARTEx_DisableFifoMode+0x16>
 800b5e6:	2302      	movs	r3, #2
 800b5e8:	e027      	b.n	800b63a <HAL_UARTEx_DisableFifoMode+0x66>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2224      	movs	r2, #36	@ 0x24
 800b5f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f022 0201 	bic.w	r2, r2, #1
 800b610:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b618:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2220      	movs	r2, #32
 800b62c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr

0800b646 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b084      	sub	sp, #16
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b656:	2b01      	cmp	r3, #1
 800b658:	d101      	bne.n	800b65e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b65a:	2302      	movs	r3, #2
 800b65c:	e02d      	b.n	800b6ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2201      	movs	r2, #1
 800b662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2224      	movs	r2, #36	@ 0x24
 800b66a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f022 0201 	bic.w	r2, r2, #1
 800b684:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	683a      	ldr	r2, [r7, #0]
 800b696:	430a      	orrs	r2, r1
 800b698:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f8a4 	bl	800b7e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2220      	movs	r2, #32
 800b6ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b084      	sub	sp, #16
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d101      	bne.n	800b6da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	e02d      	b.n	800b736 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2224      	movs	r2, #36	@ 0x24
 800b6e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f022 0201 	bic.w	r2, r2, #1
 800b700:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	430a      	orrs	r2, r1
 800b714:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 f866 	bl	800b7e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2220      	movs	r2, #32
 800b728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b08c      	sub	sp, #48	@ 0x30
 800b742:	af00      	add	r7, sp, #0
 800b744:	60f8      	str	r0, [r7, #12]
 800b746:	60b9      	str	r1, [r7, #8]
 800b748:	4613      	mov	r3, r2
 800b74a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b752:	2b20      	cmp	r3, #32
 800b754:	d142      	bne.n	800b7dc <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d002      	beq.n	800b762 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b75c:	88fb      	ldrh	r3, [r7, #6]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d101      	bne.n	800b766 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	e03b      	b.n	800b7de <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2201      	movs	r2, #1
 800b76a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2200      	movs	r2, #0
 800b770:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b772:	88fb      	ldrh	r3, [r7, #6]
 800b774:	461a      	mov	r2, r3
 800b776:	68b9      	ldr	r1, [r7, #8]
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	f7ff fc2f 	bl	800afdc <UART_Start_Receive_DMA>
 800b77e:	4603      	mov	r3, r0
 800b780:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b784:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d124      	bne.n	800b7d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b790:	2b01      	cmp	r3, #1
 800b792:	d11d      	bne.n	800b7d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2210      	movs	r2, #16
 800b79a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	e853 3f00 	ldrex	r3, [r3]
 800b7a8:	617b      	str	r3, [r7, #20]
   return(result);
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f043 0310 	orr.w	r3, r3, #16
 800b7b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7bc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7be:	6a39      	ldr	r1, [r7, #32]
 800b7c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7c2:	e841 2300 	strex	r3, r2, [r1]
 800b7c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1e6      	bne.n	800b79c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b7ce:	e002      	b.n	800b7d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b7d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7da:	e000      	b.n	800b7de <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b7dc:	2302      	movs	r3, #2
  }
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3730      	adds	r7, #48	@ 0x30
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
	...

0800b7e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d108      	bne.n	800b80a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b808:	e031      	b.n	800b86e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b80a:	2308      	movs	r3, #8
 800b80c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b80e:	2308      	movs	r3, #8
 800b810:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	0e5b      	lsrs	r3, r3, #25
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	f003 0307 	and.w	r3, r3, #7
 800b820:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	0f5b      	lsrs	r3, r3, #29
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	f003 0307 	and.w	r3, r3, #7
 800b830:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b832:	7bbb      	ldrb	r3, [r7, #14]
 800b834:	7b3a      	ldrb	r2, [r7, #12]
 800b836:	4911      	ldr	r1, [pc, #68]	@ (800b87c <UARTEx_SetNbDataToProcess+0x94>)
 800b838:	5c8a      	ldrb	r2, [r1, r2]
 800b83a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b83e:	7b3a      	ldrb	r2, [r7, #12]
 800b840:	490f      	ldr	r1, [pc, #60]	@ (800b880 <UARTEx_SetNbDataToProcess+0x98>)
 800b842:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b844:	fb93 f3f2 	sdiv	r3, r3, r2
 800b848:	b29a      	uxth	r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b850:	7bfb      	ldrb	r3, [r7, #15]
 800b852:	7b7a      	ldrb	r2, [r7, #13]
 800b854:	4909      	ldr	r1, [pc, #36]	@ (800b87c <UARTEx_SetNbDataToProcess+0x94>)
 800b856:	5c8a      	ldrb	r2, [r1, r2]
 800b858:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b85c:	7b7a      	ldrb	r2, [r7, #13]
 800b85e:	4908      	ldr	r1, [pc, #32]	@ (800b880 <UARTEx_SetNbDataToProcess+0x98>)
 800b860:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b862:	fb93 f3f2 	sdiv	r3, r3, r2
 800b866:	b29a      	uxth	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b86e:	bf00      	nop
 800b870:	3714      	adds	r7, #20
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	08012be0 	.word	0x08012be0
 800b880:	08012be8 	.word	0x08012be8

0800b884 <goToZeroElecAngle>:
#include "pid.h"
#include "lowpass_filter.h"
#include "app.h"

void goToZeroElecAngle(BldcMotor *motor)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
    setTorque(motor, 0, OPEN_LOOP_TORQUE, 0);
 800b88c:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800b8b0 <goToZeroElecAngle+0x2c>
 800b890:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800b8b4 <goToZeroElecAngle+0x30>
 800b894:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800b8b0 <goToZeroElecAngle+0x2c>
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f001 f829 	bl	800c8f0 <setTorque>
    delay(700);
 800b89e:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800b8a2:	f002 fa2d 	bl	800dd00 <delay>
}
 800b8a6:	bf00      	nop
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	00000000 	.word	0x00000000
 800b8b4:	405db3d7 	.word	0x405db3d7

0800b8b8 <alignSensor>:
void alignSensor(BldcMotor *motor)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b08a      	sub	sp, #40	@ 0x28
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
    for (int i = 0; i <= 500; i++)
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8c4:	e025      	b.n	800b912 <alignSensor+0x5a>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800b8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c8:	ee07 3a90 	vmov	s15, r3
 800b8cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8d0:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 800bab8 <alignSensor+0x200>
 800b8d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b8d8:	eddf 6a78 	vldr	s13, [pc, #480]	@ 800babc <alignSensor+0x204>
 800b8dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8e0:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 800bac0 <alignSensor+0x208>
 800b8e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b8e8:	edc7 7a02 	vstr	s15, [r7, #8]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800b8ec:	ed97 1a02 	vldr	s2, [r7, #8]
 800b8f0:	eddf 0a74 	vldr	s1, [pc, #464]	@ 800bac4 <alignSensor+0x20c>
 800b8f4:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 800bac8 <alignSensor+0x210>
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 fff9 	bl	800c8f0 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4618      	mov	r0, r3
 800b902:	f000 fccd 	bl	800c2a0 <encoderUpdate>
        delay(2);
 800b906:	2002      	movs	r0, #2
 800b908:	f002 f9fa 	bl	800dd00 <delay>
    for (int i = 0; i <= 500; i++)
 800b90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90e:	3301      	adds	r3, #1
 800b910:	627b      	str	r3, [r7, #36]	@ 0x24
 800b912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b914:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b918:	ddd5      	ble.n	800b8c6 <alignSensor+0xe>
    }
    encoderUpdate(&motor->magEncoder);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4618      	mov	r0, r3
 800b91e:	f000 fcbf 	bl	800c2a0 <encoderUpdate>
    float mid_angle = motor->magEncoder.fullAngle;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	695b      	ldr	r3, [r3, #20]
 800b926:	61fb      	str	r3, [r7, #28]
    // move one electrical revolution backwards
    for (int i = 500; i >= 0; i--)
 800b928:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800b92c:	623b      	str	r3, [r7, #32]
 800b92e:	e025      	b.n	800b97c <alignSensor+0xc4>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800b930:	6a3b      	ldr	r3, [r7, #32]
 800b932:	ee07 3a90 	vmov	s15, r3
 800b936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b93a:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800bab8 <alignSensor+0x200>
 800b93e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b942:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800babc <alignSensor+0x204>
 800b946:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b94a:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800bac0 <alignSensor+0x208>
 800b94e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b952:	edc7 7a03 	vstr	s15, [r7, #12]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800b956:	ed97 1a03 	vldr	s2, [r7, #12]
 800b95a:	eddf 0a5a 	vldr	s1, [pc, #360]	@ 800bac4 <alignSensor+0x20c>
 800b95e:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 800bac8 <alignSensor+0x210>
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 ffc4 	bl	800c8f0 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f000 fc98 	bl	800c2a0 <encoderUpdate>
        delay(2);
 800b970:	2002      	movs	r0, #2
 800b972:	f002 f9c5 	bl	800dd00 <delay>
    for (int i = 500; i >= 0; i--)
 800b976:	6a3b      	ldr	r3, [r7, #32]
 800b978:	3b01      	subs	r3, #1
 800b97a:	623b      	str	r3, [r7, #32]
 800b97c:	6a3b      	ldr	r3, [r7, #32]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	dad6      	bge.n	800b930 <alignSensor+0x78>
    }
    encoderUpdate(&motor->magEncoder);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4618      	mov	r0, r3
 800b986:	f000 fc8b 	bl	800c2a0 <encoderUpdate>
    float end_angle = motor->magEncoder.fullAngle;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	695b      	ldr	r3, [r3, #20]
 800b98e:	61bb      	str	r3, [r7, #24]
    // setPhaseVoltage(0, 0, 0);
    delay(200);
 800b990:	20c8      	movs	r0, #200	@ 0xc8
 800b992:	f002 f9b5 	bl	800dd00 <delay>

    // determine the direction the sensor moved
    float moved = fabs(mid_angle - end_angle);
 800b996:	ed97 7a07 	vldr	s14, [r7, #28]
 800b99a:	edd7 7a06 	vldr	s15, [r7, #24]
 800b99e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9a2:	eef0 7ae7 	vabs.f32	s15, s15
 800b9a6:	edc7 7a05 	vstr	s15, [r7, #20]
    if (moved < MIN_ANGLE_DETECT_MOVEMENT)
 800b9aa:	edd7 7a05 	vldr	s15, [r7, #20]
 800b9ae:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800bacc <alignSensor+0x214>
 800b9b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ba:	d503      	bpl.n	800b9c4 <alignSensor+0x10c>
    { // minimum angle to detect movement
        FOC_log("Failed to notice movement\n");
 800b9bc:	4844      	ldr	r0, [pc, #272]	@ (800bad0 <alignSensor+0x218>)
 800b9be:	f001 fd6f 	bl	800d4a0 <FOC_log>
        return 0; // failed calibration
 800b9c2:	e075      	b.n	800bab0 <alignSensor+0x1f8>
    }
    else if (mid_angle < end_angle)
 800b9c4:	ed97 7a07 	vldr	s14, [r7, #28]
 800b9c8:	edd7 7a06 	vldr	s15, [r7, #24]
 800b9cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9d4:	d507      	bpl.n	800b9e6 <alignSensor+0x12e>
    {
        FOC_log("sensor_direction==CCW\n");
 800b9d6:	483f      	ldr	r0, [pc, #252]	@ (800bad4 <alignSensor+0x21c>)
 800b9d8:	f001 fd62 	bl	800d4a0 <FOC_log>
        motor->magEncoder.direction = CCW;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	22ff      	movs	r2, #255	@ 0xff
 800b9e0:	f883 2020 	strb.w	r2, [r3, #32]
 800b9e4:	e006      	b.n	800b9f4 <alignSensor+0x13c>
    }
    else
    {
        FOC_log("sensor_direction==CW\n");
 800b9e6:	483c      	ldr	r0, [pc, #240]	@ (800bad8 <alignSensor+0x220>)
 800b9e8:	f001 fd5a 	bl	800d4a0 <FOC_log>
        motor->magEncoder.direction = CW;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 2020 	strb.w	r2, [r3, #32]
    }
    // check pole pair number
    bool pp_check_result = !(fabs(moved * motor->pole_pairs - _2PI) > 0.5f); // 0.5f is arbitrary number it can be lower or higher!
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b9fa:	ee07 3a90 	vmov	s15, r3
 800b9fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba02:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba0a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800bab8 <alignSensor+0x200>
 800ba0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba12:	eef0 7ae7 	vabs.f32	s15, s15
 800ba16:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ba1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba22:	bfcc      	ite	gt
 800ba24:	2301      	movgt	r3, #1
 800ba26:	2300      	movle	r3, #0
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	f083 0301 	eor.w	r3, r3, #1
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	74fb      	strb	r3, [r7, #19]
    if (pp_check_result == false)
 800ba32:	7cfb      	ldrb	r3, [r7, #19]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10f      	bne.n	800ba58 <alignSensor+0x1a0>
    {
        FOC_log("PP check: fail - estimated pp: \n", _2PI / moved);
 800ba38:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800bab8 <alignSensor+0x200>
 800ba3c:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba40:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ba44:	ee16 0a90 	vmov	r0, s13
 800ba48:	f7f4 fda6 	bl	8000598 <__aeabi_f2d>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	460b      	mov	r3, r1
 800ba50:	4822      	ldr	r0, [pc, #136]	@ (800badc <alignSensor+0x224>)
 800ba52:	f001 fd25 	bl	800d4a0 <FOC_log>
 800ba56:	e002      	b.n	800ba5e <alignSensor+0x1a6>
    }
    else
    {
        FOC_log("PP check: OK!\n");
 800ba58:	4821      	ldr	r0, [pc, #132]	@ (800bae0 <alignSensor+0x228>)
 800ba5a:	f001 fd21 	bl	800d4a0 <FOC_log>
    }

    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    goToZeroElecAngle(motor);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f7ff ff10 	bl	800b884 <goToZeroElecAngle>
    // read the sensor
    encoderUpdate(&motor->magEncoder);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4618      	mov	r0, r3
 800ba68:	f000 fc1a 	bl	800c2a0 <encoderUpdate>
    // get the current zero electric angle
    motor->zeroElectricAngleOffSet = 0;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f04f 0200 	mov.w	r2, #0
 800ba72:	635a      	str	r2, [r3, #52]	@ 0x34
    getElecAngle(motor);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 f839 	bl	800baec <getElecAngle>
    motor->zeroElectricAngleOffSet = motor->angle_el;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	635a      	str	r2, [r3, #52]	@ 0x34
    // zero_electric_angle =  _normalizeAngle(_electricalAngle(sensor_direction*sensor->getAngle(), pole_pairs));
    // delay(20);
    // encoderUpdate(&motor->magEncoder);
    getElecAngle(motor);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f832 	bl	800baec <getElecAngle>
    // motor->zeroElectricAngleOffSet = 0;
    // FOC_log("[zeroAngleOffset]:%f  [zeroAngle]:%f\r\n", motor->zeroElectricAngleOffSet, motor->angle_el);
    FOC_log("[zeroAngleOffset]:%f\n", motor->zeroElectricAngleOffSet);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7f4 fd83 	bl	8000598 <__aeabi_f2d>
 800ba92:	4602      	mov	r2, r0
 800ba94:	460b      	mov	r3, r1
 800ba96:	4813      	ldr	r0, [pc, #76]	@ (800bae4 <alignSensor+0x22c>)
 800ba98:	f001 fd02 	bl	800d4a0 <FOC_log>
    FOC_log("[zeroAngle]:%f\n", motor->angle_el);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7f4 fd79 	bl	8000598 <__aeabi_f2d>
 800baa6:	4602      	mov	r2, r0
 800baa8:	460b      	mov	r3, r1
 800baaa:	480f      	ldr	r0, [pc, #60]	@ (800bae8 <alignSensor+0x230>)
 800baac:	f001 fcf8 	bl	800d4a0 <FOC_log>
    // // make sure the angle_el is about zero

    // delay(200);
}
 800bab0:	3728      	adds	r7, #40	@ 0x28
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	40c90fdb 	.word	0x40c90fdb
 800babc:	43fa0000 	.word	0x43fa0000
 800bac0:	4096cbe4 	.word	0x4096cbe4
 800bac4:	00000000 	.word	0x00000000
 800bac8:	405db3d7 	.word	0x405db3d7
 800bacc:	3d7ecfa9 	.word	0x3d7ecfa9
 800bad0:	08012a98 	.word	0x08012a98
 800bad4:	08012ab4 	.word	0x08012ab4
 800bad8:	08012acc 	.word	0x08012acc
 800badc:	08012ae4 	.word	0x08012ae4
 800bae0:	08012b08 	.word	0x08012b08
 800bae4:	08012b18 	.word	0x08012b18
 800bae8:	08012b30 	.word	0x08012b30

0800baec <getElecAngle>:

void getElecAngle(BldcMotor *motor)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
    motor->angle_el = _normalizeAngle(motor->magEncoder.direction * motor->pole_pairs * motor->magEncoder.shaftAngle - motor->zeroElectricAngleOffSet);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800bafa:	461a      	mov	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bb02:	fb02 f303 	mul.w	r3, r2, r3
 800bb06:	ee07 3a90 	vmov	s15, r3
 800bb0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	edd3 7a04 	vldr	s15, [r3, #16]
 800bb14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800bb1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb22:	eeb0 0a67 	vmov.f32	s0, s15
 800bb26:	f000 fd5b 	bl	800c5e0 <_normalizeAngle>
 800bb2a:	eef0 7a40 	vmov.f32	s15, s0
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 800bb34:	bf00      	nop
 800bb36:	3708      	adds	r7, #8
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <foc>:

void foc(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b088      	sub	sp, #32
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	607a      	str	r2, [r7, #4]

    if (motor->state == MOTOR_CALIBRATE)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d111      	bne.n	800bb76 <foc+0x3a>
    {
        getCurrentOffsets(motor, adc_a, adc_b, 100);
 800bb52:	2364      	movs	r3, #100	@ 0x64
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	68b9      	ldr	r1, [r7, #8]
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	f000 f9a9 	bl	800beb0 <getCurrentOffsets>
        alignSensor(motor);
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f7ff feaa 	bl	800b8b8 <alignSensor>
        motor->state = MOTOR_READY;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2201      	movs	r2, #1
 800bb68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        motor->stopPwm();
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800bb72:	4798      	blx	r3
                break;
            }
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
        }
    }
}
 800bb74:	e191      	b.n	800be9a <foc+0x35e>
        getPhaseCurrents(motor, adc_a, adc_b);
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	68b9      	ldr	r1, [r7, #8]
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f000 fa6c 	bl	800c058 <getPhaseCurrents>
        getABCurrents(motor);
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f000 fafb 	bl	800c17c <getABCurrents>
        getDQCurrents(motor);
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f000 fb1e 	bl	800c1c8 <getDQCurrents>
        motor->Iq = lpfOperator(&motor->IqFilter, motor->Iq);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800bb98:	eeb0 0a67 	vmov.f32	s0, s15
 800bb9c:	4610      	mov	r0, r2
 800bb9e:	f000 fc17 	bl	800c3d0 <lpfOperator>
 800bba2:	eef0 7a40 	vmov.f32	s15, s0
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        motor->Id = lpfOperator(&motor->IdFilter, motor->Id);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f103 02fc 	add.w	r2, r3, #252	@ 0xfc
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800bbb8:	eeb0 0a67 	vmov.f32	s0, s15
 800bbbc:	4610      	mov	r0, r2
 800bbbe:	f000 fc07 	bl	800c3d0 <lpfOperator>
 800bbc2:	eef0 7a40 	vmov.f32	s15, s0
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
        encoderUpdate(&motor->magEncoder);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 fb66 	bl	800c2a0 <encoderUpdate>
        motor->magEncoder.velocity = lpfOperator(&motor->velocityFilter, motor->magEncoder.velocity);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f503 7284 	add.w	r2, r3, #264	@ 0x108
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	edd3 7a06 	vldr	s15, [r3, #24]
 800bbe0:	eeb0 0a67 	vmov.f32	s0, s15
 800bbe4:	4610      	mov	r0, r2
 800bbe6:	f000 fbf3 	bl	800c3d0 <lpfOperator>
 800bbea:	eef0 7a40 	vmov.f32	s15, s0
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	edc3 7a06 	vstr	s15, [r3, #24]
        getElecAngle(motor);
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f7ff ff79 	bl	800baec <getElecAngle>
        if (motor->state == MOTOR_READY)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	f000 814a 	beq.w	800be9a <foc+0x35e>
        else if (motor->state == MOTOR_START)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	f040 8144 	bne.w	800be9a <foc+0x35e>
            switch (motor->controlType)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bc18:	2b03      	cmp	r3, #3
 800bc1a:	f200 812c 	bhi.w	800be76 <foc+0x33a>
 800bc1e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc24 <foc+0xe8>)
 800bc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc24:	0800bc35 	.word	0x0800bc35
 800bc28:	0800bc9f 	.word	0x0800bc9f
 800bc2c:	0800bcf5 	.word	0x0800bcf5
 800bc30:	0800bda5 	.word	0x0800bda5
                if (motor->torqueType == VOLTAGE)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d105      	bne.n	800bc4a <foc+0x10e>
                    motor->Uq = motor->target;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                break;
 800bc48:	e115      	b.n	800be76 <foc+0x33a>
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800bc56:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800bea4 <foc+0x368>
 800bc5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc5e:	eeb0 0a67 	vmov.f32	s0, s15
 800bc62:	4610      	mov	r0, r2
 800bc64:	f000 fd3c 	bl	800c6e0 <pidOperator>
 800bc68:	eef0 7a40 	vmov.f32	s15, s0
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
                    motor->Uq = pidOperator(&motor->pidIq, motor->target - motor->Iq);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800bc84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc88:	eeb0 0a67 	vmov.f32	s0, s15
 800bc8c:	4610      	mov	r0, r2
 800bc8e:	f000 fd27 	bl	800c6e0 <pidOperator>
 800bc92:	eef0 7a40 	vmov.f32	s15, s0
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800bc9c:	e0eb      	b.n	800be76 <foc+0x33a>
                shaftAngle = _normalizeAngle(shaftAngle + motor->target * motor->Ts);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bcaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bcae:	4b7e      	ldr	r3, [pc, #504]	@ (800bea8 <foc+0x36c>)
 800bcb0:	edd3 7a00 	vldr	s15, [r3]
 800bcb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcb8:	eeb0 0a67 	vmov.f32	s0, s15
 800bcbc:	f000 fc90 	bl	800c5e0 <_normalizeAngle>
 800bcc0:	eef0 7a40 	vmov.f32	s15, s0
 800bcc4:	4b78      	ldr	r3, [pc, #480]	@ (800bea8 <foc+0x36c>)
 800bcc6:	edc3 7a00 	vstr	s15, [r3]
                motor->angle_el = _electricalAngle(shaftAngle, motor->pole_pairs);
 800bcca:	4b77      	ldr	r3, [pc, #476]	@ (800bea8 <foc+0x36c>)
 800bccc:	edd3 7a00 	vldr	s15, [r3]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	eeb0 0a67 	vmov.f32	s0, s15
 800bcdc:	f000 fcb6 	bl	800c64c <_electricalAngle>
 800bce0:	eef0 7a40 	vmov.f32	s15, s0
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                motor->Uq = OPEN_LOOP_TORQUE;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	4a6f      	ldr	r2, [pc, #444]	@ (800beac <foc+0x370>)
 800bcee:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                break;
 800bcf2:	e0c0      	b.n	800be76 <foc+0x33a>
                if (motor->torqueType == VOLTAGE)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d116      	bne.n	800bd2c <foc+0x1f0>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	edd3 7a06 	vldr	s15, [r3, #24]
 800bd0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd0e:	edc7 7a04 	vstr	s15, [r7, #16]
                    motor->Uq = pidOperator(&motor->velocityPID, velocityErr);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	33a8      	adds	r3, #168	@ 0xa8
 800bd16:	ed97 0a04 	vldr	s0, [r7, #16]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 fce0 	bl	800c6e0 <pidOperator>
 800bd20:	eef0 7a40 	vmov.f32	s15, s0
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800bd2a:	e0a4      	b.n	800be76 <foc+0x33a>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	edd3 7a06 	vldr	s15, [r3, #24]
 800bd38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd3c:	edc7 7a04 	vstr	s15, [r7, #16]
                    IqRef = pidOperator(&motor->velocityPID, velocityErr);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	33a8      	adds	r3, #168	@ 0xa8
 800bd44:	ed97 0a04 	vldr	s0, [r7, #16]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 fcc9 	bl	800c6e0 <pidOperator>
 800bd4e:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800bd5e:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800bea4 <foc+0x368>
 800bd62:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd66:	eeb0 0a67 	vmov.f32	s0, s15
 800bd6a:	4610      	mov	r0, r2
 800bd6c:	f000 fcb8 	bl	800c6e0 <pidOperator>
 800bd70:	eef0 7a40 	vmov.f32	s15, s0
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800bd86:	ed97 7a05 	vldr	s14, [r7, #20]
 800bd8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd8e:	eeb0 0a67 	vmov.f32	s0, s15
 800bd92:	4610      	mov	r0, r2
 800bd94:	f000 fca4 	bl	800c6e0 <pidOperator>
 800bd98:	eef0 7a40 	vmov.f32	s15, s0
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800bda2:	e068      	b.n	800be76 <foc+0x33a>
                if (motor->torqueType == VOLTAGE)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d116      	bne.n	800bddc <foc+0x2a0>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	edd3 7a05 	vldr	s15, [r3, #20]
 800bdba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdbe:	edc7 7a07 	vstr	s15, [r7, #28]
                    motor->Uq = pidOperator(&motor->anglePID, angleErr);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	33cc      	adds	r3, #204	@ 0xcc
 800bdc6:	ed97 0a07 	vldr	s0, [r7, #28]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f000 fc88 	bl	800c6e0 <pidOperator>
 800bdd0:	eef0 7a40 	vmov.f32	s15, s0
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800bdda:	e04b      	b.n	800be74 <foc+0x338>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	edd3 7a05 	vldr	s15, [r3, #20]
 800bde8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdec:	edc7 7a07 	vstr	s15, [r7, #28]
                    velocityRef = pidOperator(&motor->anglePID, angleErr);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	33cc      	adds	r3, #204	@ 0xcc
 800bdf4:	ed97 0a07 	vldr	s0, [r7, #28]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f000 fc71 	bl	800c6e0 <pidOperator>
 800bdfe:	ed87 0a06 	vstr	s0, [r7, #24]
                    IqRef = pidOperator(&motor->velocityPID, velocityRef - motor->magEncoder.velocity);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	edd3 7a06 	vldr	s15, [r3, #24]
 800be0e:	ed97 7a06 	vldr	s14, [r7, #24]
 800be12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be16:	eeb0 0a67 	vmov.f32	s0, s15
 800be1a:	4610      	mov	r0, r2
 800be1c:	f000 fc60 	bl	800c6e0 <pidOperator>
 800be20:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800be30:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800bea4 <foc+0x368>
 800be34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be38:	eeb0 0a67 	vmov.f32	s0, s15
 800be3c:	4610      	mov	r0, r2
 800be3e:	f000 fc4f 	bl	800c6e0 <pidOperator>
 800be42:	eef0 7a40 	vmov.f32	s15, s0
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800be58:	ed97 7a05 	vldr	s14, [r7, #20]
 800be5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be60:	eeb0 0a67 	vmov.f32	s0, s15
 800be64:	4610      	mov	r0, r2
 800be66:	f000 fc3b 	bl	800c6e0 <pidOperator>
 800be6a:	eef0 7a40 	vmov.f32	s15, s0
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                break;
 800be74:	bf00      	nop
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	edd3 7a46 	vldr	s15, [r3, #280]	@ 0x118
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	ed93 7a45 	vldr	s14, [r3, #276]	@ 0x114
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800be88:	eeb0 1a66 	vmov.f32	s2, s13
 800be8c:	eef0 0a47 	vmov.f32	s1, s14
 800be90:	eeb0 0a67 	vmov.f32	s0, s15
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	f000 fd2b 	bl	800c8f0 <setTorque>
}
 800be9a:	bf00      	nop
 800be9c:	3720      	adds	r7, #32
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	00000000 	.word	0x00000000
 800bea8:	200006f8 	.word	0x200006f8
 800beac:	405db3d7 	.word	0x405db3d7

0800beb0 <getCurrentOffsets>:
#include "math_utils.h"
#include "comm.h"

// Function finding zero offsets of the ADC
void getCurrentOffsets(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b, uint32_t rounds)
{
 800beb0:	b5b0      	push	{r4, r5, r7, lr}
 800beb2:	b086      	sub	sp, #24
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
 800bebc:	603b      	str	r3, [r7, #0]
    // find adc offset = zero current voltage
    motor->offset_ia = 0;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f04f 0200 	mov.w	r2, #0
 800bec4:	641a      	str	r2, [r3, #64]	@ 0x40
    motor->offset_ib = 0;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f04f 0200 	mov.w	r2, #0
 800becc:	645a      	str	r2, [r3, #68]	@ 0x44
    // read the adc voltage  times ( arbitrary number )
    for (int i = 0; i < rounds; i++)
 800bece:	2300      	movs	r3, #0
 800bed0:	617b      	str	r3, [r7, #20]
 800bed2:	e076      	b.n	800bfc2 <getCurrentOffsets+0x112>
    {
        motor->offset_ia += ADC_2_CURRENT(adc_a);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bed8:	4618      	mov	r0, r3
 800beda:	f7f4 fb5d 	bl	8000598 <__aeabi_f2d>
 800bede:	4604      	mov	r4, r0
 800bee0:	460d      	mov	r5, r1
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	ee07 3a90 	vmov	s15, r3
 800bee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beec:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800c048 <getCurrentOffsets+0x198>
 800bef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bef4:	ee17 0a90 	vmov	r0, s15
 800bef8:	f7f4 fb4e 	bl	8000598 <__aeabi_f2d>
 800befc:	a34c      	add	r3, pc, #304	@ (adr r3, 800c030 <getCurrentOffsets+0x180>)
 800befe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf02:	f7f4 fccb 	bl	800089c <__aeabi_ddiv>
 800bf06:	4602      	mov	r2, r0
 800bf08:	460b      	mov	r3, r1
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	a34a      	add	r3, pc, #296	@ (adr r3, 800c038 <getCurrentOffsets+0x188>)
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	f7f4 fcc2 	bl	800089c <__aeabi_ddiv>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	4610      	mov	r0, r2
 800bf1e:	4619      	mov	r1, r3
 800bf20:	a347      	add	r3, pc, #284	@ (adr r3, 800c040 <getCurrentOffsets+0x190>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	f7f4 fcb9 	bl	800089c <__aeabi_ddiv>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4620      	mov	r0, r4
 800bf30:	4629      	mov	r1, r5
 800bf32:	f7f4 f9d3 	bl	80002dc <__adddf3>
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	4610      	mov	r0, r2
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	f7f4 fe7b 	bl	8000c38 <__aeabi_d2f>
 800bf42:	4602      	mov	r2, r0
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	641a      	str	r2, [r3, #64]	@ 0x40
        motor->offset_ib += ADC_2_CURRENT(adc_b);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7f4 fb23 	bl	8000598 <__aeabi_f2d>
 800bf52:	4604      	mov	r4, r0
 800bf54:	460d      	mov	r5, r1
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	ee07 3a90 	vmov	s15, r3
 800bf5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf60:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800c048 <getCurrentOffsets+0x198>
 800bf64:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bf68:	ee17 0a90 	vmov	r0, s15
 800bf6c:	f7f4 fb14 	bl	8000598 <__aeabi_f2d>
 800bf70:	a32f      	add	r3, pc, #188	@ (adr r3, 800c030 <getCurrentOffsets+0x180>)
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	f7f4 fc91 	bl	800089c <__aeabi_ddiv>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	4610      	mov	r0, r2
 800bf80:	4619      	mov	r1, r3
 800bf82:	a32d      	add	r3, pc, #180	@ (adr r3, 800c038 <getCurrentOffsets+0x188>)
 800bf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf88:	f7f4 fc88 	bl	800089c <__aeabi_ddiv>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	460b      	mov	r3, r1
 800bf90:	4610      	mov	r0, r2
 800bf92:	4619      	mov	r1, r3
 800bf94:	a32a      	add	r3, pc, #168	@ (adr r3, 800c040 <getCurrentOffsets+0x190>)
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	f7f4 fc7f 	bl	800089c <__aeabi_ddiv>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	4629      	mov	r1, r5
 800bfa6:	f7f4 f999 	bl	80002dc <__adddf3>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	460b      	mov	r3, r1
 800bfae:	4610      	mov	r0, r2
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	f7f4 fe41 	bl	8000c38 <__aeabi_d2f>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 0; i < rounds; i++)
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	617b      	str	r3, [r7, #20]
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	683a      	ldr	r2, [r7, #0]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d884      	bhi.n	800bed4 <getCurrentOffsets+0x24>
    }
    // calculate the mean offsets
    motor->offset_ia = motor->offset_ia / rounds;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	ee07 3a90 	vmov	s15, r3
 800bfd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bfda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    motor->offset_ib = motor->offset_ib / rounds;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	ee07 3a90 	vmov	s15, r3
 800bff0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    // FOC_log("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    // printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    FOC_log("[offset_ia]:%f\r\n", motor->offset_ia);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c002:	4618      	mov	r0, r3
 800c004:	f7f4 fac8 	bl	8000598 <__aeabi_f2d>
 800c008:	4602      	mov	r2, r0
 800c00a:	460b      	mov	r3, r1
 800c00c:	480f      	ldr	r0, [pc, #60]	@ (800c04c <getCurrentOffsets+0x19c>)
 800c00e:	f001 fa47 	bl	800d4a0 <FOC_log>
    FOC_log("[offset_ib]:%f\r\n", motor->offset_ib);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c016:	4618      	mov	r0, r3
 800c018:	f7f4 fabe 	bl	8000598 <__aeabi_f2d>
 800c01c:	4602      	mov	r2, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	480b      	ldr	r0, [pc, #44]	@ (800c050 <getCurrentOffsets+0x1a0>)
 800c022:	f001 fa3d 	bl	800d4a0 <FOC_log>
    // _dbg_printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
}
 800c026:	bf00      	nop
 800c028:	3718      	adds	r7, #24
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bdb0      	pop	{r4, r5, r7, pc}
 800c02e:	bf00      	nop
 800c030:	00000000 	.word	0x00000000
 800c034:	40affe00 	.word	0x40affe00
 800c038:	40000000 	.word	0x40000000
 800c03c:	3f747ae1 	.word	0x3f747ae1
 800c040:	a0000000 	.word	0xa0000000
 800c044:	401d554c 	.word	0x401d554c
 800c048:	40533333 	.word	0x40533333
 800c04c:	08012b40 	.word	0x08012b40
 800c050:	08012b54 	.word	0x08012b54
 800c054:	00000000 	.word	0x00000000

0800c058 <getPhaseCurrents>:

// read all three phase currents (if possible 2 or 3)
void getPhaseCurrents(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800c058:	b5b0      	push	{r4, r5, r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
    motor->Ia = ADC_2_CURRENT(adc_a) - motor->offset_ia; // amps
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	ee07 3a90 	vmov	s15, r3
 800c06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c06e:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800c178 <getPhaseCurrents+0x120>
 800c072:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c076:	ee17 0a90 	vmov	r0, s15
 800c07a:	f7f4 fa8d 	bl	8000598 <__aeabi_f2d>
 800c07e:	a338      	add	r3, pc, #224	@ (adr r3, 800c160 <getPhaseCurrents+0x108>)
 800c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c084:	f7f4 fc0a 	bl	800089c <__aeabi_ddiv>
 800c088:	4602      	mov	r2, r0
 800c08a:	460b      	mov	r3, r1
 800c08c:	4610      	mov	r0, r2
 800c08e:	4619      	mov	r1, r3
 800c090:	a335      	add	r3, pc, #212	@ (adr r3, 800c168 <getPhaseCurrents+0x110>)
 800c092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c096:	f7f4 fc01 	bl	800089c <__aeabi_ddiv>
 800c09a:	4602      	mov	r2, r0
 800c09c:	460b      	mov	r3, r1
 800c09e:	4610      	mov	r0, r2
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	a333      	add	r3, pc, #204	@ (adr r3, 800c170 <getPhaseCurrents+0x118>)
 800c0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a8:	f7f4 fbf8 	bl	800089c <__aeabi_ddiv>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	4614      	mov	r4, r2
 800c0b2:	461d      	mov	r5, r3
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7f4 fa6d 	bl	8000598 <__aeabi_f2d>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	f7f4 f907 	bl	80002d8 <__aeabi_dsub>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4610      	mov	r0, r2
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	f7f4 fdb1 	bl	8000c38 <__aeabi_d2f>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	649a      	str	r2, [r3, #72]	@ 0x48
    motor->Ib = ADC_2_CURRENT(adc_b) - motor->offset_ib;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	ee07 3a90 	vmov	s15, r3
 800c0e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0e6:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800c178 <getPhaseCurrents+0x120>
 800c0ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c0ee:	ee17 0a90 	vmov	r0, s15
 800c0f2:	f7f4 fa51 	bl	8000598 <__aeabi_f2d>
 800c0f6:	a31a      	add	r3, pc, #104	@ (adr r3, 800c160 <getPhaseCurrents+0x108>)
 800c0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fc:	f7f4 fbce 	bl	800089c <__aeabi_ddiv>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	4610      	mov	r0, r2
 800c106:	4619      	mov	r1, r3
 800c108:	a317      	add	r3, pc, #92	@ (adr r3, 800c168 <getPhaseCurrents+0x110>)
 800c10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10e:	f7f4 fbc5 	bl	800089c <__aeabi_ddiv>
 800c112:	4602      	mov	r2, r0
 800c114:	460b      	mov	r3, r1
 800c116:	4610      	mov	r0, r2
 800c118:	4619      	mov	r1, r3
 800c11a:	a315      	add	r3, pc, #84	@ (adr r3, 800c170 <getPhaseCurrents+0x118>)
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	f7f4 fbbc 	bl	800089c <__aeabi_ddiv>
 800c124:	4602      	mov	r2, r0
 800c126:	460b      	mov	r3, r1
 800c128:	4614      	mov	r4, r2
 800c12a:	461d      	mov	r5, r3
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c130:	4618      	mov	r0, r3
 800c132:	f7f4 fa31 	bl	8000598 <__aeabi_f2d>
 800c136:	4602      	mov	r2, r0
 800c138:	460b      	mov	r3, r1
 800c13a:	4620      	mov	r0, r4
 800c13c:	4629      	mov	r1, r5
 800c13e:	f7f4 f8cb 	bl	80002d8 <__aeabi_dsub>
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	4610      	mov	r0, r2
 800c148:	4619      	mov	r1, r3
 800c14a:	f7f4 fd75 	bl	8000c38 <__aeabi_d2f>
 800c14e:	4602      	mov	r2, r0
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800c154:	bf00      	nop
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bdb0      	pop	{r4, r5, r7, pc}
 800c15c:	f3af 8000 	nop.w
 800c160:	00000000 	.word	0x00000000
 800c164:	40affe00 	.word	0x40affe00
 800c168:	40000000 	.word	0x40000000
 800c16c:	3f747ae1 	.word	0x3f747ae1
 800c170:	a0000000 	.word	0xa0000000
 800c174:	401d554c 	.word	0x401d554c
 800c178:	40533333 	.word	0x40533333

0800c17c <getABCurrents>:
// Ibeta = 1/sqrt(3) * Ia + 1/sqrt(3) * 2Ib
/*============================================================================*/
//   calculating Alpha Beta currents from phase currents
//   - function calculating Clarke transform of the phase currents
void getABCurrents(BldcMotor *motor)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
    motor->Ialpha = motor->Ia;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	651a      	str	r2, [r3, #80]	@ 0x50
    motor->Ibeta = _1_SQRT3 * motor->Ia + _2_SQRT3 * motor->Ib;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800c192:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800c1c0 <getABCurrents+0x44>
 800c196:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800c1a0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800c1c4 <getABCurrents+0x48>
 800c1a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c1a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
}
 800c1b2:	bf00      	nop
 800c1b4:	370c      	adds	r7, #12
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr
 800c1be:	bf00      	nop
 800c1c0:	3f13cd3a 	.word	0x3f13cd3a
 800c1c4:	3f93cd3a 	.word	0x3f93cd3a

0800c1c8 <getDQCurrents>:
/*============================================================================*/
// function used with the foc algorihtm
//   calculating D and Q currents from Alpha Beta currents and electrical angle
//   - function calculating Clarke transform of the phase currents
void getDQCurrents(BldcMotor *motor)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
    float ct;
    float st;
    _sincos(motor->angle_el, &st, &ct);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800c1d6:	f107 020c 	add.w	r2, r7, #12
 800c1da:	f107 0308 	add.w	r3, r7, #8
 800c1de:	4611      	mov	r1, r2
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	eeb0 0a67 	vmov.f32	s0, s15
 800c1e6:	f000 f9db 	bl	800c5a0 <_sincos>
    motor->Id = motor->Ialpha * ct + motor->Ibeta * st;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800c1f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c1f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800c1fe:	edd7 7a02 	vldr	s15, [r7, #8]
 800c202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    motor->Iq = motor->Ibeta * ct - motor->Ialpha * st;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800c216:	edd7 7a03 	vldr	s15, [r7, #12]
 800c21a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 800c224:	edd7 7a02 	vldr	s15, [r7, #8]
 800c228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c22c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
 800c236:	bf00      	nop
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <encoderInit>:

#include "encoder.h"
#include "math_utils.h"
void encoderInit(MagEncoder *encoder, float _Ts, float (*_getRawAngle)(void))
{
 800c23e:	b480      	push	{r7}
 800c240:	b085      	sub	sp, #20
 800c242:	af00      	add	r7, sp, #0
 800c244:	60f8      	str	r0, [r7, #12]
 800c246:	ed87 0a02 	vstr	s0, [r7, #8]
 800c24a:	6079      	str	r1, [r7, #4]
    encoder->angle_prev = 0;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f04f 0200 	mov.w	r2, #0
 800c252:	601a      	str	r2, [r3, #0]
    encoder->vel_angle_prev = 0;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f04f 0200 	mov.w	r2, #0
 800c25a:	605a      	str	r2, [r3, #4]
    encoder->full_rotations = 0;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2200      	movs	r2, #0
 800c260:	609a      	str	r2, [r3, #8]
    encoder->vel_full_rotations = 0;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2200      	movs	r2, #0
 800c266:	60da      	str	r2, [r3, #12]
    encoder->shaftAngle = 0;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f04f 0200 	mov.w	r2, #0
 800c26e:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = 0;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f04f 0200 	mov.w	r2, #0
 800c276:	615a      	str	r2, [r3, #20]
    encoder->velocity = 0;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f04f 0200 	mov.w	r2, #0
 800c27e:	619a      	str	r2, [r3, #24]
    encoder->Ts = _Ts;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	61da      	str	r2, [r3, #28]
    encoder->getRawAngle = _getRawAngle;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	625a      	str	r2, [r3, #36]	@ 0x24
    encoder->direction = UNKNOWN;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2200      	movs	r2, #0
 800c290:	f883 2020 	strb.w	r2, [r3, #32]
}
 800c294:	bf00      	nop
 800c296:	3714      	adds	r7, #20
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <encoderUpdate>:

void encoderUpdate(MagEncoder *encoder)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
    float val = encoder->getRawAngle();
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2ac:	4798      	blx	r3
 800c2ae:	ed87 0a03 	vstr	s0, [r7, #12]

    float d_angle = val - encoder->angle_prev;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	edd3 7a00 	vldr	s15, [r3]
 800c2b8:	ed97 7a03 	vldr	s14, [r7, #12]
 800c2bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2c0:	edc7 7a02 	vstr	s15, [r7, #8]
    // 圈数检测
    if (abs(d_angle) > (0.8f * _2PI))
 800c2c4:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2cc:	ee17 3a90 	vmov	r3, s15
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	bfb8      	it	lt
 800c2d4:	425b      	neglt	r3, r3
 800c2d6:	ee07 3a90 	vmov	s15, r3
 800c2da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2de:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800c398 <encoderUpdate+0xf8>
 800c2e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ea:	dd0f      	ble.n	800c30c <encoderUpdate+0x6c>
        encoder->full_rotations += (d_angle > 0) ? -1 : 1;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2fc:	dd02      	ble.n	800c304 <encoderUpdate+0x64>
 800c2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c302:	e000      	b.n	800c306 <encoderUpdate+0x66>
 800c304:	2201      	movs	r2, #1
 800c306:	441a      	add	r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	609a      	str	r2, [r3, #8]

    // angle
    encoder->angle_prev = val;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	68fa      	ldr	r2, [r7, #12]
 800c310:	601a      	str	r2, [r3, #0]
    encoder->shaftAngle = val;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = (float)encoder->full_rotations * _2PI + encoder->angle_prev;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	ee07 3a90 	vmov	s15, r3
 800c320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c324:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800c39c <encoderUpdate+0xfc>
 800c328:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	edd3 7a00 	vldr	s15, [r3]
 800c332:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	edc3 7a05 	vstr	s15, [r3, #20]

    // 速度计算
    val = ((float)(encoder->full_rotations - encoder->vel_full_rotations) * _2PI + (encoder->angle_prev - encoder->vel_angle_prev)) / encoder->Ts;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	689a      	ldr	r2, [r3, #8]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	1ad3      	subs	r3, r2, r3
 800c346:	ee07 3a90 	vmov	s15, r3
 800c34a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c34e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800c39c <encoderUpdate+0xfc>
 800c352:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	edd3 6a00 	vldr	s13, [r3]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	edd3 7a01 	vldr	s15, [r3, #4]
 800c362:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c366:	ee77 6a27 	vadd.f32	s13, s14, s15
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	ed93 7a07 	vldr	s14, [r3, #28]
 800c370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c374:	edc7 7a03 	vstr	s15, [r7, #12]
    // 保存变量以待将来使用
    encoder->vel_angle_prev = encoder->angle_prev;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	605a      	str	r2, [r3, #4]
    encoder->vel_full_rotations = encoder->full_rotations;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	689a      	ldr	r2, [r3, #8]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	60da      	str	r2, [r3, #12]
    encoder->velocity = val;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	619a      	str	r2, [r3, #24]
}
 800c38e:	bf00      	nop
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	40a0d97c 	.word	0x40a0d97c
 800c39c:	40c90fdb 	.word	0x40c90fdb

0800c3a0 <lpfInit>:
#include "lowpass_filter.h"

void lpfInit(LowPassFilter *filter, const float _Tf, const float _dt)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	ed87 0a02 	vstr	s0, [r7, #8]
 800c3ac:	edc7 0a01 	vstr	s1, [r7, #4]
    filter->Tf = _Tf;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	68ba      	ldr	r2, [r7, #8]
 800c3b4:	601a      	str	r2, [r3, #0]
    filter->dt = _dt;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	605a      	str	r2, [r3, #4]
    filter->y_prev = 0;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f04f 0200 	mov.w	r2, #0
 800c3c2:	609a      	str	r2, [r3, #8]
}
 800c3c4:	bf00      	nop
 800c3c6:	3714      	adds	r7, #20
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <lpfOperator>:

float lpfOperator(LowPassFilter *filter, float x)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	ed87 0a00 	vstr	s0, [r7]

    float alpha = filter->Tf / (filter->Tf + filter->dt);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	edd3 6a00 	vldr	s13, [r3]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	ed93 7a00 	vldr	s14, [r3]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	edd3 7a01 	vldr	s15, [r3, #4]
 800c3ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c3f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3f6:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha * filter->y_prev + (1.0f - alpha) * x;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	ed93 7a02 	vldr	s14, [r3, #8]
 800c400:	edd7 7a03 	vldr	s15, [r7, #12]
 800c404:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c408:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c40c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c410:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c414:	edd7 7a00 	vldr	s15, [r7]
 800c418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c41c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c420:	edc7 7a02 	vstr	s15, [r7, #8]
    filter->y_prev = y;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	68ba      	ldr	r2, [r7, #8]
 800c428:	609a      	str	r2, [r3, #8]

    return y;
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	ee07 3a90 	vmov	s15, r3
}
 800c430:	eeb0 0a67 	vmov.f32	s0, s15
 800c434:	3714      	adds	r7, #20
 800c436:	46bd      	mov	sp, r7
 800c438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43c:	4770      	bx	lr
	...

0800c440 <_sin>:

// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b086      	sub	sp, #24
 800c444:	af00      	add	r7, sp, #0
 800c446:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f7f4 f8a4 	bl	8000598 <__aeabi_f2d>
 800c450:	a339      	add	r3, pc, #228	@ (adr r3, 800c538 <_sin+0xf8>)
 800c452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c456:	f7f4 f8f7 	bl	8000648 <__aeabi_dmul>
 800c45a:	4602      	mov	r2, r0
 800c45c:	460b      	mov	r3, r1
 800c45e:	4610      	mov	r0, r2
 800c460:	4619      	mov	r1, r3
 800c462:	f7f4 fbc9 	bl	8000bf8 <__aeabi_d2uiz>
 800c466:	4603      	mov	r3, r0
 800c468:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	0a1b      	lsrs	r3, r3, #8
 800c474:	b2db      	uxtb	r3, r3
 800c476:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2b3f      	cmp	r3, #63	@ 0x3f
 800c47c:	d80b      	bhi.n	800c496 <_sin+0x56>
  {
    t1 = sine_array[i];
 800c47e:	4a2c      	ldr	r2, [pc, #176]	@ (800c530 <_sin+0xf0>)
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c486:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	3301      	adds	r3, #1
 800c48c:	4a28      	ldr	r2, [pc, #160]	@ (800c530 <_sin+0xf0>)
 800c48e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c492:	613b      	str	r3, [r7, #16]
 800c494:	e033      	b.n	800c4fe <_sin+0xbe>
  }
  else if (i < 128)
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2b7f      	cmp	r3, #127	@ 0x7f
 800c49a:	d80e      	bhi.n	800c4ba <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800c4a2:	4a23      	ldr	r2, [pc, #140]	@ (800c530 <_sin+0xf0>)
 800c4a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4a8:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800c4b0:	4a1f      	ldr	r2, [pc, #124]	@ (800c530 <_sin+0xf0>)
 800c4b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4b6:	613b      	str	r3, [r7, #16]
 800c4b8:	e021      	b.n	800c4fe <_sin+0xbe>
  }
  else if (i < 192)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2bbf      	cmp	r3, #191	@ 0xbf
 800c4be:	d80e      	bhi.n	800c4de <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	3b80      	subs	r3, #128	@ 0x80
 800c4c4:	4a1a      	ldr	r2, [pc, #104]	@ (800c530 <_sin+0xf0>)
 800c4c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4ca:	425b      	negs	r3, r3
 800c4cc:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	3b7f      	subs	r3, #127	@ 0x7f
 800c4d2:	4a17      	ldr	r2, [pc, #92]	@ (800c530 <_sin+0xf0>)
 800c4d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4d8:	425b      	negs	r3, r3
 800c4da:	613b      	str	r3, [r7, #16]
 800c4dc:	e00f      	b.n	800c4fe <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800c4e4:	4a12      	ldr	r2, [pc, #72]	@ (800c530 <_sin+0xf0>)
 800c4e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4ea:	425b      	negs	r3, r3
 800c4ec:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800c4f4:	4a0e      	ldr	r2, [pc, #56]	@ (800c530 <_sin+0xf0>)
 800c4f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4fa:	425b      	negs	r3, r3
 800c4fc:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800c4fe:	693a      	ldr	r2, [r7, #16]
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	1ad3      	subs	r3, r2, r3
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	fb02 f303 	mul.w	r3, r2, r3
 800c50a:	121a      	asrs	r2, r3, #8
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	4413      	add	r3, r2
 800c510:	ee07 3a90 	vmov	s15, r3
 800c514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c518:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800c534 <_sin+0xf4>
 800c51c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800c520:	eeb0 0a67 	vmov.f32	s0, s15
 800c524:	3718      	adds	r7, #24
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	f3af 8000 	nop.w
 800c530:	2000000c 	.word	0x2000000c
 800c534:	38000000 	.word	0x38000000
 800c538:	6446f9b4 	.word	0x6446f9b4
 800c53c:	40c45f30 	.word	0x40c45f30

0800c540 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800c54a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c54e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800c598 <_cos+0x58>
 800c552:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c556:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800c55a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c55e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800c59c <_cos+0x5c>
 800c562:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c56a:	dd06      	ble.n	800c57a <_cos+0x3a>
 800c56c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c570:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800c59c <_cos+0x5c>
 800c574:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c578:	e001      	b.n	800c57e <_cos+0x3e>
 800c57a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c57e:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800c582:	ed97 0a03 	vldr	s0, [r7, #12]
 800c586:	f7ff ff5b 	bl	800c440 <_sin>
 800c58a:	eef0 7a40 	vmov.f32	s15, s0
}
 800c58e:	eeb0 0a67 	vmov.f32	s0, s15
 800c592:	3710      	adds	r7, #16
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	3fc90fdb 	.word	0x3fc90fdb
 800c59c:	40c90fdb 	.word	0x40c90fdb

0800c5a0 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	ed87 0a03 	vstr	s0, [r7, #12]
 800c5aa:	60b8      	str	r0, [r7, #8]
 800c5ac:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800c5ae:	ed97 0a03 	vldr	s0, [r7, #12]
 800c5b2:	f7ff ff45 	bl	800c440 <_sin>
 800c5b6:	eef0 7a40 	vmov.f32	s15, s0
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800c5c0:	ed97 0a03 	vldr	s0, [r7, #12]
 800c5c4:	f7ff ffbc 	bl	800c540 <_cos>
 800c5c8:	eef0 7a40 	vmov.f32	s15, s0
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	edc3 7a00 	vstr	s15, [r3]
}
 800c5d2:	bf00      	nop
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	0000      	movs	r0, r0
 800c5dc:	0000      	movs	r0, r0
	...

0800c5e0 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f7f3 ffd4 	bl	8000598 <__aeabi_f2d>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800c640 <_normalizeAngle+0x60>
 800c5f8:	ec43 2b10 	vmov	d0, r2, r3
 800c5fc:	f006 f906 	bl	801280c <fmod>
 800c600:	ec53 2b10 	vmov	r2, r3, d0
 800c604:	4610      	mov	r0, r2
 800c606:	4619      	mov	r1, r3
 800c608:	f7f4 fb16 	bl	8000c38 <__aeabi_d2f>
 800c60c:	4603      	mov	r3, r0
 800c60e:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800c610:	edd7 7a03 	vldr	s15, [r7, #12]
 800c614:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c61c:	db02      	blt.n	800c624 <_normalizeAngle+0x44>
 800c61e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c622:	e005      	b.n	800c630 <_normalizeAngle+0x50>
 800c624:	edd7 7a03 	vldr	s15, [r7, #12]
 800c628:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800c648 <_normalizeAngle+0x68>
 800c62c:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800c630:	eeb0 0a67 	vmov.f32	s0, s15
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	f3af 8000 	nop.w
 800c640:	60000000 	.word	0x60000000
 800c644:	401921fb 	.word	0x401921fb
 800c648:	40c90fdb 	.word	0x40c90fdb

0800c64c <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	ed87 0a01 	vstr	s0, [r7, #4]
 800c656:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	ee07 3a90 	vmov	s15, r3
 800c65e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c662:	edd7 7a01 	vldr	s15, [r7, #4]
 800c666:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800c66a:	eeb0 0a67 	vmov.f32	s0, s15
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <pidInit>:
#include "pid.h"
#include "math_utils.h"

void pidInit(PidController *pidController, float _P, float _I, float _D, float _ramp, float _limit, float _Ts)
{
 800c678:	b480      	push	{r7}
 800c67a:	b089      	sub	sp, #36	@ 0x24
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	61f8      	str	r0, [r7, #28]
 800c680:	ed87 0a06 	vstr	s0, [r7, #24]
 800c684:	edc7 0a05 	vstr	s1, [r7, #20]
 800c688:	ed87 1a04 	vstr	s2, [r7, #16]
 800c68c:	edc7 1a03 	vstr	s3, [r7, #12]
 800c690:	ed87 2a02 	vstr	s4, [r7, #8]
 800c694:	edc7 2a01 	vstr	s5, [r7, #4]
    pidController->P = _P;
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	69ba      	ldr	r2, [r7, #24]
 800c69c:	601a      	str	r2, [r3, #0]
    pidController->I = _I;
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	697a      	ldr	r2, [r7, #20]
 800c6a2:	605a      	str	r2, [r3, #4]
    pidController->D = _D;
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	693a      	ldr	r2, [r7, #16]
 800c6a8:	609a      	str	r2, [r3, #8]
    pidController->output_ramp = _ramp;
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	60da      	str	r2, [r3, #12]
    pidController->limit = _limit;
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	68ba      	ldr	r2, [r7, #8]
 800c6b4:	611a      	str	r2, [r3, #16]
    pidController->Ts = _Ts;
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	621a      	str	r2, [r3, #32]
    pidController->error_prev = 0;
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	f04f 0200 	mov.w	r2, #0
 800c6c2:	615a      	str	r2, [r3, #20]
    pidController->output_prev = 0;
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	f04f 0200 	mov.w	r2, #0
 800c6ca:	619a      	str	r2, [r3, #24]
    pidController->integral_prev = 0;
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	f04f 0200 	mov.w	r2, #0
 800c6d2:	61da      	str	r2, [r3, #28]
}
 800c6d4:	bf00      	nop
 800c6d6:	3724      	adds	r7, #36	@ 0x24
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <pidOperator>:

// PID controller function
float pidOperator(PidController *pidController, float error)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b08b      	sub	sp, #44	@ 0x2c
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	ed87 0a00 	vstr	s0, [r7]
    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = pidController->P * error;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	edd3 7a00 	vldr	s15, [r3]
 800c6f2:	ed97 7a00 	vldr	s14, [r7]
 800c6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6fa:	edc7 7a08 	vstr	s15, [r7, #32]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float a = 0.5f * (error + pidController->error_prev);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	ed93 7a05 	vldr	s14, [r3, #20]
 800c704:	edd7 7a00 	vldr	s15, [r7]
 800c708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c70c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c710:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c714:	edc7 7a07 	vstr	s15, [r7, #28]
    float b = pidController->I * pidController->Ts;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	ed93 7a01 	vldr	s14, [r3, #4]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	edd3 7a08 	vldr	s15, [r3, #32]
 800c724:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c728:	edc7 7a06 	vstr	s15, [r7, #24]
    float integral = pidController->integral_prev + pidController->I * pidController->Ts * 0.5f * (error + pidController->error_prev);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	ed93 7a07 	vldr	s14, [r3, #28]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	edd3 6a01 	vldr	s13, [r3, #4]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	edd3 7a08 	vldr	s15, [r3, #32]
 800c73e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c742:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800c746:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	ed93 6a05 	vldr	s12, [r3, #20]
 800c750:	edd7 7a00 	vldr	s15, [r7]
 800c754:	ee76 7a27 	vadd.f32	s15, s12, s15
 800c758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c75c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c760:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -pidController->limit, pidController->limit);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	edd3 7a04 	vldr	s15, [r3, #16]
 800c76a:	eef1 7a67 	vneg.f32	s15, s15
 800c76e:	ed97 7a05 	vldr	s14, [r7, #20]
 800c772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c77a:	d505      	bpl.n	800c788 <pidOperator+0xa8>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	edd3 7a04 	vldr	s15, [r3, #16]
 800c782:	eef1 7a67 	vneg.f32	s15, s15
 800c786:	e00f      	b.n	800c7a8 <pidOperator+0xc8>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	edd3 7a04 	vldr	s15, [r3, #16]
 800c78e:	ed97 7a05 	vldr	s14, [r7, #20]
 800c792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c79a:	dd03      	ble.n	800c7a4 <pidOperator+0xc4>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	edd3 7a04 	vldr	s15, [r3, #16]
 800c7a2:	e001      	b.n	800c7a8 <pidOperator+0xc8>
 800c7a4:	edd7 7a05 	vldr	s15, [r7, #20]
 800c7a8:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = pidController->D * (error - pidController->error_prev) / pidController->Ts;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	ed93 7a02 	vldr	s14, [r3, #8]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	edd3 7a05 	vldr	s15, [r3, #20]
 800c7b8:	edd7 6a00 	vldr	s13, [r7]
 800c7bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c7c0:	ee67 6a27 	vmul.f32	s13, s14, s15
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	ed93 7a08 	vldr	s14, [r3, #32]
 800c7ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7ce:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 800c7d2:	ed97 7a08 	vldr	s14, [r7, #32]
 800c7d6:	edd7 7a05 	vldr	s15, [r7, #20]
 800c7da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7de:	ed97 7a04 	vldr	s14, [r7, #16]
 800c7e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7e6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // antiwindup - limit the output variable
    output = _constrain(output, -pidController->limit, pidController->limit);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	edd3 7a04 	vldr	s15, [r3, #16]
 800c7f0:	eef1 7a67 	vneg.f32	s15, s15
 800c7f4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c7f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c800:	d505      	bpl.n	800c80e <pidOperator+0x12e>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	edd3 7a04 	vldr	s15, [r3, #16]
 800c808:	eef1 7a67 	vneg.f32	s15, s15
 800c80c:	e00f      	b.n	800c82e <pidOperator+0x14e>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	edd3 7a04 	vldr	s15, [r3, #16]
 800c814:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c820:	dd03      	ble.n	800c82a <pidOperator+0x14a>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	edd3 7a04 	vldr	s15, [r3, #16]
 800c828:	e001      	b.n	800c82e <pidOperator+0x14e>
 800c82a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c82e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // if output ramp defined
    if (pidController->output_ramp > 0)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	edd3 7a03 	vldr	s15, [r3, #12]
 800c838:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c840:	dd42      	ble.n	800c8c8 <pidOperator+0x1e8>
    {
        // limit the acceleration by ramping the output
        float output_rate = (output - pidController->output_prev) / pidController->Ts;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	edd3 7a06 	vldr	s15, [r3, #24]
 800c848:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c84c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	ed93 7a08 	vldr	s14, [r3, #32]
 800c856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c85a:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > pidController->output_ramp)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	edd3 7a03 	vldr	s15, [r3, #12]
 800c864:	ed97 7a03 	vldr	s14, [r7, #12]
 800c868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c870:	dd0f      	ble.n	800c892 <pidOperator+0x1b2>
            output = pidController->output_prev + pidController->output_ramp * pidController->Ts;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	ed93 7a06 	vldr	s14, [r3, #24]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	edd3 6a03 	vldr	s13, [r3, #12]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	edd3 7a08 	vldr	s15, [r3, #32]
 800c884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c88c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800c890:	e01a      	b.n	800c8c8 <pidOperator+0x1e8>
        else if (output_rate < -pidController->output_ramp)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	edd3 7a03 	vldr	s15, [r3, #12]
 800c898:	eef1 7a67 	vneg.f32	s15, s15
 800c89c:	ed97 7a03 	vldr	s14, [r7, #12]
 800c8a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8a8:	d50e      	bpl.n	800c8c8 <pidOperator+0x1e8>
            output = pidController->output_prev - pidController->output_ramp * pidController->Ts;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	ed93 7a06 	vldr	s14, [r3, #24]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	edd3 6a03 	vldr	s13, [r3, #12]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	edd3 7a08 	vldr	s15, [r3, #32]
 800c8bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    // saving for the next pass
    pidController->integral_prev = integral;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	697a      	ldr	r2, [r7, #20]
 800c8cc:	61da      	str	r2, [r3, #28]
    pidController->output_prev = output;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8d2:	619a      	str	r2, [r3, #24]
    pidController->error_prev = error;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	683a      	ldr	r2, [r7, #0]
 800c8d8:	615a      	str	r2, [r3, #20]
    return output;
 800c8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8dc:	ee07 3a90 	vmov	s15, r3
}
 800c8e0:	eeb0 0a67 	vmov.f32	s0, s15
 800c8e4:	372c      	adds	r7, #44	@ 0x2c
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr
	...

0800c8f0 <setTorque>:
    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
}
#elif 1

void setTorque(BldcMotor *motor, float Uq, float Ud, float angle_el)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b08e      	sub	sp, #56	@ 0x38
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	ed87 0a02 	vstr	s0, [r7, #8]
 800c8fc:	edc7 0a01 	vstr	s1, [r7, #4]
 800c900:	ed87 1a00 	vstr	s2, [r7]
    float Ualpha, Ubeta;
    float Ua, Ub, Uc;

    // Sinusoidal PWM modulation
    // Inverse Park + Clarke transformation
    _sincos(angle_el, &_sa, &_ca);
 800c904:	f107 0214 	add.w	r2, r7, #20
 800c908:	f107 0310 	add.w	r3, r7, #16
 800c90c:	4611      	mov	r1, r2
 800c90e:	4618      	mov	r0, r3
 800c910:	ed97 0a00 	vldr	s0, [r7]
 800c914:	f7ff fe44 	bl	800c5a0 <_sincos>

    // Inverse park transform
    Ualpha = _ca * Ud - _sa * Uq; // -sin(angle) * Uq;
 800c918:	ed97 7a05 	vldr	s14, [r7, #20]
 800c91c:	edd7 7a01 	vldr	s15, [r7, #4]
 800c920:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c924:	edd7 6a04 	vldr	s13, [r7, #16]
 800c928:	edd7 7a02 	vldr	s15, [r7, #8]
 800c92c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c930:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c934:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Ubeta = _sa * Ud + _ca * Uq;  //  cos(angle) * Uq;
 800c938:	ed97 7a04 	vldr	s14, [r7, #16]
 800c93c:	edd7 7a01 	vldr	s15, [r7, #4]
 800c940:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c944:	edd7 6a05 	vldr	s13, [r7, #20]
 800c948:	edd7 7a02 	vldr	s15, [r7, #8]
 800c94c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c950:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c954:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Clarke transform
    Ua = Ualpha;
 800c958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c95a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 800c95c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800c960:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800c964:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c968:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c96c:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800cbc4 <setTorque+0x2d4>
 800c970:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c974:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c978:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 800c97c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800c980:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800c984:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c988:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c98c:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800cbc4 <setTorque+0x2d4>
 800c990:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c994:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c998:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    center = UqMAX / 2;
 800c99c:	4b8a      	ldr	r3, [pc, #552]	@ (800cbc8 <setTorque+0x2d8>)
 800c99e:	623b      	str	r3, [r7, #32]

    // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
    // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
    // Midpoint Clamp
    float Umin = min(Ua, min(Ub, Uc));
 800c9a0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c9a4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c9a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9b0:	d502      	bpl.n	800c9b8 <setTorque+0xc8>
 800c9b2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800c9b6:	e001      	b.n	800c9bc <setTorque+0xcc>
 800c9b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c9bc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c9c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9c8:	dd01      	ble.n	800c9ce <setTorque+0xde>
 800c9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9cc:	e00b      	b.n	800c9e6 <setTorque+0xf6>
 800c9ce:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c9d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c9d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9de:	d501      	bpl.n	800c9e4 <setTorque+0xf4>
 800c9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e2:	e000      	b.n	800c9e6 <setTorque+0xf6>
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e6:	61fb      	str	r3, [r7, #28]
    float Umax = max(Ua, max(Ub, Uc));
 800c9e8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c9ec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c9f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9f8:	dd02      	ble.n	800ca00 <setTorque+0x110>
 800c9fa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800c9fe:	e001      	b.n	800ca04 <setTorque+0x114>
 800ca00:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800ca04:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800ca08:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca10:	d501      	bpl.n	800ca16 <setTorque+0x126>
 800ca12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca14:	e00b      	b.n	800ca2e <setTorque+0x13e>
 800ca16:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800ca1a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800ca1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ca22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca26:	dd01      	ble.n	800ca2c <setTorque+0x13c>
 800ca28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2a:	e000      	b.n	800ca2e <setTorque+0x13e>
 800ca2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca2e:	61bb      	str	r3, [r7, #24]
    center -= (Umax + Umin) / 2;
 800ca30:	ed97 7a06 	vldr	s14, [r7, #24]
 800ca34:	edd7 7a07 	vldr	s15, [r7, #28]
 800ca38:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca3c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ca40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ca44:	ed97 7a08 	vldr	s14, [r7, #32]
 800ca48:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca4c:	edc7 7a08 	vstr	s15, [r7, #32]

    Ua += center;
 800ca50:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800ca54:	edd7 7a08 	vldr	s15, [r7, #32]
 800ca58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca5c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    Ub += center;
 800ca60:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800ca64:	edd7 7a08 	vldr	s15, [r7, #32]
 800ca68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca6c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc += center;
 800ca70:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800ca74:	edd7 7a08 	vldr	s15, [r7, #32]
 800ca78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca7c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    motor->Ta = _constrain(Ua / U_DC, 0.0f, 1.0f);
 800ca80:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800ca84:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800ca88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ca8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ca90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca94:	d502      	bpl.n	800ca9c <setTorque+0x1ac>
 800ca96:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800cbcc <setTorque+0x2dc>
 800ca9a:	e015      	b.n	800cac8 <setTorque+0x1d8>
 800ca9c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800caa0:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800caa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800caa8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800caac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab4:	dd02      	ble.n	800cabc <setTorque+0x1cc>
 800cab6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800caba:	e005      	b.n	800cac8 <setTorque+0x1d8>
 800cabc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800cac0:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800cac4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    motor->Tb = _constrain(Ub / U_DC, 0.0f, 1.0f);
 800cace:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800cad2:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800cad6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cada:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cae2:	d502      	bpl.n	800caea <setTorque+0x1fa>
 800cae4:	eddf 7a39 	vldr	s15, [pc, #228]	@ 800cbcc <setTorque+0x2dc>
 800cae8:	e015      	b.n	800cb16 <setTorque+0x226>
 800caea:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800caee:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800caf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800caf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cafa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb02:	dd02      	ble.n	800cb0a <setTorque+0x21a>
 800cb04:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cb08:	e005      	b.n	800cb16 <setTorque+0x226>
 800cb0a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800cb0e:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800cb12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
    motor->Tc = _constrain(Uc / U_DC, 0.0f, 1.0f);
 800cb1c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800cb20:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800cb24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb30:	d502      	bpl.n	800cb38 <setTorque+0x248>
 800cb32:	eddf 7a26 	vldr	s15, [pc, #152]	@ 800cbcc <setTorque+0x2dc>
 800cb36:	e015      	b.n	800cb64 <setTorque+0x274>
 800cb38:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800cb3c:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800cb40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb48:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb50:	dd02      	ble.n	800cb58 <setTorque+0x268>
 800cb52:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cb56:	e005      	b.n	800cb64 <setTorque+0x274>
 800cb58:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800cb5c:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800cb60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c

    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	edd2 7a49 	vldr	s15, [r2, #292]	@ 0x124
 800cb76:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800cbd0 <setTorque+0x2e0>
 800cb7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb82:	ee17 2a90 	vmov	r2, s15
 800cb86:	b290      	uxth	r0, r2
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	edd2 7a4a 	vldr	s15, [r2, #296]	@ 0x128
 800cb8e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800cbd0 <setTorque+0x2e0>
 800cb92:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb9a:	ee17 2a90 	vmov	r2, s15
 800cb9e:	b291      	uxth	r1, r2
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 800cba6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800cbd0 <setTorque+0x2e0>
 800cbaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbb2:	ee17 2a90 	vmov	r2, s15
 800cbb6:	b292      	uxth	r2, r2
 800cbb8:	4798      	blx	r3
    // set the voltages in driver
    // driver->setPwm(Ua, Ub, Uc);
}
 800cbba:	bf00      	nop
 800cbbc:	3738      	adds	r7, #56	@ 0x38
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	3f5db3d7 	.word	0x3f5db3d7
 800cbc8:	405db3d7 	.word	0x405db3d7
 800cbcc:	00000000 	.word	0x00000000
 800cbd0:	45fa0000 	.word	0x45fa0000

0800cbd4 <MPU6050_WriteReg>:
  * 参    数：RegAddress 寄存器地址，范围：参考MPU6050手册的寄存器描述
  * 参    数：Data 要写入寄存器的数据，范围：0x00~0xFF
  * 返 回 值：无
  */
void MPU6050_WriteReg(uint8_t RegAddress, uint8_t Data)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	4603      	mov	r3, r0
 800cbdc:	460a      	mov	r2, r1
 800cbde:	71fb      	strb	r3, [r7, #7]
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	71bb      	strb	r3, [r7, #6]
	MyI2C_Start();						//I2C起始
 800cbe4:	f000 fff6 	bl	800dbd4 <MyI2C_Start>
	MyI2C_SendByte(MPU6050_ADDRESS);	//发送从机地址，读写位为0，表示即将写入
 800cbe8:	20d1      	movs	r0, #209	@ 0xd1
 800cbea:	f001 f810 	bl	800dc0e <MyI2C_SendByte>
	MyI2C_ReceiveAck();					//接收应答
 800cbee:	f001 f872 	bl	800dcd6 <MyI2C_ReceiveAck>
	MyI2C_SendByte(RegAddress);			//发送寄存器地址
 800cbf2:	79fb      	ldrb	r3, [r7, #7]
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f001 f80a 	bl	800dc0e <MyI2C_SendByte>
	MyI2C_ReceiveAck();					//接收应答
 800cbfa:	f001 f86c 	bl	800dcd6 <MyI2C_ReceiveAck>
	MyI2C_SendByte(Data);				//发送要写入寄存器的数据
 800cbfe:	79bb      	ldrb	r3, [r7, #6]
 800cc00:	4618      	mov	r0, r3
 800cc02:	f001 f804 	bl	800dc0e <MyI2C_SendByte>
	MyI2C_ReceiveAck();					//接收应答
 800cc06:	f001 f866 	bl	800dcd6 <MyI2C_ReceiveAck>
	MyI2C_Stop();						//I2C终止
 800cc0a:	f000 fff3 	bl	800dbf4 <MyI2C_Stop>
}
 800cc0e:	bf00      	nop
 800cc10:	3708      	adds	r7, #8
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <MPU6050_ReadReg>:
  * 函    数：MPU6050读寄存器
  * 参    数：RegAddress 寄存器地址，范围：参考MPU6050手册的寄存器描述
  * 返 回 值：读取寄存器的数据，范围：0x00~0xFF
  */
uint8_t MPU6050_ReadReg(uint8_t RegAddress)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b084      	sub	sp, #16
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	71fb      	strb	r3, [r7, #7]
	uint8_t Data;
	
	MyI2C_Start();						//I2C起始
 800cc20:	f000 ffd8 	bl	800dbd4 <MyI2C_Start>
	MyI2C_SendByte(MPU6050_ADDRESS);	//发送从机地址，读写位为0，表示即将写入
 800cc24:	20d1      	movs	r0, #209	@ 0xd1
 800cc26:	f000 fff2 	bl	800dc0e <MyI2C_SendByte>
	MyI2C_ReceiveAck();					//接收应答
 800cc2a:	f001 f854 	bl	800dcd6 <MyI2C_ReceiveAck>
	MyI2C_SendByte(RegAddress);			//发送寄存器地址
 800cc2e:	79fb      	ldrb	r3, [r7, #7]
 800cc30:	4618      	mov	r0, r3
 800cc32:	f000 ffec 	bl	800dc0e <MyI2C_SendByte>
	MyI2C_ReceiveAck();					//接收应答
 800cc36:	f001 f84e 	bl	800dcd6 <MyI2C_ReceiveAck>
	
	MyI2C_Start();						//I2C重复起始
 800cc3a:	f000 ffcb 	bl	800dbd4 <MyI2C_Start>
	MyI2C_SendByte(MPU6050_ADDRESS | 0x01);	//发送从机地址，读写位为1，表示即将读取
 800cc3e:	20d1      	movs	r0, #209	@ 0xd1
 800cc40:	f000 ffe5 	bl	800dc0e <MyI2C_SendByte>
	MyI2C_ReceiveAck();					//接收应答
 800cc44:	f001 f847 	bl	800dcd6 <MyI2C_ReceiveAck>
	Data = MyI2C_ReceiveByte();			//接收指定寄存器的数据
 800cc48:	f001 f807 	bl	800dc5a <MyI2C_ReceiveByte>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	73fb      	strb	r3, [r7, #15]
	MyI2C_SendAck(1);					//发送应答，给从机非应答，终止从机的数据输出
 800cc50:	2001      	movs	r0, #1
 800cc52:	f001 f82d 	bl	800dcb0 <MyI2C_SendAck>
	MyI2C_Stop();						//I2C终止
 800cc56:	f000 ffcd 	bl	800dbf4 <MyI2C_Stop>
	
	return Data;
 800cc5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <MPU6050_Init>:
  * 函    数：MPU6050初始化
  * 参    数：无
  * 返 回 值：无
  */
void MPU6050_Init(void)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	af00      	add	r7, sp, #0
	/*MPU6050寄存器初始化，需要对照MPU6050手册的寄存器描述配置，此处仅配置了部分重要的寄存器*/
	MPU6050_WriteReg(MPU6050_PWR_MGMT_1, 0x01);		//电源管理寄存器1，取消睡眠模式，选择时钟源为X轴陀螺仪
 800cc68:	2101      	movs	r1, #1
 800cc6a:	206b      	movs	r0, #107	@ 0x6b
 800cc6c:	f7ff ffb2 	bl	800cbd4 <MPU6050_WriteReg>
	MPU6050_WriteReg(MPU6050_PWR_MGMT_2, 0x00);		//电源管理寄存器2，保持默认值0，所有轴均不待机
 800cc70:	2100      	movs	r1, #0
 800cc72:	206c      	movs	r0, #108	@ 0x6c
 800cc74:	f7ff ffae 	bl	800cbd4 <MPU6050_WriteReg>
	MPU6050_WriteReg(MPU6050_SMPLRT_DIV, 0x09);		//采样率分频寄存器，配置采样率
 800cc78:	2109      	movs	r1, #9
 800cc7a:	2019      	movs	r0, #25
 800cc7c:	f7ff ffaa 	bl	800cbd4 <MPU6050_WriteReg>
	MPU6050_WriteReg(MPU6050_CONFIG, 0x06);			//配置寄存器，配置DLPF
 800cc80:	2106      	movs	r1, #6
 800cc82:	201a      	movs	r0, #26
 800cc84:	f7ff ffa6 	bl	800cbd4 <MPU6050_WriteReg>
	MPU6050_WriteReg(MPU6050_GYRO_CONFIG, 0x18);	//陀螺仪配置寄存器，选择满量程为±2000°/s
 800cc88:	2118      	movs	r1, #24
 800cc8a:	201b      	movs	r0, #27
 800cc8c:	f7ff ffa2 	bl	800cbd4 <MPU6050_WriteReg>
	MPU6050_WriteReg(MPU6050_ACCEL_CONFIG, 0x18);	//加速度计配置寄存器，选择满量程为±16g
 800cc90:	2118      	movs	r1, #24
 800cc92:	201c      	movs	r0, #28
 800cc94:	f7ff ff9e 	bl	800cbd4 <MPU6050_WriteReg>
}
 800cc98:	bf00      	nop
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <MPU6050_GetData>:
  * 参    数：GyroX GyroY GyroZ 陀螺仪X、Y、Z轴的数据，使用输出参数的形式返回，范围：-32768~32767
  * 返 回 值：无
  */
void MPU6050_GetData(int16_t *AccX, int16_t *AccY, int16_t *AccZ, 
						int16_t *GyroX, int16_t *GyroY, int16_t *GyroZ)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b086      	sub	sp, #24
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	607a      	str	r2, [r7, #4]
 800cca8:	603b      	str	r3, [r7, #0]
	uint8_t DataH, DataL;								//定义数据高8位和低8位的变量
	
	DataH = MPU6050_ReadReg(MPU6050_ACCEL_XOUT_H);		//读取加速度计X轴的高8位数据
 800ccaa:	203b      	movs	r0, #59	@ 0x3b
 800ccac:	f7ff ffb3 	bl	800cc16 <MPU6050_ReadReg>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_ACCEL_XOUT_L);		//读取加速度计X轴的低8位数据
 800ccb4:	203c      	movs	r0, #60	@ 0x3c
 800ccb6:	f7ff ffae 	bl	800cc16 <MPU6050_ReadReg>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	75bb      	strb	r3, [r7, #22]
	*AccX = (DataH << 8) | DataL;						//数据拼接，通过输出参数返回
 800ccbe:	7dfb      	ldrb	r3, [r7, #23]
 800ccc0:	021b      	lsls	r3, r3, #8
 800ccc2:	b21a      	sxth	r2, r3
 800ccc4:	7dbb      	ldrb	r3, [r7, #22]
 800ccc6:	b21b      	sxth	r3, r3
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	b21a      	sxth	r2, r3
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	801a      	strh	r2, [r3, #0]
	
	DataH = MPU6050_ReadReg(MPU6050_ACCEL_YOUT_H);		//读取加速度计Y轴的高8位数据
 800ccd0:	203d      	movs	r0, #61	@ 0x3d
 800ccd2:	f7ff ffa0 	bl	800cc16 <MPU6050_ReadReg>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_ACCEL_YOUT_L);		//读取加速度计Y轴的低8位数据
 800ccda:	203e      	movs	r0, #62	@ 0x3e
 800ccdc:	f7ff ff9b 	bl	800cc16 <MPU6050_ReadReg>
 800cce0:	4603      	mov	r3, r0
 800cce2:	75bb      	strb	r3, [r7, #22]
	*AccY = (DataH << 8) | DataL;						//数据拼接，通过输出参数返回
 800cce4:	7dfb      	ldrb	r3, [r7, #23]
 800cce6:	021b      	lsls	r3, r3, #8
 800cce8:	b21a      	sxth	r2, r3
 800ccea:	7dbb      	ldrb	r3, [r7, #22]
 800ccec:	b21b      	sxth	r3, r3
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	b21a      	sxth	r2, r3
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	801a      	strh	r2, [r3, #0]
	
	DataH = MPU6050_ReadReg(MPU6050_ACCEL_ZOUT_H);		//读取加速度计Z轴的高8位数据
 800ccf6:	203f      	movs	r0, #63	@ 0x3f
 800ccf8:	f7ff ff8d 	bl	800cc16 <MPU6050_ReadReg>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_ACCEL_ZOUT_L);		//读取加速度计Z轴的低8位数据
 800cd00:	2040      	movs	r0, #64	@ 0x40
 800cd02:	f7ff ff88 	bl	800cc16 <MPU6050_ReadReg>
 800cd06:	4603      	mov	r3, r0
 800cd08:	75bb      	strb	r3, [r7, #22]
	*AccZ = (DataH << 8) | DataL;						//数据拼接，通过输出参数返回
 800cd0a:	7dfb      	ldrb	r3, [r7, #23]
 800cd0c:	021b      	lsls	r3, r3, #8
 800cd0e:	b21a      	sxth	r2, r3
 800cd10:	7dbb      	ldrb	r3, [r7, #22]
 800cd12:	b21b      	sxth	r3, r3
 800cd14:	4313      	orrs	r3, r2
 800cd16:	b21a      	sxth	r2, r3
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	801a      	strh	r2, [r3, #0]
	
	DataH = MPU6050_ReadReg(MPU6050_GYRO_XOUT_H);		//读取陀螺仪X轴的高8位数据
 800cd1c:	2043      	movs	r0, #67	@ 0x43
 800cd1e:	f7ff ff7a 	bl	800cc16 <MPU6050_ReadReg>
 800cd22:	4603      	mov	r3, r0
 800cd24:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_GYRO_XOUT_L);		//读取陀螺仪X轴的低8位数据
 800cd26:	2044      	movs	r0, #68	@ 0x44
 800cd28:	f7ff ff75 	bl	800cc16 <MPU6050_ReadReg>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	75bb      	strb	r3, [r7, #22]
	*GyroX = (DataH << 8) | DataL;						//数据拼接，通过输出参数返回
 800cd30:	7dfb      	ldrb	r3, [r7, #23]
 800cd32:	021b      	lsls	r3, r3, #8
 800cd34:	b21a      	sxth	r2, r3
 800cd36:	7dbb      	ldrb	r3, [r7, #22]
 800cd38:	b21b      	sxth	r3, r3
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	b21a      	sxth	r2, r3
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	801a      	strh	r2, [r3, #0]
	
	DataH = MPU6050_ReadReg(MPU6050_GYRO_YOUT_H);		//读取陀螺仪Y轴的高8位数据
 800cd42:	2045      	movs	r0, #69	@ 0x45
 800cd44:	f7ff ff67 	bl	800cc16 <MPU6050_ReadReg>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_GYRO_YOUT_L);		//读取陀螺仪Y轴的低8位数据
 800cd4c:	2046      	movs	r0, #70	@ 0x46
 800cd4e:	f7ff ff62 	bl	800cc16 <MPU6050_ReadReg>
 800cd52:	4603      	mov	r3, r0
 800cd54:	75bb      	strb	r3, [r7, #22]
	*GyroY = (DataH << 8) | DataL;						//数据拼接，通过输出参数返回
 800cd56:	7dfb      	ldrb	r3, [r7, #23]
 800cd58:	021b      	lsls	r3, r3, #8
 800cd5a:	b21a      	sxth	r2, r3
 800cd5c:	7dbb      	ldrb	r3, [r7, #22]
 800cd5e:	b21b      	sxth	r3, r3
 800cd60:	4313      	orrs	r3, r2
 800cd62:	b21a      	sxth	r2, r3
 800cd64:	6a3b      	ldr	r3, [r7, #32]
 800cd66:	801a      	strh	r2, [r3, #0]
	
	DataH = MPU6050_ReadReg(MPU6050_GYRO_ZOUT_H);		//读取陀螺仪Z轴的高8位数据
 800cd68:	2047      	movs	r0, #71	@ 0x47
 800cd6a:	f7ff ff54 	bl	800cc16 <MPU6050_ReadReg>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_GYRO_ZOUT_L);		//读取陀螺仪Z轴的低8位数据
 800cd72:	2048      	movs	r0, #72	@ 0x48
 800cd74:	f7ff ff4f 	bl	800cc16 <MPU6050_ReadReg>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	75bb      	strb	r3, [r7, #22]
	*GyroZ = (DataH << 8) | DataL;						//数据拼接，通过输出参数返回
 800cd7c:	7dfb      	ldrb	r3, [r7, #23]
 800cd7e:	021b      	lsls	r3, r3, #8
 800cd80:	b21a      	sxth	r2, r3
 800cd82:	7dbb      	ldrb	r3, [r7, #22]
 800cd84:	b21b      	sxth	r3, r3
 800cd86:	4313      	orrs	r3, r2
 800cd88:	b21a      	sxth	r2, r3
 800cd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd8c:	801a      	strh	r2, [r3, #0]
}
 800cd8e:	bf00      	nop
 800cd90:	3718      	adds	r7, #24
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
	...

0800cd98 <startPwm1>:

static void standingBy();
static void working(void);
static void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c);
static void startPwm1()
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	480c      	ldr	r0, [pc, #48]	@ (800cdd0 <startPwm1+0x38>)
 800cda0:	f7fb fb96 	bl	80084d0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800cda4:	2104      	movs	r1, #4
 800cda6:	480a      	ldr	r0, [pc, #40]	@ (800cdd0 <startPwm1+0x38>)
 800cda8:	f7fb fb92 	bl	80084d0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800cdac:	2108      	movs	r1, #8
 800cdae:	4808      	ldr	r0, [pc, #32]	@ (800cdd0 <startPwm1+0x38>)
 800cdb0:	f7fb fb8e 	bl	80084d0 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800cdb4:	2100      	movs	r1, #0
 800cdb6:	4806      	ldr	r0, [pc, #24]	@ (800cdd0 <startPwm1+0x38>)
 800cdb8:	f7fc fca2 	bl	8009700 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800cdbc:	2104      	movs	r1, #4
 800cdbe:	4804      	ldr	r0, [pc, #16]	@ (800cdd0 <startPwm1+0x38>)
 800cdc0:	f7fc fc9e 	bl	8009700 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800cdc4:	2108      	movs	r1, #8
 800cdc6:	4802      	ldr	r0, [pc, #8]	@ (800cdd0 <startPwm1+0x38>)
 800cdc8:	f7fc fc9a 	bl	8009700 <HAL_TIMEx_PWMN_Start>
}
 800cdcc:	bf00      	nop
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	20000508 	.word	0x20000508

0800cdd4 <stopPwm1>:
static void stopPwm1()
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800cdd8:	2100      	movs	r1, #0
 800cdda:	480c      	ldr	r0, [pc, #48]	@ (800ce0c <stopPwm1+0x38>)
 800cddc:	f7fb fc78 	bl	80086d0 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800cde0:	2104      	movs	r1, #4
 800cde2:	480a      	ldr	r0, [pc, #40]	@ (800ce0c <stopPwm1+0x38>)
 800cde4:	f7fb fc74 	bl	80086d0 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800cde8:	2108      	movs	r1, #8
 800cdea:	4808      	ldr	r0, [pc, #32]	@ (800ce0c <stopPwm1+0x38>)
 800cdec:	f7fb fc70 	bl	80086d0 <HAL_TIM_PWM_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	4806      	ldr	r0, [pc, #24]	@ (800ce0c <stopPwm1+0x38>)
 800cdf4:	f7fc fd38 	bl	8009868 <HAL_TIMEx_PWMN_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800cdf8:	2104      	movs	r1, #4
 800cdfa:	4804      	ldr	r0, [pc, #16]	@ (800ce0c <stopPwm1+0x38>)
 800cdfc:	f7fc fd34 	bl	8009868 <HAL_TIMEx_PWMN_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800ce00:	2108      	movs	r1, #8
 800ce02:	4802      	ldr	r0, [pc, #8]	@ (800ce0c <stopPwm1+0x38>)
 800ce04:	f7fc fd30 	bl	8009868 <HAL_TIMEx_PWMN_Stop>
}
 800ce08:	bf00      	nop
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	20000508 	.word	0x20000508

0800ce10 <updatePwm1>:
static void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	4603      	mov	r3, r0
 800ce18:	80fb      	strh	r3, [r7, #6]
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	80bb      	strh	r3, [r7, #4]
 800ce1e:	4613      	mov	r3, r2
 800ce20:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = a;
 800ce22:	4a07      	ldr	r2, [pc, #28]	@ (800ce40 <updatePwm1+0x30>)
 800ce24:	88fb      	ldrh	r3, [r7, #6]
 800ce26:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800ce28:	4a05      	ldr	r2, [pc, #20]	@ (800ce40 <updatePwm1+0x30>)
 800ce2a:	88bb      	ldrh	r3, [r7, #4]
 800ce2c:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = c;
 800ce2e:	4a04      	ldr	r2, [pc, #16]	@ (800ce40 <updatePwm1+0x30>)
 800ce30:	887b      	ldrh	r3, [r7, #2]
 800ce32:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800ce34:	bf00      	nop
 800ce36:	370c      	adds	r7, #12
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr
 800ce40:	40012c00 	.word	0x40012c00

0800ce44 <motorInit>:
// should be called before interruption enabled

static void motorInit()
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b086      	sub	sp, #24
 800ce48:	af00      	add	r7, sp, #0
    motor1.pole_pairs = 7;
 800ce4a:	4ba1      	ldr	r3, [pc, #644]	@ (800d0d0 <motorInit+0x28c>)
 800ce4c:	2207      	movs	r2, #7
 800ce4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    motor1.updatePwm = updatePwm1;
 800ce52:	4b9f      	ldr	r3, [pc, #636]	@ (800d0d0 <motorInit+0x28c>)
 800ce54:	4a9f      	ldr	r2, [pc, #636]	@ (800d0d4 <motorInit+0x290>)
 800ce56:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    motor1.startPwm = startPwm1;
 800ce5a:	4b9d      	ldr	r3, [pc, #628]	@ (800d0d0 <motorInit+0x28c>)
 800ce5c:	4a9e      	ldr	r2, [pc, #632]	@ (800d0d8 <motorInit+0x294>)
 800ce5e:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor1.stopPwm = stopPwm1;
 800ce62:	4b9b      	ldr	r3, [pc, #620]	@ (800d0d0 <motorInit+0x28c>)
 800ce64:	4a9d      	ldr	r2, [pc, #628]	@ (800d0dc <motorInit+0x298>)
 800ce66:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor1.zeroElectricAngleOffSet = 0;
 800ce6a:	4b99      	ldr	r3, [pc, #612]	@ (800d0d0 <motorInit+0x28c>)
 800ce6c:	f04f 0200 	mov.w	r2, #0
 800ce70:	635a      	str	r2, [r3, #52]	@ 0x34
    motor1.Ts = 100 * 1e-6f;
 800ce72:	4b97      	ldr	r3, [pc, #604]	@ (800d0d0 <motorInit+0x28c>)
 800ce74:	4a9a      	ldr	r2, [pc, #616]	@ (800d0e0 <motorInit+0x29c>)
 800ce76:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor1.torqueType = VOLTAGE;
 800ce78:	4b95      	ldr	r3, [pc, #596]	@ (800d0d0 <motorInit+0x28c>)
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    motor1.controlType = ANGLE;
 800ce80:	4b93      	ldr	r3, [pc, #588]	@ (800d0d0 <motorInit+0x28c>)
 800ce82:	2203      	movs	r2, #3
 800ce84:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    motor1.state = MOTOR_CALIBRATE;
 800ce88:	4b91      	ldr	r3, [pc, #580]	@ (800d0d0 <motorInit+0x28c>)
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor1.magEncoder, motor1.Ts, MT6701_GetRawAngle);
 800ce90:	4b8f      	ldr	r3, [pc, #572]	@ (800d0d0 <motorInit+0x28c>)
 800ce92:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ce96:	4993      	ldr	r1, [pc, #588]	@ (800d0e4 <motorInit+0x2a0>)
 800ce98:	eeb0 0a67 	vmov.f32	s0, s15
 800ce9c:	488c      	ldr	r0, [pc, #560]	@ (800d0d0 <motorInit+0x28c>)
 800ce9e:	f7ff f9ce 	bl	800c23e <encoderInit>

    if (motor1.controlType == TORQUE && motor1.torqueType == CURRENT)
 800cea2:	4b8b      	ldr	r3, [pc, #556]	@ (800d0d0 <motorInit+0x28c>)
 800cea4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d12d      	bne.n	800cf08 <motorInit+0xc4>
 800ceac:	4b88      	ldr	r3, [pc, #544]	@ (800d0d0 <motorInit+0x28c>)
 800ceae:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d128      	bne.n	800cf08 <motorInit+0xc4>
    {
        float kp, ki;
        kp = -200;
 800ceb6:	4b8c      	ldr	r3, [pc, #560]	@ (800d0e8 <motorInit+0x2a4>)
 800ceb8:	617b      	str	r3, [r7, #20]
        ki = -20;
 800ceba:	4b8c      	ldr	r3, [pc, #560]	@ (800d0ec <motorInit+0x2a8>)
 800cebc:	613b      	str	r3, [r7, #16]
        pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800cebe:	4b84      	ldr	r3, [pc, #528]	@ (800d0d0 <motorInit+0x28c>)
 800cec0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cec4:	eef0 2a67 	vmov.f32	s5, s15
 800cec8:	ed9f 2a89 	vldr	s4, [pc, #548]	@ 800d0f0 <motorInit+0x2ac>
 800cecc:	eddf 1a89 	vldr	s3, [pc, #548]	@ 800d0f4 <motorInit+0x2b0>
 800ced0:	ed9f 1a88 	vldr	s2, [pc, #544]	@ 800d0f4 <motorInit+0x2b0>
 800ced4:	edd7 0a04 	vldr	s1, [r7, #16]
 800ced8:	ed97 0a05 	vldr	s0, [r7, #20]
 800cedc:	4886      	ldr	r0, [pc, #536]	@ (800d0f8 <motorInit+0x2b4>)
 800cede:	f7ff fbcb 	bl	800c678 <pidInit>
        pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800cee2:	4b7b      	ldr	r3, [pc, #492]	@ (800d0d0 <motorInit+0x28c>)
 800cee4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cee8:	eef0 2a67 	vmov.f32	s5, s15
 800ceec:	ed9f 2a80 	vldr	s4, [pc, #512]	@ 800d0f0 <motorInit+0x2ac>
 800cef0:	eddf 1a80 	vldr	s3, [pc, #512]	@ 800d0f4 <motorInit+0x2b0>
 800cef4:	ed9f 1a7f 	vldr	s2, [pc, #508]	@ 800d0f4 <motorInit+0x2b0>
 800cef8:	edd7 0a04 	vldr	s1, [r7, #16]
 800cefc:	ed97 0a05 	vldr	s0, [r7, #20]
 800cf00:	487e      	ldr	r0, [pc, #504]	@ (800d0fc <motorInit+0x2b8>)
 800cf02:	f7ff fbb9 	bl	800c678 <pidInit>
    {
 800cf06:	e0c0      	b.n	800d08a <motorInit+0x246>
    }
    else if (motor1.controlType == VELOCITY)
 800cf08:	4b71      	ldr	r3, [pc, #452]	@ (800d0d0 <motorInit+0x28c>)
 800cf0a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800cf0e:	2b02      	cmp	r3, #2
 800cf10:	d152      	bne.n	800cfb8 <motorInit+0x174>
    {
        if (motor1.torqueType == CURRENT)
 800cf12:	4b6f      	ldr	r3, [pc, #444]	@ (800d0d0 <motorInit+0x28c>)
 800cf14:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d13a      	bne.n	800cf92 <motorInit+0x14e>
        {
            pidInit(&motor1.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800cf1c:	4b6c      	ldr	r3, [pc, #432]	@ (800d0d0 <motorInit+0x28c>)
 800cf1e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cf22:	eef0 2a67 	vmov.f32	s5, s15
 800cf26:	ed9f 2a76 	vldr	s4, [pc, #472]	@ 800d100 <motorInit+0x2bc>
 800cf2a:	eddf 1a72 	vldr	s3, [pc, #456]	@ 800d0f4 <motorInit+0x2b0>
 800cf2e:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 800d0f4 <motorInit+0x2b0>
 800cf32:	eddf 0a74 	vldr	s1, [pc, #464]	@ 800d104 <motorInit+0x2c0>
 800cf36:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 800d108 <motorInit+0x2c4>
 800cf3a:	4874      	ldr	r0, [pc, #464]	@ (800d10c <motorInit+0x2c8>)
 800cf3c:	f7ff fb9c 	bl	800c678 <pidInit>

            float kp, ki;
            kp = -200;
 800cf40:	4b69      	ldr	r3, [pc, #420]	@ (800d0e8 <motorInit+0x2a4>)
 800cf42:	607b      	str	r3, [r7, #4]
            ki = -20;
 800cf44:	4b69      	ldr	r3, [pc, #420]	@ (800d0ec <motorInit+0x2a8>)
 800cf46:	603b      	str	r3, [r7, #0]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800cf48:	4b61      	ldr	r3, [pc, #388]	@ (800d0d0 <motorInit+0x28c>)
 800cf4a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cf4e:	eef0 2a67 	vmov.f32	s5, s15
 800cf52:	ed9f 2a67 	vldr	s4, [pc, #412]	@ 800d0f0 <motorInit+0x2ac>
 800cf56:	eddf 1a67 	vldr	s3, [pc, #412]	@ 800d0f4 <motorInit+0x2b0>
 800cf5a:	ed9f 1a66 	vldr	s2, [pc, #408]	@ 800d0f4 <motorInit+0x2b0>
 800cf5e:	edd7 0a00 	vldr	s1, [r7]
 800cf62:	ed97 0a01 	vldr	s0, [r7, #4]
 800cf66:	4864      	ldr	r0, [pc, #400]	@ (800d0f8 <motorInit+0x2b4>)
 800cf68:	f7ff fb86 	bl	800c678 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800cf6c:	4b58      	ldr	r3, [pc, #352]	@ (800d0d0 <motorInit+0x28c>)
 800cf6e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cf72:	eef0 2a67 	vmov.f32	s5, s15
 800cf76:	ed9f 2a5e 	vldr	s4, [pc, #376]	@ 800d0f0 <motorInit+0x2ac>
 800cf7a:	eddf 1a5e 	vldr	s3, [pc, #376]	@ 800d0f4 <motorInit+0x2b0>
 800cf7e:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 800d0f4 <motorInit+0x2b0>
 800cf82:	edd7 0a00 	vldr	s1, [r7]
 800cf86:	ed97 0a01 	vldr	s0, [r7, #4]
 800cf8a:	485c      	ldr	r0, [pc, #368]	@ (800d0fc <motorInit+0x2b8>)
 800cf8c:	f7ff fb74 	bl	800c678 <pidInit>
 800cf90:	e07b      	b.n	800d08a <motorInit+0x246>
        }
        else
        {
            pidInit(&motor1.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor1.Ts);
 800cf92:	4b4f      	ldr	r3, [pc, #316]	@ (800d0d0 <motorInit+0x28c>)
 800cf94:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cf98:	eef0 2a67 	vmov.f32	s5, s15
 800cf9c:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 800d0f0 <motorInit+0x2ac>
 800cfa0:	eddf 1a54 	vldr	s3, [pc, #336]	@ 800d0f4 <motorInit+0x2b0>
 800cfa4:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 800d0f4 <motorInit+0x2b0>
 800cfa8:	eddf 0a59 	vldr	s1, [pc, #356]	@ 800d110 <motorInit+0x2cc>
 800cfac:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 800d114 <motorInit+0x2d0>
 800cfb0:	4856      	ldr	r0, [pc, #344]	@ (800d10c <motorInit+0x2c8>)
 800cfb2:	f7ff fb61 	bl	800c678 <pidInit>
 800cfb6:	e068      	b.n	800d08a <motorInit+0x246>
        }
    }
    else if (motor1.controlType == ANGLE)
 800cfb8:	4b45      	ldr	r3, [pc, #276]	@ (800d0d0 <motorInit+0x28c>)
 800cfba:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800cfbe:	2b03      	cmp	r3, #3
 800cfc0:	d163      	bne.n	800d08a <motorInit+0x246>
    {
        if (motor1.torqueType == CURRENT)
 800cfc2:	4b43      	ldr	r3, [pc, #268]	@ (800d0d0 <motorInit+0x28c>)
 800cfc4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d14c      	bne.n	800d066 <motorInit+0x222>
        {
            pidInit(&motor1.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor1.Ts);
 800cfcc:	4b40      	ldr	r3, [pc, #256]	@ (800d0d0 <motorInit+0x28c>)
 800cfce:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cfd2:	eef0 2a67 	vmov.f32	s5, s15
 800cfd6:	ed9f 2a50 	vldr	s4, [pc, #320]	@ 800d118 <motorInit+0x2d4>
 800cfda:	eddf 1a46 	vldr	s3, [pc, #280]	@ 800d0f4 <motorInit+0x2b0>
 800cfde:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 800d0f4 <motorInit+0x2b0>
 800cfe2:	eddf 0a44 	vldr	s1, [pc, #272]	@ 800d0f4 <motorInit+0x2b0>
 800cfe6:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800cfea:	484c      	ldr	r0, [pc, #304]	@ (800d11c <motorInit+0x2d8>)
 800cfec:	f7ff fb44 	bl	800c678 <pidInit>

            pidInit(&motor1.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800cff0:	4b37      	ldr	r3, [pc, #220]	@ (800d0d0 <motorInit+0x28c>)
 800cff2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cff6:	eef0 2a67 	vmov.f32	s5, s15
 800cffa:	ed9f 2a41 	vldr	s4, [pc, #260]	@ 800d100 <motorInit+0x2bc>
 800cffe:	eddf 1a3d 	vldr	s3, [pc, #244]	@ 800d0f4 <motorInit+0x2b0>
 800d002:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 800d0f4 <motorInit+0x2b0>
 800d006:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 800d104 <motorInit+0x2c0>
 800d00a:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 800d108 <motorInit+0x2c4>
 800d00e:	483f      	ldr	r0, [pc, #252]	@ (800d10c <motorInit+0x2c8>)
 800d010:	f7ff fb32 	bl	800c678 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800d014:	4b34      	ldr	r3, [pc, #208]	@ (800d0e8 <motorInit+0x2a4>)
 800d016:	60fb      	str	r3, [r7, #12]
            ki = -20;
 800d018:	4b34      	ldr	r3, [pc, #208]	@ (800d0ec <motorInit+0x2a8>)
 800d01a:	60bb      	str	r3, [r7, #8]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800d01c:	4b2c      	ldr	r3, [pc, #176]	@ (800d0d0 <motorInit+0x28c>)
 800d01e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d022:	eef0 2a67 	vmov.f32	s5, s15
 800d026:	ed9f 2a32 	vldr	s4, [pc, #200]	@ 800d0f0 <motorInit+0x2ac>
 800d02a:	eddf 1a32 	vldr	s3, [pc, #200]	@ 800d0f4 <motorInit+0x2b0>
 800d02e:	ed9f 1a31 	vldr	s2, [pc, #196]	@ 800d0f4 <motorInit+0x2b0>
 800d032:	edd7 0a02 	vldr	s1, [r7, #8]
 800d036:	ed97 0a03 	vldr	s0, [r7, #12]
 800d03a:	482f      	ldr	r0, [pc, #188]	@ (800d0f8 <motorInit+0x2b4>)
 800d03c:	f7ff fb1c 	bl	800c678 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800d040:	4b23      	ldr	r3, [pc, #140]	@ (800d0d0 <motorInit+0x28c>)
 800d042:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d046:	eef0 2a67 	vmov.f32	s5, s15
 800d04a:	ed9f 2a29 	vldr	s4, [pc, #164]	@ 800d0f0 <motorInit+0x2ac>
 800d04e:	eddf 1a29 	vldr	s3, [pc, #164]	@ 800d0f4 <motorInit+0x2b0>
 800d052:	ed9f 1a28 	vldr	s2, [pc, #160]	@ 800d0f4 <motorInit+0x2b0>
 800d056:	edd7 0a02 	vldr	s1, [r7, #8]
 800d05a:	ed97 0a03 	vldr	s0, [r7, #12]
 800d05e:	4827      	ldr	r0, [pc, #156]	@ (800d0fc <motorInit+0x2b8>)
 800d060:	f7ff fb0a 	bl	800c678 <pidInit>
 800d064:	e011      	b.n	800d08a <motorInit+0x246>
        }
        else
        {
            pidInit(&motor1.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor1.Ts);
 800d066:	4b1a      	ldr	r3, [pc, #104]	@ (800d0d0 <motorInit+0x28c>)
 800d068:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d06c:	eef0 2a67 	vmov.f32	s5, s15
 800d070:	ed9f 2a2b 	vldr	s4, [pc, #172]	@ 800d120 <motorInit+0x2dc>
 800d074:	eddf 1a1f 	vldr	s3, [pc, #124]	@ 800d0f4 <motorInit+0x2b0>
 800d078:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 800d0f4 <motorInit+0x2b0>
 800d07c:	eddf 0a29 	vldr	s1, [pc, #164]	@ 800d124 <motorInit+0x2e0>
 800d080:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800d128 <motorInit+0x2e4>
 800d084:	4825      	ldr	r0, [pc, #148]	@ (800d11c <motorInit+0x2d8>)
 800d086:	f7ff faf7 	bl	800c678 <pidInit>
        }
    }

    lpfInit(&motor1.IqFilter, 0.05, motor1.Ts);
 800d08a:	4b11      	ldr	r3, [pc, #68]	@ (800d0d0 <motorInit+0x28c>)
 800d08c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d090:	eef0 0a67 	vmov.f32	s1, s15
 800d094:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 800d110 <motorInit+0x2cc>
 800d098:	4824      	ldr	r0, [pc, #144]	@ (800d12c <motorInit+0x2e8>)
 800d09a:	f7ff f981 	bl	800c3a0 <lpfInit>
    lpfInit(&motor1.IdFilter, 0.05, motor1.Ts);
 800d09e:	4b0c      	ldr	r3, [pc, #48]	@ (800d0d0 <motorInit+0x28c>)
 800d0a0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d0a4:	eef0 0a67 	vmov.f32	s1, s15
 800d0a8:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800d110 <motorInit+0x2cc>
 800d0ac:	4820      	ldr	r0, [pc, #128]	@ (800d130 <motorInit+0x2ec>)
 800d0ae:	f7ff f977 	bl	800c3a0 <lpfInit>
    lpfInit(&motor1.velocityFilter, 0.01, motor1.Ts);
 800d0b2:	4b07      	ldr	r3, [pc, #28]	@ (800d0d0 <motorInit+0x28c>)
 800d0b4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d0b8:	eef0 0a67 	vmov.f32	s1, s15
 800d0bc:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800d134 <motorInit+0x2f0>
 800d0c0:	481d      	ldr	r0, [pc, #116]	@ (800d138 <motorInit+0x2f4>)
 800d0c2:	f7ff f96d 	bl	800c3a0 <lpfInit>
}
 800d0c6:	bf00      	nop
 800d0c8:	3718      	adds	r7, #24
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	20000700 	.word	0x20000700
 800d0d4:	0800ce11 	.word	0x0800ce11
 800d0d8:	0800cd99 	.word	0x0800cd99
 800d0dc:	0800cdd5 	.word	0x0800cdd5
 800d0e0:	38d1b717 	.word	0x38d1b717
 800d0e4:	0800db1d 	.word	0x0800db1d
 800d0e8:	c3480000 	.word	0xc3480000
 800d0ec:	c1a00000 	.word	0xc1a00000
 800d0f0:	40ddb3d7 	.word	0x40ddb3d7
 800d0f4:	00000000 	.word	0x00000000
 800d0f8:	20000760 	.word	0x20000760
 800d0fc:	20000784 	.word	0x20000784
 800d100:	3f4ccccd 	.word	0x3f4ccccd
 800d104:	bc23d70a 	.word	0xbc23d70a
 800d108:	bca3d70a 	.word	0xbca3d70a
 800d10c:	200007a8 	.word	0x200007a8
 800d110:	3d4ccccd 	.word	0x3d4ccccd
 800d114:	3e19999a 	.word	0x3e19999a
 800d118:	43960000 	.word	0x43960000
 800d11c:	200007cc 	.word	0x200007cc
 800d120:	405db3d7 	.word	0x405db3d7
 800d124:	3a83126f 	.word	0x3a83126f
 800d128:	3e99999a 	.word	0x3e99999a
 800d12c:	200007f0 	.word	0x200007f0
 800d130:	200007fc 	.word	0x200007fc
 800d134:	3c23d70a 	.word	0x3c23d70a
 800d138:	20000808 	.word	0x20000808

0800d13c <appInit>:
void appInit()
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	af00      	add	r7, sp, #0
    motorInit();
 800d140:	f7ff fe80 	bl	800ce44 <motorInit>
    MPU6050_Init();
 800d144:	f7ff fd8e 	bl	800cc64 <MPU6050_Init>
}
 800d148:	bf00      	nop
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <appRunning>:
static bool zeroReset;
void appRunning()
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af00      	add	r7, sp, #0

    getKeyState(&keyState);
 800d152:	485a      	ldr	r0, [pc, #360]	@ (800d2bc <appRunning+0x170>)
 800d154:	f000 fc40 	bl	800d9d8 <getKeyState>
    commander_run(&motor1);
 800d158:	4859      	ldr	r0, [pc, #356]	@ (800d2c0 <appRunning+0x174>)
 800d15a:	f000 f9df 	bl	800d51c <commander_run>
    if (++flashCnt >= 10)
 800d15e:	4b59      	ldr	r3, [pc, #356]	@ (800d2c4 <appRunning+0x178>)
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	3301      	adds	r3, #1
 800d164:	b2da      	uxtb	r2, r3
 800d166:	4b57      	ldr	r3, [pc, #348]	@ (800d2c4 <appRunning+0x178>)
 800d168:	701a      	strb	r2, [r3, #0]
 800d16a:	4b56      	ldr	r3, [pc, #344]	@ (800d2c4 <appRunning+0x178>)
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	2b09      	cmp	r3, #9
 800d170:	d902      	bls.n	800d178 <appRunning+0x2c>
        flashCnt = 0;
 800d172:	4b54      	ldr	r3, [pc, #336]	@ (800d2c4 <appRunning+0x178>)
 800d174:	2200      	movs	r2, #0
 800d176:	701a      	strb	r2, [r3, #0]

    led1On = 0;
 800d178:	4b53      	ldr	r3, [pc, #332]	@ (800d2c8 <appRunning+0x17c>)
 800d17a:	2200      	movs	r2, #0
 800d17c:	701a      	strb	r2, [r3, #0]
    led2On = 0;
 800d17e:	4b53      	ldr	r3, [pc, #332]	@ (800d2cc <appRunning+0x180>)
 800d180:	2200      	movs	r2, #0
 800d182:	701a      	strb	r2, [r3, #0]

    uint32_t Vpoten, adc_vbus;
    float Vbus, goalVelocity;
    HAL_ADC_Start(&hadc1);
 800d184:	4852      	ldr	r0, [pc, #328]	@ (800d2d0 <appRunning+0x184>)
 800d186:	f7f5 fef5 	bl	8002f74 <HAL_ADC_Start>
    HAL_ADC_Start(&hadc2);
 800d18a:	4852      	ldr	r0, [pc, #328]	@ (800d2d4 <appRunning+0x188>)
 800d18c:	f7f5 fef2 	bl	8002f74 <HAL_ADC_Start>
    Vpoten = HAL_ADC_GetValue(&hadc1);
 800d190:	484f      	ldr	r0, [pc, #316]	@ (800d2d0 <appRunning+0x184>)
 800d192:	f7f5 ffab 	bl	80030ec <HAL_ADC_GetValue>
 800d196:	6178      	str	r0, [r7, #20]

    goalVelocity = map(Vpoten, 0, 4095, -MAX_VELOCITY, MAX_VELOCITY);
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	ee07 3a90 	vmov	s15, r3
 800d19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1a2:	ed9f 2a4d 	vldr	s4, [pc, #308]	@ 800d2d8 <appRunning+0x18c>
 800d1a6:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800d2dc <appRunning+0x190>
 800d1aa:	ed9f 1a4d 	vldr	s2, [pc, #308]	@ 800d2e0 <appRunning+0x194>
 800d1ae:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 800d2e4 <appRunning+0x198>
 800d1b2:	eeb0 0a67 	vmov.f32	s0, s15
 800d1b6:	f000 fe5e 	bl	800de76 <map>
 800d1ba:	ed87 0a04 	vstr	s0, [r7, #16]

    // goalVelocity = Vpoten / 4095.0f * MAX_VELOCITY;
    float goalTorqueV = map(Vpoten, 0, 4095, -UqMAX, UqMAX);
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	ee07 3a90 	vmov	s15, r3
 800d1c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1c8:	ed9f 2a47 	vldr	s4, [pc, #284]	@ 800d2e8 <appRunning+0x19c>
 800d1cc:	eddf 1a47 	vldr	s3, [pc, #284]	@ 800d2ec <appRunning+0x1a0>
 800d1d0:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 800d2e0 <appRunning+0x194>
 800d1d4:	eddf 0a43 	vldr	s1, [pc, #268]	@ 800d2e4 <appRunning+0x198>
 800d1d8:	eeb0 0a67 	vmov.f32	s0, s15
 800d1dc:	f000 fe4b 	bl	800de76 <map>
 800d1e0:	ed87 0a03 	vstr	s0, [r7, #12]
    float goalTorqueC = map(Vpoten, 0, 4095, -CURRENT_MAX, CURRENT_MAX);
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	ee07 3a90 	vmov	s15, r3
 800d1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ee:	ed9f 2a40 	vldr	s4, [pc, #256]	@ 800d2f0 <appRunning+0x1a4>
 800d1f2:	eddf 1a40 	vldr	s3, [pc, #256]	@ 800d2f4 <appRunning+0x1a8>
 800d1f6:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 800d2e0 <appRunning+0x194>
 800d1fa:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 800d2e4 <appRunning+0x198>
 800d1fe:	eeb0 0a67 	vmov.f32	s0, s15
 800d202:	f000 fe38 	bl	800de76 <map>
 800d206:	ed87 0a02 	vstr	s0, [r7, #8]

    adc_vbus = HAL_ADC_GetValue(&hadc2);
 800d20a:	4832      	ldr	r0, [pc, #200]	@ (800d2d4 <appRunning+0x188>)
 800d20c:	f7f5 ff6e 	bl	80030ec <HAL_ADC_GetValue>
 800d210:	6078      	str	r0, [r7, #4]

    Vbus = adc_vbus * 3.3f / 4096 * 26;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	ee07 3a90 	vmov	s15, r3
 800d218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d21c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800d2f8 <appRunning+0x1ac>
 800d220:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d224:	eddf 6a35 	vldr	s13, [pc, #212]	@ 800d2fc <appRunning+0x1b0>
 800d228:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d22c:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800d230:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d234:	edc7 7a00 	vstr	s15, [r7]

    if (motor1.controlType == VELOCITY || motor1.controlType == VELOCITY_OPEN_LOOP)
 800d238:	4b21      	ldr	r3, [pc, #132]	@ (800d2c0 <appRunning+0x174>)
 800d23a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800d23e:	2b02      	cmp	r3, #2
 800d240:	d004      	beq.n	800d24c <appRunning+0x100>
 800d242:	4b1f      	ldr	r3, [pc, #124]	@ (800d2c0 <appRunning+0x174>)
 800d244:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d103      	bne.n	800d254 <appRunning+0x108>
    {
        motor1.target = goalVelocity;
 800d24c:	4a1c      	ldr	r2, [pc, #112]	@ (800d2c0 <appRunning+0x174>)
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	6313      	str	r3, [r2, #48]	@ 0x30
 800d252:	e01f      	b.n	800d294 <appRunning+0x148>
    }

    else if (motor1.controlType == ANGLE)
 800d254:	4b1a      	ldr	r3, [pc, #104]	@ (800d2c0 <appRunning+0x174>)
 800d256:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800d25a:	2b03      	cmp	r3, #3
 800d25c:	d109      	bne.n	800d272 <appRunning+0x126>
    {
        motor1.target = goalVelocity / 3;
 800d25e:	ed97 7a04 	vldr	s14, [r7, #16]
 800d262:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800d266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d26a:	4b15      	ldr	r3, [pc, #84]	@ (800d2c0 <appRunning+0x174>)
 800d26c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800d270:	e010      	b.n	800d294 <appRunning+0x148>
    }
    else if (motor1.controlType == TORQUE)
 800d272:	4b13      	ldr	r3, [pc, #76]	@ (800d2c0 <appRunning+0x174>)
 800d274:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10b      	bne.n	800d294 <appRunning+0x148>
    {
        if (motor1.torqueType == VOLTAGE)
 800d27c:	4b10      	ldr	r3, [pc, #64]	@ (800d2c0 <appRunning+0x174>)
 800d27e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800d282:	2b00      	cmp	r3, #0
 800d284:	d103      	bne.n	800d28e <appRunning+0x142>
            motor1.target = goalTorqueV;
 800d286:	4a0e      	ldr	r2, [pc, #56]	@ (800d2c0 <appRunning+0x174>)
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6313      	str	r3, [r2, #48]	@ 0x30
 800d28c:	e002      	b.n	800d294 <appRunning+0x148>
        else
            motor1.target = goalTorqueC;
 800d28e:	4a0c      	ldr	r2, [pc, #48]	@ (800d2c0 <appRunning+0x174>)
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    switch (devState)
 800d294:	4b1a      	ldr	r3, [pc, #104]	@ (800d300 <appRunning+0x1b4>)
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d002      	beq.n	800d2a2 <appRunning+0x156>
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d003      	beq.n	800d2a8 <appRunning+0x15c>
 800d2a0:	e005      	b.n	800d2ae <appRunning+0x162>
    {
    case STANDBY:
        standingBy();
 800d2a2:	f000 f82f 	bl	800d304 <standingBy>
        break;
 800d2a6:	e002      	b.n	800d2ae <appRunning+0x162>

    case WORK:
        working();
 800d2a8:	f000 f860 	bl	800d36c <working>
        break;
 800d2ac:	bf00      	nop
    }

    LED_drive();
 800d2ae:	f000 fbd1 	bl	800da54 <LED_drive>
}
 800d2b2:	bf00      	nop
 800d2b4:	3718      	adds	r7, #24
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	200006fd 	.word	0x200006fd
 800d2c0:	20000700 	.word	0x20000700
 800d2c4:	200006fe 	.word	0x200006fe
 800d2c8:	20000948 	.word	0x20000948
 800d2cc:	20000949 	.word	0x20000949
 800d2d0:	20000274 	.word	0x20000274
 800d2d4:	200002e0 	.word	0x200002e0
 800d2d8:	43960000 	.word	0x43960000
 800d2dc:	c3960000 	.word	0xc3960000
 800d2e0:	457ff000 	.word	0x457ff000
 800d2e4:	00000000 	.word	0x00000000
 800d2e8:	40ddb3d7 	.word	0x40ddb3d7
 800d2ec:	c0ddb3d7 	.word	0xc0ddb3d7
 800d2f0:	3f4ccccd 	.word	0x3f4ccccd
 800d2f4:	bf4ccccd 	.word	0xbf4ccccd
 800d2f8:	40533333 	.word	0x40533333
 800d2fc:	45800000 	.word	0x45800000
 800d300:	200006fc 	.word	0x200006fc

0800d304 <standingBy>:
static void standingBy()
{
 800d304:	b580      	push	{r7, lr}
 800d306:	af00      	add	r7, sp, #0
    led1On = 1;
 800d308:	4b12      	ldr	r3, [pc, #72]	@ (800d354 <standingBy+0x50>)
 800d30a:	2201      	movs	r2, #1
 800d30c:	701a      	strb	r2, [r3, #0]
    // setTorque(&motor1, 0, OPEN_LOOP_TORQUE, 0);
    if (zeroReset == 0)
 800d30e:	4b12      	ldr	r3, [pc, #72]	@ (800d358 <standingBy+0x54>)
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d106      	bne.n	800d324 <standingBy+0x20>
    {
        goToZeroElecAngle(&motor1);
 800d316:	4811      	ldr	r0, [pc, #68]	@ (800d35c <standingBy+0x58>)
 800d318:	f7fe fab4 	bl	800b884 <goToZeroElecAngle>
        zeroReset = 1;
 800d31c:	4b0e      	ldr	r3, [pc, #56]	@ (800d358 <standingBy+0x54>)
 800d31e:	2201      	movs	r2, #1
 800d320:	701a      	strb	r2, [r3, #0]
 800d322:	e003      	b.n	800d32c <standingBy+0x28>
    }
    else
        motor1.stopPwm();
 800d324:	4b0d      	ldr	r3, [pc, #52]	@ (800d35c <standingBy+0x58>)
 800d326:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800d32a:	4798      	blx	r3

    if (keyState == USER3_SHORT)
 800d32c:	4b0c      	ldr	r3, [pc, #48]	@ (800d360 <standingBy+0x5c>)
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	2b03      	cmp	r3, #3
 800d332:	d10d      	bne.n	800d350 <standingBy+0x4c>
    {
        WORK_INIT;
 800d334:	4b0b      	ldr	r3, [pc, #44]	@ (800d364 <standingBy+0x60>)
 800d336:	2201      	movs	r2, #1
 800d338:	701a      	strb	r2, [r3, #0]
 800d33a:	4b0b      	ldr	r3, [pc, #44]	@ (800d368 <standingBy+0x64>)
 800d33c:	2200      	movs	r2, #0
 800d33e:	701a      	strb	r2, [r3, #0]
 800d340:	4b06      	ldr	r3, [pc, #24]	@ (800d35c <standingBy+0x58>)
 800d342:	2202      	movs	r2, #2
 800d344:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800d348:	4b04      	ldr	r3, [pc, #16]	@ (800d35c <standingBy+0x58>)
 800d34a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800d34e:	4798      	blx	r3
    }
}
 800d350:	bf00      	nop
 800d352:	bd80      	pop	{r7, pc}
 800d354:	20000948 	.word	0x20000948
 800d358:	2000083c 	.word	0x2000083c
 800d35c:	20000700 	.word	0x20000700
 800d360:	200006fd 	.word	0x200006fd
 800d364:	200006fc 	.word	0x200006fc
 800d368:	200006fe 	.word	0x200006fe

0800d36c <working>:

static void working(void)
{
 800d36c:	b480      	push	{r7}
 800d36e:	af00      	add	r7, sp, #0
    zeroReset = 0;
 800d370:	4b0e      	ldr	r3, [pc, #56]	@ (800d3ac <working+0x40>)
 800d372:	2200      	movs	r2, #0
 800d374:	701a      	strb	r2, [r3, #0]
    if (flashCnt < 5)
 800d376:	4b0e      	ldr	r3, [pc, #56]	@ (800d3b0 <working+0x44>)
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	2b04      	cmp	r3, #4
 800d37c:	d802      	bhi.n	800d384 <working+0x18>
        led2On = 1;
 800d37e:	4b0d      	ldr	r3, [pc, #52]	@ (800d3b4 <working+0x48>)
 800d380:	2201      	movs	r2, #1
 800d382:	701a      	strb	r2, [r3, #0]

    if (keyState == USER3_SHORT)
 800d384:	4b0c      	ldr	r3, [pc, #48]	@ (800d3b8 <working+0x4c>)
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	2b03      	cmp	r3, #3
 800d38a:	d109      	bne.n	800d3a0 <working+0x34>
    {
        STANDBY_INIT;
 800d38c:	4b0b      	ldr	r3, [pc, #44]	@ (800d3bc <working+0x50>)
 800d38e:	2200      	movs	r2, #0
 800d390:	701a      	strb	r2, [r3, #0]
 800d392:	4b07      	ldr	r3, [pc, #28]	@ (800d3b0 <working+0x44>)
 800d394:	2200      	movs	r2, #0
 800d396:	701a      	strb	r2, [r3, #0]
 800d398:	4b09      	ldr	r3, [pc, #36]	@ (800d3c0 <working+0x54>)
 800d39a:	2201      	movs	r2, #1
 800d39c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        //     {
        //         bldcMotor.focTarget = 23;
        //     }
        // }
    }
}
 800d3a0:	bf00      	nop
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop
 800d3ac:	2000083c 	.word	0x2000083c
 800d3b0:	200006fe 	.word	0x200006fe
 800d3b4:	20000949 	.word	0x20000949
 800d3b8:	200006fd 	.word	0x200006fd
 800d3bc:	200006fc 	.word	0x200006fc
 800d3c0:	20000700 	.word	0x20000700

0800d3c4 <txDataProcess>:

void txDataProcess()
{
 800d3c4:	b5b0      	push	{r4, r5, r7, lr}
 800d3c6:	b088      	sub	sp, #32
 800d3c8:	af04      	add	r7, sp, #16
    int16_t AX, AY, AZ, GX, GY, GZ;                // 定义用于存放各个数据的变量
    MPU6050_GetData(&AX, &AY, &AZ, &GX, &GY, &GZ); // 获取MPU6050的数据
 800d3ca:	f107 0408 	add.w	r4, r7, #8
 800d3ce:	f107 020a 	add.w	r2, r7, #10
 800d3d2:	f107 010c 	add.w	r1, r7, #12
 800d3d6:	f107 000e 	add.w	r0, r7, #14
 800d3da:	1d3b      	adds	r3, r7, #4
 800d3dc:	9301      	str	r3, [sp, #4]
 800d3de:	1dbb      	adds	r3, r7, #6
 800d3e0:	9300      	str	r3, [sp, #0]
 800d3e2:	4623      	mov	r3, r4
 800d3e4:	f7ff fc5a 	bl	800cc9c <MPU6050_GetData>
    sprintf(txBuffer, "AX:%df AY:%d AZ:%d GX:%d GY:%d GZ:%d\n", AX, AY, AZ, GX, GY, GZ);
 800d3e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d3ec:	461c      	mov	r4, r3
 800d3ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d3f2:	461d      	mov	r5, r3
 800d3f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d3f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d3fc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800d400:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800d404:	9003      	str	r0, [sp, #12]
 800d406:	9102      	str	r1, [sp, #8]
 800d408:	9201      	str	r2, [sp, #4]
 800d40a:	9300      	str	r3, [sp, #0]
 800d40c:	462b      	mov	r3, r5
 800d40e:	4622      	mov	r2, r4
 800d410:	4903      	ldr	r1, [pc, #12]	@ (800d420 <txDataProcess+0x5c>)
 800d412:	4804      	ldr	r0, [pc, #16]	@ (800d424 <txDataProcess+0x60>)
 800d414:	f002 fba8 	bl	800fb68 <siprintf>
    // sprintf(txBuffer, "target:%.2f fullAngle:%.2f velocity:%.2f Uq:%.2f Ud:%.2f Iq:%.2f Id:%.2f elec_angle:%.2f\n", motor1.target, motor1.magEncoder.fullAngle, motor1.magEncoder.velocity, motor1.Uq, motor1.Ud, motor1.Iq, motor1.Id, motor1.angle_el);
    // sprintf(txBuffer, "target:%f Uq:%f\n", motor1.target, motor1.Uq);
    // sprintf(txBuffer, "offset_ia:%f offset_ib:%f, Ia:%f, Ib:%f\n", motor1.offset_ia, motor1.offset_ib, motor1.Ia, motor1.Ib);
}
 800d418:	bf00      	nop
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bdb0      	pop	{r4, r5, r7, pc}
 800d420:	08012b68 	.word	0x08012b68
 800d424:	20000840 	.word	0x20000840

0800d428 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
    // HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
    if (hadc == &hadc1)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	4a0a      	ldr	r2, [pc, #40]	@ (800d45c <HAL_ADCEx_InjectedConvCpltCallback+0x34>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d10d      	bne.n	800d454 <HAL_ADCEx_InjectedConvCpltCallback+0x2c>
    {

        foc(&motor1, hadc1.Instance->JDR1, hadc2.Instance->JDR1);
 800d438:	4b08      	ldr	r3, [pc, #32]	@ (800d45c <HAL_ADCEx_InjectedConvCpltCallback+0x34>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800d440:	4b07      	ldr	r3, [pc, #28]	@ (800d460 <HAL_ADCEx_InjectedConvCpltCallback+0x38>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d448:	461a      	mov	r2, r3
 800d44a:	4806      	ldr	r0, [pc, #24]	@ (800d464 <HAL_ADCEx_InjectedConvCpltCallback+0x3c>)
 800d44c:	f7fe fb76 	bl	800bb3c <foc>
        // svpwm_test(&motor1, 4.0f, 0.07f);
        dealPer100us();
 800d450:	f000 fd40 	bl	800ded4 <dealPer100us>
        memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
        HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, sizeof(tempData));
#endif
    }
    // HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
}
 800d454:	bf00      	nop
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	20000274 	.word	0x20000274
 800d460:	200002e0 	.word	0x200002e0
 800d464:	20000700 	.word	0x20000700

0800d468 <HAL_UARTEx_RxEventCallback>:
bool toProcessData;
uint8_t aRxBuffer;
float comm1, comm2, comm3, comm4, comm5, comm6, comm7, comm8, comm9, comm10, comm11;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	460b      	mov	r3, r1
 800d472:	807b      	strh	r3, [r7, #2]
  if (huart == &huart3)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	4a07      	ldr	r2, [pc, #28]	@ (800d494 <HAL_UARTEx_RxEventCallback+0x2c>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d107      	bne.n	800d48c <HAL_UARTEx_RxEventCallback+0x24>
  {
    // HAL_UART_Transmit_DMA(&huart3, rxBuffer, Size);
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800d47c:	2264      	movs	r2, #100	@ 0x64
 800d47e:	4906      	ldr	r1, [pc, #24]	@ (800d498 <HAL_UARTEx_RxEventCallback+0x30>)
 800d480:	4804      	ldr	r0, [pc, #16]	@ (800d494 <HAL_UARTEx_RxEventCallback+0x2c>)
 800d482:	f7fe f95c 	bl	800b73e <HAL_UARTEx_ReceiveToIdle_DMA>
    toProcessData = 1;
 800d486:	4b05      	ldr	r3, [pc, #20]	@ (800d49c <HAL_UARTEx_RxEventCallback+0x34>)
 800d488:	2201      	movs	r2, #1
 800d48a:	701a      	strb	r2, [r3, #0]
  }
}
 800d48c:	bf00      	nop
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	200005a0 	.word	0x200005a0
 800d498:	200008a4 	.word	0x200008a4
 800d49c:	20000908 	.word	0x20000908

0800d4a0 <FOC_log>:

// DMA模式
void FOC_log(const char *format, ...)
{
 800d4a0:	b40f      	push	{r0, r1, r2, r3}
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b0c2      	sub	sp, #264	@ 0x108
 800d4a6:	af00      	add	r7, sp, #0
  // length = vsnprintf((char *)txBuffer, sizeof(txBuffer), (char *)format, args);
  // va_end(args);
  // HAL_UART_Transmit_DMA(&huart3, (const char *)txBuffer, length);

  va_list args;           // 定义参数列表变量
  va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 800d4a8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800d4ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800d4b0:	1d3b      	adds	r3, r7, #4
 800d4b2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800d4b6:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f002 fbce 	bl	800fc5c <vsiprintf>
  va_end(args);                   // 结束可变参数的使用

  // 等待上次的数据发送完成，避免新的数据覆盖正在传输的数据，导致混乱
  while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
 800d4c0:	bf00      	nop
 800d4c2:	480d      	ldr	r0, [pc, #52]	@ (800d4f8 <FOC_log+0x58>)
 800d4c4:	f7fd f8ee 	bl	800a6a4 <HAL_UART_GetState>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b21      	cmp	r3, #33	@ 0x21
 800d4cc:	d0f9      	beq.n	800d4c2 <FOC_log+0x22>
  {
    // Wait for DMA transfer to complete
  }
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
 800d4ce:	1d3b      	adds	r3, r7, #4
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7f2 fef5 	bl	80002c0 <strlen>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	b29a      	uxth	r2, r3
 800d4da:	1d39      	adds	r1, r7, #4
 800d4dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d4e0:	4805      	ldr	r0, [pc, #20]	@ (800d4f8 <FOC_log+0x58>)
 800d4e2:	f7fc fc7a 	bl	8009dda <HAL_UART_Transmit>
}
 800d4e6:	bf00      	nop
 800d4e8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d4f2:	b004      	add	sp, #16
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	200005a0 	.word	0x200005a0

0800d4fc <printLog>:
//   va_end(args);
//   HAL_UART_Transmit_DMA(&huart3, (const char *)txBuffer, length);
// }

void printLog()
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	af00      	add	r7, sp, #0

#if SHOW_WAVE == 0
  txDataProcess();
 800d500:	f7ff ff60 	bl	800d3c4 <txDataProcess>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800d504:	2264      	movs	r2, #100	@ 0x64
 800d506:	4903      	ldr	r1, [pc, #12]	@ (800d514 <printLog+0x18>)
 800d508:	4803      	ldr	r0, [pc, #12]	@ (800d518 <printLog+0x1c>)
 800d50a:	f7fc fcf5 	bl	8009ef8 <HAL_UART_Transmit_DMA>
#endif
}
 800d50e:	bf00      	nop
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	20000840 	.word	0x20000840
 800d518:	200005a0 	.word	0x200005a0

0800d51c <commander_run>:

void commander_run(BldcMotor *motor)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  if (toProcessData == 1)
 800d524:	4b1c      	ldr	r3, [pc, #112]	@ (800d598 <commander_run+0x7c>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d131      	bne.n	800d590 <commander_run+0x74>
  {
    // memset(txBuffer, '\0', sizeof(txBuffer));

    switch (rxBuffer[0])
 800d52c:	4b1b      	ldr	r3, [pc, #108]	@ (800d59c <commander_run+0x80>)
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	2b48      	cmp	r3, #72	@ 0x48
 800d532:	d002      	beq.n	800d53a <commander_run+0x1e>
 800d534:	2b54      	cmp	r3, #84	@ 0x54
 800d536:	d00a      	beq.n	800d54e <commander_run+0x32>
 800d538:	e027      	b.n	800d58a <commander_run+0x6e>
    {
    case 'H':
      // sprintf(sndBuff, "Hello World!\r\n");
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)sndBuff, sizeof(sndBuff));
      sprintf(txBuffer, "Hello World!\r\n");
 800d53a:	4919      	ldr	r1, [pc, #100]	@ (800d5a0 <commander_run+0x84>)
 800d53c:	4819      	ldr	r0, [pc, #100]	@ (800d5a4 <commander_run+0x88>)
 800d53e:	f002 fb13 	bl	800fb68 <siprintf>
      HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800d542:	2264      	movs	r2, #100	@ 0x64
 800d544:	4917      	ldr	r1, [pc, #92]	@ (800d5a4 <commander_run+0x88>)
 800d546:	4818      	ldr	r0, [pc, #96]	@ (800d5a8 <commander_run+0x8c>)
 800d548:	f7fc fcd6 	bl	8009ef8 <HAL_UART_Transmit_DMA>
      break;
 800d54c:	e01d      	b.n	800d58a <commander_run+0x6e>
    case 'T': // T6.28

      motor->target = atof((const char *)(rxBuffer + 1));
 800d54e:	4b17      	ldr	r3, [pc, #92]	@ (800d5ac <commander_run+0x90>)
 800d550:	4618      	mov	r0, r3
 800d552:	f000 fdc1 	bl	800e0d8 <atof>
 800d556:	ec53 2b10 	vmov	r2, r3, d0
 800d55a:	4610      	mov	r0, r2
 800d55c:	4619      	mov	r1, r3
 800d55e:	f7f3 fb6b 	bl	8000c38 <__aeabi_d2f>
 800d562:	4602      	mov	r2, r0
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	631a      	str	r2, [r3, #48]	@ 0x30
      sprintf(txBuffer, "Target=%.2f\r\n", motor->target);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7f3 f813 	bl	8000598 <__aeabi_f2d>
 800d572:	4602      	mov	r2, r0
 800d574:	460b      	mov	r3, r1
 800d576:	490e      	ldr	r1, [pc, #56]	@ (800d5b0 <commander_run+0x94>)
 800d578:	480a      	ldr	r0, [pc, #40]	@ (800d5a4 <commander_run+0x88>)
 800d57a:	f002 faf5 	bl	800fb68 <siprintf>
      HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800d57e:	2264      	movs	r2, #100	@ 0x64
 800d580:	4908      	ldr	r1, [pc, #32]	@ (800d5a4 <commander_run+0x88>)
 800d582:	4809      	ldr	r0, [pc, #36]	@ (800d5a8 <commander_run+0x8c>)
 800d584:	f7fc fcb8 	bl	8009ef8 <HAL_UART_Transmit_DMA>
      // printf("%s", sndBuff);
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)sndBuff, sizeof(sndBuff));
      break;
 800d588:	bf00      	nop
      // case 'A': // A
      //   sprintf(sndBuff, "Ang=%.2f\r\n", shaftAngle);
      //   printf("%s", sndBuff);
      //   break;
    }
    toProcessData = 0;
 800d58a:	4b03      	ldr	r3, [pc, #12]	@ (800d598 <commander_run+0x7c>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	701a      	strb	r2, [r3, #0]
  }
}
 800d590:	bf00      	nop
 800d592:	3708      	adds	r7, #8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	20000908 	.word	0x20000908
 800d59c:	200008a4 	.word	0x200008a4
 800d5a0:	08012b90 	.word	0x08012b90
 800d5a4:	20000840 	.word	0x20000840
 800d5a8:	200005a0 	.word	0x200005a0
 800d5ac:	200008a5 	.word	0x200008a5
 800d5b0:	08012ba0 	.word	0x08012ba0

0800d5b4 <getKeyFlags>:
#include "key.h"

static KeyStruct keyStruct[KEY_NUM];

uint getKeyFlags()
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	af00      	add	r7, sp, #0
    static uint keyFlagsBak; // back up keyflags for filtering
    static uchar filterCnt;
    static Byte flags;       // real time key flags with bits operation
    static uint keyFlagsBuf; // return key flags after filtering

    flags.byte = 0;
 800d5b8:	4b3b      	ldr	r3, [pc, #236]	@ (800d6a8 <getKeyFlags+0xf4>)
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	701a      	strb	r2, [r3, #0]

    // when IO been multiplexed
    if (HAL_GPIO_ReadPin(SW_PORT, SW1_PIN) == 1)
 800d5be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d5c2:	483a      	ldr	r0, [pc, #232]	@ (800d6ac <getKeyFlags+0xf8>)
 800d5c4:	f7f9 f924 	bl	8006810 <HAL_GPIO_ReadPin>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d104      	bne.n	800d5d8 <getKeyFlags+0x24>
    {
        flags.bits.b0 = 1; // SW1
 800d5ce:	4a36      	ldr	r2, [pc, #216]	@ (800d6a8 <getKeyFlags+0xf4>)
 800d5d0:	7813      	ldrb	r3, [r2, #0]
 800d5d2:	f043 0301 	orr.w	r3, r3, #1
 800d5d6:	7013      	strb	r3, [r2, #0]
    }

    if (HAL_GPIO_ReadPin(SW_PORT, SW2_PIN) == 1)
 800d5d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d5dc:	4833      	ldr	r0, [pc, #204]	@ (800d6ac <getKeyFlags+0xf8>)
 800d5de:	f7f9 f917 	bl	8006810 <HAL_GPIO_ReadPin>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d104      	bne.n	800d5f2 <getKeyFlags+0x3e>
    {
        flags.bits.b1 = 1; // SW2
 800d5e8:	4a2f      	ldr	r2, [pc, #188]	@ (800d6a8 <getKeyFlags+0xf4>)
 800d5ea:	7813      	ldrb	r3, [r2, #0]
 800d5ec:	f043 0302 	orr.w	r3, r3, #2
 800d5f0:	7013      	strb	r3, [r2, #0]
    }

    if (HAL_GPIO_ReadPin(SW_PORT, SW3_PIN) == 1)
 800d5f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d5f6:	482d      	ldr	r0, [pc, #180]	@ (800d6ac <getKeyFlags+0xf8>)
 800d5f8:	f7f9 f90a 	bl	8006810 <HAL_GPIO_ReadPin>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d104      	bne.n	800d60c <getKeyFlags+0x58>
    {
        flags.bits.b2 = 1; // SW3
 800d602:	4a29      	ldr	r2, [pc, #164]	@ (800d6a8 <getKeyFlags+0xf4>)
 800d604:	7813      	ldrb	r3, [r2, #0]
 800d606:	f043 0304 	orr.w	r3, r3, #4
 800d60a:	7013      	strb	r3, [r2, #0]
    }

    if (flags.byte == keyFlagsBak)
 800d60c:	4b26      	ldr	r3, [pc, #152]	@ (800d6a8 <getKeyFlags+0xf4>)
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	461a      	mov	r2, r3
 800d612:	4b27      	ldr	r3, [pc, #156]	@ (800d6b0 <getKeyFlags+0xfc>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	429a      	cmp	r2, r3
 800d618:	d13c      	bne.n	800d694 <getKeyFlags+0xe0>
    {
        if (flags.bits.b0)
 800d61a:	4b23      	ldr	r3, [pc, #140]	@ (800d6a8 <getKeyFlags+0xf4>)
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	f003 0301 	and.w	r3, r3, #1
 800d622:	b2db      	uxtb	r3, r3
 800d624:	2b00      	cmp	r3, #0
 800d626:	d006      	beq.n	800d636 <getKeyFlags+0x82>
            keyFlagsBuf |= 1;
 800d628:	4b22      	ldr	r3, [pc, #136]	@ (800d6b4 <getKeyFlags+0x100>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f043 0301 	orr.w	r3, r3, #1
 800d630:	4a20      	ldr	r2, [pc, #128]	@ (800d6b4 <getKeyFlags+0x100>)
 800d632:	6013      	str	r3, [r2, #0]
 800d634:	e005      	b.n	800d642 <getKeyFlags+0x8e>
        else
            keyFlagsBuf &= ~1;
 800d636:	4b1f      	ldr	r3, [pc, #124]	@ (800d6b4 <getKeyFlags+0x100>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f023 0301 	bic.w	r3, r3, #1
 800d63e:	4a1d      	ldr	r2, [pc, #116]	@ (800d6b4 <getKeyFlags+0x100>)
 800d640:	6013      	str	r3, [r2, #0]

        if (flags.bits.b1)
 800d642:	4b19      	ldr	r3, [pc, #100]	@ (800d6a8 <getKeyFlags+0xf4>)
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	f003 0302 	and.w	r3, r3, #2
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d006      	beq.n	800d65e <getKeyFlags+0xaa>
            keyFlagsBuf |= 1 << 1;
 800d650:	4b18      	ldr	r3, [pc, #96]	@ (800d6b4 <getKeyFlags+0x100>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f043 0302 	orr.w	r3, r3, #2
 800d658:	4a16      	ldr	r2, [pc, #88]	@ (800d6b4 <getKeyFlags+0x100>)
 800d65a:	6013      	str	r3, [r2, #0]
 800d65c:	e005      	b.n	800d66a <getKeyFlags+0xb6>
        else
            keyFlagsBuf &= ~(1 << 1);
 800d65e:	4b15      	ldr	r3, [pc, #84]	@ (800d6b4 <getKeyFlags+0x100>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f023 0302 	bic.w	r3, r3, #2
 800d666:	4a13      	ldr	r2, [pc, #76]	@ (800d6b4 <getKeyFlags+0x100>)
 800d668:	6013      	str	r3, [r2, #0]

        if (flags.bits.b2)
 800d66a:	4b0f      	ldr	r3, [pc, #60]	@ (800d6a8 <getKeyFlags+0xf4>)
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	f003 0304 	and.w	r3, r3, #4
 800d672:	b2db      	uxtb	r3, r3
 800d674:	2b00      	cmp	r3, #0
 800d676:	d006      	beq.n	800d686 <getKeyFlags+0xd2>
            keyFlagsBuf |= 1 << 2;
 800d678:	4b0e      	ldr	r3, [pc, #56]	@ (800d6b4 <getKeyFlags+0x100>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f043 0304 	orr.w	r3, r3, #4
 800d680:	4a0c      	ldr	r2, [pc, #48]	@ (800d6b4 <getKeyFlags+0x100>)
 800d682:	6013      	str	r3, [r2, #0]
 800d684:	e00b      	b.n	800d69e <getKeyFlags+0xea>
        else
            keyFlagsBuf &= ~(1 << 2);
 800d686:	4b0b      	ldr	r3, [pc, #44]	@ (800d6b4 <getKeyFlags+0x100>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f023 0304 	bic.w	r3, r3, #4
 800d68e:	4a09      	ldr	r2, [pc, #36]	@ (800d6b4 <getKeyFlags+0x100>)
 800d690:	6013      	str	r3, [r2, #0]
 800d692:	e004      	b.n	800d69e <getKeyFlags+0xea>
    }
    else
    {
        keyFlagsBak = flags.byte;
 800d694:	4b04      	ldr	r3, [pc, #16]	@ (800d6a8 <getKeyFlags+0xf4>)
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	461a      	mov	r2, r3
 800d69a:	4b05      	ldr	r3, [pc, #20]	@ (800d6b0 <getKeyFlags+0xfc>)
 800d69c:	601a      	str	r2, [r3, #0]
    }
#if DEBUG_KEY
    // displayStuff = keyFlagsBuf;
#endif

    return keyFlagsBuf;
 800d69e:	4b05      	ldr	r3, [pc, #20]	@ (800d6b4 <getKeyFlags+0x100>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	2000093c 	.word	0x2000093c
 800d6ac:	48000800 	.word	0x48000800
 800d6b0:	20000940 	.word	0x20000940
 800d6b4:	20000944 	.word	0x20000944

0800d6b8 <keyScan>:

void keyScan()
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0

    uint keyFlags;

    keyFlags = getKeyFlags();
 800d6be:	f7ff ff79 	bl	800d5b4 <getKeyFlags>
 800d6c2:	6038      	str	r0, [r7, #0]

    if (keyFlags == 0)
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d13b      	bne.n	800d742 <keyScan+0x8a>
    {
        uchar i;
        for (i = 0; i < KEY_NUM; i++)
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	71fb      	strb	r3, [r7, #7]
 800d6ce:	e035      	b.n	800d73c <keyScan+0x84>
        {
            if (keyStruct[i].keyType == LONG_WITH_SHORT && keyStruct[i].trigCnt > 0)
 800d6d0:	79fa      	ldrb	r2, [r7, #7]
 800d6d2:	4992      	ldr	r1, [pc, #584]	@ (800d91c <keyScan+0x264>)
 800d6d4:	4613      	mov	r3, r2
 800d6d6:	005b      	lsls	r3, r3, #1
 800d6d8:	4413      	add	r3, r2
 800d6da:	009b      	lsls	r3, r3, #2
 800d6dc:	440b      	add	r3, r1
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	d114      	bne.n	800d70e <keyScan+0x56>
 800d6e4:	79fa      	ldrb	r2, [r7, #7]
 800d6e6:	498d      	ldr	r1, [pc, #564]	@ (800d91c <keyScan+0x264>)
 800d6e8:	4613      	mov	r3, r2
 800d6ea:	005b      	lsls	r3, r3, #1
 800d6ec:	4413      	add	r3, r2
 800d6ee:	009b      	lsls	r3, r3, #2
 800d6f0:	440b      	add	r3, r1
 800d6f2:	3304      	adds	r3, #4
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d009      	beq.n	800d70e <keyScan+0x56>
            {
                keyStruct[i].trigType = TRIG_SHORT;
 800d6fa:	79fa      	ldrb	r2, [r7, #7]
 800d6fc:	4987      	ldr	r1, [pc, #540]	@ (800d91c <keyScan+0x264>)
 800d6fe:	4613      	mov	r3, r2
 800d700:	005b      	lsls	r3, r3, #1
 800d702:	4413      	add	r3, r2
 800d704:	009b      	lsls	r3, r3, #2
 800d706:	440b      	add	r3, r1
 800d708:	3308      	adds	r3, #8
 800d70a:	2201      	movs	r2, #1
 800d70c:	701a      	strb	r2, [r3, #0]
            }
            keyStruct[i].trigCnt = 0;
 800d70e:	79fa      	ldrb	r2, [r7, #7]
 800d710:	4982      	ldr	r1, [pc, #520]	@ (800d91c <keyScan+0x264>)
 800d712:	4613      	mov	r3, r2
 800d714:	005b      	lsls	r3, r3, #1
 800d716:	4413      	add	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	440b      	add	r3, r1
 800d71c:	3304      	adds	r3, #4
 800d71e:	2200      	movs	r2, #0
 800d720:	601a      	str	r2, [r3, #0]
            keyStruct[i].preKeyValue = NO_TRIG;
 800d722:	79fa      	ldrb	r2, [r7, #7]
 800d724:	497d      	ldr	r1, [pc, #500]	@ (800d91c <keyScan+0x264>)
 800d726:	4613      	mov	r3, r2
 800d728:	005b      	lsls	r3, r3, #1
 800d72a:	4413      	add	r3, r2
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	440b      	add	r3, r1
 800d730:	3309      	adds	r3, #9
 800d732:	2200      	movs	r2, #0
 800d734:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < KEY_NUM; i++)
 800d736:	79fb      	ldrb	r3, [r7, #7]
 800d738:	3301      	adds	r3, #1
 800d73a:	71fb      	strb	r3, [r7, #7]
 800d73c:	79fb      	ldrb	r3, [r7, #7]
 800d73e:	2b03      	cmp	r3, #3
 800d740:	d9c6      	bls.n	800d6d0 <keyScan+0x18>
    //                keyStruct[0].trigType = keyStruct[1].preKeyValue;
    //            }
    //        }
    //    }

    if (keyStruct[1].preKeyValue == NO_TRIG)
 800d742:	4b76      	ldr	r3, [pc, #472]	@ (800d91c <keyScan+0x264>)
 800d744:	7d5b      	ldrb	r3, [r3, #21]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d131      	bne.n	800d7ae <keyScan+0xf6>
    {
        if (keyFlags == K(1))
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d15d      	bne.n	800d80c <keyScan+0x154>
        {
            if (keyStruct[1].preKeyValue == NO_TRIG)
 800d750:	4b72      	ldr	r3, [pc, #456]	@ (800d91c <keyScan+0x264>)
 800d752:	7d5b      	ldrb	r3, [r3, #21]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d159      	bne.n	800d80c <keyScan+0x154>
            {
                if (keyStruct[1].keyType == SHORT || keyStruct[1].keyType == CONTINUOUS)
 800d758:	4b70      	ldr	r3, [pc, #448]	@ (800d91c <keyScan+0x264>)
 800d75a:	7b1b      	ldrb	r3, [r3, #12]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d003      	beq.n	800d768 <keyScan+0xb0>
 800d760:	4b6e      	ldr	r3, [pc, #440]	@ (800d91c <keyScan+0x264>)
 800d762:	7b1b      	ldrb	r3, [r3, #12]
 800d764:	2b02      	cmp	r3, #2
 800d766:	d106      	bne.n	800d776 <keyScan+0xbe>
                {
                    keyStruct[1].trigType = TRIG_SHORT;
 800d768:	4b6c      	ldr	r3, [pc, #432]	@ (800d91c <keyScan+0x264>)
 800d76a:	2201      	movs	r2, #1
 800d76c:	751a      	strb	r2, [r3, #20]
                    keyStruct[1].preKeyValue = TRIG_SHORT;
 800d76e:	4b6b      	ldr	r3, [pc, #428]	@ (800d91c <keyScan+0x264>)
 800d770:	2201      	movs	r2, #1
 800d772:	755a      	strb	r2, [r3, #21]
 800d774:	e04a      	b.n	800d80c <keyScan+0x154>
                }
                else if (keyStruct[1].keyType == LONG_WITH_SHORT || keyStruct[1].keyType == LONG)
 800d776:	4b69      	ldr	r3, [pc, #420]	@ (800d91c <keyScan+0x264>)
 800d778:	7b1b      	ldrb	r3, [r3, #12]
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d003      	beq.n	800d786 <keyScan+0xce>
 800d77e:	4b67      	ldr	r3, [pc, #412]	@ (800d91c <keyScan+0x264>)
 800d780:	7b1b      	ldrb	r3, [r3, #12]
 800d782:	2b03      	cmp	r3, #3
 800d784:	d142      	bne.n	800d80c <keyScan+0x154>
                {
                    if (++keyStruct[1].trigCnt >= KEY1_LONG_CNT)
 800d786:	4b65      	ldr	r3, [pc, #404]	@ (800d91c <keyScan+0x264>)
 800d788:	691b      	ldr	r3, [r3, #16]
 800d78a:	3301      	adds	r3, #1
 800d78c:	4a63      	ldr	r2, [pc, #396]	@ (800d91c <keyScan+0x264>)
 800d78e:	6113      	str	r3, [r2, #16]
 800d790:	4b62      	ldr	r3, [pc, #392]	@ (800d91c <keyScan+0x264>)
 800d792:	691b      	ldr	r3, [r3, #16]
 800d794:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d798:	d338      	bcc.n	800d80c <keyScan+0x154>
                    {
                        keyStruct[1].trigCnt = 0;
 800d79a:	4b60      	ldr	r3, [pc, #384]	@ (800d91c <keyScan+0x264>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	611a      	str	r2, [r3, #16]
                        keyStruct[1].trigType = TRIG_LONG;
 800d7a0:	4b5e      	ldr	r3, [pc, #376]	@ (800d91c <keyScan+0x264>)
 800d7a2:	2202      	movs	r2, #2
 800d7a4:	751a      	strb	r2, [r3, #20]
                        keyStruct[1].preKeyValue = TRIG_LONG;
 800d7a6:	4b5d      	ldr	r3, [pc, #372]	@ (800d91c <keyScan+0x264>)
 800d7a8:	2202      	movs	r2, #2
 800d7aa:	755a      	strb	r2, [r3, #21]
 800d7ac:	e02e      	b.n	800d80c <keyScan+0x154>
                    }
                }
            }
        }
    }
    else if (keyStruct[1].keyType == CONTINUOUS)
 800d7ae:	4b5b      	ldr	r3, [pc, #364]	@ (800d91c <keyScan+0x264>)
 800d7b0:	7b1b      	ldrb	r3, [r3, #12]
 800d7b2:	2b02      	cmp	r3, #2
 800d7b4:	d12a      	bne.n	800d80c <keyScan+0x154>
    {
        if (keyStruct[1].preKeyValue == TRIG_SHORT) // short key
 800d7b6:	4b59      	ldr	r3, [pc, #356]	@ (800d91c <keyScan+0x264>)
 800d7b8:	7d5b      	ldrb	r3, [r3, #21]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d112      	bne.n	800d7e4 <keyScan+0x12c>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_TRIG_CNT)
 800d7be:	4b57      	ldr	r3, [pc, #348]	@ (800d91c <keyScan+0x264>)
 800d7c0:	691b      	ldr	r3, [r3, #16]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	4a55      	ldr	r2, [pc, #340]	@ (800d91c <keyScan+0x264>)
 800d7c6:	6113      	str	r3, [r2, #16]
 800d7c8:	4b54      	ldr	r3, [pc, #336]	@ (800d91c <keyScan+0x264>)
 800d7ca:	691b      	ldr	r3, [r3, #16]
 800d7cc:	2b63      	cmp	r3, #99	@ 0x63
 800d7ce:	d91d      	bls.n	800d80c <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800d7d0:	4b52      	ldr	r3, [pc, #328]	@ (800d91c <keyScan+0x264>)
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = TRIG_LONG; // long
 800d7d6:	4b51      	ldr	r3, [pc, #324]	@ (800d91c <keyScan+0x264>)
 800d7d8:	2202      	movs	r2, #2
 800d7da:	751a      	strb	r2, [r3, #20]
                keyStruct[1].preKeyValue = TRIG_LONG;
 800d7dc:	4b4f      	ldr	r3, [pc, #316]	@ (800d91c <keyScan+0x264>)
 800d7de:	2202      	movs	r2, #2
 800d7e0:	755a      	strb	r2, [r3, #21]
 800d7e2:	e013      	b.n	800d80c <keyScan+0x154>
            }
        }
        else if (keyStruct[1].preKeyValue == TRIG_LONG) // long key
 800d7e4:	4b4d      	ldr	r3, [pc, #308]	@ (800d91c <keyScan+0x264>)
 800d7e6:	7d5b      	ldrb	r3, [r3, #21]
 800d7e8:	2b02      	cmp	r3, #2
 800d7ea:	d10f      	bne.n	800d80c <keyScan+0x154>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_INTEVAL)
 800d7ec:	4b4b      	ldr	r3, [pc, #300]	@ (800d91c <keyScan+0x264>)
 800d7ee:	691b      	ldr	r3, [r3, #16]
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	4a4a      	ldr	r2, [pc, #296]	@ (800d91c <keyScan+0x264>)
 800d7f4:	6113      	str	r3, [r2, #16]
 800d7f6:	4b49      	ldr	r3, [pc, #292]	@ (800d91c <keyScan+0x264>)
 800d7f8:	691b      	ldr	r3, [r3, #16]
 800d7fa:	2b27      	cmp	r3, #39	@ 0x27
 800d7fc:	d906      	bls.n	800d80c <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800d7fe:	4b47      	ldr	r3, [pc, #284]	@ (800d91c <keyScan+0x264>)
 800d800:	2200      	movs	r2, #0
 800d802:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = keyStruct[1].preKeyValue;
 800d804:	4b45      	ldr	r3, [pc, #276]	@ (800d91c <keyScan+0x264>)
 800d806:	7d5a      	ldrb	r2, [r3, #21]
 800d808:	4b44      	ldr	r3, [pc, #272]	@ (800d91c <keyScan+0x264>)
 800d80a:	751a      	strb	r2, [r3, #20]
            }
        }
    }

    if (keyStruct[2].preKeyValue == NO_TRIG)
 800d80c:	4b43      	ldr	r3, [pc, #268]	@ (800d91c <keyScan+0x264>)
 800d80e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d812:	2b00      	cmp	r3, #0
 800d814:	d131      	bne.n	800d87a <keyScan+0x1c2>
    {
        if (keyFlags == K(2))
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	2b02      	cmp	r3, #2
 800d81a:	d163      	bne.n	800d8e4 <keyScan+0x22c>
        {

            if (keyStruct[2].keyType == SHORT || keyStruct[2].keyType == CONTINUOUS)
 800d81c:	4b3f      	ldr	r3, [pc, #252]	@ (800d91c <keyScan+0x264>)
 800d81e:	7e1b      	ldrb	r3, [r3, #24]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d003      	beq.n	800d82c <keyScan+0x174>
 800d824:	4b3d      	ldr	r3, [pc, #244]	@ (800d91c <keyScan+0x264>)
 800d826:	7e1b      	ldrb	r3, [r3, #24]
 800d828:	2b02      	cmp	r3, #2
 800d82a:	d108      	bne.n	800d83e <keyScan+0x186>
            {
                keyStruct[2].trigType = TRIG_SHORT;
 800d82c:	4b3b      	ldr	r3, [pc, #236]	@ (800d91c <keyScan+0x264>)
 800d82e:	2201      	movs	r2, #1
 800d830:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_SHORT;
 800d834:	4b39      	ldr	r3, [pc, #228]	@ (800d91c <keyScan+0x264>)
 800d836:	2201      	movs	r2, #1
 800d838:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800d83c:	e052      	b.n	800d8e4 <keyScan+0x22c>
            }
            else if (keyStruct[2].keyType == LONG_WITH_SHORT || keyStruct[2].keyType == LONG)
 800d83e:	4b37      	ldr	r3, [pc, #220]	@ (800d91c <keyScan+0x264>)
 800d840:	7e1b      	ldrb	r3, [r3, #24]
 800d842:	2b01      	cmp	r3, #1
 800d844:	d003      	beq.n	800d84e <keyScan+0x196>
 800d846:	4b35      	ldr	r3, [pc, #212]	@ (800d91c <keyScan+0x264>)
 800d848:	7e1b      	ldrb	r3, [r3, #24]
 800d84a:	2b03      	cmp	r3, #3
 800d84c:	d14a      	bne.n	800d8e4 <keyScan+0x22c>
            {
                if (++keyStruct[2].trigCnt >= KEY2_LONG_CNT)
 800d84e:	4b33      	ldr	r3, [pc, #204]	@ (800d91c <keyScan+0x264>)
 800d850:	69db      	ldr	r3, [r3, #28]
 800d852:	3301      	adds	r3, #1
 800d854:	4a31      	ldr	r2, [pc, #196]	@ (800d91c <keyScan+0x264>)
 800d856:	61d3      	str	r3, [r2, #28]
 800d858:	4b30      	ldr	r3, [pc, #192]	@ (800d91c <keyScan+0x264>)
 800d85a:	69db      	ldr	r3, [r3, #28]
 800d85c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d860:	d340      	bcc.n	800d8e4 <keyScan+0x22c>
                {
                    keyStruct[2].trigCnt = 0;
 800d862:	4b2e      	ldr	r3, [pc, #184]	@ (800d91c <keyScan+0x264>)
 800d864:	2200      	movs	r2, #0
 800d866:	61da      	str	r2, [r3, #28]
                    keyStruct[2].trigType = TRIG_LONG;
 800d868:	4b2c      	ldr	r3, [pc, #176]	@ (800d91c <keyScan+0x264>)
 800d86a:	2202      	movs	r2, #2
 800d86c:	f883 2020 	strb.w	r2, [r3, #32]
                    keyStruct[2].preKeyValue = TRIG_LONG;
 800d870:	4b2a      	ldr	r3, [pc, #168]	@ (800d91c <keyScan+0x264>)
 800d872:	2202      	movs	r2, #2
 800d874:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800d878:	e034      	b.n	800d8e4 <keyScan+0x22c>
                }
            }
        }
    }
    else if (keyStruct[2].keyType == CONTINUOUS)
 800d87a:	4b28      	ldr	r3, [pc, #160]	@ (800d91c <keyScan+0x264>)
 800d87c:	7e1b      	ldrb	r3, [r3, #24]
 800d87e:	2b02      	cmp	r3, #2
 800d880:	d130      	bne.n	800d8e4 <keyScan+0x22c>
    {
        if (keyStruct[2].preKeyValue == TRIG_SHORT) // short key
 800d882:	4b26      	ldr	r3, [pc, #152]	@ (800d91c <keyScan+0x264>)
 800d884:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d114      	bne.n	800d8b6 <keyScan+0x1fe>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_TRIG_CNT)
 800d88c:	4b23      	ldr	r3, [pc, #140]	@ (800d91c <keyScan+0x264>)
 800d88e:	69db      	ldr	r3, [r3, #28]
 800d890:	3301      	adds	r3, #1
 800d892:	4a22      	ldr	r2, [pc, #136]	@ (800d91c <keyScan+0x264>)
 800d894:	61d3      	str	r3, [r2, #28]
 800d896:	4b21      	ldr	r3, [pc, #132]	@ (800d91c <keyScan+0x264>)
 800d898:	69db      	ldr	r3, [r3, #28]
 800d89a:	2b63      	cmp	r3, #99	@ 0x63
 800d89c:	d922      	bls.n	800d8e4 <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800d89e:	4b1f      	ldr	r3, [pc, #124]	@ (800d91c <keyScan+0x264>)
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = TRIG_LONG; // long
 800d8a4:	4b1d      	ldr	r3, [pc, #116]	@ (800d91c <keyScan+0x264>)
 800d8a6:	2202      	movs	r2, #2
 800d8a8:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_LONG;
 800d8ac:	4b1b      	ldr	r3, [pc, #108]	@ (800d91c <keyScan+0x264>)
 800d8ae:	2202      	movs	r2, #2
 800d8b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800d8b4:	e016      	b.n	800d8e4 <keyScan+0x22c>
            }
        }
        else if (keyStruct[2].preKeyValue == TRIG_LONG) // long key
 800d8b6:	4b19      	ldr	r3, [pc, #100]	@ (800d91c <keyScan+0x264>)
 800d8b8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	d111      	bne.n	800d8e4 <keyScan+0x22c>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_INTEVAL)
 800d8c0:	4b16      	ldr	r3, [pc, #88]	@ (800d91c <keyScan+0x264>)
 800d8c2:	69db      	ldr	r3, [r3, #28]
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	4a15      	ldr	r2, [pc, #84]	@ (800d91c <keyScan+0x264>)
 800d8c8:	61d3      	str	r3, [r2, #28]
 800d8ca:	4b14      	ldr	r3, [pc, #80]	@ (800d91c <keyScan+0x264>)
 800d8cc:	69db      	ldr	r3, [r3, #28]
 800d8ce:	2b27      	cmp	r3, #39	@ 0x27
 800d8d0:	d908      	bls.n	800d8e4 <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800d8d2:	4b12      	ldr	r3, [pc, #72]	@ (800d91c <keyScan+0x264>)
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = keyStruct[2].preKeyValue;
 800d8d8:	4b10      	ldr	r3, [pc, #64]	@ (800d91c <keyScan+0x264>)
 800d8da:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800d8de:	4b0f      	ldr	r3, [pc, #60]	@ (800d91c <keyScan+0x264>)
 800d8e0:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }

    if (keyStruct[3].preKeyValue == NO_TRIG)
 800d8e4:	4b0d      	ldr	r3, [pc, #52]	@ (800d91c <keyScan+0x264>)
 800d8e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d137      	bne.n	800d95e <keyScan+0x2a6>
    {
        if (keyFlags == K(3))
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	2b04      	cmp	r3, #4
 800d8f2:	d16a      	bne.n	800d9ca <keyScan+0x312>
        {
            if (keyStruct[3].keyType == SHORT || keyStruct[3].keyType == CONTINUOUS)
 800d8f4:	4b09      	ldr	r3, [pc, #36]	@ (800d91c <keyScan+0x264>)
 800d8f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d004      	beq.n	800d908 <keyScan+0x250>
 800d8fe:	4b07      	ldr	r3, [pc, #28]	@ (800d91c <keyScan+0x264>)
 800d900:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d904:	2b02      	cmp	r3, #2
 800d906:	d10b      	bne.n	800d920 <keyScan+0x268>
            {
                keyStruct[3].trigType = TRIG_SHORT;
 800d908:	4b04      	ldr	r3, [pc, #16]	@ (800d91c <keyScan+0x264>)
 800d90a:	2201      	movs	r2, #1
 800d90c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_SHORT;
 800d910:	4b02      	ldr	r3, [pc, #8]	@ (800d91c <keyScan+0x264>)
 800d912:	2201      	movs	r2, #1
 800d914:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                keyStruct[3].trigCnt = 0;
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
            }
        }
    }
}
 800d918:	e057      	b.n	800d9ca <keyScan+0x312>
 800d91a:	bf00      	nop
 800d91c:	2000090c 	.word	0x2000090c
            else if (keyStruct[3].keyType == LONG_WITH_SHORT || keyStruct[3].keyType == LONG)
 800d920:	4b2c      	ldr	r3, [pc, #176]	@ (800d9d4 <keyScan+0x31c>)
 800d922:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d926:	2b01      	cmp	r3, #1
 800d928:	d004      	beq.n	800d934 <keyScan+0x27c>
 800d92a:	4b2a      	ldr	r3, [pc, #168]	@ (800d9d4 <keyScan+0x31c>)
 800d92c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d930:	2b03      	cmp	r3, #3
 800d932:	d14a      	bne.n	800d9ca <keyScan+0x312>
                if (++keyStruct[3].trigCnt >= KEY3_LONG_CNT)
 800d934:	4b27      	ldr	r3, [pc, #156]	@ (800d9d4 <keyScan+0x31c>)
 800d936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d938:	3301      	adds	r3, #1
 800d93a:	4a26      	ldr	r2, [pc, #152]	@ (800d9d4 <keyScan+0x31c>)
 800d93c:	6293      	str	r3, [r2, #40]	@ 0x28
 800d93e:	4b25      	ldr	r3, [pc, #148]	@ (800d9d4 <keyScan+0x31c>)
 800d940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d942:	2b00      	cmp	r3, #0
 800d944:	d041      	beq.n	800d9ca <keyScan+0x312>
                    keyStruct[3].trigCnt = 0;
 800d946:	4b23      	ldr	r3, [pc, #140]	@ (800d9d4 <keyScan+0x31c>)
 800d948:	2200      	movs	r2, #0
 800d94a:	629a      	str	r2, [r3, #40]	@ 0x28
                    keyStruct[3].trigType = TRIG_LONG;
 800d94c:	4b21      	ldr	r3, [pc, #132]	@ (800d9d4 <keyScan+0x31c>)
 800d94e:	2202      	movs	r2, #2
 800d950:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                    keyStruct[3].preKeyValue = TRIG_LONG;
 800d954:	4b1f      	ldr	r3, [pc, #124]	@ (800d9d4 <keyScan+0x31c>)
 800d956:	2202      	movs	r2, #2
 800d958:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800d95c:	e035      	b.n	800d9ca <keyScan+0x312>
    else if (keyStruct[3].keyType == CONTINUOUS)
 800d95e:	4b1d      	ldr	r3, [pc, #116]	@ (800d9d4 <keyScan+0x31c>)
 800d960:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d964:	2b02      	cmp	r3, #2
 800d966:	d130      	bne.n	800d9ca <keyScan+0x312>
        if (keyStruct[3].preKeyValue == TRIG_SHORT) // short key
 800d968:	4b1a      	ldr	r3, [pc, #104]	@ (800d9d4 <keyScan+0x31c>)
 800d96a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d96e:	2b01      	cmp	r3, #1
 800d970:	d114      	bne.n	800d99c <keyScan+0x2e4>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_TRIG_CNT)
 800d972:	4b18      	ldr	r3, [pc, #96]	@ (800d9d4 <keyScan+0x31c>)
 800d974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d976:	3301      	adds	r3, #1
 800d978:	4a16      	ldr	r2, [pc, #88]	@ (800d9d4 <keyScan+0x31c>)
 800d97a:	6293      	str	r3, [r2, #40]	@ 0x28
 800d97c:	4b15      	ldr	r3, [pc, #84]	@ (800d9d4 <keyScan+0x31c>)
 800d97e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d980:	2b63      	cmp	r3, #99	@ 0x63
 800d982:	d922      	bls.n	800d9ca <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800d984:	4b13      	ldr	r3, [pc, #76]	@ (800d9d4 <keyScan+0x31c>)
 800d986:	2200      	movs	r2, #0
 800d988:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = TRIG_LONG; // long
 800d98a:	4b12      	ldr	r3, [pc, #72]	@ (800d9d4 <keyScan+0x31c>)
 800d98c:	2202      	movs	r2, #2
 800d98e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_LONG;
 800d992:	4b10      	ldr	r3, [pc, #64]	@ (800d9d4 <keyScan+0x31c>)
 800d994:	2202      	movs	r2, #2
 800d996:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800d99a:	e016      	b.n	800d9ca <keyScan+0x312>
        else if (keyStruct[3].preKeyValue == TRIG_LONG) // long key
 800d99c:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d4 <keyScan+0x31c>)
 800d99e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d9a2:	2b02      	cmp	r3, #2
 800d9a4:	d111      	bne.n	800d9ca <keyScan+0x312>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_INTEVAL)
 800d9a6:	4b0b      	ldr	r3, [pc, #44]	@ (800d9d4 <keyScan+0x31c>)
 800d9a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	4a09      	ldr	r2, [pc, #36]	@ (800d9d4 <keyScan+0x31c>)
 800d9ae:	6293      	str	r3, [r2, #40]	@ 0x28
 800d9b0:	4b08      	ldr	r3, [pc, #32]	@ (800d9d4 <keyScan+0x31c>)
 800d9b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9b4:	2b27      	cmp	r3, #39	@ 0x27
 800d9b6:	d908      	bls.n	800d9ca <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800d9b8:	4b06      	ldr	r3, [pc, #24]	@ (800d9d4 <keyScan+0x31c>)
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
 800d9be:	4b05      	ldr	r3, [pc, #20]	@ (800d9d4 <keyScan+0x31c>)
 800d9c0:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800d9c4:	4b03      	ldr	r3, [pc, #12]	@ (800d9d4 <keyScan+0x31c>)
 800d9c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800d9ca:	bf00      	nop
 800d9cc:	3708      	adds	r7, #8
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	2000090c 	.word	0x2000090c

0800d9d8 <getKeyState>:

/*
将物理按键转化为逻辑按键
 */
void getKeyState(KeyState *keyState)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
    uchar i;

    if (keyStruct[1].trigType == TRIG_SHORT)
 800d9e0:	4b1b      	ldr	r3, [pc, #108]	@ (800da50 <getKeyState+0x78>)
 800d9e2:	7d1b      	ldrb	r3, [r3, #20]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d103      	bne.n	800d9f0 <getKeyState+0x18>
        *keyState = USER1_SHORT;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	701a      	strb	r2, [r3, #0]
 800d9ee:	e014      	b.n	800da1a <getKeyState+0x42>
    else if (keyStruct[2].trigType == TRIG_SHORT)
 800d9f0:	4b17      	ldr	r3, [pc, #92]	@ (800da50 <getKeyState+0x78>)
 800d9f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	d103      	bne.n	800da02 <getKeyState+0x2a>
        *keyState = USER2_SHORT;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2202      	movs	r2, #2
 800d9fe:	701a      	strb	r2, [r3, #0]
 800da00:	e00b      	b.n	800da1a <getKeyState+0x42>
    else if (keyStruct[3].trigType == TRIG_SHORT)
 800da02:	4b13      	ldr	r3, [pc, #76]	@ (800da50 <getKeyState+0x78>)
 800da04:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d103      	bne.n	800da14 <getKeyState+0x3c>
        *keyState = USER3_SHORT;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2203      	movs	r2, #3
 800da10:	701a      	strb	r2, [r3, #0]
 800da12:	e002      	b.n	800da1a <getKeyState+0x42>
    else
        *keyState = NONE_KEY;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2200      	movs	r2, #0
 800da18:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < KEY_NUM; i++)
 800da1a:	2300      	movs	r3, #0
 800da1c:	73fb      	strb	r3, [r7, #15]
 800da1e:	e00c      	b.n	800da3a <getKeyState+0x62>
    {
        keyStruct[i].trigType = NO_TRIG;
 800da20:	7bfa      	ldrb	r2, [r7, #15]
 800da22:	490b      	ldr	r1, [pc, #44]	@ (800da50 <getKeyState+0x78>)
 800da24:	4613      	mov	r3, r2
 800da26:	005b      	lsls	r3, r3, #1
 800da28:	4413      	add	r3, r2
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	440b      	add	r3, r1
 800da2e:	3308      	adds	r3, #8
 800da30:	2200      	movs	r2, #0
 800da32:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < KEY_NUM; i++)
 800da34:	7bfb      	ldrb	r3, [r7, #15]
 800da36:	3301      	adds	r3, #1
 800da38:	73fb      	strb	r3, [r7, #15]
 800da3a:	7bfb      	ldrb	r3, [r7, #15]
 800da3c:	2b03      	cmp	r3, #3
 800da3e:	d9ef      	bls.n	800da20 <getKeyState+0x48>
    }
}
 800da40:	bf00      	nop
 800da42:	bf00      	nop
 800da44:	3714      	adds	r7, #20
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr
 800da4e:	bf00      	nop
 800da50:	2000090c 	.word	0x2000090c

0800da54 <LED_drive>:
#include "led.h"

bool led1On, led2On;

void LED_drive()
{
 800da54:	b580      	push	{r7, lr}
 800da56:	af00      	add	r7, sp, #0
    if (led1On)
 800da58:	4b0f      	ldr	r3, [pc, #60]	@ (800da98 <LED_drive+0x44>)
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d005      	beq.n	800da6c <LED_drive+0x18>
        LED1_ON;
 800da60:	2200      	movs	r2, #0
 800da62:	2140      	movs	r1, #64	@ 0x40
 800da64:	480d      	ldr	r0, [pc, #52]	@ (800da9c <LED_drive+0x48>)
 800da66:	f7f8 feeb 	bl	8006840 <HAL_GPIO_WritePin>
 800da6a:	e004      	b.n	800da76 <LED_drive+0x22>
    else
        LED1_OFF;
 800da6c:	2201      	movs	r2, #1
 800da6e:	2140      	movs	r1, #64	@ 0x40
 800da70:	480a      	ldr	r0, [pc, #40]	@ (800da9c <LED_drive+0x48>)
 800da72:	f7f8 fee5 	bl	8006840 <HAL_GPIO_WritePin>

    if (led2On)
 800da76:	4b0a      	ldr	r3, [pc, #40]	@ (800daa0 <LED_drive+0x4c>)
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d005      	beq.n	800da8a <LED_drive+0x36>
        LED2_ON;
 800da7e:	2200      	movs	r2, #0
 800da80:	2110      	movs	r1, #16
 800da82:	4806      	ldr	r0, [pc, #24]	@ (800da9c <LED_drive+0x48>)
 800da84:	f7f8 fedc 	bl	8006840 <HAL_GPIO_WritePin>
    else
        LED2_OFF;
}
 800da88:	e004      	b.n	800da94 <LED_drive+0x40>
        LED2_OFF;
 800da8a:	2201      	movs	r2, #1
 800da8c:	2110      	movs	r1, #16
 800da8e:	4803      	ldr	r0, [pc, #12]	@ (800da9c <LED_drive+0x48>)
 800da90:	f7f8 fed6 	bl	8006840 <HAL_GPIO_WritePin>
}
 800da94:	bf00      	nop
 800da96:	bd80      	pop	{r7, pc}
 800da98:	20000948 	.word	0x20000948
 800da9c:	48000800 	.word	0x48000800
 800daa0:	20000949 	.word	0x20000949

0800daa4 <MT6701_GetRawData>:
#include "math_utils.h"
#include "time_utils.h"
// static unsigned int rotationCount, rotationCount_Last;

uint16_t MT6701_GetRawData(void)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800daaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800daae:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800dab0:	23c8      	movs	r3, #200	@ 0xc8
 800dab2:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 800dab4:	e006      	b.n	800dac4 <MT6701_GetRawData+0x20>
    {
        if (timeOut-- == 0)
 800dab6:	88fb      	ldrh	r3, [r7, #6]
 800dab8:	1e5a      	subs	r2, r3, #1
 800daba:	80fa      	strh	r2, [r7, #6]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d101      	bne.n	800dac4 <MT6701_GetRawData+0x20>
        {
            //   FOC_log("SPI state error!\r\n");
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800dac0:	2300      	movs	r3, #0
 800dac2:	e025      	b.n	800db10 <MT6701_GetRawData+0x6c>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 800dac4:	4814      	ldr	r0, [pc, #80]	@ (800db18 <MT6701_GetRawData+0x74>)
 800dac6:	f7fa fa74 	bl	8007fb2 <HAL_SPI_GetState>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d1f2      	bne.n	800dab6 <MT6701_GetRawData+0x12>
        }
    }

    MT6701_CS_Enable;
 800dad0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dad4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800dad8:	619a      	str	r2, [r3, #24]

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800dada:	1cba      	adds	r2, r7, #2
 800dadc:	4639      	mov	r1, r7
 800dade:	f04f 33ff 	mov.w	r3, #4294967295
 800dae2:	9300      	str	r3, [sp, #0]
 800dae4:	2301      	movs	r3, #1
 800dae6:	480c      	ldr	r0, [pc, #48]	@ (800db18 <MT6701_GetRawData+0x74>)
 800dae8:	f7fa f841 	bl	8007b6e <HAL_SPI_TransmitReceive>
 800daec:	4603      	mov	r3, r0
 800daee:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800daf0:	797b      	ldrb	r3, [r7, #5]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d005      	beq.n	800db02 <MT6701_GetRawData+0x5e>
    {
        MT6701_CS_Disable;
 800daf6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dafa:	2210      	movs	r2, #16
 800dafc:	619a      	str	r2, [r3, #24]
        //  FOC_log("MT6701 read data error!\r\n");
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800dafe:	2300      	movs	r3, #0
 800db00:	e006      	b.n	800db10 <MT6701_GetRawData+0x6c>
    }

    MT6701_CS_Disable;
 800db02:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800db06:	2210      	movs	r2, #16
 800db08:	619a      	str	r2, [r3, #24]

    return rawData >> 2; // 取高14位的角度数据
 800db0a:	887b      	ldrh	r3, [r7, #2]
 800db0c:	089b      	lsrs	r3, r3, #2
 800db0e:	b29b      	uxth	r3, r3
}
 800db10:	4618      	mov	r0, r3
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	200004a0 	.word	0x200004a0

0800db1c <MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float MT6701_GetRawAngle(void)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
    uint16_t rawData = MT6701_GetRawData();
 800db22:	f7ff ffbf 	bl	800daa4 <MT6701_GetRawData>
 800db26:	4603      	mov	r3, r0
 800db28:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800db2a:	88fb      	ldrh	r3, [r7, #6]
 800db2c:	ee07 3a90 	vmov	s15, r3
 800db30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800db34:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800db50 <MT6701_GetRawAngle+0x34>
 800db38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800db3c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800db54 <MT6701_GetRawAngle+0x38>
 800db40:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800db44:	eeb0 0a67 	vmov.f32	s0, s15
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	46800000 	.word	0x46800000
 800db54:	40c90fdb 	.word	0x40c90fdb

0800db58 <MyI2C_W_SCL>:
  * 参    数：BitValue 协议层传入的当前需要写入SCL的电平，范围0~1
  * 返 回 值：无
  * 注意事项：此函数需要用户实现内容，当BitValue为0时，需要置SCL为低电平，当BitValue为1时，需要置SCL为高电平
  */
void MyI2C_W_SCL(uint8_t BitValue)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	4603      	mov	r3, r0
 800db60:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, (GPIO_PinState)BitValue);		//根据BitValue，设置SCL引脚的电平
 800db62:	79fb      	ldrb	r3, [r7, #7]
 800db64:	461a      	mov	r2, r3
 800db66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800db6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800db6e:	f7f8 fe67 	bl	8006840 <HAL_GPIO_WritePin>
	delayMicroSeconds(10);												//延时10us，防止时序频率超过要求
 800db72:	200a      	movs	r0, #10
 800db74:	f000 f8f2 	bl	800dd5c <delayMicroSeconds>
}
 800db78:	bf00      	nop
 800db7a:	3708      	adds	r7, #8
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <MyI2C_W_SDA>:
  * 参    数：BitValue 协议层传入的当前需要写入SDA的电平，范围0~0xFF
  * 返 回 值：无
  * 注意事项：此函数需要用户实现内容，当BitValue为0时，需要置SDA为低电平，当BitValue非0时，需要置SDA为高电平
  */
void MyI2C_W_SDA(uint8_t BitValue)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	4603      	mov	r3, r0
 800db88:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, (GPIO_PinState)BitValue);		//根据BitValue，设置SDA引脚的电平，BitValue要实现非0即1的特性
 800db8a:	79fb      	ldrb	r3, [r7, #7]
 800db8c:	461a      	mov	r2, r3
 800db8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800db92:	4805      	ldr	r0, [pc, #20]	@ (800dba8 <MyI2C_W_SDA+0x28>)
 800db94:	f7f8 fe54 	bl	8006840 <HAL_GPIO_WritePin>
	delayMicroSeconds(10);												//延时10us，防止时序频率超过要求
 800db98:	200a      	movs	r0, #10
 800db9a:	f000 f8df 	bl	800dd5c <delayMicroSeconds>
}
 800db9e:	bf00      	nop
 800dba0:	3708      	adds	r7, #8
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	48000400 	.word	0x48000400

0800dbac <MyI2C_R_SDA>:
  * 参    数：无
  * 返 回 值：协议层需要得到的当前SDA的电平，范围0~1
  * 注意事项：此函数需要用户实现内容，当前SDA为低电平时，返回0，当前SDA为高电平时，返回1
  */
GPIO_PinState MyI2C_R_SDA(void)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
	GPIO_PinState BitValue;
	BitValue = HAL_GPIO_ReadPin(SDA_PORT, SDA_PIN);		//读取SDA电平
 800dbb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800dbb6:	4806      	ldr	r0, [pc, #24]	@ (800dbd0 <MyI2C_R_SDA+0x24>)
 800dbb8:	f7f8 fe2a 	bl	8006810 <HAL_GPIO_ReadPin>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	71fb      	strb	r3, [r7, #7]
	delayMicroSeconds(10);												//延时10us，防止时序频率超过要求
 800dbc0:	200a      	movs	r0, #10
 800dbc2:	f000 f8cb 	bl	800dd5c <delayMicroSeconds>
	return BitValue;											//返回SDA电平
 800dbc6:	79fb      	ldrb	r3, [r7, #7]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3708      	adds	r7, #8
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	48000400 	.word	0x48000400

0800dbd4 <MyI2C_Start>:
  * 函    数：I2C起始
  * 参    数：无
  * 返 回 值：无
  */
void MyI2C_Start(void)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	af00      	add	r7, sp, #0
	MyI2C_W_SDA(1);							//释放SDA，确保SDA为高电平
 800dbd8:	2001      	movs	r0, #1
 800dbda:	f7ff ffd1 	bl	800db80 <MyI2C_W_SDA>
	MyI2C_W_SCL(1);							//释放SCL，确保SCL为高电平
 800dbde:	2001      	movs	r0, #1
 800dbe0:	f7ff ffba 	bl	800db58 <MyI2C_W_SCL>
	MyI2C_W_SDA(0);							//在SCL高电平期间，拉低SDA，产生起始信号
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	f7ff ffcb 	bl	800db80 <MyI2C_W_SDA>
	MyI2C_W_SCL(0);							//起始后把SCL也拉低，即为了占用总线，也为了方便总线时序的拼接
 800dbea:	2000      	movs	r0, #0
 800dbec:	f7ff ffb4 	bl	800db58 <MyI2C_W_SCL>
}
 800dbf0:	bf00      	nop
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <MyI2C_Stop>:
  * 函    数：I2C终止
  * 参    数：无
  * 返 回 值：无
  */
void MyI2C_Stop(void)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	af00      	add	r7, sp, #0
	MyI2C_W_SDA(0);							//拉低SDA，确保SDA为低电平
 800dbf8:	2000      	movs	r0, #0
 800dbfa:	f7ff ffc1 	bl	800db80 <MyI2C_W_SDA>
	MyI2C_W_SCL(1);							//释放SCL，使SCL呈现高电平
 800dbfe:	2001      	movs	r0, #1
 800dc00:	f7ff ffaa 	bl	800db58 <MyI2C_W_SCL>
	MyI2C_W_SDA(1);							//在SCL高电平期间，释放SDA，产生终止信号
 800dc04:	2001      	movs	r0, #1
 800dc06:	f7ff ffbb 	bl	800db80 <MyI2C_W_SDA>
}
 800dc0a:	bf00      	nop
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <MyI2C_SendByte>:
  * 函    数：I2C发送一个字节
  * 参    数：Byte 要发送的一个字节数据，范围：0x00~0xFF
  * 返 回 值：无
  */
void MyI2C_SendByte(uint8_t Byte)
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b084      	sub	sp, #16
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	4603      	mov	r3, r0
 800dc16:	71fb      	strb	r3, [r7, #7]
	//起始条件后，SCL一定是低电平
	uint8_t i;
	for (i = 0; i < 8; i ++)				//循环8次，主机依次发送数据的每一位
 800dc18:	2300      	movs	r3, #0
 800dc1a:	73fb      	strb	r3, [r7, #15]
 800dc1c:	e015      	b.n	800dc4a <MyI2C_SendByte+0x3c>
	{
		MyI2C_W_SDA(Byte & (0x80 >> i));	//使用掩码的方式取出Byte的指定一位数据并写入到SDA线
 800dc1e:	7bfb      	ldrb	r3, [r7, #15]
 800dc20:	2280      	movs	r2, #128	@ 0x80
 800dc22:	fa42 f303 	asr.w	r3, r2, r3
 800dc26:	b25a      	sxtb	r2, r3
 800dc28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc2c:	4013      	ands	r3, r2
 800dc2e:	b25b      	sxtb	r3, r3
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7ff ffa4 	bl	800db80 <MyI2C_W_SDA>
		MyI2C_W_SCL(1);						//释放SCL，从机在SCL高电平期间读取SDA
 800dc38:	2001      	movs	r0, #1
 800dc3a:	f7ff ff8d 	bl	800db58 <MyI2C_W_SCL>
		MyI2C_W_SCL(0);						//拉低SCL，主机开始发送下一位数据
 800dc3e:	2000      	movs	r0, #0
 800dc40:	f7ff ff8a 	bl	800db58 <MyI2C_W_SCL>
	for (i = 0; i < 8; i ++)				//循环8次，主机依次发送数据的每一位
 800dc44:	7bfb      	ldrb	r3, [r7, #15]
 800dc46:	3301      	adds	r3, #1
 800dc48:	73fb      	strb	r3, [r7, #15]
 800dc4a:	7bfb      	ldrb	r3, [r7, #15]
 800dc4c:	2b07      	cmp	r3, #7
 800dc4e:	d9e6      	bls.n	800dc1e <MyI2C_SendByte+0x10>
	}
}
 800dc50:	bf00      	nop
 800dc52:	bf00      	nop
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <MyI2C_ReceiveByte>:
  * 函    数：I2C接收一个字节
  * 参    数：无
  * 返 回 值：接收到的一个字节数据，范围：0x00~0xFF
  */
GPIO_PinState MyI2C_ReceiveByte(void)
{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b082      	sub	sp, #8
 800dc5e:	af00      	add	r7, sp, #0
	uint8_t i;
	GPIO_PinState Byte = (GPIO_PinState)0x00;					//定义接收的数据，并赋初值0x00，此处必须赋初值0x00，后面会用到
 800dc60:	2300      	movs	r3, #0
 800dc62:	71bb      	strb	r3, [r7, #6]
	MyI2C_W_SDA(1);							//接收前，主机先确保释放SDA，避免干扰从机的数据发送
 800dc64:	2001      	movs	r0, #1
 800dc66:	f7ff ff8b 	bl	800db80 <MyI2C_W_SDA>
	for (i = 0; i < 8; i ++)				//循环8次，主机依次接收数据的每一位
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	71fb      	strb	r3, [r7, #7]
 800dc6e:	e017      	b.n	800dca0 <MyI2C_ReceiveByte+0x46>
	{
		MyI2C_W_SCL(1);						//释放SCL，主机机在SCL高电平期间读取SDA
 800dc70:	2001      	movs	r0, #1
 800dc72:	f7ff ff71 	bl	800db58 <MyI2C_W_SCL>
		if (MyI2C_R_SDA() == 1){Byte |= (0x80 >> i);}	//读取SDA数据，并存储到Byte变量
 800dc76:	f7ff ff99 	bl	800dbac <MyI2C_R_SDA>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d109      	bne.n	800dc94 <MyI2C_ReceiveByte+0x3a>
 800dc80:	79fb      	ldrb	r3, [r7, #7]
 800dc82:	2280      	movs	r2, #128	@ 0x80
 800dc84:	fa42 f303 	asr.w	r3, r2, r3
 800dc88:	b25a      	sxtb	r2, r3
 800dc8a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	b25b      	sxtb	r3, r3
 800dc92:	71bb      	strb	r3, [r7, #6]
														//当SDA为1时，置变量指定位为1，当SDA为0时，不做处理，指定位为默认的初值0
		MyI2C_W_SCL(0);						//拉低SCL，从机在SCL低电平期间写入SDA
 800dc94:	2000      	movs	r0, #0
 800dc96:	f7ff ff5f 	bl	800db58 <MyI2C_W_SCL>
	for (i = 0; i < 8; i ++)				//循环8次，主机依次接收数据的每一位
 800dc9a:	79fb      	ldrb	r3, [r7, #7]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	71fb      	strb	r3, [r7, #7]
 800dca0:	79fb      	ldrb	r3, [r7, #7]
 800dca2:	2b07      	cmp	r3, #7
 800dca4:	d9e4      	bls.n	800dc70 <MyI2C_ReceiveByte+0x16>
	}
	return Byte;							//返回接收到的一个字节数据
 800dca6:	79bb      	ldrb	r3, [r7, #6]
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3708      	adds	r7, #8
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <MyI2C_SendAck>:
  * 函    数：I2C发送应答位
  * 参    数：Byte 要发送的应答位，范围：0~1，0表示应答，1表示非应答
  * 返 回 值：无
  */
void MyI2C_SendAck(uint8_t AckBit)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	71fb      	strb	r3, [r7, #7]
	MyI2C_W_SDA(AckBit);					//主机把应答位数据放到SDA线
 800dcba:	79fb      	ldrb	r3, [r7, #7]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7ff ff5f 	bl	800db80 <MyI2C_W_SDA>
	MyI2C_W_SCL(1);							//释放SCL，从机在SCL高电平期间，读取应答位
 800dcc2:	2001      	movs	r0, #1
 800dcc4:	f7ff ff48 	bl	800db58 <MyI2C_W_SCL>
	MyI2C_W_SCL(0);							//拉低SCL，开始下一个时序模块
 800dcc8:	2000      	movs	r0, #0
 800dcca:	f7ff ff45 	bl	800db58 <MyI2C_W_SCL>
}
 800dcce:	bf00      	nop
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <MyI2C_ReceiveAck>:
  * 函    数：I2C接收应答位
  * 参    数：无
  * 返 回 值：接收到的应答位，范围：0~1，0表示应答，1表示非应答
  */
GPIO_PinState MyI2C_ReceiveAck(void)
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b082      	sub	sp, #8
 800dcda:	af00      	add	r7, sp, #0
	GPIO_PinState AckBit;							//定义应答位变量
	MyI2C_W_SDA(1);							//接收前，主机先确保释放SDA，避免干扰从机的数据发送
 800dcdc:	2001      	movs	r0, #1
 800dcde:	f7ff ff4f 	bl	800db80 <MyI2C_W_SDA>
	MyI2C_W_SCL(1);							//释放SCL，主机机在SCL高电平期间读取SDA
 800dce2:	2001      	movs	r0, #1
 800dce4:	f7ff ff38 	bl	800db58 <MyI2C_W_SCL>
	AckBit = MyI2C_R_SDA();					//将应答位存储到变量里
 800dce8:	f7ff ff60 	bl	800dbac <MyI2C_R_SDA>
 800dcec:	4603      	mov	r3, r0
 800dcee:	71fb      	strb	r3, [r7, #7]
	MyI2C_W_SCL(0);							//拉低SCL，开始下一个时序模块
 800dcf0:	2000      	movs	r0, #0
 800dcf2:	f7ff ff31 	bl	800db58 <MyI2C_W_SCL>
	return AckBit;							//返回定义应答位变量
 800dcf6:	79fb      	ldrb	r3, [r7, #7]
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3708      	adds	r7, #8
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <delay>:
#include "time_utils.h"

__IO uint32_t m, tms, u, t0;

void delay(uint32_t _ms)
{
 800dd00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd04:	b082      	sub	sp, #8
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800dd0a:	f000 f853 	bl	800ddb4 <micros>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	460b      	mov	r3, r1
 800dd12:	4b11      	ldr	r3, [pc, #68]	@ (800dd58 <delay+0x58>)
 800dd14:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800dd16:	e000      	b.n	800dd1a <delay+0x1a>
        __NOP();
 800dd18:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800dd1a:	f000 f84b 	bl	800ddb4 <micros>
 800dd1e:	4602      	mov	r2, r0
 800dd20:	460b      	mov	r3, r1
 800dd22:	490d      	ldr	r1, [pc, #52]	@ (800dd58 <delay+0x58>)
 800dd24:	6809      	ldr	r1, [r1, #0]
 800dd26:	2000      	movs	r0, #0
 800dd28:	468a      	mov	sl, r1
 800dd2a:	4683      	mov	fp, r0
 800dd2c:	ebb2 040a 	subs.w	r4, r2, sl
 800dd30:	eb63 050b 	sbc.w	r5, r3, fp
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dd3a:	fb02 f303 	mul.w	r3, r2, r3
 800dd3e:	2200      	movs	r2, #0
 800dd40:	4698      	mov	r8, r3
 800dd42:	4691      	mov	r9, r2
 800dd44:	4544      	cmp	r4, r8
 800dd46:	eb75 0309 	sbcs.w	r3, r5, r9
 800dd4a:	d3e5      	bcc.n	800dd18 <delay+0x18>
}
 800dd4c:	bf00      	nop
 800dd4e:	bf00      	nop
 800dd50:	3708      	adds	r7, #8
 800dd52:	46bd      	mov	sp, r7
 800dd54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd58:	20000958 	.word	0x20000958

0800dd5c <delayMicroSeconds>:

void delayMicroSeconds(uint32_t _us)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b083      	sub	sp, #12
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
    _us *= 28; // Need to be tuned for different CPU
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	4613      	mov	r3, r2
 800dd68:	00db      	lsls	r3, r3, #3
 800dd6a:	1a9b      	subs	r3, r3, r2
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	607b      	str	r3, [r7, #4]
    while (_us--)
 800dd70:	e000      	b.n	800dd74 <delayMicroSeconds+0x18>
        __NOP();
 800dd72:	bf00      	nop
    while (_us--)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	1e5a      	subs	r2, r3, #1
 800dd78:	607a      	str	r2, [r7, #4]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d1f9      	bne.n	800dd72 <delayMicroSeconds+0x16>
}
 800dd7e:	bf00      	nop
 800dd80:	bf00      	nop
 800dd82:	370c      	adds	r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr

0800dd8c <LL_SYSTICK_IsActiveCounterFlag>:

__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag()
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800dd90:	4b07      	ldr	r3, [pc, #28]	@ (800ddb0 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dd98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd9c:	bf0c      	ite	eq
 800dd9e:	2301      	moveq	r3, #1
 800dda0:	2300      	movne	r3, #0
 800dda2:	b2db      	uxtb	r3, r3
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	e000e010 	.word	0xe000e010

0800ddb4 <micros>:

uint64_t micros()
{
 800ddb4:	b5b0      	push	{r4, r5, r7, lr}
 800ddb6:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800ddb8:	f7ff ffe8 	bl	800dd8c <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800ddbc:	f7f4 fce4 	bl	8002788 <HAL_GetTick>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	4a1c      	ldr	r2, [pc, #112]	@ (800de34 <micros+0x80>)
 800ddc4:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800ddc6:	4b1c      	ldr	r3, [pc, #112]	@ (800de38 <micros+0x84>)
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	3301      	adds	r3, #1
 800ddcc:	4a1b      	ldr	r2, [pc, #108]	@ (800de3c <micros+0x88>)
 800ddce:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800ddd0:	4b1a      	ldr	r3, [pc, #104]	@ (800de3c <micros+0x88>)
 800ddd2:	681a      	ldr	r2, [r3, #0]
 800ddd4:	4b18      	ldr	r3, [pc, #96]	@ (800de38 <micros+0x84>)
 800ddd6:	689b      	ldr	r3, [r3, #8]
 800ddd8:	1ad3      	subs	r3, r2, r3
 800ddda:	4a19      	ldr	r2, [pc, #100]	@ (800de40 <micros+0x8c>)
 800dddc:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800ddde:	f7ff ffd5 	bl	800dd8c <LL_SYSTICK_IsActiveCounterFlag>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d00b      	beq.n	800de00 <micros+0x4c>
    {
        m = HAL_GetTick();
 800dde8:	f7f4 fcce 	bl	8002788 <HAL_GetTick>
 800ddec:	4603      	mov	r3, r0
 800ddee:	4a11      	ldr	r2, [pc, #68]	@ (800de34 <micros+0x80>)
 800ddf0:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800ddf2:	4b12      	ldr	r3, [pc, #72]	@ (800de3c <micros+0x88>)
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	4b10      	ldr	r3, [pc, #64]	@ (800de38 <micros+0x84>)
 800ddf8:	689b      	ldr	r3, [r3, #8]
 800ddfa:	1ad3      	subs	r3, r2, r3
 800ddfc:	4a10      	ldr	r2, [pc, #64]	@ (800de40 <micros+0x8c>)
 800ddfe:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800de00:	4b0c      	ldr	r3, [pc, #48]	@ (800de34 <micros+0x80>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800de08:	fb03 f202 	mul.w	r2, r3, r2
 800de0c:	4b0c      	ldr	r3, [pc, #48]	@ (800de40 <micros+0x8c>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800de14:	fb03 f101 	mul.w	r1, r3, r1
 800de18:	4b08      	ldr	r3, [pc, #32]	@ (800de3c <micros+0x88>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	fbb1 f3f3 	udiv	r3, r1, r3
 800de20:	4413      	add	r3, r2
 800de22:	2200      	movs	r2, #0
 800de24:	461c      	mov	r4, r3
 800de26:	4615      	mov	r5, r2
 800de28:	4622      	mov	r2, r4
 800de2a:	462b      	mov	r3, r5
}
 800de2c:	4610      	mov	r0, r2
 800de2e:	4619      	mov	r1, r3
 800de30:	bdb0      	pop	{r4, r5, r7, pc}
 800de32:	bf00      	nop
 800de34:	2000094c 	.word	0x2000094c
 800de38:	e000e010 	.word	0xe000e010
 800de3c:	20000950 	.word	0x20000950
 800de40:	20000954 	.word	0x20000954

0800de44 <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
//static bool powerLost;
void userMain(void)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	af00      	add	r7, sp, #0

	if (get5MsFlag())
 800de48:	f000 f91e 	bl	800e088 <get5MsFlag>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d001      	beq.n	800de56 <userMain+0x12>
	{
		keyScan();
 800de52:	f7ff fc31 	bl	800d6b8 <keyScan>
	}

	if (get100MsFlag())
 800de56:	f000 f92b 	bl	800e0b0 <get100MsFlag>
 800de5a:	4603      	mov	r3, r0
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d001      	beq.n	800de64 <userMain+0x20>
	{
		appRunning();
 800de60:	f7ff f974 	bl	800d14c <appRunning>
	}
#if SHOW_WAVE == 0 //&& COMMAMNDER == 0
	// if (get500MsFlag())
	if (getOneSecFlag())
 800de64:	f000 f8fc 	bl	800e060 <getOneSecFlag>
 800de68:	4603      	mov	r3, r0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d001      	beq.n	800de72 <userMain+0x2e>
	{
		printLog();
 800de6e:	f7ff fb45 	bl	800d4fc <printLog>
	}
#endif
}
 800de72:	bf00      	nop
 800de74:	bd80      	pop	{r7, pc}

0800de76 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 800de76:	b480      	push	{r7}
 800de78:	b087      	sub	sp, #28
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	ed87 0a05 	vstr	s0, [r7, #20]
 800de80:	edc7 0a04 	vstr	s1, [r7, #16]
 800de84:	ed87 1a03 	vstr	s2, [r7, #12]
 800de88:	edc7 1a02 	vstr	s3, [r7, #8]
 800de8c:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800de90:	ed97 7a05 	vldr	s14, [r7, #20]
 800de94:	edd7 7a04 	vldr	s15, [r7, #16]
 800de98:	ee37 7a67 	vsub.f32	s14, s14, s15
 800de9c:	edd7 6a01 	vldr	s13, [r7, #4]
 800dea0:	edd7 7a02 	vldr	s15, [r7, #8]
 800dea4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800dea8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800deac:	ed97 7a03 	vldr	s14, [r7, #12]
 800deb0:	edd7 7a04 	vldr	s15, [r7, #16]
 800deb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800deb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800debc:	edd7 7a02 	vldr	s15, [r7, #8]
 800dec0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800dec4:	eeb0 0a67 	vmov.f32	s0, s15
 800dec8:	371c      	adds	r7, #28
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr
	...

0800ded4 <dealPer100us>:


static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag, _1s;
static void dealPerMs();
void dealPer100us()
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800ded8:	4b08      	ldr	r3, [pc, #32]	@ (800defc <dealPer100us+0x28>)
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	3301      	adds	r3, #1
 800dede:	b2da      	uxtb	r2, r3
 800dee0:	4b06      	ldr	r3, [pc, #24]	@ (800defc <dealPer100us+0x28>)
 800dee2:	701a      	strb	r2, [r3, #0]
 800dee4:	4b05      	ldr	r3, [pc, #20]	@ (800defc <dealPer100us+0x28>)
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	2b09      	cmp	r3, #9
 800deea:	d904      	bls.n	800def6 <dealPer100us+0x22>
    {
        cnt = 0;
 800deec:	4b03      	ldr	r3, [pc, #12]	@ (800defc <dealPer100us+0x28>)
 800deee:	2200      	movs	r2, #0
 800def0:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800def2:	f000 f805 	bl	800df00 <dealPerMs>
    }

}
 800def6:	bf00      	nop
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	2000096b 	.word	0x2000096b

0800df00 <dealPerMs>:

static void dealPerMs()
{
 800df00:	b480      	push	{r7}
 800df02:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt, _1000msCnt;
    if (++_5msCnt >= 5)
 800df04:	4b45      	ldr	r3, [pc, #276]	@ (800e01c <dealPerMs+0x11c>)
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	3301      	adds	r3, #1
 800df0a:	b2da      	uxtb	r2, r3
 800df0c:	4b43      	ldr	r3, [pc, #268]	@ (800e01c <dealPerMs+0x11c>)
 800df0e:	701a      	strb	r2, [r3, #0]
 800df10:	4b42      	ldr	r3, [pc, #264]	@ (800e01c <dealPerMs+0x11c>)
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	2b04      	cmp	r3, #4
 800df16:	d905      	bls.n	800df24 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800df18:	4b40      	ldr	r3, [pc, #256]	@ (800e01c <dealPerMs+0x11c>)
 800df1a:	2200      	movs	r2, #0
 800df1c:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800df1e:	4b40      	ldr	r3, [pc, #256]	@ (800e020 <dealPerMs+0x120>)
 800df20:	2201      	movs	r2, #1
 800df22:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800df24:	4b3f      	ldr	r3, [pc, #252]	@ (800e024 <dealPerMs+0x124>)
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	3301      	adds	r3, #1
 800df2a:	b2da      	uxtb	r2, r3
 800df2c:	4b3d      	ldr	r3, [pc, #244]	@ (800e024 <dealPerMs+0x124>)
 800df2e:	701a      	strb	r2, [r3, #0]
 800df30:	4b3c      	ldr	r3, [pc, #240]	@ (800e024 <dealPerMs+0x124>)
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	2b09      	cmp	r3, #9
 800df36:	d905      	bls.n	800df44 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800df38:	4b3a      	ldr	r3, [pc, #232]	@ (800e024 <dealPerMs+0x124>)
 800df3a:	2200      	movs	r2, #0
 800df3c:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800df3e:	4b3a      	ldr	r3, [pc, #232]	@ (800e028 <dealPerMs+0x128>)
 800df40:	2201      	movs	r2, #1
 800df42:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800df44:	4b39      	ldr	r3, [pc, #228]	@ (800e02c <dealPerMs+0x12c>)
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	3301      	adds	r3, #1
 800df4a:	b2da      	uxtb	r2, r3
 800df4c:	4b37      	ldr	r3, [pc, #220]	@ (800e02c <dealPerMs+0x12c>)
 800df4e:	701a      	strb	r2, [r3, #0]
 800df50:	4b36      	ldr	r3, [pc, #216]	@ (800e02c <dealPerMs+0x12c>)
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	2b13      	cmp	r3, #19
 800df56:	d905      	bls.n	800df64 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800df58:	4b34      	ldr	r3, [pc, #208]	@ (800e02c <dealPerMs+0x12c>)
 800df5a:	2200      	movs	r2, #0
 800df5c:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800df5e:	4b34      	ldr	r3, [pc, #208]	@ (800e030 <dealPerMs+0x130>)
 800df60:	2201      	movs	r2, #1
 800df62:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800df64:	4b33      	ldr	r3, [pc, #204]	@ (800e034 <dealPerMs+0x134>)
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	3301      	adds	r3, #1
 800df6a:	b2da      	uxtb	r2, r3
 800df6c:	4b31      	ldr	r3, [pc, #196]	@ (800e034 <dealPerMs+0x134>)
 800df6e:	701a      	strb	r2, [r3, #0]
 800df70:	4b30      	ldr	r3, [pc, #192]	@ (800e034 <dealPerMs+0x134>)
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	2b1d      	cmp	r3, #29
 800df76:	d905      	bls.n	800df84 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800df78:	4b2e      	ldr	r3, [pc, #184]	@ (800e034 <dealPerMs+0x134>)
 800df7a:	2200      	movs	r2, #0
 800df7c:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800df7e:	4b2e      	ldr	r3, [pc, #184]	@ (800e038 <dealPerMs+0x138>)
 800df80:	2201      	movs	r2, #1
 800df82:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800df84:	4b2d      	ldr	r3, [pc, #180]	@ (800e03c <dealPerMs+0x13c>)
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	3301      	adds	r3, #1
 800df8a:	b2da      	uxtb	r2, r3
 800df8c:	4b2b      	ldr	r3, [pc, #172]	@ (800e03c <dealPerMs+0x13c>)
 800df8e:	701a      	strb	r2, [r3, #0]
 800df90:	4b2a      	ldr	r3, [pc, #168]	@ (800e03c <dealPerMs+0x13c>)
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	2b63      	cmp	r3, #99	@ 0x63
 800df96:	d905      	bls.n	800dfa4 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800df98:	4b28      	ldr	r3, [pc, #160]	@ (800e03c <dealPerMs+0x13c>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800df9e:	4b28      	ldr	r3, [pc, #160]	@ (800e040 <dealPerMs+0x140>)
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800dfa4:	4b27      	ldr	r3, [pc, #156]	@ (800e044 <dealPerMs+0x144>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	4a26      	ldr	r2, [pc, #152]	@ (800e044 <dealPerMs+0x144>)
 800dfac:	6013      	str	r3, [r2, #0]
 800dfae:	4b25      	ldr	r3, [pc, #148]	@ (800e044 <dealPerMs+0x144>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800dfb6:	d305      	bcc.n	800dfc4 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800dfb8:	4b22      	ldr	r3, [pc, #136]	@ (800e044 <dealPerMs+0x144>)
 800dfba:	2200      	movs	r2, #0
 800dfbc:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800dfbe:	4b22      	ldr	r3, [pc, #136]	@ (800e048 <dealPerMs+0x148>)
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	701a      	strb	r2, [r3, #0]
    }
    if (++_1000msCnt >= 1000)
 800dfc4:	4b21      	ldr	r3, [pc, #132]	@ (800e04c <dealPerMs+0x14c>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	3301      	adds	r3, #1
 800dfca:	4a20      	ldr	r2, [pc, #128]	@ (800e04c <dealPerMs+0x14c>)
 800dfcc:	6013      	str	r3, [r2, #0]
 800dfce:	4b1f      	ldr	r3, [pc, #124]	@ (800e04c <dealPerMs+0x14c>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dfd6:	d305      	bcc.n	800dfe4 <dealPerMs+0xe4>
    {
        _1000msCnt = 0;
 800dfd8:	4b1c      	ldr	r3, [pc, #112]	@ (800e04c <dealPerMs+0x14c>)
 800dfda:	2200      	movs	r2, #0
 800dfdc:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800dfde:	4b1c      	ldr	r3, [pc, #112]	@ (800e050 <dealPerMs+0x150>)
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800dfe4:	4b1b      	ldr	r3, [pc, #108]	@ (800e054 <dealPerMs+0x154>)
 800dfe6:	2232      	movs	r2, #50	@ 0x32
 800dfe8:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800dfea:	4b1b      	ldr	r3, [pc, #108]	@ (800e058 <dealPerMs+0x158>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	3301      	adds	r3, #1
 800dff0:	4a19      	ldr	r2, [pc, #100]	@ (800e058 <dealPerMs+0x158>)
 800dff2:	6013      	str	r3, [r2, #0]
 800dff4:	4b18      	ldr	r3, [pc, #96]	@ (800e058 <dealPerMs+0x158>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dffc:	d305      	bcc.n	800e00a <dealPerMs+0x10a>
    {
        _1msCnt = 0;
 800dffe:	4b16      	ldr	r3, [pc, #88]	@ (800e058 <dealPerMs+0x158>)
 800e000:	2200      	movs	r2, #0
 800e002:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800e004:	4b12      	ldr	r3, [pc, #72]	@ (800e050 <dealPerMs+0x150>)
 800e006:	2201      	movs	r2, #1
 800e008:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800e00a:	4b14      	ldr	r3, [pc, #80]	@ (800e05c <dealPerMs+0x15c>)
 800e00c:	2201      	movs	r2, #1
 800e00e:	701a      	strb	r2, [r3, #0]




}
 800e010:	bf00      	nop
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr
 800e01a:	bf00      	nop
 800e01c:	2000096c 	.word	0x2000096c
 800e020:	20000965 	.word	0x20000965
 800e024:	2000096d 	.word	0x2000096d
 800e028:	20000966 	.word	0x20000966
 800e02c:	2000096e 	.word	0x2000096e
 800e030:	20000967 	.word	0x20000967
 800e034:	2000096f 	.word	0x2000096f
 800e038:	20000968 	.word	0x20000968
 800e03c:	20000970 	.word	0x20000970
 800e040:	20000969 	.word	0x20000969
 800e044:	20000974 	.word	0x20000974
 800e048:	2000096a 	.word	0x2000096a
 800e04c:	20000978 	.word	0x20000978
 800e050:	2000095c 	.word	0x2000095c
 800e054:	20000964 	.word	0x20000964
 800e058:	20000960 	.word	0x20000960
 800e05c:	2000095d 	.word	0x2000095d

0800e060 <getOneSecFlag>:
}



bool getOneSecFlag()
{
 800e060:	b480      	push	{r7}
 800e062:	af00      	add	r7, sp, #0
    if (_1s)
 800e064:	4b07      	ldr	r3, [pc, #28]	@ (800e084 <getOneSecFlag+0x24>)
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d004      	beq.n	800e076 <getOneSecFlag+0x16>
    {
        _1s = 0;
 800e06c:	4b05      	ldr	r3, [pc, #20]	@ (800e084 <getOneSecFlag+0x24>)
 800e06e:	2200      	movs	r2, #0
 800e070:	701a      	strb	r2, [r3, #0]
        return 1;
 800e072:	2301      	movs	r3, #1
 800e074:	e000      	b.n	800e078 <getOneSecFlag+0x18>
    }
    else
        return 0;
 800e076:	2300      	movs	r3, #0
}
 800e078:	4618      	mov	r0, r3
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop
 800e084:	2000095c 	.word	0x2000095c

0800e088 <get5MsFlag>:
bool getCrossZero()
{
    return crossZero;
}
bool get5MsFlag()
{
 800e088:	b480      	push	{r7}
 800e08a:	af00      	add	r7, sp, #0
    if (_5msFlag)
 800e08c:	4b07      	ldr	r3, [pc, #28]	@ (800e0ac <get5MsFlag+0x24>)
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d004      	beq.n	800e09e <get5MsFlag+0x16>
    {
        _5msFlag = 0;
 800e094:	4b05      	ldr	r3, [pc, #20]	@ (800e0ac <get5MsFlag+0x24>)
 800e096:	2200      	movs	r2, #0
 800e098:	701a      	strb	r2, [r3, #0]
        return 1;
 800e09a:	2301      	movs	r3, #1
 800e09c:	e000      	b.n	800e0a0 <get5MsFlag+0x18>
    }
    else
    {
        return 0;
 800e09e:	2300      	movs	r3, #0
    }
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a8:	4770      	bx	lr
 800e0aa:	bf00      	nop
 800e0ac:	20000965 	.word	0x20000965

0800e0b0 <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800e0b4:	4b07      	ldr	r3, [pc, #28]	@ (800e0d4 <get100MsFlag+0x24>)
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d004      	beq.n	800e0c6 <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800e0bc:	4b05      	ldr	r3, [pc, #20]	@ (800e0d4 <get100MsFlag+0x24>)
 800e0be:	2200      	movs	r2, #0
 800e0c0:	701a      	strb	r2, [r3, #0]
        return 1;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e000      	b.n	800e0c8 <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800e0c6:	2300      	movs	r3, #0
    }
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr
 800e0d2:	bf00      	nop
 800e0d4:	20000969 	.word	0x20000969

0800e0d8 <atof>:
 800e0d8:	2100      	movs	r1, #0
 800e0da:	f000 be0b 	b.w	800ecf4 <strtod>

0800e0de <sulp>:
 800e0de:	b570      	push	{r4, r5, r6, lr}
 800e0e0:	4604      	mov	r4, r0
 800e0e2:	460d      	mov	r5, r1
 800e0e4:	ec45 4b10 	vmov	d0, r4, r5
 800e0e8:	4616      	mov	r6, r2
 800e0ea:	f003 fc7d 	bl	80119e8 <__ulp>
 800e0ee:	ec51 0b10 	vmov	r0, r1, d0
 800e0f2:	b17e      	cbz	r6, 800e114 <sulp+0x36>
 800e0f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e0f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	dd09      	ble.n	800e114 <sulp+0x36>
 800e100:	051b      	lsls	r3, r3, #20
 800e102:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e106:	2400      	movs	r4, #0
 800e108:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e10c:	4622      	mov	r2, r4
 800e10e:	462b      	mov	r3, r5
 800e110:	f7f2 fa9a 	bl	8000648 <__aeabi_dmul>
 800e114:	ec41 0b10 	vmov	d0, r0, r1
 800e118:	bd70      	pop	{r4, r5, r6, pc}
 800e11a:	0000      	movs	r0, r0
 800e11c:	0000      	movs	r0, r0
	...

0800e120 <_strtod_l>:
 800e120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e124:	b09f      	sub	sp, #124	@ 0x7c
 800e126:	460c      	mov	r4, r1
 800e128:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e12a:	2200      	movs	r2, #0
 800e12c:	921a      	str	r2, [sp, #104]	@ 0x68
 800e12e:	9005      	str	r0, [sp, #20]
 800e130:	f04f 0a00 	mov.w	sl, #0
 800e134:	f04f 0b00 	mov.w	fp, #0
 800e138:	460a      	mov	r2, r1
 800e13a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e13c:	7811      	ldrb	r1, [r2, #0]
 800e13e:	292b      	cmp	r1, #43	@ 0x2b
 800e140:	d04a      	beq.n	800e1d8 <_strtod_l+0xb8>
 800e142:	d838      	bhi.n	800e1b6 <_strtod_l+0x96>
 800e144:	290d      	cmp	r1, #13
 800e146:	d832      	bhi.n	800e1ae <_strtod_l+0x8e>
 800e148:	2908      	cmp	r1, #8
 800e14a:	d832      	bhi.n	800e1b2 <_strtod_l+0x92>
 800e14c:	2900      	cmp	r1, #0
 800e14e:	d03b      	beq.n	800e1c8 <_strtod_l+0xa8>
 800e150:	2200      	movs	r2, #0
 800e152:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e154:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e156:	782a      	ldrb	r2, [r5, #0]
 800e158:	2a30      	cmp	r2, #48	@ 0x30
 800e15a:	f040 80b3 	bne.w	800e2c4 <_strtod_l+0x1a4>
 800e15e:	786a      	ldrb	r2, [r5, #1]
 800e160:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e164:	2a58      	cmp	r2, #88	@ 0x58
 800e166:	d16e      	bne.n	800e246 <_strtod_l+0x126>
 800e168:	9302      	str	r3, [sp, #8]
 800e16a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e16c:	9301      	str	r3, [sp, #4]
 800e16e:	ab1a      	add	r3, sp, #104	@ 0x68
 800e170:	9300      	str	r3, [sp, #0]
 800e172:	4a8e      	ldr	r2, [pc, #568]	@ (800e3ac <_strtod_l+0x28c>)
 800e174:	9805      	ldr	r0, [sp, #20]
 800e176:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e178:	a919      	add	r1, sp, #100	@ 0x64
 800e17a:	f002 fd27 	bl	8010bcc <__gethex>
 800e17e:	f010 060f 	ands.w	r6, r0, #15
 800e182:	4604      	mov	r4, r0
 800e184:	d005      	beq.n	800e192 <_strtod_l+0x72>
 800e186:	2e06      	cmp	r6, #6
 800e188:	d128      	bne.n	800e1dc <_strtod_l+0xbc>
 800e18a:	3501      	adds	r5, #1
 800e18c:	2300      	movs	r3, #0
 800e18e:	9519      	str	r5, [sp, #100]	@ 0x64
 800e190:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e192:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e194:	2b00      	cmp	r3, #0
 800e196:	f040 858e 	bne.w	800ecb6 <_strtod_l+0xb96>
 800e19a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e19c:	b1cb      	cbz	r3, 800e1d2 <_strtod_l+0xb2>
 800e19e:	4652      	mov	r2, sl
 800e1a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e1a4:	ec43 2b10 	vmov	d0, r2, r3
 800e1a8:	b01f      	add	sp, #124	@ 0x7c
 800e1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ae:	2920      	cmp	r1, #32
 800e1b0:	d1ce      	bne.n	800e150 <_strtod_l+0x30>
 800e1b2:	3201      	adds	r2, #1
 800e1b4:	e7c1      	b.n	800e13a <_strtod_l+0x1a>
 800e1b6:	292d      	cmp	r1, #45	@ 0x2d
 800e1b8:	d1ca      	bne.n	800e150 <_strtod_l+0x30>
 800e1ba:	2101      	movs	r1, #1
 800e1bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e1be:	1c51      	adds	r1, r2, #1
 800e1c0:	9119      	str	r1, [sp, #100]	@ 0x64
 800e1c2:	7852      	ldrb	r2, [r2, #1]
 800e1c4:	2a00      	cmp	r2, #0
 800e1c6:	d1c5      	bne.n	800e154 <_strtod_l+0x34>
 800e1c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e1ca:	9419      	str	r4, [sp, #100]	@ 0x64
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	f040 8570 	bne.w	800ecb2 <_strtod_l+0xb92>
 800e1d2:	4652      	mov	r2, sl
 800e1d4:	465b      	mov	r3, fp
 800e1d6:	e7e5      	b.n	800e1a4 <_strtod_l+0x84>
 800e1d8:	2100      	movs	r1, #0
 800e1da:	e7ef      	b.n	800e1bc <_strtod_l+0x9c>
 800e1dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e1de:	b13a      	cbz	r2, 800e1f0 <_strtod_l+0xd0>
 800e1e0:	2135      	movs	r1, #53	@ 0x35
 800e1e2:	a81c      	add	r0, sp, #112	@ 0x70
 800e1e4:	f003 fcfa 	bl	8011bdc <__copybits>
 800e1e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1ea:	9805      	ldr	r0, [sp, #20]
 800e1ec:	f003 f8c8 	bl	8011380 <_Bfree>
 800e1f0:	3e01      	subs	r6, #1
 800e1f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e1f4:	2e04      	cmp	r6, #4
 800e1f6:	d806      	bhi.n	800e206 <_strtod_l+0xe6>
 800e1f8:	e8df f006 	tbb	[pc, r6]
 800e1fc:	201d0314 	.word	0x201d0314
 800e200:	14          	.byte	0x14
 800e201:	00          	.byte	0x00
 800e202:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e206:	05e1      	lsls	r1, r4, #23
 800e208:	bf48      	it	mi
 800e20a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e20e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e212:	0d1b      	lsrs	r3, r3, #20
 800e214:	051b      	lsls	r3, r3, #20
 800e216:	2b00      	cmp	r3, #0
 800e218:	d1bb      	bne.n	800e192 <_strtod_l+0x72>
 800e21a:	f001 fd8d 	bl	800fd38 <__errno>
 800e21e:	2322      	movs	r3, #34	@ 0x22
 800e220:	6003      	str	r3, [r0, #0]
 800e222:	e7b6      	b.n	800e192 <_strtod_l+0x72>
 800e224:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e228:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e22c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e230:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e234:	e7e7      	b.n	800e206 <_strtod_l+0xe6>
 800e236:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e3b4 <_strtod_l+0x294>
 800e23a:	e7e4      	b.n	800e206 <_strtod_l+0xe6>
 800e23c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e240:	f04f 3aff 	mov.w	sl, #4294967295
 800e244:	e7df      	b.n	800e206 <_strtod_l+0xe6>
 800e246:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e248:	1c5a      	adds	r2, r3, #1
 800e24a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e24c:	785b      	ldrb	r3, [r3, #1]
 800e24e:	2b30      	cmp	r3, #48	@ 0x30
 800e250:	d0f9      	beq.n	800e246 <_strtod_l+0x126>
 800e252:	2b00      	cmp	r3, #0
 800e254:	d09d      	beq.n	800e192 <_strtod_l+0x72>
 800e256:	2301      	movs	r3, #1
 800e258:	9309      	str	r3, [sp, #36]	@ 0x24
 800e25a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e25c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e25e:	2300      	movs	r3, #0
 800e260:	9308      	str	r3, [sp, #32]
 800e262:	930a      	str	r3, [sp, #40]	@ 0x28
 800e264:	461f      	mov	r7, r3
 800e266:	220a      	movs	r2, #10
 800e268:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e26a:	7805      	ldrb	r5, [r0, #0]
 800e26c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e270:	b2d9      	uxtb	r1, r3
 800e272:	2909      	cmp	r1, #9
 800e274:	d928      	bls.n	800e2c8 <_strtod_l+0x1a8>
 800e276:	494e      	ldr	r1, [pc, #312]	@ (800e3b0 <_strtod_l+0x290>)
 800e278:	2201      	movs	r2, #1
 800e27a:	f001 fd01 	bl	800fc80 <strncmp>
 800e27e:	2800      	cmp	r0, #0
 800e280:	d032      	beq.n	800e2e8 <_strtod_l+0x1c8>
 800e282:	2000      	movs	r0, #0
 800e284:	462a      	mov	r2, r5
 800e286:	4681      	mov	r9, r0
 800e288:	463d      	mov	r5, r7
 800e28a:	4603      	mov	r3, r0
 800e28c:	2a65      	cmp	r2, #101	@ 0x65
 800e28e:	d001      	beq.n	800e294 <_strtod_l+0x174>
 800e290:	2a45      	cmp	r2, #69	@ 0x45
 800e292:	d114      	bne.n	800e2be <_strtod_l+0x19e>
 800e294:	b91d      	cbnz	r5, 800e29e <_strtod_l+0x17e>
 800e296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e298:	4302      	orrs	r2, r0
 800e29a:	d095      	beq.n	800e1c8 <_strtod_l+0xa8>
 800e29c:	2500      	movs	r5, #0
 800e29e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e2a0:	1c62      	adds	r2, r4, #1
 800e2a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e2a4:	7862      	ldrb	r2, [r4, #1]
 800e2a6:	2a2b      	cmp	r2, #43	@ 0x2b
 800e2a8:	d077      	beq.n	800e39a <_strtod_l+0x27a>
 800e2aa:	2a2d      	cmp	r2, #45	@ 0x2d
 800e2ac:	d07b      	beq.n	800e3a6 <_strtod_l+0x286>
 800e2ae:	f04f 0c00 	mov.w	ip, #0
 800e2b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e2b6:	2909      	cmp	r1, #9
 800e2b8:	f240 8082 	bls.w	800e3c0 <_strtod_l+0x2a0>
 800e2bc:	9419      	str	r4, [sp, #100]	@ 0x64
 800e2be:	f04f 0800 	mov.w	r8, #0
 800e2c2:	e0a2      	b.n	800e40a <_strtod_l+0x2ea>
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	e7c7      	b.n	800e258 <_strtod_l+0x138>
 800e2c8:	2f08      	cmp	r7, #8
 800e2ca:	bfd5      	itete	le
 800e2cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e2ce:	9908      	ldrgt	r1, [sp, #32]
 800e2d0:	fb02 3301 	mlale	r3, r2, r1, r3
 800e2d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e2d8:	f100 0001 	add.w	r0, r0, #1
 800e2dc:	bfd4      	ite	le
 800e2de:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e2e0:	9308      	strgt	r3, [sp, #32]
 800e2e2:	3701      	adds	r7, #1
 800e2e4:	9019      	str	r0, [sp, #100]	@ 0x64
 800e2e6:	e7bf      	b.n	800e268 <_strtod_l+0x148>
 800e2e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2ea:	1c5a      	adds	r2, r3, #1
 800e2ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800e2ee:	785a      	ldrb	r2, [r3, #1]
 800e2f0:	b37f      	cbz	r7, 800e352 <_strtod_l+0x232>
 800e2f2:	4681      	mov	r9, r0
 800e2f4:	463d      	mov	r5, r7
 800e2f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e2fa:	2b09      	cmp	r3, #9
 800e2fc:	d912      	bls.n	800e324 <_strtod_l+0x204>
 800e2fe:	2301      	movs	r3, #1
 800e300:	e7c4      	b.n	800e28c <_strtod_l+0x16c>
 800e302:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e304:	1c5a      	adds	r2, r3, #1
 800e306:	9219      	str	r2, [sp, #100]	@ 0x64
 800e308:	785a      	ldrb	r2, [r3, #1]
 800e30a:	3001      	adds	r0, #1
 800e30c:	2a30      	cmp	r2, #48	@ 0x30
 800e30e:	d0f8      	beq.n	800e302 <_strtod_l+0x1e2>
 800e310:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e314:	2b08      	cmp	r3, #8
 800e316:	f200 84d3 	bhi.w	800ecc0 <_strtod_l+0xba0>
 800e31a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e31c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e31e:	4681      	mov	r9, r0
 800e320:	2000      	movs	r0, #0
 800e322:	4605      	mov	r5, r0
 800e324:	3a30      	subs	r2, #48	@ 0x30
 800e326:	f100 0301 	add.w	r3, r0, #1
 800e32a:	d02a      	beq.n	800e382 <_strtod_l+0x262>
 800e32c:	4499      	add	r9, r3
 800e32e:	eb00 0c05 	add.w	ip, r0, r5
 800e332:	462b      	mov	r3, r5
 800e334:	210a      	movs	r1, #10
 800e336:	4563      	cmp	r3, ip
 800e338:	d10d      	bne.n	800e356 <_strtod_l+0x236>
 800e33a:	1c69      	adds	r1, r5, #1
 800e33c:	4401      	add	r1, r0
 800e33e:	4428      	add	r0, r5
 800e340:	2808      	cmp	r0, #8
 800e342:	dc16      	bgt.n	800e372 <_strtod_l+0x252>
 800e344:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e346:	230a      	movs	r3, #10
 800e348:	fb03 2300 	mla	r3, r3, r0, r2
 800e34c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e34e:	2300      	movs	r3, #0
 800e350:	e018      	b.n	800e384 <_strtod_l+0x264>
 800e352:	4638      	mov	r0, r7
 800e354:	e7da      	b.n	800e30c <_strtod_l+0x1ec>
 800e356:	2b08      	cmp	r3, #8
 800e358:	f103 0301 	add.w	r3, r3, #1
 800e35c:	dc03      	bgt.n	800e366 <_strtod_l+0x246>
 800e35e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e360:	434e      	muls	r6, r1
 800e362:	960a      	str	r6, [sp, #40]	@ 0x28
 800e364:	e7e7      	b.n	800e336 <_strtod_l+0x216>
 800e366:	2b10      	cmp	r3, #16
 800e368:	bfde      	ittt	le
 800e36a:	9e08      	ldrle	r6, [sp, #32]
 800e36c:	434e      	mulle	r6, r1
 800e36e:	9608      	strle	r6, [sp, #32]
 800e370:	e7e1      	b.n	800e336 <_strtod_l+0x216>
 800e372:	280f      	cmp	r0, #15
 800e374:	dceb      	bgt.n	800e34e <_strtod_l+0x22e>
 800e376:	9808      	ldr	r0, [sp, #32]
 800e378:	230a      	movs	r3, #10
 800e37a:	fb03 2300 	mla	r3, r3, r0, r2
 800e37e:	9308      	str	r3, [sp, #32]
 800e380:	e7e5      	b.n	800e34e <_strtod_l+0x22e>
 800e382:	4629      	mov	r1, r5
 800e384:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e386:	1c50      	adds	r0, r2, #1
 800e388:	9019      	str	r0, [sp, #100]	@ 0x64
 800e38a:	7852      	ldrb	r2, [r2, #1]
 800e38c:	4618      	mov	r0, r3
 800e38e:	460d      	mov	r5, r1
 800e390:	e7b1      	b.n	800e2f6 <_strtod_l+0x1d6>
 800e392:	f04f 0900 	mov.w	r9, #0
 800e396:	2301      	movs	r3, #1
 800e398:	e77d      	b.n	800e296 <_strtod_l+0x176>
 800e39a:	f04f 0c00 	mov.w	ip, #0
 800e39e:	1ca2      	adds	r2, r4, #2
 800e3a0:	9219      	str	r2, [sp, #100]	@ 0x64
 800e3a2:	78a2      	ldrb	r2, [r4, #2]
 800e3a4:	e785      	b.n	800e2b2 <_strtod_l+0x192>
 800e3a6:	f04f 0c01 	mov.w	ip, #1
 800e3aa:	e7f8      	b.n	800e39e <_strtod_l+0x27e>
 800e3ac:	08012c08 	.word	0x08012c08
 800e3b0:	08012bf0 	.word	0x08012bf0
 800e3b4:	7ff00000 	.word	0x7ff00000
 800e3b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e3ba:	1c51      	adds	r1, r2, #1
 800e3bc:	9119      	str	r1, [sp, #100]	@ 0x64
 800e3be:	7852      	ldrb	r2, [r2, #1]
 800e3c0:	2a30      	cmp	r2, #48	@ 0x30
 800e3c2:	d0f9      	beq.n	800e3b8 <_strtod_l+0x298>
 800e3c4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e3c8:	2908      	cmp	r1, #8
 800e3ca:	f63f af78 	bhi.w	800e2be <_strtod_l+0x19e>
 800e3ce:	3a30      	subs	r2, #48	@ 0x30
 800e3d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e3d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e3d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e3d6:	f04f 080a 	mov.w	r8, #10
 800e3da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e3dc:	1c56      	adds	r6, r2, #1
 800e3de:	9619      	str	r6, [sp, #100]	@ 0x64
 800e3e0:	7852      	ldrb	r2, [r2, #1]
 800e3e2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e3e6:	f1be 0f09 	cmp.w	lr, #9
 800e3ea:	d939      	bls.n	800e460 <_strtod_l+0x340>
 800e3ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e3ee:	1a76      	subs	r6, r6, r1
 800e3f0:	2e08      	cmp	r6, #8
 800e3f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e3f6:	dc03      	bgt.n	800e400 <_strtod_l+0x2e0>
 800e3f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e3fa:	4588      	cmp	r8, r1
 800e3fc:	bfa8      	it	ge
 800e3fe:	4688      	movge	r8, r1
 800e400:	f1bc 0f00 	cmp.w	ip, #0
 800e404:	d001      	beq.n	800e40a <_strtod_l+0x2ea>
 800e406:	f1c8 0800 	rsb	r8, r8, #0
 800e40a:	2d00      	cmp	r5, #0
 800e40c:	d14e      	bne.n	800e4ac <_strtod_l+0x38c>
 800e40e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e410:	4308      	orrs	r0, r1
 800e412:	f47f aebe 	bne.w	800e192 <_strtod_l+0x72>
 800e416:	2b00      	cmp	r3, #0
 800e418:	f47f aed6 	bne.w	800e1c8 <_strtod_l+0xa8>
 800e41c:	2a69      	cmp	r2, #105	@ 0x69
 800e41e:	d028      	beq.n	800e472 <_strtod_l+0x352>
 800e420:	dc25      	bgt.n	800e46e <_strtod_l+0x34e>
 800e422:	2a49      	cmp	r2, #73	@ 0x49
 800e424:	d025      	beq.n	800e472 <_strtod_l+0x352>
 800e426:	2a4e      	cmp	r2, #78	@ 0x4e
 800e428:	f47f aece 	bne.w	800e1c8 <_strtod_l+0xa8>
 800e42c:	499b      	ldr	r1, [pc, #620]	@ (800e69c <_strtod_l+0x57c>)
 800e42e:	a819      	add	r0, sp, #100	@ 0x64
 800e430:	f002 fdee 	bl	8011010 <__match>
 800e434:	2800      	cmp	r0, #0
 800e436:	f43f aec7 	beq.w	800e1c8 <_strtod_l+0xa8>
 800e43a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	2b28      	cmp	r3, #40	@ 0x28
 800e440:	d12e      	bne.n	800e4a0 <_strtod_l+0x380>
 800e442:	4997      	ldr	r1, [pc, #604]	@ (800e6a0 <_strtod_l+0x580>)
 800e444:	aa1c      	add	r2, sp, #112	@ 0x70
 800e446:	a819      	add	r0, sp, #100	@ 0x64
 800e448:	f002 fdf6 	bl	8011038 <__hexnan>
 800e44c:	2805      	cmp	r0, #5
 800e44e:	d127      	bne.n	800e4a0 <_strtod_l+0x380>
 800e450:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e452:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e456:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e45a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e45e:	e698      	b.n	800e192 <_strtod_l+0x72>
 800e460:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e462:	fb08 2101 	mla	r1, r8, r1, r2
 800e466:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e46a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e46c:	e7b5      	b.n	800e3da <_strtod_l+0x2ba>
 800e46e:	2a6e      	cmp	r2, #110	@ 0x6e
 800e470:	e7da      	b.n	800e428 <_strtod_l+0x308>
 800e472:	498c      	ldr	r1, [pc, #560]	@ (800e6a4 <_strtod_l+0x584>)
 800e474:	a819      	add	r0, sp, #100	@ 0x64
 800e476:	f002 fdcb 	bl	8011010 <__match>
 800e47a:	2800      	cmp	r0, #0
 800e47c:	f43f aea4 	beq.w	800e1c8 <_strtod_l+0xa8>
 800e480:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e482:	4989      	ldr	r1, [pc, #548]	@ (800e6a8 <_strtod_l+0x588>)
 800e484:	3b01      	subs	r3, #1
 800e486:	a819      	add	r0, sp, #100	@ 0x64
 800e488:	9319      	str	r3, [sp, #100]	@ 0x64
 800e48a:	f002 fdc1 	bl	8011010 <__match>
 800e48e:	b910      	cbnz	r0, 800e496 <_strtod_l+0x376>
 800e490:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e492:	3301      	adds	r3, #1
 800e494:	9319      	str	r3, [sp, #100]	@ 0x64
 800e496:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e6b8 <_strtod_l+0x598>
 800e49a:	f04f 0a00 	mov.w	sl, #0
 800e49e:	e678      	b.n	800e192 <_strtod_l+0x72>
 800e4a0:	4882      	ldr	r0, [pc, #520]	@ (800e6ac <_strtod_l+0x58c>)
 800e4a2:	f001 fc85 	bl	800fdb0 <nan>
 800e4a6:	ec5b ab10 	vmov	sl, fp, d0
 800e4aa:	e672      	b.n	800e192 <_strtod_l+0x72>
 800e4ac:	eba8 0309 	sub.w	r3, r8, r9
 800e4b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e4b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4b4:	2f00      	cmp	r7, #0
 800e4b6:	bf08      	it	eq
 800e4b8:	462f      	moveq	r7, r5
 800e4ba:	2d10      	cmp	r5, #16
 800e4bc:	462c      	mov	r4, r5
 800e4be:	bfa8      	it	ge
 800e4c0:	2410      	movge	r4, #16
 800e4c2:	f7f2 f847 	bl	8000554 <__aeabi_ui2d>
 800e4c6:	2d09      	cmp	r5, #9
 800e4c8:	4682      	mov	sl, r0
 800e4ca:	468b      	mov	fp, r1
 800e4cc:	dc13      	bgt.n	800e4f6 <_strtod_l+0x3d6>
 800e4ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	f43f ae5e 	beq.w	800e192 <_strtod_l+0x72>
 800e4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4d8:	dd78      	ble.n	800e5cc <_strtod_l+0x4ac>
 800e4da:	2b16      	cmp	r3, #22
 800e4dc:	dc5f      	bgt.n	800e59e <_strtod_l+0x47e>
 800e4de:	4974      	ldr	r1, [pc, #464]	@ (800e6b0 <_strtod_l+0x590>)
 800e4e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e4e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4e8:	4652      	mov	r2, sl
 800e4ea:	465b      	mov	r3, fp
 800e4ec:	f7f2 f8ac 	bl	8000648 <__aeabi_dmul>
 800e4f0:	4682      	mov	sl, r0
 800e4f2:	468b      	mov	fp, r1
 800e4f4:	e64d      	b.n	800e192 <_strtod_l+0x72>
 800e4f6:	4b6e      	ldr	r3, [pc, #440]	@ (800e6b0 <_strtod_l+0x590>)
 800e4f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e500:	f7f2 f8a2 	bl	8000648 <__aeabi_dmul>
 800e504:	4682      	mov	sl, r0
 800e506:	9808      	ldr	r0, [sp, #32]
 800e508:	468b      	mov	fp, r1
 800e50a:	f7f2 f823 	bl	8000554 <__aeabi_ui2d>
 800e50e:	4602      	mov	r2, r0
 800e510:	460b      	mov	r3, r1
 800e512:	4650      	mov	r0, sl
 800e514:	4659      	mov	r1, fp
 800e516:	f7f1 fee1 	bl	80002dc <__adddf3>
 800e51a:	2d0f      	cmp	r5, #15
 800e51c:	4682      	mov	sl, r0
 800e51e:	468b      	mov	fp, r1
 800e520:	ddd5      	ble.n	800e4ce <_strtod_l+0x3ae>
 800e522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e524:	1b2c      	subs	r4, r5, r4
 800e526:	441c      	add	r4, r3
 800e528:	2c00      	cmp	r4, #0
 800e52a:	f340 8096 	ble.w	800e65a <_strtod_l+0x53a>
 800e52e:	f014 030f 	ands.w	r3, r4, #15
 800e532:	d00a      	beq.n	800e54a <_strtod_l+0x42a>
 800e534:	495e      	ldr	r1, [pc, #376]	@ (800e6b0 <_strtod_l+0x590>)
 800e536:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e53a:	4652      	mov	r2, sl
 800e53c:	465b      	mov	r3, fp
 800e53e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e542:	f7f2 f881 	bl	8000648 <__aeabi_dmul>
 800e546:	4682      	mov	sl, r0
 800e548:	468b      	mov	fp, r1
 800e54a:	f034 040f 	bics.w	r4, r4, #15
 800e54e:	d073      	beq.n	800e638 <_strtod_l+0x518>
 800e550:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e554:	dd48      	ble.n	800e5e8 <_strtod_l+0x4c8>
 800e556:	2400      	movs	r4, #0
 800e558:	46a0      	mov	r8, r4
 800e55a:	940a      	str	r4, [sp, #40]	@ 0x28
 800e55c:	46a1      	mov	r9, r4
 800e55e:	9a05      	ldr	r2, [sp, #20]
 800e560:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e6b8 <_strtod_l+0x598>
 800e564:	2322      	movs	r3, #34	@ 0x22
 800e566:	6013      	str	r3, [r2, #0]
 800e568:	f04f 0a00 	mov.w	sl, #0
 800e56c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e56e:	2b00      	cmp	r3, #0
 800e570:	f43f ae0f 	beq.w	800e192 <_strtod_l+0x72>
 800e574:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e576:	9805      	ldr	r0, [sp, #20]
 800e578:	f002 ff02 	bl	8011380 <_Bfree>
 800e57c:	9805      	ldr	r0, [sp, #20]
 800e57e:	4649      	mov	r1, r9
 800e580:	f002 fefe 	bl	8011380 <_Bfree>
 800e584:	9805      	ldr	r0, [sp, #20]
 800e586:	4641      	mov	r1, r8
 800e588:	f002 fefa 	bl	8011380 <_Bfree>
 800e58c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e58e:	9805      	ldr	r0, [sp, #20]
 800e590:	f002 fef6 	bl	8011380 <_Bfree>
 800e594:	9805      	ldr	r0, [sp, #20]
 800e596:	4621      	mov	r1, r4
 800e598:	f002 fef2 	bl	8011380 <_Bfree>
 800e59c:	e5f9      	b.n	800e192 <_strtod_l+0x72>
 800e59e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	dbbc      	blt.n	800e522 <_strtod_l+0x402>
 800e5a8:	4c41      	ldr	r4, [pc, #260]	@ (800e6b0 <_strtod_l+0x590>)
 800e5aa:	f1c5 050f 	rsb	r5, r5, #15
 800e5ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e5b2:	4652      	mov	r2, sl
 800e5b4:	465b      	mov	r3, fp
 800e5b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5ba:	f7f2 f845 	bl	8000648 <__aeabi_dmul>
 800e5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5c0:	1b5d      	subs	r5, r3, r5
 800e5c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e5c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e5ca:	e78f      	b.n	800e4ec <_strtod_l+0x3cc>
 800e5cc:	3316      	adds	r3, #22
 800e5ce:	dba8      	blt.n	800e522 <_strtod_l+0x402>
 800e5d0:	4b37      	ldr	r3, [pc, #220]	@ (800e6b0 <_strtod_l+0x590>)
 800e5d2:	eba9 0808 	sub.w	r8, r9, r8
 800e5d6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e5da:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e5de:	4650      	mov	r0, sl
 800e5e0:	4659      	mov	r1, fp
 800e5e2:	f7f2 f95b 	bl	800089c <__aeabi_ddiv>
 800e5e6:	e783      	b.n	800e4f0 <_strtod_l+0x3d0>
 800e5e8:	4b32      	ldr	r3, [pc, #200]	@ (800e6b4 <_strtod_l+0x594>)
 800e5ea:	9308      	str	r3, [sp, #32]
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	1124      	asrs	r4, r4, #4
 800e5f0:	4650      	mov	r0, sl
 800e5f2:	4659      	mov	r1, fp
 800e5f4:	461e      	mov	r6, r3
 800e5f6:	2c01      	cmp	r4, #1
 800e5f8:	dc21      	bgt.n	800e63e <_strtod_l+0x51e>
 800e5fa:	b10b      	cbz	r3, 800e600 <_strtod_l+0x4e0>
 800e5fc:	4682      	mov	sl, r0
 800e5fe:	468b      	mov	fp, r1
 800e600:	492c      	ldr	r1, [pc, #176]	@ (800e6b4 <_strtod_l+0x594>)
 800e602:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e606:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e60a:	4652      	mov	r2, sl
 800e60c:	465b      	mov	r3, fp
 800e60e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e612:	f7f2 f819 	bl	8000648 <__aeabi_dmul>
 800e616:	4b28      	ldr	r3, [pc, #160]	@ (800e6b8 <_strtod_l+0x598>)
 800e618:	460a      	mov	r2, r1
 800e61a:	400b      	ands	r3, r1
 800e61c:	4927      	ldr	r1, [pc, #156]	@ (800e6bc <_strtod_l+0x59c>)
 800e61e:	428b      	cmp	r3, r1
 800e620:	4682      	mov	sl, r0
 800e622:	d898      	bhi.n	800e556 <_strtod_l+0x436>
 800e624:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e628:	428b      	cmp	r3, r1
 800e62a:	bf86      	itte	hi
 800e62c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e6c0 <_strtod_l+0x5a0>
 800e630:	f04f 3aff 	movhi.w	sl, #4294967295
 800e634:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e638:	2300      	movs	r3, #0
 800e63a:	9308      	str	r3, [sp, #32]
 800e63c:	e07a      	b.n	800e734 <_strtod_l+0x614>
 800e63e:	07e2      	lsls	r2, r4, #31
 800e640:	d505      	bpl.n	800e64e <_strtod_l+0x52e>
 800e642:	9b08      	ldr	r3, [sp, #32]
 800e644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e648:	f7f1 fffe 	bl	8000648 <__aeabi_dmul>
 800e64c:	2301      	movs	r3, #1
 800e64e:	9a08      	ldr	r2, [sp, #32]
 800e650:	3208      	adds	r2, #8
 800e652:	3601      	adds	r6, #1
 800e654:	1064      	asrs	r4, r4, #1
 800e656:	9208      	str	r2, [sp, #32]
 800e658:	e7cd      	b.n	800e5f6 <_strtod_l+0x4d6>
 800e65a:	d0ed      	beq.n	800e638 <_strtod_l+0x518>
 800e65c:	4264      	negs	r4, r4
 800e65e:	f014 020f 	ands.w	r2, r4, #15
 800e662:	d00a      	beq.n	800e67a <_strtod_l+0x55a>
 800e664:	4b12      	ldr	r3, [pc, #72]	@ (800e6b0 <_strtod_l+0x590>)
 800e666:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e66a:	4650      	mov	r0, sl
 800e66c:	4659      	mov	r1, fp
 800e66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e672:	f7f2 f913 	bl	800089c <__aeabi_ddiv>
 800e676:	4682      	mov	sl, r0
 800e678:	468b      	mov	fp, r1
 800e67a:	1124      	asrs	r4, r4, #4
 800e67c:	d0dc      	beq.n	800e638 <_strtod_l+0x518>
 800e67e:	2c1f      	cmp	r4, #31
 800e680:	dd20      	ble.n	800e6c4 <_strtod_l+0x5a4>
 800e682:	2400      	movs	r4, #0
 800e684:	46a0      	mov	r8, r4
 800e686:	940a      	str	r4, [sp, #40]	@ 0x28
 800e688:	46a1      	mov	r9, r4
 800e68a:	9a05      	ldr	r2, [sp, #20]
 800e68c:	2322      	movs	r3, #34	@ 0x22
 800e68e:	f04f 0a00 	mov.w	sl, #0
 800e692:	f04f 0b00 	mov.w	fp, #0
 800e696:	6013      	str	r3, [r2, #0]
 800e698:	e768      	b.n	800e56c <_strtod_l+0x44c>
 800e69a:	bf00      	nop
 800e69c:	08012c55 	.word	0x08012c55
 800e6a0:	08012bf4 	.word	0x08012bf4
 800e6a4:	08012c4d 	.word	0x08012c4d
 800e6a8:	08012c8c 	.word	0x08012c8c
 800e6ac:	0801301d 	.word	0x0801301d
 800e6b0:	08012e08 	.word	0x08012e08
 800e6b4:	08012de0 	.word	0x08012de0
 800e6b8:	7ff00000 	.word	0x7ff00000
 800e6bc:	7ca00000 	.word	0x7ca00000
 800e6c0:	7fefffff 	.word	0x7fefffff
 800e6c4:	f014 0310 	ands.w	r3, r4, #16
 800e6c8:	bf18      	it	ne
 800e6ca:	236a      	movne	r3, #106	@ 0x6a
 800e6cc:	4ea9      	ldr	r6, [pc, #676]	@ (800e974 <_strtod_l+0x854>)
 800e6ce:	9308      	str	r3, [sp, #32]
 800e6d0:	4650      	mov	r0, sl
 800e6d2:	4659      	mov	r1, fp
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	07e2      	lsls	r2, r4, #31
 800e6d8:	d504      	bpl.n	800e6e4 <_strtod_l+0x5c4>
 800e6da:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e6de:	f7f1 ffb3 	bl	8000648 <__aeabi_dmul>
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	1064      	asrs	r4, r4, #1
 800e6e6:	f106 0608 	add.w	r6, r6, #8
 800e6ea:	d1f4      	bne.n	800e6d6 <_strtod_l+0x5b6>
 800e6ec:	b10b      	cbz	r3, 800e6f2 <_strtod_l+0x5d2>
 800e6ee:	4682      	mov	sl, r0
 800e6f0:	468b      	mov	fp, r1
 800e6f2:	9b08      	ldr	r3, [sp, #32]
 800e6f4:	b1b3      	cbz	r3, 800e724 <_strtod_l+0x604>
 800e6f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e6fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	4659      	mov	r1, fp
 800e702:	dd0f      	ble.n	800e724 <_strtod_l+0x604>
 800e704:	2b1f      	cmp	r3, #31
 800e706:	dd55      	ble.n	800e7b4 <_strtod_l+0x694>
 800e708:	2b34      	cmp	r3, #52	@ 0x34
 800e70a:	bfde      	ittt	le
 800e70c:	f04f 33ff 	movle.w	r3, #4294967295
 800e710:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e714:	4093      	lslle	r3, r2
 800e716:	f04f 0a00 	mov.w	sl, #0
 800e71a:	bfcc      	ite	gt
 800e71c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e720:	ea03 0b01 	andle.w	fp, r3, r1
 800e724:	2200      	movs	r2, #0
 800e726:	2300      	movs	r3, #0
 800e728:	4650      	mov	r0, sl
 800e72a:	4659      	mov	r1, fp
 800e72c:	f7f2 f9f4 	bl	8000b18 <__aeabi_dcmpeq>
 800e730:	2800      	cmp	r0, #0
 800e732:	d1a6      	bne.n	800e682 <_strtod_l+0x562>
 800e734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e736:	9300      	str	r3, [sp, #0]
 800e738:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e73a:	9805      	ldr	r0, [sp, #20]
 800e73c:	462b      	mov	r3, r5
 800e73e:	463a      	mov	r2, r7
 800e740:	f002 fe86 	bl	8011450 <__s2b>
 800e744:	900a      	str	r0, [sp, #40]	@ 0x28
 800e746:	2800      	cmp	r0, #0
 800e748:	f43f af05 	beq.w	800e556 <_strtod_l+0x436>
 800e74c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e74e:	2a00      	cmp	r2, #0
 800e750:	eba9 0308 	sub.w	r3, r9, r8
 800e754:	bfa8      	it	ge
 800e756:	2300      	movge	r3, #0
 800e758:	9312      	str	r3, [sp, #72]	@ 0x48
 800e75a:	2400      	movs	r4, #0
 800e75c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e760:	9316      	str	r3, [sp, #88]	@ 0x58
 800e762:	46a0      	mov	r8, r4
 800e764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e766:	9805      	ldr	r0, [sp, #20]
 800e768:	6859      	ldr	r1, [r3, #4]
 800e76a:	f002 fdc9 	bl	8011300 <_Balloc>
 800e76e:	4681      	mov	r9, r0
 800e770:	2800      	cmp	r0, #0
 800e772:	f43f aef4 	beq.w	800e55e <_strtod_l+0x43e>
 800e776:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e778:	691a      	ldr	r2, [r3, #16]
 800e77a:	3202      	adds	r2, #2
 800e77c:	f103 010c 	add.w	r1, r3, #12
 800e780:	0092      	lsls	r2, r2, #2
 800e782:	300c      	adds	r0, #12
 800e784:	f001 fb05 	bl	800fd92 <memcpy>
 800e788:	ec4b ab10 	vmov	d0, sl, fp
 800e78c:	9805      	ldr	r0, [sp, #20]
 800e78e:	aa1c      	add	r2, sp, #112	@ 0x70
 800e790:	a91b      	add	r1, sp, #108	@ 0x6c
 800e792:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e796:	f003 f997 	bl	8011ac8 <__d2b>
 800e79a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e79c:	2800      	cmp	r0, #0
 800e79e:	f43f aede 	beq.w	800e55e <_strtod_l+0x43e>
 800e7a2:	9805      	ldr	r0, [sp, #20]
 800e7a4:	2101      	movs	r1, #1
 800e7a6:	f002 fee9 	bl	801157c <__i2b>
 800e7aa:	4680      	mov	r8, r0
 800e7ac:	b948      	cbnz	r0, 800e7c2 <_strtod_l+0x6a2>
 800e7ae:	f04f 0800 	mov.w	r8, #0
 800e7b2:	e6d4      	b.n	800e55e <_strtod_l+0x43e>
 800e7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e7b8:	fa02 f303 	lsl.w	r3, r2, r3
 800e7bc:	ea03 0a0a 	and.w	sl, r3, sl
 800e7c0:	e7b0      	b.n	800e724 <_strtod_l+0x604>
 800e7c2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e7c4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e7c6:	2d00      	cmp	r5, #0
 800e7c8:	bfab      	itete	ge
 800e7ca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e7cc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e7ce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e7d0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e7d2:	bfac      	ite	ge
 800e7d4:	18ef      	addge	r7, r5, r3
 800e7d6:	1b5e      	sublt	r6, r3, r5
 800e7d8:	9b08      	ldr	r3, [sp, #32]
 800e7da:	1aed      	subs	r5, r5, r3
 800e7dc:	4415      	add	r5, r2
 800e7de:	4b66      	ldr	r3, [pc, #408]	@ (800e978 <_strtod_l+0x858>)
 800e7e0:	3d01      	subs	r5, #1
 800e7e2:	429d      	cmp	r5, r3
 800e7e4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e7e8:	da50      	bge.n	800e88c <_strtod_l+0x76c>
 800e7ea:	1b5b      	subs	r3, r3, r5
 800e7ec:	2b1f      	cmp	r3, #31
 800e7ee:	eba2 0203 	sub.w	r2, r2, r3
 800e7f2:	f04f 0101 	mov.w	r1, #1
 800e7f6:	dc3d      	bgt.n	800e874 <_strtod_l+0x754>
 800e7f8:	fa01 f303 	lsl.w	r3, r1, r3
 800e7fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e7fe:	2300      	movs	r3, #0
 800e800:	9310      	str	r3, [sp, #64]	@ 0x40
 800e802:	18bd      	adds	r5, r7, r2
 800e804:	9b08      	ldr	r3, [sp, #32]
 800e806:	42af      	cmp	r7, r5
 800e808:	4416      	add	r6, r2
 800e80a:	441e      	add	r6, r3
 800e80c:	463b      	mov	r3, r7
 800e80e:	bfa8      	it	ge
 800e810:	462b      	movge	r3, r5
 800e812:	42b3      	cmp	r3, r6
 800e814:	bfa8      	it	ge
 800e816:	4633      	movge	r3, r6
 800e818:	2b00      	cmp	r3, #0
 800e81a:	bfc2      	ittt	gt
 800e81c:	1aed      	subgt	r5, r5, r3
 800e81e:	1af6      	subgt	r6, r6, r3
 800e820:	1aff      	subgt	r7, r7, r3
 800e822:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e824:	2b00      	cmp	r3, #0
 800e826:	dd16      	ble.n	800e856 <_strtod_l+0x736>
 800e828:	4641      	mov	r1, r8
 800e82a:	9805      	ldr	r0, [sp, #20]
 800e82c:	461a      	mov	r2, r3
 800e82e:	f002 ff65 	bl	80116fc <__pow5mult>
 800e832:	4680      	mov	r8, r0
 800e834:	2800      	cmp	r0, #0
 800e836:	d0ba      	beq.n	800e7ae <_strtod_l+0x68e>
 800e838:	4601      	mov	r1, r0
 800e83a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e83c:	9805      	ldr	r0, [sp, #20]
 800e83e:	f002 feb3 	bl	80115a8 <__multiply>
 800e842:	900e      	str	r0, [sp, #56]	@ 0x38
 800e844:	2800      	cmp	r0, #0
 800e846:	f43f ae8a 	beq.w	800e55e <_strtod_l+0x43e>
 800e84a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e84c:	9805      	ldr	r0, [sp, #20]
 800e84e:	f002 fd97 	bl	8011380 <_Bfree>
 800e852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e854:	931a      	str	r3, [sp, #104]	@ 0x68
 800e856:	2d00      	cmp	r5, #0
 800e858:	dc1d      	bgt.n	800e896 <_strtod_l+0x776>
 800e85a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	dd23      	ble.n	800e8a8 <_strtod_l+0x788>
 800e860:	4649      	mov	r1, r9
 800e862:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e864:	9805      	ldr	r0, [sp, #20]
 800e866:	f002 ff49 	bl	80116fc <__pow5mult>
 800e86a:	4681      	mov	r9, r0
 800e86c:	b9e0      	cbnz	r0, 800e8a8 <_strtod_l+0x788>
 800e86e:	f04f 0900 	mov.w	r9, #0
 800e872:	e674      	b.n	800e55e <_strtod_l+0x43e>
 800e874:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e878:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e87c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e880:	35e2      	adds	r5, #226	@ 0xe2
 800e882:	fa01 f305 	lsl.w	r3, r1, r5
 800e886:	9310      	str	r3, [sp, #64]	@ 0x40
 800e888:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e88a:	e7ba      	b.n	800e802 <_strtod_l+0x6e2>
 800e88c:	2300      	movs	r3, #0
 800e88e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e890:	2301      	movs	r3, #1
 800e892:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e894:	e7b5      	b.n	800e802 <_strtod_l+0x6e2>
 800e896:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e898:	9805      	ldr	r0, [sp, #20]
 800e89a:	462a      	mov	r2, r5
 800e89c:	f002 ff88 	bl	80117b0 <__lshift>
 800e8a0:	901a      	str	r0, [sp, #104]	@ 0x68
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d1d9      	bne.n	800e85a <_strtod_l+0x73a>
 800e8a6:	e65a      	b.n	800e55e <_strtod_l+0x43e>
 800e8a8:	2e00      	cmp	r6, #0
 800e8aa:	dd07      	ble.n	800e8bc <_strtod_l+0x79c>
 800e8ac:	4649      	mov	r1, r9
 800e8ae:	9805      	ldr	r0, [sp, #20]
 800e8b0:	4632      	mov	r2, r6
 800e8b2:	f002 ff7d 	bl	80117b0 <__lshift>
 800e8b6:	4681      	mov	r9, r0
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	d0d8      	beq.n	800e86e <_strtod_l+0x74e>
 800e8bc:	2f00      	cmp	r7, #0
 800e8be:	dd08      	ble.n	800e8d2 <_strtod_l+0x7b2>
 800e8c0:	4641      	mov	r1, r8
 800e8c2:	9805      	ldr	r0, [sp, #20]
 800e8c4:	463a      	mov	r2, r7
 800e8c6:	f002 ff73 	bl	80117b0 <__lshift>
 800e8ca:	4680      	mov	r8, r0
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	f43f ae46 	beq.w	800e55e <_strtod_l+0x43e>
 800e8d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e8d4:	9805      	ldr	r0, [sp, #20]
 800e8d6:	464a      	mov	r2, r9
 800e8d8:	f002 fff2 	bl	80118c0 <__mdiff>
 800e8dc:	4604      	mov	r4, r0
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	f43f ae3d 	beq.w	800e55e <_strtod_l+0x43e>
 800e8e4:	68c3      	ldr	r3, [r0, #12]
 800e8e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	60c3      	str	r3, [r0, #12]
 800e8ec:	4641      	mov	r1, r8
 800e8ee:	f002 ffcb 	bl	8011888 <__mcmp>
 800e8f2:	2800      	cmp	r0, #0
 800e8f4:	da46      	bge.n	800e984 <_strtod_l+0x864>
 800e8f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8f8:	ea53 030a 	orrs.w	r3, r3, sl
 800e8fc:	d16c      	bne.n	800e9d8 <_strtod_l+0x8b8>
 800e8fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e902:	2b00      	cmp	r3, #0
 800e904:	d168      	bne.n	800e9d8 <_strtod_l+0x8b8>
 800e906:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e90a:	0d1b      	lsrs	r3, r3, #20
 800e90c:	051b      	lsls	r3, r3, #20
 800e90e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e912:	d961      	bls.n	800e9d8 <_strtod_l+0x8b8>
 800e914:	6963      	ldr	r3, [r4, #20]
 800e916:	b913      	cbnz	r3, 800e91e <_strtod_l+0x7fe>
 800e918:	6923      	ldr	r3, [r4, #16]
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	dd5c      	ble.n	800e9d8 <_strtod_l+0x8b8>
 800e91e:	4621      	mov	r1, r4
 800e920:	2201      	movs	r2, #1
 800e922:	9805      	ldr	r0, [sp, #20]
 800e924:	f002 ff44 	bl	80117b0 <__lshift>
 800e928:	4641      	mov	r1, r8
 800e92a:	4604      	mov	r4, r0
 800e92c:	f002 ffac 	bl	8011888 <__mcmp>
 800e930:	2800      	cmp	r0, #0
 800e932:	dd51      	ble.n	800e9d8 <_strtod_l+0x8b8>
 800e934:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e938:	9a08      	ldr	r2, [sp, #32]
 800e93a:	0d1b      	lsrs	r3, r3, #20
 800e93c:	051b      	lsls	r3, r3, #20
 800e93e:	2a00      	cmp	r2, #0
 800e940:	d06b      	beq.n	800ea1a <_strtod_l+0x8fa>
 800e942:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e946:	d868      	bhi.n	800ea1a <_strtod_l+0x8fa>
 800e948:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e94c:	f67f ae9d 	bls.w	800e68a <_strtod_l+0x56a>
 800e950:	4b0a      	ldr	r3, [pc, #40]	@ (800e97c <_strtod_l+0x85c>)
 800e952:	4650      	mov	r0, sl
 800e954:	4659      	mov	r1, fp
 800e956:	2200      	movs	r2, #0
 800e958:	f7f1 fe76 	bl	8000648 <__aeabi_dmul>
 800e95c:	4b08      	ldr	r3, [pc, #32]	@ (800e980 <_strtod_l+0x860>)
 800e95e:	400b      	ands	r3, r1
 800e960:	4682      	mov	sl, r0
 800e962:	468b      	mov	fp, r1
 800e964:	2b00      	cmp	r3, #0
 800e966:	f47f ae05 	bne.w	800e574 <_strtod_l+0x454>
 800e96a:	9a05      	ldr	r2, [sp, #20]
 800e96c:	2322      	movs	r3, #34	@ 0x22
 800e96e:	6013      	str	r3, [r2, #0]
 800e970:	e600      	b.n	800e574 <_strtod_l+0x454>
 800e972:	bf00      	nop
 800e974:	08012c20 	.word	0x08012c20
 800e978:	fffffc02 	.word	0xfffffc02
 800e97c:	39500000 	.word	0x39500000
 800e980:	7ff00000 	.word	0x7ff00000
 800e984:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e988:	d165      	bne.n	800ea56 <_strtod_l+0x936>
 800e98a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e98c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e990:	b35a      	cbz	r2, 800e9ea <_strtod_l+0x8ca>
 800e992:	4a9f      	ldr	r2, [pc, #636]	@ (800ec10 <_strtod_l+0xaf0>)
 800e994:	4293      	cmp	r3, r2
 800e996:	d12b      	bne.n	800e9f0 <_strtod_l+0x8d0>
 800e998:	9b08      	ldr	r3, [sp, #32]
 800e99a:	4651      	mov	r1, sl
 800e99c:	b303      	cbz	r3, 800e9e0 <_strtod_l+0x8c0>
 800e99e:	4b9d      	ldr	r3, [pc, #628]	@ (800ec14 <_strtod_l+0xaf4>)
 800e9a0:	465a      	mov	r2, fp
 800e9a2:	4013      	ands	r3, r2
 800e9a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e9a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ac:	d81b      	bhi.n	800e9e6 <_strtod_l+0x8c6>
 800e9ae:	0d1b      	lsrs	r3, r3, #20
 800e9b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e9b4:	fa02 f303 	lsl.w	r3, r2, r3
 800e9b8:	4299      	cmp	r1, r3
 800e9ba:	d119      	bne.n	800e9f0 <_strtod_l+0x8d0>
 800e9bc:	4b96      	ldr	r3, [pc, #600]	@ (800ec18 <_strtod_l+0xaf8>)
 800e9be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d102      	bne.n	800e9ca <_strtod_l+0x8aa>
 800e9c4:	3101      	adds	r1, #1
 800e9c6:	f43f adca 	beq.w	800e55e <_strtod_l+0x43e>
 800e9ca:	4b92      	ldr	r3, [pc, #584]	@ (800ec14 <_strtod_l+0xaf4>)
 800e9cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9ce:	401a      	ands	r2, r3
 800e9d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e9d4:	f04f 0a00 	mov.w	sl, #0
 800e9d8:	9b08      	ldr	r3, [sp, #32]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d1b8      	bne.n	800e950 <_strtod_l+0x830>
 800e9de:	e5c9      	b.n	800e574 <_strtod_l+0x454>
 800e9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9e4:	e7e8      	b.n	800e9b8 <_strtod_l+0x898>
 800e9e6:	4613      	mov	r3, r2
 800e9e8:	e7e6      	b.n	800e9b8 <_strtod_l+0x898>
 800e9ea:	ea53 030a 	orrs.w	r3, r3, sl
 800e9ee:	d0a1      	beq.n	800e934 <_strtod_l+0x814>
 800e9f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e9f2:	b1db      	cbz	r3, 800ea2c <_strtod_l+0x90c>
 800e9f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9f6:	4213      	tst	r3, r2
 800e9f8:	d0ee      	beq.n	800e9d8 <_strtod_l+0x8b8>
 800e9fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9fc:	9a08      	ldr	r2, [sp, #32]
 800e9fe:	4650      	mov	r0, sl
 800ea00:	4659      	mov	r1, fp
 800ea02:	b1bb      	cbz	r3, 800ea34 <_strtod_l+0x914>
 800ea04:	f7ff fb6b 	bl	800e0de <sulp>
 800ea08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ea0c:	ec53 2b10 	vmov	r2, r3, d0
 800ea10:	f7f1 fc64 	bl	80002dc <__adddf3>
 800ea14:	4682      	mov	sl, r0
 800ea16:	468b      	mov	fp, r1
 800ea18:	e7de      	b.n	800e9d8 <_strtod_l+0x8b8>
 800ea1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ea1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ea22:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ea26:	f04f 3aff 	mov.w	sl, #4294967295
 800ea2a:	e7d5      	b.n	800e9d8 <_strtod_l+0x8b8>
 800ea2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ea2e:	ea13 0f0a 	tst.w	r3, sl
 800ea32:	e7e1      	b.n	800e9f8 <_strtod_l+0x8d8>
 800ea34:	f7ff fb53 	bl	800e0de <sulp>
 800ea38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ea3c:	ec53 2b10 	vmov	r2, r3, d0
 800ea40:	f7f1 fc4a 	bl	80002d8 <__aeabi_dsub>
 800ea44:	2200      	movs	r2, #0
 800ea46:	2300      	movs	r3, #0
 800ea48:	4682      	mov	sl, r0
 800ea4a:	468b      	mov	fp, r1
 800ea4c:	f7f2 f864 	bl	8000b18 <__aeabi_dcmpeq>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	d0c1      	beq.n	800e9d8 <_strtod_l+0x8b8>
 800ea54:	e619      	b.n	800e68a <_strtod_l+0x56a>
 800ea56:	4641      	mov	r1, r8
 800ea58:	4620      	mov	r0, r4
 800ea5a:	f003 f88d 	bl	8011b78 <__ratio>
 800ea5e:	ec57 6b10 	vmov	r6, r7, d0
 800ea62:	2200      	movs	r2, #0
 800ea64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ea68:	4630      	mov	r0, r6
 800ea6a:	4639      	mov	r1, r7
 800ea6c:	f7f2 f868 	bl	8000b40 <__aeabi_dcmple>
 800ea70:	2800      	cmp	r0, #0
 800ea72:	d06f      	beq.n	800eb54 <_strtod_l+0xa34>
 800ea74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d17a      	bne.n	800eb70 <_strtod_l+0xa50>
 800ea7a:	f1ba 0f00 	cmp.w	sl, #0
 800ea7e:	d158      	bne.n	800eb32 <_strtod_l+0xa12>
 800ea80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d15a      	bne.n	800eb40 <_strtod_l+0xa20>
 800ea8a:	4b64      	ldr	r3, [pc, #400]	@ (800ec1c <_strtod_l+0xafc>)
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	4630      	mov	r0, r6
 800ea90:	4639      	mov	r1, r7
 800ea92:	f7f2 f84b 	bl	8000b2c <__aeabi_dcmplt>
 800ea96:	2800      	cmp	r0, #0
 800ea98:	d159      	bne.n	800eb4e <_strtod_l+0xa2e>
 800ea9a:	4630      	mov	r0, r6
 800ea9c:	4639      	mov	r1, r7
 800ea9e:	4b60      	ldr	r3, [pc, #384]	@ (800ec20 <_strtod_l+0xb00>)
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	f7f1 fdd1 	bl	8000648 <__aeabi_dmul>
 800eaa6:	4606      	mov	r6, r0
 800eaa8:	460f      	mov	r7, r1
 800eaaa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800eaae:	9606      	str	r6, [sp, #24]
 800eab0:	9307      	str	r3, [sp, #28]
 800eab2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eab6:	4d57      	ldr	r5, [pc, #348]	@ (800ec14 <_strtod_l+0xaf4>)
 800eab8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800eabc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eabe:	401d      	ands	r5, r3
 800eac0:	4b58      	ldr	r3, [pc, #352]	@ (800ec24 <_strtod_l+0xb04>)
 800eac2:	429d      	cmp	r5, r3
 800eac4:	f040 80b2 	bne.w	800ec2c <_strtod_l+0xb0c>
 800eac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eaca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800eace:	ec4b ab10 	vmov	d0, sl, fp
 800ead2:	f002 ff89 	bl	80119e8 <__ulp>
 800ead6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eada:	ec51 0b10 	vmov	r0, r1, d0
 800eade:	f7f1 fdb3 	bl	8000648 <__aeabi_dmul>
 800eae2:	4652      	mov	r2, sl
 800eae4:	465b      	mov	r3, fp
 800eae6:	f7f1 fbf9 	bl	80002dc <__adddf3>
 800eaea:	460b      	mov	r3, r1
 800eaec:	4949      	ldr	r1, [pc, #292]	@ (800ec14 <_strtod_l+0xaf4>)
 800eaee:	4a4e      	ldr	r2, [pc, #312]	@ (800ec28 <_strtod_l+0xb08>)
 800eaf0:	4019      	ands	r1, r3
 800eaf2:	4291      	cmp	r1, r2
 800eaf4:	4682      	mov	sl, r0
 800eaf6:	d942      	bls.n	800eb7e <_strtod_l+0xa5e>
 800eaf8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eafa:	4b47      	ldr	r3, [pc, #284]	@ (800ec18 <_strtod_l+0xaf8>)
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d103      	bne.n	800eb08 <_strtod_l+0x9e8>
 800eb00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb02:	3301      	adds	r3, #1
 800eb04:	f43f ad2b 	beq.w	800e55e <_strtod_l+0x43e>
 800eb08:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ec18 <_strtod_l+0xaf8>
 800eb0c:	f04f 3aff 	mov.w	sl, #4294967295
 800eb10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eb12:	9805      	ldr	r0, [sp, #20]
 800eb14:	f002 fc34 	bl	8011380 <_Bfree>
 800eb18:	9805      	ldr	r0, [sp, #20]
 800eb1a:	4649      	mov	r1, r9
 800eb1c:	f002 fc30 	bl	8011380 <_Bfree>
 800eb20:	9805      	ldr	r0, [sp, #20]
 800eb22:	4641      	mov	r1, r8
 800eb24:	f002 fc2c 	bl	8011380 <_Bfree>
 800eb28:	9805      	ldr	r0, [sp, #20]
 800eb2a:	4621      	mov	r1, r4
 800eb2c:	f002 fc28 	bl	8011380 <_Bfree>
 800eb30:	e618      	b.n	800e764 <_strtod_l+0x644>
 800eb32:	f1ba 0f01 	cmp.w	sl, #1
 800eb36:	d103      	bne.n	800eb40 <_strtod_l+0xa20>
 800eb38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	f43f ada5 	beq.w	800e68a <_strtod_l+0x56a>
 800eb40:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ebf0 <_strtod_l+0xad0>
 800eb44:	4f35      	ldr	r7, [pc, #212]	@ (800ec1c <_strtod_l+0xafc>)
 800eb46:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eb4a:	2600      	movs	r6, #0
 800eb4c:	e7b1      	b.n	800eab2 <_strtod_l+0x992>
 800eb4e:	4f34      	ldr	r7, [pc, #208]	@ (800ec20 <_strtod_l+0xb00>)
 800eb50:	2600      	movs	r6, #0
 800eb52:	e7aa      	b.n	800eaaa <_strtod_l+0x98a>
 800eb54:	4b32      	ldr	r3, [pc, #200]	@ (800ec20 <_strtod_l+0xb00>)
 800eb56:	4630      	mov	r0, r6
 800eb58:	4639      	mov	r1, r7
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	f7f1 fd74 	bl	8000648 <__aeabi_dmul>
 800eb60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb62:	4606      	mov	r6, r0
 800eb64:	460f      	mov	r7, r1
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d09f      	beq.n	800eaaa <_strtod_l+0x98a>
 800eb6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800eb6e:	e7a0      	b.n	800eab2 <_strtod_l+0x992>
 800eb70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ebf8 <_strtod_l+0xad8>
 800eb74:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eb78:	ec57 6b17 	vmov	r6, r7, d7
 800eb7c:	e799      	b.n	800eab2 <_strtod_l+0x992>
 800eb7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800eb82:	9b08      	ldr	r3, [sp, #32]
 800eb84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d1c1      	bne.n	800eb10 <_strtod_l+0x9f0>
 800eb8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eb90:	0d1b      	lsrs	r3, r3, #20
 800eb92:	051b      	lsls	r3, r3, #20
 800eb94:	429d      	cmp	r5, r3
 800eb96:	d1bb      	bne.n	800eb10 <_strtod_l+0x9f0>
 800eb98:	4630      	mov	r0, r6
 800eb9a:	4639      	mov	r1, r7
 800eb9c:	f7f2 f8b4 	bl	8000d08 <__aeabi_d2lz>
 800eba0:	f7f1 fd24 	bl	80005ec <__aeabi_l2d>
 800eba4:	4602      	mov	r2, r0
 800eba6:	460b      	mov	r3, r1
 800eba8:	4630      	mov	r0, r6
 800ebaa:	4639      	mov	r1, r7
 800ebac:	f7f1 fb94 	bl	80002d8 <__aeabi_dsub>
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ebb8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ebbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebbe:	ea46 060a 	orr.w	r6, r6, sl
 800ebc2:	431e      	orrs	r6, r3
 800ebc4:	d06f      	beq.n	800eca6 <_strtod_l+0xb86>
 800ebc6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ec00 <_strtod_l+0xae0>)
 800ebc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebcc:	f7f1 ffae 	bl	8000b2c <__aeabi_dcmplt>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	f47f accf 	bne.w	800e574 <_strtod_l+0x454>
 800ebd6:	a30c      	add	r3, pc, #48	@ (adr r3, 800ec08 <_strtod_l+0xae8>)
 800ebd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ebe0:	f7f1 ffc2 	bl	8000b68 <__aeabi_dcmpgt>
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	d093      	beq.n	800eb10 <_strtod_l+0x9f0>
 800ebe8:	e4c4      	b.n	800e574 <_strtod_l+0x454>
 800ebea:	bf00      	nop
 800ebec:	f3af 8000 	nop.w
 800ebf0:	00000000 	.word	0x00000000
 800ebf4:	bff00000 	.word	0xbff00000
 800ebf8:	00000000 	.word	0x00000000
 800ebfc:	3ff00000 	.word	0x3ff00000
 800ec00:	94a03595 	.word	0x94a03595
 800ec04:	3fdfffff 	.word	0x3fdfffff
 800ec08:	35afe535 	.word	0x35afe535
 800ec0c:	3fe00000 	.word	0x3fe00000
 800ec10:	000fffff 	.word	0x000fffff
 800ec14:	7ff00000 	.word	0x7ff00000
 800ec18:	7fefffff 	.word	0x7fefffff
 800ec1c:	3ff00000 	.word	0x3ff00000
 800ec20:	3fe00000 	.word	0x3fe00000
 800ec24:	7fe00000 	.word	0x7fe00000
 800ec28:	7c9fffff 	.word	0x7c9fffff
 800ec2c:	9b08      	ldr	r3, [sp, #32]
 800ec2e:	b323      	cbz	r3, 800ec7a <_strtod_l+0xb5a>
 800ec30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ec34:	d821      	bhi.n	800ec7a <_strtod_l+0xb5a>
 800ec36:	a328      	add	r3, pc, #160	@ (adr r3, 800ecd8 <_strtod_l+0xbb8>)
 800ec38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3c:	4630      	mov	r0, r6
 800ec3e:	4639      	mov	r1, r7
 800ec40:	f7f1 ff7e 	bl	8000b40 <__aeabi_dcmple>
 800ec44:	b1a0      	cbz	r0, 800ec70 <_strtod_l+0xb50>
 800ec46:	4639      	mov	r1, r7
 800ec48:	4630      	mov	r0, r6
 800ec4a:	f7f1 ffd5 	bl	8000bf8 <__aeabi_d2uiz>
 800ec4e:	2801      	cmp	r0, #1
 800ec50:	bf38      	it	cc
 800ec52:	2001      	movcc	r0, #1
 800ec54:	f7f1 fc7e 	bl	8000554 <__aeabi_ui2d>
 800ec58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec5a:	4606      	mov	r6, r0
 800ec5c:	460f      	mov	r7, r1
 800ec5e:	b9fb      	cbnz	r3, 800eca0 <_strtod_l+0xb80>
 800ec60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ec64:	9014      	str	r0, [sp, #80]	@ 0x50
 800ec66:	9315      	str	r3, [sp, #84]	@ 0x54
 800ec68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ec6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ec70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ec72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ec76:	1b5b      	subs	r3, r3, r5
 800ec78:	9311      	str	r3, [sp, #68]	@ 0x44
 800ec7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ec7e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ec82:	f002 feb1 	bl	80119e8 <__ulp>
 800ec86:	4650      	mov	r0, sl
 800ec88:	ec53 2b10 	vmov	r2, r3, d0
 800ec8c:	4659      	mov	r1, fp
 800ec8e:	f7f1 fcdb 	bl	8000648 <__aeabi_dmul>
 800ec92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ec96:	f7f1 fb21 	bl	80002dc <__adddf3>
 800ec9a:	4682      	mov	sl, r0
 800ec9c:	468b      	mov	fp, r1
 800ec9e:	e770      	b.n	800eb82 <_strtod_l+0xa62>
 800eca0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800eca4:	e7e0      	b.n	800ec68 <_strtod_l+0xb48>
 800eca6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ece0 <_strtod_l+0xbc0>)
 800eca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecac:	f7f1 ff3e 	bl	8000b2c <__aeabi_dcmplt>
 800ecb0:	e798      	b.n	800ebe4 <_strtod_l+0xac4>
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ecb6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ecb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecba:	6013      	str	r3, [r2, #0]
 800ecbc:	f7ff ba6d 	b.w	800e19a <_strtod_l+0x7a>
 800ecc0:	2a65      	cmp	r2, #101	@ 0x65
 800ecc2:	f43f ab66 	beq.w	800e392 <_strtod_l+0x272>
 800ecc6:	2a45      	cmp	r2, #69	@ 0x45
 800ecc8:	f43f ab63 	beq.w	800e392 <_strtod_l+0x272>
 800eccc:	2301      	movs	r3, #1
 800ecce:	f7ff bb9e 	b.w	800e40e <_strtod_l+0x2ee>
 800ecd2:	bf00      	nop
 800ecd4:	f3af 8000 	nop.w
 800ecd8:	ffc00000 	.word	0xffc00000
 800ecdc:	41dfffff 	.word	0x41dfffff
 800ece0:	94a03595 	.word	0x94a03595
 800ece4:	3fcfffff 	.word	0x3fcfffff

0800ece8 <_strtod_r>:
 800ece8:	4b01      	ldr	r3, [pc, #4]	@ (800ecf0 <_strtod_r+0x8>)
 800ecea:	f7ff ba19 	b.w	800e120 <_strtod_l>
 800ecee:	bf00      	nop
 800ecf0:	2000009c 	.word	0x2000009c

0800ecf4 <strtod>:
 800ecf4:	460a      	mov	r2, r1
 800ecf6:	4601      	mov	r1, r0
 800ecf8:	4802      	ldr	r0, [pc, #8]	@ (800ed04 <strtod+0x10>)
 800ecfa:	4b03      	ldr	r3, [pc, #12]	@ (800ed08 <strtod+0x14>)
 800ecfc:	6800      	ldr	r0, [r0, #0]
 800ecfe:	f7ff ba0f 	b.w	800e120 <_strtod_l>
 800ed02:	bf00      	nop
 800ed04:	20000208 	.word	0x20000208
 800ed08:	2000009c 	.word	0x2000009c

0800ed0c <__cvt>:
 800ed0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed10:	ec57 6b10 	vmov	r6, r7, d0
 800ed14:	2f00      	cmp	r7, #0
 800ed16:	460c      	mov	r4, r1
 800ed18:	4619      	mov	r1, r3
 800ed1a:	463b      	mov	r3, r7
 800ed1c:	bfbb      	ittet	lt
 800ed1e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ed22:	461f      	movlt	r7, r3
 800ed24:	2300      	movge	r3, #0
 800ed26:	232d      	movlt	r3, #45	@ 0x2d
 800ed28:	700b      	strb	r3, [r1, #0]
 800ed2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed2c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ed30:	4691      	mov	r9, r2
 800ed32:	f023 0820 	bic.w	r8, r3, #32
 800ed36:	bfbc      	itt	lt
 800ed38:	4632      	movlt	r2, r6
 800ed3a:	4616      	movlt	r6, r2
 800ed3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ed40:	d005      	beq.n	800ed4e <__cvt+0x42>
 800ed42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ed46:	d100      	bne.n	800ed4a <__cvt+0x3e>
 800ed48:	3401      	adds	r4, #1
 800ed4a:	2102      	movs	r1, #2
 800ed4c:	e000      	b.n	800ed50 <__cvt+0x44>
 800ed4e:	2103      	movs	r1, #3
 800ed50:	ab03      	add	r3, sp, #12
 800ed52:	9301      	str	r3, [sp, #4]
 800ed54:	ab02      	add	r3, sp, #8
 800ed56:	9300      	str	r3, [sp, #0]
 800ed58:	ec47 6b10 	vmov	d0, r6, r7
 800ed5c:	4653      	mov	r3, sl
 800ed5e:	4622      	mov	r2, r4
 800ed60:	f001 f8be 	bl	800fee0 <_dtoa_r>
 800ed64:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ed68:	4605      	mov	r5, r0
 800ed6a:	d119      	bne.n	800eda0 <__cvt+0x94>
 800ed6c:	f019 0f01 	tst.w	r9, #1
 800ed70:	d00e      	beq.n	800ed90 <__cvt+0x84>
 800ed72:	eb00 0904 	add.w	r9, r0, r4
 800ed76:	2200      	movs	r2, #0
 800ed78:	2300      	movs	r3, #0
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	4639      	mov	r1, r7
 800ed7e:	f7f1 fecb 	bl	8000b18 <__aeabi_dcmpeq>
 800ed82:	b108      	cbz	r0, 800ed88 <__cvt+0x7c>
 800ed84:	f8cd 900c 	str.w	r9, [sp, #12]
 800ed88:	2230      	movs	r2, #48	@ 0x30
 800ed8a:	9b03      	ldr	r3, [sp, #12]
 800ed8c:	454b      	cmp	r3, r9
 800ed8e:	d31e      	bcc.n	800edce <__cvt+0xc2>
 800ed90:	9b03      	ldr	r3, [sp, #12]
 800ed92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed94:	1b5b      	subs	r3, r3, r5
 800ed96:	4628      	mov	r0, r5
 800ed98:	6013      	str	r3, [r2, #0]
 800ed9a:	b004      	add	sp, #16
 800ed9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eda0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eda4:	eb00 0904 	add.w	r9, r0, r4
 800eda8:	d1e5      	bne.n	800ed76 <__cvt+0x6a>
 800edaa:	7803      	ldrb	r3, [r0, #0]
 800edac:	2b30      	cmp	r3, #48	@ 0x30
 800edae:	d10a      	bne.n	800edc6 <__cvt+0xba>
 800edb0:	2200      	movs	r2, #0
 800edb2:	2300      	movs	r3, #0
 800edb4:	4630      	mov	r0, r6
 800edb6:	4639      	mov	r1, r7
 800edb8:	f7f1 feae 	bl	8000b18 <__aeabi_dcmpeq>
 800edbc:	b918      	cbnz	r0, 800edc6 <__cvt+0xba>
 800edbe:	f1c4 0401 	rsb	r4, r4, #1
 800edc2:	f8ca 4000 	str.w	r4, [sl]
 800edc6:	f8da 3000 	ldr.w	r3, [sl]
 800edca:	4499      	add	r9, r3
 800edcc:	e7d3      	b.n	800ed76 <__cvt+0x6a>
 800edce:	1c59      	adds	r1, r3, #1
 800edd0:	9103      	str	r1, [sp, #12]
 800edd2:	701a      	strb	r2, [r3, #0]
 800edd4:	e7d9      	b.n	800ed8a <__cvt+0x7e>

0800edd6 <__exponent>:
 800edd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edd8:	2900      	cmp	r1, #0
 800edda:	bfba      	itte	lt
 800eddc:	4249      	neglt	r1, r1
 800edde:	232d      	movlt	r3, #45	@ 0x2d
 800ede0:	232b      	movge	r3, #43	@ 0x2b
 800ede2:	2909      	cmp	r1, #9
 800ede4:	7002      	strb	r2, [r0, #0]
 800ede6:	7043      	strb	r3, [r0, #1]
 800ede8:	dd29      	ble.n	800ee3e <__exponent+0x68>
 800edea:	f10d 0307 	add.w	r3, sp, #7
 800edee:	461d      	mov	r5, r3
 800edf0:	270a      	movs	r7, #10
 800edf2:	461a      	mov	r2, r3
 800edf4:	fbb1 f6f7 	udiv	r6, r1, r7
 800edf8:	fb07 1416 	mls	r4, r7, r6, r1
 800edfc:	3430      	adds	r4, #48	@ 0x30
 800edfe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ee02:	460c      	mov	r4, r1
 800ee04:	2c63      	cmp	r4, #99	@ 0x63
 800ee06:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee0a:	4631      	mov	r1, r6
 800ee0c:	dcf1      	bgt.n	800edf2 <__exponent+0x1c>
 800ee0e:	3130      	adds	r1, #48	@ 0x30
 800ee10:	1e94      	subs	r4, r2, #2
 800ee12:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ee16:	1c41      	adds	r1, r0, #1
 800ee18:	4623      	mov	r3, r4
 800ee1a:	42ab      	cmp	r3, r5
 800ee1c:	d30a      	bcc.n	800ee34 <__exponent+0x5e>
 800ee1e:	f10d 0309 	add.w	r3, sp, #9
 800ee22:	1a9b      	subs	r3, r3, r2
 800ee24:	42ac      	cmp	r4, r5
 800ee26:	bf88      	it	hi
 800ee28:	2300      	movhi	r3, #0
 800ee2a:	3302      	adds	r3, #2
 800ee2c:	4403      	add	r3, r0
 800ee2e:	1a18      	subs	r0, r3, r0
 800ee30:	b003      	add	sp, #12
 800ee32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee34:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ee38:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ee3c:	e7ed      	b.n	800ee1a <__exponent+0x44>
 800ee3e:	2330      	movs	r3, #48	@ 0x30
 800ee40:	3130      	adds	r1, #48	@ 0x30
 800ee42:	7083      	strb	r3, [r0, #2]
 800ee44:	70c1      	strb	r1, [r0, #3]
 800ee46:	1d03      	adds	r3, r0, #4
 800ee48:	e7f1      	b.n	800ee2e <__exponent+0x58>
	...

0800ee4c <_printf_float>:
 800ee4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee50:	b08d      	sub	sp, #52	@ 0x34
 800ee52:	460c      	mov	r4, r1
 800ee54:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ee58:	4616      	mov	r6, r2
 800ee5a:	461f      	mov	r7, r3
 800ee5c:	4605      	mov	r5, r0
 800ee5e:	f000 ff21 	bl	800fca4 <_localeconv_r>
 800ee62:	6803      	ldr	r3, [r0, #0]
 800ee64:	9304      	str	r3, [sp, #16]
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7f1 fa2a 	bl	80002c0 <strlen>
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee70:	f8d8 3000 	ldr.w	r3, [r8]
 800ee74:	9005      	str	r0, [sp, #20]
 800ee76:	3307      	adds	r3, #7
 800ee78:	f023 0307 	bic.w	r3, r3, #7
 800ee7c:	f103 0208 	add.w	r2, r3, #8
 800ee80:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ee84:	f8d4 b000 	ldr.w	fp, [r4]
 800ee88:	f8c8 2000 	str.w	r2, [r8]
 800ee8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ee94:	9307      	str	r3, [sp, #28]
 800ee96:	f8cd 8018 	str.w	r8, [sp, #24]
 800ee9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ee9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eea2:	4b9c      	ldr	r3, [pc, #624]	@ (800f114 <_printf_float+0x2c8>)
 800eea4:	f04f 32ff 	mov.w	r2, #4294967295
 800eea8:	f7f1 fe68 	bl	8000b7c <__aeabi_dcmpun>
 800eeac:	bb70      	cbnz	r0, 800ef0c <_printf_float+0xc0>
 800eeae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eeb2:	4b98      	ldr	r3, [pc, #608]	@ (800f114 <_printf_float+0x2c8>)
 800eeb4:	f04f 32ff 	mov.w	r2, #4294967295
 800eeb8:	f7f1 fe42 	bl	8000b40 <__aeabi_dcmple>
 800eebc:	bb30      	cbnz	r0, 800ef0c <_printf_float+0xc0>
 800eebe:	2200      	movs	r2, #0
 800eec0:	2300      	movs	r3, #0
 800eec2:	4640      	mov	r0, r8
 800eec4:	4649      	mov	r1, r9
 800eec6:	f7f1 fe31 	bl	8000b2c <__aeabi_dcmplt>
 800eeca:	b110      	cbz	r0, 800eed2 <_printf_float+0x86>
 800eecc:	232d      	movs	r3, #45	@ 0x2d
 800eece:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eed2:	4a91      	ldr	r2, [pc, #580]	@ (800f118 <_printf_float+0x2cc>)
 800eed4:	4b91      	ldr	r3, [pc, #580]	@ (800f11c <_printf_float+0x2d0>)
 800eed6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800eeda:	bf94      	ite	ls
 800eedc:	4690      	movls	r8, r2
 800eede:	4698      	movhi	r8, r3
 800eee0:	2303      	movs	r3, #3
 800eee2:	6123      	str	r3, [r4, #16]
 800eee4:	f02b 0304 	bic.w	r3, fp, #4
 800eee8:	6023      	str	r3, [r4, #0]
 800eeea:	f04f 0900 	mov.w	r9, #0
 800eeee:	9700      	str	r7, [sp, #0]
 800eef0:	4633      	mov	r3, r6
 800eef2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800eef4:	4621      	mov	r1, r4
 800eef6:	4628      	mov	r0, r5
 800eef8:	f000 f9d2 	bl	800f2a0 <_printf_common>
 800eefc:	3001      	adds	r0, #1
 800eefe:	f040 808d 	bne.w	800f01c <_printf_float+0x1d0>
 800ef02:	f04f 30ff 	mov.w	r0, #4294967295
 800ef06:	b00d      	add	sp, #52	@ 0x34
 800ef08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef0c:	4642      	mov	r2, r8
 800ef0e:	464b      	mov	r3, r9
 800ef10:	4640      	mov	r0, r8
 800ef12:	4649      	mov	r1, r9
 800ef14:	f7f1 fe32 	bl	8000b7c <__aeabi_dcmpun>
 800ef18:	b140      	cbz	r0, 800ef2c <_printf_float+0xe0>
 800ef1a:	464b      	mov	r3, r9
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	bfbc      	itt	lt
 800ef20:	232d      	movlt	r3, #45	@ 0x2d
 800ef22:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ef26:	4a7e      	ldr	r2, [pc, #504]	@ (800f120 <_printf_float+0x2d4>)
 800ef28:	4b7e      	ldr	r3, [pc, #504]	@ (800f124 <_printf_float+0x2d8>)
 800ef2a:	e7d4      	b.n	800eed6 <_printf_float+0x8a>
 800ef2c:	6863      	ldr	r3, [r4, #4]
 800ef2e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ef32:	9206      	str	r2, [sp, #24]
 800ef34:	1c5a      	adds	r2, r3, #1
 800ef36:	d13b      	bne.n	800efb0 <_printf_float+0x164>
 800ef38:	2306      	movs	r3, #6
 800ef3a:	6063      	str	r3, [r4, #4]
 800ef3c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ef40:	2300      	movs	r3, #0
 800ef42:	6022      	str	r2, [r4, #0]
 800ef44:	9303      	str	r3, [sp, #12]
 800ef46:	ab0a      	add	r3, sp, #40	@ 0x28
 800ef48:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ef4c:	ab09      	add	r3, sp, #36	@ 0x24
 800ef4e:	9300      	str	r3, [sp, #0]
 800ef50:	6861      	ldr	r1, [r4, #4]
 800ef52:	ec49 8b10 	vmov	d0, r8, r9
 800ef56:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	f7ff fed6 	bl	800ed0c <__cvt>
 800ef60:	9b06      	ldr	r3, [sp, #24]
 800ef62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef64:	2b47      	cmp	r3, #71	@ 0x47
 800ef66:	4680      	mov	r8, r0
 800ef68:	d129      	bne.n	800efbe <_printf_float+0x172>
 800ef6a:	1cc8      	adds	r0, r1, #3
 800ef6c:	db02      	blt.n	800ef74 <_printf_float+0x128>
 800ef6e:	6863      	ldr	r3, [r4, #4]
 800ef70:	4299      	cmp	r1, r3
 800ef72:	dd41      	ble.n	800eff8 <_printf_float+0x1ac>
 800ef74:	f1aa 0a02 	sub.w	sl, sl, #2
 800ef78:	fa5f fa8a 	uxtb.w	sl, sl
 800ef7c:	3901      	subs	r1, #1
 800ef7e:	4652      	mov	r2, sl
 800ef80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ef84:	9109      	str	r1, [sp, #36]	@ 0x24
 800ef86:	f7ff ff26 	bl	800edd6 <__exponent>
 800ef8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef8c:	1813      	adds	r3, r2, r0
 800ef8e:	2a01      	cmp	r2, #1
 800ef90:	4681      	mov	r9, r0
 800ef92:	6123      	str	r3, [r4, #16]
 800ef94:	dc02      	bgt.n	800ef9c <_printf_float+0x150>
 800ef96:	6822      	ldr	r2, [r4, #0]
 800ef98:	07d2      	lsls	r2, r2, #31
 800ef9a:	d501      	bpl.n	800efa0 <_printf_float+0x154>
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	6123      	str	r3, [r4, #16]
 800efa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d0a2      	beq.n	800eeee <_printf_float+0xa2>
 800efa8:	232d      	movs	r3, #45	@ 0x2d
 800efaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efae:	e79e      	b.n	800eeee <_printf_float+0xa2>
 800efb0:	9a06      	ldr	r2, [sp, #24]
 800efb2:	2a47      	cmp	r2, #71	@ 0x47
 800efb4:	d1c2      	bne.n	800ef3c <_printf_float+0xf0>
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1c0      	bne.n	800ef3c <_printf_float+0xf0>
 800efba:	2301      	movs	r3, #1
 800efbc:	e7bd      	b.n	800ef3a <_printf_float+0xee>
 800efbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800efc2:	d9db      	bls.n	800ef7c <_printf_float+0x130>
 800efc4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800efc8:	d118      	bne.n	800effc <_printf_float+0x1b0>
 800efca:	2900      	cmp	r1, #0
 800efcc:	6863      	ldr	r3, [r4, #4]
 800efce:	dd0b      	ble.n	800efe8 <_printf_float+0x19c>
 800efd0:	6121      	str	r1, [r4, #16]
 800efd2:	b913      	cbnz	r3, 800efda <_printf_float+0x18e>
 800efd4:	6822      	ldr	r2, [r4, #0]
 800efd6:	07d0      	lsls	r0, r2, #31
 800efd8:	d502      	bpl.n	800efe0 <_printf_float+0x194>
 800efda:	3301      	adds	r3, #1
 800efdc:	440b      	add	r3, r1
 800efde:	6123      	str	r3, [r4, #16]
 800efe0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800efe2:	f04f 0900 	mov.w	r9, #0
 800efe6:	e7db      	b.n	800efa0 <_printf_float+0x154>
 800efe8:	b913      	cbnz	r3, 800eff0 <_printf_float+0x1a4>
 800efea:	6822      	ldr	r2, [r4, #0]
 800efec:	07d2      	lsls	r2, r2, #31
 800efee:	d501      	bpl.n	800eff4 <_printf_float+0x1a8>
 800eff0:	3302      	adds	r3, #2
 800eff2:	e7f4      	b.n	800efde <_printf_float+0x192>
 800eff4:	2301      	movs	r3, #1
 800eff6:	e7f2      	b.n	800efde <_printf_float+0x192>
 800eff8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800effc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800effe:	4299      	cmp	r1, r3
 800f000:	db05      	blt.n	800f00e <_printf_float+0x1c2>
 800f002:	6823      	ldr	r3, [r4, #0]
 800f004:	6121      	str	r1, [r4, #16]
 800f006:	07d8      	lsls	r0, r3, #31
 800f008:	d5ea      	bpl.n	800efe0 <_printf_float+0x194>
 800f00a:	1c4b      	adds	r3, r1, #1
 800f00c:	e7e7      	b.n	800efde <_printf_float+0x192>
 800f00e:	2900      	cmp	r1, #0
 800f010:	bfd4      	ite	le
 800f012:	f1c1 0202 	rsble	r2, r1, #2
 800f016:	2201      	movgt	r2, #1
 800f018:	4413      	add	r3, r2
 800f01a:	e7e0      	b.n	800efde <_printf_float+0x192>
 800f01c:	6823      	ldr	r3, [r4, #0]
 800f01e:	055a      	lsls	r2, r3, #21
 800f020:	d407      	bmi.n	800f032 <_printf_float+0x1e6>
 800f022:	6923      	ldr	r3, [r4, #16]
 800f024:	4642      	mov	r2, r8
 800f026:	4631      	mov	r1, r6
 800f028:	4628      	mov	r0, r5
 800f02a:	47b8      	blx	r7
 800f02c:	3001      	adds	r0, #1
 800f02e:	d12b      	bne.n	800f088 <_printf_float+0x23c>
 800f030:	e767      	b.n	800ef02 <_printf_float+0xb6>
 800f032:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f036:	f240 80dd 	bls.w	800f1f4 <_printf_float+0x3a8>
 800f03a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f03e:	2200      	movs	r2, #0
 800f040:	2300      	movs	r3, #0
 800f042:	f7f1 fd69 	bl	8000b18 <__aeabi_dcmpeq>
 800f046:	2800      	cmp	r0, #0
 800f048:	d033      	beq.n	800f0b2 <_printf_float+0x266>
 800f04a:	4a37      	ldr	r2, [pc, #220]	@ (800f128 <_printf_float+0x2dc>)
 800f04c:	2301      	movs	r3, #1
 800f04e:	4631      	mov	r1, r6
 800f050:	4628      	mov	r0, r5
 800f052:	47b8      	blx	r7
 800f054:	3001      	adds	r0, #1
 800f056:	f43f af54 	beq.w	800ef02 <_printf_float+0xb6>
 800f05a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f05e:	4543      	cmp	r3, r8
 800f060:	db02      	blt.n	800f068 <_printf_float+0x21c>
 800f062:	6823      	ldr	r3, [r4, #0]
 800f064:	07d8      	lsls	r0, r3, #31
 800f066:	d50f      	bpl.n	800f088 <_printf_float+0x23c>
 800f068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f06c:	4631      	mov	r1, r6
 800f06e:	4628      	mov	r0, r5
 800f070:	47b8      	blx	r7
 800f072:	3001      	adds	r0, #1
 800f074:	f43f af45 	beq.w	800ef02 <_printf_float+0xb6>
 800f078:	f04f 0900 	mov.w	r9, #0
 800f07c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f080:	f104 0a1a 	add.w	sl, r4, #26
 800f084:	45c8      	cmp	r8, r9
 800f086:	dc09      	bgt.n	800f09c <_printf_float+0x250>
 800f088:	6823      	ldr	r3, [r4, #0]
 800f08a:	079b      	lsls	r3, r3, #30
 800f08c:	f100 8103 	bmi.w	800f296 <_printf_float+0x44a>
 800f090:	68e0      	ldr	r0, [r4, #12]
 800f092:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f094:	4298      	cmp	r0, r3
 800f096:	bfb8      	it	lt
 800f098:	4618      	movlt	r0, r3
 800f09a:	e734      	b.n	800ef06 <_printf_float+0xba>
 800f09c:	2301      	movs	r3, #1
 800f09e:	4652      	mov	r2, sl
 800f0a0:	4631      	mov	r1, r6
 800f0a2:	4628      	mov	r0, r5
 800f0a4:	47b8      	blx	r7
 800f0a6:	3001      	adds	r0, #1
 800f0a8:	f43f af2b 	beq.w	800ef02 <_printf_float+0xb6>
 800f0ac:	f109 0901 	add.w	r9, r9, #1
 800f0b0:	e7e8      	b.n	800f084 <_printf_float+0x238>
 800f0b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	dc39      	bgt.n	800f12c <_printf_float+0x2e0>
 800f0b8:	4a1b      	ldr	r2, [pc, #108]	@ (800f128 <_printf_float+0x2dc>)
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	4631      	mov	r1, r6
 800f0be:	4628      	mov	r0, r5
 800f0c0:	47b8      	blx	r7
 800f0c2:	3001      	adds	r0, #1
 800f0c4:	f43f af1d 	beq.w	800ef02 <_printf_float+0xb6>
 800f0c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f0cc:	ea59 0303 	orrs.w	r3, r9, r3
 800f0d0:	d102      	bne.n	800f0d8 <_printf_float+0x28c>
 800f0d2:	6823      	ldr	r3, [r4, #0]
 800f0d4:	07d9      	lsls	r1, r3, #31
 800f0d6:	d5d7      	bpl.n	800f088 <_printf_float+0x23c>
 800f0d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0dc:	4631      	mov	r1, r6
 800f0de:	4628      	mov	r0, r5
 800f0e0:	47b8      	blx	r7
 800f0e2:	3001      	adds	r0, #1
 800f0e4:	f43f af0d 	beq.w	800ef02 <_printf_float+0xb6>
 800f0e8:	f04f 0a00 	mov.w	sl, #0
 800f0ec:	f104 0b1a 	add.w	fp, r4, #26
 800f0f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0f2:	425b      	negs	r3, r3
 800f0f4:	4553      	cmp	r3, sl
 800f0f6:	dc01      	bgt.n	800f0fc <_printf_float+0x2b0>
 800f0f8:	464b      	mov	r3, r9
 800f0fa:	e793      	b.n	800f024 <_printf_float+0x1d8>
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	465a      	mov	r2, fp
 800f100:	4631      	mov	r1, r6
 800f102:	4628      	mov	r0, r5
 800f104:	47b8      	blx	r7
 800f106:	3001      	adds	r0, #1
 800f108:	f43f aefb 	beq.w	800ef02 <_printf_float+0xb6>
 800f10c:	f10a 0a01 	add.w	sl, sl, #1
 800f110:	e7ee      	b.n	800f0f0 <_printf_float+0x2a4>
 800f112:	bf00      	nop
 800f114:	7fefffff 	.word	0x7fefffff
 800f118:	08012c48 	.word	0x08012c48
 800f11c:	08012c4c 	.word	0x08012c4c
 800f120:	08012c50 	.word	0x08012c50
 800f124:	08012c54 	.word	0x08012c54
 800f128:	08012c58 	.word	0x08012c58
 800f12c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f12e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f132:	4553      	cmp	r3, sl
 800f134:	bfa8      	it	ge
 800f136:	4653      	movge	r3, sl
 800f138:	2b00      	cmp	r3, #0
 800f13a:	4699      	mov	r9, r3
 800f13c:	dc36      	bgt.n	800f1ac <_printf_float+0x360>
 800f13e:	f04f 0b00 	mov.w	fp, #0
 800f142:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f146:	f104 021a 	add.w	r2, r4, #26
 800f14a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f14c:	9306      	str	r3, [sp, #24]
 800f14e:	eba3 0309 	sub.w	r3, r3, r9
 800f152:	455b      	cmp	r3, fp
 800f154:	dc31      	bgt.n	800f1ba <_printf_float+0x36e>
 800f156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f158:	459a      	cmp	sl, r3
 800f15a:	dc3a      	bgt.n	800f1d2 <_printf_float+0x386>
 800f15c:	6823      	ldr	r3, [r4, #0]
 800f15e:	07da      	lsls	r2, r3, #31
 800f160:	d437      	bmi.n	800f1d2 <_printf_float+0x386>
 800f162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f164:	ebaa 0903 	sub.w	r9, sl, r3
 800f168:	9b06      	ldr	r3, [sp, #24]
 800f16a:	ebaa 0303 	sub.w	r3, sl, r3
 800f16e:	4599      	cmp	r9, r3
 800f170:	bfa8      	it	ge
 800f172:	4699      	movge	r9, r3
 800f174:	f1b9 0f00 	cmp.w	r9, #0
 800f178:	dc33      	bgt.n	800f1e2 <_printf_float+0x396>
 800f17a:	f04f 0800 	mov.w	r8, #0
 800f17e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f182:	f104 0b1a 	add.w	fp, r4, #26
 800f186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f188:	ebaa 0303 	sub.w	r3, sl, r3
 800f18c:	eba3 0309 	sub.w	r3, r3, r9
 800f190:	4543      	cmp	r3, r8
 800f192:	f77f af79 	ble.w	800f088 <_printf_float+0x23c>
 800f196:	2301      	movs	r3, #1
 800f198:	465a      	mov	r2, fp
 800f19a:	4631      	mov	r1, r6
 800f19c:	4628      	mov	r0, r5
 800f19e:	47b8      	blx	r7
 800f1a0:	3001      	adds	r0, #1
 800f1a2:	f43f aeae 	beq.w	800ef02 <_printf_float+0xb6>
 800f1a6:	f108 0801 	add.w	r8, r8, #1
 800f1aa:	e7ec      	b.n	800f186 <_printf_float+0x33a>
 800f1ac:	4642      	mov	r2, r8
 800f1ae:	4631      	mov	r1, r6
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	47b8      	blx	r7
 800f1b4:	3001      	adds	r0, #1
 800f1b6:	d1c2      	bne.n	800f13e <_printf_float+0x2f2>
 800f1b8:	e6a3      	b.n	800ef02 <_printf_float+0xb6>
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	4631      	mov	r1, r6
 800f1be:	4628      	mov	r0, r5
 800f1c0:	9206      	str	r2, [sp, #24]
 800f1c2:	47b8      	blx	r7
 800f1c4:	3001      	adds	r0, #1
 800f1c6:	f43f ae9c 	beq.w	800ef02 <_printf_float+0xb6>
 800f1ca:	9a06      	ldr	r2, [sp, #24]
 800f1cc:	f10b 0b01 	add.w	fp, fp, #1
 800f1d0:	e7bb      	b.n	800f14a <_printf_float+0x2fe>
 800f1d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1d6:	4631      	mov	r1, r6
 800f1d8:	4628      	mov	r0, r5
 800f1da:	47b8      	blx	r7
 800f1dc:	3001      	adds	r0, #1
 800f1de:	d1c0      	bne.n	800f162 <_printf_float+0x316>
 800f1e0:	e68f      	b.n	800ef02 <_printf_float+0xb6>
 800f1e2:	9a06      	ldr	r2, [sp, #24]
 800f1e4:	464b      	mov	r3, r9
 800f1e6:	4442      	add	r2, r8
 800f1e8:	4631      	mov	r1, r6
 800f1ea:	4628      	mov	r0, r5
 800f1ec:	47b8      	blx	r7
 800f1ee:	3001      	adds	r0, #1
 800f1f0:	d1c3      	bne.n	800f17a <_printf_float+0x32e>
 800f1f2:	e686      	b.n	800ef02 <_printf_float+0xb6>
 800f1f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f1f8:	f1ba 0f01 	cmp.w	sl, #1
 800f1fc:	dc01      	bgt.n	800f202 <_printf_float+0x3b6>
 800f1fe:	07db      	lsls	r3, r3, #31
 800f200:	d536      	bpl.n	800f270 <_printf_float+0x424>
 800f202:	2301      	movs	r3, #1
 800f204:	4642      	mov	r2, r8
 800f206:	4631      	mov	r1, r6
 800f208:	4628      	mov	r0, r5
 800f20a:	47b8      	blx	r7
 800f20c:	3001      	adds	r0, #1
 800f20e:	f43f ae78 	beq.w	800ef02 <_printf_float+0xb6>
 800f212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f216:	4631      	mov	r1, r6
 800f218:	4628      	mov	r0, r5
 800f21a:	47b8      	blx	r7
 800f21c:	3001      	adds	r0, #1
 800f21e:	f43f ae70 	beq.w	800ef02 <_printf_float+0xb6>
 800f222:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f226:	2200      	movs	r2, #0
 800f228:	2300      	movs	r3, #0
 800f22a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f22e:	f7f1 fc73 	bl	8000b18 <__aeabi_dcmpeq>
 800f232:	b9c0      	cbnz	r0, 800f266 <_printf_float+0x41a>
 800f234:	4653      	mov	r3, sl
 800f236:	f108 0201 	add.w	r2, r8, #1
 800f23a:	4631      	mov	r1, r6
 800f23c:	4628      	mov	r0, r5
 800f23e:	47b8      	blx	r7
 800f240:	3001      	adds	r0, #1
 800f242:	d10c      	bne.n	800f25e <_printf_float+0x412>
 800f244:	e65d      	b.n	800ef02 <_printf_float+0xb6>
 800f246:	2301      	movs	r3, #1
 800f248:	465a      	mov	r2, fp
 800f24a:	4631      	mov	r1, r6
 800f24c:	4628      	mov	r0, r5
 800f24e:	47b8      	blx	r7
 800f250:	3001      	adds	r0, #1
 800f252:	f43f ae56 	beq.w	800ef02 <_printf_float+0xb6>
 800f256:	f108 0801 	add.w	r8, r8, #1
 800f25a:	45d0      	cmp	r8, sl
 800f25c:	dbf3      	blt.n	800f246 <_printf_float+0x3fa>
 800f25e:	464b      	mov	r3, r9
 800f260:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f264:	e6df      	b.n	800f026 <_printf_float+0x1da>
 800f266:	f04f 0800 	mov.w	r8, #0
 800f26a:	f104 0b1a 	add.w	fp, r4, #26
 800f26e:	e7f4      	b.n	800f25a <_printf_float+0x40e>
 800f270:	2301      	movs	r3, #1
 800f272:	4642      	mov	r2, r8
 800f274:	e7e1      	b.n	800f23a <_printf_float+0x3ee>
 800f276:	2301      	movs	r3, #1
 800f278:	464a      	mov	r2, r9
 800f27a:	4631      	mov	r1, r6
 800f27c:	4628      	mov	r0, r5
 800f27e:	47b8      	blx	r7
 800f280:	3001      	adds	r0, #1
 800f282:	f43f ae3e 	beq.w	800ef02 <_printf_float+0xb6>
 800f286:	f108 0801 	add.w	r8, r8, #1
 800f28a:	68e3      	ldr	r3, [r4, #12]
 800f28c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f28e:	1a5b      	subs	r3, r3, r1
 800f290:	4543      	cmp	r3, r8
 800f292:	dcf0      	bgt.n	800f276 <_printf_float+0x42a>
 800f294:	e6fc      	b.n	800f090 <_printf_float+0x244>
 800f296:	f04f 0800 	mov.w	r8, #0
 800f29a:	f104 0919 	add.w	r9, r4, #25
 800f29e:	e7f4      	b.n	800f28a <_printf_float+0x43e>

0800f2a0 <_printf_common>:
 800f2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2a4:	4616      	mov	r6, r2
 800f2a6:	4698      	mov	r8, r3
 800f2a8:	688a      	ldr	r2, [r1, #8]
 800f2aa:	690b      	ldr	r3, [r1, #16]
 800f2ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	bfb8      	it	lt
 800f2b4:	4613      	movlt	r3, r2
 800f2b6:	6033      	str	r3, [r6, #0]
 800f2b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f2bc:	4607      	mov	r7, r0
 800f2be:	460c      	mov	r4, r1
 800f2c0:	b10a      	cbz	r2, 800f2c6 <_printf_common+0x26>
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	6033      	str	r3, [r6, #0]
 800f2c6:	6823      	ldr	r3, [r4, #0]
 800f2c8:	0699      	lsls	r1, r3, #26
 800f2ca:	bf42      	ittt	mi
 800f2cc:	6833      	ldrmi	r3, [r6, #0]
 800f2ce:	3302      	addmi	r3, #2
 800f2d0:	6033      	strmi	r3, [r6, #0]
 800f2d2:	6825      	ldr	r5, [r4, #0]
 800f2d4:	f015 0506 	ands.w	r5, r5, #6
 800f2d8:	d106      	bne.n	800f2e8 <_printf_common+0x48>
 800f2da:	f104 0a19 	add.w	sl, r4, #25
 800f2de:	68e3      	ldr	r3, [r4, #12]
 800f2e0:	6832      	ldr	r2, [r6, #0]
 800f2e2:	1a9b      	subs	r3, r3, r2
 800f2e4:	42ab      	cmp	r3, r5
 800f2e6:	dc26      	bgt.n	800f336 <_printf_common+0x96>
 800f2e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f2ec:	6822      	ldr	r2, [r4, #0]
 800f2ee:	3b00      	subs	r3, #0
 800f2f0:	bf18      	it	ne
 800f2f2:	2301      	movne	r3, #1
 800f2f4:	0692      	lsls	r2, r2, #26
 800f2f6:	d42b      	bmi.n	800f350 <_printf_common+0xb0>
 800f2f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f2fc:	4641      	mov	r1, r8
 800f2fe:	4638      	mov	r0, r7
 800f300:	47c8      	blx	r9
 800f302:	3001      	adds	r0, #1
 800f304:	d01e      	beq.n	800f344 <_printf_common+0xa4>
 800f306:	6823      	ldr	r3, [r4, #0]
 800f308:	6922      	ldr	r2, [r4, #16]
 800f30a:	f003 0306 	and.w	r3, r3, #6
 800f30e:	2b04      	cmp	r3, #4
 800f310:	bf02      	ittt	eq
 800f312:	68e5      	ldreq	r5, [r4, #12]
 800f314:	6833      	ldreq	r3, [r6, #0]
 800f316:	1aed      	subeq	r5, r5, r3
 800f318:	68a3      	ldr	r3, [r4, #8]
 800f31a:	bf0c      	ite	eq
 800f31c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f320:	2500      	movne	r5, #0
 800f322:	4293      	cmp	r3, r2
 800f324:	bfc4      	itt	gt
 800f326:	1a9b      	subgt	r3, r3, r2
 800f328:	18ed      	addgt	r5, r5, r3
 800f32a:	2600      	movs	r6, #0
 800f32c:	341a      	adds	r4, #26
 800f32e:	42b5      	cmp	r5, r6
 800f330:	d11a      	bne.n	800f368 <_printf_common+0xc8>
 800f332:	2000      	movs	r0, #0
 800f334:	e008      	b.n	800f348 <_printf_common+0xa8>
 800f336:	2301      	movs	r3, #1
 800f338:	4652      	mov	r2, sl
 800f33a:	4641      	mov	r1, r8
 800f33c:	4638      	mov	r0, r7
 800f33e:	47c8      	blx	r9
 800f340:	3001      	adds	r0, #1
 800f342:	d103      	bne.n	800f34c <_printf_common+0xac>
 800f344:	f04f 30ff 	mov.w	r0, #4294967295
 800f348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f34c:	3501      	adds	r5, #1
 800f34e:	e7c6      	b.n	800f2de <_printf_common+0x3e>
 800f350:	18e1      	adds	r1, r4, r3
 800f352:	1c5a      	adds	r2, r3, #1
 800f354:	2030      	movs	r0, #48	@ 0x30
 800f356:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f35a:	4422      	add	r2, r4
 800f35c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f360:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f364:	3302      	adds	r3, #2
 800f366:	e7c7      	b.n	800f2f8 <_printf_common+0x58>
 800f368:	2301      	movs	r3, #1
 800f36a:	4622      	mov	r2, r4
 800f36c:	4641      	mov	r1, r8
 800f36e:	4638      	mov	r0, r7
 800f370:	47c8      	blx	r9
 800f372:	3001      	adds	r0, #1
 800f374:	d0e6      	beq.n	800f344 <_printf_common+0xa4>
 800f376:	3601      	adds	r6, #1
 800f378:	e7d9      	b.n	800f32e <_printf_common+0x8e>
	...

0800f37c <_printf_i>:
 800f37c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f380:	7e0f      	ldrb	r7, [r1, #24]
 800f382:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f384:	2f78      	cmp	r7, #120	@ 0x78
 800f386:	4691      	mov	r9, r2
 800f388:	4680      	mov	r8, r0
 800f38a:	460c      	mov	r4, r1
 800f38c:	469a      	mov	sl, r3
 800f38e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f392:	d807      	bhi.n	800f3a4 <_printf_i+0x28>
 800f394:	2f62      	cmp	r7, #98	@ 0x62
 800f396:	d80a      	bhi.n	800f3ae <_printf_i+0x32>
 800f398:	2f00      	cmp	r7, #0
 800f39a:	f000 80d2 	beq.w	800f542 <_printf_i+0x1c6>
 800f39e:	2f58      	cmp	r7, #88	@ 0x58
 800f3a0:	f000 80b9 	beq.w	800f516 <_printf_i+0x19a>
 800f3a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f3a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f3ac:	e03a      	b.n	800f424 <_printf_i+0xa8>
 800f3ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f3b2:	2b15      	cmp	r3, #21
 800f3b4:	d8f6      	bhi.n	800f3a4 <_printf_i+0x28>
 800f3b6:	a101      	add	r1, pc, #4	@ (adr r1, 800f3bc <_printf_i+0x40>)
 800f3b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f3bc:	0800f415 	.word	0x0800f415
 800f3c0:	0800f429 	.word	0x0800f429
 800f3c4:	0800f3a5 	.word	0x0800f3a5
 800f3c8:	0800f3a5 	.word	0x0800f3a5
 800f3cc:	0800f3a5 	.word	0x0800f3a5
 800f3d0:	0800f3a5 	.word	0x0800f3a5
 800f3d4:	0800f429 	.word	0x0800f429
 800f3d8:	0800f3a5 	.word	0x0800f3a5
 800f3dc:	0800f3a5 	.word	0x0800f3a5
 800f3e0:	0800f3a5 	.word	0x0800f3a5
 800f3e4:	0800f3a5 	.word	0x0800f3a5
 800f3e8:	0800f529 	.word	0x0800f529
 800f3ec:	0800f453 	.word	0x0800f453
 800f3f0:	0800f4e3 	.word	0x0800f4e3
 800f3f4:	0800f3a5 	.word	0x0800f3a5
 800f3f8:	0800f3a5 	.word	0x0800f3a5
 800f3fc:	0800f54b 	.word	0x0800f54b
 800f400:	0800f3a5 	.word	0x0800f3a5
 800f404:	0800f453 	.word	0x0800f453
 800f408:	0800f3a5 	.word	0x0800f3a5
 800f40c:	0800f3a5 	.word	0x0800f3a5
 800f410:	0800f4eb 	.word	0x0800f4eb
 800f414:	6833      	ldr	r3, [r6, #0]
 800f416:	1d1a      	adds	r2, r3, #4
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	6032      	str	r2, [r6, #0]
 800f41c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f420:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f424:	2301      	movs	r3, #1
 800f426:	e09d      	b.n	800f564 <_printf_i+0x1e8>
 800f428:	6833      	ldr	r3, [r6, #0]
 800f42a:	6820      	ldr	r0, [r4, #0]
 800f42c:	1d19      	adds	r1, r3, #4
 800f42e:	6031      	str	r1, [r6, #0]
 800f430:	0606      	lsls	r6, r0, #24
 800f432:	d501      	bpl.n	800f438 <_printf_i+0xbc>
 800f434:	681d      	ldr	r5, [r3, #0]
 800f436:	e003      	b.n	800f440 <_printf_i+0xc4>
 800f438:	0645      	lsls	r5, r0, #25
 800f43a:	d5fb      	bpl.n	800f434 <_printf_i+0xb8>
 800f43c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f440:	2d00      	cmp	r5, #0
 800f442:	da03      	bge.n	800f44c <_printf_i+0xd0>
 800f444:	232d      	movs	r3, #45	@ 0x2d
 800f446:	426d      	negs	r5, r5
 800f448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f44c:	4859      	ldr	r0, [pc, #356]	@ (800f5b4 <_printf_i+0x238>)
 800f44e:	230a      	movs	r3, #10
 800f450:	e011      	b.n	800f476 <_printf_i+0xfa>
 800f452:	6821      	ldr	r1, [r4, #0]
 800f454:	6833      	ldr	r3, [r6, #0]
 800f456:	0608      	lsls	r0, r1, #24
 800f458:	f853 5b04 	ldr.w	r5, [r3], #4
 800f45c:	d402      	bmi.n	800f464 <_printf_i+0xe8>
 800f45e:	0649      	lsls	r1, r1, #25
 800f460:	bf48      	it	mi
 800f462:	b2ad      	uxthmi	r5, r5
 800f464:	2f6f      	cmp	r7, #111	@ 0x6f
 800f466:	4853      	ldr	r0, [pc, #332]	@ (800f5b4 <_printf_i+0x238>)
 800f468:	6033      	str	r3, [r6, #0]
 800f46a:	bf14      	ite	ne
 800f46c:	230a      	movne	r3, #10
 800f46e:	2308      	moveq	r3, #8
 800f470:	2100      	movs	r1, #0
 800f472:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f476:	6866      	ldr	r6, [r4, #4]
 800f478:	60a6      	str	r6, [r4, #8]
 800f47a:	2e00      	cmp	r6, #0
 800f47c:	bfa2      	ittt	ge
 800f47e:	6821      	ldrge	r1, [r4, #0]
 800f480:	f021 0104 	bicge.w	r1, r1, #4
 800f484:	6021      	strge	r1, [r4, #0]
 800f486:	b90d      	cbnz	r5, 800f48c <_printf_i+0x110>
 800f488:	2e00      	cmp	r6, #0
 800f48a:	d04b      	beq.n	800f524 <_printf_i+0x1a8>
 800f48c:	4616      	mov	r6, r2
 800f48e:	fbb5 f1f3 	udiv	r1, r5, r3
 800f492:	fb03 5711 	mls	r7, r3, r1, r5
 800f496:	5dc7      	ldrb	r7, [r0, r7]
 800f498:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f49c:	462f      	mov	r7, r5
 800f49e:	42bb      	cmp	r3, r7
 800f4a0:	460d      	mov	r5, r1
 800f4a2:	d9f4      	bls.n	800f48e <_printf_i+0x112>
 800f4a4:	2b08      	cmp	r3, #8
 800f4a6:	d10b      	bne.n	800f4c0 <_printf_i+0x144>
 800f4a8:	6823      	ldr	r3, [r4, #0]
 800f4aa:	07df      	lsls	r7, r3, #31
 800f4ac:	d508      	bpl.n	800f4c0 <_printf_i+0x144>
 800f4ae:	6923      	ldr	r3, [r4, #16]
 800f4b0:	6861      	ldr	r1, [r4, #4]
 800f4b2:	4299      	cmp	r1, r3
 800f4b4:	bfde      	ittt	le
 800f4b6:	2330      	movle	r3, #48	@ 0x30
 800f4b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f4bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f4c0:	1b92      	subs	r2, r2, r6
 800f4c2:	6122      	str	r2, [r4, #16]
 800f4c4:	f8cd a000 	str.w	sl, [sp]
 800f4c8:	464b      	mov	r3, r9
 800f4ca:	aa03      	add	r2, sp, #12
 800f4cc:	4621      	mov	r1, r4
 800f4ce:	4640      	mov	r0, r8
 800f4d0:	f7ff fee6 	bl	800f2a0 <_printf_common>
 800f4d4:	3001      	adds	r0, #1
 800f4d6:	d14a      	bne.n	800f56e <_printf_i+0x1f2>
 800f4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f4dc:	b004      	add	sp, #16
 800f4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e2:	6823      	ldr	r3, [r4, #0]
 800f4e4:	f043 0320 	orr.w	r3, r3, #32
 800f4e8:	6023      	str	r3, [r4, #0]
 800f4ea:	4833      	ldr	r0, [pc, #204]	@ (800f5b8 <_printf_i+0x23c>)
 800f4ec:	2778      	movs	r7, #120	@ 0x78
 800f4ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f4f2:	6823      	ldr	r3, [r4, #0]
 800f4f4:	6831      	ldr	r1, [r6, #0]
 800f4f6:	061f      	lsls	r7, r3, #24
 800f4f8:	f851 5b04 	ldr.w	r5, [r1], #4
 800f4fc:	d402      	bmi.n	800f504 <_printf_i+0x188>
 800f4fe:	065f      	lsls	r7, r3, #25
 800f500:	bf48      	it	mi
 800f502:	b2ad      	uxthmi	r5, r5
 800f504:	6031      	str	r1, [r6, #0]
 800f506:	07d9      	lsls	r1, r3, #31
 800f508:	bf44      	itt	mi
 800f50a:	f043 0320 	orrmi.w	r3, r3, #32
 800f50e:	6023      	strmi	r3, [r4, #0]
 800f510:	b11d      	cbz	r5, 800f51a <_printf_i+0x19e>
 800f512:	2310      	movs	r3, #16
 800f514:	e7ac      	b.n	800f470 <_printf_i+0xf4>
 800f516:	4827      	ldr	r0, [pc, #156]	@ (800f5b4 <_printf_i+0x238>)
 800f518:	e7e9      	b.n	800f4ee <_printf_i+0x172>
 800f51a:	6823      	ldr	r3, [r4, #0]
 800f51c:	f023 0320 	bic.w	r3, r3, #32
 800f520:	6023      	str	r3, [r4, #0]
 800f522:	e7f6      	b.n	800f512 <_printf_i+0x196>
 800f524:	4616      	mov	r6, r2
 800f526:	e7bd      	b.n	800f4a4 <_printf_i+0x128>
 800f528:	6833      	ldr	r3, [r6, #0]
 800f52a:	6825      	ldr	r5, [r4, #0]
 800f52c:	6961      	ldr	r1, [r4, #20]
 800f52e:	1d18      	adds	r0, r3, #4
 800f530:	6030      	str	r0, [r6, #0]
 800f532:	062e      	lsls	r6, r5, #24
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	d501      	bpl.n	800f53c <_printf_i+0x1c0>
 800f538:	6019      	str	r1, [r3, #0]
 800f53a:	e002      	b.n	800f542 <_printf_i+0x1c6>
 800f53c:	0668      	lsls	r0, r5, #25
 800f53e:	d5fb      	bpl.n	800f538 <_printf_i+0x1bc>
 800f540:	8019      	strh	r1, [r3, #0]
 800f542:	2300      	movs	r3, #0
 800f544:	6123      	str	r3, [r4, #16]
 800f546:	4616      	mov	r6, r2
 800f548:	e7bc      	b.n	800f4c4 <_printf_i+0x148>
 800f54a:	6833      	ldr	r3, [r6, #0]
 800f54c:	1d1a      	adds	r2, r3, #4
 800f54e:	6032      	str	r2, [r6, #0]
 800f550:	681e      	ldr	r6, [r3, #0]
 800f552:	6862      	ldr	r2, [r4, #4]
 800f554:	2100      	movs	r1, #0
 800f556:	4630      	mov	r0, r6
 800f558:	f7f0 fe62 	bl	8000220 <memchr>
 800f55c:	b108      	cbz	r0, 800f562 <_printf_i+0x1e6>
 800f55e:	1b80      	subs	r0, r0, r6
 800f560:	6060      	str	r0, [r4, #4]
 800f562:	6863      	ldr	r3, [r4, #4]
 800f564:	6123      	str	r3, [r4, #16]
 800f566:	2300      	movs	r3, #0
 800f568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f56c:	e7aa      	b.n	800f4c4 <_printf_i+0x148>
 800f56e:	6923      	ldr	r3, [r4, #16]
 800f570:	4632      	mov	r2, r6
 800f572:	4649      	mov	r1, r9
 800f574:	4640      	mov	r0, r8
 800f576:	47d0      	blx	sl
 800f578:	3001      	adds	r0, #1
 800f57a:	d0ad      	beq.n	800f4d8 <_printf_i+0x15c>
 800f57c:	6823      	ldr	r3, [r4, #0]
 800f57e:	079b      	lsls	r3, r3, #30
 800f580:	d413      	bmi.n	800f5aa <_printf_i+0x22e>
 800f582:	68e0      	ldr	r0, [r4, #12]
 800f584:	9b03      	ldr	r3, [sp, #12]
 800f586:	4298      	cmp	r0, r3
 800f588:	bfb8      	it	lt
 800f58a:	4618      	movlt	r0, r3
 800f58c:	e7a6      	b.n	800f4dc <_printf_i+0x160>
 800f58e:	2301      	movs	r3, #1
 800f590:	4632      	mov	r2, r6
 800f592:	4649      	mov	r1, r9
 800f594:	4640      	mov	r0, r8
 800f596:	47d0      	blx	sl
 800f598:	3001      	adds	r0, #1
 800f59a:	d09d      	beq.n	800f4d8 <_printf_i+0x15c>
 800f59c:	3501      	adds	r5, #1
 800f59e:	68e3      	ldr	r3, [r4, #12]
 800f5a0:	9903      	ldr	r1, [sp, #12]
 800f5a2:	1a5b      	subs	r3, r3, r1
 800f5a4:	42ab      	cmp	r3, r5
 800f5a6:	dcf2      	bgt.n	800f58e <_printf_i+0x212>
 800f5a8:	e7eb      	b.n	800f582 <_printf_i+0x206>
 800f5aa:	2500      	movs	r5, #0
 800f5ac:	f104 0619 	add.w	r6, r4, #25
 800f5b0:	e7f5      	b.n	800f59e <_printf_i+0x222>
 800f5b2:	bf00      	nop
 800f5b4:	08012c5a 	.word	0x08012c5a
 800f5b8:	08012c6b 	.word	0x08012c6b

0800f5bc <_scanf_float>:
 800f5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c0:	b087      	sub	sp, #28
 800f5c2:	4617      	mov	r7, r2
 800f5c4:	9303      	str	r3, [sp, #12]
 800f5c6:	688b      	ldr	r3, [r1, #8]
 800f5c8:	1e5a      	subs	r2, r3, #1
 800f5ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f5ce:	bf81      	itttt	hi
 800f5d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f5d4:	eb03 0b05 	addhi.w	fp, r3, r5
 800f5d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f5dc:	608b      	strhi	r3, [r1, #8]
 800f5de:	680b      	ldr	r3, [r1, #0]
 800f5e0:	460a      	mov	r2, r1
 800f5e2:	f04f 0500 	mov.w	r5, #0
 800f5e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f5ea:	f842 3b1c 	str.w	r3, [r2], #28
 800f5ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f5f2:	4680      	mov	r8, r0
 800f5f4:	460c      	mov	r4, r1
 800f5f6:	bf98      	it	ls
 800f5f8:	f04f 0b00 	movls.w	fp, #0
 800f5fc:	9201      	str	r2, [sp, #4]
 800f5fe:	4616      	mov	r6, r2
 800f600:	46aa      	mov	sl, r5
 800f602:	46a9      	mov	r9, r5
 800f604:	9502      	str	r5, [sp, #8]
 800f606:	68a2      	ldr	r2, [r4, #8]
 800f608:	b152      	cbz	r2, 800f620 <_scanf_float+0x64>
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	2b4e      	cmp	r3, #78	@ 0x4e
 800f610:	d864      	bhi.n	800f6dc <_scanf_float+0x120>
 800f612:	2b40      	cmp	r3, #64	@ 0x40
 800f614:	d83c      	bhi.n	800f690 <_scanf_float+0xd4>
 800f616:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f61a:	b2c8      	uxtb	r0, r1
 800f61c:	280e      	cmp	r0, #14
 800f61e:	d93a      	bls.n	800f696 <_scanf_float+0xda>
 800f620:	f1b9 0f00 	cmp.w	r9, #0
 800f624:	d003      	beq.n	800f62e <_scanf_float+0x72>
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f62c:	6023      	str	r3, [r4, #0]
 800f62e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f632:	f1ba 0f01 	cmp.w	sl, #1
 800f636:	f200 8117 	bhi.w	800f868 <_scanf_float+0x2ac>
 800f63a:	9b01      	ldr	r3, [sp, #4]
 800f63c:	429e      	cmp	r6, r3
 800f63e:	f200 8108 	bhi.w	800f852 <_scanf_float+0x296>
 800f642:	2001      	movs	r0, #1
 800f644:	b007      	add	sp, #28
 800f646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f64a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f64e:	2a0d      	cmp	r2, #13
 800f650:	d8e6      	bhi.n	800f620 <_scanf_float+0x64>
 800f652:	a101      	add	r1, pc, #4	@ (adr r1, 800f658 <_scanf_float+0x9c>)
 800f654:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f658:	0800f79f 	.word	0x0800f79f
 800f65c:	0800f621 	.word	0x0800f621
 800f660:	0800f621 	.word	0x0800f621
 800f664:	0800f621 	.word	0x0800f621
 800f668:	0800f7ff 	.word	0x0800f7ff
 800f66c:	0800f7d7 	.word	0x0800f7d7
 800f670:	0800f621 	.word	0x0800f621
 800f674:	0800f621 	.word	0x0800f621
 800f678:	0800f7ad 	.word	0x0800f7ad
 800f67c:	0800f621 	.word	0x0800f621
 800f680:	0800f621 	.word	0x0800f621
 800f684:	0800f621 	.word	0x0800f621
 800f688:	0800f621 	.word	0x0800f621
 800f68c:	0800f765 	.word	0x0800f765
 800f690:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f694:	e7db      	b.n	800f64e <_scanf_float+0x92>
 800f696:	290e      	cmp	r1, #14
 800f698:	d8c2      	bhi.n	800f620 <_scanf_float+0x64>
 800f69a:	a001      	add	r0, pc, #4	@ (adr r0, 800f6a0 <_scanf_float+0xe4>)
 800f69c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f6a0:	0800f755 	.word	0x0800f755
 800f6a4:	0800f621 	.word	0x0800f621
 800f6a8:	0800f755 	.word	0x0800f755
 800f6ac:	0800f7eb 	.word	0x0800f7eb
 800f6b0:	0800f621 	.word	0x0800f621
 800f6b4:	0800f6fd 	.word	0x0800f6fd
 800f6b8:	0800f73b 	.word	0x0800f73b
 800f6bc:	0800f73b 	.word	0x0800f73b
 800f6c0:	0800f73b 	.word	0x0800f73b
 800f6c4:	0800f73b 	.word	0x0800f73b
 800f6c8:	0800f73b 	.word	0x0800f73b
 800f6cc:	0800f73b 	.word	0x0800f73b
 800f6d0:	0800f73b 	.word	0x0800f73b
 800f6d4:	0800f73b 	.word	0x0800f73b
 800f6d8:	0800f73b 	.word	0x0800f73b
 800f6dc:	2b6e      	cmp	r3, #110	@ 0x6e
 800f6de:	d809      	bhi.n	800f6f4 <_scanf_float+0x138>
 800f6e0:	2b60      	cmp	r3, #96	@ 0x60
 800f6e2:	d8b2      	bhi.n	800f64a <_scanf_float+0x8e>
 800f6e4:	2b54      	cmp	r3, #84	@ 0x54
 800f6e6:	d07b      	beq.n	800f7e0 <_scanf_float+0x224>
 800f6e8:	2b59      	cmp	r3, #89	@ 0x59
 800f6ea:	d199      	bne.n	800f620 <_scanf_float+0x64>
 800f6ec:	2d07      	cmp	r5, #7
 800f6ee:	d197      	bne.n	800f620 <_scanf_float+0x64>
 800f6f0:	2508      	movs	r5, #8
 800f6f2:	e02c      	b.n	800f74e <_scanf_float+0x192>
 800f6f4:	2b74      	cmp	r3, #116	@ 0x74
 800f6f6:	d073      	beq.n	800f7e0 <_scanf_float+0x224>
 800f6f8:	2b79      	cmp	r3, #121	@ 0x79
 800f6fa:	e7f6      	b.n	800f6ea <_scanf_float+0x12e>
 800f6fc:	6821      	ldr	r1, [r4, #0]
 800f6fe:	05c8      	lsls	r0, r1, #23
 800f700:	d51b      	bpl.n	800f73a <_scanf_float+0x17e>
 800f702:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f706:	6021      	str	r1, [r4, #0]
 800f708:	f109 0901 	add.w	r9, r9, #1
 800f70c:	f1bb 0f00 	cmp.w	fp, #0
 800f710:	d003      	beq.n	800f71a <_scanf_float+0x15e>
 800f712:	3201      	adds	r2, #1
 800f714:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f718:	60a2      	str	r2, [r4, #8]
 800f71a:	68a3      	ldr	r3, [r4, #8]
 800f71c:	3b01      	subs	r3, #1
 800f71e:	60a3      	str	r3, [r4, #8]
 800f720:	6923      	ldr	r3, [r4, #16]
 800f722:	3301      	adds	r3, #1
 800f724:	6123      	str	r3, [r4, #16]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	3b01      	subs	r3, #1
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	607b      	str	r3, [r7, #4]
 800f72e:	f340 8087 	ble.w	800f840 <_scanf_float+0x284>
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	3301      	adds	r3, #1
 800f736:	603b      	str	r3, [r7, #0]
 800f738:	e765      	b.n	800f606 <_scanf_float+0x4a>
 800f73a:	eb1a 0105 	adds.w	r1, sl, r5
 800f73e:	f47f af6f 	bne.w	800f620 <_scanf_float+0x64>
 800f742:	6822      	ldr	r2, [r4, #0]
 800f744:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f748:	6022      	str	r2, [r4, #0]
 800f74a:	460d      	mov	r5, r1
 800f74c:	468a      	mov	sl, r1
 800f74e:	f806 3b01 	strb.w	r3, [r6], #1
 800f752:	e7e2      	b.n	800f71a <_scanf_float+0x15e>
 800f754:	6822      	ldr	r2, [r4, #0]
 800f756:	0610      	lsls	r0, r2, #24
 800f758:	f57f af62 	bpl.w	800f620 <_scanf_float+0x64>
 800f75c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f760:	6022      	str	r2, [r4, #0]
 800f762:	e7f4      	b.n	800f74e <_scanf_float+0x192>
 800f764:	f1ba 0f00 	cmp.w	sl, #0
 800f768:	d10e      	bne.n	800f788 <_scanf_float+0x1cc>
 800f76a:	f1b9 0f00 	cmp.w	r9, #0
 800f76e:	d10e      	bne.n	800f78e <_scanf_float+0x1d2>
 800f770:	6822      	ldr	r2, [r4, #0]
 800f772:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f776:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f77a:	d108      	bne.n	800f78e <_scanf_float+0x1d2>
 800f77c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f780:	6022      	str	r2, [r4, #0]
 800f782:	f04f 0a01 	mov.w	sl, #1
 800f786:	e7e2      	b.n	800f74e <_scanf_float+0x192>
 800f788:	f1ba 0f02 	cmp.w	sl, #2
 800f78c:	d055      	beq.n	800f83a <_scanf_float+0x27e>
 800f78e:	2d01      	cmp	r5, #1
 800f790:	d002      	beq.n	800f798 <_scanf_float+0x1dc>
 800f792:	2d04      	cmp	r5, #4
 800f794:	f47f af44 	bne.w	800f620 <_scanf_float+0x64>
 800f798:	3501      	adds	r5, #1
 800f79a:	b2ed      	uxtb	r5, r5
 800f79c:	e7d7      	b.n	800f74e <_scanf_float+0x192>
 800f79e:	f1ba 0f01 	cmp.w	sl, #1
 800f7a2:	f47f af3d 	bne.w	800f620 <_scanf_float+0x64>
 800f7a6:	f04f 0a02 	mov.w	sl, #2
 800f7aa:	e7d0      	b.n	800f74e <_scanf_float+0x192>
 800f7ac:	b97d      	cbnz	r5, 800f7ce <_scanf_float+0x212>
 800f7ae:	f1b9 0f00 	cmp.w	r9, #0
 800f7b2:	f47f af38 	bne.w	800f626 <_scanf_float+0x6a>
 800f7b6:	6822      	ldr	r2, [r4, #0]
 800f7b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f7bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f7c0:	f040 8108 	bne.w	800f9d4 <_scanf_float+0x418>
 800f7c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f7c8:	6022      	str	r2, [r4, #0]
 800f7ca:	2501      	movs	r5, #1
 800f7cc:	e7bf      	b.n	800f74e <_scanf_float+0x192>
 800f7ce:	2d03      	cmp	r5, #3
 800f7d0:	d0e2      	beq.n	800f798 <_scanf_float+0x1dc>
 800f7d2:	2d05      	cmp	r5, #5
 800f7d4:	e7de      	b.n	800f794 <_scanf_float+0x1d8>
 800f7d6:	2d02      	cmp	r5, #2
 800f7d8:	f47f af22 	bne.w	800f620 <_scanf_float+0x64>
 800f7dc:	2503      	movs	r5, #3
 800f7de:	e7b6      	b.n	800f74e <_scanf_float+0x192>
 800f7e0:	2d06      	cmp	r5, #6
 800f7e2:	f47f af1d 	bne.w	800f620 <_scanf_float+0x64>
 800f7e6:	2507      	movs	r5, #7
 800f7e8:	e7b1      	b.n	800f74e <_scanf_float+0x192>
 800f7ea:	6822      	ldr	r2, [r4, #0]
 800f7ec:	0591      	lsls	r1, r2, #22
 800f7ee:	f57f af17 	bpl.w	800f620 <_scanf_float+0x64>
 800f7f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f7f6:	6022      	str	r2, [r4, #0]
 800f7f8:	f8cd 9008 	str.w	r9, [sp, #8]
 800f7fc:	e7a7      	b.n	800f74e <_scanf_float+0x192>
 800f7fe:	6822      	ldr	r2, [r4, #0]
 800f800:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f804:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f808:	d006      	beq.n	800f818 <_scanf_float+0x25c>
 800f80a:	0550      	lsls	r0, r2, #21
 800f80c:	f57f af08 	bpl.w	800f620 <_scanf_float+0x64>
 800f810:	f1b9 0f00 	cmp.w	r9, #0
 800f814:	f000 80de 	beq.w	800f9d4 <_scanf_float+0x418>
 800f818:	0591      	lsls	r1, r2, #22
 800f81a:	bf58      	it	pl
 800f81c:	9902      	ldrpl	r1, [sp, #8]
 800f81e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f822:	bf58      	it	pl
 800f824:	eba9 0101 	subpl.w	r1, r9, r1
 800f828:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f82c:	bf58      	it	pl
 800f82e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f832:	6022      	str	r2, [r4, #0]
 800f834:	f04f 0900 	mov.w	r9, #0
 800f838:	e789      	b.n	800f74e <_scanf_float+0x192>
 800f83a:	f04f 0a03 	mov.w	sl, #3
 800f83e:	e786      	b.n	800f74e <_scanf_float+0x192>
 800f840:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f844:	4639      	mov	r1, r7
 800f846:	4640      	mov	r0, r8
 800f848:	4798      	blx	r3
 800f84a:	2800      	cmp	r0, #0
 800f84c:	f43f aedb 	beq.w	800f606 <_scanf_float+0x4a>
 800f850:	e6e6      	b.n	800f620 <_scanf_float+0x64>
 800f852:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f856:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f85a:	463a      	mov	r2, r7
 800f85c:	4640      	mov	r0, r8
 800f85e:	4798      	blx	r3
 800f860:	6923      	ldr	r3, [r4, #16]
 800f862:	3b01      	subs	r3, #1
 800f864:	6123      	str	r3, [r4, #16]
 800f866:	e6e8      	b.n	800f63a <_scanf_float+0x7e>
 800f868:	1e6b      	subs	r3, r5, #1
 800f86a:	2b06      	cmp	r3, #6
 800f86c:	d824      	bhi.n	800f8b8 <_scanf_float+0x2fc>
 800f86e:	2d02      	cmp	r5, #2
 800f870:	d836      	bhi.n	800f8e0 <_scanf_float+0x324>
 800f872:	9b01      	ldr	r3, [sp, #4]
 800f874:	429e      	cmp	r6, r3
 800f876:	f67f aee4 	bls.w	800f642 <_scanf_float+0x86>
 800f87a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f87e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f882:	463a      	mov	r2, r7
 800f884:	4640      	mov	r0, r8
 800f886:	4798      	blx	r3
 800f888:	6923      	ldr	r3, [r4, #16]
 800f88a:	3b01      	subs	r3, #1
 800f88c:	6123      	str	r3, [r4, #16]
 800f88e:	e7f0      	b.n	800f872 <_scanf_float+0x2b6>
 800f890:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f894:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f898:	463a      	mov	r2, r7
 800f89a:	4640      	mov	r0, r8
 800f89c:	4798      	blx	r3
 800f89e:	6923      	ldr	r3, [r4, #16]
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	6123      	str	r3, [r4, #16]
 800f8a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8a8:	fa5f fa8a 	uxtb.w	sl, sl
 800f8ac:	f1ba 0f02 	cmp.w	sl, #2
 800f8b0:	d1ee      	bne.n	800f890 <_scanf_float+0x2d4>
 800f8b2:	3d03      	subs	r5, #3
 800f8b4:	b2ed      	uxtb	r5, r5
 800f8b6:	1b76      	subs	r6, r6, r5
 800f8b8:	6823      	ldr	r3, [r4, #0]
 800f8ba:	05da      	lsls	r2, r3, #23
 800f8bc:	d530      	bpl.n	800f920 <_scanf_float+0x364>
 800f8be:	055b      	lsls	r3, r3, #21
 800f8c0:	d511      	bpl.n	800f8e6 <_scanf_float+0x32a>
 800f8c2:	9b01      	ldr	r3, [sp, #4]
 800f8c4:	429e      	cmp	r6, r3
 800f8c6:	f67f aebc 	bls.w	800f642 <_scanf_float+0x86>
 800f8ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f8ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f8d2:	463a      	mov	r2, r7
 800f8d4:	4640      	mov	r0, r8
 800f8d6:	4798      	blx	r3
 800f8d8:	6923      	ldr	r3, [r4, #16]
 800f8da:	3b01      	subs	r3, #1
 800f8dc:	6123      	str	r3, [r4, #16]
 800f8de:	e7f0      	b.n	800f8c2 <_scanf_float+0x306>
 800f8e0:	46aa      	mov	sl, r5
 800f8e2:	46b3      	mov	fp, r6
 800f8e4:	e7de      	b.n	800f8a4 <_scanf_float+0x2e8>
 800f8e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f8ea:	6923      	ldr	r3, [r4, #16]
 800f8ec:	2965      	cmp	r1, #101	@ 0x65
 800f8ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800f8f2:	f106 35ff 	add.w	r5, r6, #4294967295
 800f8f6:	6123      	str	r3, [r4, #16]
 800f8f8:	d00c      	beq.n	800f914 <_scanf_float+0x358>
 800f8fa:	2945      	cmp	r1, #69	@ 0x45
 800f8fc:	d00a      	beq.n	800f914 <_scanf_float+0x358>
 800f8fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f902:	463a      	mov	r2, r7
 800f904:	4640      	mov	r0, r8
 800f906:	4798      	blx	r3
 800f908:	6923      	ldr	r3, [r4, #16]
 800f90a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f90e:	3b01      	subs	r3, #1
 800f910:	1eb5      	subs	r5, r6, #2
 800f912:	6123      	str	r3, [r4, #16]
 800f914:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f918:	463a      	mov	r2, r7
 800f91a:	4640      	mov	r0, r8
 800f91c:	4798      	blx	r3
 800f91e:	462e      	mov	r6, r5
 800f920:	6822      	ldr	r2, [r4, #0]
 800f922:	f012 0210 	ands.w	r2, r2, #16
 800f926:	d001      	beq.n	800f92c <_scanf_float+0x370>
 800f928:	2000      	movs	r0, #0
 800f92a:	e68b      	b.n	800f644 <_scanf_float+0x88>
 800f92c:	7032      	strb	r2, [r6, #0]
 800f92e:	6823      	ldr	r3, [r4, #0]
 800f930:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f938:	d11c      	bne.n	800f974 <_scanf_float+0x3b8>
 800f93a:	9b02      	ldr	r3, [sp, #8]
 800f93c:	454b      	cmp	r3, r9
 800f93e:	eba3 0209 	sub.w	r2, r3, r9
 800f942:	d123      	bne.n	800f98c <_scanf_float+0x3d0>
 800f944:	9901      	ldr	r1, [sp, #4]
 800f946:	2200      	movs	r2, #0
 800f948:	4640      	mov	r0, r8
 800f94a:	f7ff f9cd 	bl	800ece8 <_strtod_r>
 800f94e:	9b03      	ldr	r3, [sp, #12]
 800f950:	6821      	ldr	r1, [r4, #0]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	f011 0f02 	tst.w	r1, #2
 800f958:	ec57 6b10 	vmov	r6, r7, d0
 800f95c:	f103 0204 	add.w	r2, r3, #4
 800f960:	d01f      	beq.n	800f9a2 <_scanf_float+0x3e6>
 800f962:	9903      	ldr	r1, [sp, #12]
 800f964:	600a      	str	r2, [r1, #0]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	e9c3 6700 	strd	r6, r7, [r3]
 800f96c:	68e3      	ldr	r3, [r4, #12]
 800f96e:	3301      	adds	r3, #1
 800f970:	60e3      	str	r3, [r4, #12]
 800f972:	e7d9      	b.n	800f928 <_scanf_float+0x36c>
 800f974:	9b04      	ldr	r3, [sp, #16]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d0e4      	beq.n	800f944 <_scanf_float+0x388>
 800f97a:	9905      	ldr	r1, [sp, #20]
 800f97c:	230a      	movs	r3, #10
 800f97e:	3101      	adds	r1, #1
 800f980:	4640      	mov	r0, r8
 800f982:	f002 f9e9 	bl	8011d58 <_strtol_r>
 800f986:	9b04      	ldr	r3, [sp, #16]
 800f988:	9e05      	ldr	r6, [sp, #20]
 800f98a:	1ac2      	subs	r2, r0, r3
 800f98c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f990:	429e      	cmp	r6, r3
 800f992:	bf28      	it	cs
 800f994:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f998:	4910      	ldr	r1, [pc, #64]	@ (800f9dc <_scanf_float+0x420>)
 800f99a:	4630      	mov	r0, r6
 800f99c:	f000 f8e4 	bl	800fb68 <siprintf>
 800f9a0:	e7d0      	b.n	800f944 <_scanf_float+0x388>
 800f9a2:	f011 0f04 	tst.w	r1, #4
 800f9a6:	9903      	ldr	r1, [sp, #12]
 800f9a8:	600a      	str	r2, [r1, #0]
 800f9aa:	d1dc      	bne.n	800f966 <_scanf_float+0x3aa>
 800f9ac:	681d      	ldr	r5, [r3, #0]
 800f9ae:	4632      	mov	r2, r6
 800f9b0:	463b      	mov	r3, r7
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	4639      	mov	r1, r7
 800f9b6:	f7f1 f8e1 	bl	8000b7c <__aeabi_dcmpun>
 800f9ba:	b128      	cbz	r0, 800f9c8 <_scanf_float+0x40c>
 800f9bc:	4808      	ldr	r0, [pc, #32]	@ (800f9e0 <_scanf_float+0x424>)
 800f9be:	f000 f9ff 	bl	800fdc0 <nanf>
 800f9c2:	ed85 0a00 	vstr	s0, [r5]
 800f9c6:	e7d1      	b.n	800f96c <_scanf_float+0x3b0>
 800f9c8:	4630      	mov	r0, r6
 800f9ca:	4639      	mov	r1, r7
 800f9cc:	f7f1 f934 	bl	8000c38 <__aeabi_d2f>
 800f9d0:	6028      	str	r0, [r5, #0]
 800f9d2:	e7cb      	b.n	800f96c <_scanf_float+0x3b0>
 800f9d4:	f04f 0900 	mov.w	r9, #0
 800f9d8:	e629      	b.n	800f62e <_scanf_float+0x72>
 800f9da:	bf00      	nop
 800f9dc:	08012c7c 	.word	0x08012c7c
 800f9e0:	0801301d 	.word	0x0801301d

0800f9e4 <std>:
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	b510      	push	{r4, lr}
 800f9e8:	4604      	mov	r4, r0
 800f9ea:	e9c0 3300 	strd	r3, r3, [r0]
 800f9ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f9f2:	6083      	str	r3, [r0, #8]
 800f9f4:	8181      	strh	r1, [r0, #12]
 800f9f6:	6643      	str	r3, [r0, #100]	@ 0x64
 800f9f8:	81c2      	strh	r2, [r0, #14]
 800f9fa:	6183      	str	r3, [r0, #24]
 800f9fc:	4619      	mov	r1, r3
 800f9fe:	2208      	movs	r2, #8
 800fa00:	305c      	adds	r0, #92	@ 0x5c
 800fa02:	f000 f935 	bl	800fc70 <memset>
 800fa06:	4b0d      	ldr	r3, [pc, #52]	@ (800fa3c <std+0x58>)
 800fa08:	6263      	str	r3, [r4, #36]	@ 0x24
 800fa0a:	4b0d      	ldr	r3, [pc, #52]	@ (800fa40 <std+0x5c>)
 800fa0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fa0e:	4b0d      	ldr	r3, [pc, #52]	@ (800fa44 <std+0x60>)
 800fa10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fa12:	4b0d      	ldr	r3, [pc, #52]	@ (800fa48 <std+0x64>)
 800fa14:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa16:	4b0d      	ldr	r3, [pc, #52]	@ (800fa4c <std+0x68>)
 800fa18:	6224      	str	r4, [r4, #32]
 800fa1a:	429c      	cmp	r4, r3
 800fa1c:	d006      	beq.n	800fa2c <std+0x48>
 800fa1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fa22:	4294      	cmp	r4, r2
 800fa24:	d002      	beq.n	800fa2c <std+0x48>
 800fa26:	33d0      	adds	r3, #208	@ 0xd0
 800fa28:	429c      	cmp	r4, r3
 800fa2a:	d105      	bne.n	800fa38 <std+0x54>
 800fa2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fa30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa34:	f000 b9aa 	b.w	800fd8c <__retarget_lock_init_recursive>
 800fa38:	bd10      	pop	{r4, pc}
 800fa3a:	bf00      	nop
 800fa3c:	0800fba9 	.word	0x0800fba9
 800fa40:	0800fbcb 	.word	0x0800fbcb
 800fa44:	0800fc03 	.word	0x0800fc03
 800fa48:	0800fc27 	.word	0x0800fc27
 800fa4c:	2000097c 	.word	0x2000097c

0800fa50 <stdio_exit_handler>:
 800fa50:	4a02      	ldr	r2, [pc, #8]	@ (800fa5c <stdio_exit_handler+0xc>)
 800fa52:	4903      	ldr	r1, [pc, #12]	@ (800fa60 <stdio_exit_handler+0x10>)
 800fa54:	4803      	ldr	r0, [pc, #12]	@ (800fa64 <stdio_exit_handler+0x14>)
 800fa56:	f000 b869 	b.w	800fb2c <_fwalk_sglue>
 800fa5a:	bf00      	nop
 800fa5c:	20000090 	.word	0x20000090
 800fa60:	0801212d 	.word	0x0801212d
 800fa64:	2000020c 	.word	0x2000020c

0800fa68 <cleanup_stdio>:
 800fa68:	6841      	ldr	r1, [r0, #4]
 800fa6a:	4b0c      	ldr	r3, [pc, #48]	@ (800fa9c <cleanup_stdio+0x34>)
 800fa6c:	4299      	cmp	r1, r3
 800fa6e:	b510      	push	{r4, lr}
 800fa70:	4604      	mov	r4, r0
 800fa72:	d001      	beq.n	800fa78 <cleanup_stdio+0x10>
 800fa74:	f002 fb5a 	bl	801212c <_fflush_r>
 800fa78:	68a1      	ldr	r1, [r4, #8]
 800fa7a:	4b09      	ldr	r3, [pc, #36]	@ (800faa0 <cleanup_stdio+0x38>)
 800fa7c:	4299      	cmp	r1, r3
 800fa7e:	d002      	beq.n	800fa86 <cleanup_stdio+0x1e>
 800fa80:	4620      	mov	r0, r4
 800fa82:	f002 fb53 	bl	801212c <_fflush_r>
 800fa86:	68e1      	ldr	r1, [r4, #12]
 800fa88:	4b06      	ldr	r3, [pc, #24]	@ (800faa4 <cleanup_stdio+0x3c>)
 800fa8a:	4299      	cmp	r1, r3
 800fa8c:	d004      	beq.n	800fa98 <cleanup_stdio+0x30>
 800fa8e:	4620      	mov	r0, r4
 800fa90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa94:	f002 bb4a 	b.w	801212c <_fflush_r>
 800fa98:	bd10      	pop	{r4, pc}
 800fa9a:	bf00      	nop
 800fa9c:	2000097c 	.word	0x2000097c
 800faa0:	200009e4 	.word	0x200009e4
 800faa4:	20000a4c 	.word	0x20000a4c

0800faa8 <global_stdio_init.part.0>:
 800faa8:	b510      	push	{r4, lr}
 800faaa:	4b0b      	ldr	r3, [pc, #44]	@ (800fad8 <global_stdio_init.part.0+0x30>)
 800faac:	4c0b      	ldr	r4, [pc, #44]	@ (800fadc <global_stdio_init.part.0+0x34>)
 800faae:	4a0c      	ldr	r2, [pc, #48]	@ (800fae0 <global_stdio_init.part.0+0x38>)
 800fab0:	601a      	str	r2, [r3, #0]
 800fab2:	4620      	mov	r0, r4
 800fab4:	2200      	movs	r2, #0
 800fab6:	2104      	movs	r1, #4
 800fab8:	f7ff ff94 	bl	800f9e4 <std>
 800fabc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fac0:	2201      	movs	r2, #1
 800fac2:	2109      	movs	r1, #9
 800fac4:	f7ff ff8e 	bl	800f9e4 <std>
 800fac8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800facc:	2202      	movs	r2, #2
 800face:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fad2:	2112      	movs	r1, #18
 800fad4:	f7ff bf86 	b.w	800f9e4 <std>
 800fad8:	20000ab4 	.word	0x20000ab4
 800fadc:	2000097c 	.word	0x2000097c
 800fae0:	0800fa51 	.word	0x0800fa51

0800fae4 <__sfp_lock_acquire>:
 800fae4:	4801      	ldr	r0, [pc, #4]	@ (800faec <__sfp_lock_acquire+0x8>)
 800fae6:	f000 b952 	b.w	800fd8e <__retarget_lock_acquire_recursive>
 800faea:	bf00      	nop
 800faec:	20000abd 	.word	0x20000abd

0800faf0 <__sfp_lock_release>:
 800faf0:	4801      	ldr	r0, [pc, #4]	@ (800faf8 <__sfp_lock_release+0x8>)
 800faf2:	f000 b94d 	b.w	800fd90 <__retarget_lock_release_recursive>
 800faf6:	bf00      	nop
 800faf8:	20000abd 	.word	0x20000abd

0800fafc <__sinit>:
 800fafc:	b510      	push	{r4, lr}
 800fafe:	4604      	mov	r4, r0
 800fb00:	f7ff fff0 	bl	800fae4 <__sfp_lock_acquire>
 800fb04:	6a23      	ldr	r3, [r4, #32]
 800fb06:	b11b      	cbz	r3, 800fb10 <__sinit+0x14>
 800fb08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb0c:	f7ff bff0 	b.w	800faf0 <__sfp_lock_release>
 800fb10:	4b04      	ldr	r3, [pc, #16]	@ (800fb24 <__sinit+0x28>)
 800fb12:	6223      	str	r3, [r4, #32]
 800fb14:	4b04      	ldr	r3, [pc, #16]	@ (800fb28 <__sinit+0x2c>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d1f5      	bne.n	800fb08 <__sinit+0xc>
 800fb1c:	f7ff ffc4 	bl	800faa8 <global_stdio_init.part.0>
 800fb20:	e7f2      	b.n	800fb08 <__sinit+0xc>
 800fb22:	bf00      	nop
 800fb24:	0800fa69 	.word	0x0800fa69
 800fb28:	20000ab4 	.word	0x20000ab4

0800fb2c <_fwalk_sglue>:
 800fb2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb30:	4607      	mov	r7, r0
 800fb32:	4688      	mov	r8, r1
 800fb34:	4614      	mov	r4, r2
 800fb36:	2600      	movs	r6, #0
 800fb38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb3c:	f1b9 0901 	subs.w	r9, r9, #1
 800fb40:	d505      	bpl.n	800fb4e <_fwalk_sglue+0x22>
 800fb42:	6824      	ldr	r4, [r4, #0]
 800fb44:	2c00      	cmp	r4, #0
 800fb46:	d1f7      	bne.n	800fb38 <_fwalk_sglue+0xc>
 800fb48:	4630      	mov	r0, r6
 800fb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb4e:	89ab      	ldrh	r3, [r5, #12]
 800fb50:	2b01      	cmp	r3, #1
 800fb52:	d907      	bls.n	800fb64 <_fwalk_sglue+0x38>
 800fb54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb58:	3301      	adds	r3, #1
 800fb5a:	d003      	beq.n	800fb64 <_fwalk_sglue+0x38>
 800fb5c:	4629      	mov	r1, r5
 800fb5e:	4638      	mov	r0, r7
 800fb60:	47c0      	blx	r8
 800fb62:	4306      	orrs	r6, r0
 800fb64:	3568      	adds	r5, #104	@ 0x68
 800fb66:	e7e9      	b.n	800fb3c <_fwalk_sglue+0x10>

0800fb68 <siprintf>:
 800fb68:	b40e      	push	{r1, r2, r3}
 800fb6a:	b500      	push	{lr}
 800fb6c:	b09c      	sub	sp, #112	@ 0x70
 800fb6e:	ab1d      	add	r3, sp, #116	@ 0x74
 800fb70:	9002      	str	r0, [sp, #8]
 800fb72:	9006      	str	r0, [sp, #24]
 800fb74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fb78:	4809      	ldr	r0, [pc, #36]	@ (800fba0 <siprintf+0x38>)
 800fb7a:	9107      	str	r1, [sp, #28]
 800fb7c:	9104      	str	r1, [sp, #16]
 800fb7e:	4909      	ldr	r1, [pc, #36]	@ (800fba4 <siprintf+0x3c>)
 800fb80:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb84:	9105      	str	r1, [sp, #20]
 800fb86:	6800      	ldr	r0, [r0, #0]
 800fb88:	9301      	str	r3, [sp, #4]
 800fb8a:	a902      	add	r1, sp, #8
 800fb8c:	f002 f94e 	bl	8011e2c <_svfiprintf_r>
 800fb90:	9b02      	ldr	r3, [sp, #8]
 800fb92:	2200      	movs	r2, #0
 800fb94:	701a      	strb	r2, [r3, #0]
 800fb96:	b01c      	add	sp, #112	@ 0x70
 800fb98:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb9c:	b003      	add	sp, #12
 800fb9e:	4770      	bx	lr
 800fba0:	20000208 	.word	0x20000208
 800fba4:	ffff0208 	.word	0xffff0208

0800fba8 <__sread>:
 800fba8:	b510      	push	{r4, lr}
 800fbaa:	460c      	mov	r4, r1
 800fbac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbb0:	f000 f89e 	bl	800fcf0 <_read_r>
 800fbb4:	2800      	cmp	r0, #0
 800fbb6:	bfab      	itete	ge
 800fbb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fbba:	89a3      	ldrhlt	r3, [r4, #12]
 800fbbc:	181b      	addge	r3, r3, r0
 800fbbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fbc2:	bfac      	ite	ge
 800fbc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fbc6:	81a3      	strhlt	r3, [r4, #12]
 800fbc8:	bd10      	pop	{r4, pc}

0800fbca <__swrite>:
 800fbca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbce:	461f      	mov	r7, r3
 800fbd0:	898b      	ldrh	r3, [r1, #12]
 800fbd2:	05db      	lsls	r3, r3, #23
 800fbd4:	4605      	mov	r5, r0
 800fbd6:	460c      	mov	r4, r1
 800fbd8:	4616      	mov	r6, r2
 800fbda:	d505      	bpl.n	800fbe8 <__swrite+0x1e>
 800fbdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbe0:	2302      	movs	r3, #2
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	f000 f872 	bl	800fccc <_lseek_r>
 800fbe8:	89a3      	ldrh	r3, [r4, #12]
 800fbea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fbf2:	81a3      	strh	r3, [r4, #12]
 800fbf4:	4632      	mov	r2, r6
 800fbf6:	463b      	mov	r3, r7
 800fbf8:	4628      	mov	r0, r5
 800fbfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbfe:	f000 b889 	b.w	800fd14 <_write_r>

0800fc02 <__sseek>:
 800fc02:	b510      	push	{r4, lr}
 800fc04:	460c      	mov	r4, r1
 800fc06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc0a:	f000 f85f 	bl	800fccc <_lseek_r>
 800fc0e:	1c43      	adds	r3, r0, #1
 800fc10:	89a3      	ldrh	r3, [r4, #12]
 800fc12:	bf15      	itete	ne
 800fc14:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fc16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fc1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fc1e:	81a3      	strheq	r3, [r4, #12]
 800fc20:	bf18      	it	ne
 800fc22:	81a3      	strhne	r3, [r4, #12]
 800fc24:	bd10      	pop	{r4, pc}

0800fc26 <__sclose>:
 800fc26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc2a:	f000 b83f 	b.w	800fcac <_close_r>
	...

0800fc30 <_vsiprintf_r>:
 800fc30:	b500      	push	{lr}
 800fc32:	b09b      	sub	sp, #108	@ 0x6c
 800fc34:	9100      	str	r1, [sp, #0]
 800fc36:	9104      	str	r1, [sp, #16]
 800fc38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fc3c:	9105      	str	r1, [sp, #20]
 800fc3e:	9102      	str	r1, [sp, #8]
 800fc40:	4905      	ldr	r1, [pc, #20]	@ (800fc58 <_vsiprintf_r+0x28>)
 800fc42:	9103      	str	r1, [sp, #12]
 800fc44:	4669      	mov	r1, sp
 800fc46:	f002 f8f1 	bl	8011e2c <_svfiprintf_r>
 800fc4a:	9b00      	ldr	r3, [sp, #0]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	701a      	strb	r2, [r3, #0]
 800fc50:	b01b      	add	sp, #108	@ 0x6c
 800fc52:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc56:	bf00      	nop
 800fc58:	ffff0208 	.word	0xffff0208

0800fc5c <vsiprintf>:
 800fc5c:	4613      	mov	r3, r2
 800fc5e:	460a      	mov	r2, r1
 800fc60:	4601      	mov	r1, r0
 800fc62:	4802      	ldr	r0, [pc, #8]	@ (800fc6c <vsiprintf+0x10>)
 800fc64:	6800      	ldr	r0, [r0, #0]
 800fc66:	f7ff bfe3 	b.w	800fc30 <_vsiprintf_r>
 800fc6a:	bf00      	nop
 800fc6c:	20000208 	.word	0x20000208

0800fc70 <memset>:
 800fc70:	4402      	add	r2, r0
 800fc72:	4603      	mov	r3, r0
 800fc74:	4293      	cmp	r3, r2
 800fc76:	d100      	bne.n	800fc7a <memset+0xa>
 800fc78:	4770      	bx	lr
 800fc7a:	f803 1b01 	strb.w	r1, [r3], #1
 800fc7e:	e7f9      	b.n	800fc74 <memset+0x4>

0800fc80 <strncmp>:
 800fc80:	b510      	push	{r4, lr}
 800fc82:	b16a      	cbz	r2, 800fca0 <strncmp+0x20>
 800fc84:	3901      	subs	r1, #1
 800fc86:	1884      	adds	r4, r0, r2
 800fc88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d103      	bne.n	800fc9c <strncmp+0x1c>
 800fc94:	42a0      	cmp	r0, r4
 800fc96:	d001      	beq.n	800fc9c <strncmp+0x1c>
 800fc98:	2a00      	cmp	r2, #0
 800fc9a:	d1f5      	bne.n	800fc88 <strncmp+0x8>
 800fc9c:	1ad0      	subs	r0, r2, r3
 800fc9e:	bd10      	pop	{r4, pc}
 800fca0:	4610      	mov	r0, r2
 800fca2:	e7fc      	b.n	800fc9e <strncmp+0x1e>

0800fca4 <_localeconv_r>:
 800fca4:	4800      	ldr	r0, [pc, #0]	@ (800fca8 <_localeconv_r+0x4>)
 800fca6:	4770      	bx	lr
 800fca8:	2000018c 	.word	0x2000018c

0800fcac <_close_r>:
 800fcac:	b538      	push	{r3, r4, r5, lr}
 800fcae:	4d06      	ldr	r5, [pc, #24]	@ (800fcc8 <_close_r+0x1c>)
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	4604      	mov	r4, r0
 800fcb4:	4608      	mov	r0, r1
 800fcb6:	602b      	str	r3, [r5, #0]
 800fcb8:	f7f2 f936 	bl	8001f28 <_close>
 800fcbc:	1c43      	adds	r3, r0, #1
 800fcbe:	d102      	bne.n	800fcc6 <_close_r+0x1a>
 800fcc0:	682b      	ldr	r3, [r5, #0]
 800fcc2:	b103      	cbz	r3, 800fcc6 <_close_r+0x1a>
 800fcc4:	6023      	str	r3, [r4, #0]
 800fcc6:	bd38      	pop	{r3, r4, r5, pc}
 800fcc8:	20000ab8 	.word	0x20000ab8

0800fccc <_lseek_r>:
 800fccc:	b538      	push	{r3, r4, r5, lr}
 800fcce:	4d07      	ldr	r5, [pc, #28]	@ (800fcec <_lseek_r+0x20>)
 800fcd0:	4604      	mov	r4, r0
 800fcd2:	4608      	mov	r0, r1
 800fcd4:	4611      	mov	r1, r2
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	602a      	str	r2, [r5, #0]
 800fcda:	461a      	mov	r2, r3
 800fcdc:	f7f2 f94b 	bl	8001f76 <_lseek>
 800fce0:	1c43      	adds	r3, r0, #1
 800fce2:	d102      	bne.n	800fcea <_lseek_r+0x1e>
 800fce4:	682b      	ldr	r3, [r5, #0]
 800fce6:	b103      	cbz	r3, 800fcea <_lseek_r+0x1e>
 800fce8:	6023      	str	r3, [r4, #0]
 800fcea:	bd38      	pop	{r3, r4, r5, pc}
 800fcec:	20000ab8 	.word	0x20000ab8

0800fcf0 <_read_r>:
 800fcf0:	b538      	push	{r3, r4, r5, lr}
 800fcf2:	4d07      	ldr	r5, [pc, #28]	@ (800fd10 <_read_r+0x20>)
 800fcf4:	4604      	mov	r4, r0
 800fcf6:	4608      	mov	r0, r1
 800fcf8:	4611      	mov	r1, r2
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	602a      	str	r2, [r5, #0]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	f7f2 f8d9 	bl	8001eb6 <_read>
 800fd04:	1c43      	adds	r3, r0, #1
 800fd06:	d102      	bne.n	800fd0e <_read_r+0x1e>
 800fd08:	682b      	ldr	r3, [r5, #0]
 800fd0a:	b103      	cbz	r3, 800fd0e <_read_r+0x1e>
 800fd0c:	6023      	str	r3, [r4, #0]
 800fd0e:	bd38      	pop	{r3, r4, r5, pc}
 800fd10:	20000ab8 	.word	0x20000ab8

0800fd14 <_write_r>:
 800fd14:	b538      	push	{r3, r4, r5, lr}
 800fd16:	4d07      	ldr	r5, [pc, #28]	@ (800fd34 <_write_r+0x20>)
 800fd18:	4604      	mov	r4, r0
 800fd1a:	4608      	mov	r0, r1
 800fd1c:	4611      	mov	r1, r2
 800fd1e:	2200      	movs	r2, #0
 800fd20:	602a      	str	r2, [r5, #0]
 800fd22:	461a      	mov	r2, r3
 800fd24:	f7f2 f8e4 	bl	8001ef0 <_write>
 800fd28:	1c43      	adds	r3, r0, #1
 800fd2a:	d102      	bne.n	800fd32 <_write_r+0x1e>
 800fd2c:	682b      	ldr	r3, [r5, #0]
 800fd2e:	b103      	cbz	r3, 800fd32 <_write_r+0x1e>
 800fd30:	6023      	str	r3, [r4, #0]
 800fd32:	bd38      	pop	{r3, r4, r5, pc}
 800fd34:	20000ab8 	.word	0x20000ab8

0800fd38 <__errno>:
 800fd38:	4b01      	ldr	r3, [pc, #4]	@ (800fd40 <__errno+0x8>)
 800fd3a:	6818      	ldr	r0, [r3, #0]
 800fd3c:	4770      	bx	lr
 800fd3e:	bf00      	nop
 800fd40:	20000208 	.word	0x20000208

0800fd44 <__libc_init_array>:
 800fd44:	b570      	push	{r4, r5, r6, lr}
 800fd46:	4d0d      	ldr	r5, [pc, #52]	@ (800fd7c <__libc_init_array+0x38>)
 800fd48:	4c0d      	ldr	r4, [pc, #52]	@ (800fd80 <__libc_init_array+0x3c>)
 800fd4a:	1b64      	subs	r4, r4, r5
 800fd4c:	10a4      	asrs	r4, r4, #2
 800fd4e:	2600      	movs	r6, #0
 800fd50:	42a6      	cmp	r6, r4
 800fd52:	d109      	bne.n	800fd68 <__libc_init_array+0x24>
 800fd54:	4d0b      	ldr	r5, [pc, #44]	@ (800fd84 <__libc_init_array+0x40>)
 800fd56:	4c0c      	ldr	r4, [pc, #48]	@ (800fd88 <__libc_init_array+0x44>)
 800fd58:	f002 fe90 	bl	8012a7c <_init>
 800fd5c:	1b64      	subs	r4, r4, r5
 800fd5e:	10a4      	asrs	r4, r4, #2
 800fd60:	2600      	movs	r6, #0
 800fd62:	42a6      	cmp	r6, r4
 800fd64:	d105      	bne.n	800fd72 <__libc_init_array+0x2e>
 800fd66:	bd70      	pop	{r4, r5, r6, pc}
 800fd68:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd6c:	4798      	blx	r3
 800fd6e:	3601      	adds	r6, #1
 800fd70:	e7ee      	b.n	800fd50 <__libc_init_array+0xc>
 800fd72:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd76:	4798      	blx	r3
 800fd78:	3601      	adds	r6, #1
 800fd7a:	e7f2      	b.n	800fd62 <__libc_init_array+0x1e>
 800fd7c:	08013038 	.word	0x08013038
 800fd80:	08013038 	.word	0x08013038
 800fd84:	08013038 	.word	0x08013038
 800fd88:	0801303c 	.word	0x0801303c

0800fd8c <__retarget_lock_init_recursive>:
 800fd8c:	4770      	bx	lr

0800fd8e <__retarget_lock_acquire_recursive>:
 800fd8e:	4770      	bx	lr

0800fd90 <__retarget_lock_release_recursive>:
 800fd90:	4770      	bx	lr

0800fd92 <memcpy>:
 800fd92:	440a      	add	r2, r1
 800fd94:	4291      	cmp	r1, r2
 800fd96:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd9a:	d100      	bne.n	800fd9e <memcpy+0xc>
 800fd9c:	4770      	bx	lr
 800fd9e:	b510      	push	{r4, lr}
 800fda0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fda4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fda8:	4291      	cmp	r1, r2
 800fdaa:	d1f9      	bne.n	800fda0 <memcpy+0xe>
 800fdac:	bd10      	pop	{r4, pc}
	...

0800fdb0 <nan>:
 800fdb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fdb8 <nan+0x8>
 800fdb4:	4770      	bx	lr
 800fdb6:	bf00      	nop
 800fdb8:	00000000 	.word	0x00000000
 800fdbc:	7ff80000 	.word	0x7ff80000

0800fdc0 <nanf>:
 800fdc0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fdc8 <nanf+0x8>
 800fdc4:	4770      	bx	lr
 800fdc6:	bf00      	nop
 800fdc8:	7fc00000 	.word	0x7fc00000

0800fdcc <quorem>:
 800fdcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdd0:	6903      	ldr	r3, [r0, #16]
 800fdd2:	690c      	ldr	r4, [r1, #16]
 800fdd4:	42a3      	cmp	r3, r4
 800fdd6:	4607      	mov	r7, r0
 800fdd8:	db7e      	blt.n	800fed8 <quorem+0x10c>
 800fdda:	3c01      	subs	r4, #1
 800fddc:	f101 0814 	add.w	r8, r1, #20
 800fde0:	00a3      	lsls	r3, r4, #2
 800fde2:	f100 0514 	add.w	r5, r0, #20
 800fde6:	9300      	str	r3, [sp, #0]
 800fde8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdec:	9301      	str	r3, [sp, #4]
 800fdee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fdf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fdfe:	fbb2 f6f3 	udiv	r6, r2, r3
 800fe02:	d32e      	bcc.n	800fe62 <quorem+0x96>
 800fe04:	f04f 0a00 	mov.w	sl, #0
 800fe08:	46c4      	mov	ip, r8
 800fe0a:	46ae      	mov	lr, r5
 800fe0c:	46d3      	mov	fp, sl
 800fe0e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fe12:	b298      	uxth	r0, r3
 800fe14:	fb06 a000 	mla	r0, r6, r0, sl
 800fe18:	0c02      	lsrs	r2, r0, #16
 800fe1a:	0c1b      	lsrs	r3, r3, #16
 800fe1c:	fb06 2303 	mla	r3, r6, r3, r2
 800fe20:	f8de 2000 	ldr.w	r2, [lr]
 800fe24:	b280      	uxth	r0, r0
 800fe26:	b292      	uxth	r2, r2
 800fe28:	1a12      	subs	r2, r2, r0
 800fe2a:	445a      	add	r2, fp
 800fe2c:	f8de 0000 	ldr.w	r0, [lr]
 800fe30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe34:	b29b      	uxth	r3, r3
 800fe36:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fe3a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fe3e:	b292      	uxth	r2, r2
 800fe40:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fe44:	45e1      	cmp	r9, ip
 800fe46:	f84e 2b04 	str.w	r2, [lr], #4
 800fe4a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fe4e:	d2de      	bcs.n	800fe0e <quorem+0x42>
 800fe50:	9b00      	ldr	r3, [sp, #0]
 800fe52:	58eb      	ldr	r3, [r5, r3]
 800fe54:	b92b      	cbnz	r3, 800fe62 <quorem+0x96>
 800fe56:	9b01      	ldr	r3, [sp, #4]
 800fe58:	3b04      	subs	r3, #4
 800fe5a:	429d      	cmp	r5, r3
 800fe5c:	461a      	mov	r2, r3
 800fe5e:	d32f      	bcc.n	800fec0 <quorem+0xf4>
 800fe60:	613c      	str	r4, [r7, #16]
 800fe62:	4638      	mov	r0, r7
 800fe64:	f001 fd10 	bl	8011888 <__mcmp>
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	db25      	blt.n	800feb8 <quorem+0xec>
 800fe6c:	4629      	mov	r1, r5
 800fe6e:	2000      	movs	r0, #0
 800fe70:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe74:	f8d1 c000 	ldr.w	ip, [r1]
 800fe78:	fa1f fe82 	uxth.w	lr, r2
 800fe7c:	fa1f f38c 	uxth.w	r3, ip
 800fe80:	eba3 030e 	sub.w	r3, r3, lr
 800fe84:	4403      	add	r3, r0
 800fe86:	0c12      	lsrs	r2, r2, #16
 800fe88:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fe8c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe96:	45c1      	cmp	r9, r8
 800fe98:	f841 3b04 	str.w	r3, [r1], #4
 800fe9c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fea0:	d2e6      	bcs.n	800fe70 <quorem+0xa4>
 800fea2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800feaa:	b922      	cbnz	r2, 800feb6 <quorem+0xea>
 800feac:	3b04      	subs	r3, #4
 800feae:	429d      	cmp	r5, r3
 800feb0:	461a      	mov	r2, r3
 800feb2:	d30b      	bcc.n	800fecc <quorem+0x100>
 800feb4:	613c      	str	r4, [r7, #16]
 800feb6:	3601      	adds	r6, #1
 800feb8:	4630      	mov	r0, r6
 800feba:	b003      	add	sp, #12
 800febc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec0:	6812      	ldr	r2, [r2, #0]
 800fec2:	3b04      	subs	r3, #4
 800fec4:	2a00      	cmp	r2, #0
 800fec6:	d1cb      	bne.n	800fe60 <quorem+0x94>
 800fec8:	3c01      	subs	r4, #1
 800feca:	e7c6      	b.n	800fe5a <quorem+0x8e>
 800fecc:	6812      	ldr	r2, [r2, #0]
 800fece:	3b04      	subs	r3, #4
 800fed0:	2a00      	cmp	r2, #0
 800fed2:	d1ef      	bne.n	800feb4 <quorem+0xe8>
 800fed4:	3c01      	subs	r4, #1
 800fed6:	e7ea      	b.n	800feae <quorem+0xe2>
 800fed8:	2000      	movs	r0, #0
 800feda:	e7ee      	b.n	800feba <quorem+0xee>
 800fedc:	0000      	movs	r0, r0
	...

0800fee0 <_dtoa_r>:
 800fee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fee4:	69c7      	ldr	r7, [r0, #28]
 800fee6:	b099      	sub	sp, #100	@ 0x64
 800fee8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800feec:	ec55 4b10 	vmov	r4, r5, d0
 800fef0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fef2:	9109      	str	r1, [sp, #36]	@ 0x24
 800fef4:	4683      	mov	fp, r0
 800fef6:	920e      	str	r2, [sp, #56]	@ 0x38
 800fef8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fefa:	b97f      	cbnz	r7, 800ff1c <_dtoa_r+0x3c>
 800fefc:	2010      	movs	r0, #16
 800fefe:	f001 f937 	bl	8011170 <malloc>
 800ff02:	4602      	mov	r2, r0
 800ff04:	f8cb 001c 	str.w	r0, [fp, #28]
 800ff08:	b920      	cbnz	r0, 800ff14 <_dtoa_r+0x34>
 800ff0a:	4ba7      	ldr	r3, [pc, #668]	@ (80101a8 <_dtoa_r+0x2c8>)
 800ff0c:	21ef      	movs	r1, #239	@ 0xef
 800ff0e:	48a7      	ldr	r0, [pc, #668]	@ (80101ac <_dtoa_r+0x2cc>)
 800ff10:	f002 f95e 	bl	80121d0 <__assert_func>
 800ff14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ff18:	6007      	str	r7, [r0, #0]
 800ff1a:	60c7      	str	r7, [r0, #12]
 800ff1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ff20:	6819      	ldr	r1, [r3, #0]
 800ff22:	b159      	cbz	r1, 800ff3c <_dtoa_r+0x5c>
 800ff24:	685a      	ldr	r2, [r3, #4]
 800ff26:	604a      	str	r2, [r1, #4]
 800ff28:	2301      	movs	r3, #1
 800ff2a:	4093      	lsls	r3, r2
 800ff2c:	608b      	str	r3, [r1, #8]
 800ff2e:	4658      	mov	r0, fp
 800ff30:	f001 fa26 	bl	8011380 <_Bfree>
 800ff34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	601a      	str	r2, [r3, #0]
 800ff3c:	1e2b      	subs	r3, r5, #0
 800ff3e:	bfb9      	ittee	lt
 800ff40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ff44:	9303      	strlt	r3, [sp, #12]
 800ff46:	2300      	movge	r3, #0
 800ff48:	6033      	strge	r3, [r6, #0]
 800ff4a:	9f03      	ldr	r7, [sp, #12]
 800ff4c:	4b98      	ldr	r3, [pc, #608]	@ (80101b0 <_dtoa_r+0x2d0>)
 800ff4e:	bfbc      	itt	lt
 800ff50:	2201      	movlt	r2, #1
 800ff52:	6032      	strlt	r2, [r6, #0]
 800ff54:	43bb      	bics	r3, r7
 800ff56:	d112      	bne.n	800ff7e <_dtoa_r+0x9e>
 800ff58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ff5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ff5e:	6013      	str	r3, [r2, #0]
 800ff60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ff64:	4323      	orrs	r3, r4
 800ff66:	f000 854d 	beq.w	8010a04 <_dtoa_r+0xb24>
 800ff6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80101c4 <_dtoa_r+0x2e4>
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	f000 854f 	beq.w	8010a14 <_dtoa_r+0xb34>
 800ff76:	f10a 0303 	add.w	r3, sl, #3
 800ff7a:	f000 bd49 	b.w	8010a10 <_dtoa_r+0xb30>
 800ff7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff82:	2200      	movs	r2, #0
 800ff84:	ec51 0b17 	vmov	r0, r1, d7
 800ff88:	2300      	movs	r3, #0
 800ff8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ff8e:	f7f0 fdc3 	bl	8000b18 <__aeabi_dcmpeq>
 800ff92:	4680      	mov	r8, r0
 800ff94:	b158      	cbz	r0, 800ffae <_dtoa_r+0xce>
 800ff96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ff98:	2301      	movs	r3, #1
 800ff9a:	6013      	str	r3, [r2, #0]
 800ff9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff9e:	b113      	cbz	r3, 800ffa6 <_dtoa_r+0xc6>
 800ffa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ffa2:	4b84      	ldr	r3, [pc, #528]	@ (80101b4 <_dtoa_r+0x2d4>)
 800ffa4:	6013      	str	r3, [r2, #0]
 800ffa6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80101c8 <_dtoa_r+0x2e8>
 800ffaa:	f000 bd33 	b.w	8010a14 <_dtoa_r+0xb34>
 800ffae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ffb2:	aa16      	add	r2, sp, #88	@ 0x58
 800ffb4:	a917      	add	r1, sp, #92	@ 0x5c
 800ffb6:	4658      	mov	r0, fp
 800ffb8:	f001 fd86 	bl	8011ac8 <__d2b>
 800ffbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ffc0:	4681      	mov	r9, r0
 800ffc2:	2e00      	cmp	r6, #0
 800ffc4:	d077      	beq.n	80100b6 <_dtoa_r+0x1d6>
 800ffc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ffc8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ffcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ffd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ffd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ffdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	4b74      	ldr	r3, [pc, #464]	@ (80101b8 <_dtoa_r+0x2d8>)
 800ffe6:	f7f0 f977 	bl	80002d8 <__aeabi_dsub>
 800ffea:	a369      	add	r3, pc, #420	@ (adr r3, 8010190 <_dtoa_r+0x2b0>)
 800ffec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff0:	f7f0 fb2a 	bl	8000648 <__aeabi_dmul>
 800fff4:	a368      	add	r3, pc, #416	@ (adr r3, 8010198 <_dtoa_r+0x2b8>)
 800fff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffa:	f7f0 f96f 	bl	80002dc <__adddf3>
 800fffe:	4604      	mov	r4, r0
 8010000:	4630      	mov	r0, r6
 8010002:	460d      	mov	r5, r1
 8010004:	f7f0 fab6 	bl	8000574 <__aeabi_i2d>
 8010008:	a365      	add	r3, pc, #404	@ (adr r3, 80101a0 <_dtoa_r+0x2c0>)
 801000a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000e:	f7f0 fb1b 	bl	8000648 <__aeabi_dmul>
 8010012:	4602      	mov	r2, r0
 8010014:	460b      	mov	r3, r1
 8010016:	4620      	mov	r0, r4
 8010018:	4629      	mov	r1, r5
 801001a:	f7f0 f95f 	bl	80002dc <__adddf3>
 801001e:	4604      	mov	r4, r0
 8010020:	460d      	mov	r5, r1
 8010022:	f7f0 fdc1 	bl	8000ba8 <__aeabi_d2iz>
 8010026:	2200      	movs	r2, #0
 8010028:	4607      	mov	r7, r0
 801002a:	2300      	movs	r3, #0
 801002c:	4620      	mov	r0, r4
 801002e:	4629      	mov	r1, r5
 8010030:	f7f0 fd7c 	bl	8000b2c <__aeabi_dcmplt>
 8010034:	b140      	cbz	r0, 8010048 <_dtoa_r+0x168>
 8010036:	4638      	mov	r0, r7
 8010038:	f7f0 fa9c 	bl	8000574 <__aeabi_i2d>
 801003c:	4622      	mov	r2, r4
 801003e:	462b      	mov	r3, r5
 8010040:	f7f0 fd6a 	bl	8000b18 <__aeabi_dcmpeq>
 8010044:	b900      	cbnz	r0, 8010048 <_dtoa_r+0x168>
 8010046:	3f01      	subs	r7, #1
 8010048:	2f16      	cmp	r7, #22
 801004a:	d851      	bhi.n	80100f0 <_dtoa_r+0x210>
 801004c:	4b5b      	ldr	r3, [pc, #364]	@ (80101bc <_dtoa_r+0x2dc>)
 801004e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010056:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801005a:	f7f0 fd67 	bl	8000b2c <__aeabi_dcmplt>
 801005e:	2800      	cmp	r0, #0
 8010060:	d048      	beq.n	80100f4 <_dtoa_r+0x214>
 8010062:	3f01      	subs	r7, #1
 8010064:	2300      	movs	r3, #0
 8010066:	9312      	str	r3, [sp, #72]	@ 0x48
 8010068:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801006a:	1b9b      	subs	r3, r3, r6
 801006c:	1e5a      	subs	r2, r3, #1
 801006e:	bf44      	itt	mi
 8010070:	f1c3 0801 	rsbmi	r8, r3, #1
 8010074:	2300      	movmi	r3, #0
 8010076:	9208      	str	r2, [sp, #32]
 8010078:	bf54      	ite	pl
 801007a:	f04f 0800 	movpl.w	r8, #0
 801007e:	9308      	strmi	r3, [sp, #32]
 8010080:	2f00      	cmp	r7, #0
 8010082:	db39      	blt.n	80100f8 <_dtoa_r+0x218>
 8010084:	9b08      	ldr	r3, [sp, #32]
 8010086:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010088:	443b      	add	r3, r7
 801008a:	9308      	str	r3, [sp, #32]
 801008c:	2300      	movs	r3, #0
 801008e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010092:	2b09      	cmp	r3, #9
 8010094:	d864      	bhi.n	8010160 <_dtoa_r+0x280>
 8010096:	2b05      	cmp	r3, #5
 8010098:	bfc4      	itt	gt
 801009a:	3b04      	subgt	r3, #4
 801009c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801009e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100a0:	f1a3 0302 	sub.w	r3, r3, #2
 80100a4:	bfcc      	ite	gt
 80100a6:	2400      	movgt	r4, #0
 80100a8:	2401      	movle	r4, #1
 80100aa:	2b03      	cmp	r3, #3
 80100ac:	d863      	bhi.n	8010176 <_dtoa_r+0x296>
 80100ae:	e8df f003 	tbb	[pc, r3]
 80100b2:	372a      	.short	0x372a
 80100b4:	5535      	.short	0x5535
 80100b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80100ba:	441e      	add	r6, r3
 80100bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80100c0:	2b20      	cmp	r3, #32
 80100c2:	bfc1      	itttt	gt
 80100c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80100c8:	409f      	lslgt	r7, r3
 80100ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80100ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80100d2:	bfd6      	itet	le
 80100d4:	f1c3 0320 	rsble	r3, r3, #32
 80100d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80100dc:	fa04 f003 	lslle.w	r0, r4, r3
 80100e0:	f7f0 fa38 	bl	8000554 <__aeabi_ui2d>
 80100e4:	2201      	movs	r2, #1
 80100e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80100ea:	3e01      	subs	r6, #1
 80100ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80100ee:	e777      	b.n	800ffe0 <_dtoa_r+0x100>
 80100f0:	2301      	movs	r3, #1
 80100f2:	e7b8      	b.n	8010066 <_dtoa_r+0x186>
 80100f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80100f6:	e7b7      	b.n	8010068 <_dtoa_r+0x188>
 80100f8:	427b      	negs	r3, r7
 80100fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80100fc:	2300      	movs	r3, #0
 80100fe:	eba8 0807 	sub.w	r8, r8, r7
 8010102:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010104:	e7c4      	b.n	8010090 <_dtoa_r+0x1b0>
 8010106:	2300      	movs	r3, #0
 8010108:	930b      	str	r3, [sp, #44]	@ 0x2c
 801010a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801010c:	2b00      	cmp	r3, #0
 801010e:	dc35      	bgt.n	801017c <_dtoa_r+0x29c>
 8010110:	2301      	movs	r3, #1
 8010112:	9300      	str	r3, [sp, #0]
 8010114:	9307      	str	r3, [sp, #28]
 8010116:	461a      	mov	r2, r3
 8010118:	920e      	str	r2, [sp, #56]	@ 0x38
 801011a:	e00b      	b.n	8010134 <_dtoa_r+0x254>
 801011c:	2301      	movs	r3, #1
 801011e:	e7f3      	b.n	8010108 <_dtoa_r+0x228>
 8010120:	2300      	movs	r3, #0
 8010122:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010126:	18fb      	adds	r3, r7, r3
 8010128:	9300      	str	r3, [sp, #0]
 801012a:	3301      	adds	r3, #1
 801012c:	2b01      	cmp	r3, #1
 801012e:	9307      	str	r3, [sp, #28]
 8010130:	bfb8      	it	lt
 8010132:	2301      	movlt	r3, #1
 8010134:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010138:	2100      	movs	r1, #0
 801013a:	2204      	movs	r2, #4
 801013c:	f102 0514 	add.w	r5, r2, #20
 8010140:	429d      	cmp	r5, r3
 8010142:	d91f      	bls.n	8010184 <_dtoa_r+0x2a4>
 8010144:	6041      	str	r1, [r0, #4]
 8010146:	4658      	mov	r0, fp
 8010148:	f001 f8da 	bl	8011300 <_Balloc>
 801014c:	4682      	mov	sl, r0
 801014e:	2800      	cmp	r0, #0
 8010150:	d13c      	bne.n	80101cc <_dtoa_r+0x2ec>
 8010152:	4b1b      	ldr	r3, [pc, #108]	@ (80101c0 <_dtoa_r+0x2e0>)
 8010154:	4602      	mov	r2, r0
 8010156:	f240 11af 	movw	r1, #431	@ 0x1af
 801015a:	e6d8      	b.n	800ff0e <_dtoa_r+0x2e>
 801015c:	2301      	movs	r3, #1
 801015e:	e7e0      	b.n	8010122 <_dtoa_r+0x242>
 8010160:	2401      	movs	r4, #1
 8010162:	2300      	movs	r3, #0
 8010164:	9309      	str	r3, [sp, #36]	@ 0x24
 8010166:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010168:	f04f 33ff 	mov.w	r3, #4294967295
 801016c:	9300      	str	r3, [sp, #0]
 801016e:	9307      	str	r3, [sp, #28]
 8010170:	2200      	movs	r2, #0
 8010172:	2312      	movs	r3, #18
 8010174:	e7d0      	b.n	8010118 <_dtoa_r+0x238>
 8010176:	2301      	movs	r3, #1
 8010178:	930b      	str	r3, [sp, #44]	@ 0x2c
 801017a:	e7f5      	b.n	8010168 <_dtoa_r+0x288>
 801017c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	9307      	str	r3, [sp, #28]
 8010182:	e7d7      	b.n	8010134 <_dtoa_r+0x254>
 8010184:	3101      	adds	r1, #1
 8010186:	0052      	lsls	r2, r2, #1
 8010188:	e7d8      	b.n	801013c <_dtoa_r+0x25c>
 801018a:	bf00      	nop
 801018c:	f3af 8000 	nop.w
 8010190:	636f4361 	.word	0x636f4361
 8010194:	3fd287a7 	.word	0x3fd287a7
 8010198:	8b60c8b3 	.word	0x8b60c8b3
 801019c:	3fc68a28 	.word	0x3fc68a28
 80101a0:	509f79fb 	.word	0x509f79fb
 80101a4:	3fd34413 	.word	0x3fd34413
 80101a8:	08012c96 	.word	0x08012c96
 80101ac:	08012cad 	.word	0x08012cad
 80101b0:	7ff00000 	.word	0x7ff00000
 80101b4:	08012c59 	.word	0x08012c59
 80101b8:	3ff80000 	.word	0x3ff80000
 80101bc:	08012e08 	.word	0x08012e08
 80101c0:	08012d05 	.word	0x08012d05
 80101c4:	08012c92 	.word	0x08012c92
 80101c8:	08012c58 	.word	0x08012c58
 80101cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80101d0:	6018      	str	r0, [r3, #0]
 80101d2:	9b07      	ldr	r3, [sp, #28]
 80101d4:	2b0e      	cmp	r3, #14
 80101d6:	f200 80a4 	bhi.w	8010322 <_dtoa_r+0x442>
 80101da:	2c00      	cmp	r4, #0
 80101dc:	f000 80a1 	beq.w	8010322 <_dtoa_r+0x442>
 80101e0:	2f00      	cmp	r7, #0
 80101e2:	dd33      	ble.n	801024c <_dtoa_r+0x36c>
 80101e4:	4bad      	ldr	r3, [pc, #692]	@ (801049c <_dtoa_r+0x5bc>)
 80101e6:	f007 020f 	and.w	r2, r7, #15
 80101ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101ee:	ed93 7b00 	vldr	d7, [r3]
 80101f2:	05f8      	lsls	r0, r7, #23
 80101f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80101f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80101fc:	d516      	bpl.n	801022c <_dtoa_r+0x34c>
 80101fe:	4ba8      	ldr	r3, [pc, #672]	@ (80104a0 <_dtoa_r+0x5c0>)
 8010200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010204:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010208:	f7f0 fb48 	bl	800089c <__aeabi_ddiv>
 801020c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010210:	f004 040f 	and.w	r4, r4, #15
 8010214:	2603      	movs	r6, #3
 8010216:	4da2      	ldr	r5, [pc, #648]	@ (80104a0 <_dtoa_r+0x5c0>)
 8010218:	b954      	cbnz	r4, 8010230 <_dtoa_r+0x350>
 801021a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801021e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010222:	f7f0 fb3b 	bl	800089c <__aeabi_ddiv>
 8010226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801022a:	e028      	b.n	801027e <_dtoa_r+0x39e>
 801022c:	2602      	movs	r6, #2
 801022e:	e7f2      	b.n	8010216 <_dtoa_r+0x336>
 8010230:	07e1      	lsls	r1, r4, #31
 8010232:	d508      	bpl.n	8010246 <_dtoa_r+0x366>
 8010234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010238:	e9d5 2300 	ldrd	r2, r3, [r5]
 801023c:	f7f0 fa04 	bl	8000648 <__aeabi_dmul>
 8010240:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010244:	3601      	adds	r6, #1
 8010246:	1064      	asrs	r4, r4, #1
 8010248:	3508      	adds	r5, #8
 801024a:	e7e5      	b.n	8010218 <_dtoa_r+0x338>
 801024c:	f000 80d2 	beq.w	80103f4 <_dtoa_r+0x514>
 8010250:	427c      	negs	r4, r7
 8010252:	4b92      	ldr	r3, [pc, #584]	@ (801049c <_dtoa_r+0x5bc>)
 8010254:	4d92      	ldr	r5, [pc, #584]	@ (80104a0 <_dtoa_r+0x5c0>)
 8010256:	f004 020f 	and.w	r2, r4, #15
 801025a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801025e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010262:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010266:	f7f0 f9ef 	bl	8000648 <__aeabi_dmul>
 801026a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801026e:	1124      	asrs	r4, r4, #4
 8010270:	2300      	movs	r3, #0
 8010272:	2602      	movs	r6, #2
 8010274:	2c00      	cmp	r4, #0
 8010276:	f040 80b2 	bne.w	80103de <_dtoa_r+0x4fe>
 801027a:	2b00      	cmp	r3, #0
 801027c:	d1d3      	bne.n	8010226 <_dtoa_r+0x346>
 801027e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010280:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010284:	2b00      	cmp	r3, #0
 8010286:	f000 80b7 	beq.w	80103f8 <_dtoa_r+0x518>
 801028a:	4b86      	ldr	r3, [pc, #536]	@ (80104a4 <_dtoa_r+0x5c4>)
 801028c:	2200      	movs	r2, #0
 801028e:	4620      	mov	r0, r4
 8010290:	4629      	mov	r1, r5
 8010292:	f7f0 fc4b 	bl	8000b2c <__aeabi_dcmplt>
 8010296:	2800      	cmp	r0, #0
 8010298:	f000 80ae 	beq.w	80103f8 <_dtoa_r+0x518>
 801029c:	9b07      	ldr	r3, [sp, #28]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	f000 80aa 	beq.w	80103f8 <_dtoa_r+0x518>
 80102a4:	9b00      	ldr	r3, [sp, #0]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	dd37      	ble.n	801031a <_dtoa_r+0x43a>
 80102aa:	1e7b      	subs	r3, r7, #1
 80102ac:	9304      	str	r3, [sp, #16]
 80102ae:	4620      	mov	r0, r4
 80102b0:	4b7d      	ldr	r3, [pc, #500]	@ (80104a8 <_dtoa_r+0x5c8>)
 80102b2:	2200      	movs	r2, #0
 80102b4:	4629      	mov	r1, r5
 80102b6:	f7f0 f9c7 	bl	8000648 <__aeabi_dmul>
 80102ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102be:	9c00      	ldr	r4, [sp, #0]
 80102c0:	3601      	adds	r6, #1
 80102c2:	4630      	mov	r0, r6
 80102c4:	f7f0 f956 	bl	8000574 <__aeabi_i2d>
 80102c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102cc:	f7f0 f9bc 	bl	8000648 <__aeabi_dmul>
 80102d0:	4b76      	ldr	r3, [pc, #472]	@ (80104ac <_dtoa_r+0x5cc>)
 80102d2:	2200      	movs	r2, #0
 80102d4:	f7f0 f802 	bl	80002dc <__adddf3>
 80102d8:	4605      	mov	r5, r0
 80102da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80102de:	2c00      	cmp	r4, #0
 80102e0:	f040 808d 	bne.w	80103fe <_dtoa_r+0x51e>
 80102e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102e8:	4b71      	ldr	r3, [pc, #452]	@ (80104b0 <_dtoa_r+0x5d0>)
 80102ea:	2200      	movs	r2, #0
 80102ec:	f7ef fff4 	bl	80002d8 <__aeabi_dsub>
 80102f0:	4602      	mov	r2, r0
 80102f2:	460b      	mov	r3, r1
 80102f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80102f8:	462a      	mov	r2, r5
 80102fa:	4633      	mov	r3, r6
 80102fc:	f7f0 fc34 	bl	8000b68 <__aeabi_dcmpgt>
 8010300:	2800      	cmp	r0, #0
 8010302:	f040 828b 	bne.w	801081c <_dtoa_r+0x93c>
 8010306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801030a:	462a      	mov	r2, r5
 801030c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010310:	f7f0 fc0c 	bl	8000b2c <__aeabi_dcmplt>
 8010314:	2800      	cmp	r0, #0
 8010316:	f040 8128 	bne.w	801056a <_dtoa_r+0x68a>
 801031a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801031e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010322:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010324:	2b00      	cmp	r3, #0
 8010326:	f2c0 815a 	blt.w	80105de <_dtoa_r+0x6fe>
 801032a:	2f0e      	cmp	r7, #14
 801032c:	f300 8157 	bgt.w	80105de <_dtoa_r+0x6fe>
 8010330:	4b5a      	ldr	r3, [pc, #360]	@ (801049c <_dtoa_r+0x5bc>)
 8010332:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010336:	ed93 7b00 	vldr	d7, [r3]
 801033a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801033c:	2b00      	cmp	r3, #0
 801033e:	ed8d 7b00 	vstr	d7, [sp]
 8010342:	da03      	bge.n	801034c <_dtoa_r+0x46c>
 8010344:	9b07      	ldr	r3, [sp, #28]
 8010346:	2b00      	cmp	r3, #0
 8010348:	f340 8101 	ble.w	801054e <_dtoa_r+0x66e>
 801034c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010350:	4656      	mov	r6, sl
 8010352:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010356:	4620      	mov	r0, r4
 8010358:	4629      	mov	r1, r5
 801035a:	f7f0 fa9f 	bl	800089c <__aeabi_ddiv>
 801035e:	f7f0 fc23 	bl	8000ba8 <__aeabi_d2iz>
 8010362:	4680      	mov	r8, r0
 8010364:	f7f0 f906 	bl	8000574 <__aeabi_i2d>
 8010368:	e9dd 2300 	ldrd	r2, r3, [sp]
 801036c:	f7f0 f96c 	bl	8000648 <__aeabi_dmul>
 8010370:	4602      	mov	r2, r0
 8010372:	460b      	mov	r3, r1
 8010374:	4620      	mov	r0, r4
 8010376:	4629      	mov	r1, r5
 8010378:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801037c:	f7ef ffac 	bl	80002d8 <__aeabi_dsub>
 8010380:	f806 4b01 	strb.w	r4, [r6], #1
 8010384:	9d07      	ldr	r5, [sp, #28]
 8010386:	eba6 040a 	sub.w	r4, r6, sl
 801038a:	42a5      	cmp	r5, r4
 801038c:	4602      	mov	r2, r0
 801038e:	460b      	mov	r3, r1
 8010390:	f040 8117 	bne.w	80105c2 <_dtoa_r+0x6e2>
 8010394:	f7ef ffa2 	bl	80002dc <__adddf3>
 8010398:	e9dd 2300 	ldrd	r2, r3, [sp]
 801039c:	4604      	mov	r4, r0
 801039e:	460d      	mov	r5, r1
 80103a0:	f7f0 fbe2 	bl	8000b68 <__aeabi_dcmpgt>
 80103a4:	2800      	cmp	r0, #0
 80103a6:	f040 80f9 	bne.w	801059c <_dtoa_r+0x6bc>
 80103aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103ae:	4620      	mov	r0, r4
 80103b0:	4629      	mov	r1, r5
 80103b2:	f7f0 fbb1 	bl	8000b18 <__aeabi_dcmpeq>
 80103b6:	b118      	cbz	r0, 80103c0 <_dtoa_r+0x4e0>
 80103b8:	f018 0f01 	tst.w	r8, #1
 80103bc:	f040 80ee 	bne.w	801059c <_dtoa_r+0x6bc>
 80103c0:	4649      	mov	r1, r9
 80103c2:	4658      	mov	r0, fp
 80103c4:	f000 ffdc 	bl	8011380 <_Bfree>
 80103c8:	2300      	movs	r3, #0
 80103ca:	7033      	strb	r3, [r6, #0]
 80103cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80103ce:	3701      	adds	r7, #1
 80103d0:	601f      	str	r7, [r3, #0]
 80103d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	f000 831d 	beq.w	8010a14 <_dtoa_r+0xb34>
 80103da:	601e      	str	r6, [r3, #0]
 80103dc:	e31a      	b.n	8010a14 <_dtoa_r+0xb34>
 80103de:	07e2      	lsls	r2, r4, #31
 80103e0:	d505      	bpl.n	80103ee <_dtoa_r+0x50e>
 80103e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80103e6:	f7f0 f92f 	bl	8000648 <__aeabi_dmul>
 80103ea:	3601      	adds	r6, #1
 80103ec:	2301      	movs	r3, #1
 80103ee:	1064      	asrs	r4, r4, #1
 80103f0:	3508      	adds	r5, #8
 80103f2:	e73f      	b.n	8010274 <_dtoa_r+0x394>
 80103f4:	2602      	movs	r6, #2
 80103f6:	e742      	b.n	801027e <_dtoa_r+0x39e>
 80103f8:	9c07      	ldr	r4, [sp, #28]
 80103fa:	9704      	str	r7, [sp, #16]
 80103fc:	e761      	b.n	80102c2 <_dtoa_r+0x3e2>
 80103fe:	4b27      	ldr	r3, [pc, #156]	@ (801049c <_dtoa_r+0x5bc>)
 8010400:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010402:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010406:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801040a:	4454      	add	r4, sl
 801040c:	2900      	cmp	r1, #0
 801040e:	d053      	beq.n	80104b8 <_dtoa_r+0x5d8>
 8010410:	4928      	ldr	r1, [pc, #160]	@ (80104b4 <_dtoa_r+0x5d4>)
 8010412:	2000      	movs	r0, #0
 8010414:	f7f0 fa42 	bl	800089c <__aeabi_ddiv>
 8010418:	4633      	mov	r3, r6
 801041a:	462a      	mov	r2, r5
 801041c:	f7ef ff5c 	bl	80002d8 <__aeabi_dsub>
 8010420:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010424:	4656      	mov	r6, sl
 8010426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801042a:	f7f0 fbbd 	bl	8000ba8 <__aeabi_d2iz>
 801042e:	4605      	mov	r5, r0
 8010430:	f7f0 f8a0 	bl	8000574 <__aeabi_i2d>
 8010434:	4602      	mov	r2, r0
 8010436:	460b      	mov	r3, r1
 8010438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801043c:	f7ef ff4c 	bl	80002d8 <__aeabi_dsub>
 8010440:	3530      	adds	r5, #48	@ 0x30
 8010442:	4602      	mov	r2, r0
 8010444:	460b      	mov	r3, r1
 8010446:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801044a:	f806 5b01 	strb.w	r5, [r6], #1
 801044e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010452:	f7f0 fb6b 	bl	8000b2c <__aeabi_dcmplt>
 8010456:	2800      	cmp	r0, #0
 8010458:	d171      	bne.n	801053e <_dtoa_r+0x65e>
 801045a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801045e:	4911      	ldr	r1, [pc, #68]	@ (80104a4 <_dtoa_r+0x5c4>)
 8010460:	2000      	movs	r0, #0
 8010462:	f7ef ff39 	bl	80002d8 <__aeabi_dsub>
 8010466:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801046a:	f7f0 fb5f 	bl	8000b2c <__aeabi_dcmplt>
 801046e:	2800      	cmp	r0, #0
 8010470:	f040 8095 	bne.w	801059e <_dtoa_r+0x6be>
 8010474:	42a6      	cmp	r6, r4
 8010476:	f43f af50 	beq.w	801031a <_dtoa_r+0x43a>
 801047a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801047e:	4b0a      	ldr	r3, [pc, #40]	@ (80104a8 <_dtoa_r+0x5c8>)
 8010480:	2200      	movs	r2, #0
 8010482:	f7f0 f8e1 	bl	8000648 <__aeabi_dmul>
 8010486:	4b08      	ldr	r3, [pc, #32]	@ (80104a8 <_dtoa_r+0x5c8>)
 8010488:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801048c:	2200      	movs	r2, #0
 801048e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010492:	f7f0 f8d9 	bl	8000648 <__aeabi_dmul>
 8010496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801049a:	e7c4      	b.n	8010426 <_dtoa_r+0x546>
 801049c:	08012e08 	.word	0x08012e08
 80104a0:	08012de0 	.word	0x08012de0
 80104a4:	3ff00000 	.word	0x3ff00000
 80104a8:	40240000 	.word	0x40240000
 80104ac:	401c0000 	.word	0x401c0000
 80104b0:	40140000 	.word	0x40140000
 80104b4:	3fe00000 	.word	0x3fe00000
 80104b8:	4631      	mov	r1, r6
 80104ba:	4628      	mov	r0, r5
 80104bc:	f7f0 f8c4 	bl	8000648 <__aeabi_dmul>
 80104c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80104c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80104c6:	4656      	mov	r6, sl
 80104c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104cc:	f7f0 fb6c 	bl	8000ba8 <__aeabi_d2iz>
 80104d0:	4605      	mov	r5, r0
 80104d2:	f7f0 f84f 	bl	8000574 <__aeabi_i2d>
 80104d6:	4602      	mov	r2, r0
 80104d8:	460b      	mov	r3, r1
 80104da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104de:	f7ef fefb 	bl	80002d8 <__aeabi_dsub>
 80104e2:	3530      	adds	r5, #48	@ 0x30
 80104e4:	f806 5b01 	strb.w	r5, [r6], #1
 80104e8:	4602      	mov	r2, r0
 80104ea:	460b      	mov	r3, r1
 80104ec:	42a6      	cmp	r6, r4
 80104ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80104f2:	f04f 0200 	mov.w	r2, #0
 80104f6:	d124      	bne.n	8010542 <_dtoa_r+0x662>
 80104f8:	4bac      	ldr	r3, [pc, #688]	@ (80107ac <_dtoa_r+0x8cc>)
 80104fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80104fe:	f7ef feed 	bl	80002dc <__adddf3>
 8010502:	4602      	mov	r2, r0
 8010504:	460b      	mov	r3, r1
 8010506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801050a:	f7f0 fb2d 	bl	8000b68 <__aeabi_dcmpgt>
 801050e:	2800      	cmp	r0, #0
 8010510:	d145      	bne.n	801059e <_dtoa_r+0x6be>
 8010512:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010516:	49a5      	ldr	r1, [pc, #660]	@ (80107ac <_dtoa_r+0x8cc>)
 8010518:	2000      	movs	r0, #0
 801051a:	f7ef fedd 	bl	80002d8 <__aeabi_dsub>
 801051e:	4602      	mov	r2, r0
 8010520:	460b      	mov	r3, r1
 8010522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010526:	f7f0 fb01 	bl	8000b2c <__aeabi_dcmplt>
 801052a:	2800      	cmp	r0, #0
 801052c:	f43f aef5 	beq.w	801031a <_dtoa_r+0x43a>
 8010530:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010532:	1e73      	subs	r3, r6, #1
 8010534:	9315      	str	r3, [sp, #84]	@ 0x54
 8010536:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801053a:	2b30      	cmp	r3, #48	@ 0x30
 801053c:	d0f8      	beq.n	8010530 <_dtoa_r+0x650>
 801053e:	9f04      	ldr	r7, [sp, #16]
 8010540:	e73e      	b.n	80103c0 <_dtoa_r+0x4e0>
 8010542:	4b9b      	ldr	r3, [pc, #620]	@ (80107b0 <_dtoa_r+0x8d0>)
 8010544:	f7f0 f880 	bl	8000648 <__aeabi_dmul>
 8010548:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801054c:	e7bc      	b.n	80104c8 <_dtoa_r+0x5e8>
 801054e:	d10c      	bne.n	801056a <_dtoa_r+0x68a>
 8010550:	4b98      	ldr	r3, [pc, #608]	@ (80107b4 <_dtoa_r+0x8d4>)
 8010552:	2200      	movs	r2, #0
 8010554:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010558:	f7f0 f876 	bl	8000648 <__aeabi_dmul>
 801055c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010560:	f7f0 faf8 	bl	8000b54 <__aeabi_dcmpge>
 8010564:	2800      	cmp	r0, #0
 8010566:	f000 8157 	beq.w	8010818 <_dtoa_r+0x938>
 801056a:	2400      	movs	r4, #0
 801056c:	4625      	mov	r5, r4
 801056e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010570:	43db      	mvns	r3, r3
 8010572:	9304      	str	r3, [sp, #16]
 8010574:	4656      	mov	r6, sl
 8010576:	2700      	movs	r7, #0
 8010578:	4621      	mov	r1, r4
 801057a:	4658      	mov	r0, fp
 801057c:	f000 ff00 	bl	8011380 <_Bfree>
 8010580:	2d00      	cmp	r5, #0
 8010582:	d0dc      	beq.n	801053e <_dtoa_r+0x65e>
 8010584:	b12f      	cbz	r7, 8010592 <_dtoa_r+0x6b2>
 8010586:	42af      	cmp	r7, r5
 8010588:	d003      	beq.n	8010592 <_dtoa_r+0x6b2>
 801058a:	4639      	mov	r1, r7
 801058c:	4658      	mov	r0, fp
 801058e:	f000 fef7 	bl	8011380 <_Bfree>
 8010592:	4629      	mov	r1, r5
 8010594:	4658      	mov	r0, fp
 8010596:	f000 fef3 	bl	8011380 <_Bfree>
 801059a:	e7d0      	b.n	801053e <_dtoa_r+0x65e>
 801059c:	9704      	str	r7, [sp, #16]
 801059e:	4633      	mov	r3, r6
 80105a0:	461e      	mov	r6, r3
 80105a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105a6:	2a39      	cmp	r2, #57	@ 0x39
 80105a8:	d107      	bne.n	80105ba <_dtoa_r+0x6da>
 80105aa:	459a      	cmp	sl, r3
 80105ac:	d1f8      	bne.n	80105a0 <_dtoa_r+0x6c0>
 80105ae:	9a04      	ldr	r2, [sp, #16]
 80105b0:	3201      	adds	r2, #1
 80105b2:	9204      	str	r2, [sp, #16]
 80105b4:	2230      	movs	r2, #48	@ 0x30
 80105b6:	f88a 2000 	strb.w	r2, [sl]
 80105ba:	781a      	ldrb	r2, [r3, #0]
 80105bc:	3201      	adds	r2, #1
 80105be:	701a      	strb	r2, [r3, #0]
 80105c0:	e7bd      	b.n	801053e <_dtoa_r+0x65e>
 80105c2:	4b7b      	ldr	r3, [pc, #492]	@ (80107b0 <_dtoa_r+0x8d0>)
 80105c4:	2200      	movs	r2, #0
 80105c6:	f7f0 f83f 	bl	8000648 <__aeabi_dmul>
 80105ca:	2200      	movs	r2, #0
 80105cc:	2300      	movs	r3, #0
 80105ce:	4604      	mov	r4, r0
 80105d0:	460d      	mov	r5, r1
 80105d2:	f7f0 faa1 	bl	8000b18 <__aeabi_dcmpeq>
 80105d6:	2800      	cmp	r0, #0
 80105d8:	f43f aebb 	beq.w	8010352 <_dtoa_r+0x472>
 80105dc:	e6f0      	b.n	80103c0 <_dtoa_r+0x4e0>
 80105de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80105e0:	2a00      	cmp	r2, #0
 80105e2:	f000 80db 	beq.w	801079c <_dtoa_r+0x8bc>
 80105e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105e8:	2a01      	cmp	r2, #1
 80105ea:	f300 80bf 	bgt.w	801076c <_dtoa_r+0x88c>
 80105ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80105f0:	2a00      	cmp	r2, #0
 80105f2:	f000 80b7 	beq.w	8010764 <_dtoa_r+0x884>
 80105f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80105fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80105fc:	4646      	mov	r6, r8
 80105fe:	9a08      	ldr	r2, [sp, #32]
 8010600:	2101      	movs	r1, #1
 8010602:	441a      	add	r2, r3
 8010604:	4658      	mov	r0, fp
 8010606:	4498      	add	r8, r3
 8010608:	9208      	str	r2, [sp, #32]
 801060a:	f000 ffb7 	bl	801157c <__i2b>
 801060e:	4605      	mov	r5, r0
 8010610:	b15e      	cbz	r6, 801062a <_dtoa_r+0x74a>
 8010612:	9b08      	ldr	r3, [sp, #32]
 8010614:	2b00      	cmp	r3, #0
 8010616:	dd08      	ble.n	801062a <_dtoa_r+0x74a>
 8010618:	42b3      	cmp	r3, r6
 801061a:	9a08      	ldr	r2, [sp, #32]
 801061c:	bfa8      	it	ge
 801061e:	4633      	movge	r3, r6
 8010620:	eba8 0803 	sub.w	r8, r8, r3
 8010624:	1af6      	subs	r6, r6, r3
 8010626:	1ad3      	subs	r3, r2, r3
 8010628:	9308      	str	r3, [sp, #32]
 801062a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801062c:	b1f3      	cbz	r3, 801066c <_dtoa_r+0x78c>
 801062e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010630:	2b00      	cmp	r3, #0
 8010632:	f000 80b7 	beq.w	80107a4 <_dtoa_r+0x8c4>
 8010636:	b18c      	cbz	r4, 801065c <_dtoa_r+0x77c>
 8010638:	4629      	mov	r1, r5
 801063a:	4622      	mov	r2, r4
 801063c:	4658      	mov	r0, fp
 801063e:	f001 f85d 	bl	80116fc <__pow5mult>
 8010642:	464a      	mov	r2, r9
 8010644:	4601      	mov	r1, r0
 8010646:	4605      	mov	r5, r0
 8010648:	4658      	mov	r0, fp
 801064a:	f000 ffad 	bl	80115a8 <__multiply>
 801064e:	4649      	mov	r1, r9
 8010650:	9004      	str	r0, [sp, #16]
 8010652:	4658      	mov	r0, fp
 8010654:	f000 fe94 	bl	8011380 <_Bfree>
 8010658:	9b04      	ldr	r3, [sp, #16]
 801065a:	4699      	mov	r9, r3
 801065c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801065e:	1b1a      	subs	r2, r3, r4
 8010660:	d004      	beq.n	801066c <_dtoa_r+0x78c>
 8010662:	4649      	mov	r1, r9
 8010664:	4658      	mov	r0, fp
 8010666:	f001 f849 	bl	80116fc <__pow5mult>
 801066a:	4681      	mov	r9, r0
 801066c:	2101      	movs	r1, #1
 801066e:	4658      	mov	r0, fp
 8010670:	f000 ff84 	bl	801157c <__i2b>
 8010674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010676:	4604      	mov	r4, r0
 8010678:	2b00      	cmp	r3, #0
 801067a:	f000 81cf 	beq.w	8010a1c <_dtoa_r+0xb3c>
 801067e:	461a      	mov	r2, r3
 8010680:	4601      	mov	r1, r0
 8010682:	4658      	mov	r0, fp
 8010684:	f001 f83a 	bl	80116fc <__pow5mult>
 8010688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801068a:	2b01      	cmp	r3, #1
 801068c:	4604      	mov	r4, r0
 801068e:	f300 8095 	bgt.w	80107bc <_dtoa_r+0x8dc>
 8010692:	9b02      	ldr	r3, [sp, #8]
 8010694:	2b00      	cmp	r3, #0
 8010696:	f040 8087 	bne.w	80107a8 <_dtoa_r+0x8c8>
 801069a:	9b03      	ldr	r3, [sp, #12]
 801069c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	f040 8089 	bne.w	80107b8 <_dtoa_r+0x8d8>
 80106a6:	9b03      	ldr	r3, [sp, #12]
 80106a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80106ac:	0d1b      	lsrs	r3, r3, #20
 80106ae:	051b      	lsls	r3, r3, #20
 80106b0:	b12b      	cbz	r3, 80106be <_dtoa_r+0x7de>
 80106b2:	9b08      	ldr	r3, [sp, #32]
 80106b4:	3301      	adds	r3, #1
 80106b6:	9308      	str	r3, [sp, #32]
 80106b8:	f108 0801 	add.w	r8, r8, #1
 80106bc:	2301      	movs	r3, #1
 80106be:	930a      	str	r3, [sp, #40]	@ 0x28
 80106c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	f000 81b0 	beq.w	8010a28 <_dtoa_r+0xb48>
 80106c8:	6923      	ldr	r3, [r4, #16]
 80106ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80106ce:	6918      	ldr	r0, [r3, #16]
 80106d0:	f000 ff08 	bl	80114e4 <__hi0bits>
 80106d4:	f1c0 0020 	rsb	r0, r0, #32
 80106d8:	9b08      	ldr	r3, [sp, #32]
 80106da:	4418      	add	r0, r3
 80106dc:	f010 001f 	ands.w	r0, r0, #31
 80106e0:	d077      	beq.n	80107d2 <_dtoa_r+0x8f2>
 80106e2:	f1c0 0320 	rsb	r3, r0, #32
 80106e6:	2b04      	cmp	r3, #4
 80106e8:	dd6b      	ble.n	80107c2 <_dtoa_r+0x8e2>
 80106ea:	9b08      	ldr	r3, [sp, #32]
 80106ec:	f1c0 001c 	rsb	r0, r0, #28
 80106f0:	4403      	add	r3, r0
 80106f2:	4480      	add	r8, r0
 80106f4:	4406      	add	r6, r0
 80106f6:	9308      	str	r3, [sp, #32]
 80106f8:	f1b8 0f00 	cmp.w	r8, #0
 80106fc:	dd05      	ble.n	801070a <_dtoa_r+0x82a>
 80106fe:	4649      	mov	r1, r9
 8010700:	4642      	mov	r2, r8
 8010702:	4658      	mov	r0, fp
 8010704:	f001 f854 	bl	80117b0 <__lshift>
 8010708:	4681      	mov	r9, r0
 801070a:	9b08      	ldr	r3, [sp, #32]
 801070c:	2b00      	cmp	r3, #0
 801070e:	dd05      	ble.n	801071c <_dtoa_r+0x83c>
 8010710:	4621      	mov	r1, r4
 8010712:	461a      	mov	r2, r3
 8010714:	4658      	mov	r0, fp
 8010716:	f001 f84b 	bl	80117b0 <__lshift>
 801071a:	4604      	mov	r4, r0
 801071c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801071e:	2b00      	cmp	r3, #0
 8010720:	d059      	beq.n	80107d6 <_dtoa_r+0x8f6>
 8010722:	4621      	mov	r1, r4
 8010724:	4648      	mov	r0, r9
 8010726:	f001 f8af 	bl	8011888 <__mcmp>
 801072a:	2800      	cmp	r0, #0
 801072c:	da53      	bge.n	80107d6 <_dtoa_r+0x8f6>
 801072e:	1e7b      	subs	r3, r7, #1
 8010730:	9304      	str	r3, [sp, #16]
 8010732:	4649      	mov	r1, r9
 8010734:	2300      	movs	r3, #0
 8010736:	220a      	movs	r2, #10
 8010738:	4658      	mov	r0, fp
 801073a:	f000 fe43 	bl	80113c4 <__multadd>
 801073e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010740:	4681      	mov	r9, r0
 8010742:	2b00      	cmp	r3, #0
 8010744:	f000 8172 	beq.w	8010a2c <_dtoa_r+0xb4c>
 8010748:	2300      	movs	r3, #0
 801074a:	4629      	mov	r1, r5
 801074c:	220a      	movs	r2, #10
 801074e:	4658      	mov	r0, fp
 8010750:	f000 fe38 	bl	80113c4 <__multadd>
 8010754:	9b00      	ldr	r3, [sp, #0]
 8010756:	2b00      	cmp	r3, #0
 8010758:	4605      	mov	r5, r0
 801075a:	dc67      	bgt.n	801082c <_dtoa_r+0x94c>
 801075c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801075e:	2b02      	cmp	r3, #2
 8010760:	dc41      	bgt.n	80107e6 <_dtoa_r+0x906>
 8010762:	e063      	b.n	801082c <_dtoa_r+0x94c>
 8010764:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010766:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801076a:	e746      	b.n	80105fa <_dtoa_r+0x71a>
 801076c:	9b07      	ldr	r3, [sp, #28]
 801076e:	1e5c      	subs	r4, r3, #1
 8010770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010772:	42a3      	cmp	r3, r4
 8010774:	bfbf      	itttt	lt
 8010776:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010778:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801077a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801077c:	1ae3      	sublt	r3, r4, r3
 801077e:	bfb4      	ite	lt
 8010780:	18d2      	addlt	r2, r2, r3
 8010782:	1b1c      	subge	r4, r3, r4
 8010784:	9b07      	ldr	r3, [sp, #28]
 8010786:	bfbc      	itt	lt
 8010788:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801078a:	2400      	movlt	r4, #0
 801078c:	2b00      	cmp	r3, #0
 801078e:	bfb5      	itete	lt
 8010790:	eba8 0603 	sublt.w	r6, r8, r3
 8010794:	9b07      	ldrge	r3, [sp, #28]
 8010796:	2300      	movlt	r3, #0
 8010798:	4646      	movge	r6, r8
 801079a:	e730      	b.n	80105fe <_dtoa_r+0x71e>
 801079c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801079e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80107a0:	4646      	mov	r6, r8
 80107a2:	e735      	b.n	8010610 <_dtoa_r+0x730>
 80107a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80107a6:	e75c      	b.n	8010662 <_dtoa_r+0x782>
 80107a8:	2300      	movs	r3, #0
 80107aa:	e788      	b.n	80106be <_dtoa_r+0x7de>
 80107ac:	3fe00000 	.word	0x3fe00000
 80107b0:	40240000 	.word	0x40240000
 80107b4:	40140000 	.word	0x40140000
 80107b8:	9b02      	ldr	r3, [sp, #8]
 80107ba:	e780      	b.n	80106be <_dtoa_r+0x7de>
 80107bc:	2300      	movs	r3, #0
 80107be:	930a      	str	r3, [sp, #40]	@ 0x28
 80107c0:	e782      	b.n	80106c8 <_dtoa_r+0x7e8>
 80107c2:	d099      	beq.n	80106f8 <_dtoa_r+0x818>
 80107c4:	9a08      	ldr	r2, [sp, #32]
 80107c6:	331c      	adds	r3, #28
 80107c8:	441a      	add	r2, r3
 80107ca:	4498      	add	r8, r3
 80107cc:	441e      	add	r6, r3
 80107ce:	9208      	str	r2, [sp, #32]
 80107d0:	e792      	b.n	80106f8 <_dtoa_r+0x818>
 80107d2:	4603      	mov	r3, r0
 80107d4:	e7f6      	b.n	80107c4 <_dtoa_r+0x8e4>
 80107d6:	9b07      	ldr	r3, [sp, #28]
 80107d8:	9704      	str	r7, [sp, #16]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	dc20      	bgt.n	8010820 <_dtoa_r+0x940>
 80107de:	9300      	str	r3, [sp, #0]
 80107e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107e2:	2b02      	cmp	r3, #2
 80107e4:	dd1e      	ble.n	8010824 <_dtoa_r+0x944>
 80107e6:	9b00      	ldr	r3, [sp, #0]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	f47f aec0 	bne.w	801056e <_dtoa_r+0x68e>
 80107ee:	4621      	mov	r1, r4
 80107f0:	2205      	movs	r2, #5
 80107f2:	4658      	mov	r0, fp
 80107f4:	f000 fde6 	bl	80113c4 <__multadd>
 80107f8:	4601      	mov	r1, r0
 80107fa:	4604      	mov	r4, r0
 80107fc:	4648      	mov	r0, r9
 80107fe:	f001 f843 	bl	8011888 <__mcmp>
 8010802:	2800      	cmp	r0, #0
 8010804:	f77f aeb3 	ble.w	801056e <_dtoa_r+0x68e>
 8010808:	4656      	mov	r6, sl
 801080a:	2331      	movs	r3, #49	@ 0x31
 801080c:	f806 3b01 	strb.w	r3, [r6], #1
 8010810:	9b04      	ldr	r3, [sp, #16]
 8010812:	3301      	adds	r3, #1
 8010814:	9304      	str	r3, [sp, #16]
 8010816:	e6ae      	b.n	8010576 <_dtoa_r+0x696>
 8010818:	9c07      	ldr	r4, [sp, #28]
 801081a:	9704      	str	r7, [sp, #16]
 801081c:	4625      	mov	r5, r4
 801081e:	e7f3      	b.n	8010808 <_dtoa_r+0x928>
 8010820:	9b07      	ldr	r3, [sp, #28]
 8010822:	9300      	str	r3, [sp, #0]
 8010824:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010826:	2b00      	cmp	r3, #0
 8010828:	f000 8104 	beq.w	8010a34 <_dtoa_r+0xb54>
 801082c:	2e00      	cmp	r6, #0
 801082e:	dd05      	ble.n	801083c <_dtoa_r+0x95c>
 8010830:	4629      	mov	r1, r5
 8010832:	4632      	mov	r2, r6
 8010834:	4658      	mov	r0, fp
 8010836:	f000 ffbb 	bl	80117b0 <__lshift>
 801083a:	4605      	mov	r5, r0
 801083c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801083e:	2b00      	cmp	r3, #0
 8010840:	d05a      	beq.n	80108f8 <_dtoa_r+0xa18>
 8010842:	6869      	ldr	r1, [r5, #4]
 8010844:	4658      	mov	r0, fp
 8010846:	f000 fd5b 	bl	8011300 <_Balloc>
 801084a:	4606      	mov	r6, r0
 801084c:	b928      	cbnz	r0, 801085a <_dtoa_r+0x97a>
 801084e:	4b84      	ldr	r3, [pc, #528]	@ (8010a60 <_dtoa_r+0xb80>)
 8010850:	4602      	mov	r2, r0
 8010852:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010856:	f7ff bb5a 	b.w	800ff0e <_dtoa_r+0x2e>
 801085a:	692a      	ldr	r2, [r5, #16]
 801085c:	3202      	adds	r2, #2
 801085e:	0092      	lsls	r2, r2, #2
 8010860:	f105 010c 	add.w	r1, r5, #12
 8010864:	300c      	adds	r0, #12
 8010866:	f7ff fa94 	bl	800fd92 <memcpy>
 801086a:	2201      	movs	r2, #1
 801086c:	4631      	mov	r1, r6
 801086e:	4658      	mov	r0, fp
 8010870:	f000 ff9e 	bl	80117b0 <__lshift>
 8010874:	f10a 0301 	add.w	r3, sl, #1
 8010878:	9307      	str	r3, [sp, #28]
 801087a:	9b00      	ldr	r3, [sp, #0]
 801087c:	4453      	add	r3, sl
 801087e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010880:	9b02      	ldr	r3, [sp, #8]
 8010882:	f003 0301 	and.w	r3, r3, #1
 8010886:	462f      	mov	r7, r5
 8010888:	930a      	str	r3, [sp, #40]	@ 0x28
 801088a:	4605      	mov	r5, r0
 801088c:	9b07      	ldr	r3, [sp, #28]
 801088e:	4621      	mov	r1, r4
 8010890:	3b01      	subs	r3, #1
 8010892:	4648      	mov	r0, r9
 8010894:	9300      	str	r3, [sp, #0]
 8010896:	f7ff fa99 	bl	800fdcc <quorem>
 801089a:	4639      	mov	r1, r7
 801089c:	9002      	str	r0, [sp, #8]
 801089e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80108a2:	4648      	mov	r0, r9
 80108a4:	f000 fff0 	bl	8011888 <__mcmp>
 80108a8:	462a      	mov	r2, r5
 80108aa:	9008      	str	r0, [sp, #32]
 80108ac:	4621      	mov	r1, r4
 80108ae:	4658      	mov	r0, fp
 80108b0:	f001 f806 	bl	80118c0 <__mdiff>
 80108b4:	68c2      	ldr	r2, [r0, #12]
 80108b6:	4606      	mov	r6, r0
 80108b8:	bb02      	cbnz	r2, 80108fc <_dtoa_r+0xa1c>
 80108ba:	4601      	mov	r1, r0
 80108bc:	4648      	mov	r0, r9
 80108be:	f000 ffe3 	bl	8011888 <__mcmp>
 80108c2:	4602      	mov	r2, r0
 80108c4:	4631      	mov	r1, r6
 80108c6:	4658      	mov	r0, fp
 80108c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80108ca:	f000 fd59 	bl	8011380 <_Bfree>
 80108ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80108d2:	9e07      	ldr	r6, [sp, #28]
 80108d4:	ea43 0102 	orr.w	r1, r3, r2
 80108d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108da:	4319      	orrs	r1, r3
 80108dc:	d110      	bne.n	8010900 <_dtoa_r+0xa20>
 80108de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80108e2:	d029      	beq.n	8010938 <_dtoa_r+0xa58>
 80108e4:	9b08      	ldr	r3, [sp, #32]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	dd02      	ble.n	80108f0 <_dtoa_r+0xa10>
 80108ea:	9b02      	ldr	r3, [sp, #8]
 80108ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80108f0:	9b00      	ldr	r3, [sp, #0]
 80108f2:	f883 8000 	strb.w	r8, [r3]
 80108f6:	e63f      	b.n	8010578 <_dtoa_r+0x698>
 80108f8:	4628      	mov	r0, r5
 80108fa:	e7bb      	b.n	8010874 <_dtoa_r+0x994>
 80108fc:	2201      	movs	r2, #1
 80108fe:	e7e1      	b.n	80108c4 <_dtoa_r+0x9e4>
 8010900:	9b08      	ldr	r3, [sp, #32]
 8010902:	2b00      	cmp	r3, #0
 8010904:	db04      	blt.n	8010910 <_dtoa_r+0xa30>
 8010906:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010908:	430b      	orrs	r3, r1
 801090a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801090c:	430b      	orrs	r3, r1
 801090e:	d120      	bne.n	8010952 <_dtoa_r+0xa72>
 8010910:	2a00      	cmp	r2, #0
 8010912:	dded      	ble.n	80108f0 <_dtoa_r+0xa10>
 8010914:	4649      	mov	r1, r9
 8010916:	2201      	movs	r2, #1
 8010918:	4658      	mov	r0, fp
 801091a:	f000 ff49 	bl	80117b0 <__lshift>
 801091e:	4621      	mov	r1, r4
 8010920:	4681      	mov	r9, r0
 8010922:	f000 ffb1 	bl	8011888 <__mcmp>
 8010926:	2800      	cmp	r0, #0
 8010928:	dc03      	bgt.n	8010932 <_dtoa_r+0xa52>
 801092a:	d1e1      	bne.n	80108f0 <_dtoa_r+0xa10>
 801092c:	f018 0f01 	tst.w	r8, #1
 8010930:	d0de      	beq.n	80108f0 <_dtoa_r+0xa10>
 8010932:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010936:	d1d8      	bne.n	80108ea <_dtoa_r+0xa0a>
 8010938:	9a00      	ldr	r2, [sp, #0]
 801093a:	2339      	movs	r3, #57	@ 0x39
 801093c:	7013      	strb	r3, [r2, #0]
 801093e:	4633      	mov	r3, r6
 8010940:	461e      	mov	r6, r3
 8010942:	3b01      	subs	r3, #1
 8010944:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010948:	2a39      	cmp	r2, #57	@ 0x39
 801094a:	d052      	beq.n	80109f2 <_dtoa_r+0xb12>
 801094c:	3201      	adds	r2, #1
 801094e:	701a      	strb	r2, [r3, #0]
 8010950:	e612      	b.n	8010578 <_dtoa_r+0x698>
 8010952:	2a00      	cmp	r2, #0
 8010954:	dd07      	ble.n	8010966 <_dtoa_r+0xa86>
 8010956:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801095a:	d0ed      	beq.n	8010938 <_dtoa_r+0xa58>
 801095c:	9a00      	ldr	r2, [sp, #0]
 801095e:	f108 0301 	add.w	r3, r8, #1
 8010962:	7013      	strb	r3, [r2, #0]
 8010964:	e608      	b.n	8010578 <_dtoa_r+0x698>
 8010966:	9b07      	ldr	r3, [sp, #28]
 8010968:	9a07      	ldr	r2, [sp, #28]
 801096a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801096e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010970:	4293      	cmp	r3, r2
 8010972:	d028      	beq.n	80109c6 <_dtoa_r+0xae6>
 8010974:	4649      	mov	r1, r9
 8010976:	2300      	movs	r3, #0
 8010978:	220a      	movs	r2, #10
 801097a:	4658      	mov	r0, fp
 801097c:	f000 fd22 	bl	80113c4 <__multadd>
 8010980:	42af      	cmp	r7, r5
 8010982:	4681      	mov	r9, r0
 8010984:	f04f 0300 	mov.w	r3, #0
 8010988:	f04f 020a 	mov.w	r2, #10
 801098c:	4639      	mov	r1, r7
 801098e:	4658      	mov	r0, fp
 8010990:	d107      	bne.n	80109a2 <_dtoa_r+0xac2>
 8010992:	f000 fd17 	bl	80113c4 <__multadd>
 8010996:	4607      	mov	r7, r0
 8010998:	4605      	mov	r5, r0
 801099a:	9b07      	ldr	r3, [sp, #28]
 801099c:	3301      	adds	r3, #1
 801099e:	9307      	str	r3, [sp, #28]
 80109a0:	e774      	b.n	801088c <_dtoa_r+0x9ac>
 80109a2:	f000 fd0f 	bl	80113c4 <__multadd>
 80109a6:	4629      	mov	r1, r5
 80109a8:	4607      	mov	r7, r0
 80109aa:	2300      	movs	r3, #0
 80109ac:	220a      	movs	r2, #10
 80109ae:	4658      	mov	r0, fp
 80109b0:	f000 fd08 	bl	80113c4 <__multadd>
 80109b4:	4605      	mov	r5, r0
 80109b6:	e7f0      	b.n	801099a <_dtoa_r+0xaba>
 80109b8:	9b00      	ldr	r3, [sp, #0]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	bfcc      	ite	gt
 80109be:	461e      	movgt	r6, r3
 80109c0:	2601      	movle	r6, #1
 80109c2:	4456      	add	r6, sl
 80109c4:	2700      	movs	r7, #0
 80109c6:	4649      	mov	r1, r9
 80109c8:	2201      	movs	r2, #1
 80109ca:	4658      	mov	r0, fp
 80109cc:	f000 fef0 	bl	80117b0 <__lshift>
 80109d0:	4621      	mov	r1, r4
 80109d2:	4681      	mov	r9, r0
 80109d4:	f000 ff58 	bl	8011888 <__mcmp>
 80109d8:	2800      	cmp	r0, #0
 80109da:	dcb0      	bgt.n	801093e <_dtoa_r+0xa5e>
 80109dc:	d102      	bne.n	80109e4 <_dtoa_r+0xb04>
 80109de:	f018 0f01 	tst.w	r8, #1
 80109e2:	d1ac      	bne.n	801093e <_dtoa_r+0xa5e>
 80109e4:	4633      	mov	r3, r6
 80109e6:	461e      	mov	r6, r3
 80109e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109ec:	2a30      	cmp	r2, #48	@ 0x30
 80109ee:	d0fa      	beq.n	80109e6 <_dtoa_r+0xb06>
 80109f0:	e5c2      	b.n	8010578 <_dtoa_r+0x698>
 80109f2:	459a      	cmp	sl, r3
 80109f4:	d1a4      	bne.n	8010940 <_dtoa_r+0xa60>
 80109f6:	9b04      	ldr	r3, [sp, #16]
 80109f8:	3301      	adds	r3, #1
 80109fa:	9304      	str	r3, [sp, #16]
 80109fc:	2331      	movs	r3, #49	@ 0x31
 80109fe:	f88a 3000 	strb.w	r3, [sl]
 8010a02:	e5b9      	b.n	8010578 <_dtoa_r+0x698>
 8010a04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010a06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010a64 <_dtoa_r+0xb84>
 8010a0a:	b11b      	cbz	r3, 8010a14 <_dtoa_r+0xb34>
 8010a0c:	f10a 0308 	add.w	r3, sl, #8
 8010a10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010a12:	6013      	str	r3, [r2, #0]
 8010a14:	4650      	mov	r0, sl
 8010a16:	b019      	add	sp, #100	@ 0x64
 8010a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a1e:	2b01      	cmp	r3, #1
 8010a20:	f77f ae37 	ble.w	8010692 <_dtoa_r+0x7b2>
 8010a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a28:	2001      	movs	r0, #1
 8010a2a:	e655      	b.n	80106d8 <_dtoa_r+0x7f8>
 8010a2c:	9b00      	ldr	r3, [sp, #0]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	f77f aed6 	ble.w	80107e0 <_dtoa_r+0x900>
 8010a34:	4656      	mov	r6, sl
 8010a36:	4621      	mov	r1, r4
 8010a38:	4648      	mov	r0, r9
 8010a3a:	f7ff f9c7 	bl	800fdcc <quorem>
 8010a3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010a42:	f806 8b01 	strb.w	r8, [r6], #1
 8010a46:	9b00      	ldr	r3, [sp, #0]
 8010a48:	eba6 020a 	sub.w	r2, r6, sl
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	ddb3      	ble.n	80109b8 <_dtoa_r+0xad8>
 8010a50:	4649      	mov	r1, r9
 8010a52:	2300      	movs	r3, #0
 8010a54:	220a      	movs	r2, #10
 8010a56:	4658      	mov	r0, fp
 8010a58:	f000 fcb4 	bl	80113c4 <__multadd>
 8010a5c:	4681      	mov	r9, r0
 8010a5e:	e7ea      	b.n	8010a36 <_dtoa_r+0xb56>
 8010a60:	08012d05 	.word	0x08012d05
 8010a64:	08012c89 	.word	0x08012c89

08010a68 <_free_r>:
 8010a68:	b538      	push	{r3, r4, r5, lr}
 8010a6a:	4605      	mov	r5, r0
 8010a6c:	2900      	cmp	r1, #0
 8010a6e:	d041      	beq.n	8010af4 <_free_r+0x8c>
 8010a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a74:	1f0c      	subs	r4, r1, #4
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	bfb8      	it	lt
 8010a7a:	18e4      	addlt	r4, r4, r3
 8010a7c:	f000 fc34 	bl	80112e8 <__malloc_lock>
 8010a80:	4a1d      	ldr	r2, [pc, #116]	@ (8010af8 <_free_r+0x90>)
 8010a82:	6813      	ldr	r3, [r2, #0]
 8010a84:	b933      	cbnz	r3, 8010a94 <_free_r+0x2c>
 8010a86:	6063      	str	r3, [r4, #4]
 8010a88:	6014      	str	r4, [r2, #0]
 8010a8a:	4628      	mov	r0, r5
 8010a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a90:	f000 bc30 	b.w	80112f4 <__malloc_unlock>
 8010a94:	42a3      	cmp	r3, r4
 8010a96:	d908      	bls.n	8010aaa <_free_r+0x42>
 8010a98:	6820      	ldr	r0, [r4, #0]
 8010a9a:	1821      	adds	r1, r4, r0
 8010a9c:	428b      	cmp	r3, r1
 8010a9e:	bf01      	itttt	eq
 8010aa0:	6819      	ldreq	r1, [r3, #0]
 8010aa2:	685b      	ldreq	r3, [r3, #4]
 8010aa4:	1809      	addeq	r1, r1, r0
 8010aa6:	6021      	streq	r1, [r4, #0]
 8010aa8:	e7ed      	b.n	8010a86 <_free_r+0x1e>
 8010aaa:	461a      	mov	r2, r3
 8010aac:	685b      	ldr	r3, [r3, #4]
 8010aae:	b10b      	cbz	r3, 8010ab4 <_free_r+0x4c>
 8010ab0:	42a3      	cmp	r3, r4
 8010ab2:	d9fa      	bls.n	8010aaa <_free_r+0x42>
 8010ab4:	6811      	ldr	r1, [r2, #0]
 8010ab6:	1850      	adds	r0, r2, r1
 8010ab8:	42a0      	cmp	r0, r4
 8010aba:	d10b      	bne.n	8010ad4 <_free_r+0x6c>
 8010abc:	6820      	ldr	r0, [r4, #0]
 8010abe:	4401      	add	r1, r0
 8010ac0:	1850      	adds	r0, r2, r1
 8010ac2:	4283      	cmp	r3, r0
 8010ac4:	6011      	str	r1, [r2, #0]
 8010ac6:	d1e0      	bne.n	8010a8a <_free_r+0x22>
 8010ac8:	6818      	ldr	r0, [r3, #0]
 8010aca:	685b      	ldr	r3, [r3, #4]
 8010acc:	6053      	str	r3, [r2, #4]
 8010ace:	4408      	add	r0, r1
 8010ad0:	6010      	str	r0, [r2, #0]
 8010ad2:	e7da      	b.n	8010a8a <_free_r+0x22>
 8010ad4:	d902      	bls.n	8010adc <_free_r+0x74>
 8010ad6:	230c      	movs	r3, #12
 8010ad8:	602b      	str	r3, [r5, #0]
 8010ada:	e7d6      	b.n	8010a8a <_free_r+0x22>
 8010adc:	6820      	ldr	r0, [r4, #0]
 8010ade:	1821      	adds	r1, r4, r0
 8010ae0:	428b      	cmp	r3, r1
 8010ae2:	bf04      	itt	eq
 8010ae4:	6819      	ldreq	r1, [r3, #0]
 8010ae6:	685b      	ldreq	r3, [r3, #4]
 8010ae8:	6063      	str	r3, [r4, #4]
 8010aea:	bf04      	itt	eq
 8010aec:	1809      	addeq	r1, r1, r0
 8010aee:	6021      	streq	r1, [r4, #0]
 8010af0:	6054      	str	r4, [r2, #4]
 8010af2:	e7ca      	b.n	8010a8a <_free_r+0x22>
 8010af4:	bd38      	pop	{r3, r4, r5, pc}
 8010af6:	bf00      	nop
 8010af8:	20000ac4 	.word	0x20000ac4

08010afc <rshift>:
 8010afc:	6903      	ldr	r3, [r0, #16]
 8010afe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010b02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b06:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010b0a:	f100 0414 	add.w	r4, r0, #20
 8010b0e:	dd45      	ble.n	8010b9c <rshift+0xa0>
 8010b10:	f011 011f 	ands.w	r1, r1, #31
 8010b14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010b18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010b1c:	d10c      	bne.n	8010b38 <rshift+0x3c>
 8010b1e:	f100 0710 	add.w	r7, r0, #16
 8010b22:	4629      	mov	r1, r5
 8010b24:	42b1      	cmp	r1, r6
 8010b26:	d334      	bcc.n	8010b92 <rshift+0x96>
 8010b28:	1a9b      	subs	r3, r3, r2
 8010b2a:	009b      	lsls	r3, r3, #2
 8010b2c:	1eea      	subs	r2, r5, #3
 8010b2e:	4296      	cmp	r6, r2
 8010b30:	bf38      	it	cc
 8010b32:	2300      	movcc	r3, #0
 8010b34:	4423      	add	r3, r4
 8010b36:	e015      	b.n	8010b64 <rshift+0x68>
 8010b38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010b3c:	f1c1 0820 	rsb	r8, r1, #32
 8010b40:	40cf      	lsrs	r7, r1
 8010b42:	f105 0e04 	add.w	lr, r5, #4
 8010b46:	46a1      	mov	r9, r4
 8010b48:	4576      	cmp	r6, lr
 8010b4a:	46f4      	mov	ip, lr
 8010b4c:	d815      	bhi.n	8010b7a <rshift+0x7e>
 8010b4e:	1a9a      	subs	r2, r3, r2
 8010b50:	0092      	lsls	r2, r2, #2
 8010b52:	3a04      	subs	r2, #4
 8010b54:	3501      	adds	r5, #1
 8010b56:	42ae      	cmp	r6, r5
 8010b58:	bf38      	it	cc
 8010b5a:	2200      	movcc	r2, #0
 8010b5c:	18a3      	adds	r3, r4, r2
 8010b5e:	50a7      	str	r7, [r4, r2]
 8010b60:	b107      	cbz	r7, 8010b64 <rshift+0x68>
 8010b62:	3304      	adds	r3, #4
 8010b64:	1b1a      	subs	r2, r3, r4
 8010b66:	42a3      	cmp	r3, r4
 8010b68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010b6c:	bf08      	it	eq
 8010b6e:	2300      	moveq	r3, #0
 8010b70:	6102      	str	r2, [r0, #16]
 8010b72:	bf08      	it	eq
 8010b74:	6143      	streq	r3, [r0, #20]
 8010b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b7a:	f8dc c000 	ldr.w	ip, [ip]
 8010b7e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010b82:	ea4c 0707 	orr.w	r7, ip, r7
 8010b86:	f849 7b04 	str.w	r7, [r9], #4
 8010b8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010b8e:	40cf      	lsrs	r7, r1
 8010b90:	e7da      	b.n	8010b48 <rshift+0x4c>
 8010b92:	f851 cb04 	ldr.w	ip, [r1], #4
 8010b96:	f847 cf04 	str.w	ip, [r7, #4]!
 8010b9a:	e7c3      	b.n	8010b24 <rshift+0x28>
 8010b9c:	4623      	mov	r3, r4
 8010b9e:	e7e1      	b.n	8010b64 <rshift+0x68>

08010ba0 <__hexdig_fun>:
 8010ba0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010ba4:	2b09      	cmp	r3, #9
 8010ba6:	d802      	bhi.n	8010bae <__hexdig_fun+0xe>
 8010ba8:	3820      	subs	r0, #32
 8010baa:	b2c0      	uxtb	r0, r0
 8010bac:	4770      	bx	lr
 8010bae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010bb2:	2b05      	cmp	r3, #5
 8010bb4:	d801      	bhi.n	8010bba <__hexdig_fun+0x1a>
 8010bb6:	3847      	subs	r0, #71	@ 0x47
 8010bb8:	e7f7      	b.n	8010baa <__hexdig_fun+0xa>
 8010bba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010bbe:	2b05      	cmp	r3, #5
 8010bc0:	d801      	bhi.n	8010bc6 <__hexdig_fun+0x26>
 8010bc2:	3827      	subs	r0, #39	@ 0x27
 8010bc4:	e7f1      	b.n	8010baa <__hexdig_fun+0xa>
 8010bc6:	2000      	movs	r0, #0
 8010bc8:	4770      	bx	lr
	...

08010bcc <__gethex>:
 8010bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd0:	b085      	sub	sp, #20
 8010bd2:	468a      	mov	sl, r1
 8010bd4:	9302      	str	r3, [sp, #8]
 8010bd6:	680b      	ldr	r3, [r1, #0]
 8010bd8:	9001      	str	r0, [sp, #4]
 8010bda:	4690      	mov	r8, r2
 8010bdc:	1c9c      	adds	r4, r3, #2
 8010bde:	46a1      	mov	r9, r4
 8010be0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010be4:	2830      	cmp	r0, #48	@ 0x30
 8010be6:	d0fa      	beq.n	8010bde <__gethex+0x12>
 8010be8:	eba9 0303 	sub.w	r3, r9, r3
 8010bec:	f1a3 0b02 	sub.w	fp, r3, #2
 8010bf0:	f7ff ffd6 	bl	8010ba0 <__hexdig_fun>
 8010bf4:	4605      	mov	r5, r0
 8010bf6:	2800      	cmp	r0, #0
 8010bf8:	d168      	bne.n	8010ccc <__gethex+0x100>
 8010bfa:	49a0      	ldr	r1, [pc, #640]	@ (8010e7c <__gethex+0x2b0>)
 8010bfc:	2201      	movs	r2, #1
 8010bfe:	4648      	mov	r0, r9
 8010c00:	f7ff f83e 	bl	800fc80 <strncmp>
 8010c04:	4607      	mov	r7, r0
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d167      	bne.n	8010cda <__gethex+0x10e>
 8010c0a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010c0e:	4626      	mov	r6, r4
 8010c10:	f7ff ffc6 	bl	8010ba0 <__hexdig_fun>
 8010c14:	2800      	cmp	r0, #0
 8010c16:	d062      	beq.n	8010cde <__gethex+0x112>
 8010c18:	4623      	mov	r3, r4
 8010c1a:	7818      	ldrb	r0, [r3, #0]
 8010c1c:	2830      	cmp	r0, #48	@ 0x30
 8010c1e:	4699      	mov	r9, r3
 8010c20:	f103 0301 	add.w	r3, r3, #1
 8010c24:	d0f9      	beq.n	8010c1a <__gethex+0x4e>
 8010c26:	f7ff ffbb 	bl	8010ba0 <__hexdig_fun>
 8010c2a:	fab0 f580 	clz	r5, r0
 8010c2e:	096d      	lsrs	r5, r5, #5
 8010c30:	f04f 0b01 	mov.w	fp, #1
 8010c34:	464a      	mov	r2, r9
 8010c36:	4616      	mov	r6, r2
 8010c38:	3201      	adds	r2, #1
 8010c3a:	7830      	ldrb	r0, [r6, #0]
 8010c3c:	f7ff ffb0 	bl	8010ba0 <__hexdig_fun>
 8010c40:	2800      	cmp	r0, #0
 8010c42:	d1f8      	bne.n	8010c36 <__gethex+0x6a>
 8010c44:	498d      	ldr	r1, [pc, #564]	@ (8010e7c <__gethex+0x2b0>)
 8010c46:	2201      	movs	r2, #1
 8010c48:	4630      	mov	r0, r6
 8010c4a:	f7ff f819 	bl	800fc80 <strncmp>
 8010c4e:	2800      	cmp	r0, #0
 8010c50:	d13f      	bne.n	8010cd2 <__gethex+0x106>
 8010c52:	b944      	cbnz	r4, 8010c66 <__gethex+0x9a>
 8010c54:	1c74      	adds	r4, r6, #1
 8010c56:	4622      	mov	r2, r4
 8010c58:	4616      	mov	r6, r2
 8010c5a:	3201      	adds	r2, #1
 8010c5c:	7830      	ldrb	r0, [r6, #0]
 8010c5e:	f7ff ff9f 	bl	8010ba0 <__hexdig_fun>
 8010c62:	2800      	cmp	r0, #0
 8010c64:	d1f8      	bne.n	8010c58 <__gethex+0x8c>
 8010c66:	1ba4      	subs	r4, r4, r6
 8010c68:	00a7      	lsls	r7, r4, #2
 8010c6a:	7833      	ldrb	r3, [r6, #0]
 8010c6c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010c70:	2b50      	cmp	r3, #80	@ 0x50
 8010c72:	d13e      	bne.n	8010cf2 <__gethex+0x126>
 8010c74:	7873      	ldrb	r3, [r6, #1]
 8010c76:	2b2b      	cmp	r3, #43	@ 0x2b
 8010c78:	d033      	beq.n	8010ce2 <__gethex+0x116>
 8010c7a:	2b2d      	cmp	r3, #45	@ 0x2d
 8010c7c:	d034      	beq.n	8010ce8 <__gethex+0x11c>
 8010c7e:	1c71      	adds	r1, r6, #1
 8010c80:	2400      	movs	r4, #0
 8010c82:	7808      	ldrb	r0, [r1, #0]
 8010c84:	f7ff ff8c 	bl	8010ba0 <__hexdig_fun>
 8010c88:	1e43      	subs	r3, r0, #1
 8010c8a:	b2db      	uxtb	r3, r3
 8010c8c:	2b18      	cmp	r3, #24
 8010c8e:	d830      	bhi.n	8010cf2 <__gethex+0x126>
 8010c90:	f1a0 0210 	sub.w	r2, r0, #16
 8010c94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010c98:	f7ff ff82 	bl	8010ba0 <__hexdig_fun>
 8010c9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010ca0:	fa5f fc8c 	uxtb.w	ip, ip
 8010ca4:	f1bc 0f18 	cmp.w	ip, #24
 8010ca8:	f04f 030a 	mov.w	r3, #10
 8010cac:	d91e      	bls.n	8010cec <__gethex+0x120>
 8010cae:	b104      	cbz	r4, 8010cb2 <__gethex+0xe6>
 8010cb0:	4252      	negs	r2, r2
 8010cb2:	4417      	add	r7, r2
 8010cb4:	f8ca 1000 	str.w	r1, [sl]
 8010cb8:	b1ed      	cbz	r5, 8010cf6 <__gethex+0x12a>
 8010cba:	f1bb 0f00 	cmp.w	fp, #0
 8010cbe:	bf0c      	ite	eq
 8010cc0:	2506      	moveq	r5, #6
 8010cc2:	2500      	movne	r5, #0
 8010cc4:	4628      	mov	r0, r5
 8010cc6:	b005      	add	sp, #20
 8010cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ccc:	2500      	movs	r5, #0
 8010cce:	462c      	mov	r4, r5
 8010cd0:	e7b0      	b.n	8010c34 <__gethex+0x68>
 8010cd2:	2c00      	cmp	r4, #0
 8010cd4:	d1c7      	bne.n	8010c66 <__gethex+0x9a>
 8010cd6:	4627      	mov	r7, r4
 8010cd8:	e7c7      	b.n	8010c6a <__gethex+0x9e>
 8010cda:	464e      	mov	r6, r9
 8010cdc:	462f      	mov	r7, r5
 8010cde:	2501      	movs	r5, #1
 8010ce0:	e7c3      	b.n	8010c6a <__gethex+0x9e>
 8010ce2:	2400      	movs	r4, #0
 8010ce4:	1cb1      	adds	r1, r6, #2
 8010ce6:	e7cc      	b.n	8010c82 <__gethex+0xb6>
 8010ce8:	2401      	movs	r4, #1
 8010cea:	e7fb      	b.n	8010ce4 <__gethex+0x118>
 8010cec:	fb03 0002 	mla	r0, r3, r2, r0
 8010cf0:	e7ce      	b.n	8010c90 <__gethex+0xc4>
 8010cf2:	4631      	mov	r1, r6
 8010cf4:	e7de      	b.n	8010cb4 <__gethex+0xe8>
 8010cf6:	eba6 0309 	sub.w	r3, r6, r9
 8010cfa:	3b01      	subs	r3, #1
 8010cfc:	4629      	mov	r1, r5
 8010cfe:	2b07      	cmp	r3, #7
 8010d00:	dc0a      	bgt.n	8010d18 <__gethex+0x14c>
 8010d02:	9801      	ldr	r0, [sp, #4]
 8010d04:	f000 fafc 	bl	8011300 <_Balloc>
 8010d08:	4604      	mov	r4, r0
 8010d0a:	b940      	cbnz	r0, 8010d1e <__gethex+0x152>
 8010d0c:	4b5c      	ldr	r3, [pc, #368]	@ (8010e80 <__gethex+0x2b4>)
 8010d0e:	4602      	mov	r2, r0
 8010d10:	21e4      	movs	r1, #228	@ 0xe4
 8010d12:	485c      	ldr	r0, [pc, #368]	@ (8010e84 <__gethex+0x2b8>)
 8010d14:	f001 fa5c 	bl	80121d0 <__assert_func>
 8010d18:	3101      	adds	r1, #1
 8010d1a:	105b      	asrs	r3, r3, #1
 8010d1c:	e7ef      	b.n	8010cfe <__gethex+0x132>
 8010d1e:	f100 0a14 	add.w	sl, r0, #20
 8010d22:	2300      	movs	r3, #0
 8010d24:	4655      	mov	r5, sl
 8010d26:	469b      	mov	fp, r3
 8010d28:	45b1      	cmp	r9, r6
 8010d2a:	d337      	bcc.n	8010d9c <__gethex+0x1d0>
 8010d2c:	f845 bb04 	str.w	fp, [r5], #4
 8010d30:	eba5 050a 	sub.w	r5, r5, sl
 8010d34:	10ad      	asrs	r5, r5, #2
 8010d36:	6125      	str	r5, [r4, #16]
 8010d38:	4658      	mov	r0, fp
 8010d3a:	f000 fbd3 	bl	80114e4 <__hi0bits>
 8010d3e:	016d      	lsls	r5, r5, #5
 8010d40:	f8d8 6000 	ldr.w	r6, [r8]
 8010d44:	1a2d      	subs	r5, r5, r0
 8010d46:	42b5      	cmp	r5, r6
 8010d48:	dd54      	ble.n	8010df4 <__gethex+0x228>
 8010d4a:	1bad      	subs	r5, r5, r6
 8010d4c:	4629      	mov	r1, r5
 8010d4e:	4620      	mov	r0, r4
 8010d50:	f000 ff67 	bl	8011c22 <__any_on>
 8010d54:	4681      	mov	r9, r0
 8010d56:	b178      	cbz	r0, 8010d78 <__gethex+0x1ac>
 8010d58:	1e6b      	subs	r3, r5, #1
 8010d5a:	1159      	asrs	r1, r3, #5
 8010d5c:	f003 021f 	and.w	r2, r3, #31
 8010d60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010d64:	f04f 0901 	mov.w	r9, #1
 8010d68:	fa09 f202 	lsl.w	r2, r9, r2
 8010d6c:	420a      	tst	r2, r1
 8010d6e:	d003      	beq.n	8010d78 <__gethex+0x1ac>
 8010d70:	454b      	cmp	r3, r9
 8010d72:	dc36      	bgt.n	8010de2 <__gethex+0x216>
 8010d74:	f04f 0902 	mov.w	r9, #2
 8010d78:	4629      	mov	r1, r5
 8010d7a:	4620      	mov	r0, r4
 8010d7c:	f7ff febe 	bl	8010afc <rshift>
 8010d80:	442f      	add	r7, r5
 8010d82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d86:	42bb      	cmp	r3, r7
 8010d88:	da42      	bge.n	8010e10 <__gethex+0x244>
 8010d8a:	9801      	ldr	r0, [sp, #4]
 8010d8c:	4621      	mov	r1, r4
 8010d8e:	f000 faf7 	bl	8011380 <_Bfree>
 8010d92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d94:	2300      	movs	r3, #0
 8010d96:	6013      	str	r3, [r2, #0]
 8010d98:	25a3      	movs	r5, #163	@ 0xa3
 8010d9a:	e793      	b.n	8010cc4 <__gethex+0xf8>
 8010d9c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010da0:	2a2e      	cmp	r2, #46	@ 0x2e
 8010da2:	d012      	beq.n	8010dca <__gethex+0x1fe>
 8010da4:	2b20      	cmp	r3, #32
 8010da6:	d104      	bne.n	8010db2 <__gethex+0x1e6>
 8010da8:	f845 bb04 	str.w	fp, [r5], #4
 8010dac:	f04f 0b00 	mov.w	fp, #0
 8010db0:	465b      	mov	r3, fp
 8010db2:	7830      	ldrb	r0, [r6, #0]
 8010db4:	9303      	str	r3, [sp, #12]
 8010db6:	f7ff fef3 	bl	8010ba0 <__hexdig_fun>
 8010dba:	9b03      	ldr	r3, [sp, #12]
 8010dbc:	f000 000f 	and.w	r0, r0, #15
 8010dc0:	4098      	lsls	r0, r3
 8010dc2:	ea4b 0b00 	orr.w	fp, fp, r0
 8010dc6:	3304      	adds	r3, #4
 8010dc8:	e7ae      	b.n	8010d28 <__gethex+0x15c>
 8010dca:	45b1      	cmp	r9, r6
 8010dcc:	d8ea      	bhi.n	8010da4 <__gethex+0x1d8>
 8010dce:	492b      	ldr	r1, [pc, #172]	@ (8010e7c <__gethex+0x2b0>)
 8010dd0:	9303      	str	r3, [sp, #12]
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	4630      	mov	r0, r6
 8010dd6:	f7fe ff53 	bl	800fc80 <strncmp>
 8010dda:	9b03      	ldr	r3, [sp, #12]
 8010ddc:	2800      	cmp	r0, #0
 8010dde:	d1e1      	bne.n	8010da4 <__gethex+0x1d8>
 8010de0:	e7a2      	b.n	8010d28 <__gethex+0x15c>
 8010de2:	1ea9      	subs	r1, r5, #2
 8010de4:	4620      	mov	r0, r4
 8010de6:	f000 ff1c 	bl	8011c22 <__any_on>
 8010dea:	2800      	cmp	r0, #0
 8010dec:	d0c2      	beq.n	8010d74 <__gethex+0x1a8>
 8010dee:	f04f 0903 	mov.w	r9, #3
 8010df2:	e7c1      	b.n	8010d78 <__gethex+0x1ac>
 8010df4:	da09      	bge.n	8010e0a <__gethex+0x23e>
 8010df6:	1b75      	subs	r5, r6, r5
 8010df8:	4621      	mov	r1, r4
 8010dfa:	9801      	ldr	r0, [sp, #4]
 8010dfc:	462a      	mov	r2, r5
 8010dfe:	f000 fcd7 	bl	80117b0 <__lshift>
 8010e02:	1b7f      	subs	r7, r7, r5
 8010e04:	4604      	mov	r4, r0
 8010e06:	f100 0a14 	add.w	sl, r0, #20
 8010e0a:	f04f 0900 	mov.w	r9, #0
 8010e0e:	e7b8      	b.n	8010d82 <__gethex+0x1b6>
 8010e10:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010e14:	42bd      	cmp	r5, r7
 8010e16:	dd6f      	ble.n	8010ef8 <__gethex+0x32c>
 8010e18:	1bed      	subs	r5, r5, r7
 8010e1a:	42ae      	cmp	r6, r5
 8010e1c:	dc34      	bgt.n	8010e88 <__gethex+0x2bc>
 8010e1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e22:	2b02      	cmp	r3, #2
 8010e24:	d022      	beq.n	8010e6c <__gethex+0x2a0>
 8010e26:	2b03      	cmp	r3, #3
 8010e28:	d024      	beq.n	8010e74 <__gethex+0x2a8>
 8010e2a:	2b01      	cmp	r3, #1
 8010e2c:	d115      	bne.n	8010e5a <__gethex+0x28e>
 8010e2e:	42ae      	cmp	r6, r5
 8010e30:	d113      	bne.n	8010e5a <__gethex+0x28e>
 8010e32:	2e01      	cmp	r6, #1
 8010e34:	d10b      	bne.n	8010e4e <__gethex+0x282>
 8010e36:	9a02      	ldr	r2, [sp, #8]
 8010e38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010e3c:	6013      	str	r3, [r2, #0]
 8010e3e:	2301      	movs	r3, #1
 8010e40:	6123      	str	r3, [r4, #16]
 8010e42:	f8ca 3000 	str.w	r3, [sl]
 8010e46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e48:	2562      	movs	r5, #98	@ 0x62
 8010e4a:	601c      	str	r4, [r3, #0]
 8010e4c:	e73a      	b.n	8010cc4 <__gethex+0xf8>
 8010e4e:	1e71      	subs	r1, r6, #1
 8010e50:	4620      	mov	r0, r4
 8010e52:	f000 fee6 	bl	8011c22 <__any_on>
 8010e56:	2800      	cmp	r0, #0
 8010e58:	d1ed      	bne.n	8010e36 <__gethex+0x26a>
 8010e5a:	9801      	ldr	r0, [sp, #4]
 8010e5c:	4621      	mov	r1, r4
 8010e5e:	f000 fa8f 	bl	8011380 <_Bfree>
 8010e62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e64:	2300      	movs	r3, #0
 8010e66:	6013      	str	r3, [r2, #0]
 8010e68:	2550      	movs	r5, #80	@ 0x50
 8010e6a:	e72b      	b.n	8010cc4 <__gethex+0xf8>
 8010e6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d1f3      	bne.n	8010e5a <__gethex+0x28e>
 8010e72:	e7e0      	b.n	8010e36 <__gethex+0x26a>
 8010e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d1dd      	bne.n	8010e36 <__gethex+0x26a>
 8010e7a:	e7ee      	b.n	8010e5a <__gethex+0x28e>
 8010e7c:	08012bf0 	.word	0x08012bf0
 8010e80:	08012d05 	.word	0x08012d05
 8010e84:	08012d16 	.word	0x08012d16
 8010e88:	1e6f      	subs	r7, r5, #1
 8010e8a:	f1b9 0f00 	cmp.w	r9, #0
 8010e8e:	d130      	bne.n	8010ef2 <__gethex+0x326>
 8010e90:	b127      	cbz	r7, 8010e9c <__gethex+0x2d0>
 8010e92:	4639      	mov	r1, r7
 8010e94:	4620      	mov	r0, r4
 8010e96:	f000 fec4 	bl	8011c22 <__any_on>
 8010e9a:	4681      	mov	r9, r0
 8010e9c:	117a      	asrs	r2, r7, #5
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010ea4:	f007 071f 	and.w	r7, r7, #31
 8010ea8:	40bb      	lsls	r3, r7
 8010eaa:	4213      	tst	r3, r2
 8010eac:	4629      	mov	r1, r5
 8010eae:	4620      	mov	r0, r4
 8010eb0:	bf18      	it	ne
 8010eb2:	f049 0902 	orrne.w	r9, r9, #2
 8010eb6:	f7ff fe21 	bl	8010afc <rshift>
 8010eba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010ebe:	1b76      	subs	r6, r6, r5
 8010ec0:	2502      	movs	r5, #2
 8010ec2:	f1b9 0f00 	cmp.w	r9, #0
 8010ec6:	d047      	beq.n	8010f58 <__gethex+0x38c>
 8010ec8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ecc:	2b02      	cmp	r3, #2
 8010ece:	d015      	beq.n	8010efc <__gethex+0x330>
 8010ed0:	2b03      	cmp	r3, #3
 8010ed2:	d017      	beq.n	8010f04 <__gethex+0x338>
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d109      	bne.n	8010eec <__gethex+0x320>
 8010ed8:	f019 0f02 	tst.w	r9, #2
 8010edc:	d006      	beq.n	8010eec <__gethex+0x320>
 8010ede:	f8da 3000 	ldr.w	r3, [sl]
 8010ee2:	ea49 0903 	orr.w	r9, r9, r3
 8010ee6:	f019 0f01 	tst.w	r9, #1
 8010eea:	d10e      	bne.n	8010f0a <__gethex+0x33e>
 8010eec:	f045 0510 	orr.w	r5, r5, #16
 8010ef0:	e032      	b.n	8010f58 <__gethex+0x38c>
 8010ef2:	f04f 0901 	mov.w	r9, #1
 8010ef6:	e7d1      	b.n	8010e9c <__gethex+0x2d0>
 8010ef8:	2501      	movs	r5, #1
 8010efa:	e7e2      	b.n	8010ec2 <__gethex+0x2f6>
 8010efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010efe:	f1c3 0301 	rsb	r3, r3, #1
 8010f02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d0f0      	beq.n	8010eec <__gethex+0x320>
 8010f0a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010f0e:	f104 0314 	add.w	r3, r4, #20
 8010f12:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010f16:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010f1a:	f04f 0c00 	mov.w	ip, #0
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f24:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010f28:	d01b      	beq.n	8010f62 <__gethex+0x396>
 8010f2a:	3201      	adds	r2, #1
 8010f2c:	6002      	str	r2, [r0, #0]
 8010f2e:	2d02      	cmp	r5, #2
 8010f30:	f104 0314 	add.w	r3, r4, #20
 8010f34:	d13c      	bne.n	8010fb0 <__gethex+0x3e4>
 8010f36:	f8d8 2000 	ldr.w	r2, [r8]
 8010f3a:	3a01      	subs	r2, #1
 8010f3c:	42b2      	cmp	r2, r6
 8010f3e:	d109      	bne.n	8010f54 <__gethex+0x388>
 8010f40:	1171      	asrs	r1, r6, #5
 8010f42:	2201      	movs	r2, #1
 8010f44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f48:	f006 061f 	and.w	r6, r6, #31
 8010f4c:	fa02 f606 	lsl.w	r6, r2, r6
 8010f50:	421e      	tst	r6, r3
 8010f52:	d13a      	bne.n	8010fca <__gethex+0x3fe>
 8010f54:	f045 0520 	orr.w	r5, r5, #32
 8010f58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f5a:	601c      	str	r4, [r3, #0]
 8010f5c:	9b02      	ldr	r3, [sp, #8]
 8010f5e:	601f      	str	r7, [r3, #0]
 8010f60:	e6b0      	b.n	8010cc4 <__gethex+0xf8>
 8010f62:	4299      	cmp	r1, r3
 8010f64:	f843 cc04 	str.w	ip, [r3, #-4]
 8010f68:	d8d9      	bhi.n	8010f1e <__gethex+0x352>
 8010f6a:	68a3      	ldr	r3, [r4, #8]
 8010f6c:	459b      	cmp	fp, r3
 8010f6e:	db17      	blt.n	8010fa0 <__gethex+0x3d4>
 8010f70:	6861      	ldr	r1, [r4, #4]
 8010f72:	9801      	ldr	r0, [sp, #4]
 8010f74:	3101      	adds	r1, #1
 8010f76:	f000 f9c3 	bl	8011300 <_Balloc>
 8010f7a:	4681      	mov	r9, r0
 8010f7c:	b918      	cbnz	r0, 8010f86 <__gethex+0x3ba>
 8010f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8010fe8 <__gethex+0x41c>)
 8010f80:	4602      	mov	r2, r0
 8010f82:	2184      	movs	r1, #132	@ 0x84
 8010f84:	e6c5      	b.n	8010d12 <__gethex+0x146>
 8010f86:	6922      	ldr	r2, [r4, #16]
 8010f88:	3202      	adds	r2, #2
 8010f8a:	f104 010c 	add.w	r1, r4, #12
 8010f8e:	0092      	lsls	r2, r2, #2
 8010f90:	300c      	adds	r0, #12
 8010f92:	f7fe fefe 	bl	800fd92 <memcpy>
 8010f96:	4621      	mov	r1, r4
 8010f98:	9801      	ldr	r0, [sp, #4]
 8010f9a:	f000 f9f1 	bl	8011380 <_Bfree>
 8010f9e:	464c      	mov	r4, r9
 8010fa0:	6923      	ldr	r3, [r4, #16]
 8010fa2:	1c5a      	adds	r2, r3, #1
 8010fa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010fa8:	6122      	str	r2, [r4, #16]
 8010faa:	2201      	movs	r2, #1
 8010fac:	615a      	str	r2, [r3, #20]
 8010fae:	e7be      	b.n	8010f2e <__gethex+0x362>
 8010fb0:	6922      	ldr	r2, [r4, #16]
 8010fb2:	455a      	cmp	r2, fp
 8010fb4:	dd0b      	ble.n	8010fce <__gethex+0x402>
 8010fb6:	2101      	movs	r1, #1
 8010fb8:	4620      	mov	r0, r4
 8010fba:	f7ff fd9f 	bl	8010afc <rshift>
 8010fbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010fc2:	3701      	adds	r7, #1
 8010fc4:	42bb      	cmp	r3, r7
 8010fc6:	f6ff aee0 	blt.w	8010d8a <__gethex+0x1be>
 8010fca:	2501      	movs	r5, #1
 8010fcc:	e7c2      	b.n	8010f54 <__gethex+0x388>
 8010fce:	f016 061f 	ands.w	r6, r6, #31
 8010fd2:	d0fa      	beq.n	8010fca <__gethex+0x3fe>
 8010fd4:	4453      	add	r3, sl
 8010fd6:	f1c6 0620 	rsb	r6, r6, #32
 8010fda:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010fde:	f000 fa81 	bl	80114e4 <__hi0bits>
 8010fe2:	42b0      	cmp	r0, r6
 8010fe4:	dbe7      	blt.n	8010fb6 <__gethex+0x3ea>
 8010fe6:	e7f0      	b.n	8010fca <__gethex+0x3fe>
 8010fe8:	08012d05 	.word	0x08012d05

08010fec <L_shift>:
 8010fec:	f1c2 0208 	rsb	r2, r2, #8
 8010ff0:	0092      	lsls	r2, r2, #2
 8010ff2:	b570      	push	{r4, r5, r6, lr}
 8010ff4:	f1c2 0620 	rsb	r6, r2, #32
 8010ff8:	6843      	ldr	r3, [r0, #4]
 8010ffa:	6804      	ldr	r4, [r0, #0]
 8010ffc:	fa03 f506 	lsl.w	r5, r3, r6
 8011000:	432c      	orrs	r4, r5
 8011002:	40d3      	lsrs	r3, r2
 8011004:	6004      	str	r4, [r0, #0]
 8011006:	f840 3f04 	str.w	r3, [r0, #4]!
 801100a:	4288      	cmp	r0, r1
 801100c:	d3f4      	bcc.n	8010ff8 <L_shift+0xc>
 801100e:	bd70      	pop	{r4, r5, r6, pc}

08011010 <__match>:
 8011010:	b530      	push	{r4, r5, lr}
 8011012:	6803      	ldr	r3, [r0, #0]
 8011014:	3301      	adds	r3, #1
 8011016:	f811 4b01 	ldrb.w	r4, [r1], #1
 801101a:	b914      	cbnz	r4, 8011022 <__match+0x12>
 801101c:	6003      	str	r3, [r0, #0]
 801101e:	2001      	movs	r0, #1
 8011020:	bd30      	pop	{r4, r5, pc}
 8011022:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011026:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801102a:	2d19      	cmp	r5, #25
 801102c:	bf98      	it	ls
 801102e:	3220      	addls	r2, #32
 8011030:	42a2      	cmp	r2, r4
 8011032:	d0f0      	beq.n	8011016 <__match+0x6>
 8011034:	2000      	movs	r0, #0
 8011036:	e7f3      	b.n	8011020 <__match+0x10>

08011038 <__hexnan>:
 8011038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801103c:	680b      	ldr	r3, [r1, #0]
 801103e:	6801      	ldr	r1, [r0, #0]
 8011040:	115e      	asrs	r6, r3, #5
 8011042:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011046:	f013 031f 	ands.w	r3, r3, #31
 801104a:	b087      	sub	sp, #28
 801104c:	bf18      	it	ne
 801104e:	3604      	addne	r6, #4
 8011050:	2500      	movs	r5, #0
 8011052:	1f37      	subs	r7, r6, #4
 8011054:	4682      	mov	sl, r0
 8011056:	4690      	mov	r8, r2
 8011058:	9301      	str	r3, [sp, #4]
 801105a:	f846 5c04 	str.w	r5, [r6, #-4]
 801105e:	46b9      	mov	r9, r7
 8011060:	463c      	mov	r4, r7
 8011062:	9502      	str	r5, [sp, #8]
 8011064:	46ab      	mov	fp, r5
 8011066:	784a      	ldrb	r2, [r1, #1]
 8011068:	1c4b      	adds	r3, r1, #1
 801106a:	9303      	str	r3, [sp, #12]
 801106c:	b342      	cbz	r2, 80110c0 <__hexnan+0x88>
 801106e:	4610      	mov	r0, r2
 8011070:	9105      	str	r1, [sp, #20]
 8011072:	9204      	str	r2, [sp, #16]
 8011074:	f7ff fd94 	bl	8010ba0 <__hexdig_fun>
 8011078:	2800      	cmp	r0, #0
 801107a:	d151      	bne.n	8011120 <__hexnan+0xe8>
 801107c:	9a04      	ldr	r2, [sp, #16]
 801107e:	9905      	ldr	r1, [sp, #20]
 8011080:	2a20      	cmp	r2, #32
 8011082:	d818      	bhi.n	80110b6 <__hexnan+0x7e>
 8011084:	9b02      	ldr	r3, [sp, #8]
 8011086:	459b      	cmp	fp, r3
 8011088:	dd13      	ble.n	80110b2 <__hexnan+0x7a>
 801108a:	454c      	cmp	r4, r9
 801108c:	d206      	bcs.n	801109c <__hexnan+0x64>
 801108e:	2d07      	cmp	r5, #7
 8011090:	dc04      	bgt.n	801109c <__hexnan+0x64>
 8011092:	462a      	mov	r2, r5
 8011094:	4649      	mov	r1, r9
 8011096:	4620      	mov	r0, r4
 8011098:	f7ff ffa8 	bl	8010fec <L_shift>
 801109c:	4544      	cmp	r4, r8
 801109e:	d952      	bls.n	8011146 <__hexnan+0x10e>
 80110a0:	2300      	movs	r3, #0
 80110a2:	f1a4 0904 	sub.w	r9, r4, #4
 80110a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80110aa:	f8cd b008 	str.w	fp, [sp, #8]
 80110ae:	464c      	mov	r4, r9
 80110b0:	461d      	mov	r5, r3
 80110b2:	9903      	ldr	r1, [sp, #12]
 80110b4:	e7d7      	b.n	8011066 <__hexnan+0x2e>
 80110b6:	2a29      	cmp	r2, #41	@ 0x29
 80110b8:	d157      	bne.n	801116a <__hexnan+0x132>
 80110ba:	3102      	adds	r1, #2
 80110bc:	f8ca 1000 	str.w	r1, [sl]
 80110c0:	f1bb 0f00 	cmp.w	fp, #0
 80110c4:	d051      	beq.n	801116a <__hexnan+0x132>
 80110c6:	454c      	cmp	r4, r9
 80110c8:	d206      	bcs.n	80110d8 <__hexnan+0xa0>
 80110ca:	2d07      	cmp	r5, #7
 80110cc:	dc04      	bgt.n	80110d8 <__hexnan+0xa0>
 80110ce:	462a      	mov	r2, r5
 80110d0:	4649      	mov	r1, r9
 80110d2:	4620      	mov	r0, r4
 80110d4:	f7ff ff8a 	bl	8010fec <L_shift>
 80110d8:	4544      	cmp	r4, r8
 80110da:	d936      	bls.n	801114a <__hexnan+0x112>
 80110dc:	f1a8 0204 	sub.w	r2, r8, #4
 80110e0:	4623      	mov	r3, r4
 80110e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80110e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80110ea:	429f      	cmp	r7, r3
 80110ec:	d2f9      	bcs.n	80110e2 <__hexnan+0xaa>
 80110ee:	1b3b      	subs	r3, r7, r4
 80110f0:	f023 0303 	bic.w	r3, r3, #3
 80110f4:	3304      	adds	r3, #4
 80110f6:	3401      	adds	r4, #1
 80110f8:	3e03      	subs	r6, #3
 80110fa:	42b4      	cmp	r4, r6
 80110fc:	bf88      	it	hi
 80110fe:	2304      	movhi	r3, #4
 8011100:	4443      	add	r3, r8
 8011102:	2200      	movs	r2, #0
 8011104:	f843 2b04 	str.w	r2, [r3], #4
 8011108:	429f      	cmp	r7, r3
 801110a:	d2fb      	bcs.n	8011104 <__hexnan+0xcc>
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	b91b      	cbnz	r3, 8011118 <__hexnan+0xe0>
 8011110:	4547      	cmp	r7, r8
 8011112:	d128      	bne.n	8011166 <__hexnan+0x12e>
 8011114:	2301      	movs	r3, #1
 8011116:	603b      	str	r3, [r7, #0]
 8011118:	2005      	movs	r0, #5
 801111a:	b007      	add	sp, #28
 801111c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011120:	3501      	adds	r5, #1
 8011122:	2d08      	cmp	r5, #8
 8011124:	f10b 0b01 	add.w	fp, fp, #1
 8011128:	dd06      	ble.n	8011138 <__hexnan+0x100>
 801112a:	4544      	cmp	r4, r8
 801112c:	d9c1      	bls.n	80110b2 <__hexnan+0x7a>
 801112e:	2300      	movs	r3, #0
 8011130:	f844 3c04 	str.w	r3, [r4, #-4]
 8011134:	2501      	movs	r5, #1
 8011136:	3c04      	subs	r4, #4
 8011138:	6822      	ldr	r2, [r4, #0]
 801113a:	f000 000f 	and.w	r0, r0, #15
 801113e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011142:	6020      	str	r0, [r4, #0]
 8011144:	e7b5      	b.n	80110b2 <__hexnan+0x7a>
 8011146:	2508      	movs	r5, #8
 8011148:	e7b3      	b.n	80110b2 <__hexnan+0x7a>
 801114a:	9b01      	ldr	r3, [sp, #4]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d0dd      	beq.n	801110c <__hexnan+0xd4>
 8011150:	f1c3 0320 	rsb	r3, r3, #32
 8011154:	f04f 32ff 	mov.w	r2, #4294967295
 8011158:	40da      	lsrs	r2, r3
 801115a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801115e:	4013      	ands	r3, r2
 8011160:	f846 3c04 	str.w	r3, [r6, #-4]
 8011164:	e7d2      	b.n	801110c <__hexnan+0xd4>
 8011166:	3f04      	subs	r7, #4
 8011168:	e7d0      	b.n	801110c <__hexnan+0xd4>
 801116a:	2004      	movs	r0, #4
 801116c:	e7d5      	b.n	801111a <__hexnan+0xe2>
	...

08011170 <malloc>:
 8011170:	4b02      	ldr	r3, [pc, #8]	@ (801117c <malloc+0xc>)
 8011172:	4601      	mov	r1, r0
 8011174:	6818      	ldr	r0, [r3, #0]
 8011176:	f000 b825 	b.w	80111c4 <_malloc_r>
 801117a:	bf00      	nop
 801117c:	20000208 	.word	0x20000208

08011180 <sbrk_aligned>:
 8011180:	b570      	push	{r4, r5, r6, lr}
 8011182:	4e0f      	ldr	r6, [pc, #60]	@ (80111c0 <sbrk_aligned+0x40>)
 8011184:	460c      	mov	r4, r1
 8011186:	6831      	ldr	r1, [r6, #0]
 8011188:	4605      	mov	r5, r0
 801118a:	b911      	cbnz	r1, 8011192 <sbrk_aligned+0x12>
 801118c:	f001 f810 	bl	80121b0 <_sbrk_r>
 8011190:	6030      	str	r0, [r6, #0]
 8011192:	4621      	mov	r1, r4
 8011194:	4628      	mov	r0, r5
 8011196:	f001 f80b 	bl	80121b0 <_sbrk_r>
 801119a:	1c43      	adds	r3, r0, #1
 801119c:	d103      	bne.n	80111a6 <sbrk_aligned+0x26>
 801119e:	f04f 34ff 	mov.w	r4, #4294967295
 80111a2:	4620      	mov	r0, r4
 80111a4:	bd70      	pop	{r4, r5, r6, pc}
 80111a6:	1cc4      	adds	r4, r0, #3
 80111a8:	f024 0403 	bic.w	r4, r4, #3
 80111ac:	42a0      	cmp	r0, r4
 80111ae:	d0f8      	beq.n	80111a2 <sbrk_aligned+0x22>
 80111b0:	1a21      	subs	r1, r4, r0
 80111b2:	4628      	mov	r0, r5
 80111b4:	f000 fffc 	bl	80121b0 <_sbrk_r>
 80111b8:	3001      	adds	r0, #1
 80111ba:	d1f2      	bne.n	80111a2 <sbrk_aligned+0x22>
 80111bc:	e7ef      	b.n	801119e <sbrk_aligned+0x1e>
 80111be:	bf00      	nop
 80111c0:	20000ac0 	.word	0x20000ac0

080111c4 <_malloc_r>:
 80111c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111c8:	1ccd      	adds	r5, r1, #3
 80111ca:	f025 0503 	bic.w	r5, r5, #3
 80111ce:	3508      	adds	r5, #8
 80111d0:	2d0c      	cmp	r5, #12
 80111d2:	bf38      	it	cc
 80111d4:	250c      	movcc	r5, #12
 80111d6:	2d00      	cmp	r5, #0
 80111d8:	4606      	mov	r6, r0
 80111da:	db01      	blt.n	80111e0 <_malloc_r+0x1c>
 80111dc:	42a9      	cmp	r1, r5
 80111de:	d904      	bls.n	80111ea <_malloc_r+0x26>
 80111e0:	230c      	movs	r3, #12
 80111e2:	6033      	str	r3, [r6, #0]
 80111e4:	2000      	movs	r0, #0
 80111e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80112c0 <_malloc_r+0xfc>
 80111ee:	f000 f87b 	bl	80112e8 <__malloc_lock>
 80111f2:	f8d8 3000 	ldr.w	r3, [r8]
 80111f6:	461c      	mov	r4, r3
 80111f8:	bb44      	cbnz	r4, 801124c <_malloc_r+0x88>
 80111fa:	4629      	mov	r1, r5
 80111fc:	4630      	mov	r0, r6
 80111fe:	f7ff ffbf 	bl	8011180 <sbrk_aligned>
 8011202:	1c43      	adds	r3, r0, #1
 8011204:	4604      	mov	r4, r0
 8011206:	d158      	bne.n	80112ba <_malloc_r+0xf6>
 8011208:	f8d8 4000 	ldr.w	r4, [r8]
 801120c:	4627      	mov	r7, r4
 801120e:	2f00      	cmp	r7, #0
 8011210:	d143      	bne.n	801129a <_malloc_r+0xd6>
 8011212:	2c00      	cmp	r4, #0
 8011214:	d04b      	beq.n	80112ae <_malloc_r+0xea>
 8011216:	6823      	ldr	r3, [r4, #0]
 8011218:	4639      	mov	r1, r7
 801121a:	4630      	mov	r0, r6
 801121c:	eb04 0903 	add.w	r9, r4, r3
 8011220:	f000 ffc6 	bl	80121b0 <_sbrk_r>
 8011224:	4581      	cmp	r9, r0
 8011226:	d142      	bne.n	80112ae <_malloc_r+0xea>
 8011228:	6821      	ldr	r1, [r4, #0]
 801122a:	1a6d      	subs	r5, r5, r1
 801122c:	4629      	mov	r1, r5
 801122e:	4630      	mov	r0, r6
 8011230:	f7ff ffa6 	bl	8011180 <sbrk_aligned>
 8011234:	3001      	adds	r0, #1
 8011236:	d03a      	beq.n	80112ae <_malloc_r+0xea>
 8011238:	6823      	ldr	r3, [r4, #0]
 801123a:	442b      	add	r3, r5
 801123c:	6023      	str	r3, [r4, #0]
 801123e:	f8d8 3000 	ldr.w	r3, [r8]
 8011242:	685a      	ldr	r2, [r3, #4]
 8011244:	bb62      	cbnz	r2, 80112a0 <_malloc_r+0xdc>
 8011246:	f8c8 7000 	str.w	r7, [r8]
 801124a:	e00f      	b.n	801126c <_malloc_r+0xa8>
 801124c:	6822      	ldr	r2, [r4, #0]
 801124e:	1b52      	subs	r2, r2, r5
 8011250:	d420      	bmi.n	8011294 <_malloc_r+0xd0>
 8011252:	2a0b      	cmp	r2, #11
 8011254:	d917      	bls.n	8011286 <_malloc_r+0xc2>
 8011256:	1961      	adds	r1, r4, r5
 8011258:	42a3      	cmp	r3, r4
 801125a:	6025      	str	r5, [r4, #0]
 801125c:	bf18      	it	ne
 801125e:	6059      	strne	r1, [r3, #4]
 8011260:	6863      	ldr	r3, [r4, #4]
 8011262:	bf08      	it	eq
 8011264:	f8c8 1000 	streq.w	r1, [r8]
 8011268:	5162      	str	r2, [r4, r5]
 801126a:	604b      	str	r3, [r1, #4]
 801126c:	4630      	mov	r0, r6
 801126e:	f000 f841 	bl	80112f4 <__malloc_unlock>
 8011272:	f104 000b 	add.w	r0, r4, #11
 8011276:	1d23      	adds	r3, r4, #4
 8011278:	f020 0007 	bic.w	r0, r0, #7
 801127c:	1ac2      	subs	r2, r0, r3
 801127e:	bf1c      	itt	ne
 8011280:	1a1b      	subne	r3, r3, r0
 8011282:	50a3      	strne	r3, [r4, r2]
 8011284:	e7af      	b.n	80111e6 <_malloc_r+0x22>
 8011286:	6862      	ldr	r2, [r4, #4]
 8011288:	42a3      	cmp	r3, r4
 801128a:	bf0c      	ite	eq
 801128c:	f8c8 2000 	streq.w	r2, [r8]
 8011290:	605a      	strne	r2, [r3, #4]
 8011292:	e7eb      	b.n	801126c <_malloc_r+0xa8>
 8011294:	4623      	mov	r3, r4
 8011296:	6864      	ldr	r4, [r4, #4]
 8011298:	e7ae      	b.n	80111f8 <_malloc_r+0x34>
 801129a:	463c      	mov	r4, r7
 801129c:	687f      	ldr	r7, [r7, #4]
 801129e:	e7b6      	b.n	801120e <_malloc_r+0x4a>
 80112a0:	461a      	mov	r2, r3
 80112a2:	685b      	ldr	r3, [r3, #4]
 80112a4:	42a3      	cmp	r3, r4
 80112a6:	d1fb      	bne.n	80112a0 <_malloc_r+0xdc>
 80112a8:	2300      	movs	r3, #0
 80112aa:	6053      	str	r3, [r2, #4]
 80112ac:	e7de      	b.n	801126c <_malloc_r+0xa8>
 80112ae:	230c      	movs	r3, #12
 80112b0:	6033      	str	r3, [r6, #0]
 80112b2:	4630      	mov	r0, r6
 80112b4:	f000 f81e 	bl	80112f4 <__malloc_unlock>
 80112b8:	e794      	b.n	80111e4 <_malloc_r+0x20>
 80112ba:	6005      	str	r5, [r0, #0]
 80112bc:	e7d6      	b.n	801126c <_malloc_r+0xa8>
 80112be:	bf00      	nop
 80112c0:	20000ac4 	.word	0x20000ac4

080112c4 <__ascii_mbtowc>:
 80112c4:	b082      	sub	sp, #8
 80112c6:	b901      	cbnz	r1, 80112ca <__ascii_mbtowc+0x6>
 80112c8:	a901      	add	r1, sp, #4
 80112ca:	b142      	cbz	r2, 80112de <__ascii_mbtowc+0x1a>
 80112cc:	b14b      	cbz	r3, 80112e2 <__ascii_mbtowc+0x1e>
 80112ce:	7813      	ldrb	r3, [r2, #0]
 80112d0:	600b      	str	r3, [r1, #0]
 80112d2:	7812      	ldrb	r2, [r2, #0]
 80112d4:	1e10      	subs	r0, r2, #0
 80112d6:	bf18      	it	ne
 80112d8:	2001      	movne	r0, #1
 80112da:	b002      	add	sp, #8
 80112dc:	4770      	bx	lr
 80112de:	4610      	mov	r0, r2
 80112e0:	e7fb      	b.n	80112da <__ascii_mbtowc+0x16>
 80112e2:	f06f 0001 	mvn.w	r0, #1
 80112e6:	e7f8      	b.n	80112da <__ascii_mbtowc+0x16>

080112e8 <__malloc_lock>:
 80112e8:	4801      	ldr	r0, [pc, #4]	@ (80112f0 <__malloc_lock+0x8>)
 80112ea:	f7fe bd50 	b.w	800fd8e <__retarget_lock_acquire_recursive>
 80112ee:	bf00      	nop
 80112f0:	20000abc 	.word	0x20000abc

080112f4 <__malloc_unlock>:
 80112f4:	4801      	ldr	r0, [pc, #4]	@ (80112fc <__malloc_unlock+0x8>)
 80112f6:	f7fe bd4b 	b.w	800fd90 <__retarget_lock_release_recursive>
 80112fa:	bf00      	nop
 80112fc:	20000abc 	.word	0x20000abc

08011300 <_Balloc>:
 8011300:	b570      	push	{r4, r5, r6, lr}
 8011302:	69c6      	ldr	r6, [r0, #28]
 8011304:	4604      	mov	r4, r0
 8011306:	460d      	mov	r5, r1
 8011308:	b976      	cbnz	r6, 8011328 <_Balloc+0x28>
 801130a:	2010      	movs	r0, #16
 801130c:	f7ff ff30 	bl	8011170 <malloc>
 8011310:	4602      	mov	r2, r0
 8011312:	61e0      	str	r0, [r4, #28]
 8011314:	b920      	cbnz	r0, 8011320 <_Balloc+0x20>
 8011316:	4b18      	ldr	r3, [pc, #96]	@ (8011378 <_Balloc+0x78>)
 8011318:	4818      	ldr	r0, [pc, #96]	@ (801137c <_Balloc+0x7c>)
 801131a:	216b      	movs	r1, #107	@ 0x6b
 801131c:	f000 ff58 	bl	80121d0 <__assert_func>
 8011320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011324:	6006      	str	r6, [r0, #0]
 8011326:	60c6      	str	r6, [r0, #12]
 8011328:	69e6      	ldr	r6, [r4, #28]
 801132a:	68f3      	ldr	r3, [r6, #12]
 801132c:	b183      	cbz	r3, 8011350 <_Balloc+0x50>
 801132e:	69e3      	ldr	r3, [r4, #28]
 8011330:	68db      	ldr	r3, [r3, #12]
 8011332:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011336:	b9b8      	cbnz	r0, 8011368 <_Balloc+0x68>
 8011338:	2101      	movs	r1, #1
 801133a:	fa01 f605 	lsl.w	r6, r1, r5
 801133e:	1d72      	adds	r2, r6, #5
 8011340:	0092      	lsls	r2, r2, #2
 8011342:	4620      	mov	r0, r4
 8011344:	f000 ff62 	bl	801220c <_calloc_r>
 8011348:	b160      	cbz	r0, 8011364 <_Balloc+0x64>
 801134a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801134e:	e00e      	b.n	801136e <_Balloc+0x6e>
 8011350:	2221      	movs	r2, #33	@ 0x21
 8011352:	2104      	movs	r1, #4
 8011354:	4620      	mov	r0, r4
 8011356:	f000 ff59 	bl	801220c <_calloc_r>
 801135a:	69e3      	ldr	r3, [r4, #28]
 801135c:	60f0      	str	r0, [r6, #12]
 801135e:	68db      	ldr	r3, [r3, #12]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d1e4      	bne.n	801132e <_Balloc+0x2e>
 8011364:	2000      	movs	r0, #0
 8011366:	bd70      	pop	{r4, r5, r6, pc}
 8011368:	6802      	ldr	r2, [r0, #0]
 801136a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801136e:	2300      	movs	r3, #0
 8011370:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011374:	e7f7      	b.n	8011366 <_Balloc+0x66>
 8011376:	bf00      	nop
 8011378:	08012c96 	.word	0x08012c96
 801137c:	08012d76 	.word	0x08012d76

08011380 <_Bfree>:
 8011380:	b570      	push	{r4, r5, r6, lr}
 8011382:	69c6      	ldr	r6, [r0, #28]
 8011384:	4605      	mov	r5, r0
 8011386:	460c      	mov	r4, r1
 8011388:	b976      	cbnz	r6, 80113a8 <_Bfree+0x28>
 801138a:	2010      	movs	r0, #16
 801138c:	f7ff fef0 	bl	8011170 <malloc>
 8011390:	4602      	mov	r2, r0
 8011392:	61e8      	str	r0, [r5, #28]
 8011394:	b920      	cbnz	r0, 80113a0 <_Bfree+0x20>
 8011396:	4b09      	ldr	r3, [pc, #36]	@ (80113bc <_Bfree+0x3c>)
 8011398:	4809      	ldr	r0, [pc, #36]	@ (80113c0 <_Bfree+0x40>)
 801139a:	218f      	movs	r1, #143	@ 0x8f
 801139c:	f000 ff18 	bl	80121d0 <__assert_func>
 80113a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80113a4:	6006      	str	r6, [r0, #0]
 80113a6:	60c6      	str	r6, [r0, #12]
 80113a8:	b13c      	cbz	r4, 80113ba <_Bfree+0x3a>
 80113aa:	69eb      	ldr	r3, [r5, #28]
 80113ac:	6862      	ldr	r2, [r4, #4]
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80113b4:	6021      	str	r1, [r4, #0]
 80113b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80113ba:	bd70      	pop	{r4, r5, r6, pc}
 80113bc:	08012c96 	.word	0x08012c96
 80113c0:	08012d76 	.word	0x08012d76

080113c4 <__multadd>:
 80113c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113c8:	690d      	ldr	r5, [r1, #16]
 80113ca:	4607      	mov	r7, r0
 80113cc:	460c      	mov	r4, r1
 80113ce:	461e      	mov	r6, r3
 80113d0:	f101 0c14 	add.w	ip, r1, #20
 80113d4:	2000      	movs	r0, #0
 80113d6:	f8dc 3000 	ldr.w	r3, [ip]
 80113da:	b299      	uxth	r1, r3
 80113dc:	fb02 6101 	mla	r1, r2, r1, r6
 80113e0:	0c1e      	lsrs	r6, r3, #16
 80113e2:	0c0b      	lsrs	r3, r1, #16
 80113e4:	fb02 3306 	mla	r3, r2, r6, r3
 80113e8:	b289      	uxth	r1, r1
 80113ea:	3001      	adds	r0, #1
 80113ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80113f0:	4285      	cmp	r5, r0
 80113f2:	f84c 1b04 	str.w	r1, [ip], #4
 80113f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80113fa:	dcec      	bgt.n	80113d6 <__multadd+0x12>
 80113fc:	b30e      	cbz	r6, 8011442 <__multadd+0x7e>
 80113fe:	68a3      	ldr	r3, [r4, #8]
 8011400:	42ab      	cmp	r3, r5
 8011402:	dc19      	bgt.n	8011438 <__multadd+0x74>
 8011404:	6861      	ldr	r1, [r4, #4]
 8011406:	4638      	mov	r0, r7
 8011408:	3101      	adds	r1, #1
 801140a:	f7ff ff79 	bl	8011300 <_Balloc>
 801140e:	4680      	mov	r8, r0
 8011410:	b928      	cbnz	r0, 801141e <__multadd+0x5a>
 8011412:	4602      	mov	r2, r0
 8011414:	4b0c      	ldr	r3, [pc, #48]	@ (8011448 <__multadd+0x84>)
 8011416:	480d      	ldr	r0, [pc, #52]	@ (801144c <__multadd+0x88>)
 8011418:	21ba      	movs	r1, #186	@ 0xba
 801141a:	f000 fed9 	bl	80121d0 <__assert_func>
 801141e:	6922      	ldr	r2, [r4, #16]
 8011420:	3202      	adds	r2, #2
 8011422:	f104 010c 	add.w	r1, r4, #12
 8011426:	0092      	lsls	r2, r2, #2
 8011428:	300c      	adds	r0, #12
 801142a:	f7fe fcb2 	bl	800fd92 <memcpy>
 801142e:	4621      	mov	r1, r4
 8011430:	4638      	mov	r0, r7
 8011432:	f7ff ffa5 	bl	8011380 <_Bfree>
 8011436:	4644      	mov	r4, r8
 8011438:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801143c:	3501      	adds	r5, #1
 801143e:	615e      	str	r6, [r3, #20]
 8011440:	6125      	str	r5, [r4, #16]
 8011442:	4620      	mov	r0, r4
 8011444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011448:	08012d05 	.word	0x08012d05
 801144c:	08012d76 	.word	0x08012d76

08011450 <__s2b>:
 8011450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011454:	460c      	mov	r4, r1
 8011456:	4615      	mov	r5, r2
 8011458:	461f      	mov	r7, r3
 801145a:	2209      	movs	r2, #9
 801145c:	3308      	adds	r3, #8
 801145e:	4606      	mov	r6, r0
 8011460:	fb93 f3f2 	sdiv	r3, r3, r2
 8011464:	2100      	movs	r1, #0
 8011466:	2201      	movs	r2, #1
 8011468:	429a      	cmp	r2, r3
 801146a:	db09      	blt.n	8011480 <__s2b+0x30>
 801146c:	4630      	mov	r0, r6
 801146e:	f7ff ff47 	bl	8011300 <_Balloc>
 8011472:	b940      	cbnz	r0, 8011486 <__s2b+0x36>
 8011474:	4602      	mov	r2, r0
 8011476:	4b19      	ldr	r3, [pc, #100]	@ (80114dc <__s2b+0x8c>)
 8011478:	4819      	ldr	r0, [pc, #100]	@ (80114e0 <__s2b+0x90>)
 801147a:	21d3      	movs	r1, #211	@ 0xd3
 801147c:	f000 fea8 	bl	80121d0 <__assert_func>
 8011480:	0052      	lsls	r2, r2, #1
 8011482:	3101      	adds	r1, #1
 8011484:	e7f0      	b.n	8011468 <__s2b+0x18>
 8011486:	9b08      	ldr	r3, [sp, #32]
 8011488:	6143      	str	r3, [r0, #20]
 801148a:	2d09      	cmp	r5, #9
 801148c:	f04f 0301 	mov.w	r3, #1
 8011490:	6103      	str	r3, [r0, #16]
 8011492:	dd16      	ble.n	80114c2 <__s2b+0x72>
 8011494:	f104 0909 	add.w	r9, r4, #9
 8011498:	46c8      	mov	r8, r9
 801149a:	442c      	add	r4, r5
 801149c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80114a0:	4601      	mov	r1, r0
 80114a2:	3b30      	subs	r3, #48	@ 0x30
 80114a4:	220a      	movs	r2, #10
 80114a6:	4630      	mov	r0, r6
 80114a8:	f7ff ff8c 	bl	80113c4 <__multadd>
 80114ac:	45a0      	cmp	r8, r4
 80114ae:	d1f5      	bne.n	801149c <__s2b+0x4c>
 80114b0:	f1a5 0408 	sub.w	r4, r5, #8
 80114b4:	444c      	add	r4, r9
 80114b6:	1b2d      	subs	r5, r5, r4
 80114b8:	1963      	adds	r3, r4, r5
 80114ba:	42bb      	cmp	r3, r7
 80114bc:	db04      	blt.n	80114c8 <__s2b+0x78>
 80114be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114c2:	340a      	adds	r4, #10
 80114c4:	2509      	movs	r5, #9
 80114c6:	e7f6      	b.n	80114b6 <__s2b+0x66>
 80114c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80114cc:	4601      	mov	r1, r0
 80114ce:	3b30      	subs	r3, #48	@ 0x30
 80114d0:	220a      	movs	r2, #10
 80114d2:	4630      	mov	r0, r6
 80114d4:	f7ff ff76 	bl	80113c4 <__multadd>
 80114d8:	e7ee      	b.n	80114b8 <__s2b+0x68>
 80114da:	bf00      	nop
 80114dc:	08012d05 	.word	0x08012d05
 80114e0:	08012d76 	.word	0x08012d76

080114e4 <__hi0bits>:
 80114e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80114e8:	4603      	mov	r3, r0
 80114ea:	bf36      	itet	cc
 80114ec:	0403      	lslcc	r3, r0, #16
 80114ee:	2000      	movcs	r0, #0
 80114f0:	2010      	movcc	r0, #16
 80114f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80114f6:	bf3c      	itt	cc
 80114f8:	021b      	lslcc	r3, r3, #8
 80114fa:	3008      	addcc	r0, #8
 80114fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011500:	bf3c      	itt	cc
 8011502:	011b      	lslcc	r3, r3, #4
 8011504:	3004      	addcc	r0, #4
 8011506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801150a:	bf3c      	itt	cc
 801150c:	009b      	lslcc	r3, r3, #2
 801150e:	3002      	addcc	r0, #2
 8011510:	2b00      	cmp	r3, #0
 8011512:	db05      	blt.n	8011520 <__hi0bits+0x3c>
 8011514:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011518:	f100 0001 	add.w	r0, r0, #1
 801151c:	bf08      	it	eq
 801151e:	2020      	moveq	r0, #32
 8011520:	4770      	bx	lr

08011522 <__lo0bits>:
 8011522:	6803      	ldr	r3, [r0, #0]
 8011524:	4602      	mov	r2, r0
 8011526:	f013 0007 	ands.w	r0, r3, #7
 801152a:	d00b      	beq.n	8011544 <__lo0bits+0x22>
 801152c:	07d9      	lsls	r1, r3, #31
 801152e:	d421      	bmi.n	8011574 <__lo0bits+0x52>
 8011530:	0798      	lsls	r0, r3, #30
 8011532:	bf49      	itett	mi
 8011534:	085b      	lsrmi	r3, r3, #1
 8011536:	089b      	lsrpl	r3, r3, #2
 8011538:	2001      	movmi	r0, #1
 801153a:	6013      	strmi	r3, [r2, #0]
 801153c:	bf5c      	itt	pl
 801153e:	6013      	strpl	r3, [r2, #0]
 8011540:	2002      	movpl	r0, #2
 8011542:	4770      	bx	lr
 8011544:	b299      	uxth	r1, r3
 8011546:	b909      	cbnz	r1, 801154c <__lo0bits+0x2a>
 8011548:	0c1b      	lsrs	r3, r3, #16
 801154a:	2010      	movs	r0, #16
 801154c:	b2d9      	uxtb	r1, r3
 801154e:	b909      	cbnz	r1, 8011554 <__lo0bits+0x32>
 8011550:	3008      	adds	r0, #8
 8011552:	0a1b      	lsrs	r3, r3, #8
 8011554:	0719      	lsls	r1, r3, #28
 8011556:	bf04      	itt	eq
 8011558:	091b      	lsreq	r3, r3, #4
 801155a:	3004      	addeq	r0, #4
 801155c:	0799      	lsls	r1, r3, #30
 801155e:	bf04      	itt	eq
 8011560:	089b      	lsreq	r3, r3, #2
 8011562:	3002      	addeq	r0, #2
 8011564:	07d9      	lsls	r1, r3, #31
 8011566:	d403      	bmi.n	8011570 <__lo0bits+0x4e>
 8011568:	085b      	lsrs	r3, r3, #1
 801156a:	f100 0001 	add.w	r0, r0, #1
 801156e:	d003      	beq.n	8011578 <__lo0bits+0x56>
 8011570:	6013      	str	r3, [r2, #0]
 8011572:	4770      	bx	lr
 8011574:	2000      	movs	r0, #0
 8011576:	4770      	bx	lr
 8011578:	2020      	movs	r0, #32
 801157a:	4770      	bx	lr

0801157c <__i2b>:
 801157c:	b510      	push	{r4, lr}
 801157e:	460c      	mov	r4, r1
 8011580:	2101      	movs	r1, #1
 8011582:	f7ff febd 	bl	8011300 <_Balloc>
 8011586:	4602      	mov	r2, r0
 8011588:	b928      	cbnz	r0, 8011596 <__i2b+0x1a>
 801158a:	4b05      	ldr	r3, [pc, #20]	@ (80115a0 <__i2b+0x24>)
 801158c:	4805      	ldr	r0, [pc, #20]	@ (80115a4 <__i2b+0x28>)
 801158e:	f240 1145 	movw	r1, #325	@ 0x145
 8011592:	f000 fe1d 	bl	80121d0 <__assert_func>
 8011596:	2301      	movs	r3, #1
 8011598:	6144      	str	r4, [r0, #20]
 801159a:	6103      	str	r3, [r0, #16]
 801159c:	bd10      	pop	{r4, pc}
 801159e:	bf00      	nop
 80115a0:	08012d05 	.word	0x08012d05
 80115a4:	08012d76 	.word	0x08012d76

080115a8 <__multiply>:
 80115a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ac:	4614      	mov	r4, r2
 80115ae:	690a      	ldr	r2, [r1, #16]
 80115b0:	6923      	ldr	r3, [r4, #16]
 80115b2:	429a      	cmp	r2, r3
 80115b4:	bfa8      	it	ge
 80115b6:	4623      	movge	r3, r4
 80115b8:	460f      	mov	r7, r1
 80115ba:	bfa4      	itt	ge
 80115bc:	460c      	movge	r4, r1
 80115be:	461f      	movge	r7, r3
 80115c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80115c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80115c8:	68a3      	ldr	r3, [r4, #8]
 80115ca:	6861      	ldr	r1, [r4, #4]
 80115cc:	eb0a 0609 	add.w	r6, sl, r9
 80115d0:	42b3      	cmp	r3, r6
 80115d2:	b085      	sub	sp, #20
 80115d4:	bfb8      	it	lt
 80115d6:	3101      	addlt	r1, #1
 80115d8:	f7ff fe92 	bl	8011300 <_Balloc>
 80115dc:	b930      	cbnz	r0, 80115ec <__multiply+0x44>
 80115de:	4602      	mov	r2, r0
 80115e0:	4b44      	ldr	r3, [pc, #272]	@ (80116f4 <__multiply+0x14c>)
 80115e2:	4845      	ldr	r0, [pc, #276]	@ (80116f8 <__multiply+0x150>)
 80115e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80115e8:	f000 fdf2 	bl	80121d0 <__assert_func>
 80115ec:	f100 0514 	add.w	r5, r0, #20
 80115f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80115f4:	462b      	mov	r3, r5
 80115f6:	2200      	movs	r2, #0
 80115f8:	4543      	cmp	r3, r8
 80115fa:	d321      	bcc.n	8011640 <__multiply+0x98>
 80115fc:	f107 0114 	add.w	r1, r7, #20
 8011600:	f104 0214 	add.w	r2, r4, #20
 8011604:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011608:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801160c:	9302      	str	r3, [sp, #8]
 801160e:	1b13      	subs	r3, r2, r4
 8011610:	3b15      	subs	r3, #21
 8011612:	f023 0303 	bic.w	r3, r3, #3
 8011616:	3304      	adds	r3, #4
 8011618:	f104 0715 	add.w	r7, r4, #21
 801161c:	42ba      	cmp	r2, r7
 801161e:	bf38      	it	cc
 8011620:	2304      	movcc	r3, #4
 8011622:	9301      	str	r3, [sp, #4]
 8011624:	9b02      	ldr	r3, [sp, #8]
 8011626:	9103      	str	r1, [sp, #12]
 8011628:	428b      	cmp	r3, r1
 801162a:	d80c      	bhi.n	8011646 <__multiply+0x9e>
 801162c:	2e00      	cmp	r6, #0
 801162e:	dd03      	ble.n	8011638 <__multiply+0x90>
 8011630:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011634:	2b00      	cmp	r3, #0
 8011636:	d05b      	beq.n	80116f0 <__multiply+0x148>
 8011638:	6106      	str	r6, [r0, #16]
 801163a:	b005      	add	sp, #20
 801163c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011640:	f843 2b04 	str.w	r2, [r3], #4
 8011644:	e7d8      	b.n	80115f8 <__multiply+0x50>
 8011646:	f8b1 a000 	ldrh.w	sl, [r1]
 801164a:	f1ba 0f00 	cmp.w	sl, #0
 801164e:	d024      	beq.n	801169a <__multiply+0xf2>
 8011650:	f104 0e14 	add.w	lr, r4, #20
 8011654:	46a9      	mov	r9, r5
 8011656:	f04f 0c00 	mov.w	ip, #0
 801165a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801165e:	f8d9 3000 	ldr.w	r3, [r9]
 8011662:	fa1f fb87 	uxth.w	fp, r7
 8011666:	b29b      	uxth	r3, r3
 8011668:	fb0a 330b 	mla	r3, sl, fp, r3
 801166c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011670:	f8d9 7000 	ldr.w	r7, [r9]
 8011674:	4463      	add	r3, ip
 8011676:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801167a:	fb0a c70b 	mla	r7, sl, fp, ip
 801167e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011682:	b29b      	uxth	r3, r3
 8011684:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011688:	4572      	cmp	r2, lr
 801168a:	f849 3b04 	str.w	r3, [r9], #4
 801168e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011692:	d8e2      	bhi.n	801165a <__multiply+0xb2>
 8011694:	9b01      	ldr	r3, [sp, #4]
 8011696:	f845 c003 	str.w	ip, [r5, r3]
 801169a:	9b03      	ldr	r3, [sp, #12]
 801169c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80116a0:	3104      	adds	r1, #4
 80116a2:	f1b9 0f00 	cmp.w	r9, #0
 80116a6:	d021      	beq.n	80116ec <__multiply+0x144>
 80116a8:	682b      	ldr	r3, [r5, #0]
 80116aa:	f104 0c14 	add.w	ip, r4, #20
 80116ae:	46ae      	mov	lr, r5
 80116b0:	f04f 0a00 	mov.w	sl, #0
 80116b4:	f8bc b000 	ldrh.w	fp, [ip]
 80116b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80116bc:	fb09 770b 	mla	r7, r9, fp, r7
 80116c0:	4457      	add	r7, sl
 80116c2:	b29b      	uxth	r3, r3
 80116c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80116c8:	f84e 3b04 	str.w	r3, [lr], #4
 80116cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80116d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80116d4:	f8be 3000 	ldrh.w	r3, [lr]
 80116d8:	fb09 330a 	mla	r3, r9, sl, r3
 80116dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80116e0:	4562      	cmp	r2, ip
 80116e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80116e6:	d8e5      	bhi.n	80116b4 <__multiply+0x10c>
 80116e8:	9f01      	ldr	r7, [sp, #4]
 80116ea:	51eb      	str	r3, [r5, r7]
 80116ec:	3504      	adds	r5, #4
 80116ee:	e799      	b.n	8011624 <__multiply+0x7c>
 80116f0:	3e01      	subs	r6, #1
 80116f2:	e79b      	b.n	801162c <__multiply+0x84>
 80116f4:	08012d05 	.word	0x08012d05
 80116f8:	08012d76 	.word	0x08012d76

080116fc <__pow5mult>:
 80116fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011700:	4615      	mov	r5, r2
 8011702:	f012 0203 	ands.w	r2, r2, #3
 8011706:	4607      	mov	r7, r0
 8011708:	460e      	mov	r6, r1
 801170a:	d007      	beq.n	801171c <__pow5mult+0x20>
 801170c:	4c25      	ldr	r4, [pc, #148]	@ (80117a4 <__pow5mult+0xa8>)
 801170e:	3a01      	subs	r2, #1
 8011710:	2300      	movs	r3, #0
 8011712:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011716:	f7ff fe55 	bl	80113c4 <__multadd>
 801171a:	4606      	mov	r6, r0
 801171c:	10ad      	asrs	r5, r5, #2
 801171e:	d03d      	beq.n	801179c <__pow5mult+0xa0>
 8011720:	69fc      	ldr	r4, [r7, #28]
 8011722:	b97c      	cbnz	r4, 8011744 <__pow5mult+0x48>
 8011724:	2010      	movs	r0, #16
 8011726:	f7ff fd23 	bl	8011170 <malloc>
 801172a:	4602      	mov	r2, r0
 801172c:	61f8      	str	r0, [r7, #28]
 801172e:	b928      	cbnz	r0, 801173c <__pow5mult+0x40>
 8011730:	4b1d      	ldr	r3, [pc, #116]	@ (80117a8 <__pow5mult+0xac>)
 8011732:	481e      	ldr	r0, [pc, #120]	@ (80117ac <__pow5mult+0xb0>)
 8011734:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011738:	f000 fd4a 	bl	80121d0 <__assert_func>
 801173c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011740:	6004      	str	r4, [r0, #0]
 8011742:	60c4      	str	r4, [r0, #12]
 8011744:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801174c:	b94c      	cbnz	r4, 8011762 <__pow5mult+0x66>
 801174e:	f240 2171 	movw	r1, #625	@ 0x271
 8011752:	4638      	mov	r0, r7
 8011754:	f7ff ff12 	bl	801157c <__i2b>
 8011758:	2300      	movs	r3, #0
 801175a:	f8c8 0008 	str.w	r0, [r8, #8]
 801175e:	4604      	mov	r4, r0
 8011760:	6003      	str	r3, [r0, #0]
 8011762:	f04f 0900 	mov.w	r9, #0
 8011766:	07eb      	lsls	r3, r5, #31
 8011768:	d50a      	bpl.n	8011780 <__pow5mult+0x84>
 801176a:	4631      	mov	r1, r6
 801176c:	4622      	mov	r2, r4
 801176e:	4638      	mov	r0, r7
 8011770:	f7ff ff1a 	bl	80115a8 <__multiply>
 8011774:	4631      	mov	r1, r6
 8011776:	4680      	mov	r8, r0
 8011778:	4638      	mov	r0, r7
 801177a:	f7ff fe01 	bl	8011380 <_Bfree>
 801177e:	4646      	mov	r6, r8
 8011780:	106d      	asrs	r5, r5, #1
 8011782:	d00b      	beq.n	801179c <__pow5mult+0xa0>
 8011784:	6820      	ldr	r0, [r4, #0]
 8011786:	b938      	cbnz	r0, 8011798 <__pow5mult+0x9c>
 8011788:	4622      	mov	r2, r4
 801178a:	4621      	mov	r1, r4
 801178c:	4638      	mov	r0, r7
 801178e:	f7ff ff0b 	bl	80115a8 <__multiply>
 8011792:	6020      	str	r0, [r4, #0]
 8011794:	f8c0 9000 	str.w	r9, [r0]
 8011798:	4604      	mov	r4, r0
 801179a:	e7e4      	b.n	8011766 <__pow5mult+0x6a>
 801179c:	4630      	mov	r0, r6
 801179e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117a2:	bf00      	nop
 80117a4:	08012dd0 	.word	0x08012dd0
 80117a8:	08012c96 	.word	0x08012c96
 80117ac:	08012d76 	.word	0x08012d76

080117b0 <__lshift>:
 80117b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117b4:	460c      	mov	r4, r1
 80117b6:	6849      	ldr	r1, [r1, #4]
 80117b8:	6923      	ldr	r3, [r4, #16]
 80117ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80117be:	68a3      	ldr	r3, [r4, #8]
 80117c0:	4607      	mov	r7, r0
 80117c2:	4691      	mov	r9, r2
 80117c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80117c8:	f108 0601 	add.w	r6, r8, #1
 80117cc:	42b3      	cmp	r3, r6
 80117ce:	db0b      	blt.n	80117e8 <__lshift+0x38>
 80117d0:	4638      	mov	r0, r7
 80117d2:	f7ff fd95 	bl	8011300 <_Balloc>
 80117d6:	4605      	mov	r5, r0
 80117d8:	b948      	cbnz	r0, 80117ee <__lshift+0x3e>
 80117da:	4602      	mov	r2, r0
 80117dc:	4b28      	ldr	r3, [pc, #160]	@ (8011880 <__lshift+0xd0>)
 80117de:	4829      	ldr	r0, [pc, #164]	@ (8011884 <__lshift+0xd4>)
 80117e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80117e4:	f000 fcf4 	bl	80121d0 <__assert_func>
 80117e8:	3101      	adds	r1, #1
 80117ea:	005b      	lsls	r3, r3, #1
 80117ec:	e7ee      	b.n	80117cc <__lshift+0x1c>
 80117ee:	2300      	movs	r3, #0
 80117f0:	f100 0114 	add.w	r1, r0, #20
 80117f4:	f100 0210 	add.w	r2, r0, #16
 80117f8:	4618      	mov	r0, r3
 80117fa:	4553      	cmp	r3, sl
 80117fc:	db33      	blt.n	8011866 <__lshift+0xb6>
 80117fe:	6920      	ldr	r0, [r4, #16]
 8011800:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011804:	f104 0314 	add.w	r3, r4, #20
 8011808:	f019 091f 	ands.w	r9, r9, #31
 801180c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011810:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011814:	d02b      	beq.n	801186e <__lshift+0xbe>
 8011816:	f1c9 0e20 	rsb	lr, r9, #32
 801181a:	468a      	mov	sl, r1
 801181c:	2200      	movs	r2, #0
 801181e:	6818      	ldr	r0, [r3, #0]
 8011820:	fa00 f009 	lsl.w	r0, r0, r9
 8011824:	4310      	orrs	r0, r2
 8011826:	f84a 0b04 	str.w	r0, [sl], #4
 801182a:	f853 2b04 	ldr.w	r2, [r3], #4
 801182e:	459c      	cmp	ip, r3
 8011830:	fa22 f20e 	lsr.w	r2, r2, lr
 8011834:	d8f3      	bhi.n	801181e <__lshift+0x6e>
 8011836:	ebac 0304 	sub.w	r3, ip, r4
 801183a:	3b15      	subs	r3, #21
 801183c:	f023 0303 	bic.w	r3, r3, #3
 8011840:	3304      	adds	r3, #4
 8011842:	f104 0015 	add.w	r0, r4, #21
 8011846:	4584      	cmp	ip, r0
 8011848:	bf38      	it	cc
 801184a:	2304      	movcc	r3, #4
 801184c:	50ca      	str	r2, [r1, r3]
 801184e:	b10a      	cbz	r2, 8011854 <__lshift+0xa4>
 8011850:	f108 0602 	add.w	r6, r8, #2
 8011854:	3e01      	subs	r6, #1
 8011856:	4638      	mov	r0, r7
 8011858:	612e      	str	r6, [r5, #16]
 801185a:	4621      	mov	r1, r4
 801185c:	f7ff fd90 	bl	8011380 <_Bfree>
 8011860:	4628      	mov	r0, r5
 8011862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011866:	f842 0f04 	str.w	r0, [r2, #4]!
 801186a:	3301      	adds	r3, #1
 801186c:	e7c5      	b.n	80117fa <__lshift+0x4a>
 801186e:	3904      	subs	r1, #4
 8011870:	f853 2b04 	ldr.w	r2, [r3], #4
 8011874:	f841 2f04 	str.w	r2, [r1, #4]!
 8011878:	459c      	cmp	ip, r3
 801187a:	d8f9      	bhi.n	8011870 <__lshift+0xc0>
 801187c:	e7ea      	b.n	8011854 <__lshift+0xa4>
 801187e:	bf00      	nop
 8011880:	08012d05 	.word	0x08012d05
 8011884:	08012d76 	.word	0x08012d76

08011888 <__mcmp>:
 8011888:	690a      	ldr	r2, [r1, #16]
 801188a:	4603      	mov	r3, r0
 801188c:	6900      	ldr	r0, [r0, #16]
 801188e:	1a80      	subs	r0, r0, r2
 8011890:	b530      	push	{r4, r5, lr}
 8011892:	d10e      	bne.n	80118b2 <__mcmp+0x2a>
 8011894:	3314      	adds	r3, #20
 8011896:	3114      	adds	r1, #20
 8011898:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801189c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80118a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80118a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80118a8:	4295      	cmp	r5, r2
 80118aa:	d003      	beq.n	80118b4 <__mcmp+0x2c>
 80118ac:	d205      	bcs.n	80118ba <__mcmp+0x32>
 80118ae:	f04f 30ff 	mov.w	r0, #4294967295
 80118b2:	bd30      	pop	{r4, r5, pc}
 80118b4:	42a3      	cmp	r3, r4
 80118b6:	d3f3      	bcc.n	80118a0 <__mcmp+0x18>
 80118b8:	e7fb      	b.n	80118b2 <__mcmp+0x2a>
 80118ba:	2001      	movs	r0, #1
 80118bc:	e7f9      	b.n	80118b2 <__mcmp+0x2a>
	...

080118c0 <__mdiff>:
 80118c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c4:	4689      	mov	r9, r1
 80118c6:	4606      	mov	r6, r0
 80118c8:	4611      	mov	r1, r2
 80118ca:	4648      	mov	r0, r9
 80118cc:	4614      	mov	r4, r2
 80118ce:	f7ff ffdb 	bl	8011888 <__mcmp>
 80118d2:	1e05      	subs	r5, r0, #0
 80118d4:	d112      	bne.n	80118fc <__mdiff+0x3c>
 80118d6:	4629      	mov	r1, r5
 80118d8:	4630      	mov	r0, r6
 80118da:	f7ff fd11 	bl	8011300 <_Balloc>
 80118de:	4602      	mov	r2, r0
 80118e0:	b928      	cbnz	r0, 80118ee <__mdiff+0x2e>
 80118e2:	4b3f      	ldr	r3, [pc, #252]	@ (80119e0 <__mdiff+0x120>)
 80118e4:	f240 2137 	movw	r1, #567	@ 0x237
 80118e8:	483e      	ldr	r0, [pc, #248]	@ (80119e4 <__mdiff+0x124>)
 80118ea:	f000 fc71 	bl	80121d0 <__assert_func>
 80118ee:	2301      	movs	r3, #1
 80118f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80118f4:	4610      	mov	r0, r2
 80118f6:	b003      	add	sp, #12
 80118f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118fc:	bfbc      	itt	lt
 80118fe:	464b      	movlt	r3, r9
 8011900:	46a1      	movlt	r9, r4
 8011902:	4630      	mov	r0, r6
 8011904:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011908:	bfba      	itte	lt
 801190a:	461c      	movlt	r4, r3
 801190c:	2501      	movlt	r5, #1
 801190e:	2500      	movge	r5, #0
 8011910:	f7ff fcf6 	bl	8011300 <_Balloc>
 8011914:	4602      	mov	r2, r0
 8011916:	b918      	cbnz	r0, 8011920 <__mdiff+0x60>
 8011918:	4b31      	ldr	r3, [pc, #196]	@ (80119e0 <__mdiff+0x120>)
 801191a:	f240 2145 	movw	r1, #581	@ 0x245
 801191e:	e7e3      	b.n	80118e8 <__mdiff+0x28>
 8011920:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011924:	6926      	ldr	r6, [r4, #16]
 8011926:	60c5      	str	r5, [r0, #12]
 8011928:	f109 0310 	add.w	r3, r9, #16
 801192c:	f109 0514 	add.w	r5, r9, #20
 8011930:	f104 0e14 	add.w	lr, r4, #20
 8011934:	f100 0b14 	add.w	fp, r0, #20
 8011938:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801193c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011940:	9301      	str	r3, [sp, #4]
 8011942:	46d9      	mov	r9, fp
 8011944:	f04f 0c00 	mov.w	ip, #0
 8011948:	9b01      	ldr	r3, [sp, #4]
 801194a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801194e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011952:	9301      	str	r3, [sp, #4]
 8011954:	fa1f f38a 	uxth.w	r3, sl
 8011958:	4619      	mov	r1, r3
 801195a:	b283      	uxth	r3, r0
 801195c:	1acb      	subs	r3, r1, r3
 801195e:	0c00      	lsrs	r0, r0, #16
 8011960:	4463      	add	r3, ip
 8011962:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011966:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801196a:	b29b      	uxth	r3, r3
 801196c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011970:	4576      	cmp	r6, lr
 8011972:	f849 3b04 	str.w	r3, [r9], #4
 8011976:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801197a:	d8e5      	bhi.n	8011948 <__mdiff+0x88>
 801197c:	1b33      	subs	r3, r6, r4
 801197e:	3b15      	subs	r3, #21
 8011980:	f023 0303 	bic.w	r3, r3, #3
 8011984:	3415      	adds	r4, #21
 8011986:	3304      	adds	r3, #4
 8011988:	42a6      	cmp	r6, r4
 801198a:	bf38      	it	cc
 801198c:	2304      	movcc	r3, #4
 801198e:	441d      	add	r5, r3
 8011990:	445b      	add	r3, fp
 8011992:	461e      	mov	r6, r3
 8011994:	462c      	mov	r4, r5
 8011996:	4544      	cmp	r4, r8
 8011998:	d30e      	bcc.n	80119b8 <__mdiff+0xf8>
 801199a:	f108 0103 	add.w	r1, r8, #3
 801199e:	1b49      	subs	r1, r1, r5
 80119a0:	f021 0103 	bic.w	r1, r1, #3
 80119a4:	3d03      	subs	r5, #3
 80119a6:	45a8      	cmp	r8, r5
 80119a8:	bf38      	it	cc
 80119aa:	2100      	movcc	r1, #0
 80119ac:	440b      	add	r3, r1
 80119ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80119b2:	b191      	cbz	r1, 80119da <__mdiff+0x11a>
 80119b4:	6117      	str	r7, [r2, #16]
 80119b6:	e79d      	b.n	80118f4 <__mdiff+0x34>
 80119b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80119bc:	46e6      	mov	lr, ip
 80119be:	0c08      	lsrs	r0, r1, #16
 80119c0:	fa1c fc81 	uxtah	ip, ip, r1
 80119c4:	4471      	add	r1, lr
 80119c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80119ca:	b289      	uxth	r1, r1
 80119cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80119d0:	f846 1b04 	str.w	r1, [r6], #4
 80119d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80119d8:	e7dd      	b.n	8011996 <__mdiff+0xd6>
 80119da:	3f01      	subs	r7, #1
 80119dc:	e7e7      	b.n	80119ae <__mdiff+0xee>
 80119de:	bf00      	nop
 80119e0:	08012d05 	.word	0x08012d05
 80119e4:	08012d76 	.word	0x08012d76

080119e8 <__ulp>:
 80119e8:	b082      	sub	sp, #8
 80119ea:	ed8d 0b00 	vstr	d0, [sp]
 80119ee:	9a01      	ldr	r2, [sp, #4]
 80119f0:	4b0f      	ldr	r3, [pc, #60]	@ (8011a30 <__ulp+0x48>)
 80119f2:	4013      	ands	r3, r2
 80119f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	dc08      	bgt.n	8011a0e <__ulp+0x26>
 80119fc:	425b      	negs	r3, r3
 80119fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011a02:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011a06:	da04      	bge.n	8011a12 <__ulp+0x2a>
 8011a08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011a0c:	4113      	asrs	r3, r2
 8011a0e:	2200      	movs	r2, #0
 8011a10:	e008      	b.n	8011a24 <__ulp+0x3c>
 8011a12:	f1a2 0314 	sub.w	r3, r2, #20
 8011a16:	2b1e      	cmp	r3, #30
 8011a18:	bfda      	itte	le
 8011a1a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011a1e:	40da      	lsrle	r2, r3
 8011a20:	2201      	movgt	r2, #1
 8011a22:	2300      	movs	r3, #0
 8011a24:	4619      	mov	r1, r3
 8011a26:	4610      	mov	r0, r2
 8011a28:	ec41 0b10 	vmov	d0, r0, r1
 8011a2c:	b002      	add	sp, #8
 8011a2e:	4770      	bx	lr
 8011a30:	7ff00000 	.word	0x7ff00000

08011a34 <__b2d>:
 8011a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a38:	6906      	ldr	r6, [r0, #16]
 8011a3a:	f100 0814 	add.w	r8, r0, #20
 8011a3e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011a42:	1f37      	subs	r7, r6, #4
 8011a44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011a48:	4610      	mov	r0, r2
 8011a4a:	f7ff fd4b 	bl	80114e4 <__hi0bits>
 8011a4e:	f1c0 0320 	rsb	r3, r0, #32
 8011a52:	280a      	cmp	r0, #10
 8011a54:	600b      	str	r3, [r1, #0]
 8011a56:	491b      	ldr	r1, [pc, #108]	@ (8011ac4 <__b2d+0x90>)
 8011a58:	dc15      	bgt.n	8011a86 <__b2d+0x52>
 8011a5a:	f1c0 0c0b 	rsb	ip, r0, #11
 8011a5e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011a62:	45b8      	cmp	r8, r7
 8011a64:	ea43 0501 	orr.w	r5, r3, r1
 8011a68:	bf34      	ite	cc
 8011a6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011a6e:	2300      	movcs	r3, #0
 8011a70:	3015      	adds	r0, #21
 8011a72:	fa02 f000 	lsl.w	r0, r2, r0
 8011a76:	fa23 f30c 	lsr.w	r3, r3, ip
 8011a7a:	4303      	orrs	r3, r0
 8011a7c:	461c      	mov	r4, r3
 8011a7e:	ec45 4b10 	vmov	d0, r4, r5
 8011a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a86:	45b8      	cmp	r8, r7
 8011a88:	bf3a      	itte	cc
 8011a8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011a8e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011a92:	2300      	movcs	r3, #0
 8011a94:	380b      	subs	r0, #11
 8011a96:	d012      	beq.n	8011abe <__b2d+0x8a>
 8011a98:	f1c0 0120 	rsb	r1, r0, #32
 8011a9c:	fa23 f401 	lsr.w	r4, r3, r1
 8011aa0:	4082      	lsls	r2, r0
 8011aa2:	4322      	orrs	r2, r4
 8011aa4:	4547      	cmp	r7, r8
 8011aa6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011aaa:	bf8c      	ite	hi
 8011aac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011ab0:	2200      	movls	r2, #0
 8011ab2:	4083      	lsls	r3, r0
 8011ab4:	40ca      	lsrs	r2, r1
 8011ab6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011aba:	4313      	orrs	r3, r2
 8011abc:	e7de      	b.n	8011a7c <__b2d+0x48>
 8011abe:	ea42 0501 	orr.w	r5, r2, r1
 8011ac2:	e7db      	b.n	8011a7c <__b2d+0x48>
 8011ac4:	3ff00000 	.word	0x3ff00000

08011ac8 <__d2b>:
 8011ac8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011acc:	460f      	mov	r7, r1
 8011ace:	2101      	movs	r1, #1
 8011ad0:	ec59 8b10 	vmov	r8, r9, d0
 8011ad4:	4616      	mov	r6, r2
 8011ad6:	f7ff fc13 	bl	8011300 <_Balloc>
 8011ada:	4604      	mov	r4, r0
 8011adc:	b930      	cbnz	r0, 8011aec <__d2b+0x24>
 8011ade:	4602      	mov	r2, r0
 8011ae0:	4b23      	ldr	r3, [pc, #140]	@ (8011b70 <__d2b+0xa8>)
 8011ae2:	4824      	ldr	r0, [pc, #144]	@ (8011b74 <__d2b+0xac>)
 8011ae4:	f240 310f 	movw	r1, #783	@ 0x30f
 8011ae8:	f000 fb72 	bl	80121d0 <__assert_func>
 8011aec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011af0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011af4:	b10d      	cbz	r5, 8011afa <__d2b+0x32>
 8011af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011afa:	9301      	str	r3, [sp, #4]
 8011afc:	f1b8 0300 	subs.w	r3, r8, #0
 8011b00:	d023      	beq.n	8011b4a <__d2b+0x82>
 8011b02:	4668      	mov	r0, sp
 8011b04:	9300      	str	r3, [sp, #0]
 8011b06:	f7ff fd0c 	bl	8011522 <__lo0bits>
 8011b0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011b0e:	b1d0      	cbz	r0, 8011b46 <__d2b+0x7e>
 8011b10:	f1c0 0320 	rsb	r3, r0, #32
 8011b14:	fa02 f303 	lsl.w	r3, r2, r3
 8011b18:	430b      	orrs	r3, r1
 8011b1a:	40c2      	lsrs	r2, r0
 8011b1c:	6163      	str	r3, [r4, #20]
 8011b1e:	9201      	str	r2, [sp, #4]
 8011b20:	9b01      	ldr	r3, [sp, #4]
 8011b22:	61a3      	str	r3, [r4, #24]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	bf0c      	ite	eq
 8011b28:	2201      	moveq	r2, #1
 8011b2a:	2202      	movne	r2, #2
 8011b2c:	6122      	str	r2, [r4, #16]
 8011b2e:	b1a5      	cbz	r5, 8011b5a <__d2b+0x92>
 8011b30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011b34:	4405      	add	r5, r0
 8011b36:	603d      	str	r5, [r7, #0]
 8011b38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011b3c:	6030      	str	r0, [r6, #0]
 8011b3e:	4620      	mov	r0, r4
 8011b40:	b003      	add	sp, #12
 8011b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b46:	6161      	str	r1, [r4, #20]
 8011b48:	e7ea      	b.n	8011b20 <__d2b+0x58>
 8011b4a:	a801      	add	r0, sp, #4
 8011b4c:	f7ff fce9 	bl	8011522 <__lo0bits>
 8011b50:	9b01      	ldr	r3, [sp, #4]
 8011b52:	6163      	str	r3, [r4, #20]
 8011b54:	3020      	adds	r0, #32
 8011b56:	2201      	movs	r2, #1
 8011b58:	e7e8      	b.n	8011b2c <__d2b+0x64>
 8011b5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011b5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011b62:	6038      	str	r0, [r7, #0]
 8011b64:	6918      	ldr	r0, [r3, #16]
 8011b66:	f7ff fcbd 	bl	80114e4 <__hi0bits>
 8011b6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011b6e:	e7e5      	b.n	8011b3c <__d2b+0x74>
 8011b70:	08012d05 	.word	0x08012d05
 8011b74:	08012d76 	.word	0x08012d76

08011b78 <__ratio>:
 8011b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b7c:	b085      	sub	sp, #20
 8011b7e:	e9cd 1000 	strd	r1, r0, [sp]
 8011b82:	a902      	add	r1, sp, #8
 8011b84:	f7ff ff56 	bl	8011a34 <__b2d>
 8011b88:	9800      	ldr	r0, [sp, #0]
 8011b8a:	a903      	add	r1, sp, #12
 8011b8c:	ec55 4b10 	vmov	r4, r5, d0
 8011b90:	f7ff ff50 	bl	8011a34 <__b2d>
 8011b94:	9b01      	ldr	r3, [sp, #4]
 8011b96:	6919      	ldr	r1, [r3, #16]
 8011b98:	9b00      	ldr	r3, [sp, #0]
 8011b9a:	691b      	ldr	r3, [r3, #16]
 8011b9c:	1ac9      	subs	r1, r1, r3
 8011b9e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011ba2:	1a9b      	subs	r3, r3, r2
 8011ba4:	ec5b ab10 	vmov	sl, fp, d0
 8011ba8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	bfce      	itee	gt
 8011bb0:	462a      	movgt	r2, r5
 8011bb2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011bb6:	465a      	movle	r2, fp
 8011bb8:	462f      	mov	r7, r5
 8011bba:	46d9      	mov	r9, fp
 8011bbc:	bfcc      	ite	gt
 8011bbe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011bc2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011bc6:	464b      	mov	r3, r9
 8011bc8:	4652      	mov	r2, sl
 8011bca:	4620      	mov	r0, r4
 8011bcc:	4639      	mov	r1, r7
 8011bce:	f7ee fe65 	bl	800089c <__aeabi_ddiv>
 8011bd2:	ec41 0b10 	vmov	d0, r0, r1
 8011bd6:	b005      	add	sp, #20
 8011bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011bdc <__copybits>:
 8011bdc:	3901      	subs	r1, #1
 8011bde:	b570      	push	{r4, r5, r6, lr}
 8011be0:	1149      	asrs	r1, r1, #5
 8011be2:	6914      	ldr	r4, [r2, #16]
 8011be4:	3101      	adds	r1, #1
 8011be6:	f102 0314 	add.w	r3, r2, #20
 8011bea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011bee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011bf2:	1f05      	subs	r5, r0, #4
 8011bf4:	42a3      	cmp	r3, r4
 8011bf6:	d30c      	bcc.n	8011c12 <__copybits+0x36>
 8011bf8:	1aa3      	subs	r3, r4, r2
 8011bfa:	3b11      	subs	r3, #17
 8011bfc:	f023 0303 	bic.w	r3, r3, #3
 8011c00:	3211      	adds	r2, #17
 8011c02:	42a2      	cmp	r2, r4
 8011c04:	bf88      	it	hi
 8011c06:	2300      	movhi	r3, #0
 8011c08:	4418      	add	r0, r3
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	4288      	cmp	r0, r1
 8011c0e:	d305      	bcc.n	8011c1c <__copybits+0x40>
 8011c10:	bd70      	pop	{r4, r5, r6, pc}
 8011c12:	f853 6b04 	ldr.w	r6, [r3], #4
 8011c16:	f845 6f04 	str.w	r6, [r5, #4]!
 8011c1a:	e7eb      	b.n	8011bf4 <__copybits+0x18>
 8011c1c:	f840 3b04 	str.w	r3, [r0], #4
 8011c20:	e7f4      	b.n	8011c0c <__copybits+0x30>

08011c22 <__any_on>:
 8011c22:	f100 0214 	add.w	r2, r0, #20
 8011c26:	6900      	ldr	r0, [r0, #16]
 8011c28:	114b      	asrs	r3, r1, #5
 8011c2a:	4298      	cmp	r0, r3
 8011c2c:	b510      	push	{r4, lr}
 8011c2e:	db11      	blt.n	8011c54 <__any_on+0x32>
 8011c30:	dd0a      	ble.n	8011c48 <__any_on+0x26>
 8011c32:	f011 011f 	ands.w	r1, r1, #31
 8011c36:	d007      	beq.n	8011c48 <__any_on+0x26>
 8011c38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011c3c:	fa24 f001 	lsr.w	r0, r4, r1
 8011c40:	fa00 f101 	lsl.w	r1, r0, r1
 8011c44:	428c      	cmp	r4, r1
 8011c46:	d10b      	bne.n	8011c60 <__any_on+0x3e>
 8011c48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	d803      	bhi.n	8011c58 <__any_on+0x36>
 8011c50:	2000      	movs	r0, #0
 8011c52:	bd10      	pop	{r4, pc}
 8011c54:	4603      	mov	r3, r0
 8011c56:	e7f7      	b.n	8011c48 <__any_on+0x26>
 8011c58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011c5c:	2900      	cmp	r1, #0
 8011c5e:	d0f5      	beq.n	8011c4c <__any_on+0x2a>
 8011c60:	2001      	movs	r0, #1
 8011c62:	e7f6      	b.n	8011c52 <__any_on+0x30>

08011c64 <_strtol_l.constprop.0>:
 8011c64:	2b24      	cmp	r3, #36	@ 0x24
 8011c66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c6a:	4686      	mov	lr, r0
 8011c6c:	4690      	mov	r8, r2
 8011c6e:	d801      	bhi.n	8011c74 <_strtol_l.constprop.0+0x10>
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d106      	bne.n	8011c82 <_strtol_l.constprop.0+0x1e>
 8011c74:	f7fe f860 	bl	800fd38 <__errno>
 8011c78:	2316      	movs	r3, #22
 8011c7a:	6003      	str	r3, [r0, #0]
 8011c7c:	2000      	movs	r0, #0
 8011c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c82:	4834      	ldr	r0, [pc, #208]	@ (8011d54 <_strtol_l.constprop.0+0xf0>)
 8011c84:	460d      	mov	r5, r1
 8011c86:	462a      	mov	r2, r5
 8011c88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011c8c:	5d06      	ldrb	r6, [r0, r4]
 8011c8e:	f016 0608 	ands.w	r6, r6, #8
 8011c92:	d1f8      	bne.n	8011c86 <_strtol_l.constprop.0+0x22>
 8011c94:	2c2d      	cmp	r4, #45	@ 0x2d
 8011c96:	d12d      	bne.n	8011cf4 <_strtol_l.constprop.0+0x90>
 8011c98:	782c      	ldrb	r4, [r5, #0]
 8011c9a:	2601      	movs	r6, #1
 8011c9c:	1c95      	adds	r5, r2, #2
 8011c9e:	f033 0210 	bics.w	r2, r3, #16
 8011ca2:	d109      	bne.n	8011cb8 <_strtol_l.constprop.0+0x54>
 8011ca4:	2c30      	cmp	r4, #48	@ 0x30
 8011ca6:	d12a      	bne.n	8011cfe <_strtol_l.constprop.0+0x9a>
 8011ca8:	782a      	ldrb	r2, [r5, #0]
 8011caa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011cae:	2a58      	cmp	r2, #88	@ 0x58
 8011cb0:	d125      	bne.n	8011cfe <_strtol_l.constprop.0+0x9a>
 8011cb2:	786c      	ldrb	r4, [r5, #1]
 8011cb4:	2310      	movs	r3, #16
 8011cb6:	3502      	adds	r5, #2
 8011cb8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011cbc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	fbbc f9f3 	udiv	r9, ip, r3
 8011cc6:	4610      	mov	r0, r2
 8011cc8:	fb03 ca19 	mls	sl, r3, r9, ip
 8011ccc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011cd0:	2f09      	cmp	r7, #9
 8011cd2:	d81b      	bhi.n	8011d0c <_strtol_l.constprop.0+0xa8>
 8011cd4:	463c      	mov	r4, r7
 8011cd6:	42a3      	cmp	r3, r4
 8011cd8:	dd27      	ble.n	8011d2a <_strtol_l.constprop.0+0xc6>
 8011cda:	1c57      	adds	r7, r2, #1
 8011cdc:	d007      	beq.n	8011cee <_strtol_l.constprop.0+0x8a>
 8011cde:	4581      	cmp	r9, r0
 8011ce0:	d320      	bcc.n	8011d24 <_strtol_l.constprop.0+0xc0>
 8011ce2:	d101      	bne.n	8011ce8 <_strtol_l.constprop.0+0x84>
 8011ce4:	45a2      	cmp	sl, r4
 8011ce6:	db1d      	blt.n	8011d24 <_strtol_l.constprop.0+0xc0>
 8011ce8:	fb00 4003 	mla	r0, r0, r3, r4
 8011cec:	2201      	movs	r2, #1
 8011cee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011cf2:	e7eb      	b.n	8011ccc <_strtol_l.constprop.0+0x68>
 8011cf4:	2c2b      	cmp	r4, #43	@ 0x2b
 8011cf6:	bf04      	itt	eq
 8011cf8:	782c      	ldrbeq	r4, [r5, #0]
 8011cfa:	1c95      	addeq	r5, r2, #2
 8011cfc:	e7cf      	b.n	8011c9e <_strtol_l.constprop.0+0x3a>
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d1da      	bne.n	8011cb8 <_strtol_l.constprop.0+0x54>
 8011d02:	2c30      	cmp	r4, #48	@ 0x30
 8011d04:	bf0c      	ite	eq
 8011d06:	2308      	moveq	r3, #8
 8011d08:	230a      	movne	r3, #10
 8011d0a:	e7d5      	b.n	8011cb8 <_strtol_l.constprop.0+0x54>
 8011d0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011d10:	2f19      	cmp	r7, #25
 8011d12:	d801      	bhi.n	8011d18 <_strtol_l.constprop.0+0xb4>
 8011d14:	3c37      	subs	r4, #55	@ 0x37
 8011d16:	e7de      	b.n	8011cd6 <_strtol_l.constprop.0+0x72>
 8011d18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011d1c:	2f19      	cmp	r7, #25
 8011d1e:	d804      	bhi.n	8011d2a <_strtol_l.constprop.0+0xc6>
 8011d20:	3c57      	subs	r4, #87	@ 0x57
 8011d22:	e7d8      	b.n	8011cd6 <_strtol_l.constprop.0+0x72>
 8011d24:	f04f 32ff 	mov.w	r2, #4294967295
 8011d28:	e7e1      	b.n	8011cee <_strtol_l.constprop.0+0x8a>
 8011d2a:	1c53      	adds	r3, r2, #1
 8011d2c:	d108      	bne.n	8011d40 <_strtol_l.constprop.0+0xdc>
 8011d2e:	2322      	movs	r3, #34	@ 0x22
 8011d30:	f8ce 3000 	str.w	r3, [lr]
 8011d34:	4660      	mov	r0, ip
 8011d36:	f1b8 0f00 	cmp.w	r8, #0
 8011d3a:	d0a0      	beq.n	8011c7e <_strtol_l.constprop.0+0x1a>
 8011d3c:	1e69      	subs	r1, r5, #1
 8011d3e:	e006      	b.n	8011d4e <_strtol_l.constprop.0+0xea>
 8011d40:	b106      	cbz	r6, 8011d44 <_strtol_l.constprop.0+0xe0>
 8011d42:	4240      	negs	r0, r0
 8011d44:	f1b8 0f00 	cmp.w	r8, #0
 8011d48:	d099      	beq.n	8011c7e <_strtol_l.constprop.0+0x1a>
 8011d4a:	2a00      	cmp	r2, #0
 8011d4c:	d1f6      	bne.n	8011d3c <_strtol_l.constprop.0+0xd8>
 8011d4e:	f8c8 1000 	str.w	r1, [r8]
 8011d52:	e794      	b.n	8011c7e <_strtol_l.constprop.0+0x1a>
 8011d54:	08012ed1 	.word	0x08012ed1

08011d58 <_strtol_r>:
 8011d58:	f7ff bf84 	b.w	8011c64 <_strtol_l.constprop.0>

08011d5c <__ascii_wctomb>:
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	4608      	mov	r0, r1
 8011d60:	b141      	cbz	r1, 8011d74 <__ascii_wctomb+0x18>
 8011d62:	2aff      	cmp	r2, #255	@ 0xff
 8011d64:	d904      	bls.n	8011d70 <__ascii_wctomb+0x14>
 8011d66:	228a      	movs	r2, #138	@ 0x8a
 8011d68:	601a      	str	r2, [r3, #0]
 8011d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d6e:	4770      	bx	lr
 8011d70:	700a      	strb	r2, [r1, #0]
 8011d72:	2001      	movs	r0, #1
 8011d74:	4770      	bx	lr

08011d76 <__ssputs_r>:
 8011d76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d7a:	688e      	ldr	r6, [r1, #8]
 8011d7c:	461f      	mov	r7, r3
 8011d7e:	42be      	cmp	r6, r7
 8011d80:	680b      	ldr	r3, [r1, #0]
 8011d82:	4682      	mov	sl, r0
 8011d84:	460c      	mov	r4, r1
 8011d86:	4690      	mov	r8, r2
 8011d88:	d82d      	bhi.n	8011de6 <__ssputs_r+0x70>
 8011d8a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011d8e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011d92:	d026      	beq.n	8011de2 <__ssputs_r+0x6c>
 8011d94:	6965      	ldr	r5, [r4, #20]
 8011d96:	6909      	ldr	r1, [r1, #16]
 8011d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d9c:	eba3 0901 	sub.w	r9, r3, r1
 8011da0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011da4:	1c7b      	adds	r3, r7, #1
 8011da6:	444b      	add	r3, r9
 8011da8:	106d      	asrs	r5, r5, #1
 8011daa:	429d      	cmp	r5, r3
 8011dac:	bf38      	it	cc
 8011dae:	461d      	movcc	r5, r3
 8011db0:	0553      	lsls	r3, r2, #21
 8011db2:	d527      	bpl.n	8011e04 <__ssputs_r+0x8e>
 8011db4:	4629      	mov	r1, r5
 8011db6:	f7ff fa05 	bl	80111c4 <_malloc_r>
 8011dba:	4606      	mov	r6, r0
 8011dbc:	b360      	cbz	r0, 8011e18 <__ssputs_r+0xa2>
 8011dbe:	6921      	ldr	r1, [r4, #16]
 8011dc0:	464a      	mov	r2, r9
 8011dc2:	f7fd ffe6 	bl	800fd92 <memcpy>
 8011dc6:	89a3      	ldrh	r3, [r4, #12]
 8011dc8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011dcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011dd0:	81a3      	strh	r3, [r4, #12]
 8011dd2:	6126      	str	r6, [r4, #16]
 8011dd4:	6165      	str	r5, [r4, #20]
 8011dd6:	444e      	add	r6, r9
 8011dd8:	eba5 0509 	sub.w	r5, r5, r9
 8011ddc:	6026      	str	r6, [r4, #0]
 8011dde:	60a5      	str	r5, [r4, #8]
 8011de0:	463e      	mov	r6, r7
 8011de2:	42be      	cmp	r6, r7
 8011de4:	d900      	bls.n	8011de8 <__ssputs_r+0x72>
 8011de6:	463e      	mov	r6, r7
 8011de8:	6820      	ldr	r0, [r4, #0]
 8011dea:	4632      	mov	r2, r6
 8011dec:	4641      	mov	r1, r8
 8011dee:	f000 f9c5 	bl	801217c <memmove>
 8011df2:	68a3      	ldr	r3, [r4, #8]
 8011df4:	1b9b      	subs	r3, r3, r6
 8011df6:	60a3      	str	r3, [r4, #8]
 8011df8:	6823      	ldr	r3, [r4, #0]
 8011dfa:	4433      	add	r3, r6
 8011dfc:	6023      	str	r3, [r4, #0]
 8011dfe:	2000      	movs	r0, #0
 8011e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e04:	462a      	mov	r2, r5
 8011e06:	f000 fa15 	bl	8012234 <_realloc_r>
 8011e0a:	4606      	mov	r6, r0
 8011e0c:	2800      	cmp	r0, #0
 8011e0e:	d1e0      	bne.n	8011dd2 <__ssputs_r+0x5c>
 8011e10:	6921      	ldr	r1, [r4, #16]
 8011e12:	4650      	mov	r0, sl
 8011e14:	f7fe fe28 	bl	8010a68 <_free_r>
 8011e18:	230c      	movs	r3, #12
 8011e1a:	f8ca 3000 	str.w	r3, [sl]
 8011e1e:	89a3      	ldrh	r3, [r4, #12]
 8011e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e24:	81a3      	strh	r3, [r4, #12]
 8011e26:	f04f 30ff 	mov.w	r0, #4294967295
 8011e2a:	e7e9      	b.n	8011e00 <__ssputs_r+0x8a>

08011e2c <_svfiprintf_r>:
 8011e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e30:	4698      	mov	r8, r3
 8011e32:	898b      	ldrh	r3, [r1, #12]
 8011e34:	061b      	lsls	r3, r3, #24
 8011e36:	b09d      	sub	sp, #116	@ 0x74
 8011e38:	4607      	mov	r7, r0
 8011e3a:	460d      	mov	r5, r1
 8011e3c:	4614      	mov	r4, r2
 8011e3e:	d510      	bpl.n	8011e62 <_svfiprintf_r+0x36>
 8011e40:	690b      	ldr	r3, [r1, #16]
 8011e42:	b973      	cbnz	r3, 8011e62 <_svfiprintf_r+0x36>
 8011e44:	2140      	movs	r1, #64	@ 0x40
 8011e46:	f7ff f9bd 	bl	80111c4 <_malloc_r>
 8011e4a:	6028      	str	r0, [r5, #0]
 8011e4c:	6128      	str	r0, [r5, #16]
 8011e4e:	b930      	cbnz	r0, 8011e5e <_svfiprintf_r+0x32>
 8011e50:	230c      	movs	r3, #12
 8011e52:	603b      	str	r3, [r7, #0]
 8011e54:	f04f 30ff 	mov.w	r0, #4294967295
 8011e58:	b01d      	add	sp, #116	@ 0x74
 8011e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e5e:	2340      	movs	r3, #64	@ 0x40
 8011e60:	616b      	str	r3, [r5, #20]
 8011e62:	2300      	movs	r3, #0
 8011e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e66:	2320      	movs	r3, #32
 8011e68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e70:	2330      	movs	r3, #48	@ 0x30
 8011e72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012010 <_svfiprintf_r+0x1e4>
 8011e76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e7a:	f04f 0901 	mov.w	r9, #1
 8011e7e:	4623      	mov	r3, r4
 8011e80:	469a      	mov	sl, r3
 8011e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e86:	b10a      	cbz	r2, 8011e8c <_svfiprintf_r+0x60>
 8011e88:	2a25      	cmp	r2, #37	@ 0x25
 8011e8a:	d1f9      	bne.n	8011e80 <_svfiprintf_r+0x54>
 8011e8c:	ebba 0b04 	subs.w	fp, sl, r4
 8011e90:	d00b      	beq.n	8011eaa <_svfiprintf_r+0x7e>
 8011e92:	465b      	mov	r3, fp
 8011e94:	4622      	mov	r2, r4
 8011e96:	4629      	mov	r1, r5
 8011e98:	4638      	mov	r0, r7
 8011e9a:	f7ff ff6c 	bl	8011d76 <__ssputs_r>
 8011e9e:	3001      	adds	r0, #1
 8011ea0:	f000 80a7 	beq.w	8011ff2 <_svfiprintf_r+0x1c6>
 8011ea4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ea6:	445a      	add	r2, fp
 8011ea8:	9209      	str	r2, [sp, #36]	@ 0x24
 8011eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	f000 809f 	beq.w	8011ff2 <_svfiprintf_r+0x1c6>
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8011eba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ebe:	f10a 0a01 	add.w	sl, sl, #1
 8011ec2:	9304      	str	r3, [sp, #16]
 8011ec4:	9307      	str	r3, [sp, #28]
 8011ec6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011eca:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ecc:	4654      	mov	r4, sl
 8011ece:	2205      	movs	r2, #5
 8011ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ed4:	484e      	ldr	r0, [pc, #312]	@ (8012010 <_svfiprintf_r+0x1e4>)
 8011ed6:	f7ee f9a3 	bl	8000220 <memchr>
 8011eda:	9a04      	ldr	r2, [sp, #16]
 8011edc:	b9d8      	cbnz	r0, 8011f16 <_svfiprintf_r+0xea>
 8011ede:	06d0      	lsls	r0, r2, #27
 8011ee0:	bf44      	itt	mi
 8011ee2:	2320      	movmi	r3, #32
 8011ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ee8:	0711      	lsls	r1, r2, #28
 8011eea:	bf44      	itt	mi
 8011eec:	232b      	movmi	r3, #43	@ 0x2b
 8011eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8011ef6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ef8:	d015      	beq.n	8011f26 <_svfiprintf_r+0xfa>
 8011efa:	9a07      	ldr	r2, [sp, #28]
 8011efc:	4654      	mov	r4, sl
 8011efe:	2000      	movs	r0, #0
 8011f00:	f04f 0c0a 	mov.w	ip, #10
 8011f04:	4621      	mov	r1, r4
 8011f06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f0a:	3b30      	subs	r3, #48	@ 0x30
 8011f0c:	2b09      	cmp	r3, #9
 8011f0e:	d94b      	bls.n	8011fa8 <_svfiprintf_r+0x17c>
 8011f10:	b1b0      	cbz	r0, 8011f40 <_svfiprintf_r+0x114>
 8011f12:	9207      	str	r2, [sp, #28]
 8011f14:	e014      	b.n	8011f40 <_svfiprintf_r+0x114>
 8011f16:	eba0 0308 	sub.w	r3, r0, r8
 8011f1a:	fa09 f303 	lsl.w	r3, r9, r3
 8011f1e:	4313      	orrs	r3, r2
 8011f20:	9304      	str	r3, [sp, #16]
 8011f22:	46a2      	mov	sl, r4
 8011f24:	e7d2      	b.n	8011ecc <_svfiprintf_r+0xa0>
 8011f26:	9b03      	ldr	r3, [sp, #12]
 8011f28:	1d19      	adds	r1, r3, #4
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	9103      	str	r1, [sp, #12]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	bfbb      	ittet	lt
 8011f32:	425b      	neglt	r3, r3
 8011f34:	f042 0202 	orrlt.w	r2, r2, #2
 8011f38:	9307      	strge	r3, [sp, #28]
 8011f3a:	9307      	strlt	r3, [sp, #28]
 8011f3c:	bfb8      	it	lt
 8011f3e:	9204      	strlt	r2, [sp, #16]
 8011f40:	7823      	ldrb	r3, [r4, #0]
 8011f42:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f44:	d10a      	bne.n	8011f5c <_svfiprintf_r+0x130>
 8011f46:	7863      	ldrb	r3, [r4, #1]
 8011f48:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f4a:	d132      	bne.n	8011fb2 <_svfiprintf_r+0x186>
 8011f4c:	9b03      	ldr	r3, [sp, #12]
 8011f4e:	1d1a      	adds	r2, r3, #4
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	9203      	str	r2, [sp, #12]
 8011f54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f58:	3402      	adds	r4, #2
 8011f5a:	9305      	str	r3, [sp, #20]
 8011f5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012020 <_svfiprintf_r+0x1f4>
 8011f60:	7821      	ldrb	r1, [r4, #0]
 8011f62:	2203      	movs	r2, #3
 8011f64:	4650      	mov	r0, sl
 8011f66:	f7ee f95b 	bl	8000220 <memchr>
 8011f6a:	b138      	cbz	r0, 8011f7c <_svfiprintf_r+0x150>
 8011f6c:	9b04      	ldr	r3, [sp, #16]
 8011f6e:	eba0 000a 	sub.w	r0, r0, sl
 8011f72:	2240      	movs	r2, #64	@ 0x40
 8011f74:	4082      	lsls	r2, r0
 8011f76:	4313      	orrs	r3, r2
 8011f78:	3401      	adds	r4, #1
 8011f7a:	9304      	str	r3, [sp, #16]
 8011f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f80:	4824      	ldr	r0, [pc, #144]	@ (8012014 <_svfiprintf_r+0x1e8>)
 8011f82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f86:	2206      	movs	r2, #6
 8011f88:	f7ee f94a 	bl	8000220 <memchr>
 8011f8c:	2800      	cmp	r0, #0
 8011f8e:	d036      	beq.n	8011ffe <_svfiprintf_r+0x1d2>
 8011f90:	4b21      	ldr	r3, [pc, #132]	@ (8012018 <_svfiprintf_r+0x1ec>)
 8011f92:	bb1b      	cbnz	r3, 8011fdc <_svfiprintf_r+0x1b0>
 8011f94:	9b03      	ldr	r3, [sp, #12]
 8011f96:	3307      	adds	r3, #7
 8011f98:	f023 0307 	bic.w	r3, r3, #7
 8011f9c:	3308      	adds	r3, #8
 8011f9e:	9303      	str	r3, [sp, #12]
 8011fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fa2:	4433      	add	r3, r6
 8011fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fa6:	e76a      	b.n	8011e7e <_svfiprintf_r+0x52>
 8011fa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fac:	460c      	mov	r4, r1
 8011fae:	2001      	movs	r0, #1
 8011fb0:	e7a8      	b.n	8011f04 <_svfiprintf_r+0xd8>
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	3401      	adds	r4, #1
 8011fb6:	9305      	str	r3, [sp, #20]
 8011fb8:	4619      	mov	r1, r3
 8011fba:	f04f 0c0a 	mov.w	ip, #10
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fc4:	3a30      	subs	r2, #48	@ 0x30
 8011fc6:	2a09      	cmp	r2, #9
 8011fc8:	d903      	bls.n	8011fd2 <_svfiprintf_r+0x1a6>
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d0c6      	beq.n	8011f5c <_svfiprintf_r+0x130>
 8011fce:	9105      	str	r1, [sp, #20]
 8011fd0:	e7c4      	b.n	8011f5c <_svfiprintf_r+0x130>
 8011fd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fd6:	4604      	mov	r4, r0
 8011fd8:	2301      	movs	r3, #1
 8011fda:	e7f0      	b.n	8011fbe <_svfiprintf_r+0x192>
 8011fdc:	ab03      	add	r3, sp, #12
 8011fde:	9300      	str	r3, [sp, #0]
 8011fe0:	462a      	mov	r2, r5
 8011fe2:	4b0e      	ldr	r3, [pc, #56]	@ (801201c <_svfiprintf_r+0x1f0>)
 8011fe4:	a904      	add	r1, sp, #16
 8011fe6:	4638      	mov	r0, r7
 8011fe8:	f7fc ff30 	bl	800ee4c <_printf_float>
 8011fec:	1c42      	adds	r2, r0, #1
 8011fee:	4606      	mov	r6, r0
 8011ff0:	d1d6      	bne.n	8011fa0 <_svfiprintf_r+0x174>
 8011ff2:	89ab      	ldrh	r3, [r5, #12]
 8011ff4:	065b      	lsls	r3, r3, #25
 8011ff6:	f53f af2d 	bmi.w	8011e54 <_svfiprintf_r+0x28>
 8011ffa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ffc:	e72c      	b.n	8011e58 <_svfiprintf_r+0x2c>
 8011ffe:	ab03      	add	r3, sp, #12
 8012000:	9300      	str	r3, [sp, #0]
 8012002:	462a      	mov	r2, r5
 8012004:	4b05      	ldr	r3, [pc, #20]	@ (801201c <_svfiprintf_r+0x1f0>)
 8012006:	a904      	add	r1, sp, #16
 8012008:	4638      	mov	r0, r7
 801200a:	f7fd f9b7 	bl	800f37c <_printf_i>
 801200e:	e7ed      	b.n	8011fec <_svfiprintf_r+0x1c0>
 8012010:	08012fd1 	.word	0x08012fd1
 8012014:	08012fdb 	.word	0x08012fdb
 8012018:	0800ee4d 	.word	0x0800ee4d
 801201c:	08011d77 	.word	0x08011d77
 8012020:	08012fd7 	.word	0x08012fd7

08012024 <__sflush_r>:
 8012024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801202c:	0716      	lsls	r6, r2, #28
 801202e:	4605      	mov	r5, r0
 8012030:	460c      	mov	r4, r1
 8012032:	d454      	bmi.n	80120de <__sflush_r+0xba>
 8012034:	684b      	ldr	r3, [r1, #4]
 8012036:	2b00      	cmp	r3, #0
 8012038:	dc02      	bgt.n	8012040 <__sflush_r+0x1c>
 801203a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801203c:	2b00      	cmp	r3, #0
 801203e:	dd48      	ble.n	80120d2 <__sflush_r+0xae>
 8012040:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012042:	2e00      	cmp	r6, #0
 8012044:	d045      	beq.n	80120d2 <__sflush_r+0xae>
 8012046:	2300      	movs	r3, #0
 8012048:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801204c:	682f      	ldr	r7, [r5, #0]
 801204e:	6a21      	ldr	r1, [r4, #32]
 8012050:	602b      	str	r3, [r5, #0]
 8012052:	d030      	beq.n	80120b6 <__sflush_r+0x92>
 8012054:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012056:	89a3      	ldrh	r3, [r4, #12]
 8012058:	0759      	lsls	r1, r3, #29
 801205a:	d505      	bpl.n	8012068 <__sflush_r+0x44>
 801205c:	6863      	ldr	r3, [r4, #4]
 801205e:	1ad2      	subs	r2, r2, r3
 8012060:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012062:	b10b      	cbz	r3, 8012068 <__sflush_r+0x44>
 8012064:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012066:	1ad2      	subs	r2, r2, r3
 8012068:	2300      	movs	r3, #0
 801206a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801206c:	6a21      	ldr	r1, [r4, #32]
 801206e:	4628      	mov	r0, r5
 8012070:	47b0      	blx	r6
 8012072:	1c43      	adds	r3, r0, #1
 8012074:	89a3      	ldrh	r3, [r4, #12]
 8012076:	d106      	bne.n	8012086 <__sflush_r+0x62>
 8012078:	6829      	ldr	r1, [r5, #0]
 801207a:	291d      	cmp	r1, #29
 801207c:	d82b      	bhi.n	80120d6 <__sflush_r+0xb2>
 801207e:	4a2a      	ldr	r2, [pc, #168]	@ (8012128 <__sflush_r+0x104>)
 8012080:	410a      	asrs	r2, r1
 8012082:	07d6      	lsls	r6, r2, #31
 8012084:	d427      	bmi.n	80120d6 <__sflush_r+0xb2>
 8012086:	2200      	movs	r2, #0
 8012088:	6062      	str	r2, [r4, #4]
 801208a:	04d9      	lsls	r1, r3, #19
 801208c:	6922      	ldr	r2, [r4, #16]
 801208e:	6022      	str	r2, [r4, #0]
 8012090:	d504      	bpl.n	801209c <__sflush_r+0x78>
 8012092:	1c42      	adds	r2, r0, #1
 8012094:	d101      	bne.n	801209a <__sflush_r+0x76>
 8012096:	682b      	ldr	r3, [r5, #0]
 8012098:	b903      	cbnz	r3, 801209c <__sflush_r+0x78>
 801209a:	6560      	str	r0, [r4, #84]	@ 0x54
 801209c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801209e:	602f      	str	r7, [r5, #0]
 80120a0:	b1b9      	cbz	r1, 80120d2 <__sflush_r+0xae>
 80120a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120a6:	4299      	cmp	r1, r3
 80120a8:	d002      	beq.n	80120b0 <__sflush_r+0x8c>
 80120aa:	4628      	mov	r0, r5
 80120ac:	f7fe fcdc 	bl	8010a68 <_free_r>
 80120b0:	2300      	movs	r3, #0
 80120b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80120b4:	e00d      	b.n	80120d2 <__sflush_r+0xae>
 80120b6:	2301      	movs	r3, #1
 80120b8:	4628      	mov	r0, r5
 80120ba:	47b0      	blx	r6
 80120bc:	4602      	mov	r2, r0
 80120be:	1c50      	adds	r0, r2, #1
 80120c0:	d1c9      	bne.n	8012056 <__sflush_r+0x32>
 80120c2:	682b      	ldr	r3, [r5, #0]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d0c6      	beq.n	8012056 <__sflush_r+0x32>
 80120c8:	2b1d      	cmp	r3, #29
 80120ca:	d001      	beq.n	80120d0 <__sflush_r+0xac>
 80120cc:	2b16      	cmp	r3, #22
 80120ce:	d11e      	bne.n	801210e <__sflush_r+0xea>
 80120d0:	602f      	str	r7, [r5, #0]
 80120d2:	2000      	movs	r0, #0
 80120d4:	e022      	b.n	801211c <__sflush_r+0xf8>
 80120d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120da:	b21b      	sxth	r3, r3
 80120dc:	e01b      	b.n	8012116 <__sflush_r+0xf2>
 80120de:	690f      	ldr	r7, [r1, #16]
 80120e0:	2f00      	cmp	r7, #0
 80120e2:	d0f6      	beq.n	80120d2 <__sflush_r+0xae>
 80120e4:	0793      	lsls	r3, r2, #30
 80120e6:	680e      	ldr	r6, [r1, #0]
 80120e8:	bf08      	it	eq
 80120ea:	694b      	ldreq	r3, [r1, #20]
 80120ec:	600f      	str	r7, [r1, #0]
 80120ee:	bf18      	it	ne
 80120f0:	2300      	movne	r3, #0
 80120f2:	eba6 0807 	sub.w	r8, r6, r7
 80120f6:	608b      	str	r3, [r1, #8]
 80120f8:	f1b8 0f00 	cmp.w	r8, #0
 80120fc:	dde9      	ble.n	80120d2 <__sflush_r+0xae>
 80120fe:	6a21      	ldr	r1, [r4, #32]
 8012100:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012102:	4643      	mov	r3, r8
 8012104:	463a      	mov	r2, r7
 8012106:	4628      	mov	r0, r5
 8012108:	47b0      	blx	r6
 801210a:	2800      	cmp	r0, #0
 801210c:	dc08      	bgt.n	8012120 <__sflush_r+0xfc>
 801210e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012116:	81a3      	strh	r3, [r4, #12]
 8012118:	f04f 30ff 	mov.w	r0, #4294967295
 801211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012120:	4407      	add	r7, r0
 8012122:	eba8 0800 	sub.w	r8, r8, r0
 8012126:	e7e7      	b.n	80120f8 <__sflush_r+0xd4>
 8012128:	dfbffffe 	.word	0xdfbffffe

0801212c <_fflush_r>:
 801212c:	b538      	push	{r3, r4, r5, lr}
 801212e:	690b      	ldr	r3, [r1, #16]
 8012130:	4605      	mov	r5, r0
 8012132:	460c      	mov	r4, r1
 8012134:	b913      	cbnz	r3, 801213c <_fflush_r+0x10>
 8012136:	2500      	movs	r5, #0
 8012138:	4628      	mov	r0, r5
 801213a:	bd38      	pop	{r3, r4, r5, pc}
 801213c:	b118      	cbz	r0, 8012146 <_fflush_r+0x1a>
 801213e:	6a03      	ldr	r3, [r0, #32]
 8012140:	b90b      	cbnz	r3, 8012146 <_fflush_r+0x1a>
 8012142:	f7fd fcdb 	bl	800fafc <__sinit>
 8012146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d0f3      	beq.n	8012136 <_fflush_r+0xa>
 801214e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012150:	07d0      	lsls	r0, r2, #31
 8012152:	d404      	bmi.n	801215e <_fflush_r+0x32>
 8012154:	0599      	lsls	r1, r3, #22
 8012156:	d402      	bmi.n	801215e <_fflush_r+0x32>
 8012158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801215a:	f7fd fe18 	bl	800fd8e <__retarget_lock_acquire_recursive>
 801215e:	4628      	mov	r0, r5
 8012160:	4621      	mov	r1, r4
 8012162:	f7ff ff5f 	bl	8012024 <__sflush_r>
 8012166:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012168:	07da      	lsls	r2, r3, #31
 801216a:	4605      	mov	r5, r0
 801216c:	d4e4      	bmi.n	8012138 <_fflush_r+0xc>
 801216e:	89a3      	ldrh	r3, [r4, #12]
 8012170:	059b      	lsls	r3, r3, #22
 8012172:	d4e1      	bmi.n	8012138 <_fflush_r+0xc>
 8012174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012176:	f7fd fe0b 	bl	800fd90 <__retarget_lock_release_recursive>
 801217a:	e7dd      	b.n	8012138 <_fflush_r+0xc>

0801217c <memmove>:
 801217c:	4288      	cmp	r0, r1
 801217e:	b510      	push	{r4, lr}
 8012180:	eb01 0402 	add.w	r4, r1, r2
 8012184:	d902      	bls.n	801218c <memmove+0x10>
 8012186:	4284      	cmp	r4, r0
 8012188:	4623      	mov	r3, r4
 801218a:	d807      	bhi.n	801219c <memmove+0x20>
 801218c:	1e43      	subs	r3, r0, #1
 801218e:	42a1      	cmp	r1, r4
 8012190:	d008      	beq.n	80121a4 <memmove+0x28>
 8012192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012196:	f803 2f01 	strb.w	r2, [r3, #1]!
 801219a:	e7f8      	b.n	801218e <memmove+0x12>
 801219c:	4402      	add	r2, r0
 801219e:	4601      	mov	r1, r0
 80121a0:	428a      	cmp	r2, r1
 80121a2:	d100      	bne.n	80121a6 <memmove+0x2a>
 80121a4:	bd10      	pop	{r4, pc}
 80121a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80121aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80121ae:	e7f7      	b.n	80121a0 <memmove+0x24>

080121b0 <_sbrk_r>:
 80121b0:	b538      	push	{r3, r4, r5, lr}
 80121b2:	4d06      	ldr	r5, [pc, #24]	@ (80121cc <_sbrk_r+0x1c>)
 80121b4:	2300      	movs	r3, #0
 80121b6:	4604      	mov	r4, r0
 80121b8:	4608      	mov	r0, r1
 80121ba:	602b      	str	r3, [r5, #0]
 80121bc:	f7ef fee8 	bl	8001f90 <_sbrk>
 80121c0:	1c43      	adds	r3, r0, #1
 80121c2:	d102      	bne.n	80121ca <_sbrk_r+0x1a>
 80121c4:	682b      	ldr	r3, [r5, #0]
 80121c6:	b103      	cbz	r3, 80121ca <_sbrk_r+0x1a>
 80121c8:	6023      	str	r3, [r4, #0]
 80121ca:	bd38      	pop	{r3, r4, r5, pc}
 80121cc:	20000ab8 	.word	0x20000ab8

080121d0 <__assert_func>:
 80121d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80121d2:	4614      	mov	r4, r2
 80121d4:	461a      	mov	r2, r3
 80121d6:	4b09      	ldr	r3, [pc, #36]	@ (80121fc <__assert_func+0x2c>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	4605      	mov	r5, r0
 80121dc:	68d8      	ldr	r0, [r3, #12]
 80121de:	b954      	cbnz	r4, 80121f6 <__assert_func+0x26>
 80121e0:	4b07      	ldr	r3, [pc, #28]	@ (8012200 <__assert_func+0x30>)
 80121e2:	461c      	mov	r4, r3
 80121e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80121e8:	9100      	str	r1, [sp, #0]
 80121ea:	462b      	mov	r3, r5
 80121ec:	4905      	ldr	r1, [pc, #20]	@ (8012204 <__assert_func+0x34>)
 80121ee:	f000 f84f 	bl	8012290 <fiprintf>
 80121f2:	f000 f85f 	bl	80122b4 <abort>
 80121f6:	4b04      	ldr	r3, [pc, #16]	@ (8012208 <__assert_func+0x38>)
 80121f8:	e7f4      	b.n	80121e4 <__assert_func+0x14>
 80121fa:	bf00      	nop
 80121fc:	20000208 	.word	0x20000208
 8012200:	0801301d 	.word	0x0801301d
 8012204:	08012fef 	.word	0x08012fef
 8012208:	08012fe2 	.word	0x08012fe2

0801220c <_calloc_r>:
 801220c:	b570      	push	{r4, r5, r6, lr}
 801220e:	fba1 5402 	umull	r5, r4, r1, r2
 8012212:	b93c      	cbnz	r4, 8012224 <_calloc_r+0x18>
 8012214:	4629      	mov	r1, r5
 8012216:	f7fe ffd5 	bl	80111c4 <_malloc_r>
 801221a:	4606      	mov	r6, r0
 801221c:	b928      	cbnz	r0, 801222a <_calloc_r+0x1e>
 801221e:	2600      	movs	r6, #0
 8012220:	4630      	mov	r0, r6
 8012222:	bd70      	pop	{r4, r5, r6, pc}
 8012224:	220c      	movs	r2, #12
 8012226:	6002      	str	r2, [r0, #0]
 8012228:	e7f9      	b.n	801221e <_calloc_r+0x12>
 801222a:	462a      	mov	r2, r5
 801222c:	4621      	mov	r1, r4
 801222e:	f7fd fd1f 	bl	800fc70 <memset>
 8012232:	e7f5      	b.n	8012220 <_calloc_r+0x14>

08012234 <_realloc_r>:
 8012234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012238:	4680      	mov	r8, r0
 801223a:	4615      	mov	r5, r2
 801223c:	460c      	mov	r4, r1
 801223e:	b921      	cbnz	r1, 801224a <_realloc_r+0x16>
 8012240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012244:	4611      	mov	r1, r2
 8012246:	f7fe bfbd 	b.w	80111c4 <_malloc_r>
 801224a:	b92a      	cbnz	r2, 8012258 <_realloc_r+0x24>
 801224c:	f7fe fc0c 	bl	8010a68 <_free_r>
 8012250:	2400      	movs	r4, #0
 8012252:	4620      	mov	r0, r4
 8012254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012258:	f000 f833 	bl	80122c2 <_malloc_usable_size_r>
 801225c:	4285      	cmp	r5, r0
 801225e:	4606      	mov	r6, r0
 8012260:	d802      	bhi.n	8012268 <_realloc_r+0x34>
 8012262:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012266:	d8f4      	bhi.n	8012252 <_realloc_r+0x1e>
 8012268:	4629      	mov	r1, r5
 801226a:	4640      	mov	r0, r8
 801226c:	f7fe ffaa 	bl	80111c4 <_malloc_r>
 8012270:	4607      	mov	r7, r0
 8012272:	2800      	cmp	r0, #0
 8012274:	d0ec      	beq.n	8012250 <_realloc_r+0x1c>
 8012276:	42b5      	cmp	r5, r6
 8012278:	462a      	mov	r2, r5
 801227a:	4621      	mov	r1, r4
 801227c:	bf28      	it	cs
 801227e:	4632      	movcs	r2, r6
 8012280:	f7fd fd87 	bl	800fd92 <memcpy>
 8012284:	4621      	mov	r1, r4
 8012286:	4640      	mov	r0, r8
 8012288:	f7fe fbee 	bl	8010a68 <_free_r>
 801228c:	463c      	mov	r4, r7
 801228e:	e7e0      	b.n	8012252 <_realloc_r+0x1e>

08012290 <fiprintf>:
 8012290:	b40e      	push	{r1, r2, r3}
 8012292:	b503      	push	{r0, r1, lr}
 8012294:	4601      	mov	r1, r0
 8012296:	ab03      	add	r3, sp, #12
 8012298:	4805      	ldr	r0, [pc, #20]	@ (80122b0 <fiprintf+0x20>)
 801229a:	f853 2b04 	ldr.w	r2, [r3], #4
 801229e:	6800      	ldr	r0, [r0, #0]
 80122a0:	9301      	str	r3, [sp, #4]
 80122a2:	f000 f83f 	bl	8012324 <_vfiprintf_r>
 80122a6:	b002      	add	sp, #8
 80122a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80122ac:	b003      	add	sp, #12
 80122ae:	4770      	bx	lr
 80122b0:	20000208 	.word	0x20000208

080122b4 <abort>:
 80122b4:	b508      	push	{r3, lr}
 80122b6:	2006      	movs	r0, #6
 80122b8:	f000 fa08 	bl	80126cc <raise>
 80122bc:	2001      	movs	r0, #1
 80122be:	f7ef fdef 	bl	8001ea0 <_exit>

080122c2 <_malloc_usable_size_r>:
 80122c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122c6:	1f18      	subs	r0, r3, #4
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	bfbc      	itt	lt
 80122cc:	580b      	ldrlt	r3, [r1, r0]
 80122ce:	18c0      	addlt	r0, r0, r3
 80122d0:	4770      	bx	lr

080122d2 <__sfputc_r>:
 80122d2:	6893      	ldr	r3, [r2, #8]
 80122d4:	3b01      	subs	r3, #1
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	b410      	push	{r4}
 80122da:	6093      	str	r3, [r2, #8]
 80122dc:	da08      	bge.n	80122f0 <__sfputc_r+0x1e>
 80122de:	6994      	ldr	r4, [r2, #24]
 80122e0:	42a3      	cmp	r3, r4
 80122e2:	db01      	blt.n	80122e8 <__sfputc_r+0x16>
 80122e4:	290a      	cmp	r1, #10
 80122e6:	d103      	bne.n	80122f0 <__sfputc_r+0x1e>
 80122e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122ec:	f000 b932 	b.w	8012554 <__swbuf_r>
 80122f0:	6813      	ldr	r3, [r2, #0]
 80122f2:	1c58      	adds	r0, r3, #1
 80122f4:	6010      	str	r0, [r2, #0]
 80122f6:	7019      	strb	r1, [r3, #0]
 80122f8:	4608      	mov	r0, r1
 80122fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122fe:	4770      	bx	lr

08012300 <__sfputs_r>:
 8012300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012302:	4606      	mov	r6, r0
 8012304:	460f      	mov	r7, r1
 8012306:	4614      	mov	r4, r2
 8012308:	18d5      	adds	r5, r2, r3
 801230a:	42ac      	cmp	r4, r5
 801230c:	d101      	bne.n	8012312 <__sfputs_r+0x12>
 801230e:	2000      	movs	r0, #0
 8012310:	e007      	b.n	8012322 <__sfputs_r+0x22>
 8012312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012316:	463a      	mov	r2, r7
 8012318:	4630      	mov	r0, r6
 801231a:	f7ff ffda 	bl	80122d2 <__sfputc_r>
 801231e:	1c43      	adds	r3, r0, #1
 8012320:	d1f3      	bne.n	801230a <__sfputs_r+0xa>
 8012322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012324 <_vfiprintf_r>:
 8012324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012328:	460d      	mov	r5, r1
 801232a:	b09d      	sub	sp, #116	@ 0x74
 801232c:	4614      	mov	r4, r2
 801232e:	4698      	mov	r8, r3
 8012330:	4606      	mov	r6, r0
 8012332:	b118      	cbz	r0, 801233c <_vfiprintf_r+0x18>
 8012334:	6a03      	ldr	r3, [r0, #32]
 8012336:	b90b      	cbnz	r3, 801233c <_vfiprintf_r+0x18>
 8012338:	f7fd fbe0 	bl	800fafc <__sinit>
 801233c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801233e:	07d9      	lsls	r1, r3, #31
 8012340:	d405      	bmi.n	801234e <_vfiprintf_r+0x2a>
 8012342:	89ab      	ldrh	r3, [r5, #12]
 8012344:	059a      	lsls	r2, r3, #22
 8012346:	d402      	bmi.n	801234e <_vfiprintf_r+0x2a>
 8012348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801234a:	f7fd fd20 	bl	800fd8e <__retarget_lock_acquire_recursive>
 801234e:	89ab      	ldrh	r3, [r5, #12]
 8012350:	071b      	lsls	r3, r3, #28
 8012352:	d501      	bpl.n	8012358 <_vfiprintf_r+0x34>
 8012354:	692b      	ldr	r3, [r5, #16]
 8012356:	b99b      	cbnz	r3, 8012380 <_vfiprintf_r+0x5c>
 8012358:	4629      	mov	r1, r5
 801235a:	4630      	mov	r0, r6
 801235c:	f000 f938 	bl	80125d0 <__swsetup_r>
 8012360:	b170      	cbz	r0, 8012380 <_vfiprintf_r+0x5c>
 8012362:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012364:	07dc      	lsls	r4, r3, #31
 8012366:	d504      	bpl.n	8012372 <_vfiprintf_r+0x4e>
 8012368:	f04f 30ff 	mov.w	r0, #4294967295
 801236c:	b01d      	add	sp, #116	@ 0x74
 801236e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012372:	89ab      	ldrh	r3, [r5, #12]
 8012374:	0598      	lsls	r0, r3, #22
 8012376:	d4f7      	bmi.n	8012368 <_vfiprintf_r+0x44>
 8012378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801237a:	f7fd fd09 	bl	800fd90 <__retarget_lock_release_recursive>
 801237e:	e7f3      	b.n	8012368 <_vfiprintf_r+0x44>
 8012380:	2300      	movs	r3, #0
 8012382:	9309      	str	r3, [sp, #36]	@ 0x24
 8012384:	2320      	movs	r3, #32
 8012386:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801238a:	f8cd 800c 	str.w	r8, [sp, #12]
 801238e:	2330      	movs	r3, #48	@ 0x30
 8012390:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012540 <_vfiprintf_r+0x21c>
 8012394:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012398:	f04f 0901 	mov.w	r9, #1
 801239c:	4623      	mov	r3, r4
 801239e:	469a      	mov	sl, r3
 80123a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123a4:	b10a      	cbz	r2, 80123aa <_vfiprintf_r+0x86>
 80123a6:	2a25      	cmp	r2, #37	@ 0x25
 80123a8:	d1f9      	bne.n	801239e <_vfiprintf_r+0x7a>
 80123aa:	ebba 0b04 	subs.w	fp, sl, r4
 80123ae:	d00b      	beq.n	80123c8 <_vfiprintf_r+0xa4>
 80123b0:	465b      	mov	r3, fp
 80123b2:	4622      	mov	r2, r4
 80123b4:	4629      	mov	r1, r5
 80123b6:	4630      	mov	r0, r6
 80123b8:	f7ff ffa2 	bl	8012300 <__sfputs_r>
 80123bc:	3001      	adds	r0, #1
 80123be:	f000 80a7 	beq.w	8012510 <_vfiprintf_r+0x1ec>
 80123c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80123c4:	445a      	add	r2, fp
 80123c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80123c8:	f89a 3000 	ldrb.w	r3, [sl]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	f000 809f 	beq.w	8012510 <_vfiprintf_r+0x1ec>
 80123d2:	2300      	movs	r3, #0
 80123d4:	f04f 32ff 	mov.w	r2, #4294967295
 80123d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123dc:	f10a 0a01 	add.w	sl, sl, #1
 80123e0:	9304      	str	r3, [sp, #16]
 80123e2:	9307      	str	r3, [sp, #28]
 80123e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80123e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80123ea:	4654      	mov	r4, sl
 80123ec:	2205      	movs	r2, #5
 80123ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123f2:	4853      	ldr	r0, [pc, #332]	@ (8012540 <_vfiprintf_r+0x21c>)
 80123f4:	f7ed ff14 	bl	8000220 <memchr>
 80123f8:	9a04      	ldr	r2, [sp, #16]
 80123fa:	b9d8      	cbnz	r0, 8012434 <_vfiprintf_r+0x110>
 80123fc:	06d1      	lsls	r1, r2, #27
 80123fe:	bf44      	itt	mi
 8012400:	2320      	movmi	r3, #32
 8012402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012406:	0713      	lsls	r3, r2, #28
 8012408:	bf44      	itt	mi
 801240a:	232b      	movmi	r3, #43	@ 0x2b
 801240c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012410:	f89a 3000 	ldrb.w	r3, [sl]
 8012414:	2b2a      	cmp	r3, #42	@ 0x2a
 8012416:	d015      	beq.n	8012444 <_vfiprintf_r+0x120>
 8012418:	9a07      	ldr	r2, [sp, #28]
 801241a:	4654      	mov	r4, sl
 801241c:	2000      	movs	r0, #0
 801241e:	f04f 0c0a 	mov.w	ip, #10
 8012422:	4621      	mov	r1, r4
 8012424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012428:	3b30      	subs	r3, #48	@ 0x30
 801242a:	2b09      	cmp	r3, #9
 801242c:	d94b      	bls.n	80124c6 <_vfiprintf_r+0x1a2>
 801242e:	b1b0      	cbz	r0, 801245e <_vfiprintf_r+0x13a>
 8012430:	9207      	str	r2, [sp, #28]
 8012432:	e014      	b.n	801245e <_vfiprintf_r+0x13a>
 8012434:	eba0 0308 	sub.w	r3, r0, r8
 8012438:	fa09 f303 	lsl.w	r3, r9, r3
 801243c:	4313      	orrs	r3, r2
 801243e:	9304      	str	r3, [sp, #16]
 8012440:	46a2      	mov	sl, r4
 8012442:	e7d2      	b.n	80123ea <_vfiprintf_r+0xc6>
 8012444:	9b03      	ldr	r3, [sp, #12]
 8012446:	1d19      	adds	r1, r3, #4
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	9103      	str	r1, [sp, #12]
 801244c:	2b00      	cmp	r3, #0
 801244e:	bfbb      	ittet	lt
 8012450:	425b      	neglt	r3, r3
 8012452:	f042 0202 	orrlt.w	r2, r2, #2
 8012456:	9307      	strge	r3, [sp, #28]
 8012458:	9307      	strlt	r3, [sp, #28]
 801245a:	bfb8      	it	lt
 801245c:	9204      	strlt	r2, [sp, #16]
 801245e:	7823      	ldrb	r3, [r4, #0]
 8012460:	2b2e      	cmp	r3, #46	@ 0x2e
 8012462:	d10a      	bne.n	801247a <_vfiprintf_r+0x156>
 8012464:	7863      	ldrb	r3, [r4, #1]
 8012466:	2b2a      	cmp	r3, #42	@ 0x2a
 8012468:	d132      	bne.n	80124d0 <_vfiprintf_r+0x1ac>
 801246a:	9b03      	ldr	r3, [sp, #12]
 801246c:	1d1a      	adds	r2, r3, #4
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	9203      	str	r2, [sp, #12]
 8012472:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012476:	3402      	adds	r4, #2
 8012478:	9305      	str	r3, [sp, #20]
 801247a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012550 <_vfiprintf_r+0x22c>
 801247e:	7821      	ldrb	r1, [r4, #0]
 8012480:	2203      	movs	r2, #3
 8012482:	4650      	mov	r0, sl
 8012484:	f7ed fecc 	bl	8000220 <memchr>
 8012488:	b138      	cbz	r0, 801249a <_vfiprintf_r+0x176>
 801248a:	9b04      	ldr	r3, [sp, #16]
 801248c:	eba0 000a 	sub.w	r0, r0, sl
 8012490:	2240      	movs	r2, #64	@ 0x40
 8012492:	4082      	lsls	r2, r0
 8012494:	4313      	orrs	r3, r2
 8012496:	3401      	adds	r4, #1
 8012498:	9304      	str	r3, [sp, #16]
 801249a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801249e:	4829      	ldr	r0, [pc, #164]	@ (8012544 <_vfiprintf_r+0x220>)
 80124a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80124a4:	2206      	movs	r2, #6
 80124a6:	f7ed febb 	bl	8000220 <memchr>
 80124aa:	2800      	cmp	r0, #0
 80124ac:	d03f      	beq.n	801252e <_vfiprintf_r+0x20a>
 80124ae:	4b26      	ldr	r3, [pc, #152]	@ (8012548 <_vfiprintf_r+0x224>)
 80124b0:	bb1b      	cbnz	r3, 80124fa <_vfiprintf_r+0x1d6>
 80124b2:	9b03      	ldr	r3, [sp, #12]
 80124b4:	3307      	adds	r3, #7
 80124b6:	f023 0307 	bic.w	r3, r3, #7
 80124ba:	3308      	adds	r3, #8
 80124bc:	9303      	str	r3, [sp, #12]
 80124be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124c0:	443b      	add	r3, r7
 80124c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80124c4:	e76a      	b.n	801239c <_vfiprintf_r+0x78>
 80124c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80124ca:	460c      	mov	r4, r1
 80124cc:	2001      	movs	r0, #1
 80124ce:	e7a8      	b.n	8012422 <_vfiprintf_r+0xfe>
 80124d0:	2300      	movs	r3, #0
 80124d2:	3401      	adds	r4, #1
 80124d4:	9305      	str	r3, [sp, #20]
 80124d6:	4619      	mov	r1, r3
 80124d8:	f04f 0c0a 	mov.w	ip, #10
 80124dc:	4620      	mov	r0, r4
 80124de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124e2:	3a30      	subs	r2, #48	@ 0x30
 80124e4:	2a09      	cmp	r2, #9
 80124e6:	d903      	bls.n	80124f0 <_vfiprintf_r+0x1cc>
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d0c6      	beq.n	801247a <_vfiprintf_r+0x156>
 80124ec:	9105      	str	r1, [sp, #20]
 80124ee:	e7c4      	b.n	801247a <_vfiprintf_r+0x156>
 80124f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80124f4:	4604      	mov	r4, r0
 80124f6:	2301      	movs	r3, #1
 80124f8:	e7f0      	b.n	80124dc <_vfiprintf_r+0x1b8>
 80124fa:	ab03      	add	r3, sp, #12
 80124fc:	9300      	str	r3, [sp, #0]
 80124fe:	462a      	mov	r2, r5
 8012500:	4b12      	ldr	r3, [pc, #72]	@ (801254c <_vfiprintf_r+0x228>)
 8012502:	a904      	add	r1, sp, #16
 8012504:	4630      	mov	r0, r6
 8012506:	f7fc fca1 	bl	800ee4c <_printf_float>
 801250a:	4607      	mov	r7, r0
 801250c:	1c78      	adds	r0, r7, #1
 801250e:	d1d6      	bne.n	80124be <_vfiprintf_r+0x19a>
 8012510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012512:	07d9      	lsls	r1, r3, #31
 8012514:	d405      	bmi.n	8012522 <_vfiprintf_r+0x1fe>
 8012516:	89ab      	ldrh	r3, [r5, #12]
 8012518:	059a      	lsls	r2, r3, #22
 801251a:	d402      	bmi.n	8012522 <_vfiprintf_r+0x1fe>
 801251c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801251e:	f7fd fc37 	bl	800fd90 <__retarget_lock_release_recursive>
 8012522:	89ab      	ldrh	r3, [r5, #12]
 8012524:	065b      	lsls	r3, r3, #25
 8012526:	f53f af1f 	bmi.w	8012368 <_vfiprintf_r+0x44>
 801252a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801252c:	e71e      	b.n	801236c <_vfiprintf_r+0x48>
 801252e:	ab03      	add	r3, sp, #12
 8012530:	9300      	str	r3, [sp, #0]
 8012532:	462a      	mov	r2, r5
 8012534:	4b05      	ldr	r3, [pc, #20]	@ (801254c <_vfiprintf_r+0x228>)
 8012536:	a904      	add	r1, sp, #16
 8012538:	4630      	mov	r0, r6
 801253a:	f7fc ff1f 	bl	800f37c <_printf_i>
 801253e:	e7e4      	b.n	801250a <_vfiprintf_r+0x1e6>
 8012540:	08012fd1 	.word	0x08012fd1
 8012544:	08012fdb 	.word	0x08012fdb
 8012548:	0800ee4d 	.word	0x0800ee4d
 801254c:	08012301 	.word	0x08012301
 8012550:	08012fd7 	.word	0x08012fd7

08012554 <__swbuf_r>:
 8012554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012556:	460e      	mov	r6, r1
 8012558:	4614      	mov	r4, r2
 801255a:	4605      	mov	r5, r0
 801255c:	b118      	cbz	r0, 8012566 <__swbuf_r+0x12>
 801255e:	6a03      	ldr	r3, [r0, #32]
 8012560:	b90b      	cbnz	r3, 8012566 <__swbuf_r+0x12>
 8012562:	f7fd facb 	bl	800fafc <__sinit>
 8012566:	69a3      	ldr	r3, [r4, #24]
 8012568:	60a3      	str	r3, [r4, #8]
 801256a:	89a3      	ldrh	r3, [r4, #12]
 801256c:	071a      	lsls	r2, r3, #28
 801256e:	d501      	bpl.n	8012574 <__swbuf_r+0x20>
 8012570:	6923      	ldr	r3, [r4, #16]
 8012572:	b943      	cbnz	r3, 8012586 <__swbuf_r+0x32>
 8012574:	4621      	mov	r1, r4
 8012576:	4628      	mov	r0, r5
 8012578:	f000 f82a 	bl	80125d0 <__swsetup_r>
 801257c:	b118      	cbz	r0, 8012586 <__swbuf_r+0x32>
 801257e:	f04f 37ff 	mov.w	r7, #4294967295
 8012582:	4638      	mov	r0, r7
 8012584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012586:	6823      	ldr	r3, [r4, #0]
 8012588:	6922      	ldr	r2, [r4, #16]
 801258a:	1a98      	subs	r0, r3, r2
 801258c:	6963      	ldr	r3, [r4, #20]
 801258e:	b2f6      	uxtb	r6, r6
 8012590:	4283      	cmp	r3, r0
 8012592:	4637      	mov	r7, r6
 8012594:	dc05      	bgt.n	80125a2 <__swbuf_r+0x4e>
 8012596:	4621      	mov	r1, r4
 8012598:	4628      	mov	r0, r5
 801259a:	f7ff fdc7 	bl	801212c <_fflush_r>
 801259e:	2800      	cmp	r0, #0
 80125a0:	d1ed      	bne.n	801257e <__swbuf_r+0x2a>
 80125a2:	68a3      	ldr	r3, [r4, #8]
 80125a4:	3b01      	subs	r3, #1
 80125a6:	60a3      	str	r3, [r4, #8]
 80125a8:	6823      	ldr	r3, [r4, #0]
 80125aa:	1c5a      	adds	r2, r3, #1
 80125ac:	6022      	str	r2, [r4, #0]
 80125ae:	701e      	strb	r6, [r3, #0]
 80125b0:	6962      	ldr	r2, [r4, #20]
 80125b2:	1c43      	adds	r3, r0, #1
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d004      	beq.n	80125c2 <__swbuf_r+0x6e>
 80125b8:	89a3      	ldrh	r3, [r4, #12]
 80125ba:	07db      	lsls	r3, r3, #31
 80125bc:	d5e1      	bpl.n	8012582 <__swbuf_r+0x2e>
 80125be:	2e0a      	cmp	r6, #10
 80125c0:	d1df      	bne.n	8012582 <__swbuf_r+0x2e>
 80125c2:	4621      	mov	r1, r4
 80125c4:	4628      	mov	r0, r5
 80125c6:	f7ff fdb1 	bl	801212c <_fflush_r>
 80125ca:	2800      	cmp	r0, #0
 80125cc:	d0d9      	beq.n	8012582 <__swbuf_r+0x2e>
 80125ce:	e7d6      	b.n	801257e <__swbuf_r+0x2a>

080125d0 <__swsetup_r>:
 80125d0:	b538      	push	{r3, r4, r5, lr}
 80125d2:	4b29      	ldr	r3, [pc, #164]	@ (8012678 <__swsetup_r+0xa8>)
 80125d4:	4605      	mov	r5, r0
 80125d6:	6818      	ldr	r0, [r3, #0]
 80125d8:	460c      	mov	r4, r1
 80125da:	b118      	cbz	r0, 80125e4 <__swsetup_r+0x14>
 80125dc:	6a03      	ldr	r3, [r0, #32]
 80125de:	b90b      	cbnz	r3, 80125e4 <__swsetup_r+0x14>
 80125e0:	f7fd fa8c 	bl	800fafc <__sinit>
 80125e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125e8:	0719      	lsls	r1, r3, #28
 80125ea:	d422      	bmi.n	8012632 <__swsetup_r+0x62>
 80125ec:	06da      	lsls	r2, r3, #27
 80125ee:	d407      	bmi.n	8012600 <__swsetup_r+0x30>
 80125f0:	2209      	movs	r2, #9
 80125f2:	602a      	str	r2, [r5, #0]
 80125f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80125f8:	81a3      	strh	r3, [r4, #12]
 80125fa:	f04f 30ff 	mov.w	r0, #4294967295
 80125fe:	e033      	b.n	8012668 <__swsetup_r+0x98>
 8012600:	0758      	lsls	r0, r3, #29
 8012602:	d512      	bpl.n	801262a <__swsetup_r+0x5a>
 8012604:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012606:	b141      	cbz	r1, 801261a <__swsetup_r+0x4a>
 8012608:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801260c:	4299      	cmp	r1, r3
 801260e:	d002      	beq.n	8012616 <__swsetup_r+0x46>
 8012610:	4628      	mov	r0, r5
 8012612:	f7fe fa29 	bl	8010a68 <_free_r>
 8012616:	2300      	movs	r3, #0
 8012618:	6363      	str	r3, [r4, #52]	@ 0x34
 801261a:	89a3      	ldrh	r3, [r4, #12]
 801261c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012620:	81a3      	strh	r3, [r4, #12]
 8012622:	2300      	movs	r3, #0
 8012624:	6063      	str	r3, [r4, #4]
 8012626:	6923      	ldr	r3, [r4, #16]
 8012628:	6023      	str	r3, [r4, #0]
 801262a:	89a3      	ldrh	r3, [r4, #12]
 801262c:	f043 0308 	orr.w	r3, r3, #8
 8012630:	81a3      	strh	r3, [r4, #12]
 8012632:	6923      	ldr	r3, [r4, #16]
 8012634:	b94b      	cbnz	r3, 801264a <__swsetup_r+0x7a>
 8012636:	89a3      	ldrh	r3, [r4, #12]
 8012638:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801263c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012640:	d003      	beq.n	801264a <__swsetup_r+0x7a>
 8012642:	4621      	mov	r1, r4
 8012644:	4628      	mov	r0, r5
 8012646:	f000 f883 	bl	8012750 <__smakebuf_r>
 801264a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801264e:	f013 0201 	ands.w	r2, r3, #1
 8012652:	d00a      	beq.n	801266a <__swsetup_r+0x9a>
 8012654:	2200      	movs	r2, #0
 8012656:	60a2      	str	r2, [r4, #8]
 8012658:	6962      	ldr	r2, [r4, #20]
 801265a:	4252      	negs	r2, r2
 801265c:	61a2      	str	r2, [r4, #24]
 801265e:	6922      	ldr	r2, [r4, #16]
 8012660:	b942      	cbnz	r2, 8012674 <__swsetup_r+0xa4>
 8012662:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012666:	d1c5      	bne.n	80125f4 <__swsetup_r+0x24>
 8012668:	bd38      	pop	{r3, r4, r5, pc}
 801266a:	0799      	lsls	r1, r3, #30
 801266c:	bf58      	it	pl
 801266e:	6962      	ldrpl	r2, [r4, #20]
 8012670:	60a2      	str	r2, [r4, #8]
 8012672:	e7f4      	b.n	801265e <__swsetup_r+0x8e>
 8012674:	2000      	movs	r0, #0
 8012676:	e7f7      	b.n	8012668 <__swsetup_r+0x98>
 8012678:	20000208 	.word	0x20000208

0801267c <_raise_r>:
 801267c:	291f      	cmp	r1, #31
 801267e:	b538      	push	{r3, r4, r5, lr}
 8012680:	4605      	mov	r5, r0
 8012682:	460c      	mov	r4, r1
 8012684:	d904      	bls.n	8012690 <_raise_r+0x14>
 8012686:	2316      	movs	r3, #22
 8012688:	6003      	str	r3, [r0, #0]
 801268a:	f04f 30ff 	mov.w	r0, #4294967295
 801268e:	bd38      	pop	{r3, r4, r5, pc}
 8012690:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012692:	b112      	cbz	r2, 801269a <_raise_r+0x1e>
 8012694:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012698:	b94b      	cbnz	r3, 80126ae <_raise_r+0x32>
 801269a:	4628      	mov	r0, r5
 801269c:	f000 f830 	bl	8012700 <_getpid_r>
 80126a0:	4622      	mov	r2, r4
 80126a2:	4601      	mov	r1, r0
 80126a4:	4628      	mov	r0, r5
 80126a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126aa:	f000 b817 	b.w	80126dc <_kill_r>
 80126ae:	2b01      	cmp	r3, #1
 80126b0:	d00a      	beq.n	80126c8 <_raise_r+0x4c>
 80126b2:	1c59      	adds	r1, r3, #1
 80126b4:	d103      	bne.n	80126be <_raise_r+0x42>
 80126b6:	2316      	movs	r3, #22
 80126b8:	6003      	str	r3, [r0, #0]
 80126ba:	2001      	movs	r0, #1
 80126bc:	e7e7      	b.n	801268e <_raise_r+0x12>
 80126be:	2100      	movs	r1, #0
 80126c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80126c4:	4620      	mov	r0, r4
 80126c6:	4798      	blx	r3
 80126c8:	2000      	movs	r0, #0
 80126ca:	e7e0      	b.n	801268e <_raise_r+0x12>

080126cc <raise>:
 80126cc:	4b02      	ldr	r3, [pc, #8]	@ (80126d8 <raise+0xc>)
 80126ce:	4601      	mov	r1, r0
 80126d0:	6818      	ldr	r0, [r3, #0]
 80126d2:	f7ff bfd3 	b.w	801267c <_raise_r>
 80126d6:	bf00      	nop
 80126d8:	20000208 	.word	0x20000208

080126dc <_kill_r>:
 80126dc:	b538      	push	{r3, r4, r5, lr}
 80126de:	4d07      	ldr	r5, [pc, #28]	@ (80126fc <_kill_r+0x20>)
 80126e0:	2300      	movs	r3, #0
 80126e2:	4604      	mov	r4, r0
 80126e4:	4608      	mov	r0, r1
 80126e6:	4611      	mov	r1, r2
 80126e8:	602b      	str	r3, [r5, #0]
 80126ea:	f7ef fbc9 	bl	8001e80 <_kill>
 80126ee:	1c43      	adds	r3, r0, #1
 80126f0:	d102      	bne.n	80126f8 <_kill_r+0x1c>
 80126f2:	682b      	ldr	r3, [r5, #0]
 80126f4:	b103      	cbz	r3, 80126f8 <_kill_r+0x1c>
 80126f6:	6023      	str	r3, [r4, #0]
 80126f8:	bd38      	pop	{r3, r4, r5, pc}
 80126fa:	bf00      	nop
 80126fc:	20000ab8 	.word	0x20000ab8

08012700 <_getpid_r>:
 8012700:	f7ef bbb6 	b.w	8001e70 <_getpid>

08012704 <__swhatbuf_r>:
 8012704:	b570      	push	{r4, r5, r6, lr}
 8012706:	460c      	mov	r4, r1
 8012708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801270c:	2900      	cmp	r1, #0
 801270e:	b096      	sub	sp, #88	@ 0x58
 8012710:	4615      	mov	r5, r2
 8012712:	461e      	mov	r6, r3
 8012714:	da0d      	bge.n	8012732 <__swhatbuf_r+0x2e>
 8012716:	89a3      	ldrh	r3, [r4, #12]
 8012718:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801271c:	f04f 0100 	mov.w	r1, #0
 8012720:	bf14      	ite	ne
 8012722:	2340      	movne	r3, #64	@ 0x40
 8012724:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012728:	2000      	movs	r0, #0
 801272a:	6031      	str	r1, [r6, #0]
 801272c:	602b      	str	r3, [r5, #0]
 801272e:	b016      	add	sp, #88	@ 0x58
 8012730:	bd70      	pop	{r4, r5, r6, pc}
 8012732:	466a      	mov	r2, sp
 8012734:	f000 f848 	bl	80127c8 <_fstat_r>
 8012738:	2800      	cmp	r0, #0
 801273a:	dbec      	blt.n	8012716 <__swhatbuf_r+0x12>
 801273c:	9901      	ldr	r1, [sp, #4]
 801273e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012742:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012746:	4259      	negs	r1, r3
 8012748:	4159      	adcs	r1, r3
 801274a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801274e:	e7eb      	b.n	8012728 <__swhatbuf_r+0x24>

08012750 <__smakebuf_r>:
 8012750:	898b      	ldrh	r3, [r1, #12]
 8012752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012754:	079d      	lsls	r5, r3, #30
 8012756:	4606      	mov	r6, r0
 8012758:	460c      	mov	r4, r1
 801275a:	d507      	bpl.n	801276c <__smakebuf_r+0x1c>
 801275c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012760:	6023      	str	r3, [r4, #0]
 8012762:	6123      	str	r3, [r4, #16]
 8012764:	2301      	movs	r3, #1
 8012766:	6163      	str	r3, [r4, #20]
 8012768:	b003      	add	sp, #12
 801276a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801276c:	ab01      	add	r3, sp, #4
 801276e:	466a      	mov	r2, sp
 8012770:	f7ff ffc8 	bl	8012704 <__swhatbuf_r>
 8012774:	9f00      	ldr	r7, [sp, #0]
 8012776:	4605      	mov	r5, r0
 8012778:	4639      	mov	r1, r7
 801277a:	4630      	mov	r0, r6
 801277c:	f7fe fd22 	bl	80111c4 <_malloc_r>
 8012780:	b948      	cbnz	r0, 8012796 <__smakebuf_r+0x46>
 8012782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012786:	059a      	lsls	r2, r3, #22
 8012788:	d4ee      	bmi.n	8012768 <__smakebuf_r+0x18>
 801278a:	f023 0303 	bic.w	r3, r3, #3
 801278e:	f043 0302 	orr.w	r3, r3, #2
 8012792:	81a3      	strh	r3, [r4, #12]
 8012794:	e7e2      	b.n	801275c <__smakebuf_r+0xc>
 8012796:	89a3      	ldrh	r3, [r4, #12]
 8012798:	6020      	str	r0, [r4, #0]
 801279a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801279e:	81a3      	strh	r3, [r4, #12]
 80127a0:	9b01      	ldr	r3, [sp, #4]
 80127a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80127a6:	b15b      	cbz	r3, 80127c0 <__smakebuf_r+0x70>
 80127a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127ac:	4630      	mov	r0, r6
 80127ae:	f000 f81d 	bl	80127ec <_isatty_r>
 80127b2:	b128      	cbz	r0, 80127c0 <__smakebuf_r+0x70>
 80127b4:	89a3      	ldrh	r3, [r4, #12]
 80127b6:	f023 0303 	bic.w	r3, r3, #3
 80127ba:	f043 0301 	orr.w	r3, r3, #1
 80127be:	81a3      	strh	r3, [r4, #12]
 80127c0:	89a3      	ldrh	r3, [r4, #12]
 80127c2:	431d      	orrs	r5, r3
 80127c4:	81a5      	strh	r5, [r4, #12]
 80127c6:	e7cf      	b.n	8012768 <__smakebuf_r+0x18>

080127c8 <_fstat_r>:
 80127c8:	b538      	push	{r3, r4, r5, lr}
 80127ca:	4d07      	ldr	r5, [pc, #28]	@ (80127e8 <_fstat_r+0x20>)
 80127cc:	2300      	movs	r3, #0
 80127ce:	4604      	mov	r4, r0
 80127d0:	4608      	mov	r0, r1
 80127d2:	4611      	mov	r1, r2
 80127d4:	602b      	str	r3, [r5, #0]
 80127d6:	f7ef fbb3 	bl	8001f40 <_fstat>
 80127da:	1c43      	adds	r3, r0, #1
 80127dc:	d102      	bne.n	80127e4 <_fstat_r+0x1c>
 80127de:	682b      	ldr	r3, [r5, #0]
 80127e0:	b103      	cbz	r3, 80127e4 <_fstat_r+0x1c>
 80127e2:	6023      	str	r3, [r4, #0]
 80127e4:	bd38      	pop	{r3, r4, r5, pc}
 80127e6:	bf00      	nop
 80127e8:	20000ab8 	.word	0x20000ab8

080127ec <_isatty_r>:
 80127ec:	b538      	push	{r3, r4, r5, lr}
 80127ee:	4d06      	ldr	r5, [pc, #24]	@ (8012808 <_isatty_r+0x1c>)
 80127f0:	2300      	movs	r3, #0
 80127f2:	4604      	mov	r4, r0
 80127f4:	4608      	mov	r0, r1
 80127f6:	602b      	str	r3, [r5, #0]
 80127f8:	f7ef fbb2 	bl	8001f60 <_isatty>
 80127fc:	1c43      	adds	r3, r0, #1
 80127fe:	d102      	bne.n	8012806 <_isatty_r+0x1a>
 8012800:	682b      	ldr	r3, [r5, #0]
 8012802:	b103      	cbz	r3, 8012806 <_isatty_r+0x1a>
 8012804:	6023      	str	r3, [r4, #0]
 8012806:	bd38      	pop	{r3, r4, r5, pc}
 8012808:	20000ab8 	.word	0x20000ab8

0801280c <fmod>:
 801280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801280e:	ed2d 8b02 	vpush	{d8}
 8012812:	ec57 6b10 	vmov	r6, r7, d0
 8012816:	ec55 4b11 	vmov	r4, r5, d1
 801281a:	f000 f825 	bl	8012868 <__ieee754_fmod>
 801281e:	4622      	mov	r2, r4
 8012820:	462b      	mov	r3, r5
 8012822:	4630      	mov	r0, r6
 8012824:	4639      	mov	r1, r7
 8012826:	eeb0 8a40 	vmov.f32	s16, s0
 801282a:	eef0 8a60 	vmov.f32	s17, s1
 801282e:	f7ee f9a5 	bl	8000b7c <__aeabi_dcmpun>
 8012832:	b990      	cbnz	r0, 801285a <fmod+0x4e>
 8012834:	2200      	movs	r2, #0
 8012836:	2300      	movs	r3, #0
 8012838:	4620      	mov	r0, r4
 801283a:	4629      	mov	r1, r5
 801283c:	f7ee f96c 	bl	8000b18 <__aeabi_dcmpeq>
 8012840:	b158      	cbz	r0, 801285a <fmod+0x4e>
 8012842:	f7fd fa79 	bl	800fd38 <__errno>
 8012846:	2321      	movs	r3, #33	@ 0x21
 8012848:	6003      	str	r3, [r0, #0]
 801284a:	2200      	movs	r2, #0
 801284c:	2300      	movs	r3, #0
 801284e:	4610      	mov	r0, r2
 8012850:	4619      	mov	r1, r3
 8012852:	f7ee f823 	bl	800089c <__aeabi_ddiv>
 8012856:	ec41 0b18 	vmov	d8, r0, r1
 801285a:	eeb0 0a48 	vmov.f32	s0, s16
 801285e:	eef0 0a68 	vmov.f32	s1, s17
 8012862:	ecbd 8b02 	vpop	{d8}
 8012866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012868 <__ieee754_fmod>:
 8012868:	ec53 2b11 	vmov	r2, r3, d1
 801286c:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8012870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012874:	ea52 040c 	orrs.w	r4, r2, ip
 8012878:	ec51 0b10 	vmov	r0, r1, d0
 801287c:	461e      	mov	r6, r3
 801287e:	4617      	mov	r7, r2
 8012880:	4696      	mov	lr, r2
 8012882:	d00c      	beq.n	801289e <__ieee754_fmod+0x36>
 8012884:	4c77      	ldr	r4, [pc, #476]	@ (8012a64 <__ieee754_fmod+0x1fc>)
 8012886:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 801288a:	45a0      	cmp	r8, r4
 801288c:	4689      	mov	r9, r1
 801288e:	d806      	bhi.n	801289e <__ieee754_fmod+0x36>
 8012890:	4254      	negs	r4, r2
 8012892:	4d75      	ldr	r5, [pc, #468]	@ (8012a68 <__ieee754_fmod+0x200>)
 8012894:	4314      	orrs	r4, r2
 8012896:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 801289a:	42ac      	cmp	r4, r5
 801289c:	d909      	bls.n	80128b2 <__ieee754_fmod+0x4a>
 801289e:	f7ed fed3 	bl	8000648 <__aeabi_dmul>
 80128a2:	4602      	mov	r2, r0
 80128a4:	460b      	mov	r3, r1
 80128a6:	f7ed fff9 	bl	800089c <__aeabi_ddiv>
 80128aa:	ec41 0b10 	vmov	d0, r0, r1
 80128ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128b2:	45e0      	cmp	r8, ip
 80128b4:	4682      	mov	sl, r0
 80128b6:	4604      	mov	r4, r0
 80128b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80128bc:	dc09      	bgt.n	80128d2 <__ieee754_fmod+0x6a>
 80128be:	dbf4      	blt.n	80128aa <__ieee754_fmod+0x42>
 80128c0:	4282      	cmp	r2, r0
 80128c2:	d8f2      	bhi.n	80128aa <__ieee754_fmod+0x42>
 80128c4:	d105      	bne.n	80128d2 <__ieee754_fmod+0x6a>
 80128c6:	4b69      	ldr	r3, [pc, #420]	@ (8012a6c <__ieee754_fmod+0x204>)
 80128c8:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80128cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80128d0:	e7eb      	b.n	80128aa <__ieee754_fmod+0x42>
 80128d2:	4a65      	ldr	r2, [pc, #404]	@ (8012a68 <__ieee754_fmod+0x200>)
 80128d4:	ea19 0f02 	tst.w	r9, r2
 80128d8:	d148      	bne.n	801296c <__ieee754_fmod+0x104>
 80128da:	f1b8 0f00 	cmp.w	r8, #0
 80128de:	d13d      	bne.n	801295c <__ieee754_fmod+0xf4>
 80128e0:	4963      	ldr	r1, [pc, #396]	@ (8012a70 <__ieee754_fmod+0x208>)
 80128e2:	4653      	mov	r3, sl
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	dc36      	bgt.n	8012956 <__ieee754_fmod+0xee>
 80128e8:	4216      	tst	r6, r2
 80128ea:	d14f      	bne.n	801298c <__ieee754_fmod+0x124>
 80128ec:	f1bc 0f00 	cmp.w	ip, #0
 80128f0:	d144      	bne.n	801297c <__ieee754_fmod+0x114>
 80128f2:	4a5f      	ldr	r2, [pc, #380]	@ (8012a70 <__ieee754_fmod+0x208>)
 80128f4:	463b      	mov	r3, r7
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	dc3d      	bgt.n	8012976 <__ieee754_fmod+0x10e>
 80128fa:	485e      	ldr	r0, [pc, #376]	@ (8012a74 <__ieee754_fmod+0x20c>)
 80128fc:	4281      	cmp	r1, r0
 80128fe:	db4a      	blt.n	8012996 <__ieee754_fmod+0x12e>
 8012900:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012904:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012908:	485a      	ldr	r0, [pc, #360]	@ (8012a74 <__ieee754_fmod+0x20c>)
 801290a:	4282      	cmp	r2, r0
 801290c:	db57      	blt.n	80129be <__ieee754_fmod+0x156>
 801290e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8012912:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8012916:	1a89      	subs	r1, r1, r2
 8012918:	1b98      	subs	r0, r3, r6
 801291a:	eba4 070e 	sub.w	r7, r4, lr
 801291e:	2900      	cmp	r1, #0
 8012920:	d162      	bne.n	80129e8 <__ieee754_fmod+0x180>
 8012922:	4574      	cmp	r4, lr
 8012924:	bf38      	it	cc
 8012926:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801292a:	2800      	cmp	r0, #0
 801292c:	bfa4      	itt	ge
 801292e:	463c      	movge	r4, r7
 8012930:	4603      	movge	r3, r0
 8012932:	ea53 0104 	orrs.w	r1, r3, r4
 8012936:	d0c6      	beq.n	80128c6 <__ieee754_fmod+0x5e>
 8012938:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801293c:	db69      	blt.n	8012a12 <__ieee754_fmod+0x1aa>
 801293e:	494d      	ldr	r1, [pc, #308]	@ (8012a74 <__ieee754_fmod+0x20c>)
 8012940:	428a      	cmp	r2, r1
 8012942:	db6c      	blt.n	8012a1e <__ieee754_fmod+0x1b6>
 8012944:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012948:	432b      	orrs	r3, r5
 801294a:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 801294e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012952:	4620      	mov	r0, r4
 8012954:	e7a9      	b.n	80128aa <__ieee754_fmod+0x42>
 8012956:	3901      	subs	r1, #1
 8012958:	005b      	lsls	r3, r3, #1
 801295a:	e7c3      	b.n	80128e4 <__ieee754_fmod+0x7c>
 801295c:	4945      	ldr	r1, [pc, #276]	@ (8012a74 <__ieee754_fmod+0x20c>)
 801295e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8012962:	2b00      	cmp	r3, #0
 8012964:	ddc0      	ble.n	80128e8 <__ieee754_fmod+0x80>
 8012966:	3901      	subs	r1, #1
 8012968:	005b      	lsls	r3, r3, #1
 801296a:	e7fa      	b.n	8012962 <__ieee754_fmod+0xfa>
 801296c:	ea4f 5128 	mov.w	r1, r8, asr #20
 8012970:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8012974:	e7b8      	b.n	80128e8 <__ieee754_fmod+0x80>
 8012976:	3a01      	subs	r2, #1
 8012978:	005b      	lsls	r3, r3, #1
 801297a:	e7bc      	b.n	80128f6 <__ieee754_fmod+0x8e>
 801297c:	4a3d      	ldr	r2, [pc, #244]	@ (8012a74 <__ieee754_fmod+0x20c>)
 801297e:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8012982:	2b00      	cmp	r3, #0
 8012984:	ddb9      	ble.n	80128fa <__ieee754_fmod+0x92>
 8012986:	3a01      	subs	r2, #1
 8012988:	005b      	lsls	r3, r3, #1
 801298a:	e7fa      	b.n	8012982 <__ieee754_fmod+0x11a>
 801298c:	ea4f 522c 	mov.w	r2, ip, asr #20
 8012990:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8012994:	e7b1      	b.n	80128fa <__ieee754_fmod+0x92>
 8012996:	1a40      	subs	r0, r0, r1
 8012998:	281f      	cmp	r0, #31
 801299a:	dc0a      	bgt.n	80129b2 <__ieee754_fmod+0x14a>
 801299c:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 80129a0:	fa08 f800 	lsl.w	r8, r8, r0
 80129a4:	fa2a f303 	lsr.w	r3, sl, r3
 80129a8:	ea43 0308 	orr.w	r3, r3, r8
 80129ac:	fa0a f400 	lsl.w	r4, sl, r0
 80129b0:	e7aa      	b.n	8012908 <__ieee754_fmod+0xa0>
 80129b2:	4b31      	ldr	r3, [pc, #196]	@ (8012a78 <__ieee754_fmod+0x210>)
 80129b4:	1a5b      	subs	r3, r3, r1
 80129b6:	fa0a f303 	lsl.w	r3, sl, r3
 80129ba:	2400      	movs	r4, #0
 80129bc:	e7a4      	b.n	8012908 <__ieee754_fmod+0xa0>
 80129be:	1a80      	subs	r0, r0, r2
 80129c0:	281f      	cmp	r0, #31
 80129c2:	dc0a      	bgt.n	80129da <__ieee754_fmod+0x172>
 80129c4:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 80129c8:	fa0c fc00 	lsl.w	ip, ip, r0
 80129cc:	fa27 f606 	lsr.w	r6, r7, r6
 80129d0:	ea46 060c 	orr.w	r6, r6, ip
 80129d4:	fa07 fe00 	lsl.w	lr, r7, r0
 80129d8:	e79d      	b.n	8012916 <__ieee754_fmod+0xae>
 80129da:	4e27      	ldr	r6, [pc, #156]	@ (8012a78 <__ieee754_fmod+0x210>)
 80129dc:	1ab6      	subs	r6, r6, r2
 80129de:	fa07 f606 	lsl.w	r6, r7, r6
 80129e2:	f04f 0e00 	mov.w	lr, #0
 80129e6:	e796      	b.n	8012916 <__ieee754_fmod+0xae>
 80129e8:	4574      	cmp	r4, lr
 80129ea:	bf38      	it	cc
 80129ec:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80129f0:	2800      	cmp	r0, #0
 80129f2:	da05      	bge.n	8012a00 <__ieee754_fmod+0x198>
 80129f4:	0fe0      	lsrs	r0, r4, #31
 80129f6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80129fa:	0064      	lsls	r4, r4, #1
 80129fc:	3901      	subs	r1, #1
 80129fe:	e78b      	b.n	8012918 <__ieee754_fmod+0xb0>
 8012a00:	ea50 0307 	orrs.w	r3, r0, r7
 8012a04:	f43f af5f 	beq.w	80128c6 <__ieee754_fmod+0x5e>
 8012a08:	0ffb      	lsrs	r3, r7, #31
 8012a0a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8012a0e:	007c      	lsls	r4, r7, #1
 8012a10:	e7f4      	b.n	80129fc <__ieee754_fmod+0x194>
 8012a12:	0fe1      	lsrs	r1, r4, #31
 8012a14:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8012a18:	0064      	lsls	r4, r4, #1
 8012a1a:	3a01      	subs	r2, #1
 8012a1c:	e78c      	b.n	8012938 <__ieee754_fmod+0xd0>
 8012a1e:	1a89      	subs	r1, r1, r2
 8012a20:	2914      	cmp	r1, #20
 8012a22:	dc0a      	bgt.n	8012a3a <__ieee754_fmod+0x1d2>
 8012a24:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8012a28:	fa03 f202 	lsl.w	r2, r3, r2
 8012a2c:	40cc      	lsrs	r4, r1
 8012a2e:	4322      	orrs	r2, r4
 8012a30:	410b      	asrs	r3, r1
 8012a32:	ea43 0105 	orr.w	r1, r3, r5
 8012a36:	4610      	mov	r0, r2
 8012a38:	e737      	b.n	80128aa <__ieee754_fmod+0x42>
 8012a3a:	291f      	cmp	r1, #31
 8012a3c:	dc07      	bgt.n	8012a4e <__ieee754_fmod+0x1e6>
 8012a3e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8012a42:	40cc      	lsrs	r4, r1
 8012a44:	fa03 f202 	lsl.w	r2, r3, r2
 8012a48:	4322      	orrs	r2, r4
 8012a4a:	462b      	mov	r3, r5
 8012a4c:	e7f1      	b.n	8012a32 <__ieee754_fmod+0x1ca>
 8012a4e:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8012a52:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8012a56:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8012a5a:	32e2      	adds	r2, #226	@ 0xe2
 8012a5c:	fa43 f202 	asr.w	r2, r3, r2
 8012a60:	e7f3      	b.n	8012a4a <__ieee754_fmod+0x1e2>
 8012a62:	bf00      	nop
 8012a64:	7fefffff 	.word	0x7fefffff
 8012a68:	7ff00000 	.word	0x7ff00000
 8012a6c:	08013020 	.word	0x08013020
 8012a70:	fffffbed 	.word	0xfffffbed
 8012a74:	fffffc02 	.word	0xfffffc02
 8012a78:	fffffbe2 	.word	0xfffffbe2

08012a7c <_init>:
 8012a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a7e:	bf00      	nop
 8012a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a82:	bc08      	pop	{r3}
 8012a84:	469e      	mov	lr, r3
 8012a86:	4770      	bx	lr

08012a88 <_fini>:
 8012a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a8a:	bf00      	nop
 8012a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a8e:	bc08      	pop	{r3}
 8012a90:	469e      	mov	lr, r3
 8012a92:	4770      	bx	lr
