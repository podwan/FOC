
focTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec6c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800ee50  0800ee50  0000fe50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2c8  0800f2c8  00011270  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2c8  0800f2c8  000102c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2d0  0800f2d0  00011270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2d0  0800f2d0  000102d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f2d4  0800f2d4  000102d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  0800f2d8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000270  0800f548  00011270  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  0800f548  00011664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfe3  00000000  00000000  000112a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000393f  00000000  00000000  0002d283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  00030bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001154  00000000  00000000  00032258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023009  00000000  00000000  000333ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cd1f  00000000  00000000  000563b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddfe1  00000000  00000000  000730d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001510b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000735c  00000000  00000000  001510f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00158454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000270 	.word	0x20000270
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ee34 	.word	0x0800ee34

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000274 	.word	0x20000274
 800021c:	0800ee34 	.word	0x0800ee34

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00a fb19 	bl	800b686 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00a fb13 	bl	800b686 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <MX_ADC1_Init+0x164>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <MX_ADC1_Init+0x164>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <MX_ADC1_Init+0x164>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <MX_ADC1_Init+0x164>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010cc:	f001 fa58 	bl	8002580 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fb1c 	bl	8001712 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010e6:	f003 fb81 	bl	80047ec <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fb0f 	bl	8001712 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_ADC1_Init+0x168>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4821      	ldr	r0, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001114:	f001 fdf0 	bl	8002cf8 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 faf8 	bl	8001712 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC1_Init+0x16c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001150:	2384      	movs	r3, #132	@ 0x84
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001164:	f002 fe62 	bl	8003e2c <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fad0 	bl	8001712 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_ADC1_Init+0x170>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001182:	f002 fe53 	bl	8003e2c <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fac1 	bl	8001712 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000028c 	.word	0x2000028c
 800119c:	2e300800 	.word	0x2e300800
 80011a0:	0c900008 	.word	0x0c900008
 80011a4:	32601000 	.word	0x32601000

080011a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b098      	sub	sp, #96	@ 0x60
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b2:	223c      	movs	r2, #60	@ 0x3c
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f00a fa65 	bl	800b686 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2220      	movs	r2, #32
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00a fa5f 	bl	800b686 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011c8:	4b3f      	ldr	r3, [pc, #252]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011ca:	4a40      	ldr	r2, [pc, #256]	@ (80012cc <MX_ADC2_Init+0x124>)
 80011cc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011ce:	4b3e      	ldr	r3, [pc, #248]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011d6:	4b3c      	ldr	r3, [pc, #240]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011dc:	4b3a      	ldr	r3, [pc, #232]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011e2:	4b39      	ldr	r3, [pc, #228]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e8:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ee:	4b36      	ldr	r3, [pc, #216]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011f0:	2204      	movs	r2, #4
 80011f2:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011f4:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011fa:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001200:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001202:	2201      	movs	r2, #1
 8001204:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001206:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120e:	4b2e      	ldr	r3, [pc, #184]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001210:	2200      	movs	r2, #0
 8001212:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001214:	4b2c      	ldr	r3, [pc, #176]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001216:	2200      	movs	r2, #0
 8001218:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800121a:	4b2b      	ldr	r3, [pc, #172]	@ (80012c8 <MX_ADC2_Init+0x120>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001222:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001224:	2200      	movs	r2, #0
 8001226:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001228:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <MX_ADC2_Init+0x120>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001230:	4825      	ldr	r0, [pc, #148]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001232:	f001 f9a5 	bl	8002580 <HAL_ADC_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC2_Init+0x98>
  {
    Error_Handler();
 800123c:	f000 fa69 	bl	8001712 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001240:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <MX_ADC2_Init+0x128>)
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001244:	2309      	movs	r3, #9
 8001246:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001248:	2301      	movs	r3, #1
 800124a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800124c:	237f      	movs	r3, #127	@ 0x7f
 800124e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001250:	2304      	movs	r3, #4
 8001252:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigInjected.InjectedOffset = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 800126e:	2384      	movs	r3, #132	@ 0x84
 8001270:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001272:	2380      	movs	r3, #128	@ 0x80
 8001274:	653b      	str	r3, [r7, #80]	@ 0x50
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800127c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001280:	4619      	mov	r1, r3
 8001282:	4811      	ldr	r0, [pc, #68]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001284:	f002 fdd2 	bl	8003e2c <HAL_ADCEx_InjectedConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 800128e:	f000 fa40 	bl	8001712 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <MX_ADC2_Init+0x12c>)
 8001294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001296:	2306      	movs	r3, #6
 8001298:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800129e:	237f      	movs	r3, #127	@ 0x7f
 80012a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a2:	2304      	movs	r3, #4
 80012a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4806      	ldr	r0, [pc, #24]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80012b0:	f001 fd22 	bl	8002cf8 <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC2_Init+0x116>
  {
    Error_Handler();
 80012ba:	f000 fa2a 	bl	8001712 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	3760      	adds	r7, #96	@ 0x60
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200002f8 	.word	0x200002f8
 80012cc:	50000100 	.word	0x50000100
 80012d0:	0c900008 	.word	0x0c900008
 80012d4:	04300002 	.word	0x04300002

080012d8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b09c      	sub	sp, #112	@ 0x70
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	f107 0318 	add.w	r3, r7, #24
 80012f4:	2244      	movs	r2, #68	@ 0x44
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f00a f9c4 	bl	800b686 <memset>
  if(adcHandle->Instance==ADC1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001306:	d146      	bne.n	8001396 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001308:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800130c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800130e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001312:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001314:	f107 0318 	add.w	r3, r7, #24
 8001318:	4618      	mov	r0, r3
 800131a:	f004 fee1 	bl	80060e0 <HAL_RCCEx_PeriphCLKConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001324:	f000 f9f5 	bl	8001712 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001328:	4b42      	ldr	r3, [pc, #264]	@ (8001434 <HAL_ADC_MspInit+0x15c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	4a41      	ldr	r2, [pc, #260]	@ (8001434 <HAL_ADC_MspInit+0x15c>)
 8001330:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001332:	4b40      	ldr	r3, [pc, #256]	@ (8001434 <HAL_ADC_MspInit+0x15c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10b      	bne.n	8001352 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800133a:	4b3f      	ldr	r3, [pc, #252]	@ (8001438 <HAL_ADC_MspInit+0x160>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a3e      	ldr	r2, [pc, #248]	@ (8001438 <HAL_ADC_MspInit+0x160>)
 8001340:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b3c      	ldr	r3, [pc, #240]	@ (8001438 <HAL_ADC_MspInit+0x160>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	4b39      	ldr	r3, [pc, #228]	@ (8001438 <HAL_ADC_MspInit+0x160>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4a38      	ldr	r2, [pc, #224]	@ (8001438 <HAL_ADC_MspInit+0x160>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135e:	4b36      	ldr	r3, [pc, #216]	@ (8001438 <HAL_ADC_MspInit+0x160>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 800136a:	f241 0302 	movw	r3, #4098	@ 0x1002
 800136e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001370:	2303      	movs	r3, #3
 8001372:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800137c:	4619      	mov	r1, r3
 800137e:	482f      	ldr	r0, [pc, #188]	@ (800143c <HAL_ADC_MspInit+0x164>)
 8001380:	f003 ff1a 	bl	80051b8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	2012      	movs	r0, #18
 800138a:	f003 fbae 	bl	8004aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800138e:	2012      	movs	r0, #18
 8001390:	f003 fbc5 	bl	8004b1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001394:	e04a      	b.n	800142c <HAL_ADC_MspInit+0x154>
  else if(adcHandle->Instance==ADC2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a29      	ldr	r2, [pc, #164]	@ (8001440 <HAL_ADC_MspInit+0x168>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d145      	bne.n	800142c <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013aa:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ac:	f107 0318 	add.w	r3, r7, #24
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 fe95 	bl	80060e0 <HAL_RCCEx_PeriphCLKConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 80013bc:	f000 f9a9 	bl	8001712 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001434 <HAL_ADC_MspInit+0x15c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001434 <HAL_ADC_MspInit+0x15c>)
 80013c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <HAL_ADC_MspInit+0x15c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d10b      	bne.n	80013ea <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013d2:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <HAL_ADC_MspInit+0x160>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d6:	4a18      	ldr	r2, [pc, #96]	@ (8001438 <HAL_ADC_MspInit+0x160>)
 80013d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013de:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <HAL_ADC_MspInit+0x160>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <HAL_ADC_MspInit+0x160>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <HAL_ADC_MspInit+0x160>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <HAL_ADC_MspInit+0x160>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8001402:	2341      	movs	r3, #65	@ 0x41
 8001404:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001406:	2303      	movs	r3, #3
 8001408:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001418:	f003 fece 	bl	80051b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800141c:	2200      	movs	r2, #0
 800141e:	2100      	movs	r1, #0
 8001420:	2012      	movs	r0, #18
 8001422:	f003 fb62 	bl	8004aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001426:	2012      	movs	r0, #18
 8001428:	f003 fb79 	bl	8004b1e <HAL_NVIC_EnableIRQ>
}
 800142c:	bf00      	nop
 800142e:	3770      	adds	r7, #112	@ 0x70
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000364 	.word	0x20000364
 8001438:	40021000 	.word	0x40021000
 800143c:	48000400 	.word	0x48000400
 8001440:	50000100 	.word	0x50000100

08001444 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800144a:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <MX_DMA_Init+0x50>)
 800144c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800144e:	4a11      	ldr	r2, [pc, #68]	@ (8001494 <MX_DMA_Init+0x50>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6493      	str	r3, [r2, #72]	@ 0x48
 8001456:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <MX_DMA_Init+0x50>)
 8001458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001462:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_DMA_Init+0x50>)
 8001464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001466:	4a0b      	ldr	r2, [pc, #44]	@ (8001494 <MX_DMA_Init+0x50>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6493      	str	r3, [r2, #72]	@ 0x48
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_DMA_Init+0x50>)
 8001470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	200b      	movs	r0, #11
 8001480:	f003 fb33 	bl	8004aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001484:	200b      	movs	r0, #11
 8001486:	f003 fb4a 	bl	8004b1e <HAL_NVIC_EnableIRQ>

}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000

08001498 <MX_GPIO_Init>:
     PA6   ------> SharedAnalog_PA6
     PA7   ------> OPAMP2_VINP
     PB1   ------> SharedAnalog_PB1
*/
void MX_GPIO_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	@ 0x28
 800149c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	4b45      	ldr	r3, [pc, #276]	@ (80015c4 <MX_GPIO_Init+0x12c>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	4a44      	ldr	r2, [pc, #272]	@ (80015c4 <MX_GPIO_Init+0x12c>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ba:	4b42      	ldr	r3, [pc, #264]	@ (80015c4 <MX_GPIO_Init+0x12c>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c6:	4b3f      	ldr	r3, [pc, #252]	@ (80015c4 <MX_GPIO_Init+0x12c>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ca:	4a3e      	ldr	r2, [pc, #248]	@ (80015c4 <MX_GPIO_Init+0x12c>)
 80014cc:	f043 0320 	orr.w	r3, r3, #32
 80014d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d2:	4b3c      	ldr	r3, [pc, #240]	@ (80015c4 <MX_GPIO_Init+0x12c>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	f003 0320 	and.w	r3, r3, #32
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b39      	ldr	r3, [pc, #228]	@ (80015c4 <MX_GPIO_Init+0x12c>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	4a38      	ldr	r2, [pc, #224]	@ (80015c4 <MX_GPIO_Init+0x12c>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ea:	4b36      	ldr	r3, [pc, #216]	@ (80015c4 <MX_GPIO_Init+0x12c>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	4b33      	ldr	r3, [pc, #204]	@ (80015c4 <MX_GPIO_Init+0x12c>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	4a32      	ldr	r2, [pc, #200]	@ (80015c4 <MX_GPIO_Init+0x12c>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001502:	4b30      	ldr	r3, [pc, #192]	@ (80015c4 <MX_GPIO_Init+0x12c>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	2110      	movs	r1, #16
 8001512:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001516:	f003 ffd1 	bl	80054bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2150      	movs	r1, #80	@ 0x50
 800151e:	482a      	ldr	r0, [pc, #168]	@ (80015c8 <MX_GPIO_Init+0x130>)
 8001520:	f003 ffcc 	bl	80054bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001524:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800152a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800152e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	4823      	ldr	r0, [pc, #140]	@ (80015c8 <MX_GPIO_Init+0x130>)
 800153c:	f003 fe3c 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001540:	2310      	movs	r3, #16
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800155a:	f003 fe2d 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800155e:	23c0      	movs	r3, #192	@ 0xc0
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001562:	2303      	movs	r3, #3
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001574:	f003 fe20 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001578:	2350      	movs	r3, #80	@ 0x50
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	480e      	ldr	r0, [pc, #56]	@ (80015c8 <MX_GPIO_Init+0x130>)
 8001590:	f003 fe12 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001594:	2302      	movs	r3, #2
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001598:	2303      	movs	r3, #3
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4809      	ldr	r0, [pc, #36]	@ (80015cc <MX_GPIO_Init+0x134>)
 80015a8:	f003 fe06 	bl	80051b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2028      	movs	r0, #40	@ 0x28
 80015b2:	f003 fa9a 	bl	8004aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015b6:	2028      	movs	r0, #40	@ 0x28
 80015b8:	f003 fab1 	bl	8004b1e <HAL_NVIC_EnableIRQ>

}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	@ 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000
 80015c8:	48000800 	.word	0x48000800
 80015cc:	48000400 	.word	0x48000400

080015d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d4:	f000 fd11 	bl	8001ffa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d8:	f000 f852 	bl	8001680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015dc:	f7ff ff5c 	bl	8001498 <MX_GPIO_Init>
  MX_DMA_Init();
 80015e0:	f7ff ff30 	bl	8001444 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80015e4:	f000 fc06 	bl	8001df4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80015e8:	f7ff fd24 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 80015ec:	f7ff fddc 	bl	80011a8 <MX_ADC2_Init>
  MX_TIM1_Init();
 80015f0:	f000 fa1c 	bl	8001a2c <MX_TIM1_Init>
  MX_TIM4_Init();
 80015f4:	f000 faf6 	bl	8001be4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
//  HAL_OPAMP_Start(&hopamp1);
//  HAL_OPAMP_Start(&hopamp2);
//  HAL_OPAMP_Start(&hopamp3);
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&aRxBuffer, 1);
 80015f8:	2201      	movs	r2, #1
 80015fa:	491a      	ldr	r1, [pc, #104]	@ (8001664 <main+0x94>)
 80015fc:	481a      	ldr	r0, [pc, #104]	@ (8001668 <main+0x98>)
 80015fe:	f006 fb89 	bl	8007d14 <HAL_UART_Receive_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001602:	217f      	movs	r1, #127	@ 0x7f
 8001604:	4819      	ldr	r0, [pc, #100]	@ (800166c <main+0x9c>)
 8001606:	f002 f9f1 	bl	80039ec <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800160a:	217f      	movs	r1, #127	@ 0x7f
 800160c:	4818      	ldr	r0, [pc, #96]	@ (8001670 <main+0xa0>)
 800160e:	f002 f9ed 	bl	80039ec <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 8001612:	4b16      	ldr	r3, [pc, #88]	@ (800166c <main+0x9c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2220      	movs	r2, #32
 8001618:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 800161a:	4b14      	ldr	r3, [pc, #80]	@ (800166c <main+0x9c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2204      	movs	r2, #4
 8001620:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 8001622:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <main+0xa0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2220      	movs	r2, #32
 8001628:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 800162a:	4810      	ldr	r0, [pc, #64]	@ (800166c <main+0x9c>)
 800162c:	f002 faf0 	bl	8003c10 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 8001630:	480f      	ldr	r0, [pc, #60]	@ (8001670 <main+0xa0>)
 8001632:	f002 fa3d 	bl	8003ab0 <HAL_ADCEx_InjectedStart>
  TIM1->ARR = 8000 - 1;
 8001636:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <main+0xa4>)
 8001638:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800163c:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->CCR4 = 8000 - 2;
 800163e:	4b0d      	ldr	r3, [pc, #52]	@ (8001674 <main+0xa4>)
 8001640:	f641 723e 	movw	r2, #7998	@ 0x1f3e
 8001644:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_Base_Start(&htim1);
 8001646:	480c      	ldr	r0, [pc, #48]	@ (8001678 <main+0xa8>)
 8001648:	f004 ff92 	bl	8006570 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800164c:	210c      	movs	r1, #12
 800164e:	480a      	ldr	r0, [pc, #40]	@ (8001678 <main+0xa8>)
 8001650:	f005 f852 	bl	80066f8 <HAL_TIM_PWM_Start>
//  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 3000);
//  HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
  //  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
//  HAL_COMP_Start(&hcomp1);
  HAL_TIMEx_HallSensor_Start_IT(&htim4);
 8001654:	4809      	ldr	r0, [pc, #36]	@ (800167c <main+0xac>)
 8001656:	f006 f929 	bl	80078ac <HAL_TIMEx_HallSensor_Start_IT>
  FDCAN_Config();
 800165a:	f008 fe29 	bl	800a2b0 <FDCAN_Config>
    //    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
    //    HAL_Delay(10);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 800165e:	f008 fdb4 	bl	800a1ca <userMain>
 8001662:	e7fc      	b.n	800165e <main+0x8e>
 8001664:	200004fc 	.word	0x200004fc
 8001668:	20000404 	.word	0x20000404
 800166c:	2000028c 	.word	0x2000028c
 8001670:	200002f8 	.word	0x200002f8
 8001674:	40012c00 	.word	0x40012c00
 8001678:	2000036c 	.word	0x2000036c
 800167c:	200003b8 	.word	0x200003b8

08001680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b094      	sub	sp, #80	@ 0x50
 8001684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001686:	f107 0318 	add.w	r3, r7, #24
 800168a:	2238      	movs	r2, #56	@ 0x38
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f009 fff9 	bl	800b686 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f003 ff3a 	bl	800551c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016b0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b2:	2302      	movs	r3, #2
 80016b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b6:	2303      	movs	r3, #3
 80016b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80016ba:	2303      	movs	r3, #3
 80016bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016be:	2328      	movs	r3, #40	@ 0x28
 80016c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016c6:	2302      	movs	r3, #2
 80016c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 ffd6 	bl	8005684 <HAL_RCC_OscConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80016de:	f000 f818 	bl	8001712 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e2:	230f      	movs	r3, #15
 80016e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e6:	2303      	movs	r3, #3
 80016e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2104      	movs	r1, #4
 80016fa:	4618      	mov	r0, r3
 80016fc:	f004 fad4 	bl	8005ca8 <HAL_RCC_ClockConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001706:	f000 f804 	bl	8001712 <Error_Handler>
  }
}
 800170a:	bf00      	nop
 800170c:	3750      	adds	r7, #80	@ 0x50
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001716:	b672      	cpsid	i
}
 8001718:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800171a:	bf00      	nop
 800171c:	e7fd      	b.n	800171a <Error_Handler+0x8>
	...

08001720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <HAL_MspInit+0x44>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172a:	4a0e      	ldr	r2, [pc, #56]	@ (8001764 <HAL_MspInit+0x44>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6613      	str	r3, [r2, #96]	@ 0x60
 8001732:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <HAL_MspInit+0x44>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <HAL_MspInit+0x44>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001742:	4a08      	ldr	r2, [pc, #32]	@ (8001764 <HAL_MspInit+0x44>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001748:	6593      	str	r3, [r2, #88]	@ 0x58
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_MspInit+0x44>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001756:	f003 ff85 	bl	8005664 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <NMI_Handler+0x4>

08001770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <HardFault_Handler+0x4>

08001778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <MemManage_Handler+0x4>

08001780 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <UsageFault_Handler+0x4>

08001790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017be:	f000 fc6f 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <DMA1_Channel1_IRQHandler+0x10>)
 80017ce:	f003 fba4 	bl	8004f1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000498 	.word	0x20000498

080017dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017e0:	4803      	ldr	r0, [pc, #12]	@ (80017f0 <ADC1_2_IRQHandler+0x14>)
 80017e2:	f001 f851 	bl	8002888 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80017e6:	4803      	ldr	r0, [pc, #12]	@ (80017f4 <ADC1_2_IRQHandler+0x18>)
 80017e8:	f001 f84e 	bl	8002888 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2000028c 	.word	0x2000028c
 80017f4:	200002f8 	.word	0x200002f8

080017f8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017fc:	4802      	ldr	r0, [pc, #8]	@ (8001808 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80017fe:	f005 f87b 	bl	80068f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000036c 	.word	0x2000036c

0800180c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001812:	f005 f871 	bl	80068f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000036c 	.word	0x2000036c

08001820 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <TIM1_CC_IRQHandler+0x10>)
 8001826:	f005 f867 	bl	80068f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2000036c 	.word	0x2000036c

08001834 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001838:	4802      	ldr	r0, [pc, #8]	@ (8001844 <TIM4_IRQHandler+0x10>)
 800183a:	f005 f85d 	bl	80068f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200003b8 	.word	0x200003b8

08001848 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800184c:	4802      	ldr	r0, [pc, #8]	@ (8001858 <USART3_IRQHandler+0x10>)
 800184e:	f006 fb2d 	bl	8007eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000404 	.word	0x20000404

0800185c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8001860:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001864:	f003 fe42 	bl	80054ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
 8001868:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800186c:	f003 fe3e 	bl	80054ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button3_Pin);
 8001870:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001874:	f003 fe3a 	bl	80054ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}

0800187c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return 1;
 8001880:	2301      	movs	r3, #1
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_kill>:

int _kill(int pid, int sig)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001896:	f009 ff49 	bl	800b72c <__errno>
 800189a:	4603      	mov	r3, r0
 800189c:	2216      	movs	r2, #22
 800189e:	601a      	str	r2, [r3, #0]
  return -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_exit>:

void _exit (int status)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ffe7 	bl	800188c <_kill>
  while (1) {}    /* Make sure we hang here */
 80018be:	bf00      	nop
 80018c0:	e7fd      	b.n	80018be <_exit+0x12>

080018c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e00a      	b.n	80018ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018d4:	f3af 8000 	nop.w
 80018d8:	4601      	mov	r1, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	60ba      	str	r2, [r7, #8]
 80018e0:	b2ca      	uxtb	r2, r1
 80018e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	3301      	adds	r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	dbf0      	blt.n	80018d4 <_read+0x12>
  }

  return len;
 80018f2:	687b      	ldr	r3, [r7, #4]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e009      	b.n	8001922 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	60ba      	str	r2, [r7, #8]
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	3301      	adds	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	429a      	cmp	r2, r3
 8001928:	dbf1      	blt.n	800190e <_write+0x12>
  }
  return len;
 800192a:	687b      	ldr	r3, [r7, #4]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_close>:

int _close(int file)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800195c:	605a      	str	r2, [r3, #4]
  return 0;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_isatty>:

int _isatty(int file)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001974:	2301      	movs	r3, #1
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a4:	4a14      	ldr	r2, [pc, #80]	@ (80019f8 <_sbrk+0x5c>)
 80019a6:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <_sbrk+0x60>)
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b0:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <_sbrk+0x64>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	@ (8001a04 <_sbrk+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019be:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d207      	bcs.n	80019dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019cc:	f009 feae 	bl	800b72c <__errno>
 80019d0:	4603      	mov	r3, r0
 80019d2:	220c      	movs	r2, #12
 80019d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	e009      	b.n	80019f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e2:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a05      	ldr	r2, [pc, #20]	@ (8001a00 <_sbrk+0x64>)
 80019ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20008000 	.word	0x20008000
 80019fc:	00000400 	.word	0x00000400
 8001a00:	20000368 	.word	0x20000368
 8001a04:	20000668 	.word	0x20000668

08001a08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <SystemInit+0x20>)
 8001a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a12:	4a05      	ldr	r2, [pc, #20]	@ (8001a28 <SystemInit+0x20>)
 8001a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b09c      	sub	sp, #112	@ 0x70
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a32:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a40:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a4c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
 8001a5c:	615a      	str	r2, [r3, #20]
 8001a5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	2234      	movs	r2, #52	@ 0x34
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f009 fe0d 	bl	800b686 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001a6e:	4a5c      	ldr	r2, [pc, #368]	@ (8001be0 <MX_TIM1_Init+0x1b4>)
 8001a70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001a72:	4b5a      	ldr	r3, [pc, #360]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001a78:	4b58      	ldr	r3, [pc, #352]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8001a7e:	4b57      	ldr	r3, [pc, #348]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001a80:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001a84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001a86:	4b55      	ldr	r3, [pc, #340]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001a88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001a8e:	4b53      	ldr	r3, [pc, #332]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a94:	4b51      	ldr	r3, [pc, #324]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a9a:	4850      	ldr	r0, [pc, #320]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001a9c:	f004 fd10 	bl	80064c0 <HAL_TIM_Base_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001aa6:	f7ff fe34 	bl	8001712 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aae:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ab0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4849      	ldr	r0, [pc, #292]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001ab8:	f005 f982 	bl	8006dc0 <HAL_TIM_ConfigClockSource>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001ac2:	f7ff fe26 	bl	8001712 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ac6:	4845      	ldr	r0, [pc, #276]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001ac8:	f004 fdb4 	bl	8006634 <HAL_TIM_PWM_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001ad2:	f7ff fe1e 	bl	8001712 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001ad6:	2370      	movs	r3, #112	@ 0x70
 8001ad8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ae2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	483c      	ldr	r0, [pc, #240]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001aea:	f005 ff6f 	bl	80079cc <HAL_TIMEx_MasterConfigSynchronization>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001af4:	f7ff fe0d 	bl	8001712 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af8:	2360      	movs	r3, #96	@ 0x60
 8001afa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b00:	2300      	movs	r3, #0
 8001b02:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b04:	2300      	movs	r3, #0
 8001b06:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b10:	2300      	movs	r3, #0
 8001b12:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b18:	2200      	movs	r2, #0
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	482f      	ldr	r0, [pc, #188]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001b1e:	f005 f83b 	bl	8006b98 <HAL_TIM_PWM_ConfigChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001b28:	f7ff fdf3 	bl	8001712 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b2c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b30:	2204      	movs	r2, #4
 8001b32:	4619      	mov	r1, r3
 8001b34:	4829      	ldr	r0, [pc, #164]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001b36:	f005 f82f 	bl	8006b98 <HAL_TIM_PWM_ConfigChannel>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001b40:	f7ff fde7 	bl	8001712 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b44:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b48:	2208      	movs	r2, #8
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4823      	ldr	r0, [pc, #140]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001b4e:	f005 f823 	bl	8006b98 <HAL_TIM_PWM_ConfigChannel>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001b58:	f7ff fddb 	bl	8001712 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001b5c:	2370      	movs	r3, #112	@ 0x70
 8001b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8001b60:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8001b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b66:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	481b      	ldr	r0, [pc, #108]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001b70:	f005 f812 	bl	8006b98 <HAL_TIM_PWM_ConfigChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8001b7a:	f7ff fdca 	bl	8001712 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 120;
 8001b8a:	2378      	movs	r3, #120	@ 0x78
 8001b8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001b8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 2;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ba6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4807      	ldr	r0, [pc, #28]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001bbe:	f005 ff87 	bl	8007ad0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 8001bc8:	f7ff fda3 	bl	8001712 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bcc:	4803      	ldr	r0, [pc, #12]	@ (8001bdc <MX_TIM1_Init+0x1b0>)
 8001bce:	f000 f8a9 	bl	8001d24 <HAL_TIM_MspPostInit>

}
 8001bd2:	bf00      	nop
 8001bd4:	3770      	adds	r7, #112	@ 0x70
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2000036c 	.word	0x2000036c
 8001be0:	40012c00 	.word	0x40012c00

08001be4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c02:	4b1d      	ldr	r3, [pc, #116]	@ (8001c78 <MX_TIM4_Init+0x94>)
 8001c04:	4a1d      	ldr	r2, [pc, #116]	@ (8001c7c <MX_TIM4_Init+0x98>)
 8001c06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <MX_TIM4_Init+0x94>)
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <MX_TIM4_Init+0x94>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c14:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <MX_TIM4_Init+0x94>)
 8001c16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <MX_TIM4_Init+0x94>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <MX_TIM4_Init+0x94>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c28:	4813      	ldr	r0, [pc, #76]	@ (8001c78 <MX_TIM4_Init+0x94>)
 8001c2a:	f004 fc49 	bl	80064c0 <HAL_TIM_Base_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001c34:	f7ff fd6d 	bl	8001712 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c3e:	f107 0310 	add.w	r3, r7, #16
 8001c42:	4619      	mov	r1, r3
 8001c44:	480c      	ldr	r0, [pc, #48]	@ (8001c78 <MX_TIM4_Init+0x94>)
 8001c46:	f005 f8bb 	bl	8006dc0 <HAL_TIM_ConfigClockSource>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c50:	f7ff fd5f 	bl	8001712 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <MX_TIM4_Init+0x94>)
 8001c62:	f005 feb3 	bl	80079cc <HAL_TIMEx_MasterConfigSynchronization>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c6c:	f7ff fd51 	bl	8001712 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	200003b8 	.word	0x200003b8
 8001c7c:	40000800 	.word	0x40000800

08001c80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a22      	ldr	r2, [pc, #136]	@ (8001d18 <HAL_TIM_Base_MspInit+0x98>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d124      	bne.n	8001cdc <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c92:	4b22      	ldr	r3, [pc, #136]	@ (8001d1c <HAL_TIM_Base_MspInit+0x9c>)
 8001c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c96:	4a21      	ldr	r2, [pc, #132]	@ (8001d1c <HAL_TIM_Base_MspInit+0x9c>)
 8001c98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d1c <HAL_TIM_Base_MspInit+0x9c>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	2018      	movs	r0, #24
 8001cb0:	f002 ff1b 	bl	8004aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001cb4:	2018      	movs	r0, #24
 8001cb6:	f002 ff32 	bl	8004b1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2019      	movs	r0, #25
 8001cc0:	f002 ff13 	bl	8004aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001cc4:	2019      	movs	r0, #25
 8001cc6:	f002 ff2a 	bl	8004b1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	201b      	movs	r0, #27
 8001cd0:	f002 ff0b 	bl	8004aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001cd4:	201b      	movs	r0, #27
 8001cd6:	f002 ff22 	bl	8004b1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001cda:	e018      	b.n	8001d0e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM4)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d20 <HAL_TIM_Base_MspInit+0xa0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d113      	bne.n	8001d0e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <HAL_TIM_Base_MspInit+0x9c>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cea:	4a0c      	ldr	r2, [pc, #48]	@ (8001d1c <HAL_TIM_Base_MspInit+0x9c>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <HAL_TIM_Base_MspInit+0x9c>)
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	201e      	movs	r0, #30
 8001d04:	f002 fef1 	bl	8004aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d08:	201e      	movs	r0, #30
 8001d0a:	f002 ff08 	bl	8004b1e <HAL_NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40012c00 	.word	0x40012c00
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40000800 	.word	0x40000800

08001d24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	@ 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a29      	ldr	r2, [pc, #164]	@ (8001de8 <HAL_TIM_MspPostInit+0xc4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d14b      	bne.n	8001dde <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	4b29      	ldr	r3, [pc, #164]	@ (8001dec <HAL_TIM_MspPostInit+0xc8>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4a:	4a28      	ldr	r2, [pc, #160]	@ (8001dec <HAL_TIM_MspPostInit+0xc8>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d52:	4b26      	ldr	r3, [pc, #152]	@ (8001dec <HAL_TIM_MspPostInit+0xc8>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	4b23      	ldr	r3, [pc, #140]	@ (8001dec <HAL_TIM_MspPostInit+0xc8>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d62:	4a22      	ldr	r2, [pc, #136]	@ (8001dec <HAL_TIM_MspPostInit+0xc8>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d6a:	4b20      	ldr	r3, [pc, #128]	@ (8001dec <HAL_TIM_MspPostInit+0xc8>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d76:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d88:	2306      	movs	r3, #6
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4817      	ldr	r0, [pc, #92]	@ (8001df0 <HAL_TIM_MspPostInit+0xcc>)
 8001d94:	f003 fa10 	bl	80051b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001daa:	2304      	movs	r3, #4
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	480e      	ldr	r0, [pc, #56]	@ (8001df0 <HAL_TIM_MspPostInit+0xcc>)
 8001db6:	f003 f9ff 	bl	80051b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001dba:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001dcc:	2306      	movs	r3, #6
 8001dce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dda:	f003 f9ed 	bl	80051b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dde:	bf00      	nop
 8001de0:	3728      	adds	r7, #40	@ 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40012c00 	.word	0x40012c00
 8001dec:	40021000 	.word	0x40021000
 8001df0:	48000400 	.word	0x48000400

08001df4 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001df8:	4b22      	ldr	r3, [pc, #136]	@ (8001e84 <MX_USART3_UART_Init+0x90>)
 8001dfa:	4a23      	ldr	r2, [pc, #140]	@ (8001e88 <MX_USART3_UART_Init+0x94>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001dfe:	4b21      	ldr	r3, [pc, #132]	@ (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e00:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001e04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b1f      	ldr	r3, [pc, #124]	@ (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e2a:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e30:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e36:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e3c:	4811      	ldr	r0, [pc, #68]	@ (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e3e:	f005 ff19 	bl	8007c74 <HAL_UART_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e48:	f7ff fc63 	bl	8001712 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	480d      	ldr	r0, [pc, #52]	@ (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e50:	f008 f823 	bl	8009e9a <HAL_UARTEx_SetTxFifoThreshold>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e5a:	f7ff fc5a 	bl	8001712 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4808      	ldr	r0, [pc, #32]	@ (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e62:	f008 f858 	bl	8009f16 <HAL_UARTEx_SetRxFifoThreshold>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e6c:	f7ff fc51 	bl	8001712 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e70:	4804      	ldr	r0, [pc, #16]	@ (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e72:	f007 ffd9 	bl	8009e28 <HAL_UARTEx_DisableFifoMode>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001e7c:	f7ff fc49 	bl	8001712 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000404 	.word	0x20000404
 8001e88:	40004800 	.word	0x40004800

08001e8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b09a      	sub	sp, #104	@ 0x68
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ea4:	f107 0310 	add.w	r3, r7, #16
 8001ea8:	2244      	movs	r2, #68	@ 0x44
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f009 fbea 	bl	800b686 <memset>
  if(uartHandle->Instance==USART3)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a37      	ldr	r2, [pc, #220]	@ (8001f94 <HAL_UART_MspInit+0x108>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d167      	bne.n	8001f8c <HAL_UART_MspInit+0x100>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f004 f909 	bl	80060e0 <HAL_RCCEx_PeriphCLKConfig>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ed4:	f7ff fc1d 	bl	8001712 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8001f98 <HAL_UART_MspInit+0x10c>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001edc:	4a2e      	ldr	r2, [pc, #184]	@ (8001f98 <HAL_UART_MspInit+0x10c>)
 8001ede:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f98 <HAL_UART_MspInit+0x10c>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef0:	4b29      	ldr	r3, [pc, #164]	@ (8001f98 <HAL_UART_MspInit+0x10c>)
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef4:	4a28      	ldr	r2, [pc, #160]	@ (8001f98 <HAL_UART_MspInit+0x10c>)
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001efc:	4b26      	ldr	r3, [pc, #152]	@ (8001f98 <HAL_UART_MspInit+0x10c>)
 8001efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f08:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f0c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f1a:	2307      	movs	r3, #7
 8001f1c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f22:	4619      	mov	r1, r3
 8001f24:	481d      	ldr	r0, [pc, #116]	@ (8001f9c <HAL_UART_MspInit+0x110>)
 8001f26:	f003 f947 	bl	80051b8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa0 <HAL_UART_MspInit+0x114>)
 8001f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa4 <HAL_UART_MspInit+0x118>)
 8001f2e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <HAL_UART_MspInit+0x114>)
 8001f32:	221d      	movs	r2, #29
 8001f34:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa0 <HAL_UART_MspInit+0x114>)
 8001f38:	2210      	movs	r2, #16
 8001f3a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3c:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <HAL_UART_MspInit+0x114>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f42:	4b17      	ldr	r3, [pc, #92]	@ (8001fa0 <HAL_UART_MspInit+0x114>)
 8001f44:	2280      	movs	r2, #128	@ 0x80
 8001f46:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f48:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <HAL_UART_MspInit+0x114>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f4e:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <HAL_UART_MspInit+0x114>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001f54:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <HAL_UART_MspInit+0x114>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <HAL_UART_MspInit+0x114>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001f60:	480f      	ldr	r0, [pc, #60]	@ (8001fa0 <HAL_UART_MspInit+0x114>)
 8001f62:	f002 fdf7 	bl	8004b54 <HAL_DMA_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001f6c:	f7ff fbd1 	bl	8001712 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa0 <HAL_UART_MspInit+0x114>)
 8001f74:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001f76:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <HAL_UART_MspInit+0x114>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2027      	movs	r0, #39	@ 0x27
 8001f82:	f002 fdb2 	bl	8004aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f86:	2027      	movs	r0, #39	@ 0x27
 8001f88:	f002 fdc9 	bl	8004b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3768      	adds	r7, #104	@ 0x68
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40004800 	.word	0x40004800
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	48000400 	.word	0x48000400
 8001fa0:	20000498 	.word	0x20000498
 8001fa4:	40020008 	.word	0x40020008

08001fa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fa8:	480d      	ldr	r0, [pc, #52]	@ (8001fe0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001faa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fac:	f7ff fd2c 	bl	8001a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb0:	480c      	ldr	r0, [pc, #48]	@ (8001fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fb2:	490d      	ldr	r1, [pc, #52]	@ (8001fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001fec <LoopForever+0xe>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001fb8:	e002      	b.n	8001fc0 <LoopCopyDataInit>

08001fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fbe:	3304      	adds	r3, #4

08001fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc4:	d3f9      	bcc.n	8001fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ff4 <LoopForever+0x16>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fcc:	e001      	b.n	8001fd2 <LoopFillZerobss>

08001fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd0:	3204      	adds	r2, #4

08001fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd4:	d3fb      	bcc.n	8001fce <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001fd6:	f009 fbaf 	bl	800b738 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fda:	f7ff faf9 	bl	80015d0 <main>

08001fde <LoopForever>:

LoopForever:
    b LoopForever
 8001fde:	e7fe      	b.n	8001fde <LoopForever>
  ldr   r0, =_estack
 8001fe0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe8:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8001fec:	0800f2d8 	.word	0x0800f2d8
  ldr r2, =_sbss
 8001ff0:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8001ff4:	20000664 	.word	0x20000664

08001ff8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ff8:	e7fe      	b.n	8001ff8 <COMP1_2_3_IRQHandler>

08001ffa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002004:	2003      	movs	r0, #3
 8002006:	f002 fd65 	bl	8004ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800200a:	200f      	movs	r0, #15
 800200c:	f000 f80e 	bl	800202c <HAL_InitTick>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	71fb      	strb	r3, [r7, #7]
 800201a:	e001      	b.n	8002020 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800201c:	f7ff fb80 	bl	8001720 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002020:	79fb      	ldrb	r3, [r7, #7]

}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002038:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <HAL_InitTick+0x68>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d022      	beq.n	8002086 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002040:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <HAL_InitTick+0x6c>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <HAL_InitTick+0x68>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800204c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002050:	fbb2 f3f3 	udiv	r3, r2, r3
 8002054:	4618      	mov	r0, r3
 8002056:	f002 fd70 	bl	8004b3a <HAL_SYSTICK_Config>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10f      	bne.n	8002080 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b0f      	cmp	r3, #15
 8002064:	d809      	bhi.n	800207a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002066:	2200      	movs	r2, #0
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	f04f 30ff 	mov.w	r0, #4294967295
 800206e:	f002 fd3c 	bl	8004aea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002072:	4a0a      	ldr	r2, [pc, #40]	@ (800209c <HAL_InitTick+0x70>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	e007      	b.n	800208a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	e004      	b.n	800208a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
 8002084:	e001      	b.n	800208a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800208a:	7bfb      	ldrb	r3, [r7, #15]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000008 	.word	0x20000008
 8002098:	20000000 	.word	0x20000000
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a4:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <HAL_IncTick+0x1c>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <HAL_IncTick+0x20>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4413      	add	r3, r2
 80020ae:	4a03      	ldr	r2, [pc, #12]	@ (80020bc <HAL_IncTick+0x1c>)
 80020b0:	6013      	str	r3, [r2, #0]
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	200004f8 	.word	0x200004f8
 80020c0:	20000008 	.word	0x20000008

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <HAL_GetTick+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	200004f8 	.word	0x200004f8

080020dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	609a      	str	r2, [r3, #8]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	609a      	str	r2, [r3, #8]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3360      	adds	r3, #96	@ 0x60
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b08      	ldr	r3, [pc, #32]	@ (8002188 <LL_ADC_SetOffset+0x44>)
 8002166:	4013      	ands	r3, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	4313      	orrs	r3, r2
 8002174:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800217c:	bf00      	nop
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	03fff000 	.word	0x03fff000

0800218c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3360      	adds	r3, #96	@ 0x60
 800219a:	461a      	mov	r2, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3360      	adds	r3, #96	@ 0x60
 80021c8:	461a      	mov	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	431a      	orrs	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021e2:	bf00      	nop
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b087      	sub	sp, #28
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3360      	adds	r3, #96	@ 0x60
 80021fe:	461a      	mov	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	431a      	orrs	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002218:	bf00      	nop
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3360      	adds	r3, #96	@ 0x60
 8002234:	461a      	mov	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	431a      	orrs	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800224e:	bf00      	nop
 8002250:	371c      	adds	r7, #28
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	615a      	str	r2, [r3, #20]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b087      	sub	sp, #28
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3330      	adds	r3, #48	@ 0x30
 80022b6:	461a      	mov	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	4413      	add	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	211f      	movs	r1, #31
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	401a      	ands	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	f003 011f 	and.w	r1, r3, #31
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	431a      	orrs	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022f2:	bf00      	nop
 80022f4:	371c      	adds	r7, #28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3314      	adds	r3, #20
 8002334:	461a      	mov	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	0e5b      	lsrs	r3, r3, #25
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	4413      	add	r3, r2
 8002342:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	0d1b      	lsrs	r3, r3, #20
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	2107      	movs	r1, #7
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	401a      	ands	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	0d1b      	lsrs	r3, r3, #20
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	431a      	orrs	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800236e:	bf00      	nop
 8002370:	371c      	adds	r7, #28
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002394:	43db      	mvns	r3, r3
 8002396:	401a      	ands	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f003 0318 	and.w	r3, r3, #24
 800239e:	4908      	ldr	r1, [pc, #32]	@ (80023c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023a0:	40d9      	lsrs	r1, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	400b      	ands	r3, r1
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	431a      	orrs	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	0007ffff 	.word	0x0007ffff

080023c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 031f 	and.w	r3, r3, #31
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800240c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6093      	str	r3, [r2, #8]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002434:	d101      	bne.n	800243a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002458:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800245c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002484:	d101      	bne.n	800248a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024d4:	f043 0202 	orr.w	r2, r3, #2
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <LL_ADC_IsEnabled+0x18>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <LL_ADC_IsEnabled+0x1a>
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b02      	cmp	r3, #2
 8002520:	d101      	bne.n	8002526 <LL_ADC_IsDisableOngoing+0x18>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <LL_ADC_IsDisableOngoing+0x1a>
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b04      	cmp	r3, #4
 8002546:	d101      	bne.n	800254c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b08      	cmp	r3, #8
 800256c:	d101      	bne.n	8002572 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b089      	sub	sp, #36	@ 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e167      	b.n	800286a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d109      	bne.n	80025bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7fe fe95 	bl	80012d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff2d 	bl	8002420 <LL_ADC_IsDeepPowerDownEnabled>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff13 	bl	80023fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff ff48 	bl	8002470 <LL_ADC_IsInternalRegulatorEnabled>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d115      	bne.n	8002612 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff ff2c 	bl	8002448 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025f0:	4ba0      	ldr	r3, [pc, #640]	@ (8002874 <HAL_ADC_Init+0x2f4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	099b      	lsrs	r3, r3, #6
 80025f6:	4aa0      	ldr	r2, [pc, #640]	@ (8002878 <HAL_ADC_Init+0x2f8>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	099b      	lsrs	r3, r3, #6
 80025fe:	3301      	adds	r3, #1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002604:	e002      	b.n	800260c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3b01      	subs	r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f9      	bne.n	8002606 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ff2a 	bl	8002470 <LL_ADC_IsInternalRegulatorEnabled>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10d      	bne.n	800263e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002626:	f043 0210 	orr.w	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ff76 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 8002648:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 8100 	bne.w	8002858 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 80fc 	bne.w	8002858 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002664:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002668:	f043 0202 	orr.w	r2, r3, #2
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff37 	bl	80024e8 <LL_ADC_IsEnabled>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d111      	bne.n	80026a4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002680:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002684:	f7ff ff30 	bl	80024e8 <LL_ADC_IsEnabled>
 8002688:	4604      	mov	r4, r0
 800268a:	487c      	ldr	r0, [pc, #496]	@ (800287c <HAL_ADC_Init+0x2fc>)
 800268c:	f7ff ff2c 	bl	80024e8 <LL_ADC_IsEnabled>
 8002690:	4603      	mov	r3, r0
 8002692:	4323      	orrs	r3, r4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d105      	bne.n	80026a4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4619      	mov	r1, r3
 800269e:	4878      	ldr	r0, [pc, #480]	@ (8002880 <HAL_ADC_Init+0x300>)
 80026a0:	f7ff fd1c 	bl	80020dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7f5b      	ldrb	r3, [r3, #29]
 80026a8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026b4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026ba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026c2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d106      	bne.n	80026e0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d6:	3b01      	subs	r3, #1
 80026d8:	045b      	lsls	r3, r3, #17
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d009      	beq.n	80026fc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ec:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	4b60      	ldr	r3, [pc, #384]	@ (8002884 <HAL_ADC_Init+0x304>)
 8002704:	4013      	ands	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	69b9      	ldr	r1, [r7, #24]
 800270c:	430b      	orrs	r3, r1
 800270e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff ff15 	bl	800255a <LL_ADC_INJ_IsConversionOngoing>
 8002730:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d16d      	bne.n	8002814 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d16a      	bne.n	8002814 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002742:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800274a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800275a:	f023 0302 	bic.w	r3, r3, #2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	69b9      	ldr	r1, [r7, #24]
 8002764:	430b      	orrs	r3, r1
 8002766:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d017      	beq.n	80027a0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800277e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002788:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800278c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6911      	ldr	r1, [r2, #16]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	430b      	orrs	r3, r1
 800279a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800279e:	e013      	b.n	80027c8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80027ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027c4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d118      	bne.n	8002804 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80027dc:	f023 0304 	bic.w	r3, r3, #4
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027e8:	4311      	orrs	r1, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80027ee:	4311      	orrs	r1, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027f4:	430a      	orrs	r2, r1
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	611a      	str	r2, [r3, #16]
 8002802:	e007      	b.n	8002814 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d10c      	bne.n	8002836 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	f023 010f 	bic.w	r1, r3, #15
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	1e5a      	subs	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	631a      	str	r2, [r3, #48]	@ 0x30
 8002834:	e007      	b.n	8002846 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 020f 	bic.w	r2, r2, #15
 8002844:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284a:	f023 0303 	bic.w	r3, r3, #3
 800284e:	f043 0201 	orr.w	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002856:	e007      	b.n	8002868 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285c:	f043 0210 	orr.w	r2, r3, #16
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002868:	7ffb      	ldrb	r3, [r7, #31]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3724      	adds	r7, #36	@ 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd90      	pop	{r4, r7, pc}
 8002872:	bf00      	nop
 8002874:	20000000 	.word	0x20000000
 8002878:	053e2d63 	.word	0x053e2d63
 800287c:	50000100 	.word	0x50000100
 8002880:	50000300 	.word	0x50000300
 8002884:	fff04007 	.word	0xfff04007

08002888 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	@ 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028a4:	4883      	ldr	r0, [pc, #524]	@ (8002ab4 <HAL_ADC_IRQHandler+0x22c>)
 80028a6:	f7ff fd8d 	bl	80023c4 <LL_ADC_GetMultimode>
 80028aa:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d017      	beq.n	80028e6 <HAL_ADC_IRQHandler+0x5e>
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d012      	beq.n	80028e6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f001 fa9d 	bl	8003e18 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2202      	movs	r2, #2
 80028e4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d004      	beq.n	80028fa <HAL_ADC_IRQHandler+0x72>
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8085 	beq.w	8002a10 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d07f      	beq.n	8002a10 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b00      	cmp	r3, #0
 800291a:	d105      	bne.n	8002928 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002920:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fca7 	bl	8002280 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d064      	beq.n	8002a02 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a5e      	ldr	r2, [pc, #376]	@ (8002ab8 <HAL_ADC_IRQHandler+0x230>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d002      	beq.n	8002948 <HAL_ADC_IRQHandler+0xc0>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	e001      	b.n	800294c <HAL_ADC_IRQHandler+0xc4>
 8002948:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	4293      	cmp	r3, r2
 8002952:	d008      	beq.n	8002966 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b05      	cmp	r3, #5
 800295e:	d002      	beq.n	8002966 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2b09      	cmp	r3, #9
 8002964:	d104      	bne.n	8002970 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	623b      	str	r3, [r7, #32]
 800296e:	e00d      	b.n	800298c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a50      	ldr	r2, [pc, #320]	@ (8002ab8 <HAL_ADC_IRQHandler+0x230>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d002      	beq.n	8002980 <HAL_ADC_IRQHandler+0xf8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	e001      	b.n	8002984 <HAL_ADC_IRQHandler+0xfc>
 8002980:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002984:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d135      	bne.n	8002a02 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d12e      	bne.n	8002a02 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fdc3 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d11a      	bne.n	80029ea <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 020c 	bic.w	r2, r2, #12
 80029c2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d112      	bne.n	8002a02 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e0:	f043 0201 	orr.w	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029e8:	e00b      	b.n	8002a02 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ee:	f043 0210 	orr.w	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f95a 	bl	8002cbc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	220c      	movs	r2, #12
 8002a0e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d004      	beq.n	8002a24 <HAL_ADC_IRQHandler+0x19c>
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 809e 	beq.w	8002b6c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8098 	beq.w	8002b6c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fc50 	bl	80022fe <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002a5e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fc0b 	bl	8002280 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a6a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a11      	ldr	r2, [pc, #68]	@ (8002ab8 <HAL_ADC_IRQHandler+0x230>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d002      	beq.n	8002a7c <HAL_ADC_IRQHandler+0x1f4>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	e001      	b.n	8002a80 <HAL_ADC_IRQHandler+0x1f8>
 8002a7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d008      	beq.n	8002a9a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b06      	cmp	r3, #6
 8002a92:	d002      	beq.n	8002a9a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2b07      	cmp	r3, #7
 8002a98:	d104      	bne.n	8002aa4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	623b      	str	r3, [r7, #32]
 8002aa2:	e011      	b.n	8002ac8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a03      	ldr	r2, [pc, #12]	@ (8002ab8 <HAL_ADC_IRQHandler+0x230>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d006      	beq.n	8002abc <HAL_ADC_IRQHandler+0x234>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	e005      	b.n	8002ac0 <HAL_ADC_IRQHandler+0x238>
 8002ab4:	50000300 	.word	0x50000300
 8002ab8:	50000100 	.word	0x50000100
 8002abc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ac0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d047      	beq.n	8002b5e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <HAL_ADC_IRQHandler+0x260>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d03f      	beq.n	8002b5e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d13a      	bne.n	8002b5e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af2:	2b40      	cmp	r3, #64	@ 0x40
 8002af4:	d133      	bne.n	8002b5e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d12e      	bne.n	8002b5e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fd28 	bl	800255a <LL_ADC_INJ_IsConversionOngoing>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d11a      	bne.n	8002b46 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b1e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d112      	bne.n	8002b5e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b44:	e00b      	b.n	8002b5e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4a:	f043 0210 	orr.w	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b56:	f043 0201 	orr.w	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f007 fb46 	bl	800a1f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2260      	movs	r2, #96	@ 0x60
 8002b6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d011      	beq.n	8002b9a <HAL_ADC_IRQHandler+0x312>
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00c      	beq.n	8002b9a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b84:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f89f 	bl	8002cd0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2280      	movs	r2, #128	@ 0x80
 8002b98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <HAL_ADC_IRQHandler+0x342>
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f001 f918 	bl	8003df0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bc8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d012      	beq.n	8002bfa <HAL_ADC_IRQHandler+0x372>
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00d      	beq.n	8002bfa <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f001 f90a 	bl	8003e04 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bf8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d036      	beq.n	8002c72 <HAL_ADC_IRQHandler+0x3ea>
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d031      	beq.n	8002c72 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002c16:	2301      	movs	r3, #1
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c1a:	e014      	b.n	8002c46 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c22:	4825      	ldr	r0, [pc, #148]	@ (8002cb8 <HAL_ADC_IRQHandler+0x430>)
 8002c24:	f7ff fbdc 	bl	80023e0 <LL_ADC_GetMultiDMATransfer>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c32:	e008      	b.n	8002c46 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002c42:	2301      	movs	r3, #1
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10e      	bne.n	8002c6a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c50:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5c:	f043 0202 	orr.w	r2, r3, #2
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f83d 	bl	8002ce4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2210      	movs	r2, #16
 8002c70:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d018      	beq.n	8002cae <HAL_ADC_IRQHandler+0x426>
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d013      	beq.n	8002cae <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c96:	f043 0208 	orr.w	r2, r3, #8
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ca6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f001 f897 	bl	8003ddc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002cae:	bf00      	nop
 8002cb0:	3728      	adds	r7, #40	@ 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	50000300 	.word	0x50000300

08002cbc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b0b6      	sub	sp, #216	@ 0xd8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x22>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e3c8      	b.n	80034ac <HAL_ADC_ConfigChannel+0x7b4>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fc04 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f040 83ad 	bne.w	800348e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	f7ff fab0 	bl	80022a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fbf2 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 8002d50:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fbfe 	bl	800255a <LL_ADC_INJ_IsConversionOngoing>
 8002d5e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 81d9 	bne.w	800311e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f040 81d4 	bne.w	800311e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d7e:	d10f      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f7ff faca 	bl	8002324 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fa5e 	bl	800225a <LL_ADC_SetSamplingTimeCommonConfig>
 8002d9e:	e00e      	b.n	8002dbe <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6819      	ldr	r1, [r3, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f7ff fab9 	bl	8002324 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fa4e 	bl	800225a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	08db      	lsrs	r3, r3, #3
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d022      	beq.n	8002e26 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6919      	ldr	r1, [r3, #16]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002df0:	f7ff f9a8 	bl	8002144 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6919      	ldr	r1, [r3, #16]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	461a      	mov	r2, r3
 8002e02:	f7ff f9f4 	bl	80021ee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d102      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x124>
 8002e16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e1a:	e000      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x126>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f7ff fa00 	bl	8002224 <LL_ADC_SetOffsetSaturation>
 8002e24:	e17b      	b.n	800311e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff f9ad 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x15a>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff f9a2 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	0e9b      	lsrs	r3, r3, #26
 8002e4c:	f003 021f 	and.w	r2, r3, #31
 8002e50:	e01e      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x198>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f997 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002e80:	2320      	movs	r3, #32
 8002e82:	e004      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002e84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x1b0>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	0e9b      	lsrs	r3, r3, #26
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	e018      	b.n	8002eda <HAL_ADC_ConfigChannel+0x1e2>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002ebc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002ec4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002ecc:	2320      	movs	r3, #32
 8002ece:	e004      	b.n	8002eda <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002ed0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d106      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff f966 	bl	80021b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff f94a 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x220>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2101      	movs	r1, #1
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff f93f 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	0e9b      	lsrs	r3, r3, #26
 8002f12:	f003 021f 	and.w	r2, r3, #31
 8002f16:	e01e      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x25e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff f934 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002f3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002f46:	2320      	movs	r3, #32
 8002f48:	e004      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002f4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d105      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x276>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	0e9b      	lsrs	r3, r3, #26
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	e018      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x2a8>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002f82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002f8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002f92:	2320      	movs	r3, #32
 8002f94:	e004      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002f96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d106      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2101      	movs	r1, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff f903 	bl	80021b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff f8e7 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x2e6>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2102      	movs	r1, #2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff f8dc 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	0e9b      	lsrs	r3, r3, #26
 8002fd8:	f003 021f 	and.w	r2, r3, #31
 8002fdc:	e01e      	b.n	800301c <HAL_ADC_ConfigChannel+0x324>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2102      	movs	r1, #2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff f8d1 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003000:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003004:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800300c:	2320      	movs	r3, #32
 800300e:	e004      	b.n	800301a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003010:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003024:	2b00      	cmp	r3, #0
 8003026:	d105      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x33c>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0e9b      	lsrs	r3, r3, #26
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	e016      	b.n	8003062 <HAL_ADC_ConfigChannel+0x36a>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003046:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003048:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800304c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003054:	2320      	movs	r3, #32
 8003056:	e004      	b.n	8003062 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003058:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003062:	429a      	cmp	r2, r3
 8003064:	d106      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2200      	movs	r2, #0
 800306c:	2102      	movs	r1, #2
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff f8a2 	bl	80021b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2103      	movs	r1, #3
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff f886 	bl	800218c <LL_ADC_GetOffsetChannel>
 8003080:	4603      	mov	r3, r0
 8003082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x3a8>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2103      	movs	r1, #3
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff f87b 	bl	800218c <LL_ADC_GetOffsetChannel>
 8003096:	4603      	mov	r3, r0
 8003098:	0e9b      	lsrs	r3, r3, #26
 800309a:	f003 021f 	and.w	r2, r3, #31
 800309e:	e017      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x3d8>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2103      	movs	r1, #3
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff f870 	bl	800218c <LL_ADC_GetOffsetChannel>
 80030ac:	4603      	mov	r3, r0
 80030ae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80030b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030ba:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80030bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80030c2:	2320      	movs	r3, #32
 80030c4:	e003      	b.n	80030ce <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80030c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x3f0>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	0e9b      	lsrs	r3, r3, #26
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	e011      	b.n	800310c <HAL_ADC_ConfigChannel+0x414>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80030f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80030fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003100:	2320      	movs	r3, #32
 8003102:	e003      	b.n	800310c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003104:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800310c:	429a      	cmp	r2, r3
 800310e:	d106      	bne.n	800311e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2200      	movs	r2, #0
 8003116:	2103      	movs	r1, #3
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff f84d 	bl	80021b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff f9e0 	bl	80024e8 <LL_ADC_IsEnabled>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 8140 	bne.w	80033b0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6819      	ldr	r1, [r3, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	461a      	mov	r2, r3
 800313e:	f7ff f91d 	bl	800237c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	4a8f      	ldr	r2, [pc, #572]	@ (8003384 <HAL_ADC_ConfigChannel+0x68c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	f040 8131 	bne.w	80033b0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10b      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x47e>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	0e9b      	lsrs	r3, r3, #26
 8003164:	3301      	adds	r3, #1
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	2b09      	cmp	r3, #9
 800316c:	bf94      	ite	ls
 800316e:	2301      	movls	r3, #1
 8003170:	2300      	movhi	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	e019      	b.n	80031aa <HAL_ADC_ConfigChannel+0x4b2>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003184:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003186:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003188:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800318e:	2320      	movs	r3, #32
 8003190:	e003      	b.n	800319a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003192:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003194:	fab3 f383 	clz	r3, r3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	3301      	adds	r3, #1
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	2b09      	cmp	r3, #9
 80031a2:	bf94      	ite	ls
 80031a4:	2301      	movls	r3, #1
 80031a6:	2300      	movhi	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d079      	beq.n	80032a2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d107      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x4d2>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	0e9b      	lsrs	r3, r3, #26
 80031c0:	3301      	adds	r3, #1
 80031c2:	069b      	lsls	r3, r3, #26
 80031c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031c8:	e015      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x4fe>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031d2:	fa93 f3a3 	rbit	r3, r3
 80031d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80031d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031da:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80031dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80031e2:	2320      	movs	r3, #32
 80031e4:	e003      	b.n	80031ee <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80031e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	3301      	adds	r3, #1
 80031f0:	069b      	lsls	r3, r3, #26
 80031f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x51e>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	0e9b      	lsrs	r3, r3, #26
 8003208:	3301      	adds	r3, #1
 800320a:	f003 031f 	and.w	r3, r3, #31
 800320e:	2101      	movs	r1, #1
 8003210:	fa01 f303 	lsl.w	r3, r1, r3
 8003214:	e017      	b.n	8003246 <HAL_ADC_ConfigChannel+0x54e>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003226:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800322e:	2320      	movs	r3, #32
 8003230:	e003      	b.n	800323a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	3301      	adds	r3, #1
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	2101      	movs	r1, #1
 8003242:	fa01 f303 	lsl.w	r3, r1, r3
 8003246:	ea42 0103 	orr.w	r1, r2, r3
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <HAL_ADC_ConfigChannel+0x574>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	0e9b      	lsrs	r3, r3, #26
 800325c:	3301      	adds	r3, #1
 800325e:	f003 021f 	and.w	r2, r3, #31
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	051b      	lsls	r3, r3, #20
 800326a:	e018      	b.n	800329e <HAL_ADC_ConfigChannel+0x5a6>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800327a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800327e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003284:	2320      	movs	r3, #32
 8003286:	e003      	b.n	8003290 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	3301      	adds	r3, #1
 8003292:	f003 021f 	and.w	r2, r3, #31
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800329e:	430b      	orrs	r3, r1
 80032a0:	e081      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d107      	bne.n	80032be <HAL_ADC_ConfigChannel+0x5c6>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	0e9b      	lsrs	r3, r3, #26
 80032b4:	3301      	adds	r3, #1
 80032b6:	069b      	lsls	r3, r3, #26
 80032b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032bc:	e015      	b.n	80032ea <HAL_ADC_ConfigChannel+0x5f2>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80032cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ce:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80032d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80032d6:	2320      	movs	r3, #32
 80032d8:	e003      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80032da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032dc:	fab3 f383 	clz	r3, r3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	069b      	lsls	r3, r3, #26
 80032e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <HAL_ADC_ConfigChannel+0x612>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	0e9b      	lsrs	r3, r3, #26
 80032fc:	3301      	adds	r3, #1
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	2101      	movs	r1, #1
 8003304:	fa01 f303 	lsl.w	r3, r1, r3
 8003308:	e017      	b.n	800333a <HAL_ADC_ConfigChannel+0x642>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	61fb      	str	r3, [r7, #28]
  return result;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003322:	2320      	movs	r3, #32
 8003324:	e003      	b.n	800332e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	3301      	adds	r3, #1
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2101      	movs	r1, #1
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	ea42 0103 	orr.w	r1, r2, r3
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10d      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x66e>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	0e9b      	lsrs	r3, r3, #26
 8003350:	3301      	adds	r3, #1
 8003352:	f003 021f 	and.w	r2, r3, #31
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	3b1e      	subs	r3, #30
 800335e:	051b      	lsls	r3, r3, #20
 8003360:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003364:	e01e      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x6ac>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	613b      	str	r3, [r7, #16]
  return result;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d104      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800337e:	2320      	movs	r3, #32
 8003380:	e006      	b.n	8003390 <HAL_ADC_ConfigChannel+0x698>
 8003382:	bf00      	nop
 8003384:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	3301      	adds	r3, #1
 8003392:	f003 021f 	and.w	r2, r3, #31
 8003396:	4613      	mov	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4413      	add	r3, r2
 800339c:	3b1e      	subs	r3, #30
 800339e:	051b      	lsls	r3, r3, #20
 80033a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033a4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033aa:	4619      	mov	r1, r3
 80033ac:	f7fe ffba 	bl	8002324 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4b3f      	ldr	r3, [pc, #252]	@ (80034b4 <HAL_ADC_ConfigChannel+0x7bc>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d071      	beq.n	80034a0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033bc:	483e      	ldr	r0, [pc, #248]	@ (80034b8 <HAL_ADC_ConfigChannel+0x7c0>)
 80033be:	f7fe feb3 	bl	8002128 <LL_ADC_GetCommonPathInternalCh>
 80033c2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a3c      	ldr	r2, [pc, #240]	@ (80034bc <HAL_ADC_ConfigChannel+0x7c4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_ADC_ConfigChannel+0x6e2>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a3a      	ldr	r2, [pc, #232]	@ (80034c0 <HAL_ADC_ConfigChannel+0x7c8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d127      	bne.n	800342a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d121      	bne.n	800342a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033ee:	d157      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033f8:	4619      	mov	r1, r3
 80033fa:	482f      	ldr	r0, [pc, #188]	@ (80034b8 <HAL_ADC_ConfigChannel+0x7c0>)
 80033fc:	f7fe fe81 	bl	8002102 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003400:	4b30      	ldr	r3, [pc, #192]	@ (80034c4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	099b      	lsrs	r3, r3, #6
 8003406:	4a30      	ldr	r2, [pc, #192]	@ (80034c8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	4613      	mov	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800341a:	e002      	b.n	8003422 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3b01      	subs	r3, #1
 8003420:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f9      	bne.n	800341c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003428:	e03a      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a27      	ldr	r2, [pc, #156]	@ (80034cc <HAL_ADC_ConfigChannel+0x7d4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d113      	bne.n	800345c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003434:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003438:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10d      	bne.n	800345c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a22      	ldr	r2, [pc, #136]	@ (80034d0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d02a      	beq.n	80034a0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800344a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800344e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003452:	4619      	mov	r1, r3
 8003454:	4818      	ldr	r0, [pc, #96]	@ (80034b8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003456:	f7fe fe54 	bl	8002102 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800345a:	e021      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1c      	ldr	r2, [pc, #112]	@ (80034d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d11c      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003466:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800346a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d116      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a16      	ldr	r2, [pc, #88]	@ (80034d0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d011      	beq.n	80034a0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800347c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003480:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003484:	4619      	mov	r1, r3
 8003486:	480c      	ldr	r0, [pc, #48]	@ (80034b8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003488:	f7fe fe3b 	bl	8002102 <LL_ADC_SetCommonPathInternalCh>
 800348c:	e008      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003492:	f043 0220 	orr.w	r2, r3, #32
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80034a8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	37d8      	adds	r7, #216	@ 0xd8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	80080000 	.word	0x80080000
 80034b8:	50000300 	.word	0x50000300
 80034bc:	c3210000 	.word	0xc3210000
 80034c0:	90c00010 	.word	0x90c00010
 80034c4:	20000000 	.word	0x20000000
 80034c8:	053e2d63 	.word	0x053e2d63
 80034cc:	c7520000 	.word	0xc7520000
 80034d0:	50000100 	.word	0x50000100
 80034d4:	cb840000 	.word	0xcb840000

080034d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fe fffd 	bl	80024e8 <LL_ADC_IsEnabled>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d169      	bne.n	80035c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	4b36      	ldr	r3, [pc, #216]	@ (80035d4 <ADC_Enable+0xfc>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00d      	beq.n	800351e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003506:	f043 0210 	orr.w	r2, r3, #16
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003512:	f043 0201 	orr.w	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e055      	b.n	80035ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe ffb8 	bl	8002498 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003528:	482b      	ldr	r0, [pc, #172]	@ (80035d8 <ADC_Enable+0x100>)
 800352a:	f7fe fdfd 	bl	8002128 <LL_ADC_GetCommonPathInternalCh>
 800352e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003530:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003534:	2b00      	cmp	r3, #0
 8003536:	d013      	beq.n	8003560 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003538:	4b28      	ldr	r3, [pc, #160]	@ (80035dc <ADC_Enable+0x104>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	099b      	lsrs	r3, r3, #6
 800353e:	4a28      	ldr	r2, [pc, #160]	@ (80035e0 <ADC_Enable+0x108>)
 8003540:	fba2 2303 	umull	r2, r3, r2, r3
 8003544:	099b      	lsrs	r3, r3, #6
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	4613      	mov	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003552:	e002      	b.n	800355a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	3b01      	subs	r3, #1
 8003558:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f9      	bne.n	8003554 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003560:	f7fe fdb0 	bl	80020c4 <HAL_GetTick>
 8003564:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003566:	e028      	b.n	80035ba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7fe ffbb 	bl	80024e8 <LL_ADC_IsEnabled>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d104      	bne.n	8003582 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe ff8b 	bl	8002498 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003582:	f7fe fd9f 	bl	80020c4 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d914      	bls.n	80035ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d00d      	beq.n	80035ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a2:	f043 0210 	orr.w	r2, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ae:	f043 0201 	orr.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e007      	b.n	80035ca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d1cf      	bne.n	8003568 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	8000003f 	.word	0x8000003f
 80035d8:	50000300 	.word	0x50000300
 80035dc:	20000000 	.word	0x20000000
 80035e0:	053e2d63 	.word	0x053e2d63

080035e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fe ff8c 	bl	800250e <LL_ADC_IsDisableOngoing>
 80035f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe ff73 	bl	80024e8 <LL_ADC_IsEnabled>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d047      	beq.n	8003698 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d144      	bne.n	8003698 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 030d 	and.w	r3, r3, #13
 8003618:	2b01      	cmp	r3, #1
 800361a:	d10c      	bne.n	8003636 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f7fe ff4d 	bl	80024c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2203      	movs	r2, #3
 800362c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800362e:	f7fe fd49 	bl	80020c4 <HAL_GetTick>
 8003632:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003634:	e029      	b.n	800368a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363a:	f043 0210 	orr.w	r2, r3, #16
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003646:	f043 0201 	orr.w	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e023      	b.n	800369a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003652:	f7fe fd37 	bl	80020c4 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d914      	bls.n	800368a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00d      	beq.n	800368a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003672:	f043 0210 	orr.w	r2, r3, #16
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800367e:	f043 0201 	orr.w	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e007      	b.n	800369a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1dc      	bne.n	8003652 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <LL_ADC_SetCommonPathInternalCh>:
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	609a      	str	r2, [r3, #8]
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <LL_ADC_GetCommonPathInternalCh>:
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <LL_ADC_SetOffset>:
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3360      	adds	r3, #96	@ 0x60
 80036f6:	461a      	mov	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4b08      	ldr	r3, [pc, #32]	@ (8003728 <LL_ADC_SetOffset+0x44>)
 8003706:	4013      	ands	r3, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	4313      	orrs	r3, r2
 8003714:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	601a      	str	r2, [r3, #0]
}
 800371c:	bf00      	nop
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	03fff000 	.word	0x03fff000

0800372c <LL_ADC_GetOffsetChannel>:
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3360      	adds	r3, #96	@ 0x60
 800373a:	461a      	mov	r2, r3
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LL_ADC_SetOffsetState>:
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	3360      	adds	r3, #96	@ 0x60
 8003768:	461a      	mov	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	431a      	orrs	r2, r3
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	601a      	str	r2, [r3, #0]
}
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <LL_ADC_SetOffsetSign>:
{
 800378e:	b480      	push	{r7}
 8003790:	b087      	sub	sp, #28
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3360      	adds	r3, #96	@ 0x60
 800379e:	461a      	mov	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	601a      	str	r2, [r3, #0]
}
 80037b8:	bf00      	nop
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <LL_ADC_SetOffsetSaturation>:
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	3360      	adds	r3, #96	@ 0x60
 80037d4:	461a      	mov	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	601a      	str	r2, [r3, #0]
}
 80037ee:	bf00      	nop
 80037f0:	371c      	adds	r7, #28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	615a      	str	r2, [r3, #20]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <LL_ADC_INJ_GetTrigAuto>:
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <LL_ADC_SetChannelSamplingTime>:
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3314      	adds	r3, #20
 800384c:	461a      	mov	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	0e5b      	lsrs	r3, r3, #25
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	4413      	add	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	0d1b      	lsrs	r3, r3, #20
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	2107      	movs	r1, #7
 800386a:	fa01 f303 	lsl.w	r3, r1, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	401a      	ands	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	0d1b      	lsrs	r3, r3, #20
 8003876:	f003 031f 	and.w	r3, r3, #31
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	fa01 f303 	lsl.w	r3, r1, r3
 8003880:	431a      	orrs	r2, r3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	601a      	str	r2, [r3, #0]
}
 8003886:	bf00      	nop
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <LL_ADC_SetChannelSingleDiff>:
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ac:	43db      	mvns	r3, r3
 80038ae:	401a      	ands	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f003 0318 	and.w	r3, r3, #24
 80038b6:	4908      	ldr	r1, [pc, #32]	@ (80038d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80038b8:	40d9      	lsrs	r1, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	400b      	ands	r3, r1
 80038be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c2:	431a      	orrs	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80038ca:	bf00      	nop
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	0007ffff 	.word	0x0007ffff

080038dc <LL_ADC_GetMultimode>:
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 031f 	and.w	r3, r3, #31
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_ADC_IsEnabled>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <LL_ADC_IsEnabled+0x18>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <LL_ADC_IsEnabled+0x1a>
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <LL_ADC_StartCalibration>:
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003930:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800393a:	4313      	orrs	r3, r2
 800393c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	609a      	str	r2, [r3, #8]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <LL_ADC_IsCalibrationOnGoing>:
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003960:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003964:	d101      	bne.n	800396a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <LL_ADC_REG_IsConversionOngoing>:
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b04      	cmp	r3, #4
 800398a:	d101      	bne.n	8003990 <LL_ADC_REG_IsConversionOngoing+0x18>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <LL_ADC_INJ_StartConversion>:
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039b2:	f043 0208 	orr.w	r2, r3, #8
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	609a      	str	r2, [r3, #8]
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <LL_ADC_INJ_IsConversionOngoing>:
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d101      	bne.n	80039de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_ADCEx_Calibration_Start+0x1c>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e04d      	b.n	8003aa4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff fde7 	bl	80035e4 <ADC_Disable>
 8003a16:	4603      	mov	r3, r0
 8003a18:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d136      	bne.n	8003a8e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a28:	f023 0302 	bic.w	r3, r3, #2
 8003a2c:	f043 0202 	orr.w	r2, r3, #2
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6839      	ldr	r1, [r7, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff ff6f 	bl	800391e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a40:	e014      	b.n	8003a6c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	3301      	adds	r3, #1
 8003a46:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4a18      	ldr	r2, [pc, #96]	@ (8003aac <HAL_ADCEx_Calibration_Start+0xc0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d90d      	bls.n	8003a6c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a54:	f023 0312 	bic.w	r3, r3, #18
 8003a58:	f043 0210 	orr.w	r2, r3, #16
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e01b      	b.n	8003aa4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff ff6d 	bl	8003950 <LL_ADC_IsCalibrationOnGoing>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1e2      	bne.n	8003a42 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a80:	f023 0303 	bic.w	r3, r3, #3
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a8c:	e005      	b.n	8003a9a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a92:	f043 0210 	orr.w	r2, r3, #16
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	0004de01 	.word	0x0004de01

08003ab0 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ab8:	4853      	ldr	r0, [pc, #332]	@ (8003c08 <HAL_ADCEx_InjectedStart+0x158>)
 8003aba:	f7ff ff0f 	bl	80038dc <LL_ADC_GetMultimode>
 8003abe:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff ff7e 	bl	80039c6 <LL_ADC_INJ_IsConversionOngoing>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e094      	b.n	8003bfe <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ade:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d107      	bne.n	8003b04 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e07c      	b.n	8003bfe <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADCEx_InjectedStart+0x62>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e075      	b.n	8003bfe <HAL_ADCEx_InjectedStart+0x14e>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff fcdc 	bl	80034d8 <ADC_Enable>
 8003b20:	4603      	mov	r3, r0
 8003b22:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d164      	bne.n	8003bf4 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d006      	beq.n	8003b44 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3a:	f023 0208 	bic.w	r2, r3, #8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	661a      	str	r2, [r3, #96]	@ 0x60
 8003b42:	e002      	b.n	8003b4a <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a2a      	ldr	r2, [pc, #168]	@ (8003c0c <HAL_ADCEx_InjectedStart+0x15c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d002      	beq.n	8003b6e <HAL_ADCEx_InjectedStart+0xbe>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	e001      	b.n	8003b72 <HAL_ADCEx_InjectedStart+0xc2>
 8003b6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d002      	beq.n	8003b80 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2260      	movs	r2, #96	@ 0x60
 8003b92:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c0c <HAL_ADCEx_InjectedStart+0x15c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d002      	beq.n	8003bac <HAL_ADCEx_InjectedStart+0xfc>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	e001      	b.n	8003bb0 <HAL_ADCEx_InjectedStart+0x100>
 8003bac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d008      	beq.n	8003bca <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b06      	cmp	r3, #6
 8003bc2:	d002      	beq.n	8003bca <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2b07      	cmp	r3, #7
 8003bc8:	d10d      	bne.n	8003be6 <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fe26 	bl	8003820 <LL_ADC_INJ_GetTrigAuto>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d110      	bne.n	8003bfc <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff fedd 	bl	800399e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003be4:	e00a      	b.n	8003bfc <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003bf2:	e003      	b.n	8003bfc <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	50000300 	.word	0x50000300
 8003c0c:	50000100 	.word	0x50000100

08003c10 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c18:	486e      	ldr	r0, [pc, #440]	@ (8003dd4 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8003c1a:	f7ff fe5f 	bl	80038dc <LL_ADC_GetMultimode>
 8003c1e:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff fece 	bl	80039c6 <LL_ADC_INJ_IsConversionOngoing>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8003c30:	2302      	movs	r3, #2
 8003c32:	e0ca      	b.n	8003dca <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c3e:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c46:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d107      	bne.n	8003c64 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0b2      	b.n	8003dca <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_ADCEx_InjectedStart_IT+0x62>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e0ab      	b.n	8003dca <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff fc2c 	bl	80034d8 <ADC_Enable>
 8003c80:	4603      	mov	r3, r0
 8003c82:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f040 809a 	bne.w	8003dc0 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d006      	beq.n	8003ca6 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c9c:	f023 0208 	bic.w	r2, r3, #8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	661a      	str	r2, [r3, #96]	@ 0x60
 8003ca4:	e002      	b.n	8003cac <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a44      	ldr	r2, [pc, #272]	@ (8003dd8 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d002      	beq.n	8003cd0 <HAL_ADCEx_InjectedStart_IT+0xc0>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	e001      	b.n	8003cd4 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8003cd0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d002      	beq.n	8003ce2 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d105      	bne.n	8003cee <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2260      	movs	r2, #96	@ 0x60
 8003cf4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d007      	beq.n	8003d1c <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d1a:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d110      	bne.n	8003d46 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0220 	bic.w	r2, r2, #32
 8003d32:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d42:	605a      	str	r2, [r3, #4]
          break;
 8003d44:	e010      	b.n	8003d68 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d54:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 0220 	orr.w	r2, r2, #32
 8003d64:	605a      	str	r2, [r3, #4]
          break;
 8003d66:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd8 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d002      	beq.n	8003d78 <HAL_ADCEx_InjectedStart_IT+0x168>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	e001      	b.n	8003d7c <HAL_ADCEx_InjectedStart_IT+0x16c>
 8003d78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d008      	beq.n	8003d96 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b06      	cmp	r3, #6
 8003d8e:	d002      	beq.n	8003d96 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2b07      	cmp	r3, #7
 8003d94:	d10d      	bne.n	8003db2 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff fd40 	bl	8003820 <LL_ADC_INJ_GetTrigAuto>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d110      	bne.n	8003dc8 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fdf7 	bl	800399e <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003db0:	e00a      	b.n	8003dc8 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003dbe:	e003      	b.n	8003dc8 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	50000300 	.word	0x50000300
 8003dd8:	50000100 	.word	0x50000100

08003ddc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b0b6      	sub	sp, #216	@ 0xd8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d102      	bne.n	8003e56 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003e50:	2302      	movs	r3, #2
 8003e52:	f000 bcb5 	b.w	80047c0 <HAL_ADCEx_InjectedConfigChannel+0x994>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d130      	bne.n	8003ed0 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b09      	cmp	r3, #9
 8003e74:	d179      	bne.n	8003f6a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d010      	beq.n	8003ea0 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	0e9b      	lsrs	r3, r3, #26
 8003e84:	025b      	lsls	r3, r3, #9
 8003e86:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8003e92:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e9e:	e007      	b.n	8003eb0 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	0e9b      	lsrs	r3, r3, #26
 8003ea6:	025b      	lsls	r3, r3, #9
 8003ea8:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8003eac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003eb6:	4b84      	ldr	r3, [pc, #528]	@ (80040c8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ecc:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003ece:	e04c      	b.n	8003f6a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d11d      	bne.n	8003f14 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	6a1a      	ldr	r2, [r3, #32]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef8:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8003efc:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f08:	e004      	b.n	8003f14 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	0e9b      	lsrs	r3, r3, #26
 8003f1a:	f003 021f 	and.w	r2, r3, #31
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 031f 	and.w	r3, r3, #31
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f38:	1e5a      	subs	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003f42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f5a:	4b5b      	ldr	r3, [pc, #364]	@ (80040c8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	430b      	orrs	r3, r1
 8003f68:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fd29 	bl	80039c6 <LL_ADC_INJ_IsConversionOngoing>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d124      	bne.n	8003fc4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d112      	bne.n	8003faa <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003f94:	055a      	lsls	r2, r3, #21
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f9c:	051b      	lsls	r3, r3, #20
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	60da      	str	r2, [r3, #12]
 8003fa8:	e00c      	b.n	8003fc4 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003fba:	055a      	lsls	r2, r3, #21
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fcd5 	bl	8003978 <LL_ADC_REG_IsConversionOngoing>
 8003fce:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fcf5 	bl	80039c6 <LL_ADC_INJ_IsConversionOngoing>
 8003fdc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fe0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f040 822e 	bne.w	8004446 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f040 8229 	bne.w	8004446 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	2b00      	cmp	r3, #0
 8004002:	d116      	bne.n	8004032 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800400a:	2b01      	cmp	r3, #1
 800400c:	d108      	bne.n	8004020 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800401c:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800401e:	e01f      	b.n	8004060 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800402e:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004030:	e016      	b.n	8004060 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004038:	2b01      	cmp	r3, #1
 800403a:	d109      	bne.n	8004050 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004040:	f043 0220 	orr.w	r2, r3, #32
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800404e:	e007      	b.n	8004060 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800405e:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004066:	2b01      	cmp	r3, #1
 8004068:	d110      	bne.n	800408c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407c:	430b      	orrs	r3, r1
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0202 	orr.w	r2, r2, #2
 8004088:	611a      	str	r2, [r3, #16]
 800408a:	e007      	b.n	800409c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0202 	bic.w	r2, r2, #2
 800409a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040a4:	d112      	bne.n	80040cc <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2200      	movs	r2, #0
 80040b0:	4619      	mov	r1, r3
 80040b2:	f7ff fbc3 	bl	800383c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fb9b 	bl	80037fa <LL_ADC_SetSamplingTimeCommonConfig>
 80040c4:	e011      	b.n	80040ea <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80040c6:	bf00      	nop
 80040c8:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80040d8:	461a      	mov	r2, r3
 80040da:	f7ff fbaf 	bl	800383c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2100      	movs	r1, #0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fb88 	bl	80037fa <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	08db      	lsrs	r3, r3, #3
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	2b04      	cmp	r3, #4
 800410a:	d022      	beq.n	8004152 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	6919      	ldr	r1, [r3, #16]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800411c:	f7ff fae2 	bl	80036e4 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6919      	ldr	r1, [r3, #16]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	461a      	mov	r2, r3
 800412e:	f7ff fb2e 	bl	800378e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800413e:	2b01      	cmp	r3, #1
 8004140:	d102      	bne.n	8004148 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004142:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004146:	e000      	b.n	800414a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004148:	2300      	movs	r3, #0
 800414a:	461a      	mov	r2, r3
 800414c:	f7ff fb3a 	bl	80037c4 <LL_ADC_SetOffsetSaturation>
 8004150:	e179      	b.n	8004446 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fae7 	bl	800372c <LL_ADC_GetOffsetChannel>
 800415e:	4603      	mov	r3, r0
 8004160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff fadc 	bl	800372c <LL_ADC_GetOffsetChannel>
 8004174:	4603      	mov	r3, r0
 8004176:	0e9b      	lsrs	r3, r3, #26
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	e01e      	b.n	80041bc <HAL_ADCEx_InjectedConfigChannel+0x390>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fad1 	bl	800372c <LL_ADC_GetOffsetChannel>
 800418a:	4603      	mov	r3, r0
 800418c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004190:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004194:	fa93 f3a3 	rbit	r3, r3
 8004198:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800419c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80041a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 80041ac:	2320      	movs	r3, #32
 80041ae:	e004      	b.n	80041ba <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 80041b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041b4:	fab3 f383 	clz	r3, r3
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d105      	bne.n	80041d4 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	0e9b      	lsrs	r3, r3, #26
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	e018      	b.n	8004206 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80041e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80041f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80041f8:	2320      	movs	r3, #32
 80041fa:	e004      	b.n	8004206 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80041fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004200:	fab3 f383 	clz	r3, r3
 8004204:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004206:	429a      	cmp	r2, r3
 8004208:	d106      	bne.n	8004218 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	2100      	movs	r1, #0
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff faa0 	bl	8003758 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2101      	movs	r1, #1
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fa84 	bl	800372c <LL_ADC_GetOffsetChannel>
 8004224:	4603      	mov	r3, r0
 8004226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10a      	bne.n	8004244 <HAL_ADCEx_InjectedConfigChannel+0x418>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2101      	movs	r1, #1
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fa79 	bl	800372c <LL_ADC_GetOffsetChannel>
 800423a:	4603      	mov	r3, r0
 800423c:	0e9b      	lsrs	r3, r3, #26
 800423e:	f003 021f 	and.w	r2, r3, #31
 8004242:	e01e      	b.n	8004282 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2101      	movs	r1, #1
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fa6e 	bl	800372c <LL_ADC_GetOffsetChannel>
 8004250:	4603      	mov	r3, r0
 8004252:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800425a:	fa93 f3a3 	rbit	r3, r3
 800425e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004262:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004266:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800426a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004272:	2320      	movs	r3, #32
 8004274:	e004      	b.n	8004280 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004276:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800427a:	fab3 f383 	clz	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	0e9b      	lsrs	r3, r3, #26
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	e018      	b.n	80042cc <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042a6:	fa93 f3a3 	rbit	r3, r3
 80042aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80042ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80042b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80042be:	2320      	movs	r3, #32
 80042c0:	e004      	b.n	80042cc <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80042c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d106      	bne.n	80042de <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2200      	movs	r2, #0
 80042d6:	2101      	movs	r1, #1
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff fa3d 	bl	8003758 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2102      	movs	r1, #2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fa21 	bl	800372c <LL_ADC_GetOffsetChannel>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10a      	bne.n	800430a <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2102      	movs	r1, #2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fa16 	bl	800372c <LL_ADC_GetOffsetChannel>
 8004300:	4603      	mov	r3, r0
 8004302:	0e9b      	lsrs	r3, r3, #26
 8004304:	f003 021f 	and.w	r2, r3, #31
 8004308:	e01e      	b.n	8004348 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2102      	movs	r1, #2
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fa0b 	bl	800372c <LL_ADC_GetOffsetChannel>
 8004316:	4603      	mov	r3, r0
 8004318:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004320:	fa93 f3a3 	rbit	r3, r3
 8004324:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004328:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800432c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004330:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004338:	2320      	movs	r3, #32
 800433a:	e004      	b.n	8004346 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 800433c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004340:	fab3 f383 	clz	r3, r3
 8004344:	b2db      	uxtb	r3, r3
 8004346:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	0e9b      	lsrs	r3, r3, #26
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	e014      	b.n	800438a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004368:	fa93 f3a3 	rbit	r3, r3
 800436c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800436e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004370:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004374:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 800437c:	2320      	movs	r3, #32
 800437e:	e004      	b.n	800438a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004380:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004384:	fab3 f383 	clz	r3, r3
 8004388:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800438a:	429a      	cmp	r2, r3
 800438c:	d106      	bne.n	800439c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	2102      	movs	r1, #2
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff f9de 	bl	8003758 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2103      	movs	r1, #3
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff f9c2 	bl	800372c <LL_ADC_GetOffsetChannel>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2103      	movs	r1, #3
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff f9b7 	bl	800372c <LL_ADC_GetOffsetChannel>
 80043be:	4603      	mov	r3, r0
 80043c0:	0e9b      	lsrs	r3, r3, #26
 80043c2:	f003 021f 	and.w	r2, r3, #31
 80043c6:	e017      	b.n	80043f8 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2103      	movs	r1, #3
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff f9ac 	bl	800372c <LL_ADC_GetOffsetChannel>
 80043d4:	4603      	mov	r3, r0
 80043d6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043da:	fa93 f3a3 	rbit	r3, r3
 80043de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80043e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043e2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80043e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80043ea:	2320      	movs	r3, #32
 80043ec:	e003      	b.n	80043f6 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80043ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043f0:	fab3 f383 	clz	r3, r3
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004400:	2b00      	cmp	r3, #0
 8004402:	d105      	bne.n	8004410 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	0e9b      	lsrs	r3, r3, #26
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	e011      	b.n	8004434 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004418:	fa93 f3a3 	rbit	r3, r3
 800441c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800441e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004420:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004422:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004428:	2320      	movs	r3, #32
 800442a:	e003      	b.n	8004434 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 800442c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800442e:	fab3 f383 	clz	r3, r3
 8004432:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004434:	429a      	cmp	r2, r3
 8004436:	d106      	bne.n	8004446 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2200      	movs	r2, #0
 800443e:	2103      	movs	r1, #3
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff f989 	bl	8003758 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fa54 	bl	80038f8 <LL_ADC_IsEnabled>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	f040 8140 	bne.w	80046d8 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	461a      	mov	r2, r3
 8004466:	f7ff fa15 	bl	8003894 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	4a8f      	ldr	r2, [pc, #572]	@ (80046ac <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004470:	4293      	cmp	r3, r2
 8004472:	f040 8131 	bne.w	80046d8 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10b      	bne.n	800449e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	0e9b      	lsrs	r3, r3, #26
 800448c:	3301      	adds	r3, #1
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	2b09      	cmp	r3, #9
 8004494:	bf94      	ite	ls
 8004496:	2301      	movls	r3, #1
 8004498:	2300      	movhi	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	e019      	b.n	80044d2 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044a6:	fa93 f3a3 	rbit	r3, r3
 80044aa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80044ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80044b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 80044b6:	2320      	movs	r3, #32
 80044b8:	e003      	b.n	80044c2 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80044ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044bc:	fab3 f383 	clz	r3, r3
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	3301      	adds	r3, #1
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	2b09      	cmp	r3, #9
 80044ca:	bf94      	ite	ls
 80044cc:	2301      	movls	r3, #1
 80044ce:	2300      	movhi	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d079      	beq.n	80045ca <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d107      	bne.n	80044f2 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	0e9b      	lsrs	r3, r3, #26
 80044e8:	3301      	adds	r3, #1
 80044ea:	069b      	lsls	r3, r3, #26
 80044ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044f0:	e015      	b.n	800451e <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044fa:	fa93 f3a3 	rbit	r3, r3
 80044fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004502:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 800450a:	2320      	movs	r3, #32
 800450c:	e003      	b.n	8004516 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 800450e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004510:	fab3 f383 	clz	r3, r3
 8004514:	b2db      	uxtb	r3, r3
 8004516:	3301      	adds	r3, #1
 8004518:	069b      	lsls	r3, r3, #26
 800451a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_ADCEx_InjectedConfigChannel+0x712>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	0e9b      	lsrs	r3, r3, #26
 8004530:	3301      	adds	r3, #1
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	2101      	movs	r1, #1
 8004538:	fa01 f303 	lsl.w	r3, r1, r3
 800453c:	e017      	b.n	800456e <HAL_ADCEx_InjectedConfigChannel+0x742>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004546:	fa93 f3a3 	rbit	r3, r3
 800454a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800454c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800454e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004556:	2320      	movs	r3, #32
 8004558:	e003      	b.n	8004562 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800455a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800455c:	fab3 f383 	clz	r3, r3
 8004560:	b2db      	uxtb	r3, r3
 8004562:	3301      	adds	r3, #1
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	2101      	movs	r1, #1
 800456a:	fa01 f303 	lsl.w	r3, r1, r3
 800456e:	ea42 0103 	orr.w	r1, r2, r3
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10a      	bne.n	8004594 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	0e9b      	lsrs	r3, r3, #26
 8004584:	3301      	adds	r3, #1
 8004586:	f003 021f 	and.w	r2, r3, #31
 800458a:	4613      	mov	r3, r2
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	4413      	add	r3, r2
 8004590:	051b      	lsls	r3, r3, #20
 8004592:	e018      	b.n	80045c6 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800459c:	fa93 f3a3 	rbit	r3, r3
 80045a0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80045a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80045a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 80045ac:	2320      	movs	r3, #32
 80045ae:	e003      	b.n	80045b8 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 80045b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	f003 021f 	and.w	r2, r3, #31
 80045be:	4613      	mov	r3, r2
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	4413      	add	r3, r2
 80045c4:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045c6:	430b      	orrs	r3, r1
 80045c8:	e081      	b.n	80046ce <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d107      	bne.n	80045e6 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	0e9b      	lsrs	r3, r3, #26
 80045dc:	3301      	adds	r3, #1
 80045de:	069b      	lsls	r3, r3, #26
 80045e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045e4:	e015      	b.n	8004612 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ee:	fa93 f3a3 	rbit	r3, r3
 80045f2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80045f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80045f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80045fe:	2320      	movs	r3, #32
 8004600:	e003      	b.n	800460a <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004604:	fab3 f383 	clz	r3, r3
 8004608:	b2db      	uxtb	r3, r3
 800460a:	3301      	adds	r3, #1
 800460c:	069b      	lsls	r3, r3, #26
 800460e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HAL_ADCEx_InjectedConfigChannel+0x806>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	0e9b      	lsrs	r3, r3, #26
 8004624:	3301      	adds	r3, #1
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	2101      	movs	r1, #1
 800462c:	fa01 f303 	lsl.w	r3, r1, r3
 8004630:	e017      	b.n	8004662 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	61bb      	str	r3, [r7, #24]
  return result;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 800464a:	2320      	movs	r3, #32
 800464c:	e003      	b.n	8004656 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	fab3 f383 	clz	r3, r3
 8004654:	b2db      	uxtb	r3, r3
 8004656:	3301      	adds	r3, #1
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2101      	movs	r1, #1
 800465e:	fa01 f303 	lsl.w	r3, r1, r3
 8004662:	ea42 0103 	orr.w	r1, r2, r3
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10d      	bne.n	800468e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	0e9b      	lsrs	r3, r3, #26
 8004678:	3301      	adds	r3, #1
 800467a:	f003 021f 	and.w	r2, r3, #31
 800467e:	4613      	mov	r3, r2
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	4413      	add	r3, r2
 8004684:	3b1e      	subs	r3, #30
 8004686:	051b      	lsls	r3, r3, #20
 8004688:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800468c:	e01e      	b.n	80046cc <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	fa93 f3a3 	rbit	r3, r3
 800469a:	60fb      	str	r3, [r7, #12]
  return result;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d104      	bne.n	80046b0 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 80046a6:	2320      	movs	r3, #32
 80046a8:	e006      	b.n	80046b8 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 80046aa:	bf00      	nop
 80046ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	fab3 f383 	clz	r3, r3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	3301      	adds	r3, #1
 80046ba:	f003 021f 	and.w	r2, r3, #31
 80046be:	4613      	mov	r3, r2
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	4413      	add	r3, r2
 80046c4:	3b1e      	subs	r3, #30
 80046c6:	051b      	lsls	r3, r3, #20
 80046c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046cc:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046d2:	4619      	mov	r1, r3
 80046d4:	f7ff f8b2 	bl	800383c <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b3a      	ldr	r3, [pc, #232]	@ (80047c8 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 80046de:	4013      	ands	r3, r2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d067      	beq.n	80047b4 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046e4:	4839      	ldr	r0, [pc, #228]	@ (80047cc <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80046e6:	f7fe ffef 	bl	80036c8 <LL_ADC_GetCommonPathInternalCh>
 80046ea:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a37      	ldr	r2, [pc, #220]	@ (80047d0 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a35      	ldr	r2, [pc, #212]	@ (80047d4 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d127      	bne.n	8004752 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004702:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d121      	bne.n	8004752 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004716:	d14d      	bne.n	80047b4 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004718:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800471c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004720:	4619      	mov	r1, r3
 8004722:	482a      	ldr	r0, [pc, #168]	@ (80047cc <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004724:	f7fe ffbd 	bl	80036a2 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004728:	4b2b      	ldr	r3, [pc, #172]	@ (80047d8 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	099b      	lsrs	r3, r3, #6
 800472e:	4a2b      	ldr	r2, [pc, #172]	@ (80047dc <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004730:	fba2 2303 	umull	r2, r3, r2, r3
 8004734:	099a      	lsrs	r2, r3, #6
 8004736:	4613      	mov	r3, r2
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004740:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004742:	e002      	b.n	800474a <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	3b01      	subs	r3, #1
 8004748:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f9      	bne.n	8004744 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004750:	e030      	b.n	80047b4 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a22      	ldr	r2, [pc, #136]	@ (80047e0 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d113      	bne.n	8004784 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800475c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004760:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10d      	bne.n	8004784 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1d      	ldr	r2, [pc, #116]	@ (80047e4 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d020      	beq.n	80047b4 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004772:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004776:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800477a:	4619      	mov	r1, r3
 800477c:	4813      	ldr	r0, [pc, #76]	@ (80047cc <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800477e:	f7fe ff90 	bl	80036a2 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004782:	e017      	b.n	80047b4 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a17      	ldr	r2, [pc, #92]	@ (80047e8 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d112      	bne.n	80047b4 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800478e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10c      	bne.n	80047b4 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a11      	ldr	r2, [pc, #68]	@ (80047e4 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047ac:	4619      	mov	r1, r3
 80047ae:	4807      	ldr	r0, [pc, #28]	@ (80047cc <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80047b0:	f7fe ff77 	bl	80036a2 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80047bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	37d8      	adds	r7, #216	@ 0xd8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	80080000 	.word	0x80080000
 80047cc:	50000300 	.word	0x50000300
 80047d0:	c3210000 	.word	0xc3210000
 80047d4:	90c00010 	.word	0x90c00010
 80047d8:	20000000 	.word	0x20000000
 80047dc:	053e2d63 	.word	0x053e2d63
 80047e0:	c7520000 	.word	0xc7520000
 80047e4:	50000100 	.word	0x50000100
 80047e8:	cb840000 	.word	0xcb840000

080047ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80047ec:	b590      	push	{r4, r7, lr}
 80047ee:	b0a1      	sub	sp, #132	@ 0x84
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004806:	2302      	movs	r3, #2
 8004808:	e08b      	b.n	8004922 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004812:	2300      	movs	r3, #0
 8004814:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004816:	2300      	movs	r3, #0
 8004818:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004822:	d102      	bne.n	800482a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004824:	4b41      	ldr	r3, [pc, #260]	@ (800492c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004826:	60bb      	str	r3, [r7, #8]
 8004828:	e001      	b.n	800482e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800482a:	2300      	movs	r3, #0
 800482c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10b      	bne.n	800484c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004838:	f043 0220 	orr.w	r2, r3, #32
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e06a      	b.n	8004922 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff f892 	bl	8003978 <LL_ADC_REG_IsConversionOngoing>
 8004854:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff f88c 	bl	8003978 <LL_ADC_REG_IsConversionOngoing>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d14c      	bne.n	8004900 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004866:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004868:	2b00      	cmp	r3, #0
 800486a:	d149      	bne.n	8004900 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800486c:	4b30      	ldr	r3, [pc, #192]	@ (8004930 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800486e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d028      	beq.n	80048ca <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004878:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6859      	ldr	r1, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800488a:	035b      	lsls	r3, r3, #13
 800488c:	430b      	orrs	r3, r1
 800488e:	431a      	orrs	r2, r3
 8004890:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004892:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004894:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004898:	f7ff f82e 	bl	80038f8 <LL_ADC_IsEnabled>
 800489c:	4604      	mov	r4, r0
 800489e:	4823      	ldr	r0, [pc, #140]	@ (800492c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80048a0:	f7ff f82a 	bl	80038f8 <LL_ADC_IsEnabled>
 80048a4:	4603      	mov	r3, r0
 80048a6:	4323      	orrs	r3, r4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d133      	bne.n	8004914 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80048ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80048b4:	f023 030f 	bic.w	r3, r3, #15
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	6811      	ldr	r1, [r2, #0]
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	6892      	ldr	r2, [r2, #8]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	431a      	orrs	r2, r3
 80048c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048c6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048c8:	e024      	b.n	8004914 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80048ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048d4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048d6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80048da:	f7ff f80d 	bl	80038f8 <LL_ADC_IsEnabled>
 80048de:	4604      	mov	r4, r0
 80048e0:	4812      	ldr	r0, [pc, #72]	@ (800492c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80048e2:	f7ff f809 	bl	80038f8 <LL_ADC_IsEnabled>
 80048e6:	4603      	mov	r3, r0
 80048e8:	4323      	orrs	r3, r4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d112      	bne.n	8004914 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80048ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80048f6:	f023 030f 	bic.w	r3, r3, #15
 80048fa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80048fc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048fe:	e009      	b.n	8004914 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004904:	f043 0220 	orr.w	r2, r3, #32
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004912:	e000      	b.n	8004916 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004914:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800491e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004922:	4618      	mov	r0, r3
 8004924:	3784      	adds	r7, #132	@ 0x84
 8004926:	46bd      	mov	sp, r7
 8004928:	bd90      	pop	{r4, r7, pc}
 800492a:	bf00      	nop
 800492c:	50000100 	.word	0x50000100
 8004930:	50000300 	.word	0x50000300

08004934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004944:	4b0c      	ldr	r3, [pc, #48]	@ (8004978 <__NVIC_SetPriorityGrouping+0x44>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004950:	4013      	ands	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800495c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004966:	4a04      	ldr	r2, [pc, #16]	@ (8004978 <__NVIC_SetPriorityGrouping+0x44>)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	60d3      	str	r3, [r2, #12]
}
 800496c:	bf00      	nop
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	e000ed00 	.word	0xe000ed00

0800497c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004980:	4b04      	ldr	r3, [pc, #16]	@ (8004994 <__NVIC_GetPriorityGrouping+0x18>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	0a1b      	lsrs	r3, r3, #8
 8004986:	f003 0307 	and.w	r3, r3, #7
}
 800498a:	4618      	mov	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	e000ed00 	.word	0xe000ed00

08004998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	db0b      	blt.n	80049c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	f003 021f 	and.w	r2, r3, #31
 80049b0:	4907      	ldr	r1, [pc, #28]	@ (80049d0 <__NVIC_EnableIRQ+0x38>)
 80049b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	2001      	movs	r0, #1
 80049ba:	fa00 f202 	lsl.w	r2, r0, r2
 80049be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	e000e100 	.word	0xe000e100

080049d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	6039      	str	r1, [r7, #0]
 80049de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	db0a      	blt.n	80049fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	490c      	ldr	r1, [pc, #48]	@ (8004a20 <__NVIC_SetPriority+0x4c>)
 80049ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f2:	0112      	lsls	r2, r2, #4
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	440b      	add	r3, r1
 80049f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049fc:	e00a      	b.n	8004a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	4908      	ldr	r1, [pc, #32]	@ (8004a24 <__NVIC_SetPriority+0x50>)
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	3b04      	subs	r3, #4
 8004a0c:	0112      	lsls	r2, r2, #4
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	440b      	add	r3, r1
 8004a12:	761a      	strb	r2, [r3, #24]
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	e000e100 	.word	0xe000e100
 8004a24:	e000ed00 	.word	0xe000ed00

08004a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b089      	sub	sp, #36	@ 0x24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f1c3 0307 	rsb	r3, r3, #7
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	bf28      	it	cs
 8004a46:	2304      	movcs	r3, #4
 8004a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	2b06      	cmp	r3, #6
 8004a50:	d902      	bls.n	8004a58 <NVIC_EncodePriority+0x30>
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	3b03      	subs	r3, #3
 8004a56:	e000      	b.n	8004a5a <NVIC_EncodePriority+0x32>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43da      	mvns	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	401a      	ands	r2, r3
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a70:	f04f 31ff 	mov.w	r1, #4294967295
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7a:	43d9      	mvns	r1, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a80:	4313      	orrs	r3, r2
         );
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3724      	adds	r7, #36	@ 0x24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aa0:	d301      	bcc.n	8004aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e00f      	b.n	8004ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad0 <SysTick_Config+0x40>)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004aae:	210f      	movs	r1, #15
 8004ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab4:	f7ff ff8e 	bl	80049d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ab8:	4b05      	ldr	r3, [pc, #20]	@ (8004ad0 <SysTick_Config+0x40>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004abe:	4b04      	ldr	r3, [pc, #16]	@ (8004ad0 <SysTick_Config+0x40>)
 8004ac0:	2207      	movs	r2, #7
 8004ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	e000e010 	.word	0xe000e010

08004ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ff29 	bl	8004934 <__NVIC_SetPriorityGrouping>
}
 8004ae2:	bf00      	nop
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	4603      	mov	r3, r0
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004af8:	f7ff ff40 	bl	800497c <__NVIC_GetPriorityGrouping>
 8004afc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	6978      	ldr	r0, [r7, #20]
 8004b04:	f7ff ff90 	bl	8004a28 <NVIC_EncodePriority>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff ff5f 	bl	80049d4 <__NVIC_SetPriority>
}
 8004b16:	bf00      	nop
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	4603      	mov	r3, r0
 8004b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff ff33 	bl	8004998 <__NVIC_EnableIRQ>
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff ffa4 	bl	8004a90 <SysTick_Config>
 8004b48:	4603      	mov	r3, r0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e08d      	b.n	8004c82 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4b47      	ldr	r3, [pc, #284]	@ (8004c8c <HAL_DMA_Init+0x138>)
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d80f      	bhi.n	8004b92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	4b45      	ldr	r3, [pc, #276]	@ (8004c90 <HAL_DMA_Init+0x13c>)
 8004b7a:	4413      	add	r3, r2
 8004b7c:	4a45      	ldr	r2, [pc, #276]	@ (8004c94 <HAL_DMA_Init+0x140>)
 8004b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b82:	091b      	lsrs	r3, r3, #4
 8004b84:	009a      	lsls	r2, r3, #2
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a42      	ldr	r2, [pc, #264]	@ (8004c98 <HAL_DMA_Init+0x144>)
 8004b8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b90:	e00e      	b.n	8004bb0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	4b40      	ldr	r3, [pc, #256]	@ (8004c9c <HAL_DMA_Init+0x148>)
 8004b9a:	4413      	add	r3, r2
 8004b9c:	4a3d      	ldr	r2, [pc, #244]	@ (8004c94 <HAL_DMA_Init+0x140>)
 8004b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba2:	091b      	lsrs	r3, r3, #4
 8004ba4:	009a      	lsls	r2, r3, #2
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a3c      	ldr	r2, [pc, #240]	@ (8004ca0 <HAL_DMA_Init+0x14c>)
 8004bae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fa76 	bl	80050f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c10:	d102      	bne.n	8004c18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c2c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d010      	beq.n	8004c58 <HAL_DMA_Init+0x104>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d80c      	bhi.n	8004c58 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fa96 	bl	8005170 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c54:	605a      	str	r2, [r3, #4]
 8004c56:	e008      	b.n	8004c6a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40020407 	.word	0x40020407
 8004c90:	bffdfff8 	.word	0xbffdfff8
 8004c94:	cccccccd 	.word	0xcccccccd
 8004c98:	40020000 	.word	0x40020000
 8004c9c:	bffdfbf8 	.word	0xbffdfbf8
 8004ca0:	40020400 	.word	0x40020400

08004ca4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_DMA_Start_IT+0x20>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e066      	b.n	8004d92 <HAL_DMA_Start_IT+0xee>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d155      	bne.n	8004d84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0201 	bic.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f9bb 	bl	8005078 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d008      	beq.n	8004d1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 020e 	orr.w	r2, r2, #14
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	e00f      	b.n	8004d3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0204 	bic.w	r2, r2, #4
 8004d2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 020a 	orr.w	r2, r2, #10
 8004d3a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d58:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d70:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0201 	orr.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	e005      	b.n	8004d90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d005      	beq.n	8004dbe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2204      	movs	r2, #4
 8004db6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
 8004dbc:	e037      	b.n	8004e2e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 020e 	bic.w	r2, r2, #14
 8004dcc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ddc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0201 	bic.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df2:	f003 021f 	and.w	r2, r3, #31
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8004e00:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e0a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00c      	beq.n	8004e2e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e22:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e2c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d00d      	beq.n	8004e80 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2204      	movs	r2, #4
 8004e68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
 8004e7e:	e047      	b.n	8004f10 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 020e 	bic.w	r2, r2, #14
 8004e8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0201 	bic.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eaa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004eae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb4:	f003 021f 	and.w	r2, r3, #31
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ecc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00c      	beq.n	8004ef0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ee4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004eee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	4798      	blx	r3
    }
  }
  return status;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f36:	f003 031f 	and.w	r3, r3, #31
 8004f3a:	2204      	movs	r2, #4
 8004f3c:	409a      	lsls	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d026      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x7a>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d021      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d107      	bne.n	8004f6e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0204 	bic.w	r2, r2, #4
 8004f6c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f72:	f003 021f 	and.w	r2, r3, #31
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7a:	2104      	movs	r1, #4
 8004f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f80:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d071      	beq.n	800506e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004f92:	e06c      	b.n	800506e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	409a      	lsls	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d02e      	beq.n	8005006 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d029      	beq.n	8005006 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10b      	bne.n	8004fd8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 020a 	bic.w	r2, r2, #10
 8004fce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fdc:	f003 021f 	and.w	r2, r3, #31
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe4:	2102      	movs	r1, #2
 8004fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8004fea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d038      	beq.n	800506e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005004:	e033      	b.n	800506e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500a:	f003 031f 	and.w	r3, r3, #31
 800500e:	2208      	movs	r2, #8
 8005010:	409a      	lsls	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4013      	ands	r3, r2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d02a      	beq.n	8005070 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d025      	beq.n	8005070 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 020e 	bic.w	r2, r2, #14
 8005032:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005038:	f003 021f 	and.w	r2, r3, #31
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005040:	2101      	movs	r1, #1
 8005042:	fa01 f202 	lsl.w	r2, r1, r2
 8005046:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005062:	2b00      	cmp	r3, #0
 8005064:	d004      	beq.n	8005070 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800506e:	bf00      	nop
 8005070:	bf00      	nop
}
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800508e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005094:	2b00      	cmp	r3, #0
 8005096:	d004      	beq.n	80050a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80050a0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a6:	f003 021f 	and.w	r2, r3, #31
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ae:	2101      	movs	r1, #1
 80050b0:	fa01 f202 	lsl.w	r2, r1, r2
 80050b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b10      	cmp	r3, #16
 80050c4:	d108      	bne.n	80050d8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80050d6:	e007      	b.n	80050e8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	60da      	str	r2, [r3, #12]
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	461a      	mov	r2, r3
 8005102:	4b16      	ldr	r3, [pc, #88]	@ (800515c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005104:	429a      	cmp	r2, r3
 8005106:	d802      	bhi.n	800510e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005108:	4b15      	ldr	r3, [pc, #84]	@ (8005160 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	e001      	b.n	8005112 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800510e:	4b15      	ldr	r3, [pc, #84]	@ (8005164 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005110:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	3b08      	subs	r3, #8
 800511e:	4a12      	ldr	r2, [pc, #72]	@ (8005168 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005120:	fba2 2303 	umull	r2, r3, r2, r3
 8005124:	091b      	lsrs	r3, r3, #4
 8005126:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512c:	089b      	lsrs	r3, r3, #2
 800512e:	009a      	lsls	r2, r3, #2
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4413      	add	r3, r2
 8005134:	461a      	mov	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a0b      	ldr	r2, [pc, #44]	@ (800516c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800513e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	2201      	movs	r2, #1
 8005148:	409a      	lsls	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800514e:	bf00      	nop
 8005150:	371c      	adds	r7, #28
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40020407 	.word	0x40020407
 8005160:	40020800 	.word	0x40020800
 8005164:	40020820 	.word	0x40020820
 8005168:	cccccccd 	.word	0xcccccccd
 800516c:	40020880 	.word	0x40020880

08005170 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4b0b      	ldr	r3, [pc, #44]	@ (80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	461a      	mov	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a08      	ldr	r2, [pc, #32]	@ (80051b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005192:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3b01      	subs	r3, #1
 8005198:	f003 031f 	and.w	r3, r3, #31
 800519c:	2201      	movs	r2, #1
 800519e:	409a      	lsls	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80051a4:	bf00      	nop
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	1000823f 	.word	0x1000823f
 80051b4:	40020940 	.word	0x40020940

080051b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80051c6:	e15a      	b.n	800547e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	2101      	movs	r1, #1
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	fa01 f303 	lsl.w	r3, r1, r3
 80051d4:	4013      	ands	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 814c 	beq.w	8005478 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d005      	beq.n	80051f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d130      	bne.n	800525a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	2203      	movs	r2, #3
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	43db      	mvns	r3, r3
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4013      	ands	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800522e:	2201      	movs	r2, #1
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	43db      	mvns	r3, r3
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4013      	ands	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	091b      	lsrs	r3, r3, #4
 8005244:	f003 0201 	and.w	r2, r3, #1
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	2b03      	cmp	r3, #3
 8005264:	d017      	beq.n	8005296 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	2203      	movs	r2, #3
 8005272:	fa02 f303 	lsl.w	r3, r2, r3
 8005276:	43db      	mvns	r3, r3
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4013      	ands	r3, r2
 800527c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d123      	bne.n	80052ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	08da      	lsrs	r2, r3, #3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3208      	adds	r2, #8
 80052aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	220f      	movs	r2, #15
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	43db      	mvns	r3, r3
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4013      	ands	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	691a      	ldr	r2, [r3, #16]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	08da      	lsrs	r2, r3, #3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3208      	adds	r2, #8
 80052e4:	6939      	ldr	r1, [r7, #16]
 80052e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	2203      	movs	r2, #3
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	43db      	mvns	r3, r3
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4013      	ands	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f003 0203 	and.w	r2, r3, #3
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 80a6 	beq.w	8005478 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800532c:	4b5b      	ldr	r3, [pc, #364]	@ (800549c <HAL_GPIO_Init+0x2e4>)
 800532e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005330:	4a5a      	ldr	r2, [pc, #360]	@ (800549c <HAL_GPIO_Init+0x2e4>)
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	6613      	str	r3, [r2, #96]	@ 0x60
 8005338:	4b58      	ldr	r3, [pc, #352]	@ (800549c <HAL_GPIO_Init+0x2e4>)
 800533a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005344:	4a56      	ldr	r2, [pc, #344]	@ (80054a0 <HAL_GPIO_Init+0x2e8>)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	089b      	lsrs	r3, r3, #2
 800534a:	3302      	adds	r3, #2
 800534c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f003 0303 	and.w	r3, r3, #3
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	220f      	movs	r2, #15
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	43db      	mvns	r3, r3
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4013      	ands	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800536e:	d01f      	beq.n	80053b0 <HAL_GPIO_Init+0x1f8>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a4c      	ldr	r2, [pc, #304]	@ (80054a4 <HAL_GPIO_Init+0x2ec>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d019      	beq.n	80053ac <HAL_GPIO_Init+0x1f4>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a4b      	ldr	r2, [pc, #300]	@ (80054a8 <HAL_GPIO_Init+0x2f0>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d013      	beq.n	80053a8 <HAL_GPIO_Init+0x1f0>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a4a      	ldr	r2, [pc, #296]	@ (80054ac <HAL_GPIO_Init+0x2f4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00d      	beq.n	80053a4 <HAL_GPIO_Init+0x1ec>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a49      	ldr	r2, [pc, #292]	@ (80054b0 <HAL_GPIO_Init+0x2f8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d007      	beq.n	80053a0 <HAL_GPIO_Init+0x1e8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a48      	ldr	r2, [pc, #288]	@ (80054b4 <HAL_GPIO_Init+0x2fc>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d101      	bne.n	800539c <HAL_GPIO_Init+0x1e4>
 8005398:	2305      	movs	r3, #5
 800539a:	e00a      	b.n	80053b2 <HAL_GPIO_Init+0x1fa>
 800539c:	2306      	movs	r3, #6
 800539e:	e008      	b.n	80053b2 <HAL_GPIO_Init+0x1fa>
 80053a0:	2304      	movs	r3, #4
 80053a2:	e006      	b.n	80053b2 <HAL_GPIO_Init+0x1fa>
 80053a4:	2303      	movs	r3, #3
 80053a6:	e004      	b.n	80053b2 <HAL_GPIO_Init+0x1fa>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e002      	b.n	80053b2 <HAL_GPIO_Init+0x1fa>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <HAL_GPIO_Init+0x1fa>
 80053b0:	2300      	movs	r3, #0
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	f002 0203 	and.w	r2, r2, #3
 80053b8:	0092      	lsls	r2, r2, #2
 80053ba:	4093      	lsls	r3, r2
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053c2:	4937      	ldr	r1, [pc, #220]	@ (80054a0 <HAL_GPIO_Init+0x2e8>)
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	089b      	lsrs	r3, r3, #2
 80053c8:	3302      	adds	r3, #2
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053d0:	4b39      	ldr	r3, [pc, #228]	@ (80054b8 <HAL_GPIO_Init+0x300>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	43db      	mvns	r3, r3
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4013      	ands	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80053f4:	4a30      	ldr	r2, [pc, #192]	@ (80054b8 <HAL_GPIO_Init+0x300>)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80053fa:	4b2f      	ldr	r3, [pc, #188]	@ (80054b8 <HAL_GPIO_Init+0x300>)
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	43db      	mvns	r3, r3
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4013      	ands	r3, r2
 8005408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800541e:	4a26      	ldr	r2, [pc, #152]	@ (80054b8 <HAL_GPIO_Init+0x300>)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005424:	4b24      	ldr	r3, [pc, #144]	@ (80054b8 <HAL_GPIO_Init+0x300>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	43db      	mvns	r3, r3
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4013      	ands	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005448:	4a1b      	ldr	r2, [pc, #108]	@ (80054b8 <HAL_GPIO_Init+0x300>)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800544e:	4b1a      	ldr	r3, [pc, #104]	@ (80054b8 <HAL_GPIO_Init+0x300>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	43db      	mvns	r3, r3
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4013      	ands	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005472:	4a11      	ldr	r2, [pc, #68]	@ (80054b8 <HAL_GPIO_Init+0x300>)
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	3301      	adds	r3, #1
 800547c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	f47f ae9d 	bne.w	80051c8 <HAL_GPIO_Init+0x10>
  }
}
 800548e:	bf00      	nop
 8005490:	bf00      	nop
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	40021000 	.word	0x40021000
 80054a0:	40010000 	.word	0x40010000
 80054a4:	48000400 	.word	0x48000400
 80054a8:	48000800 	.word	0x48000800
 80054ac:	48000c00 	.word	0x48000c00
 80054b0:	48001000 	.word	0x48001000
 80054b4:	48001400 	.word	0x48001400
 80054b8:	40010400 	.word	0x40010400

080054bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	807b      	strh	r3, [r7, #2]
 80054c8:	4613      	mov	r3, r2
 80054ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054cc:	787b      	ldrb	r3, [r7, #1]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054d2:	887a      	ldrh	r2, [r7, #2]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80054d8:	e002      	b.n	80054e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054da:	887a      	ldrh	r2, [r7, #2]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80054f6:	4b08      	ldr	r3, [pc, #32]	@ (8005518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054f8:	695a      	ldr	r2, [r3, #20]
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	4013      	ands	r3, r2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d006      	beq.n	8005510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005502:	4a05      	ldr	r2, [pc, #20]	@ (8005518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005504:	88fb      	ldrh	r3, [r7, #6]
 8005506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	4618      	mov	r0, r3
 800550c:	f004 fe64 	bl	800a1d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40010400 	.word	0x40010400

0800551c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d141      	bne.n	80055ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800552a:	4b4b      	ldr	r3, [pc, #300]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005536:	d131      	bne.n	800559c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005538:	4b47      	ldr	r3, [pc, #284]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800553a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800553e:	4a46      	ldr	r2, [pc, #280]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005544:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005548:	4b43      	ldr	r3, [pc, #268]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005550:	4a41      	ldr	r2, [pc, #260]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005552:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005556:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005558:	4b40      	ldr	r3, [pc, #256]	@ (800565c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2232      	movs	r2, #50	@ 0x32
 800555e:	fb02 f303 	mul.w	r3, r2, r3
 8005562:	4a3f      	ldr	r2, [pc, #252]	@ (8005660 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005564:	fba2 2303 	umull	r2, r3, r2, r3
 8005568:	0c9b      	lsrs	r3, r3, #18
 800556a:	3301      	adds	r3, #1
 800556c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800556e:	e002      	b.n	8005576 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3b01      	subs	r3, #1
 8005574:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005576:	4b38      	ldr	r3, [pc, #224]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800557e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005582:	d102      	bne.n	800558a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f2      	bne.n	8005570 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800558a:	4b33      	ldr	r3, [pc, #204]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005596:	d158      	bne.n	800564a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e057      	b.n	800564c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800559c:	4b2e      	ldr	r3, [pc, #184]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800559e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80055ac:	e04d      	b.n	800564a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055b4:	d141      	bne.n	800563a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055b6:	4b28      	ldr	r3, [pc, #160]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80055be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055c2:	d131      	bne.n	8005628 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055c4:	4b24      	ldr	r3, [pc, #144]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ca:	4a23      	ldr	r2, [pc, #140]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055d4:	4b20      	ldr	r3, [pc, #128]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80055dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80055e4:	4b1d      	ldr	r3, [pc, #116]	@ (800565c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2232      	movs	r2, #50	@ 0x32
 80055ea:	fb02 f303 	mul.w	r3, r2, r3
 80055ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005660 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80055f0:	fba2 2303 	umull	r2, r3, r2, r3
 80055f4:	0c9b      	lsrs	r3, r3, #18
 80055f6:	3301      	adds	r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055fa:	e002      	b.n	8005602 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3b01      	subs	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005602:	4b15      	ldr	r3, [pc, #84]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800560a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800560e:	d102      	bne.n	8005616 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f2      	bne.n	80055fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005616:	4b10      	ldr	r3, [pc, #64]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800561e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005622:	d112      	bne.n	800564a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e011      	b.n	800564c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005628:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800562a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800562e:	4a0a      	ldr	r2, [pc, #40]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005634:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005638:	e007      	b.n	800564a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800563a:	4b07      	ldr	r3, [pc, #28]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005642:	4a05      	ldr	r2, [pc, #20]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005644:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005648:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	40007000 	.word	0x40007000
 800565c:	20000000 	.word	0x20000000
 8005660:	431bde83 	.word	0x431bde83

08005664 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005668:	4b05      	ldr	r3, [pc, #20]	@ (8005680 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	4a04      	ldr	r2, [pc, #16]	@ (8005680 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800566e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005672:	6093      	str	r3, [r2, #8]
}
 8005674:	bf00      	nop
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40007000 	.word	0x40007000

08005684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e2fe      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d075      	beq.n	800578e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056a2:	4b97      	ldr	r3, [pc, #604]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 030c 	and.w	r3, r3, #12
 80056aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056ac:	4b94      	ldr	r3, [pc, #592]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0303 	and.w	r3, r3, #3
 80056b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	2b0c      	cmp	r3, #12
 80056ba:	d102      	bne.n	80056c2 <HAL_RCC_OscConfig+0x3e>
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d002      	beq.n	80056c8 <HAL_RCC_OscConfig+0x44>
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d10b      	bne.n	80056e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c8:	4b8d      	ldr	r3, [pc, #564]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d05b      	beq.n	800578c <HAL_RCC_OscConfig+0x108>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d157      	bne.n	800578c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e2d9      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e8:	d106      	bne.n	80056f8 <HAL_RCC_OscConfig+0x74>
 80056ea:	4b85      	ldr	r3, [pc, #532]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a84      	ldr	r2, [pc, #528]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 80056f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e01d      	b.n	8005734 <HAL_RCC_OscConfig+0xb0>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005700:	d10c      	bne.n	800571c <HAL_RCC_OscConfig+0x98>
 8005702:	4b7f      	ldr	r3, [pc, #508]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a7e      	ldr	r2, [pc, #504]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 8005708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	4b7c      	ldr	r3, [pc, #496]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a7b      	ldr	r2, [pc, #492]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 8005714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e00b      	b.n	8005734 <HAL_RCC_OscConfig+0xb0>
 800571c:	4b78      	ldr	r3, [pc, #480]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a77      	ldr	r2, [pc, #476]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 8005722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	4b75      	ldr	r3, [pc, #468]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a74      	ldr	r2, [pc, #464]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 800572e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d013      	beq.n	8005764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573c:	f7fc fcc2 	bl	80020c4 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005744:	f7fc fcbe 	bl	80020c4 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b64      	cmp	r3, #100	@ 0x64
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e29e      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005756:	4b6a      	ldr	r3, [pc, #424]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCC_OscConfig+0xc0>
 8005762:	e014      	b.n	800578e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005764:	f7fc fcae 	bl	80020c4 <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800576c:	f7fc fcaa 	bl	80020c4 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b64      	cmp	r3, #100	@ 0x64
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e28a      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800577e:	4b60      	ldr	r3, [pc, #384]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <HAL_RCC_OscConfig+0xe8>
 800578a:	e000      	b.n	800578e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800578c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d075      	beq.n	8005886 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800579a:	4b59      	ldr	r3, [pc, #356]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 030c 	and.w	r3, r3, #12
 80057a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057a4:	4b56      	ldr	r3, [pc, #344]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0303 	and.w	r3, r3, #3
 80057ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	2b0c      	cmp	r3, #12
 80057b2:	d102      	bne.n	80057ba <HAL_RCC_OscConfig+0x136>
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d002      	beq.n	80057c0 <HAL_RCC_OscConfig+0x13c>
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d11f      	bne.n	8005800 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_OscConfig+0x154>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e25d      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d8:	4b49      	ldr	r3, [pc, #292]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	061b      	lsls	r3, r3, #24
 80057e6:	4946      	ldr	r1, [pc, #280]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80057ec:	4b45      	ldr	r3, [pc, #276]	@ (8005904 <HAL_RCC_OscConfig+0x280>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fc fc1b 	bl	800202c <HAL_InitTick>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d043      	beq.n	8005884 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e249      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d023      	beq.n	8005850 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005808:	4b3d      	ldr	r3, [pc, #244]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a3c      	ldr	r2, [pc, #240]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 800580e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005814:	f7fc fc56 	bl	80020c4 <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800581c:	f7fc fc52 	bl	80020c4 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e232      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800582e:	4b34      	ldr	r3, [pc, #208]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0f0      	beq.n	800581c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800583a:	4b31      	ldr	r3, [pc, #196]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	061b      	lsls	r3, r3, #24
 8005848:	492d      	ldr	r1, [pc, #180]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 800584a:	4313      	orrs	r3, r2
 800584c:	604b      	str	r3, [r1, #4]
 800584e:	e01a      	b.n	8005886 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005850:	4b2b      	ldr	r3, [pc, #172]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a2a      	ldr	r2, [pc, #168]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 8005856:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800585a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585c:	f7fc fc32 	bl	80020c4 <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005864:	f7fc fc2e 	bl	80020c4 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e20e      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005876:	4b22      	ldr	r3, [pc, #136]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f0      	bne.n	8005864 <HAL_RCC_OscConfig+0x1e0>
 8005882:	e000      	b.n	8005886 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005884:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d041      	beq.n	8005916 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d01c      	beq.n	80058d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800589a:	4b19      	ldr	r3, [pc, #100]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 800589c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058a0:	4a17      	ldr	r2, [pc, #92]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 80058a2:	f043 0301 	orr.w	r3, r3, #1
 80058a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058aa:	f7fc fc0b 	bl	80020c4 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058b2:	f7fc fc07 	bl	80020c4 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e1e7      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 80058c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0ef      	beq.n	80058b2 <HAL_RCC_OscConfig+0x22e>
 80058d2:	e020      	b.n	8005916 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 80058d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058da:	4a09      	ldr	r2, [pc, #36]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 80058dc:	f023 0301 	bic.w	r3, r3, #1
 80058e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e4:	f7fc fbee 	bl	80020c4 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058ea:	e00d      	b.n	8005908 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058ec:	f7fc fbea 	bl	80020c4 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d906      	bls.n	8005908 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e1ca      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
 80058fe:	bf00      	nop
 8005900:	40021000 	.word	0x40021000
 8005904:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005908:	4b8c      	ldr	r3, [pc, #560]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 800590a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1ea      	bne.n	80058ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 80a6 	beq.w	8005a70 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005924:	2300      	movs	r3, #0
 8005926:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005928:	4b84      	ldr	r3, [pc, #528]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 800592a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800592c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <HAL_RCC_OscConfig+0x2b4>
 8005934:	2301      	movs	r3, #1
 8005936:	e000      	b.n	800593a <HAL_RCC_OscConfig+0x2b6>
 8005938:	2300      	movs	r3, #0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00d      	beq.n	800595a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800593e:	4b7f      	ldr	r3, [pc, #508]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 8005940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005942:	4a7e      	ldr	r2, [pc, #504]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 8005944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005948:	6593      	str	r3, [r2, #88]	@ 0x58
 800594a:	4b7c      	ldr	r3, [pc, #496]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 800594c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005956:	2301      	movs	r3, #1
 8005958:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800595a:	4b79      	ldr	r3, [pc, #484]	@ (8005b40 <HAL_RCC_OscConfig+0x4bc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d118      	bne.n	8005998 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005966:	4b76      	ldr	r3, [pc, #472]	@ (8005b40 <HAL_RCC_OscConfig+0x4bc>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a75      	ldr	r2, [pc, #468]	@ (8005b40 <HAL_RCC_OscConfig+0x4bc>)
 800596c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005972:	f7fc fba7 	bl	80020c4 <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597a:	f7fc fba3 	bl	80020c4 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e183      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800598c:	4b6c      	ldr	r3, [pc, #432]	@ (8005b40 <HAL_RCC_OscConfig+0x4bc>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f0      	beq.n	800597a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d108      	bne.n	80059b2 <HAL_RCC_OscConfig+0x32e>
 80059a0:	4b66      	ldr	r3, [pc, #408]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 80059a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a6:	4a65      	ldr	r2, [pc, #404]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059b0:	e024      	b.n	80059fc <HAL_RCC_OscConfig+0x378>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b05      	cmp	r3, #5
 80059b8:	d110      	bne.n	80059dc <HAL_RCC_OscConfig+0x358>
 80059ba:	4b60      	ldr	r3, [pc, #384]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 80059bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c0:	4a5e      	ldr	r2, [pc, #376]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 80059c2:	f043 0304 	orr.w	r3, r3, #4
 80059c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059ca:	4b5c      	ldr	r3, [pc, #368]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 80059cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d0:	4a5a      	ldr	r2, [pc, #360]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 80059d2:	f043 0301 	orr.w	r3, r3, #1
 80059d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059da:	e00f      	b.n	80059fc <HAL_RCC_OscConfig+0x378>
 80059dc:	4b57      	ldr	r3, [pc, #348]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 80059de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e2:	4a56      	ldr	r2, [pc, #344]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 80059e4:	f023 0301 	bic.w	r3, r3, #1
 80059e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059ec:	4b53      	ldr	r3, [pc, #332]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f2:	4a52      	ldr	r2, [pc, #328]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 80059f4:	f023 0304 	bic.w	r3, r3, #4
 80059f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d016      	beq.n	8005a32 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a04:	f7fc fb5e 	bl	80020c4 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a0a:	e00a      	b.n	8005a22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a0c:	f7fc fb5a 	bl	80020c4 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e138      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a22:	4b46      	ldr	r3, [pc, #280]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 8005a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0ed      	beq.n	8005a0c <HAL_RCC_OscConfig+0x388>
 8005a30:	e015      	b.n	8005a5e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a32:	f7fc fb47 	bl	80020c4 <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a38:	e00a      	b.n	8005a50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3a:	f7fc fb43 	bl	80020c4 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e121      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a50:	4b3a      	ldr	r3, [pc, #232]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 8005a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1ed      	bne.n	8005a3a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a5e:	7ffb      	ldrb	r3, [r7, #31]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d105      	bne.n	8005a70 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a64:	4b35      	ldr	r3, [pc, #212]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 8005a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a68:	4a34      	ldr	r2, [pc, #208]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 8005a6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a6e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d03c      	beq.n	8005af6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01c      	beq.n	8005abe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a84:	4b2d      	ldr	r3, [pc, #180]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 8005a86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 8005a8c:	f043 0301 	orr.w	r3, r3, #1
 8005a90:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a94:	f7fc fb16 	bl	80020c4 <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a9c:	f7fc fb12 	bl	80020c4 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e0f2      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aae:	4b23      	ldr	r3, [pc, #140]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 8005ab0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0ef      	beq.n	8005a9c <HAL_RCC_OscConfig+0x418>
 8005abc:	e01b      	b.n	8005af6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005abe:	4b1f      	ldr	r3, [pc, #124]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 8005ac0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 8005ac6:	f023 0301 	bic.w	r3, r3, #1
 8005aca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ace:	f7fc faf9 	bl	80020c4 <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ad6:	f7fc faf5 	bl	80020c4 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e0d5      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ae8:	4b14      	ldr	r3, [pc, #80]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 8005aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1ef      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80c9 	beq.w	8005c92 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b00:	4b0e      	ldr	r3, [pc, #56]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 030c 	and.w	r3, r3, #12
 8005b08:	2b0c      	cmp	r3, #12
 8005b0a:	f000 8083 	beq.w	8005c14 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d15e      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b16:	4b09      	ldr	r3, [pc, #36]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a08      	ldr	r2, [pc, #32]	@ (8005b3c <HAL_RCC_OscConfig+0x4b8>)
 8005b1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b22:	f7fc facf 	bl	80020c4 <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b28:	e00c      	b.n	8005b44 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b2a:	f7fc facb 	bl	80020c4 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d905      	bls.n	8005b44 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e0ab      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b44:	4b55      	ldr	r3, [pc, #340]	@ (8005c9c <HAL_RCC_OscConfig+0x618>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1ec      	bne.n	8005b2a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b50:	4b52      	ldr	r3, [pc, #328]	@ (8005c9c <HAL_RCC_OscConfig+0x618>)
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	4b52      	ldr	r3, [pc, #328]	@ (8005ca0 <HAL_RCC_OscConfig+0x61c>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6a11      	ldr	r1, [r2, #32]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b60:	3a01      	subs	r2, #1
 8005b62:	0112      	lsls	r2, r2, #4
 8005b64:	4311      	orrs	r1, r2
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005b6a:	0212      	lsls	r2, r2, #8
 8005b6c:	4311      	orrs	r1, r2
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005b72:	0852      	lsrs	r2, r2, #1
 8005b74:	3a01      	subs	r2, #1
 8005b76:	0552      	lsls	r2, r2, #21
 8005b78:	4311      	orrs	r1, r2
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005b7e:	0852      	lsrs	r2, r2, #1
 8005b80:	3a01      	subs	r2, #1
 8005b82:	0652      	lsls	r2, r2, #25
 8005b84:	4311      	orrs	r1, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005b8a:	06d2      	lsls	r2, r2, #27
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	4943      	ldr	r1, [pc, #268]	@ (8005c9c <HAL_RCC_OscConfig+0x618>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b94:	4b41      	ldr	r3, [pc, #260]	@ (8005c9c <HAL_RCC_OscConfig+0x618>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a40      	ldr	r2, [pc, #256]	@ (8005c9c <HAL_RCC_OscConfig+0x618>)
 8005b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b9e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ba0:	4b3e      	ldr	r3, [pc, #248]	@ (8005c9c <HAL_RCC_OscConfig+0x618>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4a3d      	ldr	r2, [pc, #244]	@ (8005c9c <HAL_RCC_OscConfig+0x618>)
 8005ba6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005baa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bac:	f7fc fa8a 	bl	80020c4 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb4:	f7fc fa86 	bl	80020c4 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e066      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bc6:	4b35      	ldr	r3, [pc, #212]	@ (8005c9c <HAL_RCC_OscConfig+0x618>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f0      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x530>
 8005bd2:	e05e      	b.n	8005c92 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd4:	4b31      	ldr	r3, [pc, #196]	@ (8005c9c <HAL_RCC_OscConfig+0x618>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a30      	ldr	r2, [pc, #192]	@ (8005c9c <HAL_RCC_OscConfig+0x618>)
 8005bda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be0:	f7fc fa70 	bl	80020c4 <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be8:	f7fc fa6c 	bl	80020c4 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e04c      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bfa:	4b28      	ldr	r3, [pc, #160]	@ (8005c9c <HAL_RCC_OscConfig+0x618>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f0      	bne.n	8005be8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005c06:	4b25      	ldr	r3, [pc, #148]	@ (8005c9c <HAL_RCC_OscConfig+0x618>)
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	4924      	ldr	r1, [pc, #144]	@ (8005c9c <HAL_RCC_OscConfig+0x618>)
 8005c0c:	4b25      	ldr	r3, [pc, #148]	@ (8005ca4 <HAL_RCC_OscConfig+0x620>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	60cb      	str	r3, [r1, #12]
 8005c12:	e03e      	b.n	8005c92 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e039      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005c20:	4b1e      	ldr	r3, [pc, #120]	@ (8005c9c <HAL_RCC_OscConfig+0x618>)
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f003 0203 	and.w	r2, r3, #3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d12c      	bne.n	8005c8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d123      	bne.n	8005c8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d11b      	bne.n	8005c8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d113      	bne.n	8005c8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c70:	085b      	lsrs	r3, r3, #1
 8005c72:	3b01      	subs	r3, #1
 8005c74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d109      	bne.n	8005c8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c84:	085b      	lsrs	r3, r3, #1
 8005c86:	3b01      	subs	r3, #1
 8005c88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d001      	beq.n	8005c92 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3720      	adds	r7, #32
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	019f800c 	.word	0x019f800c
 8005ca4:	feeefffc 	.word	0xfeeefffc

08005ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e11e      	b.n	8005efe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cc0:	4b91      	ldr	r3, [pc, #580]	@ (8005f08 <HAL_RCC_ClockConfig+0x260>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d910      	bls.n	8005cf0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cce:	4b8e      	ldr	r3, [pc, #568]	@ (8005f08 <HAL_RCC_ClockConfig+0x260>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f023 020f 	bic.w	r2, r3, #15
 8005cd6:	498c      	ldr	r1, [pc, #560]	@ (8005f08 <HAL_RCC_ClockConfig+0x260>)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cde:	4b8a      	ldr	r3, [pc, #552]	@ (8005f08 <HAL_RCC_ClockConfig+0x260>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d001      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e106      	b.n	8005efe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d073      	beq.n	8005de4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d129      	bne.n	8005d58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d04:	4b81      	ldr	r3, [pc, #516]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0f4      	b.n	8005efe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005d14:	f000 f99e 	bl	8006054 <RCC_GetSysClockFreqFromPLLSource>
 8005d18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	4a7c      	ldr	r2, [pc, #496]	@ (8005f10 <HAL_RCC_ClockConfig+0x268>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d93f      	bls.n	8005da2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d22:	4b7a      	ldr	r3, [pc, #488]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d009      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d033      	beq.n	8005da2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d12f      	bne.n	8005da2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d42:	4b72      	ldr	r3, [pc, #456]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d4a:	4a70      	ldr	r2, [pc, #448]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d52:	2380      	movs	r3, #128	@ 0x80
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	e024      	b.n	8005da2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d107      	bne.n	8005d70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d60:	4b6a      	ldr	r3, [pc, #424]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d109      	bne.n	8005d80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e0c6      	b.n	8005efe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d70:	4b66      	ldr	r3, [pc, #408]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e0be      	b.n	8005efe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005d80:	f000 f8ce 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 8005d84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	4a61      	ldr	r2, [pc, #388]	@ (8005f10 <HAL_RCC_ClockConfig+0x268>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d909      	bls.n	8005da2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d8e:	4b5f      	ldr	r3, [pc, #380]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d96:	4a5d      	ldr	r2, [pc, #372]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005d98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005d9e:	2380      	movs	r3, #128	@ 0x80
 8005da0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005da2:	4b5a      	ldr	r3, [pc, #360]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f023 0203 	bic.w	r2, r3, #3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	4957      	ldr	r1, [pc, #348]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db4:	f7fc f986 	bl	80020c4 <HAL_GetTick>
 8005db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dba:	e00a      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dbc:	f7fc f982 	bl	80020c4 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e095      	b.n	8005efe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd2:	4b4e      	ldr	r3, [pc, #312]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 020c 	and.w	r2, r3, #12
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d1eb      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d023      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dfc:	4b43      	ldr	r3, [pc, #268]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	4a42      	ldr	r2, [pc, #264]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005e02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005e06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d007      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005e14:	4b3d      	ldr	r3, [pc, #244]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005e1c:	4a3b      	ldr	r2, [pc, #236]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005e1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005e22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e24:	4b39      	ldr	r3, [pc, #228]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	4936      	ldr	r1, [pc, #216]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	608b      	str	r3, [r1, #8]
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2b80      	cmp	r3, #128	@ 0x80
 8005e3c:	d105      	bne.n	8005e4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005e3e:	4b33      	ldr	r3, [pc, #204]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	4a32      	ldr	r2, [pc, #200]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005e44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f08 <HAL_RCC_ClockConfig+0x260>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d21d      	bcs.n	8005e94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e58:	4b2b      	ldr	r3, [pc, #172]	@ (8005f08 <HAL_RCC_ClockConfig+0x260>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f023 020f 	bic.w	r2, r3, #15
 8005e60:	4929      	ldr	r1, [pc, #164]	@ (8005f08 <HAL_RCC_ClockConfig+0x260>)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e68:	f7fc f92c 	bl	80020c4 <HAL_GetTick>
 8005e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e6e:	e00a      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e70:	f7fc f928 	bl	80020c4 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e03b      	b.n	8005efe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e86:	4b20      	ldr	r3, [pc, #128]	@ (8005f08 <HAL_RCC_ClockConfig+0x260>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d1ed      	bne.n	8005e70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d008      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	4917      	ldr	r1, [pc, #92]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d009      	beq.n	8005ed2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ebe:	4b13      	ldr	r3, [pc, #76]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	490f      	ldr	r1, [pc, #60]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ed2:	f000 f825 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8005f0c <HAL_RCC_ClockConfig+0x264>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	091b      	lsrs	r3, r3, #4
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	490c      	ldr	r1, [pc, #48]	@ (8005f14 <HAL_RCC_ClockConfig+0x26c>)
 8005ee4:	5ccb      	ldrb	r3, [r1, r3]
 8005ee6:	f003 031f 	and.w	r3, r3, #31
 8005eea:	fa22 f303 	lsr.w	r3, r2, r3
 8005eee:	4a0a      	ldr	r2, [pc, #40]	@ (8005f18 <HAL_RCC_ClockConfig+0x270>)
 8005ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8005f1c <HAL_RCC_ClockConfig+0x274>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fc f898 	bl	800202c <HAL_InitTick>
 8005efc:	4603      	mov	r3, r0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	40022000 	.word	0x40022000
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	04c4b400 	.word	0x04c4b400
 8005f14:	0800ee50 	.word	0x0800ee50
 8005f18:	20000000 	.word	0x20000000
 8005f1c:	20000004 	.word	0x20000004

08005f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005f26:	4b2c      	ldr	r3, [pc, #176]	@ (8005fd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 030c 	and.w	r3, r3, #12
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d102      	bne.n	8005f38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f32:	4b2a      	ldr	r3, [pc, #168]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f34:	613b      	str	r3, [r7, #16]
 8005f36:	e047      	b.n	8005fc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005f38:	4b27      	ldr	r3, [pc, #156]	@ (8005fd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f003 030c 	and.w	r3, r3, #12
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d102      	bne.n	8005f4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f44:	4b26      	ldr	r3, [pc, #152]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	e03e      	b.n	8005fc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005f4a:	4b23      	ldr	r3, [pc, #140]	@ (8005fd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 030c 	and.w	r3, r3, #12
 8005f52:	2b0c      	cmp	r3, #12
 8005f54:	d136      	bne.n	8005fc4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f56:	4b20      	ldr	r3, [pc, #128]	@ (8005fd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f60:	4b1d      	ldr	r3, [pc, #116]	@ (8005fd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	091b      	lsrs	r3, r3, #4
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d10c      	bne.n	8005f8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f74:	4a1a      	ldr	r2, [pc, #104]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	4a16      	ldr	r2, [pc, #88]	@ (8005fd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f7e:	68d2      	ldr	r2, [r2, #12]
 8005f80:	0a12      	lsrs	r2, r2, #8
 8005f82:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005f86:	fb02 f303 	mul.w	r3, r2, r3
 8005f8a:	617b      	str	r3, [r7, #20]
      break;
 8005f8c:	e00c      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f8e:	4a13      	ldr	r2, [pc, #76]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f96:	4a10      	ldr	r2, [pc, #64]	@ (8005fd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f98:	68d2      	ldr	r2, [r2, #12]
 8005f9a:	0a12      	lsrs	r2, r2, #8
 8005f9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005fa0:	fb02 f303 	mul.w	r3, r2, r3
 8005fa4:	617b      	str	r3, [r7, #20]
      break;
 8005fa6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	0e5b      	lsrs	r3, r3, #25
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	e001      	b.n	8005fc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005fc8:	693b      	ldr	r3, [r7, #16]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	00f42400 	.word	0x00f42400
 8005fe0:	016e3600 	.word	0x016e3600

08005fe4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fe8:	4b03      	ldr	r3, [pc, #12]	@ (8005ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fea:	681b      	ldr	r3, [r3, #0]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	20000000 	.word	0x20000000

08005ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006000:	f7ff fff0 	bl	8005fe4 <HAL_RCC_GetHCLKFreq>
 8006004:	4602      	mov	r2, r0
 8006006:	4b06      	ldr	r3, [pc, #24]	@ (8006020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	0a1b      	lsrs	r3, r3, #8
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	4904      	ldr	r1, [pc, #16]	@ (8006024 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006012:	5ccb      	ldrb	r3, [r1, r3]
 8006014:	f003 031f 	and.w	r3, r3, #31
 8006018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800601c:	4618      	mov	r0, r3
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40021000 	.word	0x40021000
 8006024:	0800ee60 	.word	0x0800ee60

08006028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800602c:	f7ff ffda 	bl	8005fe4 <HAL_RCC_GetHCLKFreq>
 8006030:	4602      	mov	r2, r0
 8006032:	4b06      	ldr	r3, [pc, #24]	@ (800604c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	0adb      	lsrs	r3, r3, #11
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	4904      	ldr	r1, [pc, #16]	@ (8006050 <HAL_RCC_GetPCLK2Freq+0x28>)
 800603e:	5ccb      	ldrb	r3, [r1, r3]
 8006040:	f003 031f 	and.w	r3, r3, #31
 8006044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006048:	4618      	mov	r0, r3
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40021000 	.word	0x40021000
 8006050:	0800ee60 	.word	0x0800ee60

08006054 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800605a:	4b1e      	ldr	r3, [pc, #120]	@ (80060d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006064:	4b1b      	ldr	r3, [pc, #108]	@ (80060d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	091b      	lsrs	r3, r3, #4
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	3301      	adds	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b03      	cmp	r3, #3
 8006076:	d10c      	bne.n	8006092 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006078:	4a17      	ldr	r2, [pc, #92]	@ (80060d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006080:	4a14      	ldr	r2, [pc, #80]	@ (80060d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006082:	68d2      	ldr	r2, [r2, #12]
 8006084:	0a12      	lsrs	r2, r2, #8
 8006086:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800608a:	fb02 f303 	mul.w	r3, r2, r3
 800608e:	617b      	str	r3, [r7, #20]
    break;
 8006090:	e00c      	b.n	80060ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006092:	4a12      	ldr	r2, [pc, #72]	@ (80060dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	fbb2 f3f3 	udiv	r3, r2, r3
 800609a:	4a0e      	ldr	r2, [pc, #56]	@ (80060d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800609c:	68d2      	ldr	r2, [r2, #12]
 800609e:	0a12      	lsrs	r2, r2, #8
 80060a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060a4:	fb02 f303 	mul.w	r3, r2, r3
 80060a8:	617b      	str	r3, [r7, #20]
    break;
 80060aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060ac:	4b09      	ldr	r3, [pc, #36]	@ (80060d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	0e5b      	lsrs	r3, r3, #25
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	3301      	adds	r3, #1
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80060c6:	687b      	ldr	r3, [r7, #4]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	371c      	adds	r7, #28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	40021000 	.word	0x40021000
 80060d8:	016e3600 	.word	0x016e3600
 80060dc:	00f42400 	.word	0x00f42400

080060e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060e8:	2300      	movs	r3, #0
 80060ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060ec:	2300      	movs	r3, #0
 80060ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 8098 	beq.w	800622e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060fe:	2300      	movs	r3, #0
 8006100:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006102:	4b43      	ldr	r3, [pc, #268]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10d      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800610e:	4b40      	ldr	r3, [pc, #256]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006112:	4a3f      	ldr	r2, [pc, #252]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006118:	6593      	str	r3, [r2, #88]	@ 0x58
 800611a:	4b3d      	ldr	r3, [pc, #244]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800611c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006122:	60bb      	str	r3, [r7, #8]
 8006124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006126:	2301      	movs	r3, #1
 8006128:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800612a:	4b3a      	ldr	r3, [pc, #232]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a39      	ldr	r2, [pc, #228]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006134:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006136:	f7fb ffc5 	bl	80020c4 <HAL_GetTick>
 800613a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800613c:	e009      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800613e:	f7fb ffc1 	bl	80020c4 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d902      	bls.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	74fb      	strb	r3, [r7, #19]
        break;
 8006150:	e005      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006152:	4b30      	ldr	r3, [pc, #192]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0ef      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800615e:	7cfb      	ldrb	r3, [r7, #19]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d159      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006164:	4b2a      	ldr	r3, [pc, #168]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800616e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d01e      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	429a      	cmp	r2, r3
 800617e:	d019      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006180:	4b23      	ldr	r3, [pc, #140]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006186:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800618a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800618c:	4b20      	ldr	r3, [pc, #128]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006192:	4a1f      	ldr	r2, [pc, #124]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800619c:	4b1c      	ldr	r3, [pc, #112]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800619e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061ac:	4a18      	ldr	r2, [pc, #96]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d016      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061be:	f7fb ff81 	bl	80020c4 <HAL_GetTick>
 80061c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061c4:	e00b      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c6:	f7fb ff7d 	bl	80020c4 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d902      	bls.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	74fb      	strb	r3, [r7, #19]
            break;
 80061dc:	e006      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061de:	4b0c      	ldr	r3, [pc, #48]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0ec      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80061ec:	7cfb      	ldrb	r3, [r7, #19]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10b      	bne.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061f2:	4b07      	ldr	r3, [pc, #28]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006200:	4903      	ldr	r1, [pc, #12]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006202:	4313      	orrs	r3, r2
 8006204:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006208:	e008      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800620a:	7cfb      	ldrb	r3, [r7, #19]
 800620c:	74bb      	strb	r3, [r7, #18]
 800620e:	e005      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006210:	40021000 	.word	0x40021000
 8006214:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006218:	7cfb      	ldrb	r3, [r7, #19]
 800621a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800621c:	7c7b      	ldrb	r3, [r7, #17]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d105      	bne.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006222:	4ba6      	ldr	r3, [pc, #664]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006226:	4aa5      	ldr	r2, [pc, #660]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006228:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800622c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800623a:	4ba0      	ldr	r3, [pc, #640]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800623c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006240:	f023 0203 	bic.w	r2, r3, #3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	499c      	ldr	r1, [pc, #624]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800625c:	4b97      	ldr	r3, [pc, #604]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006262:	f023 020c 	bic.w	r2, r3, #12
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	4994      	ldr	r1, [pc, #592]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0304 	and.w	r3, r3, #4
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800627e:	4b8f      	ldr	r3, [pc, #572]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006284:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	498b      	ldr	r1, [pc, #556]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062a0:	4b86      	ldr	r3, [pc, #536]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	4983      	ldr	r1, [pc, #524]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062c2:	4b7e      	ldr	r3, [pc, #504]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	497a      	ldr	r1, [pc, #488]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062e4:	4b75      	ldr	r3, [pc, #468]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	4972      	ldr	r1, [pc, #456]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006306:	4b6d      	ldr	r3, [pc, #436]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800630c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	4969      	ldr	r1, [pc, #420]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006316:	4313      	orrs	r3, r2
 8006318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006328:	4b64      	ldr	r3, [pc, #400]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800632e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	4961      	ldr	r1, [pc, #388]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800634a:	4b5c      	ldr	r3, [pc, #368]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006350:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006358:	4958      	ldr	r1, [pc, #352]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006368:	2b00      	cmp	r3, #0
 800636a:	d015      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800636c:	4b53      	ldr	r3, [pc, #332]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800636e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006372:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637a:	4950      	ldr	r1, [pc, #320]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800637c:	4313      	orrs	r3, r2
 800637e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800638a:	d105      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800638c:	4b4b      	ldr	r3, [pc, #300]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	4a4a      	ldr	r2, [pc, #296]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006396:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d015      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063a4:	4b45      	ldr	r3, [pc, #276]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b2:	4942      	ldr	r1, [pc, #264]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063c2:	d105      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063c4:	4b3d      	ldr	r3, [pc, #244]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	4a3c      	ldr	r2, [pc, #240]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d015      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80063dc:	4b37      	ldr	r3, [pc, #220]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ea:	4934      	ldr	r1, [pc, #208]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063fa:	d105      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063fc:	4b2f      	ldr	r3, [pc, #188]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	4a2e      	ldr	r2, [pc, #184]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006402:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006406:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d015      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006414:	4b29      	ldr	r3, [pc, #164]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800641a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006422:	4926      	ldr	r1, [pc, #152]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006424:	4313      	orrs	r3, r2
 8006426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800642e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006432:	d105      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006434:	4b21      	ldr	r3, [pc, #132]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4a20      	ldr	r2, [pc, #128]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800643a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800643e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d015      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800644c:	4b1b      	ldr	r3, [pc, #108]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800644e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006452:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645a:	4918      	ldr	r1, [pc, #96]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800645c:	4313      	orrs	r3, r2
 800645e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006466:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800646a:	d105      	bne.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800646c:	4b13      	ldr	r3, [pc, #76]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	4a12      	ldr	r2, [pc, #72]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006472:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006476:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d015      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006484:	4b0d      	ldr	r3, [pc, #52]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006492:	490a      	ldr	r1, [pc, #40]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800649e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064a2:	d105      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80064a4:	4b05      	ldr	r3, [pc, #20]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	4a04      	ldr	r2, [pc, #16]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80064b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	40021000 	.word	0x40021000

080064c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e049      	b.n	8006566 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d106      	bne.n	80064ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fb fbca 	bl	8001c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3304      	adds	r3, #4
 80064fc:	4619      	mov	r1, r3
 80064fe:	4610      	mov	r0, r2
 8006500:	f000 fd80 	bl	8007004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b01      	cmp	r3, #1
 8006582:	d001      	beq.n	8006588 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e042      	b.n	800660e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a21      	ldr	r2, [pc, #132]	@ (800661c <HAL_TIM_Base_Start+0xac>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d018      	beq.n	80065cc <HAL_TIM_Base_Start+0x5c>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065a2:	d013      	beq.n	80065cc <HAL_TIM_Base_Start+0x5c>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006620 <HAL_TIM_Base_Start+0xb0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00e      	beq.n	80065cc <HAL_TIM_Base_Start+0x5c>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006624 <HAL_TIM_Base_Start+0xb4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d009      	beq.n	80065cc <HAL_TIM_Base_Start+0x5c>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006628 <HAL_TIM_Base_Start+0xb8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d004      	beq.n	80065cc <HAL_TIM_Base_Start+0x5c>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a19      	ldr	r2, [pc, #100]	@ (800662c <HAL_TIM_Base_Start+0xbc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d115      	bne.n	80065f8 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689a      	ldr	r2, [r3, #8]
 80065d2:	4b17      	ldr	r3, [pc, #92]	@ (8006630 <HAL_TIM_Base_Start+0xc0>)
 80065d4:	4013      	ands	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b06      	cmp	r3, #6
 80065dc:	d015      	beq.n	800660a <HAL_TIM_Base_Start+0x9a>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e4:	d011      	beq.n	800660a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f042 0201 	orr.w	r2, r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f6:	e008      	b.n	800660a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0201 	orr.w	r2, r2, #1
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	e000      	b.n	800660c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40012c00 	.word	0x40012c00
 8006620:	40000400 	.word	0x40000400
 8006624:	40000800 	.word	0x40000800
 8006628:	40013400 	.word	0x40013400
 800662c:	40014000 	.word	0x40014000
 8006630:	00010007 	.word	0x00010007

08006634 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e049      	b.n	80066da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f841 	bl	80066e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3304      	adds	r3, #4
 8006670:	4619      	mov	r1, r3
 8006672:	4610      	mov	r0, r2
 8006674:	f000 fcc6 	bl	8007004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
	...

080066f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d109      	bne.n	800671c <HAL_TIM_PWM_Start+0x24>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b01      	cmp	r3, #1
 8006712:	bf14      	ite	ne
 8006714:	2301      	movne	r3, #1
 8006716:	2300      	moveq	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	e03c      	b.n	8006796 <HAL_TIM_PWM_Start+0x9e>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2b04      	cmp	r3, #4
 8006720:	d109      	bne.n	8006736 <HAL_TIM_PWM_Start+0x3e>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b01      	cmp	r3, #1
 800672c:	bf14      	ite	ne
 800672e:	2301      	movne	r3, #1
 8006730:	2300      	moveq	r3, #0
 8006732:	b2db      	uxtb	r3, r3
 8006734:	e02f      	b.n	8006796 <HAL_TIM_PWM_Start+0x9e>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b08      	cmp	r3, #8
 800673a:	d109      	bne.n	8006750 <HAL_TIM_PWM_Start+0x58>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b01      	cmp	r3, #1
 8006746:	bf14      	ite	ne
 8006748:	2301      	movne	r3, #1
 800674a:	2300      	moveq	r3, #0
 800674c:	b2db      	uxtb	r3, r3
 800674e:	e022      	b.n	8006796 <HAL_TIM_PWM_Start+0x9e>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	2b0c      	cmp	r3, #12
 8006754:	d109      	bne.n	800676a <HAL_TIM_PWM_Start+0x72>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b01      	cmp	r3, #1
 8006760:	bf14      	ite	ne
 8006762:	2301      	movne	r3, #1
 8006764:	2300      	moveq	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	e015      	b.n	8006796 <HAL_TIM_PWM_Start+0x9e>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b10      	cmp	r3, #16
 800676e:	d109      	bne.n	8006784 <HAL_TIM_PWM_Start+0x8c>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b01      	cmp	r3, #1
 800677a:	bf14      	ite	ne
 800677c:	2301      	movne	r3, #1
 800677e:	2300      	moveq	r3, #0
 8006780:	b2db      	uxtb	r3, r3
 8006782:	e008      	b.n	8006796 <HAL_TIM_PWM_Start+0x9e>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b01      	cmp	r3, #1
 800678e:	bf14      	ite	ne
 8006790:	2301      	movne	r3, #1
 8006792:	2300      	moveq	r3, #0
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e097      	b.n	80068ce <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d104      	bne.n	80067ae <HAL_TIM_PWM_Start+0xb6>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067ac:	e023      	b.n	80067f6 <HAL_TIM_PWM_Start+0xfe>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d104      	bne.n	80067be <HAL_TIM_PWM_Start+0xc6>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067bc:	e01b      	b.n	80067f6 <HAL_TIM_PWM_Start+0xfe>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d104      	bne.n	80067ce <HAL_TIM_PWM_Start+0xd6>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067cc:	e013      	b.n	80067f6 <HAL_TIM_PWM_Start+0xfe>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b0c      	cmp	r3, #12
 80067d2:	d104      	bne.n	80067de <HAL_TIM_PWM_Start+0xe6>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067dc:	e00b      	b.n	80067f6 <HAL_TIM_PWM_Start+0xfe>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b10      	cmp	r3, #16
 80067e2:	d104      	bne.n	80067ee <HAL_TIM_PWM_Start+0xf6>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067ec:	e003      	b.n	80067f6 <HAL_TIM_PWM_Start+0xfe>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2202      	movs	r2, #2
 80067f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2201      	movs	r2, #1
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	4618      	mov	r0, r3
 8006800:	f001 f82e 	bl	8007860 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a33      	ldr	r2, [pc, #204]	@ (80068d8 <HAL_TIM_PWM_Start+0x1e0>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d013      	beq.n	8006836 <HAL_TIM_PWM_Start+0x13e>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a32      	ldr	r2, [pc, #200]	@ (80068dc <HAL_TIM_PWM_Start+0x1e4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00e      	beq.n	8006836 <HAL_TIM_PWM_Start+0x13e>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a30      	ldr	r2, [pc, #192]	@ (80068e0 <HAL_TIM_PWM_Start+0x1e8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d009      	beq.n	8006836 <HAL_TIM_PWM_Start+0x13e>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a2f      	ldr	r2, [pc, #188]	@ (80068e4 <HAL_TIM_PWM_Start+0x1ec>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d004      	beq.n	8006836 <HAL_TIM_PWM_Start+0x13e>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a2d      	ldr	r2, [pc, #180]	@ (80068e8 <HAL_TIM_PWM_Start+0x1f0>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d101      	bne.n	800683a <HAL_TIM_PWM_Start+0x142>
 8006836:	2301      	movs	r3, #1
 8006838:	e000      	b.n	800683c <HAL_TIM_PWM_Start+0x144>
 800683a:	2300      	movs	r3, #0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800684e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a20      	ldr	r2, [pc, #128]	@ (80068d8 <HAL_TIM_PWM_Start+0x1e0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d018      	beq.n	800688c <HAL_TIM_PWM_Start+0x194>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006862:	d013      	beq.n	800688c <HAL_TIM_PWM_Start+0x194>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a20      	ldr	r2, [pc, #128]	@ (80068ec <HAL_TIM_PWM_Start+0x1f4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00e      	beq.n	800688c <HAL_TIM_PWM_Start+0x194>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a1f      	ldr	r2, [pc, #124]	@ (80068f0 <HAL_TIM_PWM_Start+0x1f8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d009      	beq.n	800688c <HAL_TIM_PWM_Start+0x194>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a17      	ldr	r2, [pc, #92]	@ (80068dc <HAL_TIM_PWM_Start+0x1e4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d004      	beq.n	800688c <HAL_TIM_PWM_Start+0x194>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a16      	ldr	r2, [pc, #88]	@ (80068e0 <HAL_TIM_PWM_Start+0x1e8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d115      	bne.n	80068b8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689a      	ldr	r2, [r3, #8]
 8006892:	4b18      	ldr	r3, [pc, #96]	@ (80068f4 <HAL_TIM_PWM_Start+0x1fc>)
 8006894:	4013      	ands	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b06      	cmp	r3, #6
 800689c:	d015      	beq.n	80068ca <HAL_TIM_PWM_Start+0x1d2>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068a4:	d011      	beq.n	80068ca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 0201 	orr.w	r2, r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b6:	e008      	b.n	80068ca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0201 	orr.w	r2, r2, #1
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	e000      	b.n	80068cc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	40012c00 	.word	0x40012c00
 80068dc:	40013400 	.word	0x40013400
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40014400 	.word	0x40014400
 80068e8:	40014800 	.word	0x40014800
 80068ec:	40000400 	.word	0x40000400
 80068f0:	40000800 	.word	0x40000800
 80068f4:	00010007 	.word	0x00010007

080068f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d020      	beq.n	800695c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b00      	cmp	r3, #0
 8006922:	d01b      	beq.n	800695c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f06f 0202 	mvn.w	r2, #2
 800692c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f003 fcaa 	bl	800a29c <HAL_TIM_IC_CaptureCallback>
 8006948:	e005      	b.n	8006956 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fb3c 	bl	8006fc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fb43 	bl	8006fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f003 0304 	and.w	r3, r3, #4
 8006962:	2b00      	cmp	r3, #0
 8006964:	d020      	beq.n	80069a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01b      	beq.n	80069a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f06f 0204 	mvn.w	r2, #4
 8006978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2202      	movs	r2, #2
 800697e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f003 fc84 	bl	800a29c <HAL_TIM_IC_CaptureCallback>
 8006994:	e005      	b.n	80069a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fb16 	bl	8006fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fb1d 	bl	8006fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f003 0308 	and.w	r3, r3, #8
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d020      	beq.n	80069f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f003 0308 	and.w	r3, r3, #8
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01b      	beq.n	80069f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f06f 0208 	mvn.w	r2, #8
 80069c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2204      	movs	r2, #4
 80069ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f003 fc5e 	bl	800a29c <HAL_TIM_IC_CaptureCallback>
 80069e0:	e005      	b.n	80069ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 faf0 	bl	8006fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 faf7 	bl	8006fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f003 0310 	and.w	r3, r3, #16
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d020      	beq.n	8006a40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f003 0310 	and.w	r3, r3, #16
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d01b      	beq.n	8006a40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f06f 0210 	mvn.w	r2, #16
 8006a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2208      	movs	r2, #8
 8006a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f003 fc38 	bl	800a29c <HAL_TIM_IC_CaptureCallback>
 8006a2c:	e005      	b.n	8006a3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 faca 	bl	8006fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fad1 	bl	8006fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00c      	beq.n	8006a64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d007      	beq.n	8006a64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f06f 0201 	mvn.w	r2, #1
 8006a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 faa8 	bl	8006fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d104      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00c      	beq.n	8006a92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d007      	beq.n	8006a92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 f8b5 	bl	8007bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00c      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d007      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f001 f8ad 	bl	8007c10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00c      	beq.n	8006ada <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d007      	beq.n	8006ada <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fa8b 	bl	8006ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00c      	beq.n	8006afe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d007      	beq.n	8006afe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f06f 0220 	mvn.w	r2, #32
 8006af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 f875 	bl	8007be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00c      	beq.n	8006b22 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d007      	beq.n	8006b22 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 f881 	bl	8007c24 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00c      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 f879 	bl	8007c38 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00c      	beq.n	8006b6a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d007      	beq.n	8006b6a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 f871 	bl	8007c4c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00c      	beq.n	8006b8e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d007      	beq.n	8006b8e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 f869 	bl	8007c60 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b8e:	bf00      	nop
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d101      	bne.n	8006bb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e0ff      	b.n	8006db6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b14      	cmp	r3, #20
 8006bc2:	f200 80f0 	bhi.w	8006da6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006c21 	.word	0x08006c21
 8006bd0:	08006da7 	.word	0x08006da7
 8006bd4:	08006da7 	.word	0x08006da7
 8006bd8:	08006da7 	.word	0x08006da7
 8006bdc:	08006c61 	.word	0x08006c61
 8006be0:	08006da7 	.word	0x08006da7
 8006be4:	08006da7 	.word	0x08006da7
 8006be8:	08006da7 	.word	0x08006da7
 8006bec:	08006ca3 	.word	0x08006ca3
 8006bf0:	08006da7 	.word	0x08006da7
 8006bf4:	08006da7 	.word	0x08006da7
 8006bf8:	08006da7 	.word	0x08006da7
 8006bfc:	08006ce3 	.word	0x08006ce3
 8006c00:	08006da7 	.word	0x08006da7
 8006c04:	08006da7 	.word	0x08006da7
 8006c08:	08006da7 	.word	0x08006da7
 8006c0c:	08006d25 	.word	0x08006d25
 8006c10:	08006da7 	.word	0x08006da7
 8006c14:	08006da7 	.word	0x08006da7
 8006c18:	08006da7 	.word	0x08006da7
 8006c1c:	08006d65 	.word	0x08006d65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fa88 	bl	800713c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0208 	orr.w	r2, r2, #8
 8006c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699a      	ldr	r2, [r3, #24]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 0204 	bic.w	r2, r2, #4
 8006c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6999      	ldr	r1, [r3, #24]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	691a      	ldr	r2, [r3, #16]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	619a      	str	r2, [r3, #24]
      break;
 8006c5e:	e0a5      	b.n	8006dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 faf8 	bl	800725c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699a      	ldr	r2, [r3, #24]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6999      	ldr	r1, [r3, #24]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	021a      	lsls	r2, r3, #8
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	619a      	str	r2, [r3, #24]
      break;
 8006ca0:	e084      	b.n	8006dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68b9      	ldr	r1, [r7, #8]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 fb61 	bl	8007370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	69da      	ldr	r2, [r3, #28]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 0208 	orr.w	r2, r2, #8
 8006cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0204 	bic.w	r2, r2, #4
 8006ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69d9      	ldr	r1, [r3, #28]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	61da      	str	r2, [r3, #28]
      break;
 8006ce0:	e064      	b.n	8006dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 fbc9 	bl	8007480 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	69da      	ldr	r2, [r3, #28]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69da      	ldr	r2, [r3, #28]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69d9      	ldr	r1, [r3, #28]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	021a      	lsls	r2, r3, #8
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	61da      	str	r2, [r3, #28]
      break;
 8006d22:	e043      	b.n	8006dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fc32 	bl	8007594 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0208 	orr.w	r2, r2, #8
 8006d3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 0204 	bic.w	r2, r2, #4
 8006d4e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006d62:	e023      	b.n	8006dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68b9      	ldr	r1, [r7, #8]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 fc76 	bl	800765c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d8e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	021a      	lsls	r2, r3, #8
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006da4:	e002      	b.n	8006dac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	75fb      	strb	r3, [r7, #23]
      break;
 8006daa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop

08006dc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d101      	bne.n	8006ddc <HAL_TIM_ConfigClockSource+0x1c>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e0de      	b.n	8006f9a <HAL_TIM_ConfigClockSource+0x1da>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006dfa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a63      	ldr	r2, [pc, #396]	@ (8006fa4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	f000 80a9 	beq.w	8006f6e <HAL_TIM_ConfigClockSource+0x1ae>
 8006e1c:	4a61      	ldr	r2, [pc, #388]	@ (8006fa4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	f200 80ae 	bhi.w	8006f80 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e24:	4a60      	ldr	r2, [pc, #384]	@ (8006fa8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	f000 80a1 	beq.w	8006f6e <HAL_TIM_ConfigClockSource+0x1ae>
 8006e2c:	4a5e      	ldr	r2, [pc, #376]	@ (8006fa8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	f200 80a6 	bhi.w	8006f80 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e34:	4a5d      	ldr	r2, [pc, #372]	@ (8006fac <HAL_TIM_ConfigClockSource+0x1ec>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	f000 8099 	beq.w	8006f6e <HAL_TIM_ConfigClockSource+0x1ae>
 8006e3c:	4a5b      	ldr	r2, [pc, #364]	@ (8006fac <HAL_TIM_ConfigClockSource+0x1ec>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	f200 809e 	bhi.w	8006f80 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e44:	4a5a      	ldr	r2, [pc, #360]	@ (8006fb0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	f000 8091 	beq.w	8006f6e <HAL_TIM_ConfigClockSource+0x1ae>
 8006e4c:	4a58      	ldr	r2, [pc, #352]	@ (8006fb0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	f200 8096 	bhi.w	8006f80 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006e58:	f000 8089 	beq.w	8006f6e <HAL_TIM_ConfigClockSource+0x1ae>
 8006e5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006e60:	f200 808e 	bhi.w	8006f80 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e68:	d03e      	beq.n	8006ee8 <HAL_TIM_ConfigClockSource+0x128>
 8006e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e6e:	f200 8087 	bhi.w	8006f80 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e76:	f000 8086 	beq.w	8006f86 <HAL_TIM_ConfigClockSource+0x1c6>
 8006e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e7e:	d87f      	bhi.n	8006f80 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e80:	2b70      	cmp	r3, #112	@ 0x70
 8006e82:	d01a      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0xfa>
 8006e84:	2b70      	cmp	r3, #112	@ 0x70
 8006e86:	d87b      	bhi.n	8006f80 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e88:	2b60      	cmp	r3, #96	@ 0x60
 8006e8a:	d050      	beq.n	8006f2e <HAL_TIM_ConfigClockSource+0x16e>
 8006e8c:	2b60      	cmp	r3, #96	@ 0x60
 8006e8e:	d877      	bhi.n	8006f80 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e90:	2b50      	cmp	r3, #80	@ 0x50
 8006e92:	d03c      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x14e>
 8006e94:	2b50      	cmp	r3, #80	@ 0x50
 8006e96:	d873      	bhi.n	8006f80 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e98:	2b40      	cmp	r3, #64	@ 0x40
 8006e9a:	d058      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0x18e>
 8006e9c:	2b40      	cmp	r3, #64	@ 0x40
 8006e9e:	d86f      	bhi.n	8006f80 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ea0:	2b30      	cmp	r3, #48	@ 0x30
 8006ea2:	d064      	beq.n	8006f6e <HAL_TIM_ConfigClockSource+0x1ae>
 8006ea4:	2b30      	cmp	r3, #48	@ 0x30
 8006ea6:	d86b      	bhi.n	8006f80 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ea8:	2b20      	cmp	r3, #32
 8006eaa:	d060      	beq.n	8006f6e <HAL_TIM_ConfigClockSource+0x1ae>
 8006eac:	2b20      	cmp	r3, #32
 8006eae:	d867      	bhi.n	8006f80 <HAL_TIM_ConfigClockSource+0x1c0>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d05c      	beq.n	8006f6e <HAL_TIM_ConfigClockSource+0x1ae>
 8006eb4:	2b10      	cmp	r3, #16
 8006eb6:	d05a      	beq.n	8006f6e <HAL_TIM_ConfigClockSource+0x1ae>
 8006eb8:	e062      	b.n	8006f80 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006eca:	f000 fca9 	bl	8007820 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006edc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	609a      	str	r2, [r3, #8]
      break;
 8006ee6:	e04f      	b.n	8006f88 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ef8:	f000 fc92 	bl	8007820 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689a      	ldr	r2, [r3, #8]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f0a:	609a      	str	r2, [r3, #8]
      break;
 8006f0c:	e03c      	b.n	8006f88 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f000 fc04 	bl	8007728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2150      	movs	r1, #80	@ 0x50
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 fc5d 	bl	80077e6 <TIM_ITRx_SetConfig>
      break;
 8006f2c:	e02c      	b.n	8006f88 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f000 fc23 	bl	8007786 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2160      	movs	r1, #96	@ 0x60
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fc4d 	bl	80077e6 <TIM_ITRx_SetConfig>
      break;
 8006f4c:	e01c      	b.n	8006f88 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f000 fbe4 	bl	8007728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2140      	movs	r1, #64	@ 0x40
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 fc3d 	bl	80077e6 <TIM_ITRx_SetConfig>
      break;
 8006f6c:	e00c      	b.n	8006f88 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4619      	mov	r1, r3
 8006f78:	4610      	mov	r0, r2
 8006f7a:	f000 fc34 	bl	80077e6 <TIM_ITRx_SetConfig>
      break;
 8006f7e:	e003      	b.n	8006f88 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	73fb      	strb	r3, [r7, #15]
      break;
 8006f84:	e000      	b.n	8006f88 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	00100070 	.word	0x00100070
 8006fa8:	00100040 	.word	0x00100040
 8006fac:	00100030 	.word	0x00100030
 8006fb0:	00100020 	.word	0x00100020

08006fb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a42      	ldr	r2, [pc, #264]	@ (8007120 <TIM_Base_SetConfig+0x11c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d00f      	beq.n	800703c <TIM_Base_SetConfig+0x38>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007022:	d00b      	beq.n	800703c <TIM_Base_SetConfig+0x38>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a3f      	ldr	r2, [pc, #252]	@ (8007124 <TIM_Base_SetConfig+0x120>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d007      	beq.n	800703c <TIM_Base_SetConfig+0x38>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a3e      	ldr	r2, [pc, #248]	@ (8007128 <TIM_Base_SetConfig+0x124>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d003      	beq.n	800703c <TIM_Base_SetConfig+0x38>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a3d      	ldr	r2, [pc, #244]	@ (800712c <TIM_Base_SetConfig+0x128>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d108      	bne.n	800704e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a33      	ldr	r2, [pc, #204]	@ (8007120 <TIM_Base_SetConfig+0x11c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d01b      	beq.n	800708e <TIM_Base_SetConfig+0x8a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800705c:	d017      	beq.n	800708e <TIM_Base_SetConfig+0x8a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a30      	ldr	r2, [pc, #192]	@ (8007124 <TIM_Base_SetConfig+0x120>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d013      	beq.n	800708e <TIM_Base_SetConfig+0x8a>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a2f      	ldr	r2, [pc, #188]	@ (8007128 <TIM_Base_SetConfig+0x124>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d00f      	beq.n	800708e <TIM_Base_SetConfig+0x8a>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a2e      	ldr	r2, [pc, #184]	@ (800712c <TIM_Base_SetConfig+0x128>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00b      	beq.n	800708e <TIM_Base_SetConfig+0x8a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a2d      	ldr	r2, [pc, #180]	@ (8007130 <TIM_Base_SetConfig+0x12c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d007      	beq.n	800708e <TIM_Base_SetConfig+0x8a>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a2c      	ldr	r2, [pc, #176]	@ (8007134 <TIM_Base_SetConfig+0x130>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d003      	beq.n	800708e <TIM_Base_SetConfig+0x8a>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a2b      	ldr	r2, [pc, #172]	@ (8007138 <TIM_Base_SetConfig+0x134>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d108      	bne.n	80070a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4313      	orrs	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a16      	ldr	r2, [pc, #88]	@ (8007120 <TIM_Base_SetConfig+0x11c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00f      	beq.n	80070ec <TIM_Base_SetConfig+0xe8>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a17      	ldr	r2, [pc, #92]	@ (800712c <TIM_Base_SetConfig+0x128>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d00b      	beq.n	80070ec <TIM_Base_SetConfig+0xe8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a16      	ldr	r2, [pc, #88]	@ (8007130 <TIM_Base_SetConfig+0x12c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d007      	beq.n	80070ec <TIM_Base_SetConfig+0xe8>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a15      	ldr	r2, [pc, #84]	@ (8007134 <TIM_Base_SetConfig+0x130>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d003      	beq.n	80070ec <TIM_Base_SetConfig+0xe8>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a14      	ldr	r2, [pc, #80]	@ (8007138 <TIM_Base_SetConfig+0x134>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d103      	bne.n	80070f4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	691a      	ldr	r2, [r3, #16]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b01      	cmp	r3, #1
 8007104:	d105      	bne.n	8007112 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	f023 0201 	bic.w	r2, r3, #1
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	611a      	str	r2, [r3, #16]
  }
}
 8007112:	bf00      	nop
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40012c00 	.word	0x40012c00
 8007124:	40000400 	.word	0x40000400
 8007128:	40000800 	.word	0x40000800
 800712c:	40013400 	.word	0x40013400
 8007130:	40014000 	.word	0x40014000
 8007134:	40014400 	.word	0x40014400
 8007138:	40014800 	.word	0x40014800

0800713c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	f023 0201 	bic.w	r2, r3, #1
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800716a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800716e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 0303 	bic.w	r3, r3, #3
 8007176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f023 0302 	bic.w	r3, r3, #2
 8007188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	4313      	orrs	r3, r2
 8007192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a2c      	ldr	r2, [pc, #176]	@ (8007248 <TIM_OC1_SetConfig+0x10c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00f      	beq.n	80071bc <TIM_OC1_SetConfig+0x80>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a2b      	ldr	r2, [pc, #172]	@ (800724c <TIM_OC1_SetConfig+0x110>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d00b      	beq.n	80071bc <TIM_OC1_SetConfig+0x80>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a2a      	ldr	r2, [pc, #168]	@ (8007250 <TIM_OC1_SetConfig+0x114>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d007      	beq.n	80071bc <TIM_OC1_SetConfig+0x80>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a29      	ldr	r2, [pc, #164]	@ (8007254 <TIM_OC1_SetConfig+0x118>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d003      	beq.n	80071bc <TIM_OC1_SetConfig+0x80>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a28      	ldr	r2, [pc, #160]	@ (8007258 <TIM_OC1_SetConfig+0x11c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d10c      	bne.n	80071d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f023 0308 	bic.w	r3, r3, #8
 80071c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f023 0304 	bic.w	r3, r3, #4
 80071d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a1b      	ldr	r2, [pc, #108]	@ (8007248 <TIM_OC1_SetConfig+0x10c>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d00f      	beq.n	80071fe <TIM_OC1_SetConfig+0xc2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a1a      	ldr	r2, [pc, #104]	@ (800724c <TIM_OC1_SetConfig+0x110>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00b      	beq.n	80071fe <TIM_OC1_SetConfig+0xc2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a19      	ldr	r2, [pc, #100]	@ (8007250 <TIM_OC1_SetConfig+0x114>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d007      	beq.n	80071fe <TIM_OC1_SetConfig+0xc2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a18      	ldr	r2, [pc, #96]	@ (8007254 <TIM_OC1_SetConfig+0x118>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d003      	beq.n	80071fe <TIM_OC1_SetConfig+0xc2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a17      	ldr	r2, [pc, #92]	@ (8007258 <TIM_OC1_SetConfig+0x11c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d111      	bne.n	8007222 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800720c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	4313      	orrs	r3, r2
 8007216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	4313      	orrs	r3, r2
 8007220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	621a      	str	r2, [r3, #32]
}
 800723c:	bf00      	nop
 800723e:	371c      	adds	r7, #28
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	40012c00 	.word	0x40012c00
 800724c:	40013400 	.word	0x40013400
 8007250:	40014000 	.word	0x40014000
 8007254:	40014400 	.word	0x40014400
 8007258:	40014800 	.word	0x40014800

0800725c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	f023 0210 	bic.w	r2, r3, #16
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800728a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800728e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	021b      	lsls	r3, r3, #8
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f023 0320 	bic.w	r3, r3, #32
 80072aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a28      	ldr	r2, [pc, #160]	@ (800735c <TIM_OC2_SetConfig+0x100>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d003      	beq.n	80072c8 <TIM_OC2_SetConfig+0x6c>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a27      	ldr	r2, [pc, #156]	@ (8007360 <TIM_OC2_SetConfig+0x104>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d10d      	bne.n	80072e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	011b      	lsls	r3, r3, #4
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	4313      	orrs	r3, r2
 80072da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a1d      	ldr	r2, [pc, #116]	@ (800735c <TIM_OC2_SetConfig+0x100>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d00f      	beq.n	800730c <TIM_OC2_SetConfig+0xb0>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007360 <TIM_OC2_SetConfig+0x104>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d00b      	beq.n	800730c <TIM_OC2_SetConfig+0xb0>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a1b      	ldr	r2, [pc, #108]	@ (8007364 <TIM_OC2_SetConfig+0x108>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d007      	beq.n	800730c <TIM_OC2_SetConfig+0xb0>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a1a      	ldr	r2, [pc, #104]	@ (8007368 <TIM_OC2_SetConfig+0x10c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d003      	beq.n	800730c <TIM_OC2_SetConfig+0xb0>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a19      	ldr	r2, [pc, #100]	@ (800736c <TIM_OC2_SetConfig+0x110>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d113      	bne.n	8007334 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007312:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800731a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	4313      	orrs	r3, r2
 8007332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	621a      	str	r2, [r3, #32]
}
 800734e:	bf00      	nop
 8007350:	371c      	adds	r7, #28
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40012c00 	.word	0x40012c00
 8007360:	40013400 	.word	0x40013400
 8007364:	40014000 	.word	0x40014000
 8007368:	40014400 	.word	0x40014400
 800736c:	40014800 	.word	0x40014800

08007370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800739e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0303 	bic.w	r3, r3, #3
 80073aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80073bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	021b      	lsls	r3, r3, #8
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a27      	ldr	r2, [pc, #156]	@ (800746c <TIM_OC3_SetConfig+0xfc>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d003      	beq.n	80073da <TIM_OC3_SetConfig+0x6a>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a26      	ldr	r2, [pc, #152]	@ (8007470 <TIM_OC3_SetConfig+0x100>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d10d      	bne.n	80073f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a1c      	ldr	r2, [pc, #112]	@ (800746c <TIM_OC3_SetConfig+0xfc>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d00f      	beq.n	800741e <TIM_OC3_SetConfig+0xae>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a1b      	ldr	r2, [pc, #108]	@ (8007470 <TIM_OC3_SetConfig+0x100>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d00b      	beq.n	800741e <TIM_OC3_SetConfig+0xae>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a1a      	ldr	r2, [pc, #104]	@ (8007474 <TIM_OC3_SetConfig+0x104>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d007      	beq.n	800741e <TIM_OC3_SetConfig+0xae>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a19      	ldr	r2, [pc, #100]	@ (8007478 <TIM_OC3_SetConfig+0x108>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d003      	beq.n	800741e <TIM_OC3_SetConfig+0xae>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a18      	ldr	r2, [pc, #96]	@ (800747c <TIM_OC3_SetConfig+0x10c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d113      	bne.n	8007446 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800742c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	4313      	orrs	r3, r2
 8007438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	011b      	lsls	r3, r3, #4
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	4313      	orrs	r3, r2
 8007444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	621a      	str	r2, [r3, #32]
}
 8007460:	bf00      	nop
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	40012c00 	.word	0x40012c00
 8007470:	40013400 	.word	0x40013400
 8007474:	40014000 	.word	0x40014000
 8007478:	40014400 	.word	0x40014400
 800747c:	40014800 	.word	0x40014800

08007480 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	021b      	lsls	r3, r3, #8
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	031b      	lsls	r3, r3, #12
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a28      	ldr	r2, [pc, #160]	@ (8007580 <TIM_OC4_SetConfig+0x100>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d003      	beq.n	80074ec <TIM_OC4_SetConfig+0x6c>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a27      	ldr	r2, [pc, #156]	@ (8007584 <TIM_OC4_SetConfig+0x104>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d10d      	bne.n	8007508 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80074f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	031b      	lsls	r3, r3, #12
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007506:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a1d      	ldr	r2, [pc, #116]	@ (8007580 <TIM_OC4_SetConfig+0x100>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d00f      	beq.n	8007530 <TIM_OC4_SetConfig+0xb0>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a1c      	ldr	r2, [pc, #112]	@ (8007584 <TIM_OC4_SetConfig+0x104>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d00b      	beq.n	8007530 <TIM_OC4_SetConfig+0xb0>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a1b      	ldr	r2, [pc, #108]	@ (8007588 <TIM_OC4_SetConfig+0x108>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d007      	beq.n	8007530 <TIM_OC4_SetConfig+0xb0>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a1a      	ldr	r2, [pc, #104]	@ (800758c <TIM_OC4_SetConfig+0x10c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d003      	beq.n	8007530 <TIM_OC4_SetConfig+0xb0>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a19      	ldr	r2, [pc, #100]	@ (8007590 <TIM_OC4_SetConfig+0x110>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d113      	bne.n	8007558 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007536:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800753e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	019b      	lsls	r3, r3, #6
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	4313      	orrs	r3, r2
 800754a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	019b      	lsls	r3, r3, #6
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	4313      	orrs	r3, r2
 8007556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	621a      	str	r2, [r3, #32]
}
 8007572:	bf00      	nop
 8007574:	371c      	adds	r7, #28
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	40012c00 	.word	0x40012c00
 8007584:	40013400 	.word	0x40013400
 8007588:	40014000 	.word	0x40014000
 800758c:	40014400 	.word	0x40014400
 8007590:	40014800 	.word	0x40014800

08007594 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80075d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	041b      	lsls	r3, r3, #16
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a17      	ldr	r2, [pc, #92]	@ (8007648 <TIM_OC5_SetConfig+0xb4>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d00f      	beq.n	800760e <TIM_OC5_SetConfig+0x7a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a16      	ldr	r2, [pc, #88]	@ (800764c <TIM_OC5_SetConfig+0xb8>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d00b      	beq.n	800760e <TIM_OC5_SetConfig+0x7a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a15      	ldr	r2, [pc, #84]	@ (8007650 <TIM_OC5_SetConfig+0xbc>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d007      	beq.n	800760e <TIM_OC5_SetConfig+0x7a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a14      	ldr	r2, [pc, #80]	@ (8007654 <TIM_OC5_SetConfig+0xc0>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d003      	beq.n	800760e <TIM_OC5_SetConfig+0x7a>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a13      	ldr	r2, [pc, #76]	@ (8007658 <TIM_OC5_SetConfig+0xc4>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d109      	bne.n	8007622 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007614:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	021b      	lsls	r3, r3, #8
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	4313      	orrs	r3, r2
 8007620:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	621a      	str	r2, [r3, #32]
}
 800763c:	bf00      	nop
 800763e:	371c      	adds	r7, #28
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	40012c00 	.word	0x40012c00
 800764c:	40013400 	.word	0x40013400
 8007650:	40014000 	.word	0x40014000
 8007654:	40014400 	.word	0x40014400
 8007658:	40014800 	.word	0x40014800

0800765c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800768a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800768e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	021b      	lsls	r3, r3, #8
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	4313      	orrs	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	051b      	lsls	r3, r3, #20
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a18      	ldr	r2, [pc, #96]	@ (8007714 <TIM_OC6_SetConfig+0xb8>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d00f      	beq.n	80076d8 <TIM_OC6_SetConfig+0x7c>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a17      	ldr	r2, [pc, #92]	@ (8007718 <TIM_OC6_SetConfig+0xbc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d00b      	beq.n	80076d8 <TIM_OC6_SetConfig+0x7c>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a16      	ldr	r2, [pc, #88]	@ (800771c <TIM_OC6_SetConfig+0xc0>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d007      	beq.n	80076d8 <TIM_OC6_SetConfig+0x7c>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a15      	ldr	r2, [pc, #84]	@ (8007720 <TIM_OC6_SetConfig+0xc4>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d003      	beq.n	80076d8 <TIM_OC6_SetConfig+0x7c>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a14      	ldr	r2, [pc, #80]	@ (8007724 <TIM_OC6_SetConfig+0xc8>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d109      	bne.n	80076ec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	029b      	lsls	r3, r3, #10
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	621a      	str	r2, [r3, #32]
}
 8007706:	bf00      	nop
 8007708:	371c      	adds	r7, #28
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	40012c00 	.word	0x40012c00
 8007718:	40013400 	.word	0x40013400
 800771c:	40014000 	.word	0x40014000
 8007720:	40014400 	.word	0x40014400
 8007724:	40014800 	.word	0x40014800

08007728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007728:	b480      	push	{r7}
 800772a:	b087      	sub	sp, #28
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6a1b      	ldr	r3, [r3, #32]
 8007738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	f023 0201 	bic.w	r2, r3, #1
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	011b      	lsls	r3, r3, #4
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	4313      	orrs	r3, r2
 800775c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f023 030a 	bic.w	r3, r3, #10
 8007764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	4313      	orrs	r3, r2
 800776c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	621a      	str	r2, [r3, #32]
}
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007786:	b480      	push	{r7}
 8007788:	b087      	sub	sp, #28
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	f023 0210 	bic.w	r2, r3, #16
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80077b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	031b      	lsls	r3, r3, #12
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80077c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	011b      	lsls	r3, r3, #4
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	621a      	str	r2, [r3, #32]
}
 80077da:	bf00      	nop
 80077dc:	371c      	adds	r7, #28
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b085      	sub	sp, #20
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80077fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007800:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4313      	orrs	r3, r2
 8007808:	f043 0307 	orr.w	r3, r3, #7
 800780c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	609a      	str	r2, [r3, #8]
}
 8007814:	bf00      	nop
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800783a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	021a      	lsls	r2, r3, #8
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	431a      	orrs	r2, r3
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	4313      	orrs	r3, r2
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	4313      	orrs	r3, r2
 800784c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	609a      	str	r2, [r3, #8]
}
 8007854:	bf00      	nop
 8007856:	371c      	adds	r7, #28
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f003 031f 	and.w	r3, r3, #31
 8007872:	2201      	movs	r2, #1
 8007874:	fa02 f303 	lsl.w	r3, r2, r3
 8007878:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6a1a      	ldr	r2, [r3, #32]
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	43db      	mvns	r3, r3
 8007882:	401a      	ands	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a1a      	ldr	r2, [r3, #32]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f003 031f 	and.w	r3, r3, #31
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	fa01 f303 	lsl.w	r3, r1, r3
 8007898:	431a      	orrs	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	621a      	str	r2, [r3, #32]
}
 800789e:	bf00      	nop
 80078a0:	371c      	adds	r7, #28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
	...

080078ac <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078ba:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078ca:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078d2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d108      	bne.n	80078ec <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d105      	bne.n	80078ec <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078e0:	7b7b      	ldrb	r3, [r7, #13]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d102      	bne.n	80078ec <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078e6:	7b3b      	ldrb	r3, [r7, #12]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d001      	beq.n	80078f0 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e05d      	b.n	80079ac <HAL_TIMEx_HallSensor_Start_IT+0x100>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f042 0202 	orr.w	r2, r2, #2
 800791e:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2201      	movs	r2, #1
 8007926:	2100      	movs	r1, #0
 8007928:	4618      	mov	r0, r3
 800792a:	f7ff ff99 	bl	8007860 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a20      	ldr	r2, [pc, #128]	@ (80079b4 <HAL_TIMEx_HallSensor_Start_IT+0x108>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d018      	beq.n	800796a <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007940:	d013      	beq.n	800796a <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a1c      	ldr	r2, [pc, #112]	@ (80079b8 <HAL_TIMEx_HallSensor_Start_IT+0x10c>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d00e      	beq.n	800796a <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a1a      	ldr	r2, [pc, #104]	@ (80079bc <HAL_TIMEx_HallSensor_Start_IT+0x110>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d009      	beq.n	800796a <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a19      	ldr	r2, [pc, #100]	@ (80079c0 <HAL_TIMEx_HallSensor_Start_IT+0x114>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d004      	beq.n	800796a <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a17      	ldr	r2, [pc, #92]	@ (80079c4 <HAL_TIMEx_HallSensor_Start_IT+0x118>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d115      	bne.n	8007996 <HAL_TIMEx_HallSensor_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	4b15      	ldr	r3, [pc, #84]	@ (80079c8 <HAL_TIMEx_HallSensor_Start_IT+0x11c>)
 8007972:	4013      	ands	r3, r2
 8007974:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b06      	cmp	r3, #6
 800797a:	d015      	beq.n	80079a8 <HAL_TIMEx_HallSensor_Start_IT+0xfc>
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007982:	d011      	beq.n	80079a8 <HAL_TIMEx_HallSensor_Start_IT+0xfc>
    {
      __HAL_TIM_ENABLE(htim);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f042 0201 	orr.w	r2, r2, #1
 8007992:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007994:	e008      	b.n	80079a8 <HAL_TIMEx_HallSensor_Start_IT+0xfc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f042 0201 	orr.w	r2, r2, #1
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	e000      	b.n	80079aa <HAL_TIMEx_HallSensor_Start_IT+0xfe>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	40012c00 	.word	0x40012c00
 80079b8:	40000400 	.word	0x40000400
 80079bc:	40000800 	.word	0x40000800
 80079c0:	40013400 	.word	0x40013400
 80079c4:	40014000 	.word	0x40014000
 80079c8:	00010007 	.word	0x00010007

080079cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d101      	bne.n	80079e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079e0:	2302      	movs	r3, #2
 80079e2:	e065      	b.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2202      	movs	r2, #2
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a2c      	ldr	r2, [pc, #176]	@ (8007abc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d004      	beq.n	8007a18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a2b      	ldr	r2, [pc, #172]	@ (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d108      	bne.n	8007a2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007a1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8007abc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d018      	beq.n	8007a84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a5a:	d013      	beq.n	8007a84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a18      	ldr	r2, [pc, #96]	@ (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d00e      	beq.n	8007a84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a17      	ldr	r2, [pc, #92]	@ (8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d009      	beq.n	8007a84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a12      	ldr	r2, [pc, #72]	@ (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d004      	beq.n	8007a84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a13      	ldr	r2, [pc, #76]	@ (8007acc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d10c      	bne.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	40012c00 	.word	0x40012c00
 8007ac0:	40013400 	.word	0x40013400
 8007ac4:	40000400 	.word	0x40000400
 8007ac8:	40000800 	.word	0x40000800
 8007acc:	40014000 	.word	0x40014000

08007ad0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e073      	b.n	8007bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	041b      	lsls	r3, r3, #16
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a19      	ldr	r2, [pc, #100]	@ (8007be0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d004      	beq.n	8007b88 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a18      	ldr	r2, [pc, #96]	@ (8007be4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d11c      	bne.n	8007bc2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b92:	051b      	lsls	r3, r3, #20
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	40012c00 	.word	0x40012c00
 8007be4:	40013400 	.word	0x40013400

08007be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e042      	b.n	8007d0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d106      	bne.n	8007c9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7fa f8f7 	bl	8001e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2224      	movs	r2, #36	@ 0x24
 8007ca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 0201 	bic.w	r2, r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 ff18 	bl	8008af4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fc49 	bl	800855c <UART_SetConfig>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d101      	bne.n	8007cd4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e01b      	b.n	8007d0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689a      	ldr	r2, [r3, #8]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0201 	orr.w	r2, r2, #1
 8007d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 ff97 	bl	8008c38 <UART_CheckIdleState>
 8007d0a:	4603      	mov	r3, r0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b08a      	sub	sp, #40	@ 0x28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d28:	2b20      	cmp	r3, #32
 8007d2a:	d137      	bne.n	8007d9c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_UART_Receive_IT+0x24>
 8007d32:	88fb      	ldrh	r3, [r7, #6]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e030      	b.n	8007d9e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a18      	ldr	r2, [pc, #96]	@ (8007da8 <HAL_UART_Receive_IT+0x94>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d01f      	beq.n	8007d8c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d018      	beq.n	8007d8c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	e853 3f00 	ldrex	r3, [r3]
 8007d66:	613b      	str	r3, [r7, #16]
   return(result);
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d78:	623b      	str	r3, [r7, #32]
 8007d7a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7c:	69f9      	ldr	r1, [r7, #28]
 8007d7e:	6a3a      	ldr	r2, [r7, #32]
 8007d80:	e841 2300 	strex	r3, r2, [r1]
 8007d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1e6      	bne.n	8007d5a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d8c:	88fb      	ldrh	r3, [r7, #6]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f001 f868 	bl	8008e68 <UART_Start_Receive_IT>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	e000      	b.n	8007d9e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d9c:	2302      	movs	r3, #2
  }
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3728      	adds	r7, #40	@ 0x28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	40008000 	.word	0x40008000

08007dac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08a      	sub	sp, #40	@ 0x28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	4613      	mov	r3, r2
 8007db8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d167      	bne.n	8007e94 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <HAL_UART_Transmit_DMA+0x24>
 8007dca:	88fb      	ldrh	r3, [r7, #6]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e060      	b.n	8007e96 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	88fa      	ldrh	r2, [r7, #6]
 8007dde:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	88fa      	ldrh	r2, [r7, #6]
 8007de6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2221      	movs	r2, #33	@ 0x21
 8007df6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d028      	beq.n	8007e54 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e06:	4a26      	ldr	r2, [pc, #152]	@ (8007ea0 <HAL_UART_Transmit_DMA+0xf4>)
 8007e08:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e0e:	4a25      	ldr	r2, [pc, #148]	@ (8007ea4 <HAL_UART_Transmit_DMA+0xf8>)
 8007e10:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e16:	4a24      	ldr	r2, [pc, #144]	@ (8007ea8 <HAL_UART_Transmit_DMA+0xfc>)
 8007e18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e1e:	2200      	movs	r2, #0
 8007e20:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3328      	adds	r3, #40	@ 0x28
 8007e32:	461a      	mov	r2, r3
 8007e34:	88fb      	ldrh	r3, [r7, #6]
 8007e36:	f7fc ff35 	bl	8004ca4 <HAL_DMA_Start_IT>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d009      	beq.n	8007e54 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2210      	movs	r2, #16
 8007e44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e020      	b.n	8007e96 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2240      	movs	r2, #64	@ 0x40
 8007e5a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3308      	adds	r3, #8
 8007e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	e853 3f00 	ldrex	r3, [r3]
 8007e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3308      	adds	r3, #8
 8007e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e7c:	623a      	str	r2, [r7, #32]
 8007e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e80:	69f9      	ldr	r1, [r7, #28]
 8007e82:	6a3a      	ldr	r2, [r7, #32]
 8007e84:	e841 2300 	strex	r3, r2, [r1]
 8007e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e5      	bne.n	8007e5c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	e000      	b.n	8007e96 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007e94:	2302      	movs	r3, #2
  }
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3728      	adds	r7, #40	@ 0x28
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	080091fb 	.word	0x080091fb
 8007ea4:	08009295 	.word	0x08009295
 8007ea8:	080092b1 	.word	0x080092b1

08007eac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b0ba      	sub	sp, #232	@ 0xe8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ed2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007ed6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007eda:	4013      	ands	r3, r2
 8007edc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007ee0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d11b      	bne.n	8007f20 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eec:	f003 0320 	and.w	r3, r3, #32
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d015      	beq.n	8007f20 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ef8:	f003 0320 	and.w	r3, r3, #32
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d105      	bne.n	8007f0c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d009      	beq.n	8007f20 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 82e3 	beq.w	80084dc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	4798      	blx	r3
      }
      return;
 8007f1e:	e2dd      	b.n	80084dc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 8123 	beq.w	8008170 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007f2e:	4b8d      	ldr	r3, [pc, #564]	@ (8008164 <HAL_UART_IRQHandler+0x2b8>)
 8007f30:	4013      	ands	r3, r2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d106      	bne.n	8007f44 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007f3a:	4b8b      	ldr	r3, [pc, #556]	@ (8008168 <HAL_UART_IRQHandler+0x2bc>)
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 8116 	beq.w	8008170 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d011      	beq.n	8007f74 <HAL_UART_IRQHandler+0xc8>
 8007f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00b      	beq.n	8007f74 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2201      	movs	r2, #1
 8007f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f6a:	f043 0201 	orr.w	r2, r3, #1
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d011      	beq.n	8007fa4 <HAL_UART_IRQHandler+0xf8>
 8007f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00b      	beq.n	8007fa4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2202      	movs	r2, #2
 8007f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f9a:	f043 0204 	orr.w	r2, r3, #4
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d011      	beq.n	8007fd4 <HAL_UART_IRQHandler+0x128>
 8007fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00b      	beq.n	8007fd4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2204      	movs	r2, #4
 8007fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fca:	f043 0202 	orr.w	r2, r3, #2
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fd8:	f003 0308 	and.w	r3, r3, #8
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d017      	beq.n	8008010 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fe4:	f003 0320 	and.w	r3, r3, #32
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d105      	bne.n	8007ff8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007fec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007ff0:	4b5c      	ldr	r3, [pc, #368]	@ (8008164 <HAL_UART_IRQHandler+0x2b8>)
 8007ff2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00b      	beq.n	8008010 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2208      	movs	r2, #8
 8007ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008006:	f043 0208 	orr.w	r2, r3, #8
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008014:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008018:	2b00      	cmp	r3, #0
 800801a:	d012      	beq.n	8008042 <HAL_UART_IRQHandler+0x196>
 800801c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008020:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00c      	beq.n	8008042 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008030:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008038:	f043 0220 	orr.w	r2, r3, #32
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 8249 	beq.w	80084e0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800804e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008052:	f003 0320 	and.w	r3, r3, #32
 8008056:	2b00      	cmp	r3, #0
 8008058:	d013      	beq.n	8008082 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800805a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b00      	cmp	r3, #0
 8008064:	d105      	bne.n	8008072 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800806a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d007      	beq.n	8008082 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008088:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008096:	2b40      	cmp	r3, #64	@ 0x40
 8008098:	d005      	beq.n	80080a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800809a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800809e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d054      	beq.n	8008150 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f001 f841 	bl	800912e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080b6:	2b40      	cmp	r3, #64	@ 0x40
 80080b8:	d146      	bne.n	8008148 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3308      	adds	r3, #8
 80080c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80080c8:	e853 3f00 	ldrex	r3, [r3]
 80080cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80080d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	3308      	adds	r3, #8
 80080e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80080e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80080ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80080f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80080fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1d9      	bne.n	80080ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800810c:	2b00      	cmp	r3, #0
 800810e:	d017      	beq.n	8008140 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008116:	4a15      	ldr	r2, [pc, #84]	@ (800816c <HAL_UART_IRQHandler+0x2c0>)
 8008118:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008120:	4618      	mov	r0, r3
 8008122:	f7fc fe93 	bl	8004e4c <HAL_DMA_Abort_IT>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d019      	beq.n	8008160 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800813a:	4610      	mov	r0, r2
 800813c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800813e:	e00f      	b.n	8008160 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f9f5 	bl	8008530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008146:	e00b      	b.n	8008160 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f9f1 	bl	8008530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800814e:	e007      	b.n	8008160 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f9ed 	bl	8008530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800815e:	e1bf      	b.n	80084e0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008160:	bf00      	nop
    return;
 8008162:	e1bd      	b.n	80084e0 <HAL_UART_IRQHandler+0x634>
 8008164:	10000001 	.word	0x10000001
 8008168:	04000120 	.word	0x04000120
 800816c:	08009331 	.word	0x08009331

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008174:	2b01      	cmp	r3, #1
 8008176:	f040 8153 	bne.w	8008420 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800817a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800817e:	f003 0310 	and.w	r3, r3, #16
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 814c 	beq.w	8008420 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800818c:	f003 0310 	and.w	r3, r3, #16
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 8145 	beq.w	8008420 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2210      	movs	r2, #16
 800819c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a8:	2b40      	cmp	r3, #64	@ 0x40
 80081aa:	f040 80bb 	bne.w	8008324 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 818f 	beq.w	80084e4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80081cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081d0:	429a      	cmp	r2, r3
 80081d2:	f080 8187 	bcs.w	80084e4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0320 	and.w	r3, r3, #32
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f040 8087 	bne.w	8008302 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008200:	e853 3f00 	ldrex	r3, [r3]
 8008204:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008208:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800820c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008210:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	461a      	mov	r2, r3
 800821a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800821e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008222:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008226:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800822a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008236:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1da      	bne.n	80081f4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3308      	adds	r3, #8
 8008244:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008246:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800824e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008250:	f023 0301 	bic.w	r3, r3, #1
 8008254:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3308      	adds	r3, #8
 800825e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008262:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008266:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008268:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800826a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008274:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e1      	bne.n	800823e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3308      	adds	r3, #8
 8008280:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008282:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008284:	e853 3f00 	ldrex	r3, [r3]
 8008288:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800828a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800828c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008290:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3308      	adds	r3, #8
 800829a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800829e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80082a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80082a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80082a6:	e841 2300 	strex	r3, r2, [r1]
 80082aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80082ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1e3      	bne.n	800827a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80082ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082d0:	f023 0310 	bic.w	r3, r3, #16
 80082d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	461a      	mov	r2, r3
 80082de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082ea:	e841 2300 	strex	r3, r2, [r1]
 80082ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e4      	bne.n	80082c0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fc fd4c 	bl	8004d9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2202      	movs	r2, #2
 8008306:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008314:	b29b      	uxth	r3, r3
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	b29b      	uxth	r3, r3
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f911 	bl	8008544 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008322:	e0df      	b.n	80084e4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008330:	b29b      	uxth	r3, r3
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800833e:	b29b      	uxth	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 80d1 	beq.w	80084e8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008346:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 80cc 	beq.w	80084e8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008358:	e853 3f00 	ldrex	r3, [r3]
 800835c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800835e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008360:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008364:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	461a      	mov	r2, r3
 800836e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008372:	647b      	str	r3, [r7, #68]	@ 0x44
 8008374:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008378:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e4      	bne.n	8008350 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3308      	adds	r3, #8
 800838c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	623b      	str	r3, [r7, #32]
   return(result);
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800839c:	f023 0301 	bic.w	r3, r3, #1
 80083a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3308      	adds	r3, #8
 80083aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80083ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80083b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e1      	bne.n	8008386 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2220      	movs	r2, #32
 80083c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	e853 3f00 	ldrex	r3, [r3]
 80083e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 0310 	bic.w	r3, r3, #16
 80083ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80083f8:	61fb      	str	r3, [r7, #28]
 80083fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fc:	69b9      	ldr	r1, [r7, #24]
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	e841 2300 	strex	r3, r2, [r1]
 8008404:	617b      	str	r3, [r7, #20]
   return(result);
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e4      	bne.n	80083d6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2202      	movs	r2, #2
 8008410:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008412:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f893 	bl	8008544 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800841e:	e063      	b.n	80084e8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008424:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00e      	beq.n	800844a <HAL_UART_IRQHandler+0x59e>
 800842c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d008      	beq.n	800844a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008440:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f001 fcd2 	bl	8009dec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008448:	e051      	b.n	80084ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800844a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800844e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008452:	2b00      	cmp	r3, #0
 8008454:	d014      	beq.n	8008480 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800845a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800845e:	2b00      	cmp	r3, #0
 8008460:	d105      	bne.n	800846e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008466:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d008      	beq.n	8008480 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008472:	2b00      	cmp	r3, #0
 8008474:	d03a      	beq.n	80084ec <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	4798      	blx	r3
    }
    return;
 800847e:	e035      	b.n	80084ec <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008488:	2b00      	cmp	r3, #0
 800848a:	d009      	beq.n	80084a0 <HAL_UART_IRQHandler+0x5f4>
 800848c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 ff5f 	bl	800935c <UART_EndTransmit_IT>
    return;
 800849e:	e026      	b.n	80084ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80084a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d009      	beq.n	80084c0 <HAL_UART_IRQHandler+0x614>
 80084ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d003      	beq.n	80084c0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 fcab 	bl	8009e14 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084be:	e016      	b.n	80084ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80084c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d010      	beq.n	80084ee <HAL_UART_IRQHandler+0x642>
 80084cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	da0c      	bge.n	80084ee <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 fc93 	bl	8009e00 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084da:	e008      	b.n	80084ee <HAL_UART_IRQHandler+0x642>
      return;
 80084dc:	bf00      	nop
 80084de:	e006      	b.n	80084ee <HAL_UART_IRQHandler+0x642>
    return;
 80084e0:	bf00      	nop
 80084e2:	e004      	b.n	80084ee <HAL_UART_IRQHandler+0x642>
      return;
 80084e4:	bf00      	nop
 80084e6:	e002      	b.n	80084ee <HAL_UART_IRQHandler+0x642>
      return;
 80084e8:	bf00      	nop
 80084ea:	e000      	b.n	80084ee <HAL_UART_IRQHandler+0x642>
    return;
 80084ec:	bf00      	nop
  }
}
 80084ee:	37e8      	adds	r7, #232	@ 0xe8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	460b      	mov	r3, r1
 800854e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800855c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008560:	b08c      	sub	sp, #48	@ 0x30
 8008562:	af00      	add	r7, sp, #0
 8008564:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	689a      	ldr	r2, [r3, #8]
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	431a      	orrs	r2, r3
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	431a      	orrs	r2, r3
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	69db      	ldr	r3, [r3, #28]
 8008580:	4313      	orrs	r3, r2
 8008582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	4bab      	ldr	r3, [pc, #684]	@ (8008838 <UART_SetConfig+0x2dc>)
 800858c:	4013      	ands	r3, r2
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	6812      	ldr	r2, [r2, #0]
 8008592:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008594:	430b      	orrs	r3, r1
 8008596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	68da      	ldr	r2, [r3, #12]
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4aa0      	ldr	r2, [pc, #640]	@ (800883c <UART_SetConfig+0x2e0>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d004      	beq.n	80085c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085c4:	4313      	orrs	r3, r2
 80085c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80085d2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	6812      	ldr	r2, [r2, #0]
 80085da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085dc:	430b      	orrs	r3, r1
 80085de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e6:	f023 010f 	bic.w	r1, r3, #15
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a91      	ldr	r2, [pc, #580]	@ (8008840 <UART_SetConfig+0x2e4>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d125      	bne.n	800864c <UART_SetConfig+0xf0>
 8008600:	4b90      	ldr	r3, [pc, #576]	@ (8008844 <UART_SetConfig+0x2e8>)
 8008602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	2b03      	cmp	r3, #3
 800860c:	d81a      	bhi.n	8008644 <UART_SetConfig+0xe8>
 800860e:	a201      	add	r2, pc, #4	@ (adr r2, 8008614 <UART_SetConfig+0xb8>)
 8008610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008614:	08008625 	.word	0x08008625
 8008618:	08008635 	.word	0x08008635
 800861c:	0800862d 	.word	0x0800862d
 8008620:	0800863d 	.word	0x0800863d
 8008624:	2301      	movs	r3, #1
 8008626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800862a:	e0d6      	b.n	80087da <UART_SetConfig+0x27e>
 800862c:	2302      	movs	r3, #2
 800862e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008632:	e0d2      	b.n	80087da <UART_SetConfig+0x27e>
 8008634:	2304      	movs	r3, #4
 8008636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800863a:	e0ce      	b.n	80087da <UART_SetConfig+0x27e>
 800863c:	2308      	movs	r3, #8
 800863e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008642:	e0ca      	b.n	80087da <UART_SetConfig+0x27e>
 8008644:	2310      	movs	r3, #16
 8008646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800864a:	e0c6      	b.n	80087da <UART_SetConfig+0x27e>
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a7d      	ldr	r2, [pc, #500]	@ (8008848 <UART_SetConfig+0x2ec>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d138      	bne.n	80086c8 <UART_SetConfig+0x16c>
 8008656:	4b7b      	ldr	r3, [pc, #492]	@ (8008844 <UART_SetConfig+0x2e8>)
 8008658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800865c:	f003 030c 	and.w	r3, r3, #12
 8008660:	2b0c      	cmp	r3, #12
 8008662:	d82d      	bhi.n	80086c0 <UART_SetConfig+0x164>
 8008664:	a201      	add	r2, pc, #4	@ (adr r2, 800866c <UART_SetConfig+0x110>)
 8008666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866a:	bf00      	nop
 800866c:	080086a1 	.word	0x080086a1
 8008670:	080086c1 	.word	0x080086c1
 8008674:	080086c1 	.word	0x080086c1
 8008678:	080086c1 	.word	0x080086c1
 800867c:	080086b1 	.word	0x080086b1
 8008680:	080086c1 	.word	0x080086c1
 8008684:	080086c1 	.word	0x080086c1
 8008688:	080086c1 	.word	0x080086c1
 800868c:	080086a9 	.word	0x080086a9
 8008690:	080086c1 	.word	0x080086c1
 8008694:	080086c1 	.word	0x080086c1
 8008698:	080086c1 	.word	0x080086c1
 800869c:	080086b9 	.word	0x080086b9
 80086a0:	2300      	movs	r3, #0
 80086a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086a6:	e098      	b.n	80087da <UART_SetConfig+0x27e>
 80086a8:	2302      	movs	r3, #2
 80086aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086ae:	e094      	b.n	80087da <UART_SetConfig+0x27e>
 80086b0:	2304      	movs	r3, #4
 80086b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086b6:	e090      	b.n	80087da <UART_SetConfig+0x27e>
 80086b8:	2308      	movs	r3, #8
 80086ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086be:	e08c      	b.n	80087da <UART_SetConfig+0x27e>
 80086c0:	2310      	movs	r3, #16
 80086c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086c6:	e088      	b.n	80087da <UART_SetConfig+0x27e>
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a5f      	ldr	r2, [pc, #380]	@ (800884c <UART_SetConfig+0x2f0>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d125      	bne.n	800871e <UART_SetConfig+0x1c2>
 80086d2:	4b5c      	ldr	r3, [pc, #368]	@ (8008844 <UART_SetConfig+0x2e8>)
 80086d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80086dc:	2b30      	cmp	r3, #48	@ 0x30
 80086de:	d016      	beq.n	800870e <UART_SetConfig+0x1b2>
 80086e0:	2b30      	cmp	r3, #48	@ 0x30
 80086e2:	d818      	bhi.n	8008716 <UART_SetConfig+0x1ba>
 80086e4:	2b20      	cmp	r3, #32
 80086e6:	d00a      	beq.n	80086fe <UART_SetConfig+0x1a2>
 80086e8:	2b20      	cmp	r3, #32
 80086ea:	d814      	bhi.n	8008716 <UART_SetConfig+0x1ba>
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <UART_SetConfig+0x19a>
 80086f0:	2b10      	cmp	r3, #16
 80086f2:	d008      	beq.n	8008706 <UART_SetConfig+0x1aa>
 80086f4:	e00f      	b.n	8008716 <UART_SetConfig+0x1ba>
 80086f6:	2300      	movs	r3, #0
 80086f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086fc:	e06d      	b.n	80087da <UART_SetConfig+0x27e>
 80086fe:	2302      	movs	r3, #2
 8008700:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008704:	e069      	b.n	80087da <UART_SetConfig+0x27e>
 8008706:	2304      	movs	r3, #4
 8008708:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800870c:	e065      	b.n	80087da <UART_SetConfig+0x27e>
 800870e:	2308      	movs	r3, #8
 8008710:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008714:	e061      	b.n	80087da <UART_SetConfig+0x27e>
 8008716:	2310      	movs	r3, #16
 8008718:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800871c:	e05d      	b.n	80087da <UART_SetConfig+0x27e>
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a4b      	ldr	r2, [pc, #300]	@ (8008850 <UART_SetConfig+0x2f4>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d125      	bne.n	8008774 <UART_SetConfig+0x218>
 8008728:	4b46      	ldr	r3, [pc, #280]	@ (8008844 <UART_SetConfig+0x2e8>)
 800872a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800872e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008732:	2bc0      	cmp	r3, #192	@ 0xc0
 8008734:	d016      	beq.n	8008764 <UART_SetConfig+0x208>
 8008736:	2bc0      	cmp	r3, #192	@ 0xc0
 8008738:	d818      	bhi.n	800876c <UART_SetConfig+0x210>
 800873a:	2b80      	cmp	r3, #128	@ 0x80
 800873c:	d00a      	beq.n	8008754 <UART_SetConfig+0x1f8>
 800873e:	2b80      	cmp	r3, #128	@ 0x80
 8008740:	d814      	bhi.n	800876c <UART_SetConfig+0x210>
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <UART_SetConfig+0x1f0>
 8008746:	2b40      	cmp	r3, #64	@ 0x40
 8008748:	d008      	beq.n	800875c <UART_SetConfig+0x200>
 800874a:	e00f      	b.n	800876c <UART_SetConfig+0x210>
 800874c:	2300      	movs	r3, #0
 800874e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008752:	e042      	b.n	80087da <UART_SetConfig+0x27e>
 8008754:	2302      	movs	r3, #2
 8008756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800875a:	e03e      	b.n	80087da <UART_SetConfig+0x27e>
 800875c:	2304      	movs	r3, #4
 800875e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008762:	e03a      	b.n	80087da <UART_SetConfig+0x27e>
 8008764:	2308      	movs	r3, #8
 8008766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800876a:	e036      	b.n	80087da <UART_SetConfig+0x27e>
 800876c:	2310      	movs	r3, #16
 800876e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008772:	e032      	b.n	80087da <UART_SetConfig+0x27e>
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a30      	ldr	r2, [pc, #192]	@ (800883c <UART_SetConfig+0x2e0>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d12a      	bne.n	80087d4 <UART_SetConfig+0x278>
 800877e:	4b31      	ldr	r3, [pc, #196]	@ (8008844 <UART_SetConfig+0x2e8>)
 8008780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008784:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008788:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800878c:	d01a      	beq.n	80087c4 <UART_SetConfig+0x268>
 800878e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008792:	d81b      	bhi.n	80087cc <UART_SetConfig+0x270>
 8008794:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008798:	d00c      	beq.n	80087b4 <UART_SetConfig+0x258>
 800879a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800879e:	d815      	bhi.n	80087cc <UART_SetConfig+0x270>
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d003      	beq.n	80087ac <UART_SetConfig+0x250>
 80087a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087a8:	d008      	beq.n	80087bc <UART_SetConfig+0x260>
 80087aa:	e00f      	b.n	80087cc <UART_SetConfig+0x270>
 80087ac:	2300      	movs	r3, #0
 80087ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087b2:	e012      	b.n	80087da <UART_SetConfig+0x27e>
 80087b4:	2302      	movs	r3, #2
 80087b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ba:	e00e      	b.n	80087da <UART_SetConfig+0x27e>
 80087bc:	2304      	movs	r3, #4
 80087be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087c2:	e00a      	b.n	80087da <UART_SetConfig+0x27e>
 80087c4:	2308      	movs	r3, #8
 80087c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ca:	e006      	b.n	80087da <UART_SetConfig+0x27e>
 80087cc:	2310      	movs	r3, #16
 80087ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087d2:	e002      	b.n	80087da <UART_SetConfig+0x27e>
 80087d4:	2310      	movs	r3, #16
 80087d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a17      	ldr	r2, [pc, #92]	@ (800883c <UART_SetConfig+0x2e0>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	f040 80a8 	bne.w	8008936 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80087ea:	2b08      	cmp	r3, #8
 80087ec:	d834      	bhi.n	8008858 <UART_SetConfig+0x2fc>
 80087ee:	a201      	add	r2, pc, #4	@ (adr r2, 80087f4 <UART_SetConfig+0x298>)
 80087f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f4:	08008819 	.word	0x08008819
 80087f8:	08008859 	.word	0x08008859
 80087fc:	08008821 	.word	0x08008821
 8008800:	08008859 	.word	0x08008859
 8008804:	08008827 	.word	0x08008827
 8008808:	08008859 	.word	0x08008859
 800880c:	08008859 	.word	0x08008859
 8008810:	08008859 	.word	0x08008859
 8008814:	0800882f 	.word	0x0800882f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008818:	f7fd fbf0 	bl	8005ffc <HAL_RCC_GetPCLK1Freq>
 800881c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800881e:	e021      	b.n	8008864 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008820:	4b0c      	ldr	r3, [pc, #48]	@ (8008854 <UART_SetConfig+0x2f8>)
 8008822:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008824:	e01e      	b.n	8008864 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008826:	f7fd fb7b 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 800882a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800882c:	e01a      	b.n	8008864 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800882e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008832:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008834:	e016      	b.n	8008864 <UART_SetConfig+0x308>
 8008836:	bf00      	nop
 8008838:	cfff69f3 	.word	0xcfff69f3
 800883c:	40008000 	.word	0x40008000
 8008840:	40013800 	.word	0x40013800
 8008844:	40021000 	.word	0x40021000
 8008848:	40004400 	.word	0x40004400
 800884c:	40004800 	.word	0x40004800
 8008850:	40004c00 	.word	0x40004c00
 8008854:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008862:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008866:	2b00      	cmp	r3, #0
 8008868:	f000 812a 	beq.w	8008ac0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008870:	4a9e      	ldr	r2, [pc, #632]	@ (8008aec <UART_SetConfig+0x590>)
 8008872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008876:	461a      	mov	r2, r3
 8008878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887a:	fbb3 f3f2 	udiv	r3, r3, r2
 800887e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	4613      	mov	r3, r2
 8008886:	005b      	lsls	r3, r3, #1
 8008888:	4413      	add	r3, r2
 800888a:	69ba      	ldr	r2, [r7, #24]
 800888c:	429a      	cmp	r2, r3
 800888e:	d305      	bcc.n	800889c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	429a      	cmp	r2, r3
 800889a:	d903      	bls.n	80088a4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80088a2:	e10d      	b.n	8008ac0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a6:	2200      	movs	r2, #0
 80088a8:	60bb      	str	r3, [r7, #8]
 80088aa:	60fa      	str	r2, [r7, #12]
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b0:	4a8e      	ldr	r2, [pc, #568]	@ (8008aec <UART_SetConfig+0x590>)
 80088b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	2200      	movs	r2, #0
 80088ba:	603b      	str	r3, [r7, #0]
 80088bc:	607a      	str	r2, [r7, #4]
 80088be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088c6:	f7f8 fa07 	bl	8000cd8 <__aeabi_uldivmod>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4610      	mov	r0, r2
 80088d0:	4619      	mov	r1, r3
 80088d2:	f04f 0200 	mov.w	r2, #0
 80088d6:	f04f 0300 	mov.w	r3, #0
 80088da:	020b      	lsls	r3, r1, #8
 80088dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088e0:	0202      	lsls	r2, r0, #8
 80088e2:	6979      	ldr	r1, [r7, #20]
 80088e4:	6849      	ldr	r1, [r1, #4]
 80088e6:	0849      	lsrs	r1, r1, #1
 80088e8:	2000      	movs	r0, #0
 80088ea:	460c      	mov	r4, r1
 80088ec:	4605      	mov	r5, r0
 80088ee:	eb12 0804 	adds.w	r8, r2, r4
 80088f2:	eb43 0905 	adc.w	r9, r3, r5
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	469a      	mov	sl, r3
 80088fe:	4693      	mov	fp, r2
 8008900:	4652      	mov	r2, sl
 8008902:	465b      	mov	r3, fp
 8008904:	4640      	mov	r0, r8
 8008906:	4649      	mov	r1, r9
 8008908:	f7f8 f9e6 	bl	8000cd8 <__aeabi_uldivmod>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4613      	mov	r3, r2
 8008912:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800891a:	d308      	bcc.n	800892e <UART_SetConfig+0x3d2>
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008922:	d204      	bcs.n	800892e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6a3a      	ldr	r2, [r7, #32]
 800892a:	60da      	str	r2, [r3, #12]
 800892c:	e0c8      	b.n	8008ac0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008934:	e0c4      	b.n	8008ac0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800893e:	d167      	bne.n	8008a10 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008940:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008944:	2b08      	cmp	r3, #8
 8008946:	d828      	bhi.n	800899a <UART_SetConfig+0x43e>
 8008948:	a201      	add	r2, pc, #4	@ (adr r2, 8008950 <UART_SetConfig+0x3f4>)
 800894a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894e:	bf00      	nop
 8008950:	08008975 	.word	0x08008975
 8008954:	0800897d 	.word	0x0800897d
 8008958:	08008985 	.word	0x08008985
 800895c:	0800899b 	.word	0x0800899b
 8008960:	0800898b 	.word	0x0800898b
 8008964:	0800899b 	.word	0x0800899b
 8008968:	0800899b 	.word	0x0800899b
 800896c:	0800899b 	.word	0x0800899b
 8008970:	08008993 	.word	0x08008993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008974:	f7fd fb42 	bl	8005ffc <HAL_RCC_GetPCLK1Freq>
 8008978:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800897a:	e014      	b.n	80089a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800897c:	f7fd fb54 	bl	8006028 <HAL_RCC_GetPCLK2Freq>
 8008980:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008982:	e010      	b.n	80089a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008984:	4b5a      	ldr	r3, [pc, #360]	@ (8008af0 <UART_SetConfig+0x594>)
 8008986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008988:	e00d      	b.n	80089a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800898a:	f7fd fac9 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 800898e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008990:	e009      	b.n	80089a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008996:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008998:	e005      	b.n	80089a6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80089a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 8089 	beq.w	8008ac0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b2:	4a4e      	ldr	r2, [pc, #312]	@ (8008aec <UART_SetConfig+0x590>)
 80089b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089b8:	461a      	mov	r2, r3
 80089ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80089c0:	005a      	lsls	r2, r3, #1
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	085b      	lsrs	r3, r3, #1
 80089c8:	441a      	add	r2, r3
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	2b0f      	cmp	r3, #15
 80089d8:	d916      	bls.n	8008a08 <UART_SetConfig+0x4ac>
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089e0:	d212      	bcs.n	8008a08 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	f023 030f 	bic.w	r3, r3, #15
 80089ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089ec:	6a3b      	ldr	r3, [r7, #32]
 80089ee:	085b      	lsrs	r3, r3, #1
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	8bfb      	ldrh	r3, [r7, #30]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	8bfa      	ldrh	r2, [r7, #30]
 8008a04:	60da      	str	r2, [r3, #12]
 8008a06:	e05b      	b.n	8008ac0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a0e:	e057      	b.n	8008ac0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a14:	2b08      	cmp	r3, #8
 8008a16:	d828      	bhi.n	8008a6a <UART_SetConfig+0x50e>
 8008a18:	a201      	add	r2, pc, #4	@ (adr r2, 8008a20 <UART_SetConfig+0x4c4>)
 8008a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1e:	bf00      	nop
 8008a20:	08008a45 	.word	0x08008a45
 8008a24:	08008a4d 	.word	0x08008a4d
 8008a28:	08008a55 	.word	0x08008a55
 8008a2c:	08008a6b 	.word	0x08008a6b
 8008a30:	08008a5b 	.word	0x08008a5b
 8008a34:	08008a6b 	.word	0x08008a6b
 8008a38:	08008a6b 	.word	0x08008a6b
 8008a3c:	08008a6b 	.word	0x08008a6b
 8008a40:	08008a63 	.word	0x08008a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a44:	f7fd fada 	bl	8005ffc <HAL_RCC_GetPCLK1Freq>
 8008a48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a4a:	e014      	b.n	8008a76 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a4c:	f7fd faec 	bl	8006028 <HAL_RCC_GetPCLK2Freq>
 8008a50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a52:	e010      	b.n	8008a76 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a54:	4b26      	ldr	r3, [pc, #152]	@ (8008af0 <UART_SetConfig+0x594>)
 8008a56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a58:	e00d      	b.n	8008a76 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a5a:	f7fd fa61 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 8008a5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a60:	e009      	b.n	8008a76 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a68:	e005      	b.n	8008a76 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a74:	bf00      	nop
    }

    if (pclk != 0U)
 8008a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d021      	beq.n	8008ac0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a80:	4a1a      	ldr	r2, [pc, #104]	@ (8008aec <UART_SetConfig+0x590>)
 8008a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	085b      	lsrs	r3, r3, #1
 8008a94:	441a      	add	r2, r3
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	2b0f      	cmp	r3, #15
 8008aa4:	d909      	bls.n	8008aba <UART_SetConfig+0x55e>
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aac:	d205      	bcs.n	8008aba <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	60da      	str	r2, [r3, #12]
 8008ab8:	e002      	b.n	8008ac0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008adc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3730      	adds	r7, #48	@ 0x30
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008aea:	bf00      	nop
 8008aec:	0800ee68 	.word	0x0800ee68
 8008af0:	00f42400 	.word	0x00f42400

08008af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b00:	f003 0308 	and.w	r3, r3, #8
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00a      	beq.n	8008b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00a      	beq.n	8008b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b44:	f003 0302 	and.w	r3, r3, #2
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00a      	beq.n	8008b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b66:	f003 0304 	and.w	r3, r3, #4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b88:	f003 0310 	and.w	r3, r3, #16
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00a      	beq.n	8008ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008baa:	f003 0320 	and.w	r3, r3, #32
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d01a      	beq.n	8008c0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bf2:	d10a      	bne.n	8008c0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	430a      	orrs	r2, r1
 8008c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00a      	beq.n	8008c2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	605a      	str	r2, [r3, #4]
  }
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b098      	sub	sp, #96	@ 0x60
 8008c3c:	af02      	add	r7, sp, #8
 8008c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c48:	f7f9 fa3c 	bl	80020c4 <HAL_GetTick>
 8008c4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0308 	and.w	r3, r3, #8
 8008c58:	2b08      	cmp	r3, #8
 8008c5a:	d12f      	bne.n	8008cbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c64:	2200      	movs	r2, #0
 8008c66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f88e 	bl	8008d8c <UART_WaitOnFlagUntilTimeout>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d022      	beq.n	8008cbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7e:	e853 3f00 	ldrex	r3, [r3]
 8008c82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	461a      	mov	r2, r3
 8008c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c9c:	e841 2300 	strex	r3, r2, [r1]
 8008ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1e6      	bne.n	8008c76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2220      	movs	r2, #32
 8008cac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e063      	b.n	8008d84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0304 	and.w	r3, r3, #4
 8008cc6:	2b04      	cmp	r3, #4
 8008cc8:	d149      	bne.n	8008d5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f857 	bl	8008d8c <UART_WaitOnFlagUntilTimeout>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d03c      	beq.n	8008d5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d02:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e6      	bne.n	8008ce4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	e853 3f00 	ldrex	r3, [r3]
 8008d24:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f023 0301 	bic.w	r3, r3, #1
 8008d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3308      	adds	r3, #8
 8008d34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d36:	61fa      	str	r2, [r7, #28]
 8008d38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3a:	69b9      	ldr	r1, [r7, #24]
 8008d3c:	69fa      	ldr	r2, [r7, #28]
 8008d3e:	e841 2300 	strex	r3, r2, [r1]
 8008d42:	617b      	str	r3, [r7, #20]
   return(result);
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1e5      	bne.n	8008d16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e012      	b.n	8008d84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2220      	movs	r2, #32
 8008d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3758      	adds	r7, #88	@ 0x58
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d9c:	e04f      	b.n	8008e3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da4:	d04b      	beq.n	8008e3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008da6:	f7f9 f98d 	bl	80020c4 <HAL_GetTick>
 8008daa:	4602      	mov	r2, r0
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d302      	bcc.n	8008dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d101      	bne.n	8008dc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e04e      	b.n	8008e5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0304 	and.w	r3, r3, #4
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d037      	beq.n	8008e3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2b80      	cmp	r3, #128	@ 0x80
 8008dd2:	d034      	beq.n	8008e3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2b40      	cmp	r3, #64	@ 0x40
 8008dd8:	d031      	beq.n	8008e3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	f003 0308 	and.w	r3, r3, #8
 8008de4:	2b08      	cmp	r3, #8
 8008de6:	d110      	bne.n	8008e0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2208      	movs	r2, #8
 8008dee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 f99c 	bl	800912e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2208      	movs	r2, #8
 8008dfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e029      	b.n	8008e5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e18:	d111      	bne.n	8008e3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 f982 	bl	800912e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e00f      	b.n	8008e5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	69da      	ldr	r2, [r3, #28]
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	4013      	ands	r3, r2
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	bf0c      	ite	eq
 8008e4e:	2301      	moveq	r3, #1
 8008e50:	2300      	movne	r3, #0
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	461a      	mov	r2, r3
 8008e56:	79fb      	ldrb	r3, [r7, #7]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d0a0      	beq.n	8008d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
	...

08008e68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b0a3      	sub	sp, #140	@ 0x8c
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	4613      	mov	r3, r2
 8008e74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	88fa      	ldrh	r2, [r7, #6]
 8008e80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	88fa      	ldrh	r2, [r7, #6]
 8008e88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e9a:	d10e      	bne.n	8008eba <UART_Start_Receive_IT+0x52>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d105      	bne.n	8008eb0 <UART_Start_Receive_IT+0x48>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008eaa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008eae:	e02d      	b.n	8008f0c <UART_Start_Receive_IT+0xa4>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	22ff      	movs	r2, #255	@ 0xff
 8008eb4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008eb8:	e028      	b.n	8008f0c <UART_Start_Receive_IT+0xa4>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10d      	bne.n	8008ede <UART_Start_Receive_IT+0x76>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d104      	bne.n	8008ed4 <UART_Start_Receive_IT+0x6c>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	22ff      	movs	r2, #255	@ 0xff
 8008ece:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ed2:	e01b      	b.n	8008f0c <UART_Start_Receive_IT+0xa4>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	227f      	movs	r2, #127	@ 0x7f
 8008ed8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008edc:	e016      	b.n	8008f0c <UART_Start_Receive_IT+0xa4>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ee6:	d10d      	bne.n	8008f04 <UART_Start_Receive_IT+0x9c>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d104      	bne.n	8008efa <UART_Start_Receive_IT+0x92>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	227f      	movs	r2, #127	@ 0x7f
 8008ef4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ef8:	e008      	b.n	8008f0c <UART_Start_Receive_IT+0xa4>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	223f      	movs	r2, #63	@ 0x3f
 8008efe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f02:	e003      	b.n	8008f0c <UART_Start_Receive_IT+0xa4>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2222      	movs	r2, #34	@ 0x22
 8008f18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3308      	adds	r3, #8
 8008f22:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f26:	e853 3f00 	ldrex	r3, [r3]
 8008f2a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008f2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f2e:	f043 0301 	orr.w	r3, r3, #1
 8008f32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3308      	adds	r3, #8
 8008f3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008f40:	673a      	str	r2, [r7, #112]	@ 0x70
 8008f42:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f44:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008f46:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008f48:	e841 2300 	strex	r3, r2, [r1]
 8008f4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008f4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1e3      	bne.n	8008f1c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f5c:	d14f      	bne.n	8008ffe <UART_Start_Receive_IT+0x196>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f64:	88fa      	ldrh	r2, [r7, #6]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d349      	bcc.n	8008ffe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f72:	d107      	bne.n	8008f84 <UART_Start_Receive_IT+0x11c>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d103      	bne.n	8008f84 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4a47      	ldr	r2, [pc, #284]	@ (800909c <UART_Start_Receive_IT+0x234>)
 8008f80:	675a      	str	r2, [r3, #116]	@ 0x74
 8008f82:	e002      	b.n	8008f8a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	4a46      	ldr	r2, [pc, #280]	@ (80090a0 <UART_Start_Receive_IT+0x238>)
 8008f88:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d01a      	beq.n	8008fc8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f9a:	e853 3f00 	ldrex	r3, [r3]
 8008f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fa6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008fb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fb6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008fba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008fbc:	e841 2300 	strex	r3, r2, [r1]
 8008fc0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1e4      	bne.n	8008f92 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3308      	adds	r3, #8
 8008fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fd2:	e853 3f00 	ldrex	r3, [r3]
 8008fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fde:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	3308      	adds	r3, #8
 8008fe6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008fe8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008fea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008fee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ff0:	e841 2300 	strex	r3, r2, [r1]
 8008ff4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008ff6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1e5      	bne.n	8008fc8 <UART_Start_Receive_IT+0x160>
 8008ffc:	e046      	b.n	800908c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009006:	d107      	bne.n	8009018 <UART_Start_Receive_IT+0x1b0>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d103      	bne.n	8009018 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4a24      	ldr	r2, [pc, #144]	@ (80090a4 <UART_Start_Receive_IT+0x23c>)
 8009014:	675a      	str	r2, [r3, #116]	@ 0x74
 8009016:	e002      	b.n	800901e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	4a23      	ldr	r2, [pc, #140]	@ (80090a8 <UART_Start_Receive_IT+0x240>)
 800901c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d019      	beq.n	800905a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902e:	e853 3f00 	ldrex	r3, [r3]
 8009032:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009036:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800903a:	677b      	str	r3, [r7, #116]	@ 0x74
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	461a      	mov	r2, r3
 8009042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009044:	637b      	str	r3, [r7, #52]	@ 0x34
 8009046:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009048:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800904a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800904c:	e841 2300 	strex	r3, r2, [r1]
 8009050:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1e6      	bne.n	8009026 <UART_Start_Receive_IT+0x1be>
 8009058:	e018      	b.n	800908c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	e853 3f00 	ldrex	r3, [r3]
 8009066:	613b      	str	r3, [r7, #16]
   return(result);
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	f043 0320 	orr.w	r3, r3, #32
 800906e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	461a      	mov	r2, r3
 8009076:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009078:	623b      	str	r3, [r7, #32]
 800907a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907c:	69f9      	ldr	r1, [r7, #28]
 800907e:	6a3a      	ldr	r2, [r7, #32]
 8009080:	e841 2300 	strex	r3, r2, [r1]
 8009084:	61bb      	str	r3, [r7, #24]
   return(result);
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1e6      	bne.n	800905a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	378c      	adds	r7, #140	@ 0x8c
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	08009a85 	.word	0x08009a85
 80090a0:	08009725 	.word	0x08009725
 80090a4:	0800956d 	.word	0x0800956d
 80090a8:	080093b5 	.word	0x080093b5

080090ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b08f      	sub	sp, #60	@ 0x3c
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	e853 3f00 	ldrex	r3, [r3]
 80090c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80090c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090d4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090da:	e841 2300 	strex	r3, r2, [r1]
 80090de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e6      	bne.n	80090b4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3308      	adds	r3, #8
 80090ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	e853 3f00 	ldrex	r3, [r3]
 80090f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80090fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3308      	adds	r3, #8
 8009104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009106:	61ba      	str	r2, [r7, #24]
 8009108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910a:	6979      	ldr	r1, [r7, #20]
 800910c:	69ba      	ldr	r2, [r7, #24]
 800910e:	e841 2300 	strex	r3, r2, [r1]
 8009112:	613b      	str	r3, [r7, #16]
   return(result);
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1e5      	bne.n	80090e6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2220      	movs	r2, #32
 800911e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009122:	bf00      	nop
 8009124:	373c      	adds	r7, #60	@ 0x3c
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800912e:	b480      	push	{r7}
 8009130:	b095      	sub	sp, #84	@ 0x54
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800913e:	e853 3f00 	ldrex	r3, [r3]
 8009142:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009146:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800914a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	461a      	mov	r2, r3
 8009152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009154:	643b      	str	r3, [r7, #64]	@ 0x40
 8009156:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800915a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800915c:	e841 2300 	strex	r3, r2, [r1]
 8009160:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e6      	bne.n	8009136 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3308      	adds	r3, #8
 800916e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009170:	6a3b      	ldr	r3, [r7, #32]
 8009172:	e853 3f00 	ldrex	r3, [r3]
 8009176:	61fb      	str	r3, [r7, #28]
   return(result);
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800917e:	f023 0301 	bic.w	r3, r3, #1
 8009182:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	3308      	adds	r3, #8
 800918a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800918c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800918e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009190:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009192:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009194:	e841 2300 	strex	r3, r2, [r1]
 8009198:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800919a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919c:	2b00      	cmp	r3, #0
 800919e:	d1e3      	bne.n	8009168 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d118      	bne.n	80091da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	e853 3f00 	ldrex	r3, [r3]
 80091b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	f023 0310 	bic.w	r3, r3, #16
 80091bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	461a      	mov	r2, r3
 80091c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091c6:	61bb      	str	r3, [r7, #24]
 80091c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	6979      	ldr	r1, [r7, #20]
 80091cc:	69ba      	ldr	r2, [r7, #24]
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	613b      	str	r3, [r7, #16]
   return(result);
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e6      	bne.n	80091a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2220      	movs	r2, #32
 80091de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80091ee:	bf00      	nop
 80091f0:	3754      	adds	r7, #84	@ 0x54
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b090      	sub	sp, #64	@ 0x40
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009206:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0320 	and.w	r3, r3, #32
 8009212:	2b00      	cmp	r3, #0
 8009214:	d137      	bne.n	8009286 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009218:	2200      	movs	r2, #0
 800921a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800921e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3308      	adds	r3, #8
 8009224:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009228:	e853 3f00 	ldrex	r3, [r3]
 800922c:	623b      	str	r3, [r7, #32]
   return(result);
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009234:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3308      	adds	r3, #8
 800923c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800923e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009240:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009242:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009246:	e841 2300 	strex	r3, r2, [r1]
 800924a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800924c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1e5      	bne.n	800921e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	e853 3f00 	ldrex	r3, [r3]
 800925e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009266:	637b      	str	r3, [r7, #52]	@ 0x34
 8009268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	461a      	mov	r2, r3
 800926e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009270:	61fb      	str	r3, [r7, #28]
 8009272:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009274:	69b9      	ldr	r1, [r7, #24]
 8009276:	69fa      	ldr	r2, [r7, #28]
 8009278:	e841 2300 	strex	r3, r2, [r1]
 800927c:	617b      	str	r3, [r7, #20]
   return(result);
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1e6      	bne.n	8009252 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009284:	e002      	b.n	800928c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009286:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009288:	f7ff f934 	bl	80084f4 <HAL_UART_TxCpltCallback>
}
 800928c:	bf00      	nop
 800928e:	3740      	adds	r7, #64	@ 0x40
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092a0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f7ff f930 	bl	8008508 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092a8:	bf00      	nop
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092bc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092c4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092cc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092d8:	2b80      	cmp	r3, #128	@ 0x80
 80092da:	d109      	bne.n	80092f0 <UART_DMAError+0x40>
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	2b21      	cmp	r3, #33	@ 0x21
 80092e0:	d106      	bne.n	80092f0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80092ea:	6978      	ldr	r0, [r7, #20]
 80092ec:	f7ff fede 	bl	80090ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092fa:	2b40      	cmp	r3, #64	@ 0x40
 80092fc:	d109      	bne.n	8009312 <UART_DMAError+0x62>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2b22      	cmp	r3, #34	@ 0x22
 8009302:	d106      	bne.n	8009312 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	2200      	movs	r2, #0
 8009308:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800930c:	6978      	ldr	r0, [r7, #20]
 800930e:	f7ff ff0e 	bl	800912e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009318:	f043 0210 	orr.w	r2, r3, #16
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009322:	6978      	ldr	r0, [r7, #20]
 8009324:	f7ff f904 	bl	8008530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009328:	bf00      	nop
 800932a:	3718      	adds	r7, #24
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f7ff f8ee 	bl	8008530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009354:	bf00      	nop
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	e853 3f00 	ldrex	r3, [r3]
 8009370:	60bb      	str	r3, [r7, #8]
   return(result);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009378:	61fb      	str	r3, [r7, #28]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	461a      	mov	r2, r3
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	61bb      	str	r3, [r7, #24]
 8009384:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009386:	6979      	ldr	r1, [r7, #20]
 8009388:	69ba      	ldr	r2, [r7, #24]
 800938a:	e841 2300 	strex	r3, r2, [r1]
 800938e:	613b      	str	r3, [r7, #16]
   return(result);
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1e6      	bne.n	8009364 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2220      	movs	r2, #32
 800939a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f7ff f8a5 	bl	80084f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093aa:	bf00      	nop
 80093ac:	3720      	adds	r7, #32
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
	...

080093b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b09c      	sub	sp, #112	@ 0x70
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80093c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093cc:	2b22      	cmp	r3, #34	@ 0x22
 80093ce:	f040 80be 	bne.w	800954e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80093dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80093e0:	b2d9      	uxtb	r1, r3
 80093e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ec:	400a      	ands	r2, r1
 80093ee:	b2d2      	uxtb	r2, r2
 80093f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009402:	b29b      	uxth	r3, r3
 8009404:	3b01      	subs	r3, #1
 8009406:	b29a      	uxth	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009414:	b29b      	uxth	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	f040 80a1 	bne.w	800955e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009424:	e853 3f00 	ldrex	r3, [r3]
 8009428:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800942a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800942c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009430:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800943a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800943c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009440:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009442:	e841 2300 	strex	r3, r2, [r1]
 8009446:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1e6      	bne.n	800941c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3308      	adds	r3, #8
 8009454:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009458:	e853 3f00 	ldrex	r3, [r3]
 800945c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800945e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009460:	f023 0301 	bic.w	r3, r3, #1
 8009464:	667b      	str	r3, [r7, #100]	@ 0x64
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3308      	adds	r3, #8
 800946c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800946e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009470:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009474:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800947c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1e5      	bne.n	800944e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2220      	movs	r2, #32
 8009486:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a33      	ldr	r2, [pc, #204]	@ (8009568 <UART_RxISR_8BIT+0x1b4>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d01f      	beq.n	80094e0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d018      	beq.n	80094e0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b6:	e853 3f00 	ldrex	r3, [r3]
 80094ba:	623b      	str	r3, [r7, #32]
   return(result);
 80094bc:	6a3b      	ldr	r3, [r7, #32]
 80094be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80094c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	461a      	mov	r2, r3
 80094ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80094ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094d4:	e841 2300 	strex	r3, r2, [r1]
 80094d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1e6      	bne.n	80094ae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d12e      	bne.n	8009546 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	e853 3f00 	ldrex	r3, [r3]
 80094fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f023 0310 	bic.w	r3, r3, #16
 8009502:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	461a      	mov	r2, r3
 800950a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800950c:	61fb      	str	r3, [r7, #28]
 800950e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009510:	69b9      	ldr	r1, [r7, #24]
 8009512:	69fa      	ldr	r2, [r7, #28]
 8009514:	e841 2300 	strex	r3, r2, [r1]
 8009518:	617b      	str	r3, [r7, #20]
   return(result);
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1e6      	bne.n	80094ee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	f003 0310 	and.w	r3, r3, #16
 800952a:	2b10      	cmp	r3, #16
 800952c:	d103      	bne.n	8009536 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2210      	movs	r2, #16
 8009534:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f7ff f800 	bl	8008544 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009544:	e00b      	b.n	800955e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7fe ffe8 	bl	800851c <HAL_UART_RxCpltCallback>
}
 800954c:	e007      	b.n	800955e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	699a      	ldr	r2, [r3, #24]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f042 0208 	orr.w	r2, r2, #8
 800955c:	619a      	str	r2, [r3, #24]
}
 800955e:	bf00      	nop
 8009560:	3770      	adds	r7, #112	@ 0x70
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	40008000 	.word	0x40008000

0800956c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b09c      	sub	sp, #112	@ 0x70
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800957a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009584:	2b22      	cmp	r3, #34	@ 0x22
 8009586:	f040 80be 	bne.w	8009706 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009590:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009598:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800959a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800959e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80095a2:	4013      	ands	r3, r2
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80095a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ae:	1c9a      	adds	r2, r3, #2
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	3b01      	subs	r3, #1
 80095be:	b29a      	uxth	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f040 80a1 	bne.w	8009716 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095dc:	e853 3f00 	ldrex	r3, [r3]
 80095e0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80095e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	461a      	mov	r2, r3
 80095f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80095f4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80095f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80095fa:	e841 2300 	strex	r3, r2, [r1]
 80095fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1e6      	bne.n	80095d4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3308      	adds	r3, #8
 800960c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009610:	e853 3f00 	ldrex	r3, [r3]
 8009614:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009618:	f023 0301 	bic.w	r3, r3, #1
 800961c:	663b      	str	r3, [r7, #96]	@ 0x60
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3308      	adds	r3, #8
 8009624:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009626:	643a      	str	r2, [r7, #64]	@ 0x40
 8009628:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800962c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800962e:	e841 2300 	strex	r3, r2, [r1]
 8009632:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1e5      	bne.n	8009606 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2220      	movs	r2, #32
 800963e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a33      	ldr	r2, [pc, #204]	@ (8009720 <UART_RxISR_16BIT+0x1b4>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d01f      	beq.n	8009698 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d018      	beq.n	8009698 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	e853 3f00 	ldrex	r3, [r3]
 8009672:	61fb      	str	r3, [r7, #28]
   return(result);
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800967a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	461a      	mov	r2, r3
 8009682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009686:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009688:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800968a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800968c:	e841 2300 	strex	r3, r2, [r1]
 8009690:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1e6      	bne.n	8009666 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800969c:	2b01      	cmp	r3, #1
 800969e:	d12e      	bne.n	80096fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	e853 3f00 	ldrex	r3, [r3]
 80096b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	f023 0310 	bic.w	r3, r3, #16
 80096ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	461a      	mov	r2, r3
 80096c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096c4:	61bb      	str	r3, [r7, #24]
 80096c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c8:	6979      	ldr	r1, [r7, #20]
 80096ca:	69ba      	ldr	r2, [r7, #24]
 80096cc:	e841 2300 	strex	r3, r2, [r1]
 80096d0:	613b      	str	r3, [r7, #16]
   return(result);
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1e6      	bne.n	80096a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	f003 0310 	and.w	r3, r3, #16
 80096e2:	2b10      	cmp	r3, #16
 80096e4:	d103      	bne.n	80096ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2210      	movs	r2, #16
 80096ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7fe ff24 	bl	8008544 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096fc:	e00b      	b.n	8009716 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7fe ff0c 	bl	800851c <HAL_UART_RxCpltCallback>
}
 8009704:	e007      	b.n	8009716 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	699a      	ldr	r2, [r3, #24]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f042 0208 	orr.w	r2, r2, #8
 8009714:	619a      	str	r2, [r3, #24]
}
 8009716:	bf00      	nop
 8009718:	3770      	adds	r7, #112	@ 0x70
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	40008000 	.word	0x40008000

08009724 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b0ac      	sub	sp, #176	@ 0xb0
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009732:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	69db      	ldr	r3, [r3, #28]
 800973c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800975a:	2b22      	cmp	r3, #34	@ 0x22
 800975c:	f040 8182 	bne.w	8009a64 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009766:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800976a:	e125      	b.n	80099b8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009772:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009776:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800977a:	b2d9      	uxtb	r1, r3
 800977c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009780:	b2da      	uxtb	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009786:	400a      	ands	r2, r1
 8009788:	b2d2      	uxtb	r2, r2
 800978a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009790:	1c5a      	adds	r2, r3, #1
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800979c:	b29b      	uxth	r3, r3
 800979e:	3b01      	subs	r3, #1
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80097b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097b6:	f003 0307 	and.w	r3, r3, #7
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d053      	beq.n	8009866 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d011      	beq.n	80097ee <UART_RxISR_8BIT_FIFOEN+0xca>
 80097ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80097ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00b      	beq.n	80097ee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2201      	movs	r2, #1
 80097dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097e4:	f043 0201 	orr.w	r2, r3, #1
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097f2:	f003 0302 	and.w	r3, r3, #2
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d011      	beq.n	800981e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80097fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00b      	beq.n	800981e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2202      	movs	r2, #2
 800980c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009814:	f043 0204 	orr.w	r2, r3, #4
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800981e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009822:	f003 0304 	and.w	r3, r3, #4
 8009826:	2b00      	cmp	r3, #0
 8009828:	d011      	beq.n	800984e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800982a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800982e:	f003 0301 	and.w	r3, r3, #1
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00b      	beq.n	800984e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2204      	movs	r2, #4
 800983c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009844:	f043 0202 	orr.w	r2, r3, #2
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009854:	2b00      	cmp	r3, #0
 8009856:	d006      	beq.n	8009866 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7fe fe69 	bl	8008530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800986c:	b29b      	uxth	r3, r3
 800986e:	2b00      	cmp	r3, #0
 8009870:	f040 80a2 	bne.w	80099b8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800987c:	e853 3f00 	ldrex	r3, [r3]
 8009880:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009884:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009888:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	461a      	mov	r2, r3
 8009892:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009896:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009898:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800989c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800989e:	e841 2300 	strex	r3, r2, [r1]
 80098a2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80098a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1e4      	bne.n	8009874 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3308      	adds	r3, #8
 80098b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098b4:	e853 3f00 	ldrex	r3, [r3]
 80098b8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80098ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80098bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098c0:	f023 0301 	bic.w	r3, r3, #1
 80098c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3308      	adds	r3, #8
 80098ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80098d2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80098d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80098d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80098da:	e841 2300 	strex	r3, r2, [r1]
 80098de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80098e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1e1      	bne.n	80098aa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2220      	movs	r2, #32
 80098ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a5f      	ldr	r2, [pc, #380]	@ (8009a7c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d021      	beq.n	8009948 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800990e:	2b00      	cmp	r3, #0
 8009910:	d01a      	beq.n	8009948 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800991a:	e853 3f00 	ldrex	r3, [r3]
 800991e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009922:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009926:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	461a      	mov	r2, r3
 8009930:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009934:	657b      	str	r3, [r7, #84]	@ 0x54
 8009936:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009938:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800993a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800993c:	e841 2300 	strex	r3, r2, [r1]
 8009940:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1e4      	bne.n	8009912 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800994c:	2b01      	cmp	r3, #1
 800994e:	d130      	bne.n	80099b2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800995e:	e853 3f00 	ldrex	r3, [r3]
 8009962:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009966:	f023 0310 	bic.w	r3, r3, #16
 800996a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	461a      	mov	r2, r3
 8009974:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009978:	643b      	str	r3, [r7, #64]	@ 0x40
 800997a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800997e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009980:	e841 2300 	strex	r3, r2, [r1]
 8009984:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1e4      	bne.n	8009956 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	69db      	ldr	r3, [r3, #28]
 8009992:	f003 0310 	and.w	r3, r3, #16
 8009996:	2b10      	cmp	r3, #16
 8009998:	d103      	bne.n	80099a2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2210      	movs	r2, #16
 80099a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099a8:	4619      	mov	r1, r3
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7fe fdca 	bl	8008544 <HAL_UARTEx_RxEventCallback>
 80099b0:	e002      	b.n	80099b8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7fe fdb2 	bl	800851c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80099b8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d006      	beq.n	80099ce <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80099c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099c4:	f003 0320 	and.w	r3, r3, #32
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f47f aecf 	bne.w	800976c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80099d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d049      	beq.n	8009a74 <UART_RxISR_8BIT_FIFOEN+0x350>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80099e6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d242      	bcs.n	8009a74 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3308      	adds	r3, #8
 80099f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	e853 3f00 	ldrex	r3, [r3]
 80099fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	3308      	adds	r3, #8
 8009a0e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009a12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a1a:	e841 2300 	strex	r3, r2, [r1]
 8009a1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1e3      	bne.n	80099ee <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a15      	ldr	r2, [pc, #84]	@ (8009a80 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009a2a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	e853 3f00 	ldrex	r3, [r3]
 8009a38:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	f043 0320 	orr.w	r3, r3, #32
 8009a40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009a4e:	61bb      	str	r3, [r7, #24]
 8009a50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a52:	6979      	ldr	r1, [r7, #20]
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	e841 2300 	strex	r3, r2, [r1]
 8009a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1e4      	bne.n	8009a2c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a62:	e007      	b.n	8009a74 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	699a      	ldr	r2, [r3, #24]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f042 0208 	orr.w	r2, r2, #8
 8009a72:	619a      	str	r2, [r3, #24]
}
 8009a74:	bf00      	nop
 8009a76:	37b0      	adds	r7, #176	@ 0xb0
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	40008000 	.word	0x40008000
 8009a80:	080093b5 	.word	0x080093b5

08009a84 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b0ae      	sub	sp, #184	@ 0xb8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a92:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	69db      	ldr	r3, [r3, #28]
 8009a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009aba:	2b22      	cmp	r3, #34	@ 0x22
 8009abc:	f040 8186 	bne.w	8009dcc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009ac6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009aca:	e129      	b.n	8009d20 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ada:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009ade:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009ae2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009aee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009af4:	1c9a      	adds	r2, r3, #2
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	3b01      	subs	r3, #1
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	69db      	ldr	r3, [r3, #28]
 8009b12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009b16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009b1a:	f003 0307 	and.w	r3, r3, #7
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d053      	beq.n	8009bca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009b26:	f003 0301 	and.w	r3, r3, #1
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d011      	beq.n	8009b52 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00b      	beq.n	8009b52 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b48:	f043 0201 	orr.w	r2, r3, #1
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009b56:	f003 0302 	and.w	r3, r3, #2
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d011      	beq.n	8009b82 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009b5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00b      	beq.n	8009b82 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2202      	movs	r2, #2
 8009b70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b78:	f043 0204 	orr.w	r2, r3, #4
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009b86:	f003 0304 	and.w	r3, r3, #4
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d011      	beq.n	8009bb2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009b8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00b      	beq.n	8009bb2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2204      	movs	r2, #4
 8009ba0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ba8:	f043 0202 	orr.w	r2, r3, #2
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d006      	beq.n	8009bca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7fe fcb7 	bl	8008530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f040 80a4 	bne.w	8009d20 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009be6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009bfa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009bfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c06:	e841 2300 	strex	r3, r2, [r1]
 8009c0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1e2      	bne.n	8009bd8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3308      	adds	r3, #8
 8009c18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c1c:	e853 3f00 	ldrex	r3, [r3]
 8009c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c28:	f023 0301 	bic.w	r3, r3, #1
 8009c2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	3308      	adds	r3, #8
 8009c36:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009c3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009c3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c42:	e841 2300 	strex	r3, r2, [r1]
 8009c46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1e1      	bne.n	8009c12 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2220      	movs	r2, #32
 8009c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a5f      	ldr	r2, [pc, #380]	@ (8009de4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d021      	beq.n	8009cb0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d01a      	beq.n	8009cb0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c82:	e853 3f00 	ldrex	r3, [r3]
 8009c86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	461a      	mov	r2, r3
 8009c98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009c9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c9e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ca2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ca4:	e841 2300 	strex	r3, r2, [r1]
 8009ca8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1e4      	bne.n	8009c7a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d130      	bne.n	8009d1a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc6:	e853 3f00 	ldrex	r3, [r3]
 8009cca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cce:	f023 0310 	bic.w	r3, r3, #16
 8009cd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ce2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ce6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ce8:	e841 2300 	strex	r3, r2, [r1]
 8009cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1e4      	bne.n	8009cbe <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	f003 0310 	and.w	r3, r3, #16
 8009cfe:	2b10      	cmp	r3, #16
 8009d00:	d103      	bne.n	8009d0a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2210      	movs	r2, #16
 8009d08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7fe fc16 	bl	8008544 <HAL_UARTEx_RxEventCallback>
 8009d18:	e002      	b.n	8009d20 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7fe fbfe 	bl	800851c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d20:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d006      	beq.n	8009d36 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009d28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d2c:	f003 0320 	and.w	r3, r3, #32
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f47f aecb 	bne.w	8009acc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d3c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009d40:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d049      	beq.n	8009ddc <UART_RxISR_16BIT_FIFOEN+0x358>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009d4e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d242      	bcs.n	8009ddc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3308      	adds	r3, #8
 8009d5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d60:	e853 3f00 	ldrex	r3, [r3]
 8009d64:	623b      	str	r3, [r7, #32]
   return(result);
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3308      	adds	r3, #8
 8009d76:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009d7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d82:	e841 2300 	strex	r3, r2, [r1]
 8009d86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1e3      	bne.n	8009d56 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a15      	ldr	r2, [pc, #84]	@ (8009de8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009d92:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	e853 3f00 	ldrex	r3, [r3]
 8009da0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f043 0320 	orr.w	r3, r3, #32
 8009da8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	461a      	mov	r2, r3
 8009db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009db6:	61fb      	str	r3, [r7, #28]
 8009db8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dba:	69b9      	ldr	r1, [r7, #24]
 8009dbc:	69fa      	ldr	r2, [r7, #28]
 8009dbe:	e841 2300 	strex	r3, r2, [r1]
 8009dc2:	617b      	str	r3, [r7, #20]
   return(result);
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1e4      	bne.n	8009d94 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009dca:	e007      	b.n	8009ddc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	699a      	ldr	r2, [r3, #24]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f042 0208 	orr.w	r2, r2, #8
 8009dda:	619a      	str	r2, [r3, #24]
}
 8009ddc:	bf00      	nop
 8009dde:	37b8      	adds	r7, #184	@ 0xb8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	40008000 	.word	0x40008000
 8009de8:	0800956d 	.word	0x0800956d

08009dec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009df4:	bf00      	nop
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d101      	bne.n	8009e3e <HAL_UARTEx_DisableFifoMode+0x16>
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	e027      	b.n	8009e8e <HAL_UARTEx_DisableFifoMode+0x66>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2224      	movs	r2, #36	@ 0x24
 8009e4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f022 0201 	bic.w	r2, r2, #1
 8009e64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009e6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2220      	movs	r2, #32
 8009e80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3714      	adds	r7, #20
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b084      	sub	sp, #16
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d101      	bne.n	8009eb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009eae:	2302      	movs	r3, #2
 8009eb0:	e02d      	b.n	8009f0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2224      	movs	r2, #36	@ 0x24
 8009ebe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f022 0201 	bic.w	r2, r2, #1
 8009ed8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f850 	bl	8009f94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2220      	movs	r2, #32
 8009f00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b084      	sub	sp, #16
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d101      	bne.n	8009f2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	e02d      	b.n	8009f8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2224      	movs	r2, #36	@ 0x24
 8009f3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f022 0201 	bic.w	r2, r2, #1
 8009f54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	683a      	ldr	r2, [r7, #0]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f812 	bl	8009f94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2220      	movs	r2, #32
 8009f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
	...

08009f94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d108      	bne.n	8009fb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009fb4:	e031      	b.n	800a01a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009fb6:	2308      	movs	r3, #8
 8009fb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009fba:	2308      	movs	r3, #8
 8009fbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	0e5b      	lsrs	r3, r3, #25
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	f003 0307 	and.w	r3, r3, #7
 8009fcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	0f5b      	lsrs	r3, r3, #29
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	f003 0307 	and.w	r3, r3, #7
 8009fdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fde:	7bbb      	ldrb	r3, [r7, #14]
 8009fe0:	7b3a      	ldrb	r2, [r7, #12]
 8009fe2:	4911      	ldr	r1, [pc, #68]	@ (800a028 <UARTEx_SetNbDataToProcess+0x94>)
 8009fe4:	5c8a      	ldrb	r2, [r1, r2]
 8009fe6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009fea:	7b3a      	ldrb	r2, [r7, #12]
 8009fec:	490f      	ldr	r1, [pc, #60]	@ (800a02c <UARTEx_SetNbDataToProcess+0x98>)
 8009fee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ff0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ff4:	b29a      	uxth	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
 8009ffe:	7b7a      	ldrb	r2, [r7, #13]
 800a000:	4909      	ldr	r1, [pc, #36]	@ (800a028 <UARTEx_SetNbDataToProcess+0x94>)
 800a002:	5c8a      	ldrb	r2, [r1, r2]
 800a004:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a008:	7b7a      	ldrb	r2, [r7, #13]
 800a00a:	4908      	ldr	r1, [pc, #32]	@ (800a02c <UARTEx_SetNbDataToProcess+0x98>)
 800a00c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a00e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a012:	b29a      	uxth	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a01a:	bf00      	nop
 800a01c:	3714      	adds	r7, #20
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	0800ee80 	.word	0x0800ee80
 800a02c:	0800ee88 	.word	0x0800ee88

0800a030 <_sin>:

// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7f6 faac 	bl	8000598 <__aeabi_f2d>
 800a040:	a339      	add	r3, pc, #228	@ (adr r3, 800a128 <_sin+0xf8>)
 800a042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a046:	f7f6 faff 	bl	8000648 <__aeabi_dmul>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	4610      	mov	r0, r2
 800a050:	4619      	mov	r1, r3
 800a052:	f7f6 fdd1 	bl	8000bf8 <__aeabi_d2uiz>
 800a056:	4603      	mov	r3, r0
 800a058:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	0a1b      	lsrs	r3, r3, #8
 800a064:	b2db      	uxtb	r3, r3
 800a066:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b3f      	cmp	r3, #63	@ 0x3f
 800a06c:	d80b      	bhi.n	800a086 <_sin+0x56>
  {
    t1 = sine_array[i];
 800a06e:	4a2c      	ldr	r2, [pc, #176]	@ (800a120 <_sin+0xf0>)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a076:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	3301      	adds	r3, #1
 800a07c:	4a28      	ldr	r2, [pc, #160]	@ (800a120 <_sin+0xf0>)
 800a07e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a082:	613b      	str	r3, [r7, #16]
 800a084:	e033      	b.n	800a0ee <_sin+0xbe>
  }
  else if (i < 128)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2b7f      	cmp	r3, #127	@ 0x7f
 800a08a:	d80e      	bhi.n	800a0aa <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800a092:	4a23      	ldr	r2, [pc, #140]	@ (800a120 <_sin+0xf0>)
 800a094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a098:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800a0a0:	4a1f      	ldr	r2, [pc, #124]	@ (800a120 <_sin+0xf0>)
 800a0a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0a6:	613b      	str	r3, [r7, #16]
 800a0a8:	e021      	b.n	800a0ee <_sin+0xbe>
  }
  else if (i < 192)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2bbf      	cmp	r3, #191	@ 0xbf
 800a0ae:	d80e      	bhi.n	800a0ce <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	3b80      	subs	r3, #128	@ 0x80
 800a0b4:	4a1a      	ldr	r2, [pc, #104]	@ (800a120 <_sin+0xf0>)
 800a0b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0ba:	425b      	negs	r3, r3
 800a0bc:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	3b7f      	subs	r3, #127	@ 0x7f
 800a0c2:	4a17      	ldr	r2, [pc, #92]	@ (800a120 <_sin+0xf0>)
 800a0c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0c8:	425b      	negs	r3, r3
 800a0ca:	613b      	str	r3, [r7, #16]
 800a0cc:	e00f      	b.n	800a0ee <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800a0d4:	4a12      	ldr	r2, [pc, #72]	@ (800a120 <_sin+0xf0>)
 800a0d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0da:	425b      	negs	r3, r3
 800a0dc:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800a0e4:	4a0e      	ldr	r2, [pc, #56]	@ (800a120 <_sin+0xf0>)
 800a0e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0ea:	425b      	negs	r3, r3
 800a0ec:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	fb02 f303 	mul.w	r3, r2, r3
 800a0fa:	121a      	asrs	r2, r3, #8
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	4413      	add	r3, r2
 800a100:	ee07 3a90 	vmov	s15, r3
 800a104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a108:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800a124 <_sin+0xf4>
 800a10c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a110:	eeb0 0a67 	vmov.f32	s0, s15
 800a114:	3718      	adds	r7, #24
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	f3af 8000 	nop.w
 800a120:	20000024 	.word	0x20000024
 800a124:	38000000 	.word	0x38000000
 800a128:	6446f9b4 	.word	0x6446f9b4
 800a12c:	40c45f30 	.word	0x40c45f30

0800a130 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800a13a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a13e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800a188 <_cos+0x58>
 800a142:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a146:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800a14a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a14e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800a18c <_cos+0x5c>
 800a152:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a15a:	dd06      	ble.n	800a16a <_cos+0x3a>
 800a15c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a160:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800a18c <_cos+0x5c>
 800a164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a168:	e001      	b.n	800a16e <_cos+0x3e>
 800a16a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a16e:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800a172:	ed97 0a03 	vldr	s0, [r7, #12]
 800a176:	f7ff ff5b 	bl	800a030 <_sin>
 800a17a:	eef0 7a40 	vmov.f32	s15, s0
}
 800a17e:	eeb0 0a67 	vmov.f32	s0, s15
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	3fc90fdb 	.word	0x3fc90fdb
 800a18c:	40c90fdb 	.word	0x40c90fdb

0800a190 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	ed87 0a03 	vstr	s0, [r7, #12]
 800a19a:	60b8      	str	r0, [r7, #8]
 800a19c:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800a19e:	ed97 0a03 	vldr	s0, [r7, #12]
 800a1a2:	f7ff ff45 	bl	800a030 <_sin>
 800a1a6:	eef0 7a40 	vmov.f32	s15, s0
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800a1b0:	ed97 0a03 	vldr	s0, [r7, #12]
 800a1b4:	f7ff ffbc 	bl	800a130 <_cos>
 800a1b8:	eef0 7a40 	vmov.f32	s15, s0
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	edc3 7a00 	vstr	s15, [r3]
}
 800a1c2:	bf00      	nop
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
static bool powerLost;
void userMain(void)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	af00      	add	r7, sp, #0
	//
	//	if (get500MsFlag())
	//	{
	//		printLog();
	//	}
}
 800a1ce:	bf00      	nop
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_GPIO_EXTI_Callback>:
void setPowerLost()
{
	powerLost = 1;
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	80fb      	strh	r3, [r7, #6]
	// 	}
	// }
	/* NOTE: This function should not be modified, when the callback is needed,
			 the HAL_GPIO_EXTI_Callback could be implemented in the user file
	 */
}
 800a1e2:	bf00      	nop
 800a1e4:	370c      	adds	r7, #12
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
	...

0800a1f0 <HAL_ADCEx_InjectedConvCpltCallback>:
	USART3->TDR = (uint8_t)ch;
	return ch;
}

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]

	// 		Ia = (adc1_in1 - IA_Offset) * 0.02197f;
	// 		Ib = (adc1_in2 - IB_Offset) * 0.02197f;
	// 		Ic = (adc1_in3 - IC_Offset) * 0.02197f;
	static float elecAngle;
	elecAngle += 0.01;
 800a1f8:	4b23      	ldr	r3, [pc, #140]	@ (800a288 <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7f6 f9cb 	bl	8000598 <__aeabi_f2d>
 800a202:	a31f      	add	r3, pc, #124	@ (adr r3, 800a280 <HAL_ADCEx_InjectedConvCpltCallback+0x90>)
 800a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a208:	f7f6 f868 	bl	80002dc <__adddf3>
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	4610      	mov	r0, r2
 800a212:	4619      	mov	r1, r3
 800a214:	f7f6 fd10 	bl	8000c38 <__aeabi_d2f>
 800a218:	4603      	mov	r3, r0
 800a21a:	4a1b      	ldr	r2, [pc, #108]	@ (800a288 <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 800a21c:	6013      	str	r3, [r2, #0]
	if (elecAngle >= _2PI)
 800a21e:	4b1a      	ldr	r3, [pc, #104]	@ (800a288 <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 800a220:	edd3 7a00 	vldr	s15, [r3]
 800a224:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800a28c <HAL_ADCEx_InjectedConvCpltCallback+0x9c>
 800a228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a230:	db03      	blt.n	800a23a <HAL_ADCEx_InjectedConvCpltCallback+0x4a>
		elecAngle = 0;
 800a232:	4b15      	ldr	r3, [pc, #84]	@ (800a288 <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 800a234:	f04f 0200 	mov.w	r2, #0
 800a238:	601a      	str	r2, [r3, #0]
	// setPhaseVoltage(&fp1, 2, 0, elecAngle);
	setPhaseVoltage1(2, 0, elecAngle);
 800a23a:	4b13      	ldr	r3, [pc, #76]	@ (800a288 <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4618      	mov	r0, r3
 800a240:	f7f6 f9aa 	bl	8000598 <__aeabi_f2d>
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	ec43 2b10 	vmov	d0, r2, r3
 800a24c:	2100      	movs	r1, #0
 800a24e:	2002      	movs	r0, #2
 800a250:	f000 f836 	bl	800a2c0 <setPhaseVoltage1>
#if SHOW_WAVE

	// load_data[0] = fp1.d1;
	// load_data[1] = fp1.d2;
	// load_data[2] = fp1.d3;
	load_data[3] = 0;
 800a254:	4b0e      	ldr	r3, [pc, #56]	@ (800a290 <HAL_ADCEx_InjectedConvCpltCallback+0xa0>)
 800a256:	f04f 0200 	mov.w	r2, #0
 800a25a:	60da      	str	r2, [r3, #12]
	load_data[4] = 0;
 800a25c:	4b0c      	ldr	r3, [pc, #48]	@ (800a290 <HAL_ADCEx_InjectedConvCpltCallback+0xa0>)
 800a25e:	f04f 0200 	mov.w	r2, #0
 800a262:	611a      	str	r2, [r3, #16]
	memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
 800a264:	2214      	movs	r2, #20
 800a266:	490a      	ldr	r1, [pc, #40]	@ (800a290 <HAL_ADCEx_InjectedConvCpltCallback+0xa0>)
 800a268:	480a      	ldr	r0, [pc, #40]	@ (800a294 <HAL_ADCEx_InjectedConvCpltCallback+0xa4>)
 800a26a:	f001 fa8c 	bl	800b786 <memcpy>
	HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, 6 * 4);
 800a26e:	2218      	movs	r2, #24
 800a270:	4908      	ldr	r1, [pc, #32]	@ (800a294 <HAL_ADCEx_InjectedConvCpltCallback+0xa4>)
 800a272:	4809      	ldr	r0, [pc, #36]	@ (800a298 <HAL_ADCEx_InjectedConvCpltCallback+0xa8>)
 800a274:	f7fd fd9a 	bl	8007dac <HAL_UART_Transmit_DMA>
	// }

	/* NOTE : This function should not be modified. When the callback is needed,
			  function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
	*/
}
 800a278:	bf00      	nop
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	47ae147b 	.word	0x47ae147b
 800a284:	3f847ae1 	.word	0x3f847ae1
 800a288:	20000514 	.word	0x20000514
 800a28c:	40c90fdb 	.word	0x40c90fdb
 800a290:	20000500 	.word	0x20000500
 800a294:	2000000c 	.word	0x2000000c
 800a298:	20000404 	.word	0x20000404

0800a29c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
	// }

	/* NOTE : This function should not be modified, when the callback is needed,
			  the HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <FDCAN_Config>:

void FDCAN_Config(void)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	af00      	add	r7, sp, #0
	// TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	// TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	// TxHeader.MessageMarker = 0x52;

	// HAL_FDCAN_Start(&hfdcan1);
}
 800a2b4:	bf00      	nop
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
	...

0800a2c0 <setPhaseVoltage1>:
    PWM_GENERATE(d1, d2, d3);
}
#else

void setPhaseVoltage1(float Uq, float Ud, float angle_el)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b092      	sub	sp, #72	@ 0x48
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	ed87 0a03 	vstr	s0, [r7, #12]
 800a2ca:	edc7 0a02 	vstr	s1, [r7, #8]
 800a2ce:	ed87 1a01 	vstr	s2, [r7, #4]

    Uq = _constrain(Uq, -UqMAX, UqMAX);
 800a2d2:	edd7 7a03 	vldr	s15, [r7, #12]
 800a2d6:	ed9f 7acd 	vldr	s14, [pc, #820]	@ 800a60c <setPhaseVoltage1+0x34c>
 800a2da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2e2:	d501      	bpl.n	800a2e8 <setPhaseVoltage1+0x28>
 800a2e4:	4bca      	ldr	r3, [pc, #808]	@ (800a610 <setPhaseVoltage1+0x350>)
 800a2e6:	e00b      	b.n	800a300 <setPhaseVoltage1+0x40>
 800a2e8:	edd7 7a03 	vldr	s15, [r7, #12]
 800a2ec:	ed9f 7ac9 	vldr	s14, [pc, #804]	@ 800a614 <setPhaseVoltage1+0x354>
 800a2f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2f8:	dd01      	ble.n	800a2fe <setPhaseVoltage1+0x3e>
 800a2fa:	4bc7      	ldr	r3, [pc, #796]	@ (800a618 <setPhaseVoltage1+0x358>)
 800a2fc:	e000      	b.n	800a300 <setPhaseVoltage1+0x40>
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	60fb      	str	r3, [r7, #12]

    float ct;
    float st;
    _sincos(angle_el, &st, &ct);
 800a302:	f107 0214 	add.w	r2, r7, #20
 800a306:	f107 0310 	add.w	r3, r7, #16
 800a30a:	4611      	mov	r1, r2
 800a30c:	4618      	mov	r0, r3
 800a30e:	ed97 0a01 	vldr	s0, [r7, #4]
 800a312:	f7ff ff3d 	bl	800a190 <_sincos>
    // Park逆变换
    float Ualpha = -Uq * st + Ud * ct;
 800a316:	edd7 7a03 	vldr	s15, [r7, #12]
 800a31a:	eeb1 7a67 	vneg.f32	s14, s15
 800a31e:	edd7 7a04 	vldr	s15, [r7, #16]
 800a322:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a326:	edd7 6a05 	vldr	s13, [r7, #20]
 800a32a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a32e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a332:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a336:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float Ubeta = Uq * ct + Ud * st;
 800a33a:	ed97 7a05 	vldr	s14, [r7, #20]
 800a33e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a342:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a346:	edd7 6a04 	vldr	s13, [r7, #16]
 800a34a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a34e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a352:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a356:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    uint32_t d1, d2, d3;
    float tFirst = 0, tSecond = 0;
 800a35a:	f04f 0300 	mov.w	r3, #0
 800a35e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a360:	f04f 0300 	mov.w	r3, #0
 800a364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float K = _SQRT3 * HALP_PWM_PERIOD / U_DC;
 800a366:	4bad      	ldr	r3, [pc, #692]	@ (800a61c <setPhaseVoltage1+0x35c>)
 800a368:	62bb      	str	r3, [r7, #40]	@ 0x28
    float X = K * Ubeta;
 800a36a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800a36e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800a372:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a376:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float Y = K * (_SQRT3 * Ualpha / 2.0f - Ubeta / 2.0f);
 800a37a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800a37e:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 800a620 <setPhaseVoltage1+0x360>
 800a382:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a386:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a38a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a38e:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800a392:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800a396:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800a39a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a39e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800a3a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a6:	edc7 7a08 	vstr	s15, [r7, #32]
    float Z = K * (-_SQRT3 * Ualpha / 2.0f - Ubeta / 2.0f);
 800a3aa:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800a3ae:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 800a624 <setPhaseVoltage1+0x364>
 800a3b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3b6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a3ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a3be:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800a3c2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800a3c6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800a3ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3ce:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800a3d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3d6:	edc7 7a07 	vstr	s15, [r7, #28]

    uint8_t sector = sectorRemap[(X > 0.0f) + ((Y > 0.0f) << 1) + ((Z > 0.0f) << 2)]; // sector = A + 2B + 4C
 800a3da:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800a3de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e6:	bfcc      	ite	gt
 800a3e8:	2301      	movgt	r3, #1
 800a3ea:	2300      	movle	r3, #0
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	edd7 7a08 	vldr	s15, [r7, #32]
 800a3f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3fc:	dd01      	ble.n	800a402 <setPhaseVoltage1+0x142>
 800a3fe:	2302      	movs	r3, #2
 800a400:	e000      	b.n	800a404 <setPhaseVoltage1+0x144>
 800a402:	2300      	movs	r3, #0
 800a404:	4413      	add	r3, r2
 800a406:	edd7 7a07 	vldr	s15, [r7, #28]
 800a40a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a412:	dd01      	ble.n	800a418 <setPhaseVoltage1+0x158>
 800a414:	2204      	movs	r2, #4
 800a416:	e000      	b.n	800a41a <setPhaseVoltage1+0x15a>
 800a418:	2200      	movs	r2, #0
 800a41a:	4413      	add	r3, r2
 800a41c:	4a82      	ldr	r2, [pc, #520]	@ (800a628 <setPhaseVoltage1+0x368>)
 800a41e:	5cd3      	ldrb	r3, [r2, r3]
 800a420:	76fb      	strb	r3, [r7, #27]

    switch (sector)
 800a422:	7efb      	ldrb	r3, [r7, #27]
 800a424:	3b01      	subs	r3, #1
 800a426:	2b05      	cmp	r3, #5
 800a428:	f200 8172 	bhi.w	800a710 <setPhaseVoltage1+0x450>
 800a42c:	a201      	add	r2, pc, #4	@ (adr r2, 800a434 <setPhaseVoltage1+0x174>)
 800a42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a432:	bf00      	nop
 800a434:	0800a44d 	.word	0x0800a44d
 800a438:	0800a4b5 	.word	0x0800a4b5
 800a43c:	0800a52d 	.word	0x0800a52d
 800a440:	0800a595 	.word	0x0800a595
 800a444:	0800a631 	.word	0x0800a631
 800a448:	0800a699 	.word	0x0800a699
    {
    case 1:
        tFirst = Y;
 800a44c:	6a3b      	ldr	r3, [r7, #32]
 800a44e:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = X;
 800a450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a452:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d1 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800a454:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800a62c <setPhaseVoltage1+0x36c>
 800a458:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a45c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a460:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a464:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a468:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a46c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a474:	ee17 3a90 	vmov	r3, s15
 800a478:	647b      	str	r3, [r7, #68]	@ 0x44
        d2 = d1 + tFirst;
 800a47a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a47c:	ee07 3a90 	vmov	s15, r3
 800a480:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a484:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a48c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a490:	ee17 3a90 	vmov	r3, s15
 800a494:	643b      	str	r3, [r7, #64]	@ 0x40
        d3 = d2 + tSecond;
 800a496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a498:	ee07 3a90 	vmov	s15, r3
 800a49c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a4a0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a4a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4ac:	ee17 3a90 	vmov	r3, s15
 800a4b0:	63fb      	str	r3, [r7, #60]	@ 0x3c

        break;
 800a4b2:	e12d      	b.n	800a710 <setPhaseVoltage1+0x450>
    case 2:
        tFirst = -Y;
 800a4b4:	edd7 7a08 	vldr	s15, [r7, #32]
 800a4b8:	eef1 7a67 	vneg.f32	s15, s15
 800a4bc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -Z;
 800a4c0:	edd7 7a07 	vldr	s15, [r7, #28]
 800a4c4:	eef1 7a67 	vneg.f32	s15, s15
 800a4c8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d2 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800a4cc:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 800a62c <setPhaseVoltage1+0x36c>
 800a4d0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a4d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4d8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a4dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4e0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a4e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a4e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4ec:	ee17 3a90 	vmov	r3, s15
 800a4f0:	643b      	str	r3, [r7, #64]	@ 0x40
        d1 = d2 + tFirst;
 800a4f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4f4:	ee07 3a90 	vmov	s15, r3
 800a4f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a4fc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a500:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a508:	ee17 3a90 	vmov	r3, s15
 800a50c:	647b      	str	r3, [r7, #68]	@ 0x44
        d3 = d1 + tSecond;
 800a50e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a510:	ee07 3a90 	vmov	s15, r3
 800a514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a518:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a51c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a524:	ee17 3a90 	vmov	r3, s15
 800a528:	63fb      	str	r3, [r7, #60]	@ 0x3c

        break;
 800a52a:	e0f1      	b.n	800a710 <setPhaseVoltage1+0x450>
    case 3:
        tFirst = X;
 800a52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a52e:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = Z;
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d2 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800a534:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800a62c <setPhaseVoltage1+0x36c>
 800a538:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a53c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a540:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a544:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a548:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a54c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a554:	ee17 3a90 	vmov	r3, s15
 800a558:	643b      	str	r3, [r7, #64]	@ 0x40
        d3 = d2 + tFirst;
 800a55a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a55c:	ee07 3a90 	vmov	s15, r3
 800a560:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a564:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a56c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a570:	ee17 3a90 	vmov	r3, s15
 800a574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d1 = d3 + tSecond;
 800a576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a578:	ee07 3a90 	vmov	s15, r3
 800a57c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a580:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a584:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a58c:	ee17 3a90 	vmov	r3, s15
 800a590:	647b      	str	r3, [r7, #68]	@ 0x44

        break;
 800a592:	e0bd      	b.n	800a710 <setPhaseVoltage1+0x450>
    case 4:
        tFirst = -X;
 800a594:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800a598:	eef1 7a67 	vneg.f32	s15, s15
 800a59c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -Y;
 800a5a0:	edd7 7a08 	vldr	s15, [r7, #32]
 800a5a4:	eef1 7a67 	vneg.f32	s15, s15
 800a5a8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d3 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800a5ac:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800a62c <setPhaseVoltage1+0x36c>
 800a5b0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a5b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a5b8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a5bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a5c0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a5c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5cc:	ee17 3a90 	vmov	r3, s15
 800a5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d2 = d3 + tFirst;
 800a5d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5d4:	ee07 3a90 	vmov	s15, r3
 800a5d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a5dc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a5e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5e8:	ee17 3a90 	vmov	r3, s15
 800a5ec:	643b      	str	r3, [r7, #64]	@ 0x40
        d1 = d2 + tSecond;
 800a5ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5f0:	ee07 3a90 	vmov	s15, r3
 800a5f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a5f8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a5fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a604:	ee17 3a90 	vmov	r3, s15
 800a608:	647b      	str	r3, [r7, #68]	@ 0x44

        break;
 800a60a:	e081      	b.n	800a710 <setPhaseVoltage1+0x450>
 800a60c:	c0ddb3d7 	.word	0xc0ddb3d7
 800a610:	c0ddb3d7 	.word	0xc0ddb3d7
 800a614:	40ddb3d7 	.word	0x40ddb3d7
 800a618:	40ddb3d7 	.word	0x40ddb3d7
 800a61c:	4490566b 	.word	0x4490566b
 800a620:	3fddb3d7 	.word	0x3fddb3d7
 800a624:	bfddb3d7 	.word	0xbfddb3d7
 800a628:	0800ee90 	.word	0x0800ee90
 800a62c:	45fa0000 	.word	0x45fa0000

    case 5:
        tFirst = Z;
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = Y;
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d3 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800a638:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 800a62c <setPhaseVoltage1+0x36c>
 800a63c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a640:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a644:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a648:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a64c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a650:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a658:	ee17 3a90 	vmov	r3, s15
 800a65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d1 = d3 + tFirst;
 800a65e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a660:	ee07 3a90 	vmov	s15, r3
 800a664:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a668:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a66c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a674:	ee17 3a90 	vmov	r3, s15
 800a678:	647b      	str	r3, [r7, #68]	@ 0x44
        d2 = d1 + tSecond;
 800a67a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a67c:	ee07 3a90 	vmov	s15, r3
 800a680:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a684:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a68c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a690:	ee17 3a90 	vmov	r3, s15
 800a694:	643b      	str	r3, [r7, #64]	@ 0x40

        break;
 800a696:	e03b      	b.n	800a710 <setPhaseVoltage1+0x450>

    case 6:
        tFirst = -Z;
 800a698:	edd7 7a07 	vldr	s15, [r7, #28]
 800a69c:	eef1 7a67 	vneg.f32	s15, s15
 800a6a0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -X;
 800a6a4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800a6a8:	eef1 7a67 	vneg.f32	s15, s15
 800a6ac:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d1 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800a6b0:	ed1f 7a22 	vldr	s14, [pc, #-136]	@ 800a62c <setPhaseVoltage1+0x36c>
 800a6b4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a6b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a6bc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a6c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a6c4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a6c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a6cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6d0:	ee17 3a90 	vmov	r3, s15
 800a6d4:	647b      	str	r3, [r7, #68]	@ 0x44
        d3 = d1 + tFirst;
 800a6d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6d8:	ee07 3a90 	vmov	s15, r3
 800a6dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a6e0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a6e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6ec:	ee17 3a90 	vmov	r3, s15
 800a6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d2 = d3 + tSecond;
 800a6f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6f4:	ee07 3a90 	vmov	s15, r3
 800a6f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a6fc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a700:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a708:	ee17 3a90 	vmov	r3, s15
 800a70c:	643b      	str	r3, [r7, #64]	@ 0x40

        break;
 800a70e:	bf00      	nop
    }

    load_data[0] = d1;
 800a710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a712:	ee07 3a90 	vmov	s15, r3
 800a716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a71a:	4b10      	ldr	r3, [pc, #64]	@ (800a75c <setPhaseVoltage1+0x49c>)
 800a71c:	edc3 7a00 	vstr	s15, [r3]
    load_data[1] = d2;
 800a720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a722:	ee07 3a90 	vmov	s15, r3
 800a726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a72a:	4b0c      	ldr	r3, [pc, #48]	@ (800a75c <setPhaseVoltage1+0x49c>)
 800a72c:	edc3 7a01 	vstr	s15, [r3, #4]
    load_data[2] = d3;
 800a730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a732:	ee07 3a90 	vmov	s15, r3
 800a736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a73a:	4b08      	ldr	r3, [pc, #32]	@ (800a75c <setPhaseVoltage1+0x49c>)
 800a73c:	edc3 7a02 	vstr	s15, [r3, #8]
//    load_data[3] = Uq;

    PWM_GENERATE(d1, d2, d3);
 800a740:	4a07      	ldr	r2, [pc, #28]	@ (800a760 <setPhaseVoltage1+0x4a0>)
 800a742:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a744:	6353      	str	r3, [r2, #52]	@ 0x34
 800a746:	4a06      	ldr	r2, [pc, #24]	@ (800a760 <setPhaseVoltage1+0x4a0>)
 800a748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a74a:	6393      	str	r3, [r2, #56]	@ 0x38
 800a74c:	4a04      	ldr	r2, [pc, #16]	@ (800a760 <setPhaseVoltage1+0x4a0>)
 800a74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a750:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800a752:	bf00      	nop
 800a754:	3748      	adds	r7, #72	@ 0x48
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	20000500 	.word	0x20000500
 800a760:	40012c00 	.word	0x40012c00

0800a764 <__cvt>:
 800a764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a768:	ec57 6b10 	vmov	r6, r7, d0
 800a76c:	2f00      	cmp	r7, #0
 800a76e:	460c      	mov	r4, r1
 800a770:	4619      	mov	r1, r3
 800a772:	463b      	mov	r3, r7
 800a774:	bfbb      	ittet	lt
 800a776:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a77a:	461f      	movlt	r7, r3
 800a77c:	2300      	movge	r3, #0
 800a77e:	232d      	movlt	r3, #45	@ 0x2d
 800a780:	700b      	strb	r3, [r1, #0]
 800a782:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a784:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a788:	4691      	mov	r9, r2
 800a78a:	f023 0820 	bic.w	r8, r3, #32
 800a78e:	bfbc      	itt	lt
 800a790:	4632      	movlt	r2, r6
 800a792:	4616      	movlt	r6, r2
 800a794:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a798:	d005      	beq.n	800a7a6 <__cvt+0x42>
 800a79a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a79e:	d100      	bne.n	800a7a2 <__cvt+0x3e>
 800a7a0:	3401      	adds	r4, #1
 800a7a2:	2102      	movs	r1, #2
 800a7a4:	e000      	b.n	800a7a8 <__cvt+0x44>
 800a7a6:	2103      	movs	r1, #3
 800a7a8:	ab03      	add	r3, sp, #12
 800a7aa:	9301      	str	r3, [sp, #4]
 800a7ac:	ab02      	add	r3, sp, #8
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	ec47 6b10 	vmov	d0, r6, r7
 800a7b4:	4653      	mov	r3, sl
 800a7b6:	4622      	mov	r2, r4
 800a7b8:	f001 f882 	bl	800b8c0 <_dtoa_r>
 800a7bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a7c0:	4605      	mov	r5, r0
 800a7c2:	d119      	bne.n	800a7f8 <__cvt+0x94>
 800a7c4:	f019 0f01 	tst.w	r9, #1
 800a7c8:	d00e      	beq.n	800a7e8 <__cvt+0x84>
 800a7ca:	eb00 0904 	add.w	r9, r0, r4
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	f7f6 f99f 	bl	8000b18 <__aeabi_dcmpeq>
 800a7da:	b108      	cbz	r0, 800a7e0 <__cvt+0x7c>
 800a7dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a7e0:	2230      	movs	r2, #48	@ 0x30
 800a7e2:	9b03      	ldr	r3, [sp, #12]
 800a7e4:	454b      	cmp	r3, r9
 800a7e6:	d31e      	bcc.n	800a826 <__cvt+0xc2>
 800a7e8:	9b03      	ldr	r3, [sp, #12]
 800a7ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7ec:	1b5b      	subs	r3, r3, r5
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	6013      	str	r3, [r2, #0]
 800a7f2:	b004      	add	sp, #16
 800a7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a7fc:	eb00 0904 	add.w	r9, r0, r4
 800a800:	d1e5      	bne.n	800a7ce <__cvt+0x6a>
 800a802:	7803      	ldrb	r3, [r0, #0]
 800a804:	2b30      	cmp	r3, #48	@ 0x30
 800a806:	d10a      	bne.n	800a81e <__cvt+0xba>
 800a808:	2200      	movs	r2, #0
 800a80a:	2300      	movs	r3, #0
 800a80c:	4630      	mov	r0, r6
 800a80e:	4639      	mov	r1, r7
 800a810:	f7f6 f982 	bl	8000b18 <__aeabi_dcmpeq>
 800a814:	b918      	cbnz	r0, 800a81e <__cvt+0xba>
 800a816:	f1c4 0401 	rsb	r4, r4, #1
 800a81a:	f8ca 4000 	str.w	r4, [sl]
 800a81e:	f8da 3000 	ldr.w	r3, [sl]
 800a822:	4499      	add	r9, r3
 800a824:	e7d3      	b.n	800a7ce <__cvt+0x6a>
 800a826:	1c59      	adds	r1, r3, #1
 800a828:	9103      	str	r1, [sp, #12]
 800a82a:	701a      	strb	r2, [r3, #0]
 800a82c:	e7d9      	b.n	800a7e2 <__cvt+0x7e>

0800a82e <__exponent>:
 800a82e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a830:	2900      	cmp	r1, #0
 800a832:	bfba      	itte	lt
 800a834:	4249      	neglt	r1, r1
 800a836:	232d      	movlt	r3, #45	@ 0x2d
 800a838:	232b      	movge	r3, #43	@ 0x2b
 800a83a:	2909      	cmp	r1, #9
 800a83c:	7002      	strb	r2, [r0, #0]
 800a83e:	7043      	strb	r3, [r0, #1]
 800a840:	dd29      	ble.n	800a896 <__exponent+0x68>
 800a842:	f10d 0307 	add.w	r3, sp, #7
 800a846:	461d      	mov	r5, r3
 800a848:	270a      	movs	r7, #10
 800a84a:	461a      	mov	r2, r3
 800a84c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a850:	fb07 1416 	mls	r4, r7, r6, r1
 800a854:	3430      	adds	r4, #48	@ 0x30
 800a856:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a85a:	460c      	mov	r4, r1
 800a85c:	2c63      	cmp	r4, #99	@ 0x63
 800a85e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a862:	4631      	mov	r1, r6
 800a864:	dcf1      	bgt.n	800a84a <__exponent+0x1c>
 800a866:	3130      	adds	r1, #48	@ 0x30
 800a868:	1e94      	subs	r4, r2, #2
 800a86a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a86e:	1c41      	adds	r1, r0, #1
 800a870:	4623      	mov	r3, r4
 800a872:	42ab      	cmp	r3, r5
 800a874:	d30a      	bcc.n	800a88c <__exponent+0x5e>
 800a876:	f10d 0309 	add.w	r3, sp, #9
 800a87a:	1a9b      	subs	r3, r3, r2
 800a87c:	42ac      	cmp	r4, r5
 800a87e:	bf88      	it	hi
 800a880:	2300      	movhi	r3, #0
 800a882:	3302      	adds	r3, #2
 800a884:	4403      	add	r3, r0
 800a886:	1a18      	subs	r0, r3, r0
 800a888:	b003      	add	sp, #12
 800a88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a88c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a890:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a894:	e7ed      	b.n	800a872 <__exponent+0x44>
 800a896:	2330      	movs	r3, #48	@ 0x30
 800a898:	3130      	adds	r1, #48	@ 0x30
 800a89a:	7083      	strb	r3, [r0, #2]
 800a89c:	70c1      	strb	r1, [r0, #3]
 800a89e:	1d03      	adds	r3, r0, #4
 800a8a0:	e7f1      	b.n	800a886 <__exponent+0x58>
	...

0800a8a4 <_printf_float>:
 800a8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a8:	b08d      	sub	sp, #52	@ 0x34
 800a8aa:	460c      	mov	r4, r1
 800a8ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a8b0:	4616      	mov	r6, r2
 800a8b2:	461f      	mov	r7, r3
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	f000 feef 	bl	800b698 <_localeconv_r>
 800a8ba:	6803      	ldr	r3, [r0, #0]
 800a8bc:	9304      	str	r3, [sp, #16]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7f5 fcfe 	bl	80002c0 <strlen>
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8c8:	f8d8 3000 	ldr.w	r3, [r8]
 800a8cc:	9005      	str	r0, [sp, #20]
 800a8ce:	3307      	adds	r3, #7
 800a8d0:	f023 0307 	bic.w	r3, r3, #7
 800a8d4:	f103 0208 	add.w	r2, r3, #8
 800a8d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a8dc:	f8d4 b000 	ldr.w	fp, [r4]
 800a8e0:	f8c8 2000 	str.w	r2, [r8]
 800a8e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a8ec:	9307      	str	r3, [sp, #28]
 800a8ee:	f8cd 8018 	str.w	r8, [sp, #24]
 800a8f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a8f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8fa:	4b9c      	ldr	r3, [pc, #624]	@ (800ab6c <_printf_float+0x2c8>)
 800a8fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a900:	f7f6 f93c 	bl	8000b7c <__aeabi_dcmpun>
 800a904:	bb70      	cbnz	r0, 800a964 <_printf_float+0xc0>
 800a906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a90a:	4b98      	ldr	r3, [pc, #608]	@ (800ab6c <_printf_float+0x2c8>)
 800a90c:	f04f 32ff 	mov.w	r2, #4294967295
 800a910:	f7f6 f916 	bl	8000b40 <__aeabi_dcmple>
 800a914:	bb30      	cbnz	r0, 800a964 <_printf_float+0xc0>
 800a916:	2200      	movs	r2, #0
 800a918:	2300      	movs	r3, #0
 800a91a:	4640      	mov	r0, r8
 800a91c:	4649      	mov	r1, r9
 800a91e:	f7f6 f905 	bl	8000b2c <__aeabi_dcmplt>
 800a922:	b110      	cbz	r0, 800a92a <_printf_float+0x86>
 800a924:	232d      	movs	r3, #45	@ 0x2d
 800a926:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a92a:	4a91      	ldr	r2, [pc, #580]	@ (800ab70 <_printf_float+0x2cc>)
 800a92c:	4b91      	ldr	r3, [pc, #580]	@ (800ab74 <_printf_float+0x2d0>)
 800a92e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a932:	bf94      	ite	ls
 800a934:	4690      	movls	r8, r2
 800a936:	4698      	movhi	r8, r3
 800a938:	2303      	movs	r3, #3
 800a93a:	6123      	str	r3, [r4, #16]
 800a93c:	f02b 0304 	bic.w	r3, fp, #4
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	f04f 0900 	mov.w	r9, #0
 800a946:	9700      	str	r7, [sp, #0]
 800a948:	4633      	mov	r3, r6
 800a94a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a94c:	4621      	mov	r1, r4
 800a94e:	4628      	mov	r0, r5
 800a950:	f000 f9d2 	bl	800acf8 <_printf_common>
 800a954:	3001      	adds	r0, #1
 800a956:	f040 808d 	bne.w	800aa74 <_printf_float+0x1d0>
 800a95a:	f04f 30ff 	mov.w	r0, #4294967295
 800a95e:	b00d      	add	sp, #52	@ 0x34
 800a960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a964:	4642      	mov	r2, r8
 800a966:	464b      	mov	r3, r9
 800a968:	4640      	mov	r0, r8
 800a96a:	4649      	mov	r1, r9
 800a96c:	f7f6 f906 	bl	8000b7c <__aeabi_dcmpun>
 800a970:	b140      	cbz	r0, 800a984 <_printf_float+0xe0>
 800a972:	464b      	mov	r3, r9
 800a974:	2b00      	cmp	r3, #0
 800a976:	bfbc      	itt	lt
 800a978:	232d      	movlt	r3, #45	@ 0x2d
 800a97a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a97e:	4a7e      	ldr	r2, [pc, #504]	@ (800ab78 <_printf_float+0x2d4>)
 800a980:	4b7e      	ldr	r3, [pc, #504]	@ (800ab7c <_printf_float+0x2d8>)
 800a982:	e7d4      	b.n	800a92e <_printf_float+0x8a>
 800a984:	6863      	ldr	r3, [r4, #4]
 800a986:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a98a:	9206      	str	r2, [sp, #24]
 800a98c:	1c5a      	adds	r2, r3, #1
 800a98e:	d13b      	bne.n	800aa08 <_printf_float+0x164>
 800a990:	2306      	movs	r3, #6
 800a992:	6063      	str	r3, [r4, #4]
 800a994:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a998:	2300      	movs	r3, #0
 800a99a:	6022      	str	r2, [r4, #0]
 800a99c:	9303      	str	r3, [sp, #12]
 800a99e:	ab0a      	add	r3, sp, #40	@ 0x28
 800a9a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a9a4:	ab09      	add	r3, sp, #36	@ 0x24
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	6861      	ldr	r1, [r4, #4]
 800a9aa:	ec49 8b10 	vmov	d0, r8, r9
 800a9ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f7ff fed6 	bl	800a764 <__cvt>
 800a9b8:	9b06      	ldr	r3, [sp, #24]
 800a9ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a9bc:	2b47      	cmp	r3, #71	@ 0x47
 800a9be:	4680      	mov	r8, r0
 800a9c0:	d129      	bne.n	800aa16 <_printf_float+0x172>
 800a9c2:	1cc8      	adds	r0, r1, #3
 800a9c4:	db02      	blt.n	800a9cc <_printf_float+0x128>
 800a9c6:	6863      	ldr	r3, [r4, #4]
 800a9c8:	4299      	cmp	r1, r3
 800a9ca:	dd41      	ble.n	800aa50 <_printf_float+0x1ac>
 800a9cc:	f1aa 0a02 	sub.w	sl, sl, #2
 800a9d0:	fa5f fa8a 	uxtb.w	sl, sl
 800a9d4:	3901      	subs	r1, #1
 800a9d6:	4652      	mov	r2, sl
 800a9d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a9dc:	9109      	str	r1, [sp, #36]	@ 0x24
 800a9de:	f7ff ff26 	bl	800a82e <__exponent>
 800a9e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9e4:	1813      	adds	r3, r2, r0
 800a9e6:	2a01      	cmp	r2, #1
 800a9e8:	4681      	mov	r9, r0
 800a9ea:	6123      	str	r3, [r4, #16]
 800a9ec:	dc02      	bgt.n	800a9f4 <_printf_float+0x150>
 800a9ee:	6822      	ldr	r2, [r4, #0]
 800a9f0:	07d2      	lsls	r2, r2, #31
 800a9f2:	d501      	bpl.n	800a9f8 <_printf_float+0x154>
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	6123      	str	r3, [r4, #16]
 800a9f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d0a2      	beq.n	800a946 <_printf_float+0xa2>
 800aa00:	232d      	movs	r3, #45	@ 0x2d
 800aa02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa06:	e79e      	b.n	800a946 <_printf_float+0xa2>
 800aa08:	9a06      	ldr	r2, [sp, #24]
 800aa0a:	2a47      	cmp	r2, #71	@ 0x47
 800aa0c:	d1c2      	bne.n	800a994 <_printf_float+0xf0>
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1c0      	bne.n	800a994 <_printf_float+0xf0>
 800aa12:	2301      	movs	r3, #1
 800aa14:	e7bd      	b.n	800a992 <_printf_float+0xee>
 800aa16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa1a:	d9db      	bls.n	800a9d4 <_printf_float+0x130>
 800aa1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aa20:	d118      	bne.n	800aa54 <_printf_float+0x1b0>
 800aa22:	2900      	cmp	r1, #0
 800aa24:	6863      	ldr	r3, [r4, #4]
 800aa26:	dd0b      	ble.n	800aa40 <_printf_float+0x19c>
 800aa28:	6121      	str	r1, [r4, #16]
 800aa2a:	b913      	cbnz	r3, 800aa32 <_printf_float+0x18e>
 800aa2c:	6822      	ldr	r2, [r4, #0]
 800aa2e:	07d0      	lsls	r0, r2, #31
 800aa30:	d502      	bpl.n	800aa38 <_printf_float+0x194>
 800aa32:	3301      	adds	r3, #1
 800aa34:	440b      	add	r3, r1
 800aa36:	6123      	str	r3, [r4, #16]
 800aa38:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aa3a:	f04f 0900 	mov.w	r9, #0
 800aa3e:	e7db      	b.n	800a9f8 <_printf_float+0x154>
 800aa40:	b913      	cbnz	r3, 800aa48 <_printf_float+0x1a4>
 800aa42:	6822      	ldr	r2, [r4, #0]
 800aa44:	07d2      	lsls	r2, r2, #31
 800aa46:	d501      	bpl.n	800aa4c <_printf_float+0x1a8>
 800aa48:	3302      	adds	r3, #2
 800aa4a:	e7f4      	b.n	800aa36 <_printf_float+0x192>
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e7f2      	b.n	800aa36 <_printf_float+0x192>
 800aa50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aa54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa56:	4299      	cmp	r1, r3
 800aa58:	db05      	blt.n	800aa66 <_printf_float+0x1c2>
 800aa5a:	6823      	ldr	r3, [r4, #0]
 800aa5c:	6121      	str	r1, [r4, #16]
 800aa5e:	07d8      	lsls	r0, r3, #31
 800aa60:	d5ea      	bpl.n	800aa38 <_printf_float+0x194>
 800aa62:	1c4b      	adds	r3, r1, #1
 800aa64:	e7e7      	b.n	800aa36 <_printf_float+0x192>
 800aa66:	2900      	cmp	r1, #0
 800aa68:	bfd4      	ite	le
 800aa6a:	f1c1 0202 	rsble	r2, r1, #2
 800aa6e:	2201      	movgt	r2, #1
 800aa70:	4413      	add	r3, r2
 800aa72:	e7e0      	b.n	800aa36 <_printf_float+0x192>
 800aa74:	6823      	ldr	r3, [r4, #0]
 800aa76:	055a      	lsls	r2, r3, #21
 800aa78:	d407      	bmi.n	800aa8a <_printf_float+0x1e6>
 800aa7a:	6923      	ldr	r3, [r4, #16]
 800aa7c:	4642      	mov	r2, r8
 800aa7e:	4631      	mov	r1, r6
 800aa80:	4628      	mov	r0, r5
 800aa82:	47b8      	blx	r7
 800aa84:	3001      	adds	r0, #1
 800aa86:	d12b      	bne.n	800aae0 <_printf_float+0x23c>
 800aa88:	e767      	b.n	800a95a <_printf_float+0xb6>
 800aa8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa8e:	f240 80dd 	bls.w	800ac4c <_printf_float+0x3a8>
 800aa92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa96:	2200      	movs	r2, #0
 800aa98:	2300      	movs	r3, #0
 800aa9a:	f7f6 f83d 	bl	8000b18 <__aeabi_dcmpeq>
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d033      	beq.n	800ab0a <_printf_float+0x266>
 800aaa2:	4a37      	ldr	r2, [pc, #220]	@ (800ab80 <_printf_float+0x2dc>)
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	4631      	mov	r1, r6
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	47b8      	blx	r7
 800aaac:	3001      	adds	r0, #1
 800aaae:	f43f af54 	beq.w	800a95a <_printf_float+0xb6>
 800aab2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aab6:	4543      	cmp	r3, r8
 800aab8:	db02      	blt.n	800aac0 <_printf_float+0x21c>
 800aaba:	6823      	ldr	r3, [r4, #0]
 800aabc:	07d8      	lsls	r0, r3, #31
 800aabe:	d50f      	bpl.n	800aae0 <_printf_float+0x23c>
 800aac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aac4:	4631      	mov	r1, r6
 800aac6:	4628      	mov	r0, r5
 800aac8:	47b8      	blx	r7
 800aaca:	3001      	adds	r0, #1
 800aacc:	f43f af45 	beq.w	800a95a <_printf_float+0xb6>
 800aad0:	f04f 0900 	mov.w	r9, #0
 800aad4:	f108 38ff 	add.w	r8, r8, #4294967295
 800aad8:	f104 0a1a 	add.w	sl, r4, #26
 800aadc:	45c8      	cmp	r8, r9
 800aade:	dc09      	bgt.n	800aaf4 <_printf_float+0x250>
 800aae0:	6823      	ldr	r3, [r4, #0]
 800aae2:	079b      	lsls	r3, r3, #30
 800aae4:	f100 8103 	bmi.w	800acee <_printf_float+0x44a>
 800aae8:	68e0      	ldr	r0, [r4, #12]
 800aaea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aaec:	4298      	cmp	r0, r3
 800aaee:	bfb8      	it	lt
 800aaf0:	4618      	movlt	r0, r3
 800aaf2:	e734      	b.n	800a95e <_printf_float+0xba>
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	4652      	mov	r2, sl
 800aaf8:	4631      	mov	r1, r6
 800aafa:	4628      	mov	r0, r5
 800aafc:	47b8      	blx	r7
 800aafe:	3001      	adds	r0, #1
 800ab00:	f43f af2b 	beq.w	800a95a <_printf_float+0xb6>
 800ab04:	f109 0901 	add.w	r9, r9, #1
 800ab08:	e7e8      	b.n	800aadc <_printf_float+0x238>
 800ab0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	dc39      	bgt.n	800ab84 <_printf_float+0x2e0>
 800ab10:	4a1b      	ldr	r2, [pc, #108]	@ (800ab80 <_printf_float+0x2dc>)
 800ab12:	2301      	movs	r3, #1
 800ab14:	4631      	mov	r1, r6
 800ab16:	4628      	mov	r0, r5
 800ab18:	47b8      	blx	r7
 800ab1a:	3001      	adds	r0, #1
 800ab1c:	f43f af1d 	beq.w	800a95a <_printf_float+0xb6>
 800ab20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ab24:	ea59 0303 	orrs.w	r3, r9, r3
 800ab28:	d102      	bne.n	800ab30 <_printf_float+0x28c>
 800ab2a:	6823      	ldr	r3, [r4, #0]
 800ab2c:	07d9      	lsls	r1, r3, #31
 800ab2e:	d5d7      	bpl.n	800aae0 <_printf_float+0x23c>
 800ab30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab34:	4631      	mov	r1, r6
 800ab36:	4628      	mov	r0, r5
 800ab38:	47b8      	blx	r7
 800ab3a:	3001      	adds	r0, #1
 800ab3c:	f43f af0d 	beq.w	800a95a <_printf_float+0xb6>
 800ab40:	f04f 0a00 	mov.w	sl, #0
 800ab44:	f104 0b1a 	add.w	fp, r4, #26
 800ab48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab4a:	425b      	negs	r3, r3
 800ab4c:	4553      	cmp	r3, sl
 800ab4e:	dc01      	bgt.n	800ab54 <_printf_float+0x2b0>
 800ab50:	464b      	mov	r3, r9
 800ab52:	e793      	b.n	800aa7c <_printf_float+0x1d8>
 800ab54:	2301      	movs	r3, #1
 800ab56:	465a      	mov	r2, fp
 800ab58:	4631      	mov	r1, r6
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	47b8      	blx	r7
 800ab5e:	3001      	adds	r0, #1
 800ab60:	f43f aefb 	beq.w	800a95a <_printf_float+0xb6>
 800ab64:	f10a 0a01 	add.w	sl, sl, #1
 800ab68:	e7ee      	b.n	800ab48 <_printf_float+0x2a4>
 800ab6a:	bf00      	nop
 800ab6c:	7fefffff 	.word	0x7fefffff
 800ab70:	0800ee97 	.word	0x0800ee97
 800ab74:	0800ee9b 	.word	0x0800ee9b
 800ab78:	0800ee9f 	.word	0x0800ee9f
 800ab7c:	0800eea3 	.word	0x0800eea3
 800ab80:	0800eea7 	.word	0x0800eea7
 800ab84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ab8a:	4553      	cmp	r3, sl
 800ab8c:	bfa8      	it	ge
 800ab8e:	4653      	movge	r3, sl
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	4699      	mov	r9, r3
 800ab94:	dc36      	bgt.n	800ac04 <_printf_float+0x360>
 800ab96:	f04f 0b00 	mov.w	fp, #0
 800ab9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab9e:	f104 021a 	add.w	r2, r4, #26
 800aba2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aba4:	9306      	str	r3, [sp, #24]
 800aba6:	eba3 0309 	sub.w	r3, r3, r9
 800abaa:	455b      	cmp	r3, fp
 800abac:	dc31      	bgt.n	800ac12 <_printf_float+0x36e>
 800abae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abb0:	459a      	cmp	sl, r3
 800abb2:	dc3a      	bgt.n	800ac2a <_printf_float+0x386>
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	07da      	lsls	r2, r3, #31
 800abb8:	d437      	bmi.n	800ac2a <_printf_float+0x386>
 800abba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abbc:	ebaa 0903 	sub.w	r9, sl, r3
 800abc0:	9b06      	ldr	r3, [sp, #24]
 800abc2:	ebaa 0303 	sub.w	r3, sl, r3
 800abc6:	4599      	cmp	r9, r3
 800abc8:	bfa8      	it	ge
 800abca:	4699      	movge	r9, r3
 800abcc:	f1b9 0f00 	cmp.w	r9, #0
 800abd0:	dc33      	bgt.n	800ac3a <_printf_float+0x396>
 800abd2:	f04f 0800 	mov.w	r8, #0
 800abd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800abda:	f104 0b1a 	add.w	fp, r4, #26
 800abde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abe0:	ebaa 0303 	sub.w	r3, sl, r3
 800abe4:	eba3 0309 	sub.w	r3, r3, r9
 800abe8:	4543      	cmp	r3, r8
 800abea:	f77f af79 	ble.w	800aae0 <_printf_float+0x23c>
 800abee:	2301      	movs	r3, #1
 800abf0:	465a      	mov	r2, fp
 800abf2:	4631      	mov	r1, r6
 800abf4:	4628      	mov	r0, r5
 800abf6:	47b8      	blx	r7
 800abf8:	3001      	adds	r0, #1
 800abfa:	f43f aeae 	beq.w	800a95a <_printf_float+0xb6>
 800abfe:	f108 0801 	add.w	r8, r8, #1
 800ac02:	e7ec      	b.n	800abde <_printf_float+0x33a>
 800ac04:	4642      	mov	r2, r8
 800ac06:	4631      	mov	r1, r6
 800ac08:	4628      	mov	r0, r5
 800ac0a:	47b8      	blx	r7
 800ac0c:	3001      	adds	r0, #1
 800ac0e:	d1c2      	bne.n	800ab96 <_printf_float+0x2f2>
 800ac10:	e6a3      	b.n	800a95a <_printf_float+0xb6>
 800ac12:	2301      	movs	r3, #1
 800ac14:	4631      	mov	r1, r6
 800ac16:	4628      	mov	r0, r5
 800ac18:	9206      	str	r2, [sp, #24]
 800ac1a:	47b8      	blx	r7
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	f43f ae9c 	beq.w	800a95a <_printf_float+0xb6>
 800ac22:	9a06      	ldr	r2, [sp, #24]
 800ac24:	f10b 0b01 	add.w	fp, fp, #1
 800ac28:	e7bb      	b.n	800aba2 <_printf_float+0x2fe>
 800ac2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac2e:	4631      	mov	r1, r6
 800ac30:	4628      	mov	r0, r5
 800ac32:	47b8      	blx	r7
 800ac34:	3001      	adds	r0, #1
 800ac36:	d1c0      	bne.n	800abba <_printf_float+0x316>
 800ac38:	e68f      	b.n	800a95a <_printf_float+0xb6>
 800ac3a:	9a06      	ldr	r2, [sp, #24]
 800ac3c:	464b      	mov	r3, r9
 800ac3e:	4442      	add	r2, r8
 800ac40:	4631      	mov	r1, r6
 800ac42:	4628      	mov	r0, r5
 800ac44:	47b8      	blx	r7
 800ac46:	3001      	adds	r0, #1
 800ac48:	d1c3      	bne.n	800abd2 <_printf_float+0x32e>
 800ac4a:	e686      	b.n	800a95a <_printf_float+0xb6>
 800ac4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ac50:	f1ba 0f01 	cmp.w	sl, #1
 800ac54:	dc01      	bgt.n	800ac5a <_printf_float+0x3b6>
 800ac56:	07db      	lsls	r3, r3, #31
 800ac58:	d536      	bpl.n	800acc8 <_printf_float+0x424>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	4642      	mov	r2, r8
 800ac5e:	4631      	mov	r1, r6
 800ac60:	4628      	mov	r0, r5
 800ac62:	47b8      	blx	r7
 800ac64:	3001      	adds	r0, #1
 800ac66:	f43f ae78 	beq.w	800a95a <_printf_float+0xb6>
 800ac6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac6e:	4631      	mov	r1, r6
 800ac70:	4628      	mov	r0, r5
 800ac72:	47b8      	blx	r7
 800ac74:	3001      	adds	r0, #1
 800ac76:	f43f ae70 	beq.w	800a95a <_printf_float+0xb6>
 800ac7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac7e:	2200      	movs	r2, #0
 800ac80:	2300      	movs	r3, #0
 800ac82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac86:	f7f5 ff47 	bl	8000b18 <__aeabi_dcmpeq>
 800ac8a:	b9c0      	cbnz	r0, 800acbe <_printf_float+0x41a>
 800ac8c:	4653      	mov	r3, sl
 800ac8e:	f108 0201 	add.w	r2, r8, #1
 800ac92:	4631      	mov	r1, r6
 800ac94:	4628      	mov	r0, r5
 800ac96:	47b8      	blx	r7
 800ac98:	3001      	adds	r0, #1
 800ac9a:	d10c      	bne.n	800acb6 <_printf_float+0x412>
 800ac9c:	e65d      	b.n	800a95a <_printf_float+0xb6>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	465a      	mov	r2, fp
 800aca2:	4631      	mov	r1, r6
 800aca4:	4628      	mov	r0, r5
 800aca6:	47b8      	blx	r7
 800aca8:	3001      	adds	r0, #1
 800acaa:	f43f ae56 	beq.w	800a95a <_printf_float+0xb6>
 800acae:	f108 0801 	add.w	r8, r8, #1
 800acb2:	45d0      	cmp	r8, sl
 800acb4:	dbf3      	blt.n	800ac9e <_printf_float+0x3fa>
 800acb6:	464b      	mov	r3, r9
 800acb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800acbc:	e6df      	b.n	800aa7e <_printf_float+0x1da>
 800acbe:	f04f 0800 	mov.w	r8, #0
 800acc2:	f104 0b1a 	add.w	fp, r4, #26
 800acc6:	e7f4      	b.n	800acb2 <_printf_float+0x40e>
 800acc8:	2301      	movs	r3, #1
 800acca:	4642      	mov	r2, r8
 800accc:	e7e1      	b.n	800ac92 <_printf_float+0x3ee>
 800acce:	2301      	movs	r3, #1
 800acd0:	464a      	mov	r2, r9
 800acd2:	4631      	mov	r1, r6
 800acd4:	4628      	mov	r0, r5
 800acd6:	47b8      	blx	r7
 800acd8:	3001      	adds	r0, #1
 800acda:	f43f ae3e 	beq.w	800a95a <_printf_float+0xb6>
 800acde:	f108 0801 	add.w	r8, r8, #1
 800ace2:	68e3      	ldr	r3, [r4, #12]
 800ace4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ace6:	1a5b      	subs	r3, r3, r1
 800ace8:	4543      	cmp	r3, r8
 800acea:	dcf0      	bgt.n	800acce <_printf_float+0x42a>
 800acec:	e6fc      	b.n	800aae8 <_printf_float+0x244>
 800acee:	f04f 0800 	mov.w	r8, #0
 800acf2:	f104 0919 	add.w	r9, r4, #25
 800acf6:	e7f4      	b.n	800ace2 <_printf_float+0x43e>

0800acf8 <_printf_common>:
 800acf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acfc:	4616      	mov	r6, r2
 800acfe:	4698      	mov	r8, r3
 800ad00:	688a      	ldr	r2, [r1, #8]
 800ad02:	690b      	ldr	r3, [r1, #16]
 800ad04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	bfb8      	it	lt
 800ad0c:	4613      	movlt	r3, r2
 800ad0e:	6033      	str	r3, [r6, #0]
 800ad10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad14:	4607      	mov	r7, r0
 800ad16:	460c      	mov	r4, r1
 800ad18:	b10a      	cbz	r2, 800ad1e <_printf_common+0x26>
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	6033      	str	r3, [r6, #0]
 800ad1e:	6823      	ldr	r3, [r4, #0]
 800ad20:	0699      	lsls	r1, r3, #26
 800ad22:	bf42      	ittt	mi
 800ad24:	6833      	ldrmi	r3, [r6, #0]
 800ad26:	3302      	addmi	r3, #2
 800ad28:	6033      	strmi	r3, [r6, #0]
 800ad2a:	6825      	ldr	r5, [r4, #0]
 800ad2c:	f015 0506 	ands.w	r5, r5, #6
 800ad30:	d106      	bne.n	800ad40 <_printf_common+0x48>
 800ad32:	f104 0a19 	add.w	sl, r4, #25
 800ad36:	68e3      	ldr	r3, [r4, #12]
 800ad38:	6832      	ldr	r2, [r6, #0]
 800ad3a:	1a9b      	subs	r3, r3, r2
 800ad3c:	42ab      	cmp	r3, r5
 800ad3e:	dc26      	bgt.n	800ad8e <_printf_common+0x96>
 800ad40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad44:	6822      	ldr	r2, [r4, #0]
 800ad46:	3b00      	subs	r3, #0
 800ad48:	bf18      	it	ne
 800ad4a:	2301      	movne	r3, #1
 800ad4c:	0692      	lsls	r2, r2, #26
 800ad4e:	d42b      	bmi.n	800ada8 <_printf_common+0xb0>
 800ad50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad54:	4641      	mov	r1, r8
 800ad56:	4638      	mov	r0, r7
 800ad58:	47c8      	blx	r9
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	d01e      	beq.n	800ad9c <_printf_common+0xa4>
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	6922      	ldr	r2, [r4, #16]
 800ad62:	f003 0306 	and.w	r3, r3, #6
 800ad66:	2b04      	cmp	r3, #4
 800ad68:	bf02      	ittt	eq
 800ad6a:	68e5      	ldreq	r5, [r4, #12]
 800ad6c:	6833      	ldreq	r3, [r6, #0]
 800ad6e:	1aed      	subeq	r5, r5, r3
 800ad70:	68a3      	ldr	r3, [r4, #8]
 800ad72:	bf0c      	ite	eq
 800ad74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad78:	2500      	movne	r5, #0
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	bfc4      	itt	gt
 800ad7e:	1a9b      	subgt	r3, r3, r2
 800ad80:	18ed      	addgt	r5, r5, r3
 800ad82:	2600      	movs	r6, #0
 800ad84:	341a      	adds	r4, #26
 800ad86:	42b5      	cmp	r5, r6
 800ad88:	d11a      	bne.n	800adc0 <_printf_common+0xc8>
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	e008      	b.n	800ada0 <_printf_common+0xa8>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	4652      	mov	r2, sl
 800ad92:	4641      	mov	r1, r8
 800ad94:	4638      	mov	r0, r7
 800ad96:	47c8      	blx	r9
 800ad98:	3001      	adds	r0, #1
 800ad9a:	d103      	bne.n	800ada4 <_printf_common+0xac>
 800ad9c:	f04f 30ff 	mov.w	r0, #4294967295
 800ada0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada4:	3501      	adds	r5, #1
 800ada6:	e7c6      	b.n	800ad36 <_printf_common+0x3e>
 800ada8:	18e1      	adds	r1, r4, r3
 800adaa:	1c5a      	adds	r2, r3, #1
 800adac:	2030      	movs	r0, #48	@ 0x30
 800adae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800adb2:	4422      	add	r2, r4
 800adb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800adb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800adbc:	3302      	adds	r3, #2
 800adbe:	e7c7      	b.n	800ad50 <_printf_common+0x58>
 800adc0:	2301      	movs	r3, #1
 800adc2:	4622      	mov	r2, r4
 800adc4:	4641      	mov	r1, r8
 800adc6:	4638      	mov	r0, r7
 800adc8:	47c8      	blx	r9
 800adca:	3001      	adds	r0, #1
 800adcc:	d0e6      	beq.n	800ad9c <_printf_common+0xa4>
 800adce:	3601      	adds	r6, #1
 800add0:	e7d9      	b.n	800ad86 <_printf_common+0x8e>
	...

0800add4 <_printf_i>:
 800add4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800add8:	7e0f      	ldrb	r7, [r1, #24]
 800adda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800addc:	2f78      	cmp	r7, #120	@ 0x78
 800adde:	4691      	mov	r9, r2
 800ade0:	4680      	mov	r8, r0
 800ade2:	460c      	mov	r4, r1
 800ade4:	469a      	mov	sl, r3
 800ade6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800adea:	d807      	bhi.n	800adfc <_printf_i+0x28>
 800adec:	2f62      	cmp	r7, #98	@ 0x62
 800adee:	d80a      	bhi.n	800ae06 <_printf_i+0x32>
 800adf0:	2f00      	cmp	r7, #0
 800adf2:	f000 80d2 	beq.w	800af9a <_printf_i+0x1c6>
 800adf6:	2f58      	cmp	r7, #88	@ 0x58
 800adf8:	f000 80b9 	beq.w	800af6e <_printf_i+0x19a>
 800adfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae04:	e03a      	b.n	800ae7c <_printf_i+0xa8>
 800ae06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae0a:	2b15      	cmp	r3, #21
 800ae0c:	d8f6      	bhi.n	800adfc <_printf_i+0x28>
 800ae0e:	a101      	add	r1, pc, #4	@ (adr r1, 800ae14 <_printf_i+0x40>)
 800ae10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae14:	0800ae6d 	.word	0x0800ae6d
 800ae18:	0800ae81 	.word	0x0800ae81
 800ae1c:	0800adfd 	.word	0x0800adfd
 800ae20:	0800adfd 	.word	0x0800adfd
 800ae24:	0800adfd 	.word	0x0800adfd
 800ae28:	0800adfd 	.word	0x0800adfd
 800ae2c:	0800ae81 	.word	0x0800ae81
 800ae30:	0800adfd 	.word	0x0800adfd
 800ae34:	0800adfd 	.word	0x0800adfd
 800ae38:	0800adfd 	.word	0x0800adfd
 800ae3c:	0800adfd 	.word	0x0800adfd
 800ae40:	0800af81 	.word	0x0800af81
 800ae44:	0800aeab 	.word	0x0800aeab
 800ae48:	0800af3b 	.word	0x0800af3b
 800ae4c:	0800adfd 	.word	0x0800adfd
 800ae50:	0800adfd 	.word	0x0800adfd
 800ae54:	0800afa3 	.word	0x0800afa3
 800ae58:	0800adfd 	.word	0x0800adfd
 800ae5c:	0800aeab 	.word	0x0800aeab
 800ae60:	0800adfd 	.word	0x0800adfd
 800ae64:	0800adfd 	.word	0x0800adfd
 800ae68:	0800af43 	.word	0x0800af43
 800ae6c:	6833      	ldr	r3, [r6, #0]
 800ae6e:	1d1a      	adds	r2, r3, #4
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6032      	str	r2, [r6, #0]
 800ae74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e09d      	b.n	800afbc <_printf_i+0x1e8>
 800ae80:	6833      	ldr	r3, [r6, #0]
 800ae82:	6820      	ldr	r0, [r4, #0]
 800ae84:	1d19      	adds	r1, r3, #4
 800ae86:	6031      	str	r1, [r6, #0]
 800ae88:	0606      	lsls	r6, r0, #24
 800ae8a:	d501      	bpl.n	800ae90 <_printf_i+0xbc>
 800ae8c:	681d      	ldr	r5, [r3, #0]
 800ae8e:	e003      	b.n	800ae98 <_printf_i+0xc4>
 800ae90:	0645      	lsls	r5, r0, #25
 800ae92:	d5fb      	bpl.n	800ae8c <_printf_i+0xb8>
 800ae94:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae98:	2d00      	cmp	r5, #0
 800ae9a:	da03      	bge.n	800aea4 <_printf_i+0xd0>
 800ae9c:	232d      	movs	r3, #45	@ 0x2d
 800ae9e:	426d      	negs	r5, r5
 800aea0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aea4:	4859      	ldr	r0, [pc, #356]	@ (800b00c <_printf_i+0x238>)
 800aea6:	230a      	movs	r3, #10
 800aea8:	e011      	b.n	800aece <_printf_i+0xfa>
 800aeaa:	6821      	ldr	r1, [r4, #0]
 800aeac:	6833      	ldr	r3, [r6, #0]
 800aeae:	0608      	lsls	r0, r1, #24
 800aeb0:	f853 5b04 	ldr.w	r5, [r3], #4
 800aeb4:	d402      	bmi.n	800aebc <_printf_i+0xe8>
 800aeb6:	0649      	lsls	r1, r1, #25
 800aeb8:	bf48      	it	mi
 800aeba:	b2ad      	uxthmi	r5, r5
 800aebc:	2f6f      	cmp	r7, #111	@ 0x6f
 800aebe:	4853      	ldr	r0, [pc, #332]	@ (800b00c <_printf_i+0x238>)
 800aec0:	6033      	str	r3, [r6, #0]
 800aec2:	bf14      	ite	ne
 800aec4:	230a      	movne	r3, #10
 800aec6:	2308      	moveq	r3, #8
 800aec8:	2100      	movs	r1, #0
 800aeca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aece:	6866      	ldr	r6, [r4, #4]
 800aed0:	60a6      	str	r6, [r4, #8]
 800aed2:	2e00      	cmp	r6, #0
 800aed4:	bfa2      	ittt	ge
 800aed6:	6821      	ldrge	r1, [r4, #0]
 800aed8:	f021 0104 	bicge.w	r1, r1, #4
 800aedc:	6021      	strge	r1, [r4, #0]
 800aede:	b90d      	cbnz	r5, 800aee4 <_printf_i+0x110>
 800aee0:	2e00      	cmp	r6, #0
 800aee2:	d04b      	beq.n	800af7c <_printf_i+0x1a8>
 800aee4:	4616      	mov	r6, r2
 800aee6:	fbb5 f1f3 	udiv	r1, r5, r3
 800aeea:	fb03 5711 	mls	r7, r3, r1, r5
 800aeee:	5dc7      	ldrb	r7, [r0, r7]
 800aef0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aef4:	462f      	mov	r7, r5
 800aef6:	42bb      	cmp	r3, r7
 800aef8:	460d      	mov	r5, r1
 800aefa:	d9f4      	bls.n	800aee6 <_printf_i+0x112>
 800aefc:	2b08      	cmp	r3, #8
 800aefe:	d10b      	bne.n	800af18 <_printf_i+0x144>
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	07df      	lsls	r7, r3, #31
 800af04:	d508      	bpl.n	800af18 <_printf_i+0x144>
 800af06:	6923      	ldr	r3, [r4, #16]
 800af08:	6861      	ldr	r1, [r4, #4]
 800af0a:	4299      	cmp	r1, r3
 800af0c:	bfde      	ittt	le
 800af0e:	2330      	movle	r3, #48	@ 0x30
 800af10:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af14:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af18:	1b92      	subs	r2, r2, r6
 800af1a:	6122      	str	r2, [r4, #16]
 800af1c:	f8cd a000 	str.w	sl, [sp]
 800af20:	464b      	mov	r3, r9
 800af22:	aa03      	add	r2, sp, #12
 800af24:	4621      	mov	r1, r4
 800af26:	4640      	mov	r0, r8
 800af28:	f7ff fee6 	bl	800acf8 <_printf_common>
 800af2c:	3001      	adds	r0, #1
 800af2e:	d14a      	bne.n	800afc6 <_printf_i+0x1f2>
 800af30:	f04f 30ff 	mov.w	r0, #4294967295
 800af34:	b004      	add	sp, #16
 800af36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	f043 0320 	orr.w	r3, r3, #32
 800af40:	6023      	str	r3, [r4, #0]
 800af42:	4833      	ldr	r0, [pc, #204]	@ (800b010 <_printf_i+0x23c>)
 800af44:	2778      	movs	r7, #120	@ 0x78
 800af46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af4a:	6823      	ldr	r3, [r4, #0]
 800af4c:	6831      	ldr	r1, [r6, #0]
 800af4e:	061f      	lsls	r7, r3, #24
 800af50:	f851 5b04 	ldr.w	r5, [r1], #4
 800af54:	d402      	bmi.n	800af5c <_printf_i+0x188>
 800af56:	065f      	lsls	r7, r3, #25
 800af58:	bf48      	it	mi
 800af5a:	b2ad      	uxthmi	r5, r5
 800af5c:	6031      	str	r1, [r6, #0]
 800af5e:	07d9      	lsls	r1, r3, #31
 800af60:	bf44      	itt	mi
 800af62:	f043 0320 	orrmi.w	r3, r3, #32
 800af66:	6023      	strmi	r3, [r4, #0]
 800af68:	b11d      	cbz	r5, 800af72 <_printf_i+0x19e>
 800af6a:	2310      	movs	r3, #16
 800af6c:	e7ac      	b.n	800aec8 <_printf_i+0xf4>
 800af6e:	4827      	ldr	r0, [pc, #156]	@ (800b00c <_printf_i+0x238>)
 800af70:	e7e9      	b.n	800af46 <_printf_i+0x172>
 800af72:	6823      	ldr	r3, [r4, #0]
 800af74:	f023 0320 	bic.w	r3, r3, #32
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	e7f6      	b.n	800af6a <_printf_i+0x196>
 800af7c:	4616      	mov	r6, r2
 800af7e:	e7bd      	b.n	800aefc <_printf_i+0x128>
 800af80:	6833      	ldr	r3, [r6, #0]
 800af82:	6825      	ldr	r5, [r4, #0]
 800af84:	6961      	ldr	r1, [r4, #20]
 800af86:	1d18      	adds	r0, r3, #4
 800af88:	6030      	str	r0, [r6, #0]
 800af8a:	062e      	lsls	r6, r5, #24
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	d501      	bpl.n	800af94 <_printf_i+0x1c0>
 800af90:	6019      	str	r1, [r3, #0]
 800af92:	e002      	b.n	800af9a <_printf_i+0x1c6>
 800af94:	0668      	lsls	r0, r5, #25
 800af96:	d5fb      	bpl.n	800af90 <_printf_i+0x1bc>
 800af98:	8019      	strh	r1, [r3, #0]
 800af9a:	2300      	movs	r3, #0
 800af9c:	6123      	str	r3, [r4, #16]
 800af9e:	4616      	mov	r6, r2
 800afa0:	e7bc      	b.n	800af1c <_printf_i+0x148>
 800afa2:	6833      	ldr	r3, [r6, #0]
 800afa4:	1d1a      	adds	r2, r3, #4
 800afa6:	6032      	str	r2, [r6, #0]
 800afa8:	681e      	ldr	r6, [r3, #0]
 800afaa:	6862      	ldr	r2, [r4, #4]
 800afac:	2100      	movs	r1, #0
 800afae:	4630      	mov	r0, r6
 800afb0:	f7f5 f936 	bl	8000220 <memchr>
 800afb4:	b108      	cbz	r0, 800afba <_printf_i+0x1e6>
 800afb6:	1b80      	subs	r0, r0, r6
 800afb8:	6060      	str	r0, [r4, #4]
 800afba:	6863      	ldr	r3, [r4, #4]
 800afbc:	6123      	str	r3, [r4, #16]
 800afbe:	2300      	movs	r3, #0
 800afc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afc4:	e7aa      	b.n	800af1c <_printf_i+0x148>
 800afc6:	6923      	ldr	r3, [r4, #16]
 800afc8:	4632      	mov	r2, r6
 800afca:	4649      	mov	r1, r9
 800afcc:	4640      	mov	r0, r8
 800afce:	47d0      	blx	sl
 800afd0:	3001      	adds	r0, #1
 800afd2:	d0ad      	beq.n	800af30 <_printf_i+0x15c>
 800afd4:	6823      	ldr	r3, [r4, #0]
 800afd6:	079b      	lsls	r3, r3, #30
 800afd8:	d413      	bmi.n	800b002 <_printf_i+0x22e>
 800afda:	68e0      	ldr	r0, [r4, #12]
 800afdc:	9b03      	ldr	r3, [sp, #12]
 800afde:	4298      	cmp	r0, r3
 800afe0:	bfb8      	it	lt
 800afe2:	4618      	movlt	r0, r3
 800afe4:	e7a6      	b.n	800af34 <_printf_i+0x160>
 800afe6:	2301      	movs	r3, #1
 800afe8:	4632      	mov	r2, r6
 800afea:	4649      	mov	r1, r9
 800afec:	4640      	mov	r0, r8
 800afee:	47d0      	blx	sl
 800aff0:	3001      	adds	r0, #1
 800aff2:	d09d      	beq.n	800af30 <_printf_i+0x15c>
 800aff4:	3501      	adds	r5, #1
 800aff6:	68e3      	ldr	r3, [r4, #12]
 800aff8:	9903      	ldr	r1, [sp, #12]
 800affa:	1a5b      	subs	r3, r3, r1
 800affc:	42ab      	cmp	r3, r5
 800affe:	dcf2      	bgt.n	800afe6 <_printf_i+0x212>
 800b000:	e7eb      	b.n	800afda <_printf_i+0x206>
 800b002:	2500      	movs	r5, #0
 800b004:	f104 0619 	add.w	r6, r4, #25
 800b008:	e7f5      	b.n	800aff6 <_printf_i+0x222>
 800b00a:	bf00      	nop
 800b00c:	0800eea9 	.word	0x0800eea9
 800b010:	0800eeba 	.word	0x0800eeba

0800b014 <_scanf_float>:
 800b014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b018:	b087      	sub	sp, #28
 800b01a:	4617      	mov	r7, r2
 800b01c:	9303      	str	r3, [sp, #12]
 800b01e:	688b      	ldr	r3, [r1, #8]
 800b020:	1e5a      	subs	r2, r3, #1
 800b022:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b026:	bf81      	itttt	hi
 800b028:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b02c:	eb03 0b05 	addhi.w	fp, r3, r5
 800b030:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b034:	608b      	strhi	r3, [r1, #8]
 800b036:	680b      	ldr	r3, [r1, #0]
 800b038:	460a      	mov	r2, r1
 800b03a:	f04f 0500 	mov.w	r5, #0
 800b03e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b042:	f842 3b1c 	str.w	r3, [r2], #28
 800b046:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b04a:	4680      	mov	r8, r0
 800b04c:	460c      	mov	r4, r1
 800b04e:	bf98      	it	ls
 800b050:	f04f 0b00 	movls.w	fp, #0
 800b054:	9201      	str	r2, [sp, #4]
 800b056:	4616      	mov	r6, r2
 800b058:	46aa      	mov	sl, r5
 800b05a:	46a9      	mov	r9, r5
 800b05c:	9502      	str	r5, [sp, #8]
 800b05e:	68a2      	ldr	r2, [r4, #8]
 800b060:	b152      	cbz	r2, 800b078 <_scanf_float+0x64>
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	2b4e      	cmp	r3, #78	@ 0x4e
 800b068:	d864      	bhi.n	800b134 <_scanf_float+0x120>
 800b06a:	2b40      	cmp	r3, #64	@ 0x40
 800b06c:	d83c      	bhi.n	800b0e8 <_scanf_float+0xd4>
 800b06e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b072:	b2c8      	uxtb	r0, r1
 800b074:	280e      	cmp	r0, #14
 800b076:	d93a      	bls.n	800b0ee <_scanf_float+0xda>
 800b078:	f1b9 0f00 	cmp.w	r9, #0
 800b07c:	d003      	beq.n	800b086 <_scanf_float+0x72>
 800b07e:	6823      	ldr	r3, [r4, #0]
 800b080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b084:	6023      	str	r3, [r4, #0]
 800b086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b08a:	f1ba 0f01 	cmp.w	sl, #1
 800b08e:	f200 8117 	bhi.w	800b2c0 <_scanf_float+0x2ac>
 800b092:	9b01      	ldr	r3, [sp, #4]
 800b094:	429e      	cmp	r6, r3
 800b096:	f200 8108 	bhi.w	800b2aa <_scanf_float+0x296>
 800b09a:	2001      	movs	r0, #1
 800b09c:	b007      	add	sp, #28
 800b09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b0a6:	2a0d      	cmp	r2, #13
 800b0a8:	d8e6      	bhi.n	800b078 <_scanf_float+0x64>
 800b0aa:	a101      	add	r1, pc, #4	@ (adr r1, 800b0b0 <_scanf_float+0x9c>)
 800b0ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b0b0:	0800b1f7 	.word	0x0800b1f7
 800b0b4:	0800b079 	.word	0x0800b079
 800b0b8:	0800b079 	.word	0x0800b079
 800b0bc:	0800b079 	.word	0x0800b079
 800b0c0:	0800b257 	.word	0x0800b257
 800b0c4:	0800b22f 	.word	0x0800b22f
 800b0c8:	0800b079 	.word	0x0800b079
 800b0cc:	0800b079 	.word	0x0800b079
 800b0d0:	0800b205 	.word	0x0800b205
 800b0d4:	0800b079 	.word	0x0800b079
 800b0d8:	0800b079 	.word	0x0800b079
 800b0dc:	0800b079 	.word	0x0800b079
 800b0e0:	0800b079 	.word	0x0800b079
 800b0e4:	0800b1bd 	.word	0x0800b1bd
 800b0e8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b0ec:	e7db      	b.n	800b0a6 <_scanf_float+0x92>
 800b0ee:	290e      	cmp	r1, #14
 800b0f0:	d8c2      	bhi.n	800b078 <_scanf_float+0x64>
 800b0f2:	a001      	add	r0, pc, #4	@ (adr r0, 800b0f8 <_scanf_float+0xe4>)
 800b0f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b0f8:	0800b1ad 	.word	0x0800b1ad
 800b0fc:	0800b079 	.word	0x0800b079
 800b100:	0800b1ad 	.word	0x0800b1ad
 800b104:	0800b243 	.word	0x0800b243
 800b108:	0800b079 	.word	0x0800b079
 800b10c:	0800b155 	.word	0x0800b155
 800b110:	0800b193 	.word	0x0800b193
 800b114:	0800b193 	.word	0x0800b193
 800b118:	0800b193 	.word	0x0800b193
 800b11c:	0800b193 	.word	0x0800b193
 800b120:	0800b193 	.word	0x0800b193
 800b124:	0800b193 	.word	0x0800b193
 800b128:	0800b193 	.word	0x0800b193
 800b12c:	0800b193 	.word	0x0800b193
 800b130:	0800b193 	.word	0x0800b193
 800b134:	2b6e      	cmp	r3, #110	@ 0x6e
 800b136:	d809      	bhi.n	800b14c <_scanf_float+0x138>
 800b138:	2b60      	cmp	r3, #96	@ 0x60
 800b13a:	d8b2      	bhi.n	800b0a2 <_scanf_float+0x8e>
 800b13c:	2b54      	cmp	r3, #84	@ 0x54
 800b13e:	d07b      	beq.n	800b238 <_scanf_float+0x224>
 800b140:	2b59      	cmp	r3, #89	@ 0x59
 800b142:	d199      	bne.n	800b078 <_scanf_float+0x64>
 800b144:	2d07      	cmp	r5, #7
 800b146:	d197      	bne.n	800b078 <_scanf_float+0x64>
 800b148:	2508      	movs	r5, #8
 800b14a:	e02c      	b.n	800b1a6 <_scanf_float+0x192>
 800b14c:	2b74      	cmp	r3, #116	@ 0x74
 800b14e:	d073      	beq.n	800b238 <_scanf_float+0x224>
 800b150:	2b79      	cmp	r3, #121	@ 0x79
 800b152:	e7f6      	b.n	800b142 <_scanf_float+0x12e>
 800b154:	6821      	ldr	r1, [r4, #0]
 800b156:	05c8      	lsls	r0, r1, #23
 800b158:	d51b      	bpl.n	800b192 <_scanf_float+0x17e>
 800b15a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b15e:	6021      	str	r1, [r4, #0]
 800b160:	f109 0901 	add.w	r9, r9, #1
 800b164:	f1bb 0f00 	cmp.w	fp, #0
 800b168:	d003      	beq.n	800b172 <_scanf_float+0x15e>
 800b16a:	3201      	adds	r2, #1
 800b16c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b170:	60a2      	str	r2, [r4, #8]
 800b172:	68a3      	ldr	r3, [r4, #8]
 800b174:	3b01      	subs	r3, #1
 800b176:	60a3      	str	r3, [r4, #8]
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	3301      	adds	r3, #1
 800b17c:	6123      	str	r3, [r4, #16]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	3b01      	subs	r3, #1
 800b182:	2b00      	cmp	r3, #0
 800b184:	607b      	str	r3, [r7, #4]
 800b186:	f340 8087 	ble.w	800b298 <_scanf_float+0x284>
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	3301      	adds	r3, #1
 800b18e:	603b      	str	r3, [r7, #0]
 800b190:	e765      	b.n	800b05e <_scanf_float+0x4a>
 800b192:	eb1a 0105 	adds.w	r1, sl, r5
 800b196:	f47f af6f 	bne.w	800b078 <_scanf_float+0x64>
 800b19a:	6822      	ldr	r2, [r4, #0]
 800b19c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b1a0:	6022      	str	r2, [r4, #0]
 800b1a2:	460d      	mov	r5, r1
 800b1a4:	468a      	mov	sl, r1
 800b1a6:	f806 3b01 	strb.w	r3, [r6], #1
 800b1aa:	e7e2      	b.n	800b172 <_scanf_float+0x15e>
 800b1ac:	6822      	ldr	r2, [r4, #0]
 800b1ae:	0610      	lsls	r0, r2, #24
 800b1b0:	f57f af62 	bpl.w	800b078 <_scanf_float+0x64>
 800b1b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b1b8:	6022      	str	r2, [r4, #0]
 800b1ba:	e7f4      	b.n	800b1a6 <_scanf_float+0x192>
 800b1bc:	f1ba 0f00 	cmp.w	sl, #0
 800b1c0:	d10e      	bne.n	800b1e0 <_scanf_float+0x1cc>
 800b1c2:	f1b9 0f00 	cmp.w	r9, #0
 800b1c6:	d10e      	bne.n	800b1e6 <_scanf_float+0x1d2>
 800b1c8:	6822      	ldr	r2, [r4, #0]
 800b1ca:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b1ce:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b1d2:	d108      	bne.n	800b1e6 <_scanf_float+0x1d2>
 800b1d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b1d8:	6022      	str	r2, [r4, #0]
 800b1da:	f04f 0a01 	mov.w	sl, #1
 800b1de:	e7e2      	b.n	800b1a6 <_scanf_float+0x192>
 800b1e0:	f1ba 0f02 	cmp.w	sl, #2
 800b1e4:	d055      	beq.n	800b292 <_scanf_float+0x27e>
 800b1e6:	2d01      	cmp	r5, #1
 800b1e8:	d002      	beq.n	800b1f0 <_scanf_float+0x1dc>
 800b1ea:	2d04      	cmp	r5, #4
 800b1ec:	f47f af44 	bne.w	800b078 <_scanf_float+0x64>
 800b1f0:	3501      	adds	r5, #1
 800b1f2:	b2ed      	uxtb	r5, r5
 800b1f4:	e7d7      	b.n	800b1a6 <_scanf_float+0x192>
 800b1f6:	f1ba 0f01 	cmp.w	sl, #1
 800b1fa:	f47f af3d 	bne.w	800b078 <_scanf_float+0x64>
 800b1fe:	f04f 0a02 	mov.w	sl, #2
 800b202:	e7d0      	b.n	800b1a6 <_scanf_float+0x192>
 800b204:	b97d      	cbnz	r5, 800b226 <_scanf_float+0x212>
 800b206:	f1b9 0f00 	cmp.w	r9, #0
 800b20a:	f47f af38 	bne.w	800b07e <_scanf_float+0x6a>
 800b20e:	6822      	ldr	r2, [r4, #0]
 800b210:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b214:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b218:	f040 8108 	bne.w	800b42c <_scanf_float+0x418>
 800b21c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b220:	6022      	str	r2, [r4, #0]
 800b222:	2501      	movs	r5, #1
 800b224:	e7bf      	b.n	800b1a6 <_scanf_float+0x192>
 800b226:	2d03      	cmp	r5, #3
 800b228:	d0e2      	beq.n	800b1f0 <_scanf_float+0x1dc>
 800b22a:	2d05      	cmp	r5, #5
 800b22c:	e7de      	b.n	800b1ec <_scanf_float+0x1d8>
 800b22e:	2d02      	cmp	r5, #2
 800b230:	f47f af22 	bne.w	800b078 <_scanf_float+0x64>
 800b234:	2503      	movs	r5, #3
 800b236:	e7b6      	b.n	800b1a6 <_scanf_float+0x192>
 800b238:	2d06      	cmp	r5, #6
 800b23a:	f47f af1d 	bne.w	800b078 <_scanf_float+0x64>
 800b23e:	2507      	movs	r5, #7
 800b240:	e7b1      	b.n	800b1a6 <_scanf_float+0x192>
 800b242:	6822      	ldr	r2, [r4, #0]
 800b244:	0591      	lsls	r1, r2, #22
 800b246:	f57f af17 	bpl.w	800b078 <_scanf_float+0x64>
 800b24a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b24e:	6022      	str	r2, [r4, #0]
 800b250:	f8cd 9008 	str.w	r9, [sp, #8]
 800b254:	e7a7      	b.n	800b1a6 <_scanf_float+0x192>
 800b256:	6822      	ldr	r2, [r4, #0]
 800b258:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b25c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b260:	d006      	beq.n	800b270 <_scanf_float+0x25c>
 800b262:	0550      	lsls	r0, r2, #21
 800b264:	f57f af08 	bpl.w	800b078 <_scanf_float+0x64>
 800b268:	f1b9 0f00 	cmp.w	r9, #0
 800b26c:	f000 80de 	beq.w	800b42c <_scanf_float+0x418>
 800b270:	0591      	lsls	r1, r2, #22
 800b272:	bf58      	it	pl
 800b274:	9902      	ldrpl	r1, [sp, #8]
 800b276:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b27a:	bf58      	it	pl
 800b27c:	eba9 0101 	subpl.w	r1, r9, r1
 800b280:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b284:	bf58      	it	pl
 800b286:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b28a:	6022      	str	r2, [r4, #0]
 800b28c:	f04f 0900 	mov.w	r9, #0
 800b290:	e789      	b.n	800b1a6 <_scanf_float+0x192>
 800b292:	f04f 0a03 	mov.w	sl, #3
 800b296:	e786      	b.n	800b1a6 <_scanf_float+0x192>
 800b298:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b29c:	4639      	mov	r1, r7
 800b29e:	4640      	mov	r0, r8
 800b2a0:	4798      	blx	r3
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	f43f aedb 	beq.w	800b05e <_scanf_float+0x4a>
 800b2a8:	e6e6      	b.n	800b078 <_scanf_float+0x64>
 800b2aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b2b2:	463a      	mov	r2, r7
 800b2b4:	4640      	mov	r0, r8
 800b2b6:	4798      	blx	r3
 800b2b8:	6923      	ldr	r3, [r4, #16]
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	6123      	str	r3, [r4, #16]
 800b2be:	e6e8      	b.n	800b092 <_scanf_float+0x7e>
 800b2c0:	1e6b      	subs	r3, r5, #1
 800b2c2:	2b06      	cmp	r3, #6
 800b2c4:	d824      	bhi.n	800b310 <_scanf_float+0x2fc>
 800b2c6:	2d02      	cmp	r5, #2
 800b2c8:	d836      	bhi.n	800b338 <_scanf_float+0x324>
 800b2ca:	9b01      	ldr	r3, [sp, #4]
 800b2cc:	429e      	cmp	r6, r3
 800b2ce:	f67f aee4 	bls.w	800b09a <_scanf_float+0x86>
 800b2d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b2da:	463a      	mov	r2, r7
 800b2dc:	4640      	mov	r0, r8
 800b2de:	4798      	blx	r3
 800b2e0:	6923      	ldr	r3, [r4, #16]
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	6123      	str	r3, [r4, #16]
 800b2e6:	e7f0      	b.n	800b2ca <_scanf_float+0x2b6>
 800b2e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2ec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b2f0:	463a      	mov	r2, r7
 800b2f2:	4640      	mov	r0, r8
 800b2f4:	4798      	blx	r3
 800b2f6:	6923      	ldr	r3, [r4, #16]
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	6123      	str	r3, [r4, #16]
 800b2fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b300:	fa5f fa8a 	uxtb.w	sl, sl
 800b304:	f1ba 0f02 	cmp.w	sl, #2
 800b308:	d1ee      	bne.n	800b2e8 <_scanf_float+0x2d4>
 800b30a:	3d03      	subs	r5, #3
 800b30c:	b2ed      	uxtb	r5, r5
 800b30e:	1b76      	subs	r6, r6, r5
 800b310:	6823      	ldr	r3, [r4, #0]
 800b312:	05da      	lsls	r2, r3, #23
 800b314:	d530      	bpl.n	800b378 <_scanf_float+0x364>
 800b316:	055b      	lsls	r3, r3, #21
 800b318:	d511      	bpl.n	800b33e <_scanf_float+0x32a>
 800b31a:	9b01      	ldr	r3, [sp, #4]
 800b31c:	429e      	cmp	r6, r3
 800b31e:	f67f aebc 	bls.w	800b09a <_scanf_float+0x86>
 800b322:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b326:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b32a:	463a      	mov	r2, r7
 800b32c:	4640      	mov	r0, r8
 800b32e:	4798      	blx	r3
 800b330:	6923      	ldr	r3, [r4, #16]
 800b332:	3b01      	subs	r3, #1
 800b334:	6123      	str	r3, [r4, #16]
 800b336:	e7f0      	b.n	800b31a <_scanf_float+0x306>
 800b338:	46aa      	mov	sl, r5
 800b33a:	46b3      	mov	fp, r6
 800b33c:	e7de      	b.n	800b2fc <_scanf_float+0x2e8>
 800b33e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b342:	6923      	ldr	r3, [r4, #16]
 800b344:	2965      	cmp	r1, #101	@ 0x65
 800b346:	f103 33ff 	add.w	r3, r3, #4294967295
 800b34a:	f106 35ff 	add.w	r5, r6, #4294967295
 800b34e:	6123      	str	r3, [r4, #16]
 800b350:	d00c      	beq.n	800b36c <_scanf_float+0x358>
 800b352:	2945      	cmp	r1, #69	@ 0x45
 800b354:	d00a      	beq.n	800b36c <_scanf_float+0x358>
 800b356:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b35a:	463a      	mov	r2, r7
 800b35c:	4640      	mov	r0, r8
 800b35e:	4798      	blx	r3
 800b360:	6923      	ldr	r3, [r4, #16]
 800b362:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b366:	3b01      	subs	r3, #1
 800b368:	1eb5      	subs	r5, r6, #2
 800b36a:	6123      	str	r3, [r4, #16]
 800b36c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b370:	463a      	mov	r2, r7
 800b372:	4640      	mov	r0, r8
 800b374:	4798      	blx	r3
 800b376:	462e      	mov	r6, r5
 800b378:	6822      	ldr	r2, [r4, #0]
 800b37a:	f012 0210 	ands.w	r2, r2, #16
 800b37e:	d001      	beq.n	800b384 <_scanf_float+0x370>
 800b380:	2000      	movs	r0, #0
 800b382:	e68b      	b.n	800b09c <_scanf_float+0x88>
 800b384:	7032      	strb	r2, [r6, #0]
 800b386:	6823      	ldr	r3, [r4, #0]
 800b388:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b38c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b390:	d11c      	bne.n	800b3cc <_scanf_float+0x3b8>
 800b392:	9b02      	ldr	r3, [sp, #8]
 800b394:	454b      	cmp	r3, r9
 800b396:	eba3 0209 	sub.w	r2, r3, r9
 800b39a:	d123      	bne.n	800b3e4 <_scanf_float+0x3d0>
 800b39c:	9901      	ldr	r1, [sp, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	4640      	mov	r0, r8
 800b3a2:	f002 fc05 	bl	800dbb0 <_strtod_r>
 800b3a6:	9b03      	ldr	r3, [sp, #12]
 800b3a8:	6821      	ldr	r1, [r4, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f011 0f02 	tst.w	r1, #2
 800b3b0:	ec57 6b10 	vmov	r6, r7, d0
 800b3b4:	f103 0204 	add.w	r2, r3, #4
 800b3b8:	d01f      	beq.n	800b3fa <_scanf_float+0x3e6>
 800b3ba:	9903      	ldr	r1, [sp, #12]
 800b3bc:	600a      	str	r2, [r1, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	e9c3 6700 	strd	r6, r7, [r3]
 800b3c4:	68e3      	ldr	r3, [r4, #12]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	60e3      	str	r3, [r4, #12]
 800b3ca:	e7d9      	b.n	800b380 <_scanf_float+0x36c>
 800b3cc:	9b04      	ldr	r3, [sp, #16]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d0e4      	beq.n	800b39c <_scanf_float+0x388>
 800b3d2:	9905      	ldr	r1, [sp, #20]
 800b3d4:	230a      	movs	r3, #10
 800b3d6:	3101      	adds	r1, #1
 800b3d8:	4640      	mov	r0, r8
 800b3da:	f002 fc69 	bl	800dcb0 <_strtol_r>
 800b3de:	9b04      	ldr	r3, [sp, #16]
 800b3e0:	9e05      	ldr	r6, [sp, #20]
 800b3e2:	1ac2      	subs	r2, r0, r3
 800b3e4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b3e8:	429e      	cmp	r6, r3
 800b3ea:	bf28      	it	cs
 800b3ec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b3f0:	4910      	ldr	r1, [pc, #64]	@ (800b434 <_scanf_float+0x420>)
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f000 f8e4 	bl	800b5c0 <siprintf>
 800b3f8:	e7d0      	b.n	800b39c <_scanf_float+0x388>
 800b3fa:	f011 0f04 	tst.w	r1, #4
 800b3fe:	9903      	ldr	r1, [sp, #12]
 800b400:	600a      	str	r2, [r1, #0]
 800b402:	d1dc      	bne.n	800b3be <_scanf_float+0x3aa>
 800b404:	681d      	ldr	r5, [r3, #0]
 800b406:	4632      	mov	r2, r6
 800b408:	463b      	mov	r3, r7
 800b40a:	4630      	mov	r0, r6
 800b40c:	4639      	mov	r1, r7
 800b40e:	f7f5 fbb5 	bl	8000b7c <__aeabi_dcmpun>
 800b412:	b128      	cbz	r0, 800b420 <_scanf_float+0x40c>
 800b414:	4808      	ldr	r0, [pc, #32]	@ (800b438 <_scanf_float+0x424>)
 800b416:	f000 f9c5 	bl	800b7a4 <nanf>
 800b41a:	ed85 0a00 	vstr	s0, [r5]
 800b41e:	e7d1      	b.n	800b3c4 <_scanf_float+0x3b0>
 800b420:	4630      	mov	r0, r6
 800b422:	4639      	mov	r1, r7
 800b424:	f7f5 fc08 	bl	8000c38 <__aeabi_d2f>
 800b428:	6028      	str	r0, [r5, #0]
 800b42a:	e7cb      	b.n	800b3c4 <_scanf_float+0x3b0>
 800b42c:	f04f 0900 	mov.w	r9, #0
 800b430:	e629      	b.n	800b086 <_scanf_float+0x72>
 800b432:	bf00      	nop
 800b434:	0800eecb 	.word	0x0800eecb
 800b438:	0800f265 	.word	0x0800f265

0800b43c <std>:
 800b43c:	2300      	movs	r3, #0
 800b43e:	b510      	push	{r4, lr}
 800b440:	4604      	mov	r4, r0
 800b442:	e9c0 3300 	strd	r3, r3, [r0]
 800b446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b44a:	6083      	str	r3, [r0, #8]
 800b44c:	8181      	strh	r1, [r0, #12]
 800b44e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b450:	81c2      	strh	r2, [r0, #14]
 800b452:	6183      	str	r3, [r0, #24]
 800b454:	4619      	mov	r1, r3
 800b456:	2208      	movs	r2, #8
 800b458:	305c      	adds	r0, #92	@ 0x5c
 800b45a:	f000 f914 	bl	800b686 <memset>
 800b45e:	4b0d      	ldr	r3, [pc, #52]	@ (800b494 <std+0x58>)
 800b460:	6263      	str	r3, [r4, #36]	@ 0x24
 800b462:	4b0d      	ldr	r3, [pc, #52]	@ (800b498 <std+0x5c>)
 800b464:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b466:	4b0d      	ldr	r3, [pc, #52]	@ (800b49c <std+0x60>)
 800b468:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b46a:	4b0d      	ldr	r3, [pc, #52]	@ (800b4a0 <std+0x64>)
 800b46c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b46e:	4b0d      	ldr	r3, [pc, #52]	@ (800b4a4 <std+0x68>)
 800b470:	6224      	str	r4, [r4, #32]
 800b472:	429c      	cmp	r4, r3
 800b474:	d006      	beq.n	800b484 <std+0x48>
 800b476:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b47a:	4294      	cmp	r4, r2
 800b47c:	d002      	beq.n	800b484 <std+0x48>
 800b47e:	33d0      	adds	r3, #208	@ 0xd0
 800b480:	429c      	cmp	r4, r3
 800b482:	d105      	bne.n	800b490 <std+0x54>
 800b484:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b48c:	f000 b978 	b.w	800b780 <__retarget_lock_init_recursive>
 800b490:	bd10      	pop	{r4, pc}
 800b492:	bf00      	nop
 800b494:	0800b601 	.word	0x0800b601
 800b498:	0800b623 	.word	0x0800b623
 800b49c:	0800b65b 	.word	0x0800b65b
 800b4a0:	0800b67f 	.word	0x0800b67f
 800b4a4:	20000518 	.word	0x20000518

0800b4a8 <stdio_exit_handler>:
 800b4a8:	4a02      	ldr	r2, [pc, #8]	@ (800b4b4 <stdio_exit_handler+0xc>)
 800b4aa:	4903      	ldr	r1, [pc, #12]	@ (800b4b8 <stdio_exit_handler+0x10>)
 800b4ac:	4803      	ldr	r0, [pc, #12]	@ (800b4bc <stdio_exit_handler+0x14>)
 800b4ae:	f000 b869 	b.w	800b584 <_fwalk_sglue>
 800b4b2:	bf00      	nop
 800b4b4:	200000a8 	.word	0x200000a8
 800b4b8:	0800e06d 	.word	0x0800e06d
 800b4bc:	200000b8 	.word	0x200000b8

0800b4c0 <cleanup_stdio>:
 800b4c0:	6841      	ldr	r1, [r0, #4]
 800b4c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b4f4 <cleanup_stdio+0x34>)
 800b4c4:	4299      	cmp	r1, r3
 800b4c6:	b510      	push	{r4, lr}
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	d001      	beq.n	800b4d0 <cleanup_stdio+0x10>
 800b4cc:	f002 fdce 	bl	800e06c <_fflush_r>
 800b4d0:	68a1      	ldr	r1, [r4, #8]
 800b4d2:	4b09      	ldr	r3, [pc, #36]	@ (800b4f8 <cleanup_stdio+0x38>)
 800b4d4:	4299      	cmp	r1, r3
 800b4d6:	d002      	beq.n	800b4de <cleanup_stdio+0x1e>
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f002 fdc7 	bl	800e06c <_fflush_r>
 800b4de:	68e1      	ldr	r1, [r4, #12]
 800b4e0:	4b06      	ldr	r3, [pc, #24]	@ (800b4fc <cleanup_stdio+0x3c>)
 800b4e2:	4299      	cmp	r1, r3
 800b4e4:	d004      	beq.n	800b4f0 <cleanup_stdio+0x30>
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4ec:	f002 bdbe 	b.w	800e06c <_fflush_r>
 800b4f0:	bd10      	pop	{r4, pc}
 800b4f2:	bf00      	nop
 800b4f4:	20000518 	.word	0x20000518
 800b4f8:	20000580 	.word	0x20000580
 800b4fc:	200005e8 	.word	0x200005e8

0800b500 <global_stdio_init.part.0>:
 800b500:	b510      	push	{r4, lr}
 800b502:	4b0b      	ldr	r3, [pc, #44]	@ (800b530 <global_stdio_init.part.0+0x30>)
 800b504:	4c0b      	ldr	r4, [pc, #44]	@ (800b534 <global_stdio_init.part.0+0x34>)
 800b506:	4a0c      	ldr	r2, [pc, #48]	@ (800b538 <global_stdio_init.part.0+0x38>)
 800b508:	601a      	str	r2, [r3, #0]
 800b50a:	4620      	mov	r0, r4
 800b50c:	2200      	movs	r2, #0
 800b50e:	2104      	movs	r1, #4
 800b510:	f7ff ff94 	bl	800b43c <std>
 800b514:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b518:	2201      	movs	r2, #1
 800b51a:	2109      	movs	r1, #9
 800b51c:	f7ff ff8e 	bl	800b43c <std>
 800b520:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b524:	2202      	movs	r2, #2
 800b526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b52a:	2112      	movs	r1, #18
 800b52c:	f7ff bf86 	b.w	800b43c <std>
 800b530:	20000650 	.word	0x20000650
 800b534:	20000518 	.word	0x20000518
 800b538:	0800b4a9 	.word	0x0800b4a9

0800b53c <__sfp_lock_acquire>:
 800b53c:	4801      	ldr	r0, [pc, #4]	@ (800b544 <__sfp_lock_acquire+0x8>)
 800b53e:	f000 b920 	b.w	800b782 <__retarget_lock_acquire_recursive>
 800b542:	bf00      	nop
 800b544:	20000659 	.word	0x20000659

0800b548 <__sfp_lock_release>:
 800b548:	4801      	ldr	r0, [pc, #4]	@ (800b550 <__sfp_lock_release+0x8>)
 800b54a:	f000 b91b 	b.w	800b784 <__retarget_lock_release_recursive>
 800b54e:	bf00      	nop
 800b550:	20000659 	.word	0x20000659

0800b554 <__sinit>:
 800b554:	b510      	push	{r4, lr}
 800b556:	4604      	mov	r4, r0
 800b558:	f7ff fff0 	bl	800b53c <__sfp_lock_acquire>
 800b55c:	6a23      	ldr	r3, [r4, #32]
 800b55e:	b11b      	cbz	r3, 800b568 <__sinit+0x14>
 800b560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b564:	f7ff bff0 	b.w	800b548 <__sfp_lock_release>
 800b568:	4b04      	ldr	r3, [pc, #16]	@ (800b57c <__sinit+0x28>)
 800b56a:	6223      	str	r3, [r4, #32]
 800b56c:	4b04      	ldr	r3, [pc, #16]	@ (800b580 <__sinit+0x2c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1f5      	bne.n	800b560 <__sinit+0xc>
 800b574:	f7ff ffc4 	bl	800b500 <global_stdio_init.part.0>
 800b578:	e7f2      	b.n	800b560 <__sinit+0xc>
 800b57a:	bf00      	nop
 800b57c:	0800b4c1 	.word	0x0800b4c1
 800b580:	20000650 	.word	0x20000650

0800b584 <_fwalk_sglue>:
 800b584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b588:	4607      	mov	r7, r0
 800b58a:	4688      	mov	r8, r1
 800b58c:	4614      	mov	r4, r2
 800b58e:	2600      	movs	r6, #0
 800b590:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b594:	f1b9 0901 	subs.w	r9, r9, #1
 800b598:	d505      	bpl.n	800b5a6 <_fwalk_sglue+0x22>
 800b59a:	6824      	ldr	r4, [r4, #0]
 800b59c:	2c00      	cmp	r4, #0
 800b59e:	d1f7      	bne.n	800b590 <_fwalk_sglue+0xc>
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5a6:	89ab      	ldrh	r3, [r5, #12]
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d907      	bls.n	800b5bc <_fwalk_sglue+0x38>
 800b5ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	d003      	beq.n	800b5bc <_fwalk_sglue+0x38>
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	4638      	mov	r0, r7
 800b5b8:	47c0      	blx	r8
 800b5ba:	4306      	orrs	r6, r0
 800b5bc:	3568      	adds	r5, #104	@ 0x68
 800b5be:	e7e9      	b.n	800b594 <_fwalk_sglue+0x10>

0800b5c0 <siprintf>:
 800b5c0:	b40e      	push	{r1, r2, r3}
 800b5c2:	b500      	push	{lr}
 800b5c4:	b09c      	sub	sp, #112	@ 0x70
 800b5c6:	ab1d      	add	r3, sp, #116	@ 0x74
 800b5c8:	9002      	str	r0, [sp, #8]
 800b5ca:	9006      	str	r0, [sp, #24]
 800b5cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b5d0:	4809      	ldr	r0, [pc, #36]	@ (800b5f8 <siprintf+0x38>)
 800b5d2:	9107      	str	r1, [sp, #28]
 800b5d4:	9104      	str	r1, [sp, #16]
 800b5d6:	4909      	ldr	r1, [pc, #36]	@ (800b5fc <siprintf+0x3c>)
 800b5d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5dc:	9105      	str	r1, [sp, #20]
 800b5de:	6800      	ldr	r0, [r0, #0]
 800b5e0:	9301      	str	r3, [sp, #4]
 800b5e2:	a902      	add	r1, sp, #8
 800b5e4:	f002 fbc2 	bl	800dd6c <_svfiprintf_r>
 800b5e8:	9b02      	ldr	r3, [sp, #8]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	701a      	strb	r2, [r3, #0]
 800b5ee:	b01c      	add	sp, #112	@ 0x70
 800b5f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5f4:	b003      	add	sp, #12
 800b5f6:	4770      	bx	lr
 800b5f8:	200000b4 	.word	0x200000b4
 800b5fc:	ffff0208 	.word	0xffff0208

0800b600 <__sread>:
 800b600:	b510      	push	{r4, lr}
 800b602:	460c      	mov	r4, r1
 800b604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b608:	f000 f86c 	bl	800b6e4 <_read_r>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	bfab      	itete	ge
 800b610:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b612:	89a3      	ldrhlt	r3, [r4, #12]
 800b614:	181b      	addge	r3, r3, r0
 800b616:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b61a:	bfac      	ite	ge
 800b61c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b61e:	81a3      	strhlt	r3, [r4, #12]
 800b620:	bd10      	pop	{r4, pc}

0800b622 <__swrite>:
 800b622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b626:	461f      	mov	r7, r3
 800b628:	898b      	ldrh	r3, [r1, #12]
 800b62a:	05db      	lsls	r3, r3, #23
 800b62c:	4605      	mov	r5, r0
 800b62e:	460c      	mov	r4, r1
 800b630:	4616      	mov	r6, r2
 800b632:	d505      	bpl.n	800b640 <__swrite+0x1e>
 800b634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b638:	2302      	movs	r3, #2
 800b63a:	2200      	movs	r2, #0
 800b63c:	f000 f840 	bl	800b6c0 <_lseek_r>
 800b640:	89a3      	ldrh	r3, [r4, #12]
 800b642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b646:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b64a:	81a3      	strh	r3, [r4, #12]
 800b64c:	4632      	mov	r2, r6
 800b64e:	463b      	mov	r3, r7
 800b650:	4628      	mov	r0, r5
 800b652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b656:	f000 b857 	b.w	800b708 <_write_r>

0800b65a <__sseek>:
 800b65a:	b510      	push	{r4, lr}
 800b65c:	460c      	mov	r4, r1
 800b65e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b662:	f000 f82d 	bl	800b6c0 <_lseek_r>
 800b666:	1c43      	adds	r3, r0, #1
 800b668:	89a3      	ldrh	r3, [r4, #12]
 800b66a:	bf15      	itete	ne
 800b66c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b66e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b672:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b676:	81a3      	strheq	r3, [r4, #12]
 800b678:	bf18      	it	ne
 800b67a:	81a3      	strhne	r3, [r4, #12]
 800b67c:	bd10      	pop	{r4, pc}

0800b67e <__sclose>:
 800b67e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b682:	f000 b80d 	b.w	800b6a0 <_close_r>

0800b686 <memset>:
 800b686:	4402      	add	r2, r0
 800b688:	4603      	mov	r3, r0
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d100      	bne.n	800b690 <memset+0xa>
 800b68e:	4770      	bx	lr
 800b690:	f803 1b01 	strb.w	r1, [r3], #1
 800b694:	e7f9      	b.n	800b68a <memset+0x4>
	...

0800b698 <_localeconv_r>:
 800b698:	4800      	ldr	r0, [pc, #0]	@ (800b69c <_localeconv_r+0x4>)
 800b69a:	4770      	bx	lr
 800b69c:	200001f4 	.word	0x200001f4

0800b6a0 <_close_r>:
 800b6a0:	b538      	push	{r3, r4, r5, lr}
 800b6a2:	4d06      	ldr	r5, [pc, #24]	@ (800b6bc <_close_r+0x1c>)
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	4608      	mov	r0, r1
 800b6aa:	602b      	str	r3, [r5, #0]
 800b6ac:	f7f6 f942 	bl	8001934 <_close>
 800b6b0:	1c43      	adds	r3, r0, #1
 800b6b2:	d102      	bne.n	800b6ba <_close_r+0x1a>
 800b6b4:	682b      	ldr	r3, [r5, #0]
 800b6b6:	b103      	cbz	r3, 800b6ba <_close_r+0x1a>
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	bd38      	pop	{r3, r4, r5, pc}
 800b6bc:	20000654 	.word	0x20000654

0800b6c0 <_lseek_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	4d07      	ldr	r5, [pc, #28]	@ (800b6e0 <_lseek_r+0x20>)
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	4608      	mov	r0, r1
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	602a      	str	r2, [r5, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f7f6 f957 	bl	8001982 <_lseek>
 800b6d4:	1c43      	adds	r3, r0, #1
 800b6d6:	d102      	bne.n	800b6de <_lseek_r+0x1e>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	b103      	cbz	r3, 800b6de <_lseek_r+0x1e>
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	20000654 	.word	0x20000654

0800b6e4 <_read_r>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	4d07      	ldr	r5, [pc, #28]	@ (800b704 <_read_r+0x20>)
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	4608      	mov	r0, r1
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	602a      	str	r2, [r5, #0]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	f7f6 f8e5 	bl	80018c2 <_read>
 800b6f8:	1c43      	adds	r3, r0, #1
 800b6fa:	d102      	bne.n	800b702 <_read_r+0x1e>
 800b6fc:	682b      	ldr	r3, [r5, #0]
 800b6fe:	b103      	cbz	r3, 800b702 <_read_r+0x1e>
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	bd38      	pop	{r3, r4, r5, pc}
 800b704:	20000654 	.word	0x20000654

0800b708 <_write_r>:
 800b708:	b538      	push	{r3, r4, r5, lr}
 800b70a:	4d07      	ldr	r5, [pc, #28]	@ (800b728 <_write_r+0x20>)
 800b70c:	4604      	mov	r4, r0
 800b70e:	4608      	mov	r0, r1
 800b710:	4611      	mov	r1, r2
 800b712:	2200      	movs	r2, #0
 800b714:	602a      	str	r2, [r5, #0]
 800b716:	461a      	mov	r2, r3
 800b718:	f7f6 f8f0 	bl	80018fc <_write>
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	d102      	bne.n	800b726 <_write_r+0x1e>
 800b720:	682b      	ldr	r3, [r5, #0]
 800b722:	b103      	cbz	r3, 800b726 <_write_r+0x1e>
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	20000654 	.word	0x20000654

0800b72c <__errno>:
 800b72c:	4b01      	ldr	r3, [pc, #4]	@ (800b734 <__errno+0x8>)
 800b72e:	6818      	ldr	r0, [r3, #0]
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	200000b4 	.word	0x200000b4

0800b738 <__libc_init_array>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	4d0d      	ldr	r5, [pc, #52]	@ (800b770 <__libc_init_array+0x38>)
 800b73c:	4c0d      	ldr	r4, [pc, #52]	@ (800b774 <__libc_init_array+0x3c>)
 800b73e:	1b64      	subs	r4, r4, r5
 800b740:	10a4      	asrs	r4, r4, #2
 800b742:	2600      	movs	r6, #0
 800b744:	42a6      	cmp	r6, r4
 800b746:	d109      	bne.n	800b75c <__libc_init_array+0x24>
 800b748:	4d0b      	ldr	r5, [pc, #44]	@ (800b778 <__libc_init_array+0x40>)
 800b74a:	4c0c      	ldr	r4, [pc, #48]	@ (800b77c <__libc_init_array+0x44>)
 800b74c:	f003 fb72 	bl	800ee34 <_init>
 800b750:	1b64      	subs	r4, r4, r5
 800b752:	10a4      	asrs	r4, r4, #2
 800b754:	2600      	movs	r6, #0
 800b756:	42a6      	cmp	r6, r4
 800b758:	d105      	bne.n	800b766 <__libc_init_array+0x2e>
 800b75a:	bd70      	pop	{r4, r5, r6, pc}
 800b75c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b760:	4798      	blx	r3
 800b762:	3601      	adds	r6, #1
 800b764:	e7ee      	b.n	800b744 <__libc_init_array+0xc>
 800b766:	f855 3b04 	ldr.w	r3, [r5], #4
 800b76a:	4798      	blx	r3
 800b76c:	3601      	adds	r6, #1
 800b76e:	e7f2      	b.n	800b756 <__libc_init_array+0x1e>
 800b770:	0800f2d0 	.word	0x0800f2d0
 800b774:	0800f2d0 	.word	0x0800f2d0
 800b778:	0800f2d0 	.word	0x0800f2d0
 800b77c:	0800f2d4 	.word	0x0800f2d4

0800b780 <__retarget_lock_init_recursive>:
 800b780:	4770      	bx	lr

0800b782 <__retarget_lock_acquire_recursive>:
 800b782:	4770      	bx	lr

0800b784 <__retarget_lock_release_recursive>:
 800b784:	4770      	bx	lr

0800b786 <memcpy>:
 800b786:	440a      	add	r2, r1
 800b788:	4291      	cmp	r1, r2
 800b78a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b78e:	d100      	bne.n	800b792 <memcpy+0xc>
 800b790:	4770      	bx	lr
 800b792:	b510      	push	{r4, lr}
 800b794:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b798:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b79c:	4291      	cmp	r1, r2
 800b79e:	d1f9      	bne.n	800b794 <memcpy+0xe>
 800b7a0:	bd10      	pop	{r4, pc}
	...

0800b7a4 <nanf>:
 800b7a4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b7ac <nanf+0x8>
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	7fc00000 	.word	0x7fc00000

0800b7b0 <quorem>:
 800b7b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	6903      	ldr	r3, [r0, #16]
 800b7b6:	690c      	ldr	r4, [r1, #16]
 800b7b8:	42a3      	cmp	r3, r4
 800b7ba:	4607      	mov	r7, r0
 800b7bc:	db7e      	blt.n	800b8bc <quorem+0x10c>
 800b7be:	3c01      	subs	r4, #1
 800b7c0:	f101 0814 	add.w	r8, r1, #20
 800b7c4:	00a3      	lsls	r3, r4, #2
 800b7c6:	f100 0514 	add.w	r5, r0, #20
 800b7ca:	9300      	str	r3, [sp, #0]
 800b7cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7d0:	9301      	str	r3, [sp, #4]
 800b7d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7e2:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7e6:	d32e      	bcc.n	800b846 <quorem+0x96>
 800b7e8:	f04f 0a00 	mov.w	sl, #0
 800b7ec:	46c4      	mov	ip, r8
 800b7ee:	46ae      	mov	lr, r5
 800b7f0:	46d3      	mov	fp, sl
 800b7f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b7f6:	b298      	uxth	r0, r3
 800b7f8:	fb06 a000 	mla	r0, r6, r0, sl
 800b7fc:	0c02      	lsrs	r2, r0, #16
 800b7fe:	0c1b      	lsrs	r3, r3, #16
 800b800:	fb06 2303 	mla	r3, r6, r3, r2
 800b804:	f8de 2000 	ldr.w	r2, [lr]
 800b808:	b280      	uxth	r0, r0
 800b80a:	b292      	uxth	r2, r2
 800b80c:	1a12      	subs	r2, r2, r0
 800b80e:	445a      	add	r2, fp
 800b810:	f8de 0000 	ldr.w	r0, [lr]
 800b814:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b818:	b29b      	uxth	r3, r3
 800b81a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b81e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b822:	b292      	uxth	r2, r2
 800b824:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b828:	45e1      	cmp	r9, ip
 800b82a:	f84e 2b04 	str.w	r2, [lr], #4
 800b82e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b832:	d2de      	bcs.n	800b7f2 <quorem+0x42>
 800b834:	9b00      	ldr	r3, [sp, #0]
 800b836:	58eb      	ldr	r3, [r5, r3]
 800b838:	b92b      	cbnz	r3, 800b846 <quorem+0x96>
 800b83a:	9b01      	ldr	r3, [sp, #4]
 800b83c:	3b04      	subs	r3, #4
 800b83e:	429d      	cmp	r5, r3
 800b840:	461a      	mov	r2, r3
 800b842:	d32f      	bcc.n	800b8a4 <quorem+0xf4>
 800b844:	613c      	str	r4, [r7, #16]
 800b846:	4638      	mov	r0, r7
 800b848:	f001 f9c2 	bl	800cbd0 <__mcmp>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	db25      	blt.n	800b89c <quorem+0xec>
 800b850:	4629      	mov	r1, r5
 800b852:	2000      	movs	r0, #0
 800b854:	f858 2b04 	ldr.w	r2, [r8], #4
 800b858:	f8d1 c000 	ldr.w	ip, [r1]
 800b85c:	fa1f fe82 	uxth.w	lr, r2
 800b860:	fa1f f38c 	uxth.w	r3, ip
 800b864:	eba3 030e 	sub.w	r3, r3, lr
 800b868:	4403      	add	r3, r0
 800b86a:	0c12      	lsrs	r2, r2, #16
 800b86c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b870:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b874:	b29b      	uxth	r3, r3
 800b876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b87a:	45c1      	cmp	r9, r8
 800b87c:	f841 3b04 	str.w	r3, [r1], #4
 800b880:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b884:	d2e6      	bcs.n	800b854 <quorem+0xa4>
 800b886:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b88a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b88e:	b922      	cbnz	r2, 800b89a <quorem+0xea>
 800b890:	3b04      	subs	r3, #4
 800b892:	429d      	cmp	r5, r3
 800b894:	461a      	mov	r2, r3
 800b896:	d30b      	bcc.n	800b8b0 <quorem+0x100>
 800b898:	613c      	str	r4, [r7, #16]
 800b89a:	3601      	adds	r6, #1
 800b89c:	4630      	mov	r0, r6
 800b89e:	b003      	add	sp, #12
 800b8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a4:	6812      	ldr	r2, [r2, #0]
 800b8a6:	3b04      	subs	r3, #4
 800b8a8:	2a00      	cmp	r2, #0
 800b8aa:	d1cb      	bne.n	800b844 <quorem+0x94>
 800b8ac:	3c01      	subs	r4, #1
 800b8ae:	e7c6      	b.n	800b83e <quorem+0x8e>
 800b8b0:	6812      	ldr	r2, [r2, #0]
 800b8b2:	3b04      	subs	r3, #4
 800b8b4:	2a00      	cmp	r2, #0
 800b8b6:	d1ef      	bne.n	800b898 <quorem+0xe8>
 800b8b8:	3c01      	subs	r4, #1
 800b8ba:	e7ea      	b.n	800b892 <quorem+0xe2>
 800b8bc:	2000      	movs	r0, #0
 800b8be:	e7ee      	b.n	800b89e <quorem+0xee>

0800b8c0 <_dtoa_r>:
 800b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	69c7      	ldr	r7, [r0, #28]
 800b8c6:	b099      	sub	sp, #100	@ 0x64
 800b8c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b8cc:	ec55 4b10 	vmov	r4, r5, d0
 800b8d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b8d2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b8d4:	4683      	mov	fp, r0
 800b8d6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b8da:	b97f      	cbnz	r7, 800b8fc <_dtoa_r+0x3c>
 800b8dc:	2010      	movs	r0, #16
 800b8de:	f000 fdfd 	bl	800c4dc <malloc>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b8e8:	b920      	cbnz	r0, 800b8f4 <_dtoa_r+0x34>
 800b8ea:	4ba7      	ldr	r3, [pc, #668]	@ (800bb88 <_dtoa_r+0x2c8>)
 800b8ec:	21ef      	movs	r1, #239	@ 0xef
 800b8ee:	48a7      	ldr	r0, [pc, #668]	@ (800bb8c <_dtoa_r+0x2cc>)
 800b8f0:	f002 fc2a 	bl	800e148 <__assert_func>
 800b8f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b8f8:	6007      	str	r7, [r0, #0]
 800b8fa:	60c7      	str	r7, [r0, #12]
 800b8fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b900:	6819      	ldr	r1, [r3, #0]
 800b902:	b159      	cbz	r1, 800b91c <_dtoa_r+0x5c>
 800b904:	685a      	ldr	r2, [r3, #4]
 800b906:	604a      	str	r2, [r1, #4]
 800b908:	2301      	movs	r3, #1
 800b90a:	4093      	lsls	r3, r2
 800b90c:	608b      	str	r3, [r1, #8]
 800b90e:	4658      	mov	r0, fp
 800b910:	f000 feda 	bl	800c6c8 <_Bfree>
 800b914:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b918:	2200      	movs	r2, #0
 800b91a:	601a      	str	r2, [r3, #0]
 800b91c:	1e2b      	subs	r3, r5, #0
 800b91e:	bfb9      	ittee	lt
 800b920:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b924:	9303      	strlt	r3, [sp, #12]
 800b926:	2300      	movge	r3, #0
 800b928:	6033      	strge	r3, [r6, #0]
 800b92a:	9f03      	ldr	r7, [sp, #12]
 800b92c:	4b98      	ldr	r3, [pc, #608]	@ (800bb90 <_dtoa_r+0x2d0>)
 800b92e:	bfbc      	itt	lt
 800b930:	2201      	movlt	r2, #1
 800b932:	6032      	strlt	r2, [r6, #0]
 800b934:	43bb      	bics	r3, r7
 800b936:	d112      	bne.n	800b95e <_dtoa_r+0x9e>
 800b938:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b93a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b93e:	6013      	str	r3, [r2, #0]
 800b940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b944:	4323      	orrs	r3, r4
 800b946:	f000 854d 	beq.w	800c3e4 <_dtoa_r+0xb24>
 800b94a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b94c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bba4 <_dtoa_r+0x2e4>
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 854f 	beq.w	800c3f4 <_dtoa_r+0xb34>
 800b956:	f10a 0303 	add.w	r3, sl, #3
 800b95a:	f000 bd49 	b.w	800c3f0 <_dtoa_r+0xb30>
 800b95e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b962:	2200      	movs	r2, #0
 800b964:	ec51 0b17 	vmov	r0, r1, d7
 800b968:	2300      	movs	r3, #0
 800b96a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b96e:	f7f5 f8d3 	bl	8000b18 <__aeabi_dcmpeq>
 800b972:	4680      	mov	r8, r0
 800b974:	b158      	cbz	r0, 800b98e <_dtoa_r+0xce>
 800b976:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b978:	2301      	movs	r3, #1
 800b97a:	6013      	str	r3, [r2, #0]
 800b97c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b97e:	b113      	cbz	r3, 800b986 <_dtoa_r+0xc6>
 800b980:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b982:	4b84      	ldr	r3, [pc, #528]	@ (800bb94 <_dtoa_r+0x2d4>)
 800b984:	6013      	str	r3, [r2, #0]
 800b986:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bba8 <_dtoa_r+0x2e8>
 800b98a:	f000 bd33 	b.w	800c3f4 <_dtoa_r+0xb34>
 800b98e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b992:	aa16      	add	r2, sp, #88	@ 0x58
 800b994:	a917      	add	r1, sp, #92	@ 0x5c
 800b996:	4658      	mov	r0, fp
 800b998:	f001 fa3a 	bl	800ce10 <__d2b>
 800b99c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b9a0:	4681      	mov	r9, r0
 800b9a2:	2e00      	cmp	r6, #0
 800b9a4:	d077      	beq.n	800ba96 <_dtoa_r+0x1d6>
 800b9a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b9ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b9b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b9bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	4b74      	ldr	r3, [pc, #464]	@ (800bb98 <_dtoa_r+0x2d8>)
 800b9c6:	f7f4 fc87 	bl	80002d8 <__aeabi_dsub>
 800b9ca:	a369      	add	r3, pc, #420	@ (adr r3, 800bb70 <_dtoa_r+0x2b0>)
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	f7f4 fe3a 	bl	8000648 <__aeabi_dmul>
 800b9d4:	a368      	add	r3, pc, #416	@ (adr r3, 800bb78 <_dtoa_r+0x2b8>)
 800b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9da:	f7f4 fc7f 	bl	80002dc <__adddf3>
 800b9de:	4604      	mov	r4, r0
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	460d      	mov	r5, r1
 800b9e4:	f7f4 fdc6 	bl	8000574 <__aeabi_i2d>
 800b9e8:	a365      	add	r3, pc, #404	@ (adr r3, 800bb80 <_dtoa_r+0x2c0>)
 800b9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ee:	f7f4 fe2b 	bl	8000648 <__aeabi_dmul>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	f7f4 fc6f 	bl	80002dc <__adddf3>
 800b9fe:	4604      	mov	r4, r0
 800ba00:	460d      	mov	r5, r1
 800ba02:	f7f5 f8d1 	bl	8000ba8 <__aeabi_d2iz>
 800ba06:	2200      	movs	r2, #0
 800ba08:	4607      	mov	r7, r0
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	4629      	mov	r1, r5
 800ba10:	f7f5 f88c 	bl	8000b2c <__aeabi_dcmplt>
 800ba14:	b140      	cbz	r0, 800ba28 <_dtoa_r+0x168>
 800ba16:	4638      	mov	r0, r7
 800ba18:	f7f4 fdac 	bl	8000574 <__aeabi_i2d>
 800ba1c:	4622      	mov	r2, r4
 800ba1e:	462b      	mov	r3, r5
 800ba20:	f7f5 f87a 	bl	8000b18 <__aeabi_dcmpeq>
 800ba24:	b900      	cbnz	r0, 800ba28 <_dtoa_r+0x168>
 800ba26:	3f01      	subs	r7, #1
 800ba28:	2f16      	cmp	r7, #22
 800ba2a:	d851      	bhi.n	800bad0 <_dtoa_r+0x210>
 800ba2c:	4b5b      	ldr	r3, [pc, #364]	@ (800bb9c <_dtoa_r+0x2dc>)
 800ba2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba3a:	f7f5 f877 	bl	8000b2c <__aeabi_dcmplt>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d048      	beq.n	800bad4 <_dtoa_r+0x214>
 800ba42:	3f01      	subs	r7, #1
 800ba44:	2300      	movs	r3, #0
 800ba46:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba4a:	1b9b      	subs	r3, r3, r6
 800ba4c:	1e5a      	subs	r2, r3, #1
 800ba4e:	bf44      	itt	mi
 800ba50:	f1c3 0801 	rsbmi	r8, r3, #1
 800ba54:	2300      	movmi	r3, #0
 800ba56:	9208      	str	r2, [sp, #32]
 800ba58:	bf54      	ite	pl
 800ba5a:	f04f 0800 	movpl.w	r8, #0
 800ba5e:	9308      	strmi	r3, [sp, #32]
 800ba60:	2f00      	cmp	r7, #0
 800ba62:	db39      	blt.n	800bad8 <_dtoa_r+0x218>
 800ba64:	9b08      	ldr	r3, [sp, #32]
 800ba66:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ba68:	443b      	add	r3, r7
 800ba6a:	9308      	str	r3, [sp, #32]
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba72:	2b09      	cmp	r3, #9
 800ba74:	d864      	bhi.n	800bb40 <_dtoa_r+0x280>
 800ba76:	2b05      	cmp	r3, #5
 800ba78:	bfc4      	itt	gt
 800ba7a:	3b04      	subgt	r3, #4
 800ba7c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ba7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba80:	f1a3 0302 	sub.w	r3, r3, #2
 800ba84:	bfcc      	ite	gt
 800ba86:	2400      	movgt	r4, #0
 800ba88:	2401      	movle	r4, #1
 800ba8a:	2b03      	cmp	r3, #3
 800ba8c:	d863      	bhi.n	800bb56 <_dtoa_r+0x296>
 800ba8e:	e8df f003 	tbb	[pc, r3]
 800ba92:	372a      	.short	0x372a
 800ba94:	5535      	.short	0x5535
 800ba96:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ba9a:	441e      	add	r6, r3
 800ba9c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800baa0:	2b20      	cmp	r3, #32
 800baa2:	bfc1      	itttt	gt
 800baa4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800baa8:	409f      	lslgt	r7, r3
 800baaa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800baae:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bab2:	bfd6      	itet	le
 800bab4:	f1c3 0320 	rsble	r3, r3, #32
 800bab8:	ea47 0003 	orrgt.w	r0, r7, r3
 800babc:	fa04 f003 	lslle.w	r0, r4, r3
 800bac0:	f7f4 fd48 	bl	8000554 <__aeabi_ui2d>
 800bac4:	2201      	movs	r2, #1
 800bac6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800baca:	3e01      	subs	r6, #1
 800bacc:	9214      	str	r2, [sp, #80]	@ 0x50
 800bace:	e777      	b.n	800b9c0 <_dtoa_r+0x100>
 800bad0:	2301      	movs	r3, #1
 800bad2:	e7b8      	b.n	800ba46 <_dtoa_r+0x186>
 800bad4:	9012      	str	r0, [sp, #72]	@ 0x48
 800bad6:	e7b7      	b.n	800ba48 <_dtoa_r+0x188>
 800bad8:	427b      	negs	r3, r7
 800bada:	930a      	str	r3, [sp, #40]	@ 0x28
 800badc:	2300      	movs	r3, #0
 800bade:	eba8 0807 	sub.w	r8, r8, r7
 800bae2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bae4:	e7c4      	b.n	800ba70 <_dtoa_r+0x1b0>
 800bae6:	2300      	movs	r3, #0
 800bae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baec:	2b00      	cmp	r3, #0
 800baee:	dc35      	bgt.n	800bb5c <_dtoa_r+0x29c>
 800baf0:	2301      	movs	r3, #1
 800baf2:	9300      	str	r3, [sp, #0]
 800baf4:	9307      	str	r3, [sp, #28]
 800baf6:	461a      	mov	r2, r3
 800baf8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bafa:	e00b      	b.n	800bb14 <_dtoa_r+0x254>
 800bafc:	2301      	movs	r3, #1
 800bafe:	e7f3      	b.n	800bae8 <_dtoa_r+0x228>
 800bb00:	2300      	movs	r3, #0
 800bb02:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb06:	18fb      	adds	r3, r7, r3
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	9307      	str	r3, [sp, #28]
 800bb10:	bfb8      	it	lt
 800bb12:	2301      	movlt	r3, #1
 800bb14:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bb18:	2100      	movs	r1, #0
 800bb1a:	2204      	movs	r2, #4
 800bb1c:	f102 0514 	add.w	r5, r2, #20
 800bb20:	429d      	cmp	r5, r3
 800bb22:	d91f      	bls.n	800bb64 <_dtoa_r+0x2a4>
 800bb24:	6041      	str	r1, [r0, #4]
 800bb26:	4658      	mov	r0, fp
 800bb28:	f000 fd8e 	bl	800c648 <_Balloc>
 800bb2c:	4682      	mov	sl, r0
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d13c      	bne.n	800bbac <_dtoa_r+0x2ec>
 800bb32:	4b1b      	ldr	r3, [pc, #108]	@ (800bba0 <_dtoa_r+0x2e0>)
 800bb34:	4602      	mov	r2, r0
 800bb36:	f240 11af 	movw	r1, #431	@ 0x1af
 800bb3a:	e6d8      	b.n	800b8ee <_dtoa_r+0x2e>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e7e0      	b.n	800bb02 <_dtoa_r+0x242>
 800bb40:	2401      	movs	r4, #1
 800bb42:	2300      	movs	r3, #0
 800bb44:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb46:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bb48:	f04f 33ff 	mov.w	r3, #4294967295
 800bb4c:	9300      	str	r3, [sp, #0]
 800bb4e:	9307      	str	r3, [sp, #28]
 800bb50:	2200      	movs	r2, #0
 800bb52:	2312      	movs	r3, #18
 800bb54:	e7d0      	b.n	800baf8 <_dtoa_r+0x238>
 800bb56:	2301      	movs	r3, #1
 800bb58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb5a:	e7f5      	b.n	800bb48 <_dtoa_r+0x288>
 800bb5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	9307      	str	r3, [sp, #28]
 800bb62:	e7d7      	b.n	800bb14 <_dtoa_r+0x254>
 800bb64:	3101      	adds	r1, #1
 800bb66:	0052      	lsls	r2, r2, #1
 800bb68:	e7d8      	b.n	800bb1c <_dtoa_r+0x25c>
 800bb6a:	bf00      	nop
 800bb6c:	f3af 8000 	nop.w
 800bb70:	636f4361 	.word	0x636f4361
 800bb74:	3fd287a7 	.word	0x3fd287a7
 800bb78:	8b60c8b3 	.word	0x8b60c8b3
 800bb7c:	3fc68a28 	.word	0x3fc68a28
 800bb80:	509f79fb 	.word	0x509f79fb
 800bb84:	3fd34413 	.word	0x3fd34413
 800bb88:	0800eedd 	.word	0x0800eedd
 800bb8c:	0800eef4 	.word	0x0800eef4
 800bb90:	7ff00000 	.word	0x7ff00000
 800bb94:	0800eea8 	.word	0x0800eea8
 800bb98:	3ff80000 	.word	0x3ff80000
 800bb9c:	0800eff0 	.word	0x0800eff0
 800bba0:	0800ef4c 	.word	0x0800ef4c
 800bba4:	0800eed9 	.word	0x0800eed9
 800bba8:	0800eea7 	.word	0x0800eea7
 800bbac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bbb0:	6018      	str	r0, [r3, #0]
 800bbb2:	9b07      	ldr	r3, [sp, #28]
 800bbb4:	2b0e      	cmp	r3, #14
 800bbb6:	f200 80a4 	bhi.w	800bd02 <_dtoa_r+0x442>
 800bbba:	2c00      	cmp	r4, #0
 800bbbc:	f000 80a1 	beq.w	800bd02 <_dtoa_r+0x442>
 800bbc0:	2f00      	cmp	r7, #0
 800bbc2:	dd33      	ble.n	800bc2c <_dtoa_r+0x36c>
 800bbc4:	4bad      	ldr	r3, [pc, #692]	@ (800be7c <_dtoa_r+0x5bc>)
 800bbc6:	f007 020f 	and.w	r2, r7, #15
 800bbca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbce:	ed93 7b00 	vldr	d7, [r3]
 800bbd2:	05f8      	lsls	r0, r7, #23
 800bbd4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bbd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bbdc:	d516      	bpl.n	800bc0c <_dtoa_r+0x34c>
 800bbde:	4ba8      	ldr	r3, [pc, #672]	@ (800be80 <_dtoa_r+0x5c0>)
 800bbe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbe8:	f7f4 fe58 	bl	800089c <__aeabi_ddiv>
 800bbec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbf0:	f004 040f 	and.w	r4, r4, #15
 800bbf4:	2603      	movs	r6, #3
 800bbf6:	4da2      	ldr	r5, [pc, #648]	@ (800be80 <_dtoa_r+0x5c0>)
 800bbf8:	b954      	cbnz	r4, 800bc10 <_dtoa_r+0x350>
 800bbfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc02:	f7f4 fe4b 	bl	800089c <__aeabi_ddiv>
 800bc06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc0a:	e028      	b.n	800bc5e <_dtoa_r+0x39e>
 800bc0c:	2602      	movs	r6, #2
 800bc0e:	e7f2      	b.n	800bbf6 <_dtoa_r+0x336>
 800bc10:	07e1      	lsls	r1, r4, #31
 800bc12:	d508      	bpl.n	800bc26 <_dtoa_r+0x366>
 800bc14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc18:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc1c:	f7f4 fd14 	bl	8000648 <__aeabi_dmul>
 800bc20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc24:	3601      	adds	r6, #1
 800bc26:	1064      	asrs	r4, r4, #1
 800bc28:	3508      	adds	r5, #8
 800bc2a:	e7e5      	b.n	800bbf8 <_dtoa_r+0x338>
 800bc2c:	f000 80d2 	beq.w	800bdd4 <_dtoa_r+0x514>
 800bc30:	427c      	negs	r4, r7
 800bc32:	4b92      	ldr	r3, [pc, #584]	@ (800be7c <_dtoa_r+0x5bc>)
 800bc34:	4d92      	ldr	r5, [pc, #584]	@ (800be80 <_dtoa_r+0x5c0>)
 800bc36:	f004 020f 	and.w	r2, r4, #15
 800bc3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc46:	f7f4 fcff 	bl	8000648 <__aeabi_dmul>
 800bc4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc4e:	1124      	asrs	r4, r4, #4
 800bc50:	2300      	movs	r3, #0
 800bc52:	2602      	movs	r6, #2
 800bc54:	2c00      	cmp	r4, #0
 800bc56:	f040 80b2 	bne.w	800bdbe <_dtoa_r+0x4fe>
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1d3      	bne.n	800bc06 <_dtoa_r+0x346>
 800bc5e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc60:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	f000 80b7 	beq.w	800bdd8 <_dtoa_r+0x518>
 800bc6a:	4b86      	ldr	r3, [pc, #536]	@ (800be84 <_dtoa_r+0x5c4>)
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	4620      	mov	r0, r4
 800bc70:	4629      	mov	r1, r5
 800bc72:	f7f4 ff5b 	bl	8000b2c <__aeabi_dcmplt>
 800bc76:	2800      	cmp	r0, #0
 800bc78:	f000 80ae 	beq.w	800bdd8 <_dtoa_r+0x518>
 800bc7c:	9b07      	ldr	r3, [sp, #28]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f000 80aa 	beq.w	800bdd8 <_dtoa_r+0x518>
 800bc84:	9b00      	ldr	r3, [sp, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	dd37      	ble.n	800bcfa <_dtoa_r+0x43a>
 800bc8a:	1e7b      	subs	r3, r7, #1
 800bc8c:	9304      	str	r3, [sp, #16]
 800bc8e:	4620      	mov	r0, r4
 800bc90:	4b7d      	ldr	r3, [pc, #500]	@ (800be88 <_dtoa_r+0x5c8>)
 800bc92:	2200      	movs	r2, #0
 800bc94:	4629      	mov	r1, r5
 800bc96:	f7f4 fcd7 	bl	8000648 <__aeabi_dmul>
 800bc9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc9e:	9c00      	ldr	r4, [sp, #0]
 800bca0:	3601      	adds	r6, #1
 800bca2:	4630      	mov	r0, r6
 800bca4:	f7f4 fc66 	bl	8000574 <__aeabi_i2d>
 800bca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcac:	f7f4 fccc 	bl	8000648 <__aeabi_dmul>
 800bcb0:	4b76      	ldr	r3, [pc, #472]	@ (800be8c <_dtoa_r+0x5cc>)
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f7f4 fb12 	bl	80002dc <__adddf3>
 800bcb8:	4605      	mov	r5, r0
 800bcba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bcbe:	2c00      	cmp	r4, #0
 800bcc0:	f040 808d 	bne.w	800bdde <_dtoa_r+0x51e>
 800bcc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcc8:	4b71      	ldr	r3, [pc, #452]	@ (800be90 <_dtoa_r+0x5d0>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	f7f4 fb04 	bl	80002d8 <__aeabi_dsub>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcd8:	462a      	mov	r2, r5
 800bcda:	4633      	mov	r3, r6
 800bcdc:	f7f4 ff44 	bl	8000b68 <__aeabi_dcmpgt>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	f040 828b 	bne.w	800c1fc <_dtoa_r+0x93c>
 800bce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcea:	462a      	mov	r2, r5
 800bcec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bcf0:	f7f4 ff1c 	bl	8000b2c <__aeabi_dcmplt>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	f040 8128 	bne.w	800bf4a <_dtoa_r+0x68a>
 800bcfa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bcfe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bd02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	f2c0 815a 	blt.w	800bfbe <_dtoa_r+0x6fe>
 800bd0a:	2f0e      	cmp	r7, #14
 800bd0c:	f300 8157 	bgt.w	800bfbe <_dtoa_r+0x6fe>
 800bd10:	4b5a      	ldr	r3, [pc, #360]	@ (800be7c <_dtoa_r+0x5bc>)
 800bd12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd16:	ed93 7b00 	vldr	d7, [r3]
 800bd1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	ed8d 7b00 	vstr	d7, [sp]
 800bd22:	da03      	bge.n	800bd2c <_dtoa_r+0x46c>
 800bd24:	9b07      	ldr	r3, [sp, #28]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f340 8101 	ble.w	800bf2e <_dtoa_r+0x66e>
 800bd2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bd30:	4656      	mov	r6, sl
 800bd32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd36:	4620      	mov	r0, r4
 800bd38:	4629      	mov	r1, r5
 800bd3a:	f7f4 fdaf 	bl	800089c <__aeabi_ddiv>
 800bd3e:	f7f4 ff33 	bl	8000ba8 <__aeabi_d2iz>
 800bd42:	4680      	mov	r8, r0
 800bd44:	f7f4 fc16 	bl	8000574 <__aeabi_i2d>
 800bd48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd4c:	f7f4 fc7c 	bl	8000648 <__aeabi_dmul>
 800bd50:	4602      	mov	r2, r0
 800bd52:	460b      	mov	r3, r1
 800bd54:	4620      	mov	r0, r4
 800bd56:	4629      	mov	r1, r5
 800bd58:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bd5c:	f7f4 fabc 	bl	80002d8 <__aeabi_dsub>
 800bd60:	f806 4b01 	strb.w	r4, [r6], #1
 800bd64:	9d07      	ldr	r5, [sp, #28]
 800bd66:	eba6 040a 	sub.w	r4, r6, sl
 800bd6a:	42a5      	cmp	r5, r4
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	460b      	mov	r3, r1
 800bd70:	f040 8117 	bne.w	800bfa2 <_dtoa_r+0x6e2>
 800bd74:	f7f4 fab2 	bl	80002dc <__adddf3>
 800bd78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	460d      	mov	r5, r1
 800bd80:	f7f4 fef2 	bl	8000b68 <__aeabi_dcmpgt>
 800bd84:	2800      	cmp	r0, #0
 800bd86:	f040 80f9 	bne.w	800bf7c <_dtoa_r+0x6bc>
 800bd8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd8e:	4620      	mov	r0, r4
 800bd90:	4629      	mov	r1, r5
 800bd92:	f7f4 fec1 	bl	8000b18 <__aeabi_dcmpeq>
 800bd96:	b118      	cbz	r0, 800bda0 <_dtoa_r+0x4e0>
 800bd98:	f018 0f01 	tst.w	r8, #1
 800bd9c:	f040 80ee 	bne.w	800bf7c <_dtoa_r+0x6bc>
 800bda0:	4649      	mov	r1, r9
 800bda2:	4658      	mov	r0, fp
 800bda4:	f000 fc90 	bl	800c6c8 <_Bfree>
 800bda8:	2300      	movs	r3, #0
 800bdaa:	7033      	strb	r3, [r6, #0]
 800bdac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bdae:	3701      	adds	r7, #1
 800bdb0:	601f      	str	r7, [r3, #0]
 800bdb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f000 831d 	beq.w	800c3f4 <_dtoa_r+0xb34>
 800bdba:	601e      	str	r6, [r3, #0]
 800bdbc:	e31a      	b.n	800c3f4 <_dtoa_r+0xb34>
 800bdbe:	07e2      	lsls	r2, r4, #31
 800bdc0:	d505      	bpl.n	800bdce <_dtoa_r+0x50e>
 800bdc2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bdc6:	f7f4 fc3f 	bl	8000648 <__aeabi_dmul>
 800bdca:	3601      	adds	r6, #1
 800bdcc:	2301      	movs	r3, #1
 800bdce:	1064      	asrs	r4, r4, #1
 800bdd0:	3508      	adds	r5, #8
 800bdd2:	e73f      	b.n	800bc54 <_dtoa_r+0x394>
 800bdd4:	2602      	movs	r6, #2
 800bdd6:	e742      	b.n	800bc5e <_dtoa_r+0x39e>
 800bdd8:	9c07      	ldr	r4, [sp, #28]
 800bdda:	9704      	str	r7, [sp, #16]
 800bddc:	e761      	b.n	800bca2 <_dtoa_r+0x3e2>
 800bdde:	4b27      	ldr	r3, [pc, #156]	@ (800be7c <_dtoa_r+0x5bc>)
 800bde0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bde2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bde6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdea:	4454      	add	r4, sl
 800bdec:	2900      	cmp	r1, #0
 800bdee:	d053      	beq.n	800be98 <_dtoa_r+0x5d8>
 800bdf0:	4928      	ldr	r1, [pc, #160]	@ (800be94 <_dtoa_r+0x5d4>)
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	f7f4 fd52 	bl	800089c <__aeabi_ddiv>
 800bdf8:	4633      	mov	r3, r6
 800bdfa:	462a      	mov	r2, r5
 800bdfc:	f7f4 fa6c 	bl	80002d8 <__aeabi_dsub>
 800be00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be04:	4656      	mov	r6, sl
 800be06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be0a:	f7f4 fecd 	bl	8000ba8 <__aeabi_d2iz>
 800be0e:	4605      	mov	r5, r0
 800be10:	f7f4 fbb0 	bl	8000574 <__aeabi_i2d>
 800be14:	4602      	mov	r2, r0
 800be16:	460b      	mov	r3, r1
 800be18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be1c:	f7f4 fa5c 	bl	80002d8 <__aeabi_dsub>
 800be20:	3530      	adds	r5, #48	@ 0x30
 800be22:	4602      	mov	r2, r0
 800be24:	460b      	mov	r3, r1
 800be26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be2a:	f806 5b01 	strb.w	r5, [r6], #1
 800be2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be32:	f7f4 fe7b 	bl	8000b2c <__aeabi_dcmplt>
 800be36:	2800      	cmp	r0, #0
 800be38:	d171      	bne.n	800bf1e <_dtoa_r+0x65e>
 800be3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be3e:	4911      	ldr	r1, [pc, #68]	@ (800be84 <_dtoa_r+0x5c4>)
 800be40:	2000      	movs	r0, #0
 800be42:	f7f4 fa49 	bl	80002d8 <__aeabi_dsub>
 800be46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be4a:	f7f4 fe6f 	bl	8000b2c <__aeabi_dcmplt>
 800be4e:	2800      	cmp	r0, #0
 800be50:	f040 8095 	bne.w	800bf7e <_dtoa_r+0x6be>
 800be54:	42a6      	cmp	r6, r4
 800be56:	f43f af50 	beq.w	800bcfa <_dtoa_r+0x43a>
 800be5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be5e:	4b0a      	ldr	r3, [pc, #40]	@ (800be88 <_dtoa_r+0x5c8>)
 800be60:	2200      	movs	r2, #0
 800be62:	f7f4 fbf1 	bl	8000648 <__aeabi_dmul>
 800be66:	4b08      	ldr	r3, [pc, #32]	@ (800be88 <_dtoa_r+0x5c8>)
 800be68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be6c:	2200      	movs	r2, #0
 800be6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be72:	f7f4 fbe9 	bl	8000648 <__aeabi_dmul>
 800be76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be7a:	e7c4      	b.n	800be06 <_dtoa_r+0x546>
 800be7c:	0800eff0 	.word	0x0800eff0
 800be80:	0800efc8 	.word	0x0800efc8
 800be84:	3ff00000 	.word	0x3ff00000
 800be88:	40240000 	.word	0x40240000
 800be8c:	401c0000 	.word	0x401c0000
 800be90:	40140000 	.word	0x40140000
 800be94:	3fe00000 	.word	0x3fe00000
 800be98:	4631      	mov	r1, r6
 800be9a:	4628      	mov	r0, r5
 800be9c:	f7f4 fbd4 	bl	8000648 <__aeabi_dmul>
 800bea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bea4:	9415      	str	r4, [sp, #84]	@ 0x54
 800bea6:	4656      	mov	r6, sl
 800bea8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beac:	f7f4 fe7c 	bl	8000ba8 <__aeabi_d2iz>
 800beb0:	4605      	mov	r5, r0
 800beb2:	f7f4 fb5f 	bl	8000574 <__aeabi_i2d>
 800beb6:	4602      	mov	r2, r0
 800beb8:	460b      	mov	r3, r1
 800beba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bebe:	f7f4 fa0b 	bl	80002d8 <__aeabi_dsub>
 800bec2:	3530      	adds	r5, #48	@ 0x30
 800bec4:	f806 5b01 	strb.w	r5, [r6], #1
 800bec8:	4602      	mov	r2, r0
 800beca:	460b      	mov	r3, r1
 800becc:	42a6      	cmp	r6, r4
 800bece:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bed2:	f04f 0200 	mov.w	r2, #0
 800bed6:	d124      	bne.n	800bf22 <_dtoa_r+0x662>
 800bed8:	4bac      	ldr	r3, [pc, #688]	@ (800c18c <_dtoa_r+0x8cc>)
 800beda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bede:	f7f4 f9fd 	bl	80002dc <__adddf3>
 800bee2:	4602      	mov	r2, r0
 800bee4:	460b      	mov	r3, r1
 800bee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beea:	f7f4 fe3d 	bl	8000b68 <__aeabi_dcmpgt>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d145      	bne.n	800bf7e <_dtoa_r+0x6be>
 800bef2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bef6:	49a5      	ldr	r1, [pc, #660]	@ (800c18c <_dtoa_r+0x8cc>)
 800bef8:	2000      	movs	r0, #0
 800befa:	f7f4 f9ed 	bl	80002d8 <__aeabi_dsub>
 800befe:	4602      	mov	r2, r0
 800bf00:	460b      	mov	r3, r1
 800bf02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf06:	f7f4 fe11 	bl	8000b2c <__aeabi_dcmplt>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	f43f aef5 	beq.w	800bcfa <_dtoa_r+0x43a>
 800bf10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bf12:	1e73      	subs	r3, r6, #1
 800bf14:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf1a:	2b30      	cmp	r3, #48	@ 0x30
 800bf1c:	d0f8      	beq.n	800bf10 <_dtoa_r+0x650>
 800bf1e:	9f04      	ldr	r7, [sp, #16]
 800bf20:	e73e      	b.n	800bda0 <_dtoa_r+0x4e0>
 800bf22:	4b9b      	ldr	r3, [pc, #620]	@ (800c190 <_dtoa_r+0x8d0>)
 800bf24:	f7f4 fb90 	bl	8000648 <__aeabi_dmul>
 800bf28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf2c:	e7bc      	b.n	800bea8 <_dtoa_r+0x5e8>
 800bf2e:	d10c      	bne.n	800bf4a <_dtoa_r+0x68a>
 800bf30:	4b98      	ldr	r3, [pc, #608]	@ (800c194 <_dtoa_r+0x8d4>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf38:	f7f4 fb86 	bl	8000648 <__aeabi_dmul>
 800bf3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf40:	f7f4 fe08 	bl	8000b54 <__aeabi_dcmpge>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	f000 8157 	beq.w	800c1f8 <_dtoa_r+0x938>
 800bf4a:	2400      	movs	r4, #0
 800bf4c:	4625      	mov	r5, r4
 800bf4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf50:	43db      	mvns	r3, r3
 800bf52:	9304      	str	r3, [sp, #16]
 800bf54:	4656      	mov	r6, sl
 800bf56:	2700      	movs	r7, #0
 800bf58:	4621      	mov	r1, r4
 800bf5a:	4658      	mov	r0, fp
 800bf5c:	f000 fbb4 	bl	800c6c8 <_Bfree>
 800bf60:	2d00      	cmp	r5, #0
 800bf62:	d0dc      	beq.n	800bf1e <_dtoa_r+0x65e>
 800bf64:	b12f      	cbz	r7, 800bf72 <_dtoa_r+0x6b2>
 800bf66:	42af      	cmp	r7, r5
 800bf68:	d003      	beq.n	800bf72 <_dtoa_r+0x6b2>
 800bf6a:	4639      	mov	r1, r7
 800bf6c:	4658      	mov	r0, fp
 800bf6e:	f000 fbab 	bl	800c6c8 <_Bfree>
 800bf72:	4629      	mov	r1, r5
 800bf74:	4658      	mov	r0, fp
 800bf76:	f000 fba7 	bl	800c6c8 <_Bfree>
 800bf7a:	e7d0      	b.n	800bf1e <_dtoa_r+0x65e>
 800bf7c:	9704      	str	r7, [sp, #16]
 800bf7e:	4633      	mov	r3, r6
 800bf80:	461e      	mov	r6, r3
 800bf82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf86:	2a39      	cmp	r2, #57	@ 0x39
 800bf88:	d107      	bne.n	800bf9a <_dtoa_r+0x6da>
 800bf8a:	459a      	cmp	sl, r3
 800bf8c:	d1f8      	bne.n	800bf80 <_dtoa_r+0x6c0>
 800bf8e:	9a04      	ldr	r2, [sp, #16]
 800bf90:	3201      	adds	r2, #1
 800bf92:	9204      	str	r2, [sp, #16]
 800bf94:	2230      	movs	r2, #48	@ 0x30
 800bf96:	f88a 2000 	strb.w	r2, [sl]
 800bf9a:	781a      	ldrb	r2, [r3, #0]
 800bf9c:	3201      	adds	r2, #1
 800bf9e:	701a      	strb	r2, [r3, #0]
 800bfa0:	e7bd      	b.n	800bf1e <_dtoa_r+0x65e>
 800bfa2:	4b7b      	ldr	r3, [pc, #492]	@ (800c190 <_dtoa_r+0x8d0>)
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f7f4 fb4f 	bl	8000648 <__aeabi_dmul>
 800bfaa:	2200      	movs	r2, #0
 800bfac:	2300      	movs	r3, #0
 800bfae:	4604      	mov	r4, r0
 800bfb0:	460d      	mov	r5, r1
 800bfb2:	f7f4 fdb1 	bl	8000b18 <__aeabi_dcmpeq>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	f43f aebb 	beq.w	800bd32 <_dtoa_r+0x472>
 800bfbc:	e6f0      	b.n	800bda0 <_dtoa_r+0x4e0>
 800bfbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bfc0:	2a00      	cmp	r2, #0
 800bfc2:	f000 80db 	beq.w	800c17c <_dtoa_r+0x8bc>
 800bfc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfc8:	2a01      	cmp	r2, #1
 800bfca:	f300 80bf 	bgt.w	800c14c <_dtoa_r+0x88c>
 800bfce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bfd0:	2a00      	cmp	r2, #0
 800bfd2:	f000 80b7 	beq.w	800c144 <_dtoa_r+0x884>
 800bfd6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bfda:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bfdc:	4646      	mov	r6, r8
 800bfde:	9a08      	ldr	r2, [sp, #32]
 800bfe0:	2101      	movs	r1, #1
 800bfe2:	441a      	add	r2, r3
 800bfe4:	4658      	mov	r0, fp
 800bfe6:	4498      	add	r8, r3
 800bfe8:	9208      	str	r2, [sp, #32]
 800bfea:	f000 fc6b 	bl	800c8c4 <__i2b>
 800bfee:	4605      	mov	r5, r0
 800bff0:	b15e      	cbz	r6, 800c00a <_dtoa_r+0x74a>
 800bff2:	9b08      	ldr	r3, [sp, #32]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	dd08      	ble.n	800c00a <_dtoa_r+0x74a>
 800bff8:	42b3      	cmp	r3, r6
 800bffa:	9a08      	ldr	r2, [sp, #32]
 800bffc:	bfa8      	it	ge
 800bffe:	4633      	movge	r3, r6
 800c000:	eba8 0803 	sub.w	r8, r8, r3
 800c004:	1af6      	subs	r6, r6, r3
 800c006:	1ad3      	subs	r3, r2, r3
 800c008:	9308      	str	r3, [sp, #32]
 800c00a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c00c:	b1f3      	cbz	r3, 800c04c <_dtoa_r+0x78c>
 800c00e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 80b7 	beq.w	800c184 <_dtoa_r+0x8c4>
 800c016:	b18c      	cbz	r4, 800c03c <_dtoa_r+0x77c>
 800c018:	4629      	mov	r1, r5
 800c01a:	4622      	mov	r2, r4
 800c01c:	4658      	mov	r0, fp
 800c01e:	f000 fd11 	bl	800ca44 <__pow5mult>
 800c022:	464a      	mov	r2, r9
 800c024:	4601      	mov	r1, r0
 800c026:	4605      	mov	r5, r0
 800c028:	4658      	mov	r0, fp
 800c02a:	f000 fc61 	bl	800c8f0 <__multiply>
 800c02e:	4649      	mov	r1, r9
 800c030:	9004      	str	r0, [sp, #16]
 800c032:	4658      	mov	r0, fp
 800c034:	f000 fb48 	bl	800c6c8 <_Bfree>
 800c038:	9b04      	ldr	r3, [sp, #16]
 800c03a:	4699      	mov	r9, r3
 800c03c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c03e:	1b1a      	subs	r2, r3, r4
 800c040:	d004      	beq.n	800c04c <_dtoa_r+0x78c>
 800c042:	4649      	mov	r1, r9
 800c044:	4658      	mov	r0, fp
 800c046:	f000 fcfd 	bl	800ca44 <__pow5mult>
 800c04a:	4681      	mov	r9, r0
 800c04c:	2101      	movs	r1, #1
 800c04e:	4658      	mov	r0, fp
 800c050:	f000 fc38 	bl	800c8c4 <__i2b>
 800c054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c056:	4604      	mov	r4, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f000 81cf 	beq.w	800c3fc <_dtoa_r+0xb3c>
 800c05e:	461a      	mov	r2, r3
 800c060:	4601      	mov	r1, r0
 800c062:	4658      	mov	r0, fp
 800c064:	f000 fcee 	bl	800ca44 <__pow5mult>
 800c068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	4604      	mov	r4, r0
 800c06e:	f300 8095 	bgt.w	800c19c <_dtoa_r+0x8dc>
 800c072:	9b02      	ldr	r3, [sp, #8]
 800c074:	2b00      	cmp	r3, #0
 800c076:	f040 8087 	bne.w	800c188 <_dtoa_r+0x8c8>
 800c07a:	9b03      	ldr	r3, [sp, #12]
 800c07c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c080:	2b00      	cmp	r3, #0
 800c082:	f040 8089 	bne.w	800c198 <_dtoa_r+0x8d8>
 800c086:	9b03      	ldr	r3, [sp, #12]
 800c088:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c08c:	0d1b      	lsrs	r3, r3, #20
 800c08e:	051b      	lsls	r3, r3, #20
 800c090:	b12b      	cbz	r3, 800c09e <_dtoa_r+0x7de>
 800c092:	9b08      	ldr	r3, [sp, #32]
 800c094:	3301      	adds	r3, #1
 800c096:	9308      	str	r3, [sp, #32]
 800c098:	f108 0801 	add.w	r8, r8, #1
 800c09c:	2301      	movs	r3, #1
 800c09e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f000 81b0 	beq.w	800c408 <_dtoa_r+0xb48>
 800c0a8:	6923      	ldr	r3, [r4, #16]
 800c0aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0ae:	6918      	ldr	r0, [r3, #16]
 800c0b0:	f000 fbbc 	bl	800c82c <__hi0bits>
 800c0b4:	f1c0 0020 	rsb	r0, r0, #32
 800c0b8:	9b08      	ldr	r3, [sp, #32]
 800c0ba:	4418      	add	r0, r3
 800c0bc:	f010 001f 	ands.w	r0, r0, #31
 800c0c0:	d077      	beq.n	800c1b2 <_dtoa_r+0x8f2>
 800c0c2:	f1c0 0320 	rsb	r3, r0, #32
 800c0c6:	2b04      	cmp	r3, #4
 800c0c8:	dd6b      	ble.n	800c1a2 <_dtoa_r+0x8e2>
 800c0ca:	9b08      	ldr	r3, [sp, #32]
 800c0cc:	f1c0 001c 	rsb	r0, r0, #28
 800c0d0:	4403      	add	r3, r0
 800c0d2:	4480      	add	r8, r0
 800c0d4:	4406      	add	r6, r0
 800c0d6:	9308      	str	r3, [sp, #32]
 800c0d8:	f1b8 0f00 	cmp.w	r8, #0
 800c0dc:	dd05      	ble.n	800c0ea <_dtoa_r+0x82a>
 800c0de:	4649      	mov	r1, r9
 800c0e0:	4642      	mov	r2, r8
 800c0e2:	4658      	mov	r0, fp
 800c0e4:	f000 fd08 	bl	800caf8 <__lshift>
 800c0e8:	4681      	mov	r9, r0
 800c0ea:	9b08      	ldr	r3, [sp, #32]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	dd05      	ble.n	800c0fc <_dtoa_r+0x83c>
 800c0f0:	4621      	mov	r1, r4
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	4658      	mov	r0, fp
 800c0f6:	f000 fcff 	bl	800caf8 <__lshift>
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d059      	beq.n	800c1b6 <_dtoa_r+0x8f6>
 800c102:	4621      	mov	r1, r4
 800c104:	4648      	mov	r0, r9
 800c106:	f000 fd63 	bl	800cbd0 <__mcmp>
 800c10a:	2800      	cmp	r0, #0
 800c10c:	da53      	bge.n	800c1b6 <_dtoa_r+0x8f6>
 800c10e:	1e7b      	subs	r3, r7, #1
 800c110:	9304      	str	r3, [sp, #16]
 800c112:	4649      	mov	r1, r9
 800c114:	2300      	movs	r3, #0
 800c116:	220a      	movs	r2, #10
 800c118:	4658      	mov	r0, fp
 800c11a:	f000 faf7 	bl	800c70c <__multadd>
 800c11e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c120:	4681      	mov	r9, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	f000 8172 	beq.w	800c40c <_dtoa_r+0xb4c>
 800c128:	2300      	movs	r3, #0
 800c12a:	4629      	mov	r1, r5
 800c12c:	220a      	movs	r2, #10
 800c12e:	4658      	mov	r0, fp
 800c130:	f000 faec 	bl	800c70c <__multadd>
 800c134:	9b00      	ldr	r3, [sp, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	4605      	mov	r5, r0
 800c13a:	dc67      	bgt.n	800c20c <_dtoa_r+0x94c>
 800c13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c13e:	2b02      	cmp	r3, #2
 800c140:	dc41      	bgt.n	800c1c6 <_dtoa_r+0x906>
 800c142:	e063      	b.n	800c20c <_dtoa_r+0x94c>
 800c144:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c146:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c14a:	e746      	b.n	800bfda <_dtoa_r+0x71a>
 800c14c:	9b07      	ldr	r3, [sp, #28]
 800c14e:	1e5c      	subs	r4, r3, #1
 800c150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c152:	42a3      	cmp	r3, r4
 800c154:	bfbf      	itttt	lt
 800c156:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c158:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c15a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c15c:	1ae3      	sublt	r3, r4, r3
 800c15e:	bfb4      	ite	lt
 800c160:	18d2      	addlt	r2, r2, r3
 800c162:	1b1c      	subge	r4, r3, r4
 800c164:	9b07      	ldr	r3, [sp, #28]
 800c166:	bfbc      	itt	lt
 800c168:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c16a:	2400      	movlt	r4, #0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	bfb5      	itete	lt
 800c170:	eba8 0603 	sublt.w	r6, r8, r3
 800c174:	9b07      	ldrge	r3, [sp, #28]
 800c176:	2300      	movlt	r3, #0
 800c178:	4646      	movge	r6, r8
 800c17a:	e730      	b.n	800bfde <_dtoa_r+0x71e>
 800c17c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c17e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c180:	4646      	mov	r6, r8
 800c182:	e735      	b.n	800bff0 <_dtoa_r+0x730>
 800c184:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c186:	e75c      	b.n	800c042 <_dtoa_r+0x782>
 800c188:	2300      	movs	r3, #0
 800c18a:	e788      	b.n	800c09e <_dtoa_r+0x7de>
 800c18c:	3fe00000 	.word	0x3fe00000
 800c190:	40240000 	.word	0x40240000
 800c194:	40140000 	.word	0x40140000
 800c198:	9b02      	ldr	r3, [sp, #8]
 800c19a:	e780      	b.n	800c09e <_dtoa_r+0x7de>
 800c19c:	2300      	movs	r3, #0
 800c19e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1a0:	e782      	b.n	800c0a8 <_dtoa_r+0x7e8>
 800c1a2:	d099      	beq.n	800c0d8 <_dtoa_r+0x818>
 800c1a4:	9a08      	ldr	r2, [sp, #32]
 800c1a6:	331c      	adds	r3, #28
 800c1a8:	441a      	add	r2, r3
 800c1aa:	4498      	add	r8, r3
 800c1ac:	441e      	add	r6, r3
 800c1ae:	9208      	str	r2, [sp, #32]
 800c1b0:	e792      	b.n	800c0d8 <_dtoa_r+0x818>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	e7f6      	b.n	800c1a4 <_dtoa_r+0x8e4>
 800c1b6:	9b07      	ldr	r3, [sp, #28]
 800c1b8:	9704      	str	r7, [sp, #16]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	dc20      	bgt.n	800c200 <_dtoa_r+0x940>
 800c1be:	9300      	str	r3, [sp, #0]
 800c1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1c2:	2b02      	cmp	r3, #2
 800c1c4:	dd1e      	ble.n	800c204 <_dtoa_r+0x944>
 800c1c6:	9b00      	ldr	r3, [sp, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	f47f aec0 	bne.w	800bf4e <_dtoa_r+0x68e>
 800c1ce:	4621      	mov	r1, r4
 800c1d0:	2205      	movs	r2, #5
 800c1d2:	4658      	mov	r0, fp
 800c1d4:	f000 fa9a 	bl	800c70c <__multadd>
 800c1d8:	4601      	mov	r1, r0
 800c1da:	4604      	mov	r4, r0
 800c1dc:	4648      	mov	r0, r9
 800c1de:	f000 fcf7 	bl	800cbd0 <__mcmp>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	f77f aeb3 	ble.w	800bf4e <_dtoa_r+0x68e>
 800c1e8:	4656      	mov	r6, sl
 800c1ea:	2331      	movs	r3, #49	@ 0x31
 800c1ec:	f806 3b01 	strb.w	r3, [r6], #1
 800c1f0:	9b04      	ldr	r3, [sp, #16]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	9304      	str	r3, [sp, #16]
 800c1f6:	e6ae      	b.n	800bf56 <_dtoa_r+0x696>
 800c1f8:	9c07      	ldr	r4, [sp, #28]
 800c1fa:	9704      	str	r7, [sp, #16]
 800c1fc:	4625      	mov	r5, r4
 800c1fe:	e7f3      	b.n	800c1e8 <_dtoa_r+0x928>
 800c200:	9b07      	ldr	r3, [sp, #28]
 800c202:	9300      	str	r3, [sp, #0]
 800c204:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c206:	2b00      	cmp	r3, #0
 800c208:	f000 8104 	beq.w	800c414 <_dtoa_r+0xb54>
 800c20c:	2e00      	cmp	r6, #0
 800c20e:	dd05      	ble.n	800c21c <_dtoa_r+0x95c>
 800c210:	4629      	mov	r1, r5
 800c212:	4632      	mov	r2, r6
 800c214:	4658      	mov	r0, fp
 800c216:	f000 fc6f 	bl	800caf8 <__lshift>
 800c21a:	4605      	mov	r5, r0
 800c21c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d05a      	beq.n	800c2d8 <_dtoa_r+0xa18>
 800c222:	6869      	ldr	r1, [r5, #4]
 800c224:	4658      	mov	r0, fp
 800c226:	f000 fa0f 	bl	800c648 <_Balloc>
 800c22a:	4606      	mov	r6, r0
 800c22c:	b928      	cbnz	r0, 800c23a <_dtoa_r+0x97a>
 800c22e:	4b84      	ldr	r3, [pc, #528]	@ (800c440 <_dtoa_r+0xb80>)
 800c230:	4602      	mov	r2, r0
 800c232:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c236:	f7ff bb5a 	b.w	800b8ee <_dtoa_r+0x2e>
 800c23a:	692a      	ldr	r2, [r5, #16]
 800c23c:	3202      	adds	r2, #2
 800c23e:	0092      	lsls	r2, r2, #2
 800c240:	f105 010c 	add.w	r1, r5, #12
 800c244:	300c      	adds	r0, #12
 800c246:	f7ff fa9e 	bl	800b786 <memcpy>
 800c24a:	2201      	movs	r2, #1
 800c24c:	4631      	mov	r1, r6
 800c24e:	4658      	mov	r0, fp
 800c250:	f000 fc52 	bl	800caf8 <__lshift>
 800c254:	f10a 0301 	add.w	r3, sl, #1
 800c258:	9307      	str	r3, [sp, #28]
 800c25a:	9b00      	ldr	r3, [sp, #0]
 800c25c:	4453      	add	r3, sl
 800c25e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c260:	9b02      	ldr	r3, [sp, #8]
 800c262:	f003 0301 	and.w	r3, r3, #1
 800c266:	462f      	mov	r7, r5
 800c268:	930a      	str	r3, [sp, #40]	@ 0x28
 800c26a:	4605      	mov	r5, r0
 800c26c:	9b07      	ldr	r3, [sp, #28]
 800c26e:	4621      	mov	r1, r4
 800c270:	3b01      	subs	r3, #1
 800c272:	4648      	mov	r0, r9
 800c274:	9300      	str	r3, [sp, #0]
 800c276:	f7ff fa9b 	bl	800b7b0 <quorem>
 800c27a:	4639      	mov	r1, r7
 800c27c:	9002      	str	r0, [sp, #8]
 800c27e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c282:	4648      	mov	r0, r9
 800c284:	f000 fca4 	bl	800cbd0 <__mcmp>
 800c288:	462a      	mov	r2, r5
 800c28a:	9008      	str	r0, [sp, #32]
 800c28c:	4621      	mov	r1, r4
 800c28e:	4658      	mov	r0, fp
 800c290:	f000 fcba 	bl	800cc08 <__mdiff>
 800c294:	68c2      	ldr	r2, [r0, #12]
 800c296:	4606      	mov	r6, r0
 800c298:	bb02      	cbnz	r2, 800c2dc <_dtoa_r+0xa1c>
 800c29a:	4601      	mov	r1, r0
 800c29c:	4648      	mov	r0, r9
 800c29e:	f000 fc97 	bl	800cbd0 <__mcmp>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	4631      	mov	r1, r6
 800c2a6:	4658      	mov	r0, fp
 800c2a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2aa:	f000 fa0d 	bl	800c6c8 <_Bfree>
 800c2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2b2:	9e07      	ldr	r6, [sp, #28]
 800c2b4:	ea43 0102 	orr.w	r1, r3, r2
 800c2b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2ba:	4319      	orrs	r1, r3
 800c2bc:	d110      	bne.n	800c2e0 <_dtoa_r+0xa20>
 800c2be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c2c2:	d029      	beq.n	800c318 <_dtoa_r+0xa58>
 800c2c4:	9b08      	ldr	r3, [sp, #32]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	dd02      	ble.n	800c2d0 <_dtoa_r+0xa10>
 800c2ca:	9b02      	ldr	r3, [sp, #8]
 800c2cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c2d0:	9b00      	ldr	r3, [sp, #0]
 800c2d2:	f883 8000 	strb.w	r8, [r3]
 800c2d6:	e63f      	b.n	800bf58 <_dtoa_r+0x698>
 800c2d8:	4628      	mov	r0, r5
 800c2da:	e7bb      	b.n	800c254 <_dtoa_r+0x994>
 800c2dc:	2201      	movs	r2, #1
 800c2de:	e7e1      	b.n	800c2a4 <_dtoa_r+0x9e4>
 800c2e0:	9b08      	ldr	r3, [sp, #32]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	db04      	blt.n	800c2f0 <_dtoa_r+0xa30>
 800c2e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c2e8:	430b      	orrs	r3, r1
 800c2ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c2ec:	430b      	orrs	r3, r1
 800c2ee:	d120      	bne.n	800c332 <_dtoa_r+0xa72>
 800c2f0:	2a00      	cmp	r2, #0
 800c2f2:	dded      	ble.n	800c2d0 <_dtoa_r+0xa10>
 800c2f4:	4649      	mov	r1, r9
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	4658      	mov	r0, fp
 800c2fa:	f000 fbfd 	bl	800caf8 <__lshift>
 800c2fe:	4621      	mov	r1, r4
 800c300:	4681      	mov	r9, r0
 800c302:	f000 fc65 	bl	800cbd0 <__mcmp>
 800c306:	2800      	cmp	r0, #0
 800c308:	dc03      	bgt.n	800c312 <_dtoa_r+0xa52>
 800c30a:	d1e1      	bne.n	800c2d0 <_dtoa_r+0xa10>
 800c30c:	f018 0f01 	tst.w	r8, #1
 800c310:	d0de      	beq.n	800c2d0 <_dtoa_r+0xa10>
 800c312:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c316:	d1d8      	bne.n	800c2ca <_dtoa_r+0xa0a>
 800c318:	9a00      	ldr	r2, [sp, #0]
 800c31a:	2339      	movs	r3, #57	@ 0x39
 800c31c:	7013      	strb	r3, [r2, #0]
 800c31e:	4633      	mov	r3, r6
 800c320:	461e      	mov	r6, r3
 800c322:	3b01      	subs	r3, #1
 800c324:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c328:	2a39      	cmp	r2, #57	@ 0x39
 800c32a:	d052      	beq.n	800c3d2 <_dtoa_r+0xb12>
 800c32c:	3201      	adds	r2, #1
 800c32e:	701a      	strb	r2, [r3, #0]
 800c330:	e612      	b.n	800bf58 <_dtoa_r+0x698>
 800c332:	2a00      	cmp	r2, #0
 800c334:	dd07      	ble.n	800c346 <_dtoa_r+0xa86>
 800c336:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c33a:	d0ed      	beq.n	800c318 <_dtoa_r+0xa58>
 800c33c:	9a00      	ldr	r2, [sp, #0]
 800c33e:	f108 0301 	add.w	r3, r8, #1
 800c342:	7013      	strb	r3, [r2, #0]
 800c344:	e608      	b.n	800bf58 <_dtoa_r+0x698>
 800c346:	9b07      	ldr	r3, [sp, #28]
 800c348:	9a07      	ldr	r2, [sp, #28]
 800c34a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c34e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c350:	4293      	cmp	r3, r2
 800c352:	d028      	beq.n	800c3a6 <_dtoa_r+0xae6>
 800c354:	4649      	mov	r1, r9
 800c356:	2300      	movs	r3, #0
 800c358:	220a      	movs	r2, #10
 800c35a:	4658      	mov	r0, fp
 800c35c:	f000 f9d6 	bl	800c70c <__multadd>
 800c360:	42af      	cmp	r7, r5
 800c362:	4681      	mov	r9, r0
 800c364:	f04f 0300 	mov.w	r3, #0
 800c368:	f04f 020a 	mov.w	r2, #10
 800c36c:	4639      	mov	r1, r7
 800c36e:	4658      	mov	r0, fp
 800c370:	d107      	bne.n	800c382 <_dtoa_r+0xac2>
 800c372:	f000 f9cb 	bl	800c70c <__multadd>
 800c376:	4607      	mov	r7, r0
 800c378:	4605      	mov	r5, r0
 800c37a:	9b07      	ldr	r3, [sp, #28]
 800c37c:	3301      	adds	r3, #1
 800c37e:	9307      	str	r3, [sp, #28]
 800c380:	e774      	b.n	800c26c <_dtoa_r+0x9ac>
 800c382:	f000 f9c3 	bl	800c70c <__multadd>
 800c386:	4629      	mov	r1, r5
 800c388:	4607      	mov	r7, r0
 800c38a:	2300      	movs	r3, #0
 800c38c:	220a      	movs	r2, #10
 800c38e:	4658      	mov	r0, fp
 800c390:	f000 f9bc 	bl	800c70c <__multadd>
 800c394:	4605      	mov	r5, r0
 800c396:	e7f0      	b.n	800c37a <_dtoa_r+0xaba>
 800c398:	9b00      	ldr	r3, [sp, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	bfcc      	ite	gt
 800c39e:	461e      	movgt	r6, r3
 800c3a0:	2601      	movle	r6, #1
 800c3a2:	4456      	add	r6, sl
 800c3a4:	2700      	movs	r7, #0
 800c3a6:	4649      	mov	r1, r9
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	4658      	mov	r0, fp
 800c3ac:	f000 fba4 	bl	800caf8 <__lshift>
 800c3b0:	4621      	mov	r1, r4
 800c3b2:	4681      	mov	r9, r0
 800c3b4:	f000 fc0c 	bl	800cbd0 <__mcmp>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	dcb0      	bgt.n	800c31e <_dtoa_r+0xa5e>
 800c3bc:	d102      	bne.n	800c3c4 <_dtoa_r+0xb04>
 800c3be:	f018 0f01 	tst.w	r8, #1
 800c3c2:	d1ac      	bne.n	800c31e <_dtoa_r+0xa5e>
 800c3c4:	4633      	mov	r3, r6
 800c3c6:	461e      	mov	r6, r3
 800c3c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3cc:	2a30      	cmp	r2, #48	@ 0x30
 800c3ce:	d0fa      	beq.n	800c3c6 <_dtoa_r+0xb06>
 800c3d0:	e5c2      	b.n	800bf58 <_dtoa_r+0x698>
 800c3d2:	459a      	cmp	sl, r3
 800c3d4:	d1a4      	bne.n	800c320 <_dtoa_r+0xa60>
 800c3d6:	9b04      	ldr	r3, [sp, #16]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	9304      	str	r3, [sp, #16]
 800c3dc:	2331      	movs	r3, #49	@ 0x31
 800c3de:	f88a 3000 	strb.w	r3, [sl]
 800c3e2:	e5b9      	b.n	800bf58 <_dtoa_r+0x698>
 800c3e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c3e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c444 <_dtoa_r+0xb84>
 800c3ea:	b11b      	cbz	r3, 800c3f4 <_dtoa_r+0xb34>
 800c3ec:	f10a 0308 	add.w	r3, sl, #8
 800c3f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c3f2:	6013      	str	r3, [r2, #0]
 800c3f4:	4650      	mov	r0, sl
 800c3f6:	b019      	add	sp, #100	@ 0x64
 800c3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	f77f ae37 	ble.w	800c072 <_dtoa_r+0x7b2>
 800c404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c406:	930a      	str	r3, [sp, #40]	@ 0x28
 800c408:	2001      	movs	r0, #1
 800c40a:	e655      	b.n	800c0b8 <_dtoa_r+0x7f8>
 800c40c:	9b00      	ldr	r3, [sp, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f77f aed6 	ble.w	800c1c0 <_dtoa_r+0x900>
 800c414:	4656      	mov	r6, sl
 800c416:	4621      	mov	r1, r4
 800c418:	4648      	mov	r0, r9
 800c41a:	f7ff f9c9 	bl	800b7b0 <quorem>
 800c41e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c422:	f806 8b01 	strb.w	r8, [r6], #1
 800c426:	9b00      	ldr	r3, [sp, #0]
 800c428:	eba6 020a 	sub.w	r2, r6, sl
 800c42c:	4293      	cmp	r3, r2
 800c42e:	ddb3      	ble.n	800c398 <_dtoa_r+0xad8>
 800c430:	4649      	mov	r1, r9
 800c432:	2300      	movs	r3, #0
 800c434:	220a      	movs	r2, #10
 800c436:	4658      	mov	r0, fp
 800c438:	f000 f968 	bl	800c70c <__multadd>
 800c43c:	4681      	mov	r9, r0
 800c43e:	e7ea      	b.n	800c416 <_dtoa_r+0xb56>
 800c440:	0800ef4c 	.word	0x0800ef4c
 800c444:	0800eed0 	.word	0x0800eed0

0800c448 <_free_r>:
 800c448:	b538      	push	{r3, r4, r5, lr}
 800c44a:	4605      	mov	r5, r0
 800c44c:	2900      	cmp	r1, #0
 800c44e:	d041      	beq.n	800c4d4 <_free_r+0x8c>
 800c450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c454:	1f0c      	subs	r4, r1, #4
 800c456:	2b00      	cmp	r3, #0
 800c458:	bfb8      	it	lt
 800c45a:	18e4      	addlt	r4, r4, r3
 800c45c:	f000 f8e8 	bl	800c630 <__malloc_lock>
 800c460:	4a1d      	ldr	r2, [pc, #116]	@ (800c4d8 <_free_r+0x90>)
 800c462:	6813      	ldr	r3, [r2, #0]
 800c464:	b933      	cbnz	r3, 800c474 <_free_r+0x2c>
 800c466:	6063      	str	r3, [r4, #4]
 800c468:	6014      	str	r4, [r2, #0]
 800c46a:	4628      	mov	r0, r5
 800c46c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c470:	f000 b8e4 	b.w	800c63c <__malloc_unlock>
 800c474:	42a3      	cmp	r3, r4
 800c476:	d908      	bls.n	800c48a <_free_r+0x42>
 800c478:	6820      	ldr	r0, [r4, #0]
 800c47a:	1821      	adds	r1, r4, r0
 800c47c:	428b      	cmp	r3, r1
 800c47e:	bf01      	itttt	eq
 800c480:	6819      	ldreq	r1, [r3, #0]
 800c482:	685b      	ldreq	r3, [r3, #4]
 800c484:	1809      	addeq	r1, r1, r0
 800c486:	6021      	streq	r1, [r4, #0]
 800c488:	e7ed      	b.n	800c466 <_free_r+0x1e>
 800c48a:	461a      	mov	r2, r3
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	b10b      	cbz	r3, 800c494 <_free_r+0x4c>
 800c490:	42a3      	cmp	r3, r4
 800c492:	d9fa      	bls.n	800c48a <_free_r+0x42>
 800c494:	6811      	ldr	r1, [r2, #0]
 800c496:	1850      	adds	r0, r2, r1
 800c498:	42a0      	cmp	r0, r4
 800c49a:	d10b      	bne.n	800c4b4 <_free_r+0x6c>
 800c49c:	6820      	ldr	r0, [r4, #0]
 800c49e:	4401      	add	r1, r0
 800c4a0:	1850      	adds	r0, r2, r1
 800c4a2:	4283      	cmp	r3, r0
 800c4a4:	6011      	str	r1, [r2, #0]
 800c4a6:	d1e0      	bne.n	800c46a <_free_r+0x22>
 800c4a8:	6818      	ldr	r0, [r3, #0]
 800c4aa:	685b      	ldr	r3, [r3, #4]
 800c4ac:	6053      	str	r3, [r2, #4]
 800c4ae:	4408      	add	r0, r1
 800c4b0:	6010      	str	r0, [r2, #0]
 800c4b2:	e7da      	b.n	800c46a <_free_r+0x22>
 800c4b4:	d902      	bls.n	800c4bc <_free_r+0x74>
 800c4b6:	230c      	movs	r3, #12
 800c4b8:	602b      	str	r3, [r5, #0]
 800c4ba:	e7d6      	b.n	800c46a <_free_r+0x22>
 800c4bc:	6820      	ldr	r0, [r4, #0]
 800c4be:	1821      	adds	r1, r4, r0
 800c4c0:	428b      	cmp	r3, r1
 800c4c2:	bf04      	itt	eq
 800c4c4:	6819      	ldreq	r1, [r3, #0]
 800c4c6:	685b      	ldreq	r3, [r3, #4]
 800c4c8:	6063      	str	r3, [r4, #4]
 800c4ca:	bf04      	itt	eq
 800c4cc:	1809      	addeq	r1, r1, r0
 800c4ce:	6021      	streq	r1, [r4, #0]
 800c4d0:	6054      	str	r4, [r2, #4]
 800c4d2:	e7ca      	b.n	800c46a <_free_r+0x22>
 800c4d4:	bd38      	pop	{r3, r4, r5, pc}
 800c4d6:	bf00      	nop
 800c4d8:	20000660 	.word	0x20000660

0800c4dc <malloc>:
 800c4dc:	4b02      	ldr	r3, [pc, #8]	@ (800c4e8 <malloc+0xc>)
 800c4de:	4601      	mov	r1, r0
 800c4e0:	6818      	ldr	r0, [r3, #0]
 800c4e2:	f000 b825 	b.w	800c530 <_malloc_r>
 800c4e6:	bf00      	nop
 800c4e8:	200000b4 	.word	0x200000b4

0800c4ec <sbrk_aligned>:
 800c4ec:	b570      	push	{r4, r5, r6, lr}
 800c4ee:	4e0f      	ldr	r6, [pc, #60]	@ (800c52c <sbrk_aligned+0x40>)
 800c4f0:	460c      	mov	r4, r1
 800c4f2:	6831      	ldr	r1, [r6, #0]
 800c4f4:	4605      	mov	r5, r0
 800c4f6:	b911      	cbnz	r1, 800c4fe <sbrk_aligned+0x12>
 800c4f8:	f001 fe0c 	bl	800e114 <_sbrk_r>
 800c4fc:	6030      	str	r0, [r6, #0]
 800c4fe:	4621      	mov	r1, r4
 800c500:	4628      	mov	r0, r5
 800c502:	f001 fe07 	bl	800e114 <_sbrk_r>
 800c506:	1c43      	adds	r3, r0, #1
 800c508:	d103      	bne.n	800c512 <sbrk_aligned+0x26>
 800c50a:	f04f 34ff 	mov.w	r4, #4294967295
 800c50e:	4620      	mov	r0, r4
 800c510:	bd70      	pop	{r4, r5, r6, pc}
 800c512:	1cc4      	adds	r4, r0, #3
 800c514:	f024 0403 	bic.w	r4, r4, #3
 800c518:	42a0      	cmp	r0, r4
 800c51a:	d0f8      	beq.n	800c50e <sbrk_aligned+0x22>
 800c51c:	1a21      	subs	r1, r4, r0
 800c51e:	4628      	mov	r0, r5
 800c520:	f001 fdf8 	bl	800e114 <_sbrk_r>
 800c524:	3001      	adds	r0, #1
 800c526:	d1f2      	bne.n	800c50e <sbrk_aligned+0x22>
 800c528:	e7ef      	b.n	800c50a <sbrk_aligned+0x1e>
 800c52a:	bf00      	nop
 800c52c:	2000065c 	.word	0x2000065c

0800c530 <_malloc_r>:
 800c530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c534:	1ccd      	adds	r5, r1, #3
 800c536:	f025 0503 	bic.w	r5, r5, #3
 800c53a:	3508      	adds	r5, #8
 800c53c:	2d0c      	cmp	r5, #12
 800c53e:	bf38      	it	cc
 800c540:	250c      	movcc	r5, #12
 800c542:	2d00      	cmp	r5, #0
 800c544:	4606      	mov	r6, r0
 800c546:	db01      	blt.n	800c54c <_malloc_r+0x1c>
 800c548:	42a9      	cmp	r1, r5
 800c54a:	d904      	bls.n	800c556 <_malloc_r+0x26>
 800c54c:	230c      	movs	r3, #12
 800c54e:	6033      	str	r3, [r6, #0]
 800c550:	2000      	movs	r0, #0
 800c552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c556:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c62c <_malloc_r+0xfc>
 800c55a:	f000 f869 	bl	800c630 <__malloc_lock>
 800c55e:	f8d8 3000 	ldr.w	r3, [r8]
 800c562:	461c      	mov	r4, r3
 800c564:	bb44      	cbnz	r4, 800c5b8 <_malloc_r+0x88>
 800c566:	4629      	mov	r1, r5
 800c568:	4630      	mov	r0, r6
 800c56a:	f7ff ffbf 	bl	800c4ec <sbrk_aligned>
 800c56e:	1c43      	adds	r3, r0, #1
 800c570:	4604      	mov	r4, r0
 800c572:	d158      	bne.n	800c626 <_malloc_r+0xf6>
 800c574:	f8d8 4000 	ldr.w	r4, [r8]
 800c578:	4627      	mov	r7, r4
 800c57a:	2f00      	cmp	r7, #0
 800c57c:	d143      	bne.n	800c606 <_malloc_r+0xd6>
 800c57e:	2c00      	cmp	r4, #0
 800c580:	d04b      	beq.n	800c61a <_malloc_r+0xea>
 800c582:	6823      	ldr	r3, [r4, #0]
 800c584:	4639      	mov	r1, r7
 800c586:	4630      	mov	r0, r6
 800c588:	eb04 0903 	add.w	r9, r4, r3
 800c58c:	f001 fdc2 	bl	800e114 <_sbrk_r>
 800c590:	4581      	cmp	r9, r0
 800c592:	d142      	bne.n	800c61a <_malloc_r+0xea>
 800c594:	6821      	ldr	r1, [r4, #0]
 800c596:	1a6d      	subs	r5, r5, r1
 800c598:	4629      	mov	r1, r5
 800c59a:	4630      	mov	r0, r6
 800c59c:	f7ff ffa6 	bl	800c4ec <sbrk_aligned>
 800c5a0:	3001      	adds	r0, #1
 800c5a2:	d03a      	beq.n	800c61a <_malloc_r+0xea>
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	442b      	add	r3, r5
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	f8d8 3000 	ldr.w	r3, [r8]
 800c5ae:	685a      	ldr	r2, [r3, #4]
 800c5b0:	bb62      	cbnz	r2, 800c60c <_malloc_r+0xdc>
 800c5b2:	f8c8 7000 	str.w	r7, [r8]
 800c5b6:	e00f      	b.n	800c5d8 <_malloc_r+0xa8>
 800c5b8:	6822      	ldr	r2, [r4, #0]
 800c5ba:	1b52      	subs	r2, r2, r5
 800c5bc:	d420      	bmi.n	800c600 <_malloc_r+0xd0>
 800c5be:	2a0b      	cmp	r2, #11
 800c5c0:	d917      	bls.n	800c5f2 <_malloc_r+0xc2>
 800c5c2:	1961      	adds	r1, r4, r5
 800c5c4:	42a3      	cmp	r3, r4
 800c5c6:	6025      	str	r5, [r4, #0]
 800c5c8:	bf18      	it	ne
 800c5ca:	6059      	strne	r1, [r3, #4]
 800c5cc:	6863      	ldr	r3, [r4, #4]
 800c5ce:	bf08      	it	eq
 800c5d0:	f8c8 1000 	streq.w	r1, [r8]
 800c5d4:	5162      	str	r2, [r4, r5]
 800c5d6:	604b      	str	r3, [r1, #4]
 800c5d8:	4630      	mov	r0, r6
 800c5da:	f000 f82f 	bl	800c63c <__malloc_unlock>
 800c5de:	f104 000b 	add.w	r0, r4, #11
 800c5e2:	1d23      	adds	r3, r4, #4
 800c5e4:	f020 0007 	bic.w	r0, r0, #7
 800c5e8:	1ac2      	subs	r2, r0, r3
 800c5ea:	bf1c      	itt	ne
 800c5ec:	1a1b      	subne	r3, r3, r0
 800c5ee:	50a3      	strne	r3, [r4, r2]
 800c5f0:	e7af      	b.n	800c552 <_malloc_r+0x22>
 800c5f2:	6862      	ldr	r2, [r4, #4]
 800c5f4:	42a3      	cmp	r3, r4
 800c5f6:	bf0c      	ite	eq
 800c5f8:	f8c8 2000 	streq.w	r2, [r8]
 800c5fc:	605a      	strne	r2, [r3, #4]
 800c5fe:	e7eb      	b.n	800c5d8 <_malloc_r+0xa8>
 800c600:	4623      	mov	r3, r4
 800c602:	6864      	ldr	r4, [r4, #4]
 800c604:	e7ae      	b.n	800c564 <_malloc_r+0x34>
 800c606:	463c      	mov	r4, r7
 800c608:	687f      	ldr	r7, [r7, #4]
 800c60a:	e7b6      	b.n	800c57a <_malloc_r+0x4a>
 800c60c:	461a      	mov	r2, r3
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	42a3      	cmp	r3, r4
 800c612:	d1fb      	bne.n	800c60c <_malloc_r+0xdc>
 800c614:	2300      	movs	r3, #0
 800c616:	6053      	str	r3, [r2, #4]
 800c618:	e7de      	b.n	800c5d8 <_malloc_r+0xa8>
 800c61a:	230c      	movs	r3, #12
 800c61c:	6033      	str	r3, [r6, #0]
 800c61e:	4630      	mov	r0, r6
 800c620:	f000 f80c 	bl	800c63c <__malloc_unlock>
 800c624:	e794      	b.n	800c550 <_malloc_r+0x20>
 800c626:	6005      	str	r5, [r0, #0]
 800c628:	e7d6      	b.n	800c5d8 <_malloc_r+0xa8>
 800c62a:	bf00      	nop
 800c62c:	20000660 	.word	0x20000660

0800c630 <__malloc_lock>:
 800c630:	4801      	ldr	r0, [pc, #4]	@ (800c638 <__malloc_lock+0x8>)
 800c632:	f7ff b8a6 	b.w	800b782 <__retarget_lock_acquire_recursive>
 800c636:	bf00      	nop
 800c638:	20000658 	.word	0x20000658

0800c63c <__malloc_unlock>:
 800c63c:	4801      	ldr	r0, [pc, #4]	@ (800c644 <__malloc_unlock+0x8>)
 800c63e:	f7ff b8a1 	b.w	800b784 <__retarget_lock_release_recursive>
 800c642:	bf00      	nop
 800c644:	20000658 	.word	0x20000658

0800c648 <_Balloc>:
 800c648:	b570      	push	{r4, r5, r6, lr}
 800c64a:	69c6      	ldr	r6, [r0, #28]
 800c64c:	4604      	mov	r4, r0
 800c64e:	460d      	mov	r5, r1
 800c650:	b976      	cbnz	r6, 800c670 <_Balloc+0x28>
 800c652:	2010      	movs	r0, #16
 800c654:	f7ff ff42 	bl	800c4dc <malloc>
 800c658:	4602      	mov	r2, r0
 800c65a:	61e0      	str	r0, [r4, #28]
 800c65c:	b920      	cbnz	r0, 800c668 <_Balloc+0x20>
 800c65e:	4b18      	ldr	r3, [pc, #96]	@ (800c6c0 <_Balloc+0x78>)
 800c660:	4818      	ldr	r0, [pc, #96]	@ (800c6c4 <_Balloc+0x7c>)
 800c662:	216b      	movs	r1, #107	@ 0x6b
 800c664:	f001 fd70 	bl	800e148 <__assert_func>
 800c668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c66c:	6006      	str	r6, [r0, #0]
 800c66e:	60c6      	str	r6, [r0, #12]
 800c670:	69e6      	ldr	r6, [r4, #28]
 800c672:	68f3      	ldr	r3, [r6, #12]
 800c674:	b183      	cbz	r3, 800c698 <_Balloc+0x50>
 800c676:	69e3      	ldr	r3, [r4, #28]
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c67e:	b9b8      	cbnz	r0, 800c6b0 <_Balloc+0x68>
 800c680:	2101      	movs	r1, #1
 800c682:	fa01 f605 	lsl.w	r6, r1, r5
 800c686:	1d72      	adds	r2, r6, #5
 800c688:	0092      	lsls	r2, r2, #2
 800c68a:	4620      	mov	r0, r4
 800c68c:	f001 fd7a 	bl	800e184 <_calloc_r>
 800c690:	b160      	cbz	r0, 800c6ac <_Balloc+0x64>
 800c692:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c696:	e00e      	b.n	800c6b6 <_Balloc+0x6e>
 800c698:	2221      	movs	r2, #33	@ 0x21
 800c69a:	2104      	movs	r1, #4
 800c69c:	4620      	mov	r0, r4
 800c69e:	f001 fd71 	bl	800e184 <_calloc_r>
 800c6a2:	69e3      	ldr	r3, [r4, #28]
 800c6a4:	60f0      	str	r0, [r6, #12]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1e4      	bne.n	800c676 <_Balloc+0x2e>
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	bd70      	pop	{r4, r5, r6, pc}
 800c6b0:	6802      	ldr	r2, [r0, #0]
 800c6b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6bc:	e7f7      	b.n	800c6ae <_Balloc+0x66>
 800c6be:	bf00      	nop
 800c6c0:	0800eedd 	.word	0x0800eedd
 800c6c4:	0800ef5d 	.word	0x0800ef5d

0800c6c8 <_Bfree>:
 800c6c8:	b570      	push	{r4, r5, r6, lr}
 800c6ca:	69c6      	ldr	r6, [r0, #28]
 800c6cc:	4605      	mov	r5, r0
 800c6ce:	460c      	mov	r4, r1
 800c6d0:	b976      	cbnz	r6, 800c6f0 <_Bfree+0x28>
 800c6d2:	2010      	movs	r0, #16
 800c6d4:	f7ff ff02 	bl	800c4dc <malloc>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	61e8      	str	r0, [r5, #28]
 800c6dc:	b920      	cbnz	r0, 800c6e8 <_Bfree+0x20>
 800c6de:	4b09      	ldr	r3, [pc, #36]	@ (800c704 <_Bfree+0x3c>)
 800c6e0:	4809      	ldr	r0, [pc, #36]	@ (800c708 <_Bfree+0x40>)
 800c6e2:	218f      	movs	r1, #143	@ 0x8f
 800c6e4:	f001 fd30 	bl	800e148 <__assert_func>
 800c6e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6ec:	6006      	str	r6, [r0, #0]
 800c6ee:	60c6      	str	r6, [r0, #12]
 800c6f0:	b13c      	cbz	r4, 800c702 <_Bfree+0x3a>
 800c6f2:	69eb      	ldr	r3, [r5, #28]
 800c6f4:	6862      	ldr	r2, [r4, #4]
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6fc:	6021      	str	r1, [r4, #0]
 800c6fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c702:	bd70      	pop	{r4, r5, r6, pc}
 800c704:	0800eedd 	.word	0x0800eedd
 800c708:	0800ef5d 	.word	0x0800ef5d

0800c70c <__multadd>:
 800c70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c710:	690d      	ldr	r5, [r1, #16]
 800c712:	4607      	mov	r7, r0
 800c714:	460c      	mov	r4, r1
 800c716:	461e      	mov	r6, r3
 800c718:	f101 0c14 	add.w	ip, r1, #20
 800c71c:	2000      	movs	r0, #0
 800c71e:	f8dc 3000 	ldr.w	r3, [ip]
 800c722:	b299      	uxth	r1, r3
 800c724:	fb02 6101 	mla	r1, r2, r1, r6
 800c728:	0c1e      	lsrs	r6, r3, #16
 800c72a:	0c0b      	lsrs	r3, r1, #16
 800c72c:	fb02 3306 	mla	r3, r2, r6, r3
 800c730:	b289      	uxth	r1, r1
 800c732:	3001      	adds	r0, #1
 800c734:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c738:	4285      	cmp	r5, r0
 800c73a:	f84c 1b04 	str.w	r1, [ip], #4
 800c73e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c742:	dcec      	bgt.n	800c71e <__multadd+0x12>
 800c744:	b30e      	cbz	r6, 800c78a <__multadd+0x7e>
 800c746:	68a3      	ldr	r3, [r4, #8]
 800c748:	42ab      	cmp	r3, r5
 800c74a:	dc19      	bgt.n	800c780 <__multadd+0x74>
 800c74c:	6861      	ldr	r1, [r4, #4]
 800c74e:	4638      	mov	r0, r7
 800c750:	3101      	adds	r1, #1
 800c752:	f7ff ff79 	bl	800c648 <_Balloc>
 800c756:	4680      	mov	r8, r0
 800c758:	b928      	cbnz	r0, 800c766 <__multadd+0x5a>
 800c75a:	4602      	mov	r2, r0
 800c75c:	4b0c      	ldr	r3, [pc, #48]	@ (800c790 <__multadd+0x84>)
 800c75e:	480d      	ldr	r0, [pc, #52]	@ (800c794 <__multadd+0x88>)
 800c760:	21ba      	movs	r1, #186	@ 0xba
 800c762:	f001 fcf1 	bl	800e148 <__assert_func>
 800c766:	6922      	ldr	r2, [r4, #16]
 800c768:	3202      	adds	r2, #2
 800c76a:	f104 010c 	add.w	r1, r4, #12
 800c76e:	0092      	lsls	r2, r2, #2
 800c770:	300c      	adds	r0, #12
 800c772:	f7ff f808 	bl	800b786 <memcpy>
 800c776:	4621      	mov	r1, r4
 800c778:	4638      	mov	r0, r7
 800c77a:	f7ff ffa5 	bl	800c6c8 <_Bfree>
 800c77e:	4644      	mov	r4, r8
 800c780:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c784:	3501      	adds	r5, #1
 800c786:	615e      	str	r6, [r3, #20]
 800c788:	6125      	str	r5, [r4, #16]
 800c78a:	4620      	mov	r0, r4
 800c78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c790:	0800ef4c 	.word	0x0800ef4c
 800c794:	0800ef5d 	.word	0x0800ef5d

0800c798 <__s2b>:
 800c798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c79c:	460c      	mov	r4, r1
 800c79e:	4615      	mov	r5, r2
 800c7a0:	461f      	mov	r7, r3
 800c7a2:	2209      	movs	r2, #9
 800c7a4:	3308      	adds	r3, #8
 800c7a6:	4606      	mov	r6, r0
 800c7a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7ac:	2100      	movs	r1, #0
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	db09      	blt.n	800c7c8 <__s2b+0x30>
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	f7ff ff47 	bl	800c648 <_Balloc>
 800c7ba:	b940      	cbnz	r0, 800c7ce <__s2b+0x36>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	4b19      	ldr	r3, [pc, #100]	@ (800c824 <__s2b+0x8c>)
 800c7c0:	4819      	ldr	r0, [pc, #100]	@ (800c828 <__s2b+0x90>)
 800c7c2:	21d3      	movs	r1, #211	@ 0xd3
 800c7c4:	f001 fcc0 	bl	800e148 <__assert_func>
 800c7c8:	0052      	lsls	r2, r2, #1
 800c7ca:	3101      	adds	r1, #1
 800c7cc:	e7f0      	b.n	800c7b0 <__s2b+0x18>
 800c7ce:	9b08      	ldr	r3, [sp, #32]
 800c7d0:	6143      	str	r3, [r0, #20]
 800c7d2:	2d09      	cmp	r5, #9
 800c7d4:	f04f 0301 	mov.w	r3, #1
 800c7d8:	6103      	str	r3, [r0, #16]
 800c7da:	dd16      	ble.n	800c80a <__s2b+0x72>
 800c7dc:	f104 0909 	add.w	r9, r4, #9
 800c7e0:	46c8      	mov	r8, r9
 800c7e2:	442c      	add	r4, r5
 800c7e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c7e8:	4601      	mov	r1, r0
 800c7ea:	3b30      	subs	r3, #48	@ 0x30
 800c7ec:	220a      	movs	r2, #10
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	f7ff ff8c 	bl	800c70c <__multadd>
 800c7f4:	45a0      	cmp	r8, r4
 800c7f6:	d1f5      	bne.n	800c7e4 <__s2b+0x4c>
 800c7f8:	f1a5 0408 	sub.w	r4, r5, #8
 800c7fc:	444c      	add	r4, r9
 800c7fe:	1b2d      	subs	r5, r5, r4
 800c800:	1963      	adds	r3, r4, r5
 800c802:	42bb      	cmp	r3, r7
 800c804:	db04      	blt.n	800c810 <__s2b+0x78>
 800c806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c80a:	340a      	adds	r4, #10
 800c80c:	2509      	movs	r5, #9
 800c80e:	e7f6      	b.n	800c7fe <__s2b+0x66>
 800c810:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c814:	4601      	mov	r1, r0
 800c816:	3b30      	subs	r3, #48	@ 0x30
 800c818:	220a      	movs	r2, #10
 800c81a:	4630      	mov	r0, r6
 800c81c:	f7ff ff76 	bl	800c70c <__multadd>
 800c820:	e7ee      	b.n	800c800 <__s2b+0x68>
 800c822:	bf00      	nop
 800c824:	0800ef4c 	.word	0x0800ef4c
 800c828:	0800ef5d 	.word	0x0800ef5d

0800c82c <__hi0bits>:
 800c82c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c830:	4603      	mov	r3, r0
 800c832:	bf36      	itet	cc
 800c834:	0403      	lslcc	r3, r0, #16
 800c836:	2000      	movcs	r0, #0
 800c838:	2010      	movcc	r0, #16
 800c83a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c83e:	bf3c      	itt	cc
 800c840:	021b      	lslcc	r3, r3, #8
 800c842:	3008      	addcc	r0, #8
 800c844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c848:	bf3c      	itt	cc
 800c84a:	011b      	lslcc	r3, r3, #4
 800c84c:	3004      	addcc	r0, #4
 800c84e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c852:	bf3c      	itt	cc
 800c854:	009b      	lslcc	r3, r3, #2
 800c856:	3002      	addcc	r0, #2
 800c858:	2b00      	cmp	r3, #0
 800c85a:	db05      	blt.n	800c868 <__hi0bits+0x3c>
 800c85c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c860:	f100 0001 	add.w	r0, r0, #1
 800c864:	bf08      	it	eq
 800c866:	2020      	moveq	r0, #32
 800c868:	4770      	bx	lr

0800c86a <__lo0bits>:
 800c86a:	6803      	ldr	r3, [r0, #0]
 800c86c:	4602      	mov	r2, r0
 800c86e:	f013 0007 	ands.w	r0, r3, #7
 800c872:	d00b      	beq.n	800c88c <__lo0bits+0x22>
 800c874:	07d9      	lsls	r1, r3, #31
 800c876:	d421      	bmi.n	800c8bc <__lo0bits+0x52>
 800c878:	0798      	lsls	r0, r3, #30
 800c87a:	bf49      	itett	mi
 800c87c:	085b      	lsrmi	r3, r3, #1
 800c87e:	089b      	lsrpl	r3, r3, #2
 800c880:	2001      	movmi	r0, #1
 800c882:	6013      	strmi	r3, [r2, #0]
 800c884:	bf5c      	itt	pl
 800c886:	6013      	strpl	r3, [r2, #0]
 800c888:	2002      	movpl	r0, #2
 800c88a:	4770      	bx	lr
 800c88c:	b299      	uxth	r1, r3
 800c88e:	b909      	cbnz	r1, 800c894 <__lo0bits+0x2a>
 800c890:	0c1b      	lsrs	r3, r3, #16
 800c892:	2010      	movs	r0, #16
 800c894:	b2d9      	uxtb	r1, r3
 800c896:	b909      	cbnz	r1, 800c89c <__lo0bits+0x32>
 800c898:	3008      	adds	r0, #8
 800c89a:	0a1b      	lsrs	r3, r3, #8
 800c89c:	0719      	lsls	r1, r3, #28
 800c89e:	bf04      	itt	eq
 800c8a0:	091b      	lsreq	r3, r3, #4
 800c8a2:	3004      	addeq	r0, #4
 800c8a4:	0799      	lsls	r1, r3, #30
 800c8a6:	bf04      	itt	eq
 800c8a8:	089b      	lsreq	r3, r3, #2
 800c8aa:	3002      	addeq	r0, #2
 800c8ac:	07d9      	lsls	r1, r3, #31
 800c8ae:	d403      	bmi.n	800c8b8 <__lo0bits+0x4e>
 800c8b0:	085b      	lsrs	r3, r3, #1
 800c8b2:	f100 0001 	add.w	r0, r0, #1
 800c8b6:	d003      	beq.n	800c8c0 <__lo0bits+0x56>
 800c8b8:	6013      	str	r3, [r2, #0]
 800c8ba:	4770      	bx	lr
 800c8bc:	2000      	movs	r0, #0
 800c8be:	4770      	bx	lr
 800c8c0:	2020      	movs	r0, #32
 800c8c2:	4770      	bx	lr

0800c8c4 <__i2b>:
 800c8c4:	b510      	push	{r4, lr}
 800c8c6:	460c      	mov	r4, r1
 800c8c8:	2101      	movs	r1, #1
 800c8ca:	f7ff febd 	bl	800c648 <_Balloc>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	b928      	cbnz	r0, 800c8de <__i2b+0x1a>
 800c8d2:	4b05      	ldr	r3, [pc, #20]	@ (800c8e8 <__i2b+0x24>)
 800c8d4:	4805      	ldr	r0, [pc, #20]	@ (800c8ec <__i2b+0x28>)
 800c8d6:	f240 1145 	movw	r1, #325	@ 0x145
 800c8da:	f001 fc35 	bl	800e148 <__assert_func>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	6144      	str	r4, [r0, #20]
 800c8e2:	6103      	str	r3, [r0, #16]
 800c8e4:	bd10      	pop	{r4, pc}
 800c8e6:	bf00      	nop
 800c8e8:	0800ef4c 	.word	0x0800ef4c
 800c8ec:	0800ef5d 	.word	0x0800ef5d

0800c8f0 <__multiply>:
 800c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f4:	4614      	mov	r4, r2
 800c8f6:	690a      	ldr	r2, [r1, #16]
 800c8f8:	6923      	ldr	r3, [r4, #16]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	bfa8      	it	ge
 800c8fe:	4623      	movge	r3, r4
 800c900:	460f      	mov	r7, r1
 800c902:	bfa4      	itt	ge
 800c904:	460c      	movge	r4, r1
 800c906:	461f      	movge	r7, r3
 800c908:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c90c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c910:	68a3      	ldr	r3, [r4, #8]
 800c912:	6861      	ldr	r1, [r4, #4]
 800c914:	eb0a 0609 	add.w	r6, sl, r9
 800c918:	42b3      	cmp	r3, r6
 800c91a:	b085      	sub	sp, #20
 800c91c:	bfb8      	it	lt
 800c91e:	3101      	addlt	r1, #1
 800c920:	f7ff fe92 	bl	800c648 <_Balloc>
 800c924:	b930      	cbnz	r0, 800c934 <__multiply+0x44>
 800c926:	4602      	mov	r2, r0
 800c928:	4b44      	ldr	r3, [pc, #272]	@ (800ca3c <__multiply+0x14c>)
 800c92a:	4845      	ldr	r0, [pc, #276]	@ (800ca40 <__multiply+0x150>)
 800c92c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c930:	f001 fc0a 	bl	800e148 <__assert_func>
 800c934:	f100 0514 	add.w	r5, r0, #20
 800c938:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c93c:	462b      	mov	r3, r5
 800c93e:	2200      	movs	r2, #0
 800c940:	4543      	cmp	r3, r8
 800c942:	d321      	bcc.n	800c988 <__multiply+0x98>
 800c944:	f107 0114 	add.w	r1, r7, #20
 800c948:	f104 0214 	add.w	r2, r4, #20
 800c94c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c950:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c954:	9302      	str	r3, [sp, #8]
 800c956:	1b13      	subs	r3, r2, r4
 800c958:	3b15      	subs	r3, #21
 800c95a:	f023 0303 	bic.w	r3, r3, #3
 800c95e:	3304      	adds	r3, #4
 800c960:	f104 0715 	add.w	r7, r4, #21
 800c964:	42ba      	cmp	r2, r7
 800c966:	bf38      	it	cc
 800c968:	2304      	movcc	r3, #4
 800c96a:	9301      	str	r3, [sp, #4]
 800c96c:	9b02      	ldr	r3, [sp, #8]
 800c96e:	9103      	str	r1, [sp, #12]
 800c970:	428b      	cmp	r3, r1
 800c972:	d80c      	bhi.n	800c98e <__multiply+0x9e>
 800c974:	2e00      	cmp	r6, #0
 800c976:	dd03      	ble.n	800c980 <__multiply+0x90>
 800c978:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d05b      	beq.n	800ca38 <__multiply+0x148>
 800c980:	6106      	str	r6, [r0, #16]
 800c982:	b005      	add	sp, #20
 800c984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c988:	f843 2b04 	str.w	r2, [r3], #4
 800c98c:	e7d8      	b.n	800c940 <__multiply+0x50>
 800c98e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c992:	f1ba 0f00 	cmp.w	sl, #0
 800c996:	d024      	beq.n	800c9e2 <__multiply+0xf2>
 800c998:	f104 0e14 	add.w	lr, r4, #20
 800c99c:	46a9      	mov	r9, r5
 800c99e:	f04f 0c00 	mov.w	ip, #0
 800c9a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c9a6:	f8d9 3000 	ldr.w	r3, [r9]
 800c9aa:	fa1f fb87 	uxth.w	fp, r7
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	fb0a 330b 	mla	r3, sl, fp, r3
 800c9b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c9b8:	f8d9 7000 	ldr.w	r7, [r9]
 800c9bc:	4463      	add	r3, ip
 800c9be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c9c2:	fb0a c70b 	mla	r7, sl, fp, ip
 800c9c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c9d0:	4572      	cmp	r2, lr
 800c9d2:	f849 3b04 	str.w	r3, [r9], #4
 800c9d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c9da:	d8e2      	bhi.n	800c9a2 <__multiply+0xb2>
 800c9dc:	9b01      	ldr	r3, [sp, #4]
 800c9de:	f845 c003 	str.w	ip, [r5, r3]
 800c9e2:	9b03      	ldr	r3, [sp, #12]
 800c9e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c9e8:	3104      	adds	r1, #4
 800c9ea:	f1b9 0f00 	cmp.w	r9, #0
 800c9ee:	d021      	beq.n	800ca34 <__multiply+0x144>
 800c9f0:	682b      	ldr	r3, [r5, #0]
 800c9f2:	f104 0c14 	add.w	ip, r4, #20
 800c9f6:	46ae      	mov	lr, r5
 800c9f8:	f04f 0a00 	mov.w	sl, #0
 800c9fc:	f8bc b000 	ldrh.w	fp, [ip]
 800ca00:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ca04:	fb09 770b 	mla	r7, r9, fp, r7
 800ca08:	4457      	add	r7, sl
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ca10:	f84e 3b04 	str.w	r3, [lr], #4
 800ca14:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ca18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca1c:	f8be 3000 	ldrh.w	r3, [lr]
 800ca20:	fb09 330a 	mla	r3, r9, sl, r3
 800ca24:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ca28:	4562      	cmp	r2, ip
 800ca2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca2e:	d8e5      	bhi.n	800c9fc <__multiply+0x10c>
 800ca30:	9f01      	ldr	r7, [sp, #4]
 800ca32:	51eb      	str	r3, [r5, r7]
 800ca34:	3504      	adds	r5, #4
 800ca36:	e799      	b.n	800c96c <__multiply+0x7c>
 800ca38:	3e01      	subs	r6, #1
 800ca3a:	e79b      	b.n	800c974 <__multiply+0x84>
 800ca3c:	0800ef4c 	.word	0x0800ef4c
 800ca40:	0800ef5d 	.word	0x0800ef5d

0800ca44 <__pow5mult>:
 800ca44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca48:	4615      	mov	r5, r2
 800ca4a:	f012 0203 	ands.w	r2, r2, #3
 800ca4e:	4607      	mov	r7, r0
 800ca50:	460e      	mov	r6, r1
 800ca52:	d007      	beq.n	800ca64 <__pow5mult+0x20>
 800ca54:	4c25      	ldr	r4, [pc, #148]	@ (800caec <__pow5mult+0xa8>)
 800ca56:	3a01      	subs	r2, #1
 800ca58:	2300      	movs	r3, #0
 800ca5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca5e:	f7ff fe55 	bl	800c70c <__multadd>
 800ca62:	4606      	mov	r6, r0
 800ca64:	10ad      	asrs	r5, r5, #2
 800ca66:	d03d      	beq.n	800cae4 <__pow5mult+0xa0>
 800ca68:	69fc      	ldr	r4, [r7, #28]
 800ca6a:	b97c      	cbnz	r4, 800ca8c <__pow5mult+0x48>
 800ca6c:	2010      	movs	r0, #16
 800ca6e:	f7ff fd35 	bl	800c4dc <malloc>
 800ca72:	4602      	mov	r2, r0
 800ca74:	61f8      	str	r0, [r7, #28]
 800ca76:	b928      	cbnz	r0, 800ca84 <__pow5mult+0x40>
 800ca78:	4b1d      	ldr	r3, [pc, #116]	@ (800caf0 <__pow5mult+0xac>)
 800ca7a:	481e      	ldr	r0, [pc, #120]	@ (800caf4 <__pow5mult+0xb0>)
 800ca7c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ca80:	f001 fb62 	bl	800e148 <__assert_func>
 800ca84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca88:	6004      	str	r4, [r0, #0]
 800ca8a:	60c4      	str	r4, [r0, #12]
 800ca8c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ca90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca94:	b94c      	cbnz	r4, 800caaa <__pow5mult+0x66>
 800ca96:	f240 2171 	movw	r1, #625	@ 0x271
 800ca9a:	4638      	mov	r0, r7
 800ca9c:	f7ff ff12 	bl	800c8c4 <__i2b>
 800caa0:	2300      	movs	r3, #0
 800caa2:	f8c8 0008 	str.w	r0, [r8, #8]
 800caa6:	4604      	mov	r4, r0
 800caa8:	6003      	str	r3, [r0, #0]
 800caaa:	f04f 0900 	mov.w	r9, #0
 800caae:	07eb      	lsls	r3, r5, #31
 800cab0:	d50a      	bpl.n	800cac8 <__pow5mult+0x84>
 800cab2:	4631      	mov	r1, r6
 800cab4:	4622      	mov	r2, r4
 800cab6:	4638      	mov	r0, r7
 800cab8:	f7ff ff1a 	bl	800c8f0 <__multiply>
 800cabc:	4631      	mov	r1, r6
 800cabe:	4680      	mov	r8, r0
 800cac0:	4638      	mov	r0, r7
 800cac2:	f7ff fe01 	bl	800c6c8 <_Bfree>
 800cac6:	4646      	mov	r6, r8
 800cac8:	106d      	asrs	r5, r5, #1
 800caca:	d00b      	beq.n	800cae4 <__pow5mult+0xa0>
 800cacc:	6820      	ldr	r0, [r4, #0]
 800cace:	b938      	cbnz	r0, 800cae0 <__pow5mult+0x9c>
 800cad0:	4622      	mov	r2, r4
 800cad2:	4621      	mov	r1, r4
 800cad4:	4638      	mov	r0, r7
 800cad6:	f7ff ff0b 	bl	800c8f0 <__multiply>
 800cada:	6020      	str	r0, [r4, #0]
 800cadc:	f8c0 9000 	str.w	r9, [r0]
 800cae0:	4604      	mov	r4, r0
 800cae2:	e7e4      	b.n	800caae <__pow5mult+0x6a>
 800cae4:	4630      	mov	r0, r6
 800cae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caea:	bf00      	nop
 800caec:	0800efb8 	.word	0x0800efb8
 800caf0:	0800eedd 	.word	0x0800eedd
 800caf4:	0800ef5d 	.word	0x0800ef5d

0800caf8 <__lshift>:
 800caf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cafc:	460c      	mov	r4, r1
 800cafe:	6849      	ldr	r1, [r1, #4]
 800cb00:	6923      	ldr	r3, [r4, #16]
 800cb02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb06:	68a3      	ldr	r3, [r4, #8]
 800cb08:	4607      	mov	r7, r0
 800cb0a:	4691      	mov	r9, r2
 800cb0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb10:	f108 0601 	add.w	r6, r8, #1
 800cb14:	42b3      	cmp	r3, r6
 800cb16:	db0b      	blt.n	800cb30 <__lshift+0x38>
 800cb18:	4638      	mov	r0, r7
 800cb1a:	f7ff fd95 	bl	800c648 <_Balloc>
 800cb1e:	4605      	mov	r5, r0
 800cb20:	b948      	cbnz	r0, 800cb36 <__lshift+0x3e>
 800cb22:	4602      	mov	r2, r0
 800cb24:	4b28      	ldr	r3, [pc, #160]	@ (800cbc8 <__lshift+0xd0>)
 800cb26:	4829      	ldr	r0, [pc, #164]	@ (800cbcc <__lshift+0xd4>)
 800cb28:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cb2c:	f001 fb0c 	bl	800e148 <__assert_func>
 800cb30:	3101      	adds	r1, #1
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	e7ee      	b.n	800cb14 <__lshift+0x1c>
 800cb36:	2300      	movs	r3, #0
 800cb38:	f100 0114 	add.w	r1, r0, #20
 800cb3c:	f100 0210 	add.w	r2, r0, #16
 800cb40:	4618      	mov	r0, r3
 800cb42:	4553      	cmp	r3, sl
 800cb44:	db33      	blt.n	800cbae <__lshift+0xb6>
 800cb46:	6920      	ldr	r0, [r4, #16]
 800cb48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb4c:	f104 0314 	add.w	r3, r4, #20
 800cb50:	f019 091f 	ands.w	r9, r9, #31
 800cb54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb5c:	d02b      	beq.n	800cbb6 <__lshift+0xbe>
 800cb5e:	f1c9 0e20 	rsb	lr, r9, #32
 800cb62:	468a      	mov	sl, r1
 800cb64:	2200      	movs	r2, #0
 800cb66:	6818      	ldr	r0, [r3, #0]
 800cb68:	fa00 f009 	lsl.w	r0, r0, r9
 800cb6c:	4310      	orrs	r0, r2
 800cb6e:	f84a 0b04 	str.w	r0, [sl], #4
 800cb72:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb76:	459c      	cmp	ip, r3
 800cb78:	fa22 f20e 	lsr.w	r2, r2, lr
 800cb7c:	d8f3      	bhi.n	800cb66 <__lshift+0x6e>
 800cb7e:	ebac 0304 	sub.w	r3, ip, r4
 800cb82:	3b15      	subs	r3, #21
 800cb84:	f023 0303 	bic.w	r3, r3, #3
 800cb88:	3304      	adds	r3, #4
 800cb8a:	f104 0015 	add.w	r0, r4, #21
 800cb8e:	4584      	cmp	ip, r0
 800cb90:	bf38      	it	cc
 800cb92:	2304      	movcc	r3, #4
 800cb94:	50ca      	str	r2, [r1, r3]
 800cb96:	b10a      	cbz	r2, 800cb9c <__lshift+0xa4>
 800cb98:	f108 0602 	add.w	r6, r8, #2
 800cb9c:	3e01      	subs	r6, #1
 800cb9e:	4638      	mov	r0, r7
 800cba0:	612e      	str	r6, [r5, #16]
 800cba2:	4621      	mov	r1, r4
 800cba4:	f7ff fd90 	bl	800c6c8 <_Bfree>
 800cba8:	4628      	mov	r0, r5
 800cbaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbae:	f842 0f04 	str.w	r0, [r2, #4]!
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	e7c5      	b.n	800cb42 <__lshift+0x4a>
 800cbb6:	3904      	subs	r1, #4
 800cbb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbbc:	f841 2f04 	str.w	r2, [r1, #4]!
 800cbc0:	459c      	cmp	ip, r3
 800cbc2:	d8f9      	bhi.n	800cbb8 <__lshift+0xc0>
 800cbc4:	e7ea      	b.n	800cb9c <__lshift+0xa4>
 800cbc6:	bf00      	nop
 800cbc8:	0800ef4c 	.word	0x0800ef4c
 800cbcc:	0800ef5d 	.word	0x0800ef5d

0800cbd0 <__mcmp>:
 800cbd0:	690a      	ldr	r2, [r1, #16]
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	6900      	ldr	r0, [r0, #16]
 800cbd6:	1a80      	subs	r0, r0, r2
 800cbd8:	b530      	push	{r4, r5, lr}
 800cbda:	d10e      	bne.n	800cbfa <__mcmp+0x2a>
 800cbdc:	3314      	adds	r3, #20
 800cbde:	3114      	adds	r1, #20
 800cbe0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cbe4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cbe8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cbec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cbf0:	4295      	cmp	r5, r2
 800cbf2:	d003      	beq.n	800cbfc <__mcmp+0x2c>
 800cbf4:	d205      	bcs.n	800cc02 <__mcmp+0x32>
 800cbf6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbfa:	bd30      	pop	{r4, r5, pc}
 800cbfc:	42a3      	cmp	r3, r4
 800cbfe:	d3f3      	bcc.n	800cbe8 <__mcmp+0x18>
 800cc00:	e7fb      	b.n	800cbfa <__mcmp+0x2a>
 800cc02:	2001      	movs	r0, #1
 800cc04:	e7f9      	b.n	800cbfa <__mcmp+0x2a>
	...

0800cc08 <__mdiff>:
 800cc08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc0c:	4689      	mov	r9, r1
 800cc0e:	4606      	mov	r6, r0
 800cc10:	4611      	mov	r1, r2
 800cc12:	4648      	mov	r0, r9
 800cc14:	4614      	mov	r4, r2
 800cc16:	f7ff ffdb 	bl	800cbd0 <__mcmp>
 800cc1a:	1e05      	subs	r5, r0, #0
 800cc1c:	d112      	bne.n	800cc44 <__mdiff+0x3c>
 800cc1e:	4629      	mov	r1, r5
 800cc20:	4630      	mov	r0, r6
 800cc22:	f7ff fd11 	bl	800c648 <_Balloc>
 800cc26:	4602      	mov	r2, r0
 800cc28:	b928      	cbnz	r0, 800cc36 <__mdiff+0x2e>
 800cc2a:	4b3f      	ldr	r3, [pc, #252]	@ (800cd28 <__mdiff+0x120>)
 800cc2c:	f240 2137 	movw	r1, #567	@ 0x237
 800cc30:	483e      	ldr	r0, [pc, #248]	@ (800cd2c <__mdiff+0x124>)
 800cc32:	f001 fa89 	bl	800e148 <__assert_func>
 800cc36:	2301      	movs	r3, #1
 800cc38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc3c:	4610      	mov	r0, r2
 800cc3e:	b003      	add	sp, #12
 800cc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc44:	bfbc      	itt	lt
 800cc46:	464b      	movlt	r3, r9
 800cc48:	46a1      	movlt	r9, r4
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cc50:	bfba      	itte	lt
 800cc52:	461c      	movlt	r4, r3
 800cc54:	2501      	movlt	r5, #1
 800cc56:	2500      	movge	r5, #0
 800cc58:	f7ff fcf6 	bl	800c648 <_Balloc>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	b918      	cbnz	r0, 800cc68 <__mdiff+0x60>
 800cc60:	4b31      	ldr	r3, [pc, #196]	@ (800cd28 <__mdiff+0x120>)
 800cc62:	f240 2145 	movw	r1, #581	@ 0x245
 800cc66:	e7e3      	b.n	800cc30 <__mdiff+0x28>
 800cc68:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cc6c:	6926      	ldr	r6, [r4, #16]
 800cc6e:	60c5      	str	r5, [r0, #12]
 800cc70:	f109 0310 	add.w	r3, r9, #16
 800cc74:	f109 0514 	add.w	r5, r9, #20
 800cc78:	f104 0e14 	add.w	lr, r4, #20
 800cc7c:	f100 0b14 	add.w	fp, r0, #20
 800cc80:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cc84:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cc88:	9301      	str	r3, [sp, #4]
 800cc8a:	46d9      	mov	r9, fp
 800cc8c:	f04f 0c00 	mov.w	ip, #0
 800cc90:	9b01      	ldr	r3, [sp, #4]
 800cc92:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cc96:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cc9a:	9301      	str	r3, [sp, #4]
 800cc9c:	fa1f f38a 	uxth.w	r3, sl
 800cca0:	4619      	mov	r1, r3
 800cca2:	b283      	uxth	r3, r0
 800cca4:	1acb      	subs	r3, r1, r3
 800cca6:	0c00      	lsrs	r0, r0, #16
 800cca8:	4463      	add	r3, ip
 800ccaa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ccae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ccb8:	4576      	cmp	r6, lr
 800ccba:	f849 3b04 	str.w	r3, [r9], #4
 800ccbe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ccc2:	d8e5      	bhi.n	800cc90 <__mdiff+0x88>
 800ccc4:	1b33      	subs	r3, r6, r4
 800ccc6:	3b15      	subs	r3, #21
 800ccc8:	f023 0303 	bic.w	r3, r3, #3
 800cccc:	3415      	adds	r4, #21
 800ccce:	3304      	adds	r3, #4
 800ccd0:	42a6      	cmp	r6, r4
 800ccd2:	bf38      	it	cc
 800ccd4:	2304      	movcc	r3, #4
 800ccd6:	441d      	add	r5, r3
 800ccd8:	445b      	add	r3, fp
 800ccda:	461e      	mov	r6, r3
 800ccdc:	462c      	mov	r4, r5
 800ccde:	4544      	cmp	r4, r8
 800cce0:	d30e      	bcc.n	800cd00 <__mdiff+0xf8>
 800cce2:	f108 0103 	add.w	r1, r8, #3
 800cce6:	1b49      	subs	r1, r1, r5
 800cce8:	f021 0103 	bic.w	r1, r1, #3
 800ccec:	3d03      	subs	r5, #3
 800ccee:	45a8      	cmp	r8, r5
 800ccf0:	bf38      	it	cc
 800ccf2:	2100      	movcc	r1, #0
 800ccf4:	440b      	add	r3, r1
 800ccf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ccfa:	b191      	cbz	r1, 800cd22 <__mdiff+0x11a>
 800ccfc:	6117      	str	r7, [r2, #16]
 800ccfe:	e79d      	b.n	800cc3c <__mdiff+0x34>
 800cd00:	f854 1b04 	ldr.w	r1, [r4], #4
 800cd04:	46e6      	mov	lr, ip
 800cd06:	0c08      	lsrs	r0, r1, #16
 800cd08:	fa1c fc81 	uxtah	ip, ip, r1
 800cd0c:	4471      	add	r1, lr
 800cd0e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cd12:	b289      	uxth	r1, r1
 800cd14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cd18:	f846 1b04 	str.w	r1, [r6], #4
 800cd1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd20:	e7dd      	b.n	800ccde <__mdiff+0xd6>
 800cd22:	3f01      	subs	r7, #1
 800cd24:	e7e7      	b.n	800ccf6 <__mdiff+0xee>
 800cd26:	bf00      	nop
 800cd28:	0800ef4c 	.word	0x0800ef4c
 800cd2c:	0800ef5d 	.word	0x0800ef5d

0800cd30 <__ulp>:
 800cd30:	b082      	sub	sp, #8
 800cd32:	ed8d 0b00 	vstr	d0, [sp]
 800cd36:	9a01      	ldr	r2, [sp, #4]
 800cd38:	4b0f      	ldr	r3, [pc, #60]	@ (800cd78 <__ulp+0x48>)
 800cd3a:	4013      	ands	r3, r2
 800cd3c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	dc08      	bgt.n	800cd56 <__ulp+0x26>
 800cd44:	425b      	negs	r3, r3
 800cd46:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cd4a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cd4e:	da04      	bge.n	800cd5a <__ulp+0x2a>
 800cd50:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cd54:	4113      	asrs	r3, r2
 800cd56:	2200      	movs	r2, #0
 800cd58:	e008      	b.n	800cd6c <__ulp+0x3c>
 800cd5a:	f1a2 0314 	sub.w	r3, r2, #20
 800cd5e:	2b1e      	cmp	r3, #30
 800cd60:	bfda      	itte	le
 800cd62:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cd66:	40da      	lsrle	r2, r3
 800cd68:	2201      	movgt	r2, #1
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	4610      	mov	r0, r2
 800cd70:	ec41 0b10 	vmov	d0, r0, r1
 800cd74:	b002      	add	sp, #8
 800cd76:	4770      	bx	lr
 800cd78:	7ff00000 	.word	0x7ff00000

0800cd7c <__b2d>:
 800cd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd80:	6906      	ldr	r6, [r0, #16]
 800cd82:	f100 0814 	add.w	r8, r0, #20
 800cd86:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cd8a:	1f37      	subs	r7, r6, #4
 800cd8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cd90:	4610      	mov	r0, r2
 800cd92:	f7ff fd4b 	bl	800c82c <__hi0bits>
 800cd96:	f1c0 0320 	rsb	r3, r0, #32
 800cd9a:	280a      	cmp	r0, #10
 800cd9c:	600b      	str	r3, [r1, #0]
 800cd9e:	491b      	ldr	r1, [pc, #108]	@ (800ce0c <__b2d+0x90>)
 800cda0:	dc15      	bgt.n	800cdce <__b2d+0x52>
 800cda2:	f1c0 0c0b 	rsb	ip, r0, #11
 800cda6:	fa22 f30c 	lsr.w	r3, r2, ip
 800cdaa:	45b8      	cmp	r8, r7
 800cdac:	ea43 0501 	orr.w	r5, r3, r1
 800cdb0:	bf34      	ite	cc
 800cdb2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cdb6:	2300      	movcs	r3, #0
 800cdb8:	3015      	adds	r0, #21
 800cdba:	fa02 f000 	lsl.w	r0, r2, r0
 800cdbe:	fa23 f30c 	lsr.w	r3, r3, ip
 800cdc2:	4303      	orrs	r3, r0
 800cdc4:	461c      	mov	r4, r3
 800cdc6:	ec45 4b10 	vmov	d0, r4, r5
 800cdca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdce:	45b8      	cmp	r8, r7
 800cdd0:	bf3a      	itte	cc
 800cdd2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cdd6:	f1a6 0708 	subcc.w	r7, r6, #8
 800cdda:	2300      	movcs	r3, #0
 800cddc:	380b      	subs	r0, #11
 800cdde:	d012      	beq.n	800ce06 <__b2d+0x8a>
 800cde0:	f1c0 0120 	rsb	r1, r0, #32
 800cde4:	fa23 f401 	lsr.w	r4, r3, r1
 800cde8:	4082      	lsls	r2, r0
 800cdea:	4322      	orrs	r2, r4
 800cdec:	4547      	cmp	r7, r8
 800cdee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cdf2:	bf8c      	ite	hi
 800cdf4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cdf8:	2200      	movls	r2, #0
 800cdfa:	4083      	lsls	r3, r0
 800cdfc:	40ca      	lsrs	r2, r1
 800cdfe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ce02:	4313      	orrs	r3, r2
 800ce04:	e7de      	b.n	800cdc4 <__b2d+0x48>
 800ce06:	ea42 0501 	orr.w	r5, r2, r1
 800ce0a:	e7db      	b.n	800cdc4 <__b2d+0x48>
 800ce0c:	3ff00000 	.word	0x3ff00000

0800ce10 <__d2b>:
 800ce10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce14:	460f      	mov	r7, r1
 800ce16:	2101      	movs	r1, #1
 800ce18:	ec59 8b10 	vmov	r8, r9, d0
 800ce1c:	4616      	mov	r6, r2
 800ce1e:	f7ff fc13 	bl	800c648 <_Balloc>
 800ce22:	4604      	mov	r4, r0
 800ce24:	b930      	cbnz	r0, 800ce34 <__d2b+0x24>
 800ce26:	4602      	mov	r2, r0
 800ce28:	4b23      	ldr	r3, [pc, #140]	@ (800ceb8 <__d2b+0xa8>)
 800ce2a:	4824      	ldr	r0, [pc, #144]	@ (800cebc <__d2b+0xac>)
 800ce2c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ce30:	f001 f98a 	bl	800e148 <__assert_func>
 800ce34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ce38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce3c:	b10d      	cbz	r5, 800ce42 <__d2b+0x32>
 800ce3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ce42:	9301      	str	r3, [sp, #4]
 800ce44:	f1b8 0300 	subs.w	r3, r8, #0
 800ce48:	d023      	beq.n	800ce92 <__d2b+0x82>
 800ce4a:	4668      	mov	r0, sp
 800ce4c:	9300      	str	r3, [sp, #0]
 800ce4e:	f7ff fd0c 	bl	800c86a <__lo0bits>
 800ce52:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ce56:	b1d0      	cbz	r0, 800ce8e <__d2b+0x7e>
 800ce58:	f1c0 0320 	rsb	r3, r0, #32
 800ce5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ce60:	430b      	orrs	r3, r1
 800ce62:	40c2      	lsrs	r2, r0
 800ce64:	6163      	str	r3, [r4, #20]
 800ce66:	9201      	str	r2, [sp, #4]
 800ce68:	9b01      	ldr	r3, [sp, #4]
 800ce6a:	61a3      	str	r3, [r4, #24]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	bf0c      	ite	eq
 800ce70:	2201      	moveq	r2, #1
 800ce72:	2202      	movne	r2, #2
 800ce74:	6122      	str	r2, [r4, #16]
 800ce76:	b1a5      	cbz	r5, 800cea2 <__d2b+0x92>
 800ce78:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ce7c:	4405      	add	r5, r0
 800ce7e:	603d      	str	r5, [r7, #0]
 800ce80:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ce84:	6030      	str	r0, [r6, #0]
 800ce86:	4620      	mov	r0, r4
 800ce88:	b003      	add	sp, #12
 800ce8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce8e:	6161      	str	r1, [r4, #20]
 800ce90:	e7ea      	b.n	800ce68 <__d2b+0x58>
 800ce92:	a801      	add	r0, sp, #4
 800ce94:	f7ff fce9 	bl	800c86a <__lo0bits>
 800ce98:	9b01      	ldr	r3, [sp, #4]
 800ce9a:	6163      	str	r3, [r4, #20]
 800ce9c:	3020      	adds	r0, #32
 800ce9e:	2201      	movs	r2, #1
 800cea0:	e7e8      	b.n	800ce74 <__d2b+0x64>
 800cea2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cea6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ceaa:	6038      	str	r0, [r7, #0]
 800ceac:	6918      	ldr	r0, [r3, #16]
 800ceae:	f7ff fcbd 	bl	800c82c <__hi0bits>
 800ceb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ceb6:	e7e5      	b.n	800ce84 <__d2b+0x74>
 800ceb8:	0800ef4c 	.word	0x0800ef4c
 800cebc:	0800ef5d 	.word	0x0800ef5d

0800cec0 <__ratio>:
 800cec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec4:	b085      	sub	sp, #20
 800cec6:	e9cd 1000 	strd	r1, r0, [sp]
 800ceca:	a902      	add	r1, sp, #8
 800cecc:	f7ff ff56 	bl	800cd7c <__b2d>
 800ced0:	9800      	ldr	r0, [sp, #0]
 800ced2:	a903      	add	r1, sp, #12
 800ced4:	ec55 4b10 	vmov	r4, r5, d0
 800ced8:	f7ff ff50 	bl	800cd7c <__b2d>
 800cedc:	9b01      	ldr	r3, [sp, #4]
 800cede:	6919      	ldr	r1, [r3, #16]
 800cee0:	9b00      	ldr	r3, [sp, #0]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	1ac9      	subs	r1, r1, r3
 800cee6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ceea:	1a9b      	subs	r3, r3, r2
 800ceec:	ec5b ab10 	vmov	sl, fp, d0
 800cef0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	bfce      	itee	gt
 800cef8:	462a      	movgt	r2, r5
 800cefa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cefe:	465a      	movle	r2, fp
 800cf00:	462f      	mov	r7, r5
 800cf02:	46d9      	mov	r9, fp
 800cf04:	bfcc      	ite	gt
 800cf06:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cf0a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cf0e:	464b      	mov	r3, r9
 800cf10:	4652      	mov	r2, sl
 800cf12:	4620      	mov	r0, r4
 800cf14:	4639      	mov	r1, r7
 800cf16:	f7f3 fcc1 	bl	800089c <__aeabi_ddiv>
 800cf1a:	ec41 0b10 	vmov	d0, r0, r1
 800cf1e:	b005      	add	sp, #20
 800cf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf24 <__copybits>:
 800cf24:	3901      	subs	r1, #1
 800cf26:	b570      	push	{r4, r5, r6, lr}
 800cf28:	1149      	asrs	r1, r1, #5
 800cf2a:	6914      	ldr	r4, [r2, #16]
 800cf2c:	3101      	adds	r1, #1
 800cf2e:	f102 0314 	add.w	r3, r2, #20
 800cf32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cf36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cf3a:	1f05      	subs	r5, r0, #4
 800cf3c:	42a3      	cmp	r3, r4
 800cf3e:	d30c      	bcc.n	800cf5a <__copybits+0x36>
 800cf40:	1aa3      	subs	r3, r4, r2
 800cf42:	3b11      	subs	r3, #17
 800cf44:	f023 0303 	bic.w	r3, r3, #3
 800cf48:	3211      	adds	r2, #17
 800cf4a:	42a2      	cmp	r2, r4
 800cf4c:	bf88      	it	hi
 800cf4e:	2300      	movhi	r3, #0
 800cf50:	4418      	add	r0, r3
 800cf52:	2300      	movs	r3, #0
 800cf54:	4288      	cmp	r0, r1
 800cf56:	d305      	bcc.n	800cf64 <__copybits+0x40>
 800cf58:	bd70      	pop	{r4, r5, r6, pc}
 800cf5a:	f853 6b04 	ldr.w	r6, [r3], #4
 800cf5e:	f845 6f04 	str.w	r6, [r5, #4]!
 800cf62:	e7eb      	b.n	800cf3c <__copybits+0x18>
 800cf64:	f840 3b04 	str.w	r3, [r0], #4
 800cf68:	e7f4      	b.n	800cf54 <__copybits+0x30>

0800cf6a <__any_on>:
 800cf6a:	f100 0214 	add.w	r2, r0, #20
 800cf6e:	6900      	ldr	r0, [r0, #16]
 800cf70:	114b      	asrs	r3, r1, #5
 800cf72:	4298      	cmp	r0, r3
 800cf74:	b510      	push	{r4, lr}
 800cf76:	db11      	blt.n	800cf9c <__any_on+0x32>
 800cf78:	dd0a      	ble.n	800cf90 <__any_on+0x26>
 800cf7a:	f011 011f 	ands.w	r1, r1, #31
 800cf7e:	d007      	beq.n	800cf90 <__any_on+0x26>
 800cf80:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cf84:	fa24 f001 	lsr.w	r0, r4, r1
 800cf88:	fa00 f101 	lsl.w	r1, r0, r1
 800cf8c:	428c      	cmp	r4, r1
 800cf8e:	d10b      	bne.n	800cfa8 <__any_on+0x3e>
 800cf90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d803      	bhi.n	800cfa0 <__any_on+0x36>
 800cf98:	2000      	movs	r0, #0
 800cf9a:	bd10      	pop	{r4, pc}
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	e7f7      	b.n	800cf90 <__any_on+0x26>
 800cfa0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cfa4:	2900      	cmp	r1, #0
 800cfa6:	d0f5      	beq.n	800cf94 <__any_on+0x2a>
 800cfa8:	2001      	movs	r0, #1
 800cfaa:	e7f6      	b.n	800cf9a <__any_on+0x30>

0800cfac <sulp>:
 800cfac:	b570      	push	{r4, r5, r6, lr}
 800cfae:	4604      	mov	r4, r0
 800cfb0:	460d      	mov	r5, r1
 800cfb2:	ec45 4b10 	vmov	d0, r4, r5
 800cfb6:	4616      	mov	r6, r2
 800cfb8:	f7ff feba 	bl	800cd30 <__ulp>
 800cfbc:	ec51 0b10 	vmov	r0, r1, d0
 800cfc0:	b17e      	cbz	r6, 800cfe2 <sulp+0x36>
 800cfc2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cfc6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	dd09      	ble.n	800cfe2 <sulp+0x36>
 800cfce:	051b      	lsls	r3, r3, #20
 800cfd0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cfd4:	2400      	movs	r4, #0
 800cfd6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cfda:	4622      	mov	r2, r4
 800cfdc:	462b      	mov	r3, r5
 800cfde:	f7f3 fb33 	bl	8000648 <__aeabi_dmul>
 800cfe2:	ec41 0b10 	vmov	d0, r0, r1
 800cfe6:	bd70      	pop	{r4, r5, r6, pc}

0800cfe8 <_strtod_l>:
 800cfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfec:	b09f      	sub	sp, #124	@ 0x7c
 800cfee:	460c      	mov	r4, r1
 800cff0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cff2:	2200      	movs	r2, #0
 800cff4:	921a      	str	r2, [sp, #104]	@ 0x68
 800cff6:	9005      	str	r0, [sp, #20]
 800cff8:	f04f 0a00 	mov.w	sl, #0
 800cffc:	f04f 0b00 	mov.w	fp, #0
 800d000:	460a      	mov	r2, r1
 800d002:	9219      	str	r2, [sp, #100]	@ 0x64
 800d004:	7811      	ldrb	r1, [r2, #0]
 800d006:	292b      	cmp	r1, #43	@ 0x2b
 800d008:	d04a      	beq.n	800d0a0 <_strtod_l+0xb8>
 800d00a:	d838      	bhi.n	800d07e <_strtod_l+0x96>
 800d00c:	290d      	cmp	r1, #13
 800d00e:	d832      	bhi.n	800d076 <_strtod_l+0x8e>
 800d010:	2908      	cmp	r1, #8
 800d012:	d832      	bhi.n	800d07a <_strtod_l+0x92>
 800d014:	2900      	cmp	r1, #0
 800d016:	d03b      	beq.n	800d090 <_strtod_l+0xa8>
 800d018:	2200      	movs	r2, #0
 800d01a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d01c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d01e:	782a      	ldrb	r2, [r5, #0]
 800d020:	2a30      	cmp	r2, #48	@ 0x30
 800d022:	f040 80b3 	bne.w	800d18c <_strtod_l+0x1a4>
 800d026:	786a      	ldrb	r2, [r5, #1]
 800d028:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d02c:	2a58      	cmp	r2, #88	@ 0x58
 800d02e:	d16e      	bne.n	800d10e <_strtod_l+0x126>
 800d030:	9302      	str	r3, [sp, #8]
 800d032:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d034:	9301      	str	r3, [sp, #4]
 800d036:	ab1a      	add	r3, sp, #104	@ 0x68
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	4a8e      	ldr	r2, [pc, #568]	@ (800d274 <_strtod_l+0x28c>)
 800d03c:	9805      	ldr	r0, [sp, #20]
 800d03e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d040:	a919      	add	r1, sp, #100	@ 0x64
 800d042:	f001 f91b 	bl	800e27c <__gethex>
 800d046:	f010 060f 	ands.w	r6, r0, #15
 800d04a:	4604      	mov	r4, r0
 800d04c:	d005      	beq.n	800d05a <_strtod_l+0x72>
 800d04e:	2e06      	cmp	r6, #6
 800d050:	d128      	bne.n	800d0a4 <_strtod_l+0xbc>
 800d052:	3501      	adds	r5, #1
 800d054:	2300      	movs	r3, #0
 800d056:	9519      	str	r5, [sp, #100]	@ 0x64
 800d058:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d05a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	f040 858e 	bne.w	800db7e <_strtod_l+0xb96>
 800d062:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d064:	b1cb      	cbz	r3, 800d09a <_strtod_l+0xb2>
 800d066:	4652      	mov	r2, sl
 800d068:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d06c:	ec43 2b10 	vmov	d0, r2, r3
 800d070:	b01f      	add	sp, #124	@ 0x7c
 800d072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d076:	2920      	cmp	r1, #32
 800d078:	d1ce      	bne.n	800d018 <_strtod_l+0x30>
 800d07a:	3201      	adds	r2, #1
 800d07c:	e7c1      	b.n	800d002 <_strtod_l+0x1a>
 800d07e:	292d      	cmp	r1, #45	@ 0x2d
 800d080:	d1ca      	bne.n	800d018 <_strtod_l+0x30>
 800d082:	2101      	movs	r1, #1
 800d084:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d086:	1c51      	adds	r1, r2, #1
 800d088:	9119      	str	r1, [sp, #100]	@ 0x64
 800d08a:	7852      	ldrb	r2, [r2, #1]
 800d08c:	2a00      	cmp	r2, #0
 800d08e:	d1c5      	bne.n	800d01c <_strtod_l+0x34>
 800d090:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d092:	9419      	str	r4, [sp, #100]	@ 0x64
 800d094:	2b00      	cmp	r3, #0
 800d096:	f040 8570 	bne.w	800db7a <_strtod_l+0xb92>
 800d09a:	4652      	mov	r2, sl
 800d09c:	465b      	mov	r3, fp
 800d09e:	e7e5      	b.n	800d06c <_strtod_l+0x84>
 800d0a0:	2100      	movs	r1, #0
 800d0a2:	e7ef      	b.n	800d084 <_strtod_l+0x9c>
 800d0a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d0a6:	b13a      	cbz	r2, 800d0b8 <_strtod_l+0xd0>
 800d0a8:	2135      	movs	r1, #53	@ 0x35
 800d0aa:	a81c      	add	r0, sp, #112	@ 0x70
 800d0ac:	f7ff ff3a 	bl	800cf24 <__copybits>
 800d0b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0b2:	9805      	ldr	r0, [sp, #20]
 800d0b4:	f7ff fb08 	bl	800c6c8 <_Bfree>
 800d0b8:	3e01      	subs	r6, #1
 800d0ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d0bc:	2e04      	cmp	r6, #4
 800d0be:	d806      	bhi.n	800d0ce <_strtod_l+0xe6>
 800d0c0:	e8df f006 	tbb	[pc, r6]
 800d0c4:	201d0314 	.word	0x201d0314
 800d0c8:	14          	.byte	0x14
 800d0c9:	00          	.byte	0x00
 800d0ca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d0ce:	05e1      	lsls	r1, r4, #23
 800d0d0:	bf48      	it	mi
 800d0d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d0d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d0da:	0d1b      	lsrs	r3, r3, #20
 800d0dc:	051b      	lsls	r3, r3, #20
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1bb      	bne.n	800d05a <_strtod_l+0x72>
 800d0e2:	f7fe fb23 	bl	800b72c <__errno>
 800d0e6:	2322      	movs	r3, #34	@ 0x22
 800d0e8:	6003      	str	r3, [r0, #0]
 800d0ea:	e7b6      	b.n	800d05a <_strtod_l+0x72>
 800d0ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d0f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d0f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d0f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d0fc:	e7e7      	b.n	800d0ce <_strtod_l+0xe6>
 800d0fe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d27c <_strtod_l+0x294>
 800d102:	e7e4      	b.n	800d0ce <_strtod_l+0xe6>
 800d104:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d108:	f04f 3aff 	mov.w	sl, #4294967295
 800d10c:	e7df      	b.n	800d0ce <_strtod_l+0xe6>
 800d10e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d110:	1c5a      	adds	r2, r3, #1
 800d112:	9219      	str	r2, [sp, #100]	@ 0x64
 800d114:	785b      	ldrb	r3, [r3, #1]
 800d116:	2b30      	cmp	r3, #48	@ 0x30
 800d118:	d0f9      	beq.n	800d10e <_strtod_l+0x126>
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d09d      	beq.n	800d05a <_strtod_l+0x72>
 800d11e:	2301      	movs	r3, #1
 800d120:	9309      	str	r3, [sp, #36]	@ 0x24
 800d122:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d124:	930c      	str	r3, [sp, #48]	@ 0x30
 800d126:	2300      	movs	r3, #0
 800d128:	9308      	str	r3, [sp, #32]
 800d12a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d12c:	461f      	mov	r7, r3
 800d12e:	220a      	movs	r2, #10
 800d130:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d132:	7805      	ldrb	r5, [r0, #0]
 800d134:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d138:	b2d9      	uxtb	r1, r3
 800d13a:	2909      	cmp	r1, #9
 800d13c:	d928      	bls.n	800d190 <_strtod_l+0x1a8>
 800d13e:	494e      	ldr	r1, [pc, #312]	@ (800d278 <_strtod_l+0x290>)
 800d140:	2201      	movs	r2, #1
 800d142:	f000 ffd5 	bl	800e0f0 <strncmp>
 800d146:	2800      	cmp	r0, #0
 800d148:	d032      	beq.n	800d1b0 <_strtod_l+0x1c8>
 800d14a:	2000      	movs	r0, #0
 800d14c:	462a      	mov	r2, r5
 800d14e:	4681      	mov	r9, r0
 800d150:	463d      	mov	r5, r7
 800d152:	4603      	mov	r3, r0
 800d154:	2a65      	cmp	r2, #101	@ 0x65
 800d156:	d001      	beq.n	800d15c <_strtod_l+0x174>
 800d158:	2a45      	cmp	r2, #69	@ 0x45
 800d15a:	d114      	bne.n	800d186 <_strtod_l+0x19e>
 800d15c:	b91d      	cbnz	r5, 800d166 <_strtod_l+0x17e>
 800d15e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d160:	4302      	orrs	r2, r0
 800d162:	d095      	beq.n	800d090 <_strtod_l+0xa8>
 800d164:	2500      	movs	r5, #0
 800d166:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d168:	1c62      	adds	r2, r4, #1
 800d16a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d16c:	7862      	ldrb	r2, [r4, #1]
 800d16e:	2a2b      	cmp	r2, #43	@ 0x2b
 800d170:	d077      	beq.n	800d262 <_strtod_l+0x27a>
 800d172:	2a2d      	cmp	r2, #45	@ 0x2d
 800d174:	d07b      	beq.n	800d26e <_strtod_l+0x286>
 800d176:	f04f 0c00 	mov.w	ip, #0
 800d17a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d17e:	2909      	cmp	r1, #9
 800d180:	f240 8082 	bls.w	800d288 <_strtod_l+0x2a0>
 800d184:	9419      	str	r4, [sp, #100]	@ 0x64
 800d186:	f04f 0800 	mov.w	r8, #0
 800d18a:	e0a2      	b.n	800d2d2 <_strtod_l+0x2ea>
 800d18c:	2300      	movs	r3, #0
 800d18e:	e7c7      	b.n	800d120 <_strtod_l+0x138>
 800d190:	2f08      	cmp	r7, #8
 800d192:	bfd5      	itete	le
 800d194:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d196:	9908      	ldrgt	r1, [sp, #32]
 800d198:	fb02 3301 	mlale	r3, r2, r1, r3
 800d19c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d1a0:	f100 0001 	add.w	r0, r0, #1
 800d1a4:	bfd4      	ite	le
 800d1a6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d1a8:	9308      	strgt	r3, [sp, #32]
 800d1aa:	3701      	adds	r7, #1
 800d1ac:	9019      	str	r0, [sp, #100]	@ 0x64
 800d1ae:	e7bf      	b.n	800d130 <_strtod_l+0x148>
 800d1b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1b2:	1c5a      	adds	r2, r3, #1
 800d1b4:	9219      	str	r2, [sp, #100]	@ 0x64
 800d1b6:	785a      	ldrb	r2, [r3, #1]
 800d1b8:	b37f      	cbz	r7, 800d21a <_strtod_l+0x232>
 800d1ba:	4681      	mov	r9, r0
 800d1bc:	463d      	mov	r5, r7
 800d1be:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d1c2:	2b09      	cmp	r3, #9
 800d1c4:	d912      	bls.n	800d1ec <_strtod_l+0x204>
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e7c4      	b.n	800d154 <_strtod_l+0x16c>
 800d1ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1cc:	1c5a      	adds	r2, r3, #1
 800d1ce:	9219      	str	r2, [sp, #100]	@ 0x64
 800d1d0:	785a      	ldrb	r2, [r3, #1]
 800d1d2:	3001      	adds	r0, #1
 800d1d4:	2a30      	cmp	r2, #48	@ 0x30
 800d1d6:	d0f8      	beq.n	800d1ca <_strtod_l+0x1e2>
 800d1d8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d1dc:	2b08      	cmp	r3, #8
 800d1de:	f200 84d3 	bhi.w	800db88 <_strtod_l+0xba0>
 800d1e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d1e6:	4681      	mov	r9, r0
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	4605      	mov	r5, r0
 800d1ec:	3a30      	subs	r2, #48	@ 0x30
 800d1ee:	f100 0301 	add.w	r3, r0, #1
 800d1f2:	d02a      	beq.n	800d24a <_strtod_l+0x262>
 800d1f4:	4499      	add	r9, r3
 800d1f6:	eb00 0c05 	add.w	ip, r0, r5
 800d1fa:	462b      	mov	r3, r5
 800d1fc:	210a      	movs	r1, #10
 800d1fe:	4563      	cmp	r3, ip
 800d200:	d10d      	bne.n	800d21e <_strtod_l+0x236>
 800d202:	1c69      	adds	r1, r5, #1
 800d204:	4401      	add	r1, r0
 800d206:	4428      	add	r0, r5
 800d208:	2808      	cmp	r0, #8
 800d20a:	dc16      	bgt.n	800d23a <_strtod_l+0x252>
 800d20c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d20e:	230a      	movs	r3, #10
 800d210:	fb03 2300 	mla	r3, r3, r0, r2
 800d214:	930a      	str	r3, [sp, #40]	@ 0x28
 800d216:	2300      	movs	r3, #0
 800d218:	e018      	b.n	800d24c <_strtod_l+0x264>
 800d21a:	4638      	mov	r0, r7
 800d21c:	e7da      	b.n	800d1d4 <_strtod_l+0x1ec>
 800d21e:	2b08      	cmp	r3, #8
 800d220:	f103 0301 	add.w	r3, r3, #1
 800d224:	dc03      	bgt.n	800d22e <_strtod_l+0x246>
 800d226:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d228:	434e      	muls	r6, r1
 800d22a:	960a      	str	r6, [sp, #40]	@ 0x28
 800d22c:	e7e7      	b.n	800d1fe <_strtod_l+0x216>
 800d22e:	2b10      	cmp	r3, #16
 800d230:	bfde      	ittt	le
 800d232:	9e08      	ldrle	r6, [sp, #32]
 800d234:	434e      	mulle	r6, r1
 800d236:	9608      	strle	r6, [sp, #32]
 800d238:	e7e1      	b.n	800d1fe <_strtod_l+0x216>
 800d23a:	280f      	cmp	r0, #15
 800d23c:	dceb      	bgt.n	800d216 <_strtod_l+0x22e>
 800d23e:	9808      	ldr	r0, [sp, #32]
 800d240:	230a      	movs	r3, #10
 800d242:	fb03 2300 	mla	r3, r3, r0, r2
 800d246:	9308      	str	r3, [sp, #32]
 800d248:	e7e5      	b.n	800d216 <_strtod_l+0x22e>
 800d24a:	4629      	mov	r1, r5
 800d24c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d24e:	1c50      	adds	r0, r2, #1
 800d250:	9019      	str	r0, [sp, #100]	@ 0x64
 800d252:	7852      	ldrb	r2, [r2, #1]
 800d254:	4618      	mov	r0, r3
 800d256:	460d      	mov	r5, r1
 800d258:	e7b1      	b.n	800d1be <_strtod_l+0x1d6>
 800d25a:	f04f 0900 	mov.w	r9, #0
 800d25e:	2301      	movs	r3, #1
 800d260:	e77d      	b.n	800d15e <_strtod_l+0x176>
 800d262:	f04f 0c00 	mov.w	ip, #0
 800d266:	1ca2      	adds	r2, r4, #2
 800d268:	9219      	str	r2, [sp, #100]	@ 0x64
 800d26a:	78a2      	ldrb	r2, [r4, #2]
 800d26c:	e785      	b.n	800d17a <_strtod_l+0x192>
 800d26e:	f04f 0c01 	mov.w	ip, #1
 800d272:	e7f8      	b.n	800d266 <_strtod_l+0x27e>
 800d274:	0800f0d0 	.word	0x0800f0d0
 800d278:	0800f0b8 	.word	0x0800f0b8
 800d27c:	7ff00000 	.word	0x7ff00000
 800d280:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d282:	1c51      	adds	r1, r2, #1
 800d284:	9119      	str	r1, [sp, #100]	@ 0x64
 800d286:	7852      	ldrb	r2, [r2, #1]
 800d288:	2a30      	cmp	r2, #48	@ 0x30
 800d28a:	d0f9      	beq.n	800d280 <_strtod_l+0x298>
 800d28c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d290:	2908      	cmp	r1, #8
 800d292:	f63f af78 	bhi.w	800d186 <_strtod_l+0x19e>
 800d296:	3a30      	subs	r2, #48	@ 0x30
 800d298:	920e      	str	r2, [sp, #56]	@ 0x38
 800d29a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d29c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d29e:	f04f 080a 	mov.w	r8, #10
 800d2a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d2a4:	1c56      	adds	r6, r2, #1
 800d2a6:	9619      	str	r6, [sp, #100]	@ 0x64
 800d2a8:	7852      	ldrb	r2, [r2, #1]
 800d2aa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d2ae:	f1be 0f09 	cmp.w	lr, #9
 800d2b2:	d939      	bls.n	800d328 <_strtod_l+0x340>
 800d2b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d2b6:	1a76      	subs	r6, r6, r1
 800d2b8:	2e08      	cmp	r6, #8
 800d2ba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d2be:	dc03      	bgt.n	800d2c8 <_strtod_l+0x2e0>
 800d2c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d2c2:	4588      	cmp	r8, r1
 800d2c4:	bfa8      	it	ge
 800d2c6:	4688      	movge	r8, r1
 800d2c8:	f1bc 0f00 	cmp.w	ip, #0
 800d2cc:	d001      	beq.n	800d2d2 <_strtod_l+0x2ea>
 800d2ce:	f1c8 0800 	rsb	r8, r8, #0
 800d2d2:	2d00      	cmp	r5, #0
 800d2d4:	d14e      	bne.n	800d374 <_strtod_l+0x38c>
 800d2d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d2d8:	4308      	orrs	r0, r1
 800d2da:	f47f aebe 	bne.w	800d05a <_strtod_l+0x72>
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f47f aed6 	bne.w	800d090 <_strtod_l+0xa8>
 800d2e4:	2a69      	cmp	r2, #105	@ 0x69
 800d2e6:	d028      	beq.n	800d33a <_strtod_l+0x352>
 800d2e8:	dc25      	bgt.n	800d336 <_strtod_l+0x34e>
 800d2ea:	2a49      	cmp	r2, #73	@ 0x49
 800d2ec:	d025      	beq.n	800d33a <_strtod_l+0x352>
 800d2ee:	2a4e      	cmp	r2, #78	@ 0x4e
 800d2f0:	f47f aece 	bne.w	800d090 <_strtod_l+0xa8>
 800d2f4:	499b      	ldr	r1, [pc, #620]	@ (800d564 <_strtod_l+0x57c>)
 800d2f6:	a819      	add	r0, sp, #100	@ 0x64
 800d2f8:	f001 f9e2 	bl	800e6c0 <__match>
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	f43f aec7 	beq.w	800d090 <_strtod_l+0xa8>
 800d302:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	2b28      	cmp	r3, #40	@ 0x28
 800d308:	d12e      	bne.n	800d368 <_strtod_l+0x380>
 800d30a:	4997      	ldr	r1, [pc, #604]	@ (800d568 <_strtod_l+0x580>)
 800d30c:	aa1c      	add	r2, sp, #112	@ 0x70
 800d30e:	a819      	add	r0, sp, #100	@ 0x64
 800d310:	f001 f9ea 	bl	800e6e8 <__hexnan>
 800d314:	2805      	cmp	r0, #5
 800d316:	d127      	bne.n	800d368 <_strtod_l+0x380>
 800d318:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d31a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d31e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d322:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d326:	e698      	b.n	800d05a <_strtod_l+0x72>
 800d328:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d32a:	fb08 2101 	mla	r1, r8, r1, r2
 800d32e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d332:	920e      	str	r2, [sp, #56]	@ 0x38
 800d334:	e7b5      	b.n	800d2a2 <_strtod_l+0x2ba>
 800d336:	2a6e      	cmp	r2, #110	@ 0x6e
 800d338:	e7da      	b.n	800d2f0 <_strtod_l+0x308>
 800d33a:	498c      	ldr	r1, [pc, #560]	@ (800d56c <_strtod_l+0x584>)
 800d33c:	a819      	add	r0, sp, #100	@ 0x64
 800d33e:	f001 f9bf 	bl	800e6c0 <__match>
 800d342:	2800      	cmp	r0, #0
 800d344:	f43f aea4 	beq.w	800d090 <_strtod_l+0xa8>
 800d348:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d34a:	4989      	ldr	r1, [pc, #548]	@ (800d570 <_strtod_l+0x588>)
 800d34c:	3b01      	subs	r3, #1
 800d34e:	a819      	add	r0, sp, #100	@ 0x64
 800d350:	9319      	str	r3, [sp, #100]	@ 0x64
 800d352:	f001 f9b5 	bl	800e6c0 <__match>
 800d356:	b910      	cbnz	r0, 800d35e <_strtod_l+0x376>
 800d358:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d35a:	3301      	adds	r3, #1
 800d35c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d35e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d580 <_strtod_l+0x598>
 800d362:	f04f 0a00 	mov.w	sl, #0
 800d366:	e678      	b.n	800d05a <_strtod_l+0x72>
 800d368:	4882      	ldr	r0, [pc, #520]	@ (800d574 <_strtod_l+0x58c>)
 800d36a:	f000 fee5 	bl	800e138 <nan>
 800d36e:	ec5b ab10 	vmov	sl, fp, d0
 800d372:	e672      	b.n	800d05a <_strtod_l+0x72>
 800d374:	eba8 0309 	sub.w	r3, r8, r9
 800d378:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d37a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d37c:	2f00      	cmp	r7, #0
 800d37e:	bf08      	it	eq
 800d380:	462f      	moveq	r7, r5
 800d382:	2d10      	cmp	r5, #16
 800d384:	462c      	mov	r4, r5
 800d386:	bfa8      	it	ge
 800d388:	2410      	movge	r4, #16
 800d38a:	f7f3 f8e3 	bl	8000554 <__aeabi_ui2d>
 800d38e:	2d09      	cmp	r5, #9
 800d390:	4682      	mov	sl, r0
 800d392:	468b      	mov	fp, r1
 800d394:	dc13      	bgt.n	800d3be <_strtod_l+0x3d6>
 800d396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d398:	2b00      	cmp	r3, #0
 800d39a:	f43f ae5e 	beq.w	800d05a <_strtod_l+0x72>
 800d39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3a0:	dd78      	ble.n	800d494 <_strtod_l+0x4ac>
 800d3a2:	2b16      	cmp	r3, #22
 800d3a4:	dc5f      	bgt.n	800d466 <_strtod_l+0x47e>
 800d3a6:	4974      	ldr	r1, [pc, #464]	@ (800d578 <_strtod_l+0x590>)
 800d3a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d3ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3b0:	4652      	mov	r2, sl
 800d3b2:	465b      	mov	r3, fp
 800d3b4:	f7f3 f948 	bl	8000648 <__aeabi_dmul>
 800d3b8:	4682      	mov	sl, r0
 800d3ba:	468b      	mov	fp, r1
 800d3bc:	e64d      	b.n	800d05a <_strtod_l+0x72>
 800d3be:	4b6e      	ldr	r3, [pc, #440]	@ (800d578 <_strtod_l+0x590>)
 800d3c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d3c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d3c8:	f7f3 f93e 	bl	8000648 <__aeabi_dmul>
 800d3cc:	4682      	mov	sl, r0
 800d3ce:	9808      	ldr	r0, [sp, #32]
 800d3d0:	468b      	mov	fp, r1
 800d3d2:	f7f3 f8bf 	bl	8000554 <__aeabi_ui2d>
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	460b      	mov	r3, r1
 800d3da:	4650      	mov	r0, sl
 800d3dc:	4659      	mov	r1, fp
 800d3de:	f7f2 ff7d 	bl	80002dc <__adddf3>
 800d3e2:	2d0f      	cmp	r5, #15
 800d3e4:	4682      	mov	sl, r0
 800d3e6:	468b      	mov	fp, r1
 800d3e8:	ddd5      	ble.n	800d396 <_strtod_l+0x3ae>
 800d3ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3ec:	1b2c      	subs	r4, r5, r4
 800d3ee:	441c      	add	r4, r3
 800d3f0:	2c00      	cmp	r4, #0
 800d3f2:	f340 8096 	ble.w	800d522 <_strtod_l+0x53a>
 800d3f6:	f014 030f 	ands.w	r3, r4, #15
 800d3fa:	d00a      	beq.n	800d412 <_strtod_l+0x42a>
 800d3fc:	495e      	ldr	r1, [pc, #376]	@ (800d578 <_strtod_l+0x590>)
 800d3fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d402:	4652      	mov	r2, sl
 800d404:	465b      	mov	r3, fp
 800d406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d40a:	f7f3 f91d 	bl	8000648 <__aeabi_dmul>
 800d40e:	4682      	mov	sl, r0
 800d410:	468b      	mov	fp, r1
 800d412:	f034 040f 	bics.w	r4, r4, #15
 800d416:	d073      	beq.n	800d500 <_strtod_l+0x518>
 800d418:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d41c:	dd48      	ble.n	800d4b0 <_strtod_l+0x4c8>
 800d41e:	2400      	movs	r4, #0
 800d420:	46a0      	mov	r8, r4
 800d422:	940a      	str	r4, [sp, #40]	@ 0x28
 800d424:	46a1      	mov	r9, r4
 800d426:	9a05      	ldr	r2, [sp, #20]
 800d428:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d580 <_strtod_l+0x598>
 800d42c:	2322      	movs	r3, #34	@ 0x22
 800d42e:	6013      	str	r3, [r2, #0]
 800d430:	f04f 0a00 	mov.w	sl, #0
 800d434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d436:	2b00      	cmp	r3, #0
 800d438:	f43f ae0f 	beq.w	800d05a <_strtod_l+0x72>
 800d43c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d43e:	9805      	ldr	r0, [sp, #20]
 800d440:	f7ff f942 	bl	800c6c8 <_Bfree>
 800d444:	9805      	ldr	r0, [sp, #20]
 800d446:	4649      	mov	r1, r9
 800d448:	f7ff f93e 	bl	800c6c8 <_Bfree>
 800d44c:	9805      	ldr	r0, [sp, #20]
 800d44e:	4641      	mov	r1, r8
 800d450:	f7ff f93a 	bl	800c6c8 <_Bfree>
 800d454:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d456:	9805      	ldr	r0, [sp, #20]
 800d458:	f7ff f936 	bl	800c6c8 <_Bfree>
 800d45c:	9805      	ldr	r0, [sp, #20]
 800d45e:	4621      	mov	r1, r4
 800d460:	f7ff f932 	bl	800c6c8 <_Bfree>
 800d464:	e5f9      	b.n	800d05a <_strtod_l+0x72>
 800d466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d468:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d46c:	4293      	cmp	r3, r2
 800d46e:	dbbc      	blt.n	800d3ea <_strtod_l+0x402>
 800d470:	4c41      	ldr	r4, [pc, #260]	@ (800d578 <_strtod_l+0x590>)
 800d472:	f1c5 050f 	rsb	r5, r5, #15
 800d476:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d47a:	4652      	mov	r2, sl
 800d47c:	465b      	mov	r3, fp
 800d47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d482:	f7f3 f8e1 	bl	8000648 <__aeabi_dmul>
 800d486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d488:	1b5d      	subs	r5, r3, r5
 800d48a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d48e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d492:	e78f      	b.n	800d3b4 <_strtod_l+0x3cc>
 800d494:	3316      	adds	r3, #22
 800d496:	dba8      	blt.n	800d3ea <_strtod_l+0x402>
 800d498:	4b37      	ldr	r3, [pc, #220]	@ (800d578 <_strtod_l+0x590>)
 800d49a:	eba9 0808 	sub.w	r8, r9, r8
 800d49e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d4a2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d4a6:	4650      	mov	r0, sl
 800d4a8:	4659      	mov	r1, fp
 800d4aa:	f7f3 f9f7 	bl	800089c <__aeabi_ddiv>
 800d4ae:	e783      	b.n	800d3b8 <_strtod_l+0x3d0>
 800d4b0:	4b32      	ldr	r3, [pc, #200]	@ (800d57c <_strtod_l+0x594>)
 800d4b2:	9308      	str	r3, [sp, #32]
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	1124      	asrs	r4, r4, #4
 800d4b8:	4650      	mov	r0, sl
 800d4ba:	4659      	mov	r1, fp
 800d4bc:	461e      	mov	r6, r3
 800d4be:	2c01      	cmp	r4, #1
 800d4c0:	dc21      	bgt.n	800d506 <_strtod_l+0x51e>
 800d4c2:	b10b      	cbz	r3, 800d4c8 <_strtod_l+0x4e0>
 800d4c4:	4682      	mov	sl, r0
 800d4c6:	468b      	mov	fp, r1
 800d4c8:	492c      	ldr	r1, [pc, #176]	@ (800d57c <_strtod_l+0x594>)
 800d4ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d4ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d4d2:	4652      	mov	r2, sl
 800d4d4:	465b      	mov	r3, fp
 800d4d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4da:	f7f3 f8b5 	bl	8000648 <__aeabi_dmul>
 800d4de:	4b28      	ldr	r3, [pc, #160]	@ (800d580 <_strtod_l+0x598>)
 800d4e0:	460a      	mov	r2, r1
 800d4e2:	400b      	ands	r3, r1
 800d4e4:	4927      	ldr	r1, [pc, #156]	@ (800d584 <_strtod_l+0x59c>)
 800d4e6:	428b      	cmp	r3, r1
 800d4e8:	4682      	mov	sl, r0
 800d4ea:	d898      	bhi.n	800d41e <_strtod_l+0x436>
 800d4ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d4f0:	428b      	cmp	r3, r1
 800d4f2:	bf86      	itte	hi
 800d4f4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d588 <_strtod_l+0x5a0>
 800d4f8:	f04f 3aff 	movhi.w	sl, #4294967295
 800d4fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d500:	2300      	movs	r3, #0
 800d502:	9308      	str	r3, [sp, #32]
 800d504:	e07a      	b.n	800d5fc <_strtod_l+0x614>
 800d506:	07e2      	lsls	r2, r4, #31
 800d508:	d505      	bpl.n	800d516 <_strtod_l+0x52e>
 800d50a:	9b08      	ldr	r3, [sp, #32]
 800d50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d510:	f7f3 f89a 	bl	8000648 <__aeabi_dmul>
 800d514:	2301      	movs	r3, #1
 800d516:	9a08      	ldr	r2, [sp, #32]
 800d518:	3208      	adds	r2, #8
 800d51a:	3601      	adds	r6, #1
 800d51c:	1064      	asrs	r4, r4, #1
 800d51e:	9208      	str	r2, [sp, #32]
 800d520:	e7cd      	b.n	800d4be <_strtod_l+0x4d6>
 800d522:	d0ed      	beq.n	800d500 <_strtod_l+0x518>
 800d524:	4264      	negs	r4, r4
 800d526:	f014 020f 	ands.w	r2, r4, #15
 800d52a:	d00a      	beq.n	800d542 <_strtod_l+0x55a>
 800d52c:	4b12      	ldr	r3, [pc, #72]	@ (800d578 <_strtod_l+0x590>)
 800d52e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d532:	4650      	mov	r0, sl
 800d534:	4659      	mov	r1, fp
 800d536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53a:	f7f3 f9af 	bl	800089c <__aeabi_ddiv>
 800d53e:	4682      	mov	sl, r0
 800d540:	468b      	mov	fp, r1
 800d542:	1124      	asrs	r4, r4, #4
 800d544:	d0dc      	beq.n	800d500 <_strtod_l+0x518>
 800d546:	2c1f      	cmp	r4, #31
 800d548:	dd20      	ble.n	800d58c <_strtod_l+0x5a4>
 800d54a:	2400      	movs	r4, #0
 800d54c:	46a0      	mov	r8, r4
 800d54e:	940a      	str	r4, [sp, #40]	@ 0x28
 800d550:	46a1      	mov	r9, r4
 800d552:	9a05      	ldr	r2, [sp, #20]
 800d554:	2322      	movs	r3, #34	@ 0x22
 800d556:	f04f 0a00 	mov.w	sl, #0
 800d55a:	f04f 0b00 	mov.w	fp, #0
 800d55e:	6013      	str	r3, [r2, #0]
 800d560:	e768      	b.n	800d434 <_strtod_l+0x44c>
 800d562:	bf00      	nop
 800d564:	0800eea4 	.word	0x0800eea4
 800d568:	0800f0bc 	.word	0x0800f0bc
 800d56c:	0800ee9c 	.word	0x0800ee9c
 800d570:	0800eed3 	.word	0x0800eed3
 800d574:	0800f265 	.word	0x0800f265
 800d578:	0800eff0 	.word	0x0800eff0
 800d57c:	0800efc8 	.word	0x0800efc8
 800d580:	7ff00000 	.word	0x7ff00000
 800d584:	7ca00000 	.word	0x7ca00000
 800d588:	7fefffff 	.word	0x7fefffff
 800d58c:	f014 0310 	ands.w	r3, r4, #16
 800d590:	bf18      	it	ne
 800d592:	236a      	movne	r3, #106	@ 0x6a
 800d594:	4ea9      	ldr	r6, [pc, #676]	@ (800d83c <_strtod_l+0x854>)
 800d596:	9308      	str	r3, [sp, #32]
 800d598:	4650      	mov	r0, sl
 800d59a:	4659      	mov	r1, fp
 800d59c:	2300      	movs	r3, #0
 800d59e:	07e2      	lsls	r2, r4, #31
 800d5a0:	d504      	bpl.n	800d5ac <_strtod_l+0x5c4>
 800d5a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d5a6:	f7f3 f84f 	bl	8000648 <__aeabi_dmul>
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	1064      	asrs	r4, r4, #1
 800d5ae:	f106 0608 	add.w	r6, r6, #8
 800d5b2:	d1f4      	bne.n	800d59e <_strtod_l+0x5b6>
 800d5b4:	b10b      	cbz	r3, 800d5ba <_strtod_l+0x5d2>
 800d5b6:	4682      	mov	sl, r0
 800d5b8:	468b      	mov	fp, r1
 800d5ba:	9b08      	ldr	r3, [sp, #32]
 800d5bc:	b1b3      	cbz	r3, 800d5ec <_strtod_l+0x604>
 800d5be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d5c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	4659      	mov	r1, fp
 800d5ca:	dd0f      	ble.n	800d5ec <_strtod_l+0x604>
 800d5cc:	2b1f      	cmp	r3, #31
 800d5ce:	dd55      	ble.n	800d67c <_strtod_l+0x694>
 800d5d0:	2b34      	cmp	r3, #52	@ 0x34
 800d5d2:	bfde      	ittt	le
 800d5d4:	f04f 33ff 	movle.w	r3, #4294967295
 800d5d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d5dc:	4093      	lslle	r3, r2
 800d5de:	f04f 0a00 	mov.w	sl, #0
 800d5e2:	bfcc      	ite	gt
 800d5e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d5e8:	ea03 0b01 	andle.w	fp, r3, r1
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	4650      	mov	r0, sl
 800d5f2:	4659      	mov	r1, fp
 800d5f4:	f7f3 fa90 	bl	8000b18 <__aeabi_dcmpeq>
 800d5f8:	2800      	cmp	r0, #0
 800d5fa:	d1a6      	bne.n	800d54a <_strtod_l+0x562>
 800d5fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5fe:	9300      	str	r3, [sp, #0]
 800d600:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d602:	9805      	ldr	r0, [sp, #20]
 800d604:	462b      	mov	r3, r5
 800d606:	463a      	mov	r2, r7
 800d608:	f7ff f8c6 	bl	800c798 <__s2b>
 800d60c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d60e:	2800      	cmp	r0, #0
 800d610:	f43f af05 	beq.w	800d41e <_strtod_l+0x436>
 800d614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d616:	2a00      	cmp	r2, #0
 800d618:	eba9 0308 	sub.w	r3, r9, r8
 800d61c:	bfa8      	it	ge
 800d61e:	2300      	movge	r3, #0
 800d620:	9312      	str	r3, [sp, #72]	@ 0x48
 800d622:	2400      	movs	r4, #0
 800d624:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d628:	9316      	str	r3, [sp, #88]	@ 0x58
 800d62a:	46a0      	mov	r8, r4
 800d62c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d62e:	9805      	ldr	r0, [sp, #20]
 800d630:	6859      	ldr	r1, [r3, #4]
 800d632:	f7ff f809 	bl	800c648 <_Balloc>
 800d636:	4681      	mov	r9, r0
 800d638:	2800      	cmp	r0, #0
 800d63a:	f43f aef4 	beq.w	800d426 <_strtod_l+0x43e>
 800d63e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d640:	691a      	ldr	r2, [r3, #16]
 800d642:	3202      	adds	r2, #2
 800d644:	f103 010c 	add.w	r1, r3, #12
 800d648:	0092      	lsls	r2, r2, #2
 800d64a:	300c      	adds	r0, #12
 800d64c:	f7fe f89b 	bl	800b786 <memcpy>
 800d650:	ec4b ab10 	vmov	d0, sl, fp
 800d654:	9805      	ldr	r0, [sp, #20]
 800d656:	aa1c      	add	r2, sp, #112	@ 0x70
 800d658:	a91b      	add	r1, sp, #108	@ 0x6c
 800d65a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d65e:	f7ff fbd7 	bl	800ce10 <__d2b>
 800d662:	901a      	str	r0, [sp, #104]	@ 0x68
 800d664:	2800      	cmp	r0, #0
 800d666:	f43f aede 	beq.w	800d426 <_strtod_l+0x43e>
 800d66a:	9805      	ldr	r0, [sp, #20]
 800d66c:	2101      	movs	r1, #1
 800d66e:	f7ff f929 	bl	800c8c4 <__i2b>
 800d672:	4680      	mov	r8, r0
 800d674:	b948      	cbnz	r0, 800d68a <_strtod_l+0x6a2>
 800d676:	f04f 0800 	mov.w	r8, #0
 800d67a:	e6d4      	b.n	800d426 <_strtod_l+0x43e>
 800d67c:	f04f 32ff 	mov.w	r2, #4294967295
 800d680:	fa02 f303 	lsl.w	r3, r2, r3
 800d684:	ea03 0a0a 	and.w	sl, r3, sl
 800d688:	e7b0      	b.n	800d5ec <_strtod_l+0x604>
 800d68a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d68c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d68e:	2d00      	cmp	r5, #0
 800d690:	bfab      	itete	ge
 800d692:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d694:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d696:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d698:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d69a:	bfac      	ite	ge
 800d69c:	18ef      	addge	r7, r5, r3
 800d69e:	1b5e      	sublt	r6, r3, r5
 800d6a0:	9b08      	ldr	r3, [sp, #32]
 800d6a2:	1aed      	subs	r5, r5, r3
 800d6a4:	4415      	add	r5, r2
 800d6a6:	4b66      	ldr	r3, [pc, #408]	@ (800d840 <_strtod_l+0x858>)
 800d6a8:	3d01      	subs	r5, #1
 800d6aa:	429d      	cmp	r5, r3
 800d6ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d6b0:	da50      	bge.n	800d754 <_strtod_l+0x76c>
 800d6b2:	1b5b      	subs	r3, r3, r5
 800d6b4:	2b1f      	cmp	r3, #31
 800d6b6:	eba2 0203 	sub.w	r2, r2, r3
 800d6ba:	f04f 0101 	mov.w	r1, #1
 800d6be:	dc3d      	bgt.n	800d73c <_strtod_l+0x754>
 800d6c0:	fa01 f303 	lsl.w	r3, r1, r3
 800d6c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800d6ca:	18bd      	adds	r5, r7, r2
 800d6cc:	9b08      	ldr	r3, [sp, #32]
 800d6ce:	42af      	cmp	r7, r5
 800d6d0:	4416      	add	r6, r2
 800d6d2:	441e      	add	r6, r3
 800d6d4:	463b      	mov	r3, r7
 800d6d6:	bfa8      	it	ge
 800d6d8:	462b      	movge	r3, r5
 800d6da:	42b3      	cmp	r3, r6
 800d6dc:	bfa8      	it	ge
 800d6de:	4633      	movge	r3, r6
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	bfc2      	ittt	gt
 800d6e4:	1aed      	subgt	r5, r5, r3
 800d6e6:	1af6      	subgt	r6, r6, r3
 800d6e8:	1aff      	subgt	r7, r7, r3
 800d6ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	dd16      	ble.n	800d71e <_strtod_l+0x736>
 800d6f0:	4641      	mov	r1, r8
 800d6f2:	9805      	ldr	r0, [sp, #20]
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	f7ff f9a5 	bl	800ca44 <__pow5mult>
 800d6fa:	4680      	mov	r8, r0
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d0ba      	beq.n	800d676 <_strtod_l+0x68e>
 800d700:	4601      	mov	r1, r0
 800d702:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d704:	9805      	ldr	r0, [sp, #20]
 800d706:	f7ff f8f3 	bl	800c8f0 <__multiply>
 800d70a:	900e      	str	r0, [sp, #56]	@ 0x38
 800d70c:	2800      	cmp	r0, #0
 800d70e:	f43f ae8a 	beq.w	800d426 <_strtod_l+0x43e>
 800d712:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d714:	9805      	ldr	r0, [sp, #20]
 800d716:	f7fe ffd7 	bl	800c6c8 <_Bfree>
 800d71a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d71c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d71e:	2d00      	cmp	r5, #0
 800d720:	dc1d      	bgt.n	800d75e <_strtod_l+0x776>
 800d722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d724:	2b00      	cmp	r3, #0
 800d726:	dd23      	ble.n	800d770 <_strtod_l+0x788>
 800d728:	4649      	mov	r1, r9
 800d72a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d72c:	9805      	ldr	r0, [sp, #20]
 800d72e:	f7ff f989 	bl	800ca44 <__pow5mult>
 800d732:	4681      	mov	r9, r0
 800d734:	b9e0      	cbnz	r0, 800d770 <_strtod_l+0x788>
 800d736:	f04f 0900 	mov.w	r9, #0
 800d73a:	e674      	b.n	800d426 <_strtod_l+0x43e>
 800d73c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d740:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d744:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d748:	35e2      	adds	r5, #226	@ 0xe2
 800d74a:	fa01 f305 	lsl.w	r3, r1, r5
 800d74e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d750:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d752:	e7ba      	b.n	800d6ca <_strtod_l+0x6e2>
 800d754:	2300      	movs	r3, #0
 800d756:	9310      	str	r3, [sp, #64]	@ 0x40
 800d758:	2301      	movs	r3, #1
 800d75a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d75c:	e7b5      	b.n	800d6ca <_strtod_l+0x6e2>
 800d75e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d760:	9805      	ldr	r0, [sp, #20]
 800d762:	462a      	mov	r2, r5
 800d764:	f7ff f9c8 	bl	800caf8 <__lshift>
 800d768:	901a      	str	r0, [sp, #104]	@ 0x68
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d1d9      	bne.n	800d722 <_strtod_l+0x73a>
 800d76e:	e65a      	b.n	800d426 <_strtod_l+0x43e>
 800d770:	2e00      	cmp	r6, #0
 800d772:	dd07      	ble.n	800d784 <_strtod_l+0x79c>
 800d774:	4649      	mov	r1, r9
 800d776:	9805      	ldr	r0, [sp, #20]
 800d778:	4632      	mov	r2, r6
 800d77a:	f7ff f9bd 	bl	800caf8 <__lshift>
 800d77e:	4681      	mov	r9, r0
 800d780:	2800      	cmp	r0, #0
 800d782:	d0d8      	beq.n	800d736 <_strtod_l+0x74e>
 800d784:	2f00      	cmp	r7, #0
 800d786:	dd08      	ble.n	800d79a <_strtod_l+0x7b2>
 800d788:	4641      	mov	r1, r8
 800d78a:	9805      	ldr	r0, [sp, #20]
 800d78c:	463a      	mov	r2, r7
 800d78e:	f7ff f9b3 	bl	800caf8 <__lshift>
 800d792:	4680      	mov	r8, r0
 800d794:	2800      	cmp	r0, #0
 800d796:	f43f ae46 	beq.w	800d426 <_strtod_l+0x43e>
 800d79a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d79c:	9805      	ldr	r0, [sp, #20]
 800d79e:	464a      	mov	r2, r9
 800d7a0:	f7ff fa32 	bl	800cc08 <__mdiff>
 800d7a4:	4604      	mov	r4, r0
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	f43f ae3d 	beq.w	800d426 <_strtod_l+0x43e>
 800d7ac:	68c3      	ldr	r3, [r0, #12]
 800d7ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	60c3      	str	r3, [r0, #12]
 800d7b4:	4641      	mov	r1, r8
 800d7b6:	f7ff fa0b 	bl	800cbd0 <__mcmp>
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	da46      	bge.n	800d84c <_strtod_l+0x864>
 800d7be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7c0:	ea53 030a 	orrs.w	r3, r3, sl
 800d7c4:	d16c      	bne.n	800d8a0 <_strtod_l+0x8b8>
 800d7c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d168      	bne.n	800d8a0 <_strtod_l+0x8b8>
 800d7ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d7d2:	0d1b      	lsrs	r3, r3, #20
 800d7d4:	051b      	lsls	r3, r3, #20
 800d7d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d7da:	d961      	bls.n	800d8a0 <_strtod_l+0x8b8>
 800d7dc:	6963      	ldr	r3, [r4, #20]
 800d7de:	b913      	cbnz	r3, 800d7e6 <_strtod_l+0x7fe>
 800d7e0:	6923      	ldr	r3, [r4, #16]
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	dd5c      	ble.n	800d8a0 <_strtod_l+0x8b8>
 800d7e6:	4621      	mov	r1, r4
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	9805      	ldr	r0, [sp, #20]
 800d7ec:	f7ff f984 	bl	800caf8 <__lshift>
 800d7f0:	4641      	mov	r1, r8
 800d7f2:	4604      	mov	r4, r0
 800d7f4:	f7ff f9ec 	bl	800cbd0 <__mcmp>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	dd51      	ble.n	800d8a0 <_strtod_l+0x8b8>
 800d7fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d800:	9a08      	ldr	r2, [sp, #32]
 800d802:	0d1b      	lsrs	r3, r3, #20
 800d804:	051b      	lsls	r3, r3, #20
 800d806:	2a00      	cmp	r2, #0
 800d808:	d06b      	beq.n	800d8e2 <_strtod_l+0x8fa>
 800d80a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d80e:	d868      	bhi.n	800d8e2 <_strtod_l+0x8fa>
 800d810:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d814:	f67f ae9d 	bls.w	800d552 <_strtod_l+0x56a>
 800d818:	4b0a      	ldr	r3, [pc, #40]	@ (800d844 <_strtod_l+0x85c>)
 800d81a:	4650      	mov	r0, sl
 800d81c:	4659      	mov	r1, fp
 800d81e:	2200      	movs	r2, #0
 800d820:	f7f2 ff12 	bl	8000648 <__aeabi_dmul>
 800d824:	4b08      	ldr	r3, [pc, #32]	@ (800d848 <_strtod_l+0x860>)
 800d826:	400b      	ands	r3, r1
 800d828:	4682      	mov	sl, r0
 800d82a:	468b      	mov	fp, r1
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	f47f ae05 	bne.w	800d43c <_strtod_l+0x454>
 800d832:	9a05      	ldr	r2, [sp, #20]
 800d834:	2322      	movs	r3, #34	@ 0x22
 800d836:	6013      	str	r3, [r2, #0]
 800d838:	e600      	b.n	800d43c <_strtod_l+0x454>
 800d83a:	bf00      	nop
 800d83c:	0800f0e8 	.word	0x0800f0e8
 800d840:	fffffc02 	.word	0xfffffc02
 800d844:	39500000 	.word	0x39500000
 800d848:	7ff00000 	.word	0x7ff00000
 800d84c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d850:	d165      	bne.n	800d91e <_strtod_l+0x936>
 800d852:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d854:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d858:	b35a      	cbz	r2, 800d8b2 <_strtod_l+0x8ca>
 800d85a:	4a9f      	ldr	r2, [pc, #636]	@ (800dad8 <_strtod_l+0xaf0>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d12b      	bne.n	800d8b8 <_strtod_l+0x8d0>
 800d860:	9b08      	ldr	r3, [sp, #32]
 800d862:	4651      	mov	r1, sl
 800d864:	b303      	cbz	r3, 800d8a8 <_strtod_l+0x8c0>
 800d866:	4b9d      	ldr	r3, [pc, #628]	@ (800dadc <_strtod_l+0xaf4>)
 800d868:	465a      	mov	r2, fp
 800d86a:	4013      	ands	r3, r2
 800d86c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d870:	f04f 32ff 	mov.w	r2, #4294967295
 800d874:	d81b      	bhi.n	800d8ae <_strtod_l+0x8c6>
 800d876:	0d1b      	lsrs	r3, r3, #20
 800d878:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d87c:	fa02 f303 	lsl.w	r3, r2, r3
 800d880:	4299      	cmp	r1, r3
 800d882:	d119      	bne.n	800d8b8 <_strtod_l+0x8d0>
 800d884:	4b96      	ldr	r3, [pc, #600]	@ (800dae0 <_strtod_l+0xaf8>)
 800d886:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d888:	429a      	cmp	r2, r3
 800d88a:	d102      	bne.n	800d892 <_strtod_l+0x8aa>
 800d88c:	3101      	adds	r1, #1
 800d88e:	f43f adca 	beq.w	800d426 <_strtod_l+0x43e>
 800d892:	4b92      	ldr	r3, [pc, #584]	@ (800dadc <_strtod_l+0xaf4>)
 800d894:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d896:	401a      	ands	r2, r3
 800d898:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d89c:	f04f 0a00 	mov.w	sl, #0
 800d8a0:	9b08      	ldr	r3, [sp, #32]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d1b8      	bne.n	800d818 <_strtod_l+0x830>
 800d8a6:	e5c9      	b.n	800d43c <_strtod_l+0x454>
 800d8a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ac:	e7e8      	b.n	800d880 <_strtod_l+0x898>
 800d8ae:	4613      	mov	r3, r2
 800d8b0:	e7e6      	b.n	800d880 <_strtod_l+0x898>
 800d8b2:	ea53 030a 	orrs.w	r3, r3, sl
 800d8b6:	d0a1      	beq.n	800d7fc <_strtod_l+0x814>
 800d8b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d8ba:	b1db      	cbz	r3, 800d8f4 <_strtod_l+0x90c>
 800d8bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8be:	4213      	tst	r3, r2
 800d8c0:	d0ee      	beq.n	800d8a0 <_strtod_l+0x8b8>
 800d8c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8c4:	9a08      	ldr	r2, [sp, #32]
 800d8c6:	4650      	mov	r0, sl
 800d8c8:	4659      	mov	r1, fp
 800d8ca:	b1bb      	cbz	r3, 800d8fc <_strtod_l+0x914>
 800d8cc:	f7ff fb6e 	bl	800cfac <sulp>
 800d8d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d8d4:	ec53 2b10 	vmov	r2, r3, d0
 800d8d8:	f7f2 fd00 	bl	80002dc <__adddf3>
 800d8dc:	4682      	mov	sl, r0
 800d8de:	468b      	mov	fp, r1
 800d8e0:	e7de      	b.n	800d8a0 <_strtod_l+0x8b8>
 800d8e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d8e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d8ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d8ee:	f04f 3aff 	mov.w	sl, #4294967295
 800d8f2:	e7d5      	b.n	800d8a0 <_strtod_l+0x8b8>
 800d8f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d8f6:	ea13 0f0a 	tst.w	r3, sl
 800d8fa:	e7e1      	b.n	800d8c0 <_strtod_l+0x8d8>
 800d8fc:	f7ff fb56 	bl	800cfac <sulp>
 800d900:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d904:	ec53 2b10 	vmov	r2, r3, d0
 800d908:	f7f2 fce6 	bl	80002d8 <__aeabi_dsub>
 800d90c:	2200      	movs	r2, #0
 800d90e:	2300      	movs	r3, #0
 800d910:	4682      	mov	sl, r0
 800d912:	468b      	mov	fp, r1
 800d914:	f7f3 f900 	bl	8000b18 <__aeabi_dcmpeq>
 800d918:	2800      	cmp	r0, #0
 800d91a:	d0c1      	beq.n	800d8a0 <_strtod_l+0x8b8>
 800d91c:	e619      	b.n	800d552 <_strtod_l+0x56a>
 800d91e:	4641      	mov	r1, r8
 800d920:	4620      	mov	r0, r4
 800d922:	f7ff facd 	bl	800cec0 <__ratio>
 800d926:	ec57 6b10 	vmov	r6, r7, d0
 800d92a:	2200      	movs	r2, #0
 800d92c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d930:	4630      	mov	r0, r6
 800d932:	4639      	mov	r1, r7
 800d934:	f7f3 f904 	bl	8000b40 <__aeabi_dcmple>
 800d938:	2800      	cmp	r0, #0
 800d93a:	d06f      	beq.n	800da1c <_strtod_l+0xa34>
 800d93c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d17a      	bne.n	800da38 <_strtod_l+0xa50>
 800d942:	f1ba 0f00 	cmp.w	sl, #0
 800d946:	d158      	bne.n	800d9fa <_strtod_l+0xa12>
 800d948:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d94a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d15a      	bne.n	800da08 <_strtod_l+0xa20>
 800d952:	4b64      	ldr	r3, [pc, #400]	@ (800dae4 <_strtod_l+0xafc>)
 800d954:	2200      	movs	r2, #0
 800d956:	4630      	mov	r0, r6
 800d958:	4639      	mov	r1, r7
 800d95a:	f7f3 f8e7 	bl	8000b2c <__aeabi_dcmplt>
 800d95e:	2800      	cmp	r0, #0
 800d960:	d159      	bne.n	800da16 <_strtod_l+0xa2e>
 800d962:	4630      	mov	r0, r6
 800d964:	4639      	mov	r1, r7
 800d966:	4b60      	ldr	r3, [pc, #384]	@ (800dae8 <_strtod_l+0xb00>)
 800d968:	2200      	movs	r2, #0
 800d96a:	f7f2 fe6d 	bl	8000648 <__aeabi_dmul>
 800d96e:	4606      	mov	r6, r0
 800d970:	460f      	mov	r7, r1
 800d972:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d976:	9606      	str	r6, [sp, #24]
 800d978:	9307      	str	r3, [sp, #28]
 800d97a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d97e:	4d57      	ldr	r5, [pc, #348]	@ (800dadc <_strtod_l+0xaf4>)
 800d980:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d986:	401d      	ands	r5, r3
 800d988:	4b58      	ldr	r3, [pc, #352]	@ (800daec <_strtod_l+0xb04>)
 800d98a:	429d      	cmp	r5, r3
 800d98c:	f040 80b2 	bne.w	800daf4 <_strtod_l+0xb0c>
 800d990:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d992:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d996:	ec4b ab10 	vmov	d0, sl, fp
 800d99a:	f7ff f9c9 	bl	800cd30 <__ulp>
 800d99e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9a2:	ec51 0b10 	vmov	r0, r1, d0
 800d9a6:	f7f2 fe4f 	bl	8000648 <__aeabi_dmul>
 800d9aa:	4652      	mov	r2, sl
 800d9ac:	465b      	mov	r3, fp
 800d9ae:	f7f2 fc95 	bl	80002dc <__adddf3>
 800d9b2:	460b      	mov	r3, r1
 800d9b4:	4949      	ldr	r1, [pc, #292]	@ (800dadc <_strtod_l+0xaf4>)
 800d9b6:	4a4e      	ldr	r2, [pc, #312]	@ (800daf0 <_strtod_l+0xb08>)
 800d9b8:	4019      	ands	r1, r3
 800d9ba:	4291      	cmp	r1, r2
 800d9bc:	4682      	mov	sl, r0
 800d9be:	d942      	bls.n	800da46 <_strtod_l+0xa5e>
 800d9c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d9c2:	4b47      	ldr	r3, [pc, #284]	@ (800dae0 <_strtod_l+0xaf8>)
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d103      	bne.n	800d9d0 <_strtod_l+0x9e8>
 800d9c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	f43f ad2b 	beq.w	800d426 <_strtod_l+0x43e>
 800d9d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800dae0 <_strtod_l+0xaf8>
 800d9d4:	f04f 3aff 	mov.w	sl, #4294967295
 800d9d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d9da:	9805      	ldr	r0, [sp, #20]
 800d9dc:	f7fe fe74 	bl	800c6c8 <_Bfree>
 800d9e0:	9805      	ldr	r0, [sp, #20]
 800d9e2:	4649      	mov	r1, r9
 800d9e4:	f7fe fe70 	bl	800c6c8 <_Bfree>
 800d9e8:	9805      	ldr	r0, [sp, #20]
 800d9ea:	4641      	mov	r1, r8
 800d9ec:	f7fe fe6c 	bl	800c6c8 <_Bfree>
 800d9f0:	9805      	ldr	r0, [sp, #20]
 800d9f2:	4621      	mov	r1, r4
 800d9f4:	f7fe fe68 	bl	800c6c8 <_Bfree>
 800d9f8:	e618      	b.n	800d62c <_strtod_l+0x644>
 800d9fa:	f1ba 0f01 	cmp.w	sl, #1
 800d9fe:	d103      	bne.n	800da08 <_strtod_l+0xa20>
 800da00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da02:	2b00      	cmp	r3, #0
 800da04:	f43f ada5 	beq.w	800d552 <_strtod_l+0x56a>
 800da08:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800dab8 <_strtod_l+0xad0>
 800da0c:	4f35      	ldr	r7, [pc, #212]	@ (800dae4 <_strtod_l+0xafc>)
 800da0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da12:	2600      	movs	r6, #0
 800da14:	e7b1      	b.n	800d97a <_strtod_l+0x992>
 800da16:	4f34      	ldr	r7, [pc, #208]	@ (800dae8 <_strtod_l+0xb00>)
 800da18:	2600      	movs	r6, #0
 800da1a:	e7aa      	b.n	800d972 <_strtod_l+0x98a>
 800da1c:	4b32      	ldr	r3, [pc, #200]	@ (800dae8 <_strtod_l+0xb00>)
 800da1e:	4630      	mov	r0, r6
 800da20:	4639      	mov	r1, r7
 800da22:	2200      	movs	r2, #0
 800da24:	f7f2 fe10 	bl	8000648 <__aeabi_dmul>
 800da28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da2a:	4606      	mov	r6, r0
 800da2c:	460f      	mov	r7, r1
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d09f      	beq.n	800d972 <_strtod_l+0x98a>
 800da32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800da36:	e7a0      	b.n	800d97a <_strtod_l+0x992>
 800da38:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800dac0 <_strtod_l+0xad8>
 800da3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da40:	ec57 6b17 	vmov	r6, r7, d7
 800da44:	e799      	b.n	800d97a <_strtod_l+0x992>
 800da46:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800da4a:	9b08      	ldr	r3, [sp, #32]
 800da4c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1c1      	bne.n	800d9d8 <_strtod_l+0x9f0>
 800da54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da58:	0d1b      	lsrs	r3, r3, #20
 800da5a:	051b      	lsls	r3, r3, #20
 800da5c:	429d      	cmp	r5, r3
 800da5e:	d1bb      	bne.n	800d9d8 <_strtod_l+0x9f0>
 800da60:	4630      	mov	r0, r6
 800da62:	4639      	mov	r1, r7
 800da64:	f7f3 f950 	bl	8000d08 <__aeabi_d2lz>
 800da68:	f7f2 fdc0 	bl	80005ec <__aeabi_l2d>
 800da6c:	4602      	mov	r2, r0
 800da6e:	460b      	mov	r3, r1
 800da70:	4630      	mov	r0, r6
 800da72:	4639      	mov	r1, r7
 800da74:	f7f2 fc30 	bl	80002d8 <__aeabi_dsub>
 800da78:	460b      	mov	r3, r1
 800da7a:	4602      	mov	r2, r0
 800da7c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800da80:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800da84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da86:	ea46 060a 	orr.w	r6, r6, sl
 800da8a:	431e      	orrs	r6, r3
 800da8c:	d06f      	beq.n	800db6e <_strtod_l+0xb86>
 800da8e:	a30e      	add	r3, pc, #56	@ (adr r3, 800dac8 <_strtod_l+0xae0>)
 800da90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da94:	f7f3 f84a 	bl	8000b2c <__aeabi_dcmplt>
 800da98:	2800      	cmp	r0, #0
 800da9a:	f47f accf 	bne.w	800d43c <_strtod_l+0x454>
 800da9e:	a30c      	add	r3, pc, #48	@ (adr r3, 800dad0 <_strtod_l+0xae8>)
 800daa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800daa8:	f7f3 f85e 	bl	8000b68 <__aeabi_dcmpgt>
 800daac:	2800      	cmp	r0, #0
 800daae:	d093      	beq.n	800d9d8 <_strtod_l+0x9f0>
 800dab0:	e4c4      	b.n	800d43c <_strtod_l+0x454>
 800dab2:	bf00      	nop
 800dab4:	f3af 8000 	nop.w
 800dab8:	00000000 	.word	0x00000000
 800dabc:	bff00000 	.word	0xbff00000
 800dac0:	00000000 	.word	0x00000000
 800dac4:	3ff00000 	.word	0x3ff00000
 800dac8:	94a03595 	.word	0x94a03595
 800dacc:	3fdfffff 	.word	0x3fdfffff
 800dad0:	35afe535 	.word	0x35afe535
 800dad4:	3fe00000 	.word	0x3fe00000
 800dad8:	000fffff 	.word	0x000fffff
 800dadc:	7ff00000 	.word	0x7ff00000
 800dae0:	7fefffff 	.word	0x7fefffff
 800dae4:	3ff00000 	.word	0x3ff00000
 800dae8:	3fe00000 	.word	0x3fe00000
 800daec:	7fe00000 	.word	0x7fe00000
 800daf0:	7c9fffff 	.word	0x7c9fffff
 800daf4:	9b08      	ldr	r3, [sp, #32]
 800daf6:	b323      	cbz	r3, 800db42 <_strtod_l+0xb5a>
 800daf8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800dafc:	d821      	bhi.n	800db42 <_strtod_l+0xb5a>
 800dafe:	a328      	add	r3, pc, #160	@ (adr r3, 800dba0 <_strtod_l+0xbb8>)
 800db00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db04:	4630      	mov	r0, r6
 800db06:	4639      	mov	r1, r7
 800db08:	f7f3 f81a 	bl	8000b40 <__aeabi_dcmple>
 800db0c:	b1a0      	cbz	r0, 800db38 <_strtod_l+0xb50>
 800db0e:	4639      	mov	r1, r7
 800db10:	4630      	mov	r0, r6
 800db12:	f7f3 f871 	bl	8000bf8 <__aeabi_d2uiz>
 800db16:	2801      	cmp	r0, #1
 800db18:	bf38      	it	cc
 800db1a:	2001      	movcc	r0, #1
 800db1c:	f7f2 fd1a 	bl	8000554 <__aeabi_ui2d>
 800db20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db22:	4606      	mov	r6, r0
 800db24:	460f      	mov	r7, r1
 800db26:	b9fb      	cbnz	r3, 800db68 <_strtod_l+0xb80>
 800db28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db2c:	9014      	str	r0, [sp, #80]	@ 0x50
 800db2e:	9315      	str	r3, [sp, #84]	@ 0x54
 800db30:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800db34:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800db38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db3a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800db3e:	1b5b      	subs	r3, r3, r5
 800db40:	9311      	str	r3, [sp, #68]	@ 0x44
 800db42:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800db46:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800db4a:	f7ff f8f1 	bl	800cd30 <__ulp>
 800db4e:	4650      	mov	r0, sl
 800db50:	ec53 2b10 	vmov	r2, r3, d0
 800db54:	4659      	mov	r1, fp
 800db56:	f7f2 fd77 	bl	8000648 <__aeabi_dmul>
 800db5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800db5e:	f7f2 fbbd 	bl	80002dc <__adddf3>
 800db62:	4682      	mov	sl, r0
 800db64:	468b      	mov	fp, r1
 800db66:	e770      	b.n	800da4a <_strtod_l+0xa62>
 800db68:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800db6c:	e7e0      	b.n	800db30 <_strtod_l+0xb48>
 800db6e:	a30e      	add	r3, pc, #56	@ (adr r3, 800dba8 <_strtod_l+0xbc0>)
 800db70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db74:	f7f2 ffda 	bl	8000b2c <__aeabi_dcmplt>
 800db78:	e798      	b.n	800daac <_strtod_l+0xac4>
 800db7a:	2300      	movs	r3, #0
 800db7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db7e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800db80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db82:	6013      	str	r3, [r2, #0]
 800db84:	f7ff ba6d 	b.w	800d062 <_strtod_l+0x7a>
 800db88:	2a65      	cmp	r2, #101	@ 0x65
 800db8a:	f43f ab66 	beq.w	800d25a <_strtod_l+0x272>
 800db8e:	2a45      	cmp	r2, #69	@ 0x45
 800db90:	f43f ab63 	beq.w	800d25a <_strtod_l+0x272>
 800db94:	2301      	movs	r3, #1
 800db96:	f7ff bb9e 	b.w	800d2d6 <_strtod_l+0x2ee>
 800db9a:	bf00      	nop
 800db9c:	f3af 8000 	nop.w
 800dba0:	ffc00000 	.word	0xffc00000
 800dba4:	41dfffff 	.word	0x41dfffff
 800dba8:	94a03595 	.word	0x94a03595
 800dbac:	3fcfffff 	.word	0x3fcfffff

0800dbb0 <_strtod_r>:
 800dbb0:	4b01      	ldr	r3, [pc, #4]	@ (800dbb8 <_strtod_r+0x8>)
 800dbb2:	f7ff ba19 	b.w	800cfe8 <_strtod_l>
 800dbb6:	bf00      	nop
 800dbb8:	20000104 	.word	0x20000104

0800dbbc <_strtol_l.constprop.0>:
 800dbbc:	2b24      	cmp	r3, #36	@ 0x24
 800dbbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbc2:	4686      	mov	lr, r0
 800dbc4:	4690      	mov	r8, r2
 800dbc6:	d801      	bhi.n	800dbcc <_strtol_l.constprop.0+0x10>
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d106      	bne.n	800dbda <_strtol_l.constprop.0+0x1e>
 800dbcc:	f7fd fdae 	bl	800b72c <__errno>
 800dbd0:	2316      	movs	r3, #22
 800dbd2:	6003      	str	r3, [r0, #0]
 800dbd4:	2000      	movs	r0, #0
 800dbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbda:	4834      	ldr	r0, [pc, #208]	@ (800dcac <_strtol_l.constprop.0+0xf0>)
 800dbdc:	460d      	mov	r5, r1
 800dbde:	462a      	mov	r2, r5
 800dbe0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dbe4:	5d06      	ldrb	r6, [r0, r4]
 800dbe6:	f016 0608 	ands.w	r6, r6, #8
 800dbea:	d1f8      	bne.n	800dbde <_strtol_l.constprop.0+0x22>
 800dbec:	2c2d      	cmp	r4, #45	@ 0x2d
 800dbee:	d12d      	bne.n	800dc4c <_strtol_l.constprop.0+0x90>
 800dbf0:	782c      	ldrb	r4, [r5, #0]
 800dbf2:	2601      	movs	r6, #1
 800dbf4:	1c95      	adds	r5, r2, #2
 800dbf6:	f033 0210 	bics.w	r2, r3, #16
 800dbfa:	d109      	bne.n	800dc10 <_strtol_l.constprop.0+0x54>
 800dbfc:	2c30      	cmp	r4, #48	@ 0x30
 800dbfe:	d12a      	bne.n	800dc56 <_strtol_l.constprop.0+0x9a>
 800dc00:	782a      	ldrb	r2, [r5, #0]
 800dc02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dc06:	2a58      	cmp	r2, #88	@ 0x58
 800dc08:	d125      	bne.n	800dc56 <_strtol_l.constprop.0+0x9a>
 800dc0a:	786c      	ldrb	r4, [r5, #1]
 800dc0c:	2310      	movs	r3, #16
 800dc0e:	3502      	adds	r5, #2
 800dc10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800dc14:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dc18:	2200      	movs	r2, #0
 800dc1a:	fbbc f9f3 	udiv	r9, ip, r3
 800dc1e:	4610      	mov	r0, r2
 800dc20:	fb03 ca19 	mls	sl, r3, r9, ip
 800dc24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dc28:	2f09      	cmp	r7, #9
 800dc2a:	d81b      	bhi.n	800dc64 <_strtol_l.constprop.0+0xa8>
 800dc2c:	463c      	mov	r4, r7
 800dc2e:	42a3      	cmp	r3, r4
 800dc30:	dd27      	ble.n	800dc82 <_strtol_l.constprop.0+0xc6>
 800dc32:	1c57      	adds	r7, r2, #1
 800dc34:	d007      	beq.n	800dc46 <_strtol_l.constprop.0+0x8a>
 800dc36:	4581      	cmp	r9, r0
 800dc38:	d320      	bcc.n	800dc7c <_strtol_l.constprop.0+0xc0>
 800dc3a:	d101      	bne.n	800dc40 <_strtol_l.constprop.0+0x84>
 800dc3c:	45a2      	cmp	sl, r4
 800dc3e:	db1d      	blt.n	800dc7c <_strtol_l.constprop.0+0xc0>
 800dc40:	fb00 4003 	mla	r0, r0, r3, r4
 800dc44:	2201      	movs	r2, #1
 800dc46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc4a:	e7eb      	b.n	800dc24 <_strtol_l.constprop.0+0x68>
 800dc4c:	2c2b      	cmp	r4, #43	@ 0x2b
 800dc4e:	bf04      	itt	eq
 800dc50:	782c      	ldrbeq	r4, [r5, #0]
 800dc52:	1c95      	addeq	r5, r2, #2
 800dc54:	e7cf      	b.n	800dbf6 <_strtol_l.constprop.0+0x3a>
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1da      	bne.n	800dc10 <_strtol_l.constprop.0+0x54>
 800dc5a:	2c30      	cmp	r4, #48	@ 0x30
 800dc5c:	bf0c      	ite	eq
 800dc5e:	2308      	moveq	r3, #8
 800dc60:	230a      	movne	r3, #10
 800dc62:	e7d5      	b.n	800dc10 <_strtol_l.constprop.0+0x54>
 800dc64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dc68:	2f19      	cmp	r7, #25
 800dc6a:	d801      	bhi.n	800dc70 <_strtol_l.constprop.0+0xb4>
 800dc6c:	3c37      	subs	r4, #55	@ 0x37
 800dc6e:	e7de      	b.n	800dc2e <_strtol_l.constprop.0+0x72>
 800dc70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dc74:	2f19      	cmp	r7, #25
 800dc76:	d804      	bhi.n	800dc82 <_strtol_l.constprop.0+0xc6>
 800dc78:	3c57      	subs	r4, #87	@ 0x57
 800dc7a:	e7d8      	b.n	800dc2e <_strtol_l.constprop.0+0x72>
 800dc7c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc80:	e7e1      	b.n	800dc46 <_strtol_l.constprop.0+0x8a>
 800dc82:	1c53      	adds	r3, r2, #1
 800dc84:	d108      	bne.n	800dc98 <_strtol_l.constprop.0+0xdc>
 800dc86:	2322      	movs	r3, #34	@ 0x22
 800dc88:	f8ce 3000 	str.w	r3, [lr]
 800dc8c:	4660      	mov	r0, ip
 800dc8e:	f1b8 0f00 	cmp.w	r8, #0
 800dc92:	d0a0      	beq.n	800dbd6 <_strtol_l.constprop.0+0x1a>
 800dc94:	1e69      	subs	r1, r5, #1
 800dc96:	e006      	b.n	800dca6 <_strtol_l.constprop.0+0xea>
 800dc98:	b106      	cbz	r6, 800dc9c <_strtol_l.constprop.0+0xe0>
 800dc9a:	4240      	negs	r0, r0
 800dc9c:	f1b8 0f00 	cmp.w	r8, #0
 800dca0:	d099      	beq.n	800dbd6 <_strtol_l.constprop.0+0x1a>
 800dca2:	2a00      	cmp	r2, #0
 800dca4:	d1f6      	bne.n	800dc94 <_strtol_l.constprop.0+0xd8>
 800dca6:	f8c8 1000 	str.w	r1, [r8]
 800dcaa:	e794      	b.n	800dbd6 <_strtol_l.constprop.0+0x1a>
 800dcac:	0800f111 	.word	0x0800f111

0800dcb0 <_strtol_r>:
 800dcb0:	f7ff bf84 	b.w	800dbbc <_strtol_l.constprop.0>

0800dcb4 <__ssputs_r>:
 800dcb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcb8:	688e      	ldr	r6, [r1, #8]
 800dcba:	461f      	mov	r7, r3
 800dcbc:	42be      	cmp	r6, r7
 800dcbe:	680b      	ldr	r3, [r1, #0]
 800dcc0:	4682      	mov	sl, r0
 800dcc2:	460c      	mov	r4, r1
 800dcc4:	4690      	mov	r8, r2
 800dcc6:	d82d      	bhi.n	800dd24 <__ssputs_r+0x70>
 800dcc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dccc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dcd0:	d026      	beq.n	800dd20 <__ssputs_r+0x6c>
 800dcd2:	6965      	ldr	r5, [r4, #20]
 800dcd4:	6909      	ldr	r1, [r1, #16]
 800dcd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dcda:	eba3 0901 	sub.w	r9, r3, r1
 800dcde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dce2:	1c7b      	adds	r3, r7, #1
 800dce4:	444b      	add	r3, r9
 800dce6:	106d      	asrs	r5, r5, #1
 800dce8:	429d      	cmp	r5, r3
 800dcea:	bf38      	it	cc
 800dcec:	461d      	movcc	r5, r3
 800dcee:	0553      	lsls	r3, r2, #21
 800dcf0:	d527      	bpl.n	800dd42 <__ssputs_r+0x8e>
 800dcf2:	4629      	mov	r1, r5
 800dcf4:	f7fe fc1c 	bl	800c530 <_malloc_r>
 800dcf8:	4606      	mov	r6, r0
 800dcfa:	b360      	cbz	r0, 800dd56 <__ssputs_r+0xa2>
 800dcfc:	6921      	ldr	r1, [r4, #16]
 800dcfe:	464a      	mov	r2, r9
 800dd00:	f7fd fd41 	bl	800b786 <memcpy>
 800dd04:	89a3      	ldrh	r3, [r4, #12]
 800dd06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dd0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd0e:	81a3      	strh	r3, [r4, #12]
 800dd10:	6126      	str	r6, [r4, #16]
 800dd12:	6165      	str	r5, [r4, #20]
 800dd14:	444e      	add	r6, r9
 800dd16:	eba5 0509 	sub.w	r5, r5, r9
 800dd1a:	6026      	str	r6, [r4, #0]
 800dd1c:	60a5      	str	r5, [r4, #8]
 800dd1e:	463e      	mov	r6, r7
 800dd20:	42be      	cmp	r6, r7
 800dd22:	d900      	bls.n	800dd26 <__ssputs_r+0x72>
 800dd24:	463e      	mov	r6, r7
 800dd26:	6820      	ldr	r0, [r4, #0]
 800dd28:	4632      	mov	r2, r6
 800dd2a:	4641      	mov	r1, r8
 800dd2c:	f000 f9c6 	bl	800e0bc <memmove>
 800dd30:	68a3      	ldr	r3, [r4, #8]
 800dd32:	1b9b      	subs	r3, r3, r6
 800dd34:	60a3      	str	r3, [r4, #8]
 800dd36:	6823      	ldr	r3, [r4, #0]
 800dd38:	4433      	add	r3, r6
 800dd3a:	6023      	str	r3, [r4, #0]
 800dd3c:	2000      	movs	r0, #0
 800dd3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd42:	462a      	mov	r2, r5
 800dd44:	f000 fd7d 	bl	800e842 <_realloc_r>
 800dd48:	4606      	mov	r6, r0
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	d1e0      	bne.n	800dd10 <__ssputs_r+0x5c>
 800dd4e:	6921      	ldr	r1, [r4, #16]
 800dd50:	4650      	mov	r0, sl
 800dd52:	f7fe fb79 	bl	800c448 <_free_r>
 800dd56:	230c      	movs	r3, #12
 800dd58:	f8ca 3000 	str.w	r3, [sl]
 800dd5c:	89a3      	ldrh	r3, [r4, #12]
 800dd5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd62:	81a3      	strh	r3, [r4, #12]
 800dd64:	f04f 30ff 	mov.w	r0, #4294967295
 800dd68:	e7e9      	b.n	800dd3e <__ssputs_r+0x8a>
	...

0800dd6c <_svfiprintf_r>:
 800dd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd70:	4698      	mov	r8, r3
 800dd72:	898b      	ldrh	r3, [r1, #12]
 800dd74:	061b      	lsls	r3, r3, #24
 800dd76:	b09d      	sub	sp, #116	@ 0x74
 800dd78:	4607      	mov	r7, r0
 800dd7a:	460d      	mov	r5, r1
 800dd7c:	4614      	mov	r4, r2
 800dd7e:	d510      	bpl.n	800dda2 <_svfiprintf_r+0x36>
 800dd80:	690b      	ldr	r3, [r1, #16]
 800dd82:	b973      	cbnz	r3, 800dda2 <_svfiprintf_r+0x36>
 800dd84:	2140      	movs	r1, #64	@ 0x40
 800dd86:	f7fe fbd3 	bl	800c530 <_malloc_r>
 800dd8a:	6028      	str	r0, [r5, #0]
 800dd8c:	6128      	str	r0, [r5, #16]
 800dd8e:	b930      	cbnz	r0, 800dd9e <_svfiprintf_r+0x32>
 800dd90:	230c      	movs	r3, #12
 800dd92:	603b      	str	r3, [r7, #0]
 800dd94:	f04f 30ff 	mov.w	r0, #4294967295
 800dd98:	b01d      	add	sp, #116	@ 0x74
 800dd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd9e:	2340      	movs	r3, #64	@ 0x40
 800dda0:	616b      	str	r3, [r5, #20]
 800dda2:	2300      	movs	r3, #0
 800dda4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dda6:	2320      	movs	r3, #32
 800dda8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ddac:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddb0:	2330      	movs	r3, #48	@ 0x30
 800ddb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800df50 <_svfiprintf_r+0x1e4>
 800ddb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ddba:	f04f 0901 	mov.w	r9, #1
 800ddbe:	4623      	mov	r3, r4
 800ddc0:	469a      	mov	sl, r3
 800ddc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddc6:	b10a      	cbz	r2, 800ddcc <_svfiprintf_r+0x60>
 800ddc8:	2a25      	cmp	r2, #37	@ 0x25
 800ddca:	d1f9      	bne.n	800ddc0 <_svfiprintf_r+0x54>
 800ddcc:	ebba 0b04 	subs.w	fp, sl, r4
 800ddd0:	d00b      	beq.n	800ddea <_svfiprintf_r+0x7e>
 800ddd2:	465b      	mov	r3, fp
 800ddd4:	4622      	mov	r2, r4
 800ddd6:	4629      	mov	r1, r5
 800ddd8:	4638      	mov	r0, r7
 800ddda:	f7ff ff6b 	bl	800dcb4 <__ssputs_r>
 800ddde:	3001      	adds	r0, #1
 800dde0:	f000 80a7 	beq.w	800df32 <_svfiprintf_r+0x1c6>
 800dde4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dde6:	445a      	add	r2, fp
 800dde8:	9209      	str	r2, [sp, #36]	@ 0x24
 800ddea:	f89a 3000 	ldrb.w	r3, [sl]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	f000 809f 	beq.w	800df32 <_svfiprintf_r+0x1c6>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddfe:	f10a 0a01 	add.w	sl, sl, #1
 800de02:	9304      	str	r3, [sp, #16]
 800de04:	9307      	str	r3, [sp, #28]
 800de06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de0a:	931a      	str	r3, [sp, #104]	@ 0x68
 800de0c:	4654      	mov	r4, sl
 800de0e:	2205      	movs	r2, #5
 800de10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de14:	484e      	ldr	r0, [pc, #312]	@ (800df50 <_svfiprintf_r+0x1e4>)
 800de16:	f7f2 fa03 	bl	8000220 <memchr>
 800de1a:	9a04      	ldr	r2, [sp, #16]
 800de1c:	b9d8      	cbnz	r0, 800de56 <_svfiprintf_r+0xea>
 800de1e:	06d0      	lsls	r0, r2, #27
 800de20:	bf44      	itt	mi
 800de22:	2320      	movmi	r3, #32
 800de24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de28:	0711      	lsls	r1, r2, #28
 800de2a:	bf44      	itt	mi
 800de2c:	232b      	movmi	r3, #43	@ 0x2b
 800de2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de32:	f89a 3000 	ldrb.w	r3, [sl]
 800de36:	2b2a      	cmp	r3, #42	@ 0x2a
 800de38:	d015      	beq.n	800de66 <_svfiprintf_r+0xfa>
 800de3a:	9a07      	ldr	r2, [sp, #28]
 800de3c:	4654      	mov	r4, sl
 800de3e:	2000      	movs	r0, #0
 800de40:	f04f 0c0a 	mov.w	ip, #10
 800de44:	4621      	mov	r1, r4
 800de46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de4a:	3b30      	subs	r3, #48	@ 0x30
 800de4c:	2b09      	cmp	r3, #9
 800de4e:	d94b      	bls.n	800dee8 <_svfiprintf_r+0x17c>
 800de50:	b1b0      	cbz	r0, 800de80 <_svfiprintf_r+0x114>
 800de52:	9207      	str	r2, [sp, #28]
 800de54:	e014      	b.n	800de80 <_svfiprintf_r+0x114>
 800de56:	eba0 0308 	sub.w	r3, r0, r8
 800de5a:	fa09 f303 	lsl.w	r3, r9, r3
 800de5e:	4313      	orrs	r3, r2
 800de60:	9304      	str	r3, [sp, #16]
 800de62:	46a2      	mov	sl, r4
 800de64:	e7d2      	b.n	800de0c <_svfiprintf_r+0xa0>
 800de66:	9b03      	ldr	r3, [sp, #12]
 800de68:	1d19      	adds	r1, r3, #4
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	9103      	str	r1, [sp, #12]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	bfbb      	ittet	lt
 800de72:	425b      	neglt	r3, r3
 800de74:	f042 0202 	orrlt.w	r2, r2, #2
 800de78:	9307      	strge	r3, [sp, #28]
 800de7a:	9307      	strlt	r3, [sp, #28]
 800de7c:	bfb8      	it	lt
 800de7e:	9204      	strlt	r2, [sp, #16]
 800de80:	7823      	ldrb	r3, [r4, #0]
 800de82:	2b2e      	cmp	r3, #46	@ 0x2e
 800de84:	d10a      	bne.n	800de9c <_svfiprintf_r+0x130>
 800de86:	7863      	ldrb	r3, [r4, #1]
 800de88:	2b2a      	cmp	r3, #42	@ 0x2a
 800de8a:	d132      	bne.n	800def2 <_svfiprintf_r+0x186>
 800de8c:	9b03      	ldr	r3, [sp, #12]
 800de8e:	1d1a      	adds	r2, r3, #4
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	9203      	str	r2, [sp, #12]
 800de94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de98:	3402      	adds	r4, #2
 800de9a:	9305      	str	r3, [sp, #20]
 800de9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800df60 <_svfiprintf_r+0x1f4>
 800dea0:	7821      	ldrb	r1, [r4, #0]
 800dea2:	2203      	movs	r2, #3
 800dea4:	4650      	mov	r0, sl
 800dea6:	f7f2 f9bb 	bl	8000220 <memchr>
 800deaa:	b138      	cbz	r0, 800debc <_svfiprintf_r+0x150>
 800deac:	9b04      	ldr	r3, [sp, #16]
 800deae:	eba0 000a 	sub.w	r0, r0, sl
 800deb2:	2240      	movs	r2, #64	@ 0x40
 800deb4:	4082      	lsls	r2, r0
 800deb6:	4313      	orrs	r3, r2
 800deb8:	3401      	adds	r4, #1
 800deba:	9304      	str	r3, [sp, #16]
 800debc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dec0:	4824      	ldr	r0, [pc, #144]	@ (800df54 <_svfiprintf_r+0x1e8>)
 800dec2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dec6:	2206      	movs	r2, #6
 800dec8:	f7f2 f9aa 	bl	8000220 <memchr>
 800decc:	2800      	cmp	r0, #0
 800dece:	d036      	beq.n	800df3e <_svfiprintf_r+0x1d2>
 800ded0:	4b21      	ldr	r3, [pc, #132]	@ (800df58 <_svfiprintf_r+0x1ec>)
 800ded2:	bb1b      	cbnz	r3, 800df1c <_svfiprintf_r+0x1b0>
 800ded4:	9b03      	ldr	r3, [sp, #12]
 800ded6:	3307      	adds	r3, #7
 800ded8:	f023 0307 	bic.w	r3, r3, #7
 800dedc:	3308      	adds	r3, #8
 800dede:	9303      	str	r3, [sp, #12]
 800dee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dee2:	4433      	add	r3, r6
 800dee4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dee6:	e76a      	b.n	800ddbe <_svfiprintf_r+0x52>
 800dee8:	fb0c 3202 	mla	r2, ip, r2, r3
 800deec:	460c      	mov	r4, r1
 800deee:	2001      	movs	r0, #1
 800def0:	e7a8      	b.n	800de44 <_svfiprintf_r+0xd8>
 800def2:	2300      	movs	r3, #0
 800def4:	3401      	adds	r4, #1
 800def6:	9305      	str	r3, [sp, #20]
 800def8:	4619      	mov	r1, r3
 800defa:	f04f 0c0a 	mov.w	ip, #10
 800defe:	4620      	mov	r0, r4
 800df00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df04:	3a30      	subs	r2, #48	@ 0x30
 800df06:	2a09      	cmp	r2, #9
 800df08:	d903      	bls.n	800df12 <_svfiprintf_r+0x1a6>
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d0c6      	beq.n	800de9c <_svfiprintf_r+0x130>
 800df0e:	9105      	str	r1, [sp, #20]
 800df10:	e7c4      	b.n	800de9c <_svfiprintf_r+0x130>
 800df12:	fb0c 2101 	mla	r1, ip, r1, r2
 800df16:	4604      	mov	r4, r0
 800df18:	2301      	movs	r3, #1
 800df1a:	e7f0      	b.n	800defe <_svfiprintf_r+0x192>
 800df1c:	ab03      	add	r3, sp, #12
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	462a      	mov	r2, r5
 800df22:	4b0e      	ldr	r3, [pc, #56]	@ (800df5c <_svfiprintf_r+0x1f0>)
 800df24:	a904      	add	r1, sp, #16
 800df26:	4638      	mov	r0, r7
 800df28:	f7fc fcbc 	bl	800a8a4 <_printf_float>
 800df2c:	1c42      	adds	r2, r0, #1
 800df2e:	4606      	mov	r6, r0
 800df30:	d1d6      	bne.n	800dee0 <_svfiprintf_r+0x174>
 800df32:	89ab      	ldrh	r3, [r5, #12]
 800df34:	065b      	lsls	r3, r3, #25
 800df36:	f53f af2d 	bmi.w	800dd94 <_svfiprintf_r+0x28>
 800df3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df3c:	e72c      	b.n	800dd98 <_svfiprintf_r+0x2c>
 800df3e:	ab03      	add	r3, sp, #12
 800df40:	9300      	str	r3, [sp, #0]
 800df42:	462a      	mov	r2, r5
 800df44:	4b05      	ldr	r3, [pc, #20]	@ (800df5c <_svfiprintf_r+0x1f0>)
 800df46:	a904      	add	r1, sp, #16
 800df48:	4638      	mov	r0, r7
 800df4a:	f7fc ff43 	bl	800add4 <_printf_i>
 800df4e:	e7ed      	b.n	800df2c <_svfiprintf_r+0x1c0>
 800df50:	0800f211 	.word	0x0800f211
 800df54:	0800f21b 	.word	0x0800f21b
 800df58:	0800a8a5 	.word	0x0800a8a5
 800df5c:	0800dcb5 	.word	0x0800dcb5
 800df60:	0800f217 	.word	0x0800f217

0800df64 <__sflush_r>:
 800df64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df6c:	0716      	lsls	r6, r2, #28
 800df6e:	4605      	mov	r5, r0
 800df70:	460c      	mov	r4, r1
 800df72:	d454      	bmi.n	800e01e <__sflush_r+0xba>
 800df74:	684b      	ldr	r3, [r1, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	dc02      	bgt.n	800df80 <__sflush_r+0x1c>
 800df7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	dd48      	ble.n	800e012 <__sflush_r+0xae>
 800df80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df82:	2e00      	cmp	r6, #0
 800df84:	d045      	beq.n	800e012 <__sflush_r+0xae>
 800df86:	2300      	movs	r3, #0
 800df88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800df8c:	682f      	ldr	r7, [r5, #0]
 800df8e:	6a21      	ldr	r1, [r4, #32]
 800df90:	602b      	str	r3, [r5, #0]
 800df92:	d030      	beq.n	800dff6 <__sflush_r+0x92>
 800df94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800df96:	89a3      	ldrh	r3, [r4, #12]
 800df98:	0759      	lsls	r1, r3, #29
 800df9a:	d505      	bpl.n	800dfa8 <__sflush_r+0x44>
 800df9c:	6863      	ldr	r3, [r4, #4]
 800df9e:	1ad2      	subs	r2, r2, r3
 800dfa0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dfa2:	b10b      	cbz	r3, 800dfa8 <__sflush_r+0x44>
 800dfa4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dfa6:	1ad2      	subs	r2, r2, r3
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dfac:	6a21      	ldr	r1, [r4, #32]
 800dfae:	4628      	mov	r0, r5
 800dfb0:	47b0      	blx	r6
 800dfb2:	1c43      	adds	r3, r0, #1
 800dfb4:	89a3      	ldrh	r3, [r4, #12]
 800dfb6:	d106      	bne.n	800dfc6 <__sflush_r+0x62>
 800dfb8:	6829      	ldr	r1, [r5, #0]
 800dfba:	291d      	cmp	r1, #29
 800dfbc:	d82b      	bhi.n	800e016 <__sflush_r+0xb2>
 800dfbe:	4a2a      	ldr	r2, [pc, #168]	@ (800e068 <__sflush_r+0x104>)
 800dfc0:	410a      	asrs	r2, r1
 800dfc2:	07d6      	lsls	r6, r2, #31
 800dfc4:	d427      	bmi.n	800e016 <__sflush_r+0xb2>
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	6062      	str	r2, [r4, #4]
 800dfca:	04d9      	lsls	r1, r3, #19
 800dfcc:	6922      	ldr	r2, [r4, #16]
 800dfce:	6022      	str	r2, [r4, #0]
 800dfd0:	d504      	bpl.n	800dfdc <__sflush_r+0x78>
 800dfd2:	1c42      	adds	r2, r0, #1
 800dfd4:	d101      	bne.n	800dfda <__sflush_r+0x76>
 800dfd6:	682b      	ldr	r3, [r5, #0]
 800dfd8:	b903      	cbnz	r3, 800dfdc <__sflush_r+0x78>
 800dfda:	6560      	str	r0, [r4, #84]	@ 0x54
 800dfdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dfde:	602f      	str	r7, [r5, #0]
 800dfe0:	b1b9      	cbz	r1, 800e012 <__sflush_r+0xae>
 800dfe2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dfe6:	4299      	cmp	r1, r3
 800dfe8:	d002      	beq.n	800dff0 <__sflush_r+0x8c>
 800dfea:	4628      	mov	r0, r5
 800dfec:	f7fe fa2c 	bl	800c448 <_free_r>
 800dff0:	2300      	movs	r3, #0
 800dff2:	6363      	str	r3, [r4, #52]	@ 0x34
 800dff4:	e00d      	b.n	800e012 <__sflush_r+0xae>
 800dff6:	2301      	movs	r3, #1
 800dff8:	4628      	mov	r0, r5
 800dffa:	47b0      	blx	r6
 800dffc:	4602      	mov	r2, r0
 800dffe:	1c50      	adds	r0, r2, #1
 800e000:	d1c9      	bne.n	800df96 <__sflush_r+0x32>
 800e002:	682b      	ldr	r3, [r5, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d0c6      	beq.n	800df96 <__sflush_r+0x32>
 800e008:	2b1d      	cmp	r3, #29
 800e00a:	d001      	beq.n	800e010 <__sflush_r+0xac>
 800e00c:	2b16      	cmp	r3, #22
 800e00e:	d11e      	bne.n	800e04e <__sflush_r+0xea>
 800e010:	602f      	str	r7, [r5, #0]
 800e012:	2000      	movs	r0, #0
 800e014:	e022      	b.n	800e05c <__sflush_r+0xf8>
 800e016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e01a:	b21b      	sxth	r3, r3
 800e01c:	e01b      	b.n	800e056 <__sflush_r+0xf2>
 800e01e:	690f      	ldr	r7, [r1, #16]
 800e020:	2f00      	cmp	r7, #0
 800e022:	d0f6      	beq.n	800e012 <__sflush_r+0xae>
 800e024:	0793      	lsls	r3, r2, #30
 800e026:	680e      	ldr	r6, [r1, #0]
 800e028:	bf08      	it	eq
 800e02a:	694b      	ldreq	r3, [r1, #20]
 800e02c:	600f      	str	r7, [r1, #0]
 800e02e:	bf18      	it	ne
 800e030:	2300      	movne	r3, #0
 800e032:	eba6 0807 	sub.w	r8, r6, r7
 800e036:	608b      	str	r3, [r1, #8]
 800e038:	f1b8 0f00 	cmp.w	r8, #0
 800e03c:	dde9      	ble.n	800e012 <__sflush_r+0xae>
 800e03e:	6a21      	ldr	r1, [r4, #32]
 800e040:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e042:	4643      	mov	r3, r8
 800e044:	463a      	mov	r2, r7
 800e046:	4628      	mov	r0, r5
 800e048:	47b0      	blx	r6
 800e04a:	2800      	cmp	r0, #0
 800e04c:	dc08      	bgt.n	800e060 <__sflush_r+0xfc>
 800e04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e056:	81a3      	strh	r3, [r4, #12]
 800e058:	f04f 30ff 	mov.w	r0, #4294967295
 800e05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e060:	4407      	add	r7, r0
 800e062:	eba8 0800 	sub.w	r8, r8, r0
 800e066:	e7e7      	b.n	800e038 <__sflush_r+0xd4>
 800e068:	dfbffffe 	.word	0xdfbffffe

0800e06c <_fflush_r>:
 800e06c:	b538      	push	{r3, r4, r5, lr}
 800e06e:	690b      	ldr	r3, [r1, #16]
 800e070:	4605      	mov	r5, r0
 800e072:	460c      	mov	r4, r1
 800e074:	b913      	cbnz	r3, 800e07c <_fflush_r+0x10>
 800e076:	2500      	movs	r5, #0
 800e078:	4628      	mov	r0, r5
 800e07a:	bd38      	pop	{r3, r4, r5, pc}
 800e07c:	b118      	cbz	r0, 800e086 <_fflush_r+0x1a>
 800e07e:	6a03      	ldr	r3, [r0, #32]
 800e080:	b90b      	cbnz	r3, 800e086 <_fflush_r+0x1a>
 800e082:	f7fd fa67 	bl	800b554 <__sinit>
 800e086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d0f3      	beq.n	800e076 <_fflush_r+0xa>
 800e08e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e090:	07d0      	lsls	r0, r2, #31
 800e092:	d404      	bmi.n	800e09e <_fflush_r+0x32>
 800e094:	0599      	lsls	r1, r3, #22
 800e096:	d402      	bmi.n	800e09e <_fflush_r+0x32>
 800e098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e09a:	f7fd fb72 	bl	800b782 <__retarget_lock_acquire_recursive>
 800e09e:	4628      	mov	r0, r5
 800e0a0:	4621      	mov	r1, r4
 800e0a2:	f7ff ff5f 	bl	800df64 <__sflush_r>
 800e0a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e0a8:	07da      	lsls	r2, r3, #31
 800e0aa:	4605      	mov	r5, r0
 800e0ac:	d4e4      	bmi.n	800e078 <_fflush_r+0xc>
 800e0ae:	89a3      	ldrh	r3, [r4, #12]
 800e0b0:	059b      	lsls	r3, r3, #22
 800e0b2:	d4e1      	bmi.n	800e078 <_fflush_r+0xc>
 800e0b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e0b6:	f7fd fb65 	bl	800b784 <__retarget_lock_release_recursive>
 800e0ba:	e7dd      	b.n	800e078 <_fflush_r+0xc>

0800e0bc <memmove>:
 800e0bc:	4288      	cmp	r0, r1
 800e0be:	b510      	push	{r4, lr}
 800e0c0:	eb01 0402 	add.w	r4, r1, r2
 800e0c4:	d902      	bls.n	800e0cc <memmove+0x10>
 800e0c6:	4284      	cmp	r4, r0
 800e0c8:	4623      	mov	r3, r4
 800e0ca:	d807      	bhi.n	800e0dc <memmove+0x20>
 800e0cc:	1e43      	subs	r3, r0, #1
 800e0ce:	42a1      	cmp	r1, r4
 800e0d0:	d008      	beq.n	800e0e4 <memmove+0x28>
 800e0d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0da:	e7f8      	b.n	800e0ce <memmove+0x12>
 800e0dc:	4402      	add	r2, r0
 800e0de:	4601      	mov	r1, r0
 800e0e0:	428a      	cmp	r2, r1
 800e0e2:	d100      	bne.n	800e0e6 <memmove+0x2a>
 800e0e4:	bd10      	pop	{r4, pc}
 800e0e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0ee:	e7f7      	b.n	800e0e0 <memmove+0x24>

0800e0f0 <strncmp>:
 800e0f0:	b510      	push	{r4, lr}
 800e0f2:	b16a      	cbz	r2, 800e110 <strncmp+0x20>
 800e0f4:	3901      	subs	r1, #1
 800e0f6:	1884      	adds	r4, r0, r2
 800e0f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e100:	429a      	cmp	r2, r3
 800e102:	d103      	bne.n	800e10c <strncmp+0x1c>
 800e104:	42a0      	cmp	r0, r4
 800e106:	d001      	beq.n	800e10c <strncmp+0x1c>
 800e108:	2a00      	cmp	r2, #0
 800e10a:	d1f5      	bne.n	800e0f8 <strncmp+0x8>
 800e10c:	1ad0      	subs	r0, r2, r3
 800e10e:	bd10      	pop	{r4, pc}
 800e110:	4610      	mov	r0, r2
 800e112:	e7fc      	b.n	800e10e <strncmp+0x1e>

0800e114 <_sbrk_r>:
 800e114:	b538      	push	{r3, r4, r5, lr}
 800e116:	4d06      	ldr	r5, [pc, #24]	@ (800e130 <_sbrk_r+0x1c>)
 800e118:	2300      	movs	r3, #0
 800e11a:	4604      	mov	r4, r0
 800e11c:	4608      	mov	r0, r1
 800e11e:	602b      	str	r3, [r5, #0]
 800e120:	f7f3 fc3c 	bl	800199c <_sbrk>
 800e124:	1c43      	adds	r3, r0, #1
 800e126:	d102      	bne.n	800e12e <_sbrk_r+0x1a>
 800e128:	682b      	ldr	r3, [r5, #0]
 800e12a:	b103      	cbz	r3, 800e12e <_sbrk_r+0x1a>
 800e12c:	6023      	str	r3, [r4, #0]
 800e12e:	bd38      	pop	{r3, r4, r5, pc}
 800e130:	20000654 	.word	0x20000654
 800e134:	00000000 	.word	0x00000000

0800e138 <nan>:
 800e138:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e140 <nan+0x8>
 800e13c:	4770      	bx	lr
 800e13e:	bf00      	nop
 800e140:	00000000 	.word	0x00000000
 800e144:	7ff80000 	.word	0x7ff80000

0800e148 <__assert_func>:
 800e148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e14a:	4614      	mov	r4, r2
 800e14c:	461a      	mov	r2, r3
 800e14e:	4b09      	ldr	r3, [pc, #36]	@ (800e174 <__assert_func+0x2c>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4605      	mov	r5, r0
 800e154:	68d8      	ldr	r0, [r3, #12]
 800e156:	b954      	cbnz	r4, 800e16e <__assert_func+0x26>
 800e158:	4b07      	ldr	r3, [pc, #28]	@ (800e178 <__assert_func+0x30>)
 800e15a:	461c      	mov	r4, r3
 800e15c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e160:	9100      	str	r1, [sp, #0]
 800e162:	462b      	mov	r3, r5
 800e164:	4905      	ldr	r1, [pc, #20]	@ (800e17c <__assert_func+0x34>)
 800e166:	f000 fba7 	bl	800e8b8 <fiprintf>
 800e16a:	f000 fbb7 	bl	800e8dc <abort>
 800e16e:	4b04      	ldr	r3, [pc, #16]	@ (800e180 <__assert_func+0x38>)
 800e170:	e7f4      	b.n	800e15c <__assert_func+0x14>
 800e172:	bf00      	nop
 800e174:	200000b4 	.word	0x200000b4
 800e178:	0800f265 	.word	0x0800f265
 800e17c:	0800f237 	.word	0x0800f237
 800e180:	0800f22a 	.word	0x0800f22a

0800e184 <_calloc_r>:
 800e184:	b570      	push	{r4, r5, r6, lr}
 800e186:	fba1 5402 	umull	r5, r4, r1, r2
 800e18a:	b93c      	cbnz	r4, 800e19c <_calloc_r+0x18>
 800e18c:	4629      	mov	r1, r5
 800e18e:	f7fe f9cf 	bl	800c530 <_malloc_r>
 800e192:	4606      	mov	r6, r0
 800e194:	b928      	cbnz	r0, 800e1a2 <_calloc_r+0x1e>
 800e196:	2600      	movs	r6, #0
 800e198:	4630      	mov	r0, r6
 800e19a:	bd70      	pop	{r4, r5, r6, pc}
 800e19c:	220c      	movs	r2, #12
 800e19e:	6002      	str	r2, [r0, #0]
 800e1a0:	e7f9      	b.n	800e196 <_calloc_r+0x12>
 800e1a2:	462a      	mov	r2, r5
 800e1a4:	4621      	mov	r1, r4
 800e1a6:	f7fd fa6e 	bl	800b686 <memset>
 800e1aa:	e7f5      	b.n	800e198 <_calloc_r+0x14>

0800e1ac <rshift>:
 800e1ac:	6903      	ldr	r3, [r0, #16]
 800e1ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e1b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e1ba:	f100 0414 	add.w	r4, r0, #20
 800e1be:	dd45      	ble.n	800e24c <rshift+0xa0>
 800e1c0:	f011 011f 	ands.w	r1, r1, #31
 800e1c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e1c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e1cc:	d10c      	bne.n	800e1e8 <rshift+0x3c>
 800e1ce:	f100 0710 	add.w	r7, r0, #16
 800e1d2:	4629      	mov	r1, r5
 800e1d4:	42b1      	cmp	r1, r6
 800e1d6:	d334      	bcc.n	800e242 <rshift+0x96>
 800e1d8:	1a9b      	subs	r3, r3, r2
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	1eea      	subs	r2, r5, #3
 800e1de:	4296      	cmp	r6, r2
 800e1e0:	bf38      	it	cc
 800e1e2:	2300      	movcc	r3, #0
 800e1e4:	4423      	add	r3, r4
 800e1e6:	e015      	b.n	800e214 <rshift+0x68>
 800e1e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e1ec:	f1c1 0820 	rsb	r8, r1, #32
 800e1f0:	40cf      	lsrs	r7, r1
 800e1f2:	f105 0e04 	add.w	lr, r5, #4
 800e1f6:	46a1      	mov	r9, r4
 800e1f8:	4576      	cmp	r6, lr
 800e1fa:	46f4      	mov	ip, lr
 800e1fc:	d815      	bhi.n	800e22a <rshift+0x7e>
 800e1fe:	1a9a      	subs	r2, r3, r2
 800e200:	0092      	lsls	r2, r2, #2
 800e202:	3a04      	subs	r2, #4
 800e204:	3501      	adds	r5, #1
 800e206:	42ae      	cmp	r6, r5
 800e208:	bf38      	it	cc
 800e20a:	2200      	movcc	r2, #0
 800e20c:	18a3      	adds	r3, r4, r2
 800e20e:	50a7      	str	r7, [r4, r2]
 800e210:	b107      	cbz	r7, 800e214 <rshift+0x68>
 800e212:	3304      	adds	r3, #4
 800e214:	1b1a      	subs	r2, r3, r4
 800e216:	42a3      	cmp	r3, r4
 800e218:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e21c:	bf08      	it	eq
 800e21e:	2300      	moveq	r3, #0
 800e220:	6102      	str	r2, [r0, #16]
 800e222:	bf08      	it	eq
 800e224:	6143      	streq	r3, [r0, #20]
 800e226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e22a:	f8dc c000 	ldr.w	ip, [ip]
 800e22e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e232:	ea4c 0707 	orr.w	r7, ip, r7
 800e236:	f849 7b04 	str.w	r7, [r9], #4
 800e23a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e23e:	40cf      	lsrs	r7, r1
 800e240:	e7da      	b.n	800e1f8 <rshift+0x4c>
 800e242:	f851 cb04 	ldr.w	ip, [r1], #4
 800e246:	f847 cf04 	str.w	ip, [r7, #4]!
 800e24a:	e7c3      	b.n	800e1d4 <rshift+0x28>
 800e24c:	4623      	mov	r3, r4
 800e24e:	e7e1      	b.n	800e214 <rshift+0x68>

0800e250 <__hexdig_fun>:
 800e250:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e254:	2b09      	cmp	r3, #9
 800e256:	d802      	bhi.n	800e25e <__hexdig_fun+0xe>
 800e258:	3820      	subs	r0, #32
 800e25a:	b2c0      	uxtb	r0, r0
 800e25c:	4770      	bx	lr
 800e25e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e262:	2b05      	cmp	r3, #5
 800e264:	d801      	bhi.n	800e26a <__hexdig_fun+0x1a>
 800e266:	3847      	subs	r0, #71	@ 0x47
 800e268:	e7f7      	b.n	800e25a <__hexdig_fun+0xa>
 800e26a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e26e:	2b05      	cmp	r3, #5
 800e270:	d801      	bhi.n	800e276 <__hexdig_fun+0x26>
 800e272:	3827      	subs	r0, #39	@ 0x27
 800e274:	e7f1      	b.n	800e25a <__hexdig_fun+0xa>
 800e276:	2000      	movs	r0, #0
 800e278:	4770      	bx	lr
	...

0800e27c <__gethex>:
 800e27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e280:	b085      	sub	sp, #20
 800e282:	468a      	mov	sl, r1
 800e284:	9302      	str	r3, [sp, #8]
 800e286:	680b      	ldr	r3, [r1, #0]
 800e288:	9001      	str	r0, [sp, #4]
 800e28a:	4690      	mov	r8, r2
 800e28c:	1c9c      	adds	r4, r3, #2
 800e28e:	46a1      	mov	r9, r4
 800e290:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e294:	2830      	cmp	r0, #48	@ 0x30
 800e296:	d0fa      	beq.n	800e28e <__gethex+0x12>
 800e298:	eba9 0303 	sub.w	r3, r9, r3
 800e29c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e2a0:	f7ff ffd6 	bl	800e250 <__hexdig_fun>
 800e2a4:	4605      	mov	r5, r0
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d168      	bne.n	800e37c <__gethex+0x100>
 800e2aa:	49a0      	ldr	r1, [pc, #640]	@ (800e52c <__gethex+0x2b0>)
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	4648      	mov	r0, r9
 800e2b0:	f7ff ff1e 	bl	800e0f0 <strncmp>
 800e2b4:	4607      	mov	r7, r0
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	d167      	bne.n	800e38a <__gethex+0x10e>
 800e2ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e2be:	4626      	mov	r6, r4
 800e2c0:	f7ff ffc6 	bl	800e250 <__hexdig_fun>
 800e2c4:	2800      	cmp	r0, #0
 800e2c6:	d062      	beq.n	800e38e <__gethex+0x112>
 800e2c8:	4623      	mov	r3, r4
 800e2ca:	7818      	ldrb	r0, [r3, #0]
 800e2cc:	2830      	cmp	r0, #48	@ 0x30
 800e2ce:	4699      	mov	r9, r3
 800e2d0:	f103 0301 	add.w	r3, r3, #1
 800e2d4:	d0f9      	beq.n	800e2ca <__gethex+0x4e>
 800e2d6:	f7ff ffbb 	bl	800e250 <__hexdig_fun>
 800e2da:	fab0 f580 	clz	r5, r0
 800e2de:	096d      	lsrs	r5, r5, #5
 800e2e0:	f04f 0b01 	mov.w	fp, #1
 800e2e4:	464a      	mov	r2, r9
 800e2e6:	4616      	mov	r6, r2
 800e2e8:	3201      	adds	r2, #1
 800e2ea:	7830      	ldrb	r0, [r6, #0]
 800e2ec:	f7ff ffb0 	bl	800e250 <__hexdig_fun>
 800e2f0:	2800      	cmp	r0, #0
 800e2f2:	d1f8      	bne.n	800e2e6 <__gethex+0x6a>
 800e2f4:	498d      	ldr	r1, [pc, #564]	@ (800e52c <__gethex+0x2b0>)
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	4630      	mov	r0, r6
 800e2fa:	f7ff fef9 	bl	800e0f0 <strncmp>
 800e2fe:	2800      	cmp	r0, #0
 800e300:	d13f      	bne.n	800e382 <__gethex+0x106>
 800e302:	b944      	cbnz	r4, 800e316 <__gethex+0x9a>
 800e304:	1c74      	adds	r4, r6, #1
 800e306:	4622      	mov	r2, r4
 800e308:	4616      	mov	r6, r2
 800e30a:	3201      	adds	r2, #1
 800e30c:	7830      	ldrb	r0, [r6, #0]
 800e30e:	f7ff ff9f 	bl	800e250 <__hexdig_fun>
 800e312:	2800      	cmp	r0, #0
 800e314:	d1f8      	bne.n	800e308 <__gethex+0x8c>
 800e316:	1ba4      	subs	r4, r4, r6
 800e318:	00a7      	lsls	r7, r4, #2
 800e31a:	7833      	ldrb	r3, [r6, #0]
 800e31c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e320:	2b50      	cmp	r3, #80	@ 0x50
 800e322:	d13e      	bne.n	800e3a2 <__gethex+0x126>
 800e324:	7873      	ldrb	r3, [r6, #1]
 800e326:	2b2b      	cmp	r3, #43	@ 0x2b
 800e328:	d033      	beq.n	800e392 <__gethex+0x116>
 800e32a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e32c:	d034      	beq.n	800e398 <__gethex+0x11c>
 800e32e:	1c71      	adds	r1, r6, #1
 800e330:	2400      	movs	r4, #0
 800e332:	7808      	ldrb	r0, [r1, #0]
 800e334:	f7ff ff8c 	bl	800e250 <__hexdig_fun>
 800e338:	1e43      	subs	r3, r0, #1
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	2b18      	cmp	r3, #24
 800e33e:	d830      	bhi.n	800e3a2 <__gethex+0x126>
 800e340:	f1a0 0210 	sub.w	r2, r0, #16
 800e344:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e348:	f7ff ff82 	bl	800e250 <__hexdig_fun>
 800e34c:	f100 3cff 	add.w	ip, r0, #4294967295
 800e350:	fa5f fc8c 	uxtb.w	ip, ip
 800e354:	f1bc 0f18 	cmp.w	ip, #24
 800e358:	f04f 030a 	mov.w	r3, #10
 800e35c:	d91e      	bls.n	800e39c <__gethex+0x120>
 800e35e:	b104      	cbz	r4, 800e362 <__gethex+0xe6>
 800e360:	4252      	negs	r2, r2
 800e362:	4417      	add	r7, r2
 800e364:	f8ca 1000 	str.w	r1, [sl]
 800e368:	b1ed      	cbz	r5, 800e3a6 <__gethex+0x12a>
 800e36a:	f1bb 0f00 	cmp.w	fp, #0
 800e36e:	bf0c      	ite	eq
 800e370:	2506      	moveq	r5, #6
 800e372:	2500      	movne	r5, #0
 800e374:	4628      	mov	r0, r5
 800e376:	b005      	add	sp, #20
 800e378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e37c:	2500      	movs	r5, #0
 800e37e:	462c      	mov	r4, r5
 800e380:	e7b0      	b.n	800e2e4 <__gethex+0x68>
 800e382:	2c00      	cmp	r4, #0
 800e384:	d1c7      	bne.n	800e316 <__gethex+0x9a>
 800e386:	4627      	mov	r7, r4
 800e388:	e7c7      	b.n	800e31a <__gethex+0x9e>
 800e38a:	464e      	mov	r6, r9
 800e38c:	462f      	mov	r7, r5
 800e38e:	2501      	movs	r5, #1
 800e390:	e7c3      	b.n	800e31a <__gethex+0x9e>
 800e392:	2400      	movs	r4, #0
 800e394:	1cb1      	adds	r1, r6, #2
 800e396:	e7cc      	b.n	800e332 <__gethex+0xb6>
 800e398:	2401      	movs	r4, #1
 800e39a:	e7fb      	b.n	800e394 <__gethex+0x118>
 800e39c:	fb03 0002 	mla	r0, r3, r2, r0
 800e3a0:	e7ce      	b.n	800e340 <__gethex+0xc4>
 800e3a2:	4631      	mov	r1, r6
 800e3a4:	e7de      	b.n	800e364 <__gethex+0xe8>
 800e3a6:	eba6 0309 	sub.w	r3, r6, r9
 800e3aa:	3b01      	subs	r3, #1
 800e3ac:	4629      	mov	r1, r5
 800e3ae:	2b07      	cmp	r3, #7
 800e3b0:	dc0a      	bgt.n	800e3c8 <__gethex+0x14c>
 800e3b2:	9801      	ldr	r0, [sp, #4]
 800e3b4:	f7fe f948 	bl	800c648 <_Balloc>
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	b940      	cbnz	r0, 800e3ce <__gethex+0x152>
 800e3bc:	4b5c      	ldr	r3, [pc, #368]	@ (800e530 <__gethex+0x2b4>)
 800e3be:	4602      	mov	r2, r0
 800e3c0:	21e4      	movs	r1, #228	@ 0xe4
 800e3c2:	485c      	ldr	r0, [pc, #368]	@ (800e534 <__gethex+0x2b8>)
 800e3c4:	f7ff fec0 	bl	800e148 <__assert_func>
 800e3c8:	3101      	adds	r1, #1
 800e3ca:	105b      	asrs	r3, r3, #1
 800e3cc:	e7ef      	b.n	800e3ae <__gethex+0x132>
 800e3ce:	f100 0a14 	add.w	sl, r0, #20
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	4655      	mov	r5, sl
 800e3d6:	469b      	mov	fp, r3
 800e3d8:	45b1      	cmp	r9, r6
 800e3da:	d337      	bcc.n	800e44c <__gethex+0x1d0>
 800e3dc:	f845 bb04 	str.w	fp, [r5], #4
 800e3e0:	eba5 050a 	sub.w	r5, r5, sl
 800e3e4:	10ad      	asrs	r5, r5, #2
 800e3e6:	6125      	str	r5, [r4, #16]
 800e3e8:	4658      	mov	r0, fp
 800e3ea:	f7fe fa1f 	bl	800c82c <__hi0bits>
 800e3ee:	016d      	lsls	r5, r5, #5
 800e3f0:	f8d8 6000 	ldr.w	r6, [r8]
 800e3f4:	1a2d      	subs	r5, r5, r0
 800e3f6:	42b5      	cmp	r5, r6
 800e3f8:	dd54      	ble.n	800e4a4 <__gethex+0x228>
 800e3fa:	1bad      	subs	r5, r5, r6
 800e3fc:	4629      	mov	r1, r5
 800e3fe:	4620      	mov	r0, r4
 800e400:	f7fe fdb3 	bl	800cf6a <__any_on>
 800e404:	4681      	mov	r9, r0
 800e406:	b178      	cbz	r0, 800e428 <__gethex+0x1ac>
 800e408:	1e6b      	subs	r3, r5, #1
 800e40a:	1159      	asrs	r1, r3, #5
 800e40c:	f003 021f 	and.w	r2, r3, #31
 800e410:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e414:	f04f 0901 	mov.w	r9, #1
 800e418:	fa09 f202 	lsl.w	r2, r9, r2
 800e41c:	420a      	tst	r2, r1
 800e41e:	d003      	beq.n	800e428 <__gethex+0x1ac>
 800e420:	454b      	cmp	r3, r9
 800e422:	dc36      	bgt.n	800e492 <__gethex+0x216>
 800e424:	f04f 0902 	mov.w	r9, #2
 800e428:	4629      	mov	r1, r5
 800e42a:	4620      	mov	r0, r4
 800e42c:	f7ff febe 	bl	800e1ac <rshift>
 800e430:	442f      	add	r7, r5
 800e432:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e436:	42bb      	cmp	r3, r7
 800e438:	da42      	bge.n	800e4c0 <__gethex+0x244>
 800e43a:	9801      	ldr	r0, [sp, #4]
 800e43c:	4621      	mov	r1, r4
 800e43e:	f7fe f943 	bl	800c6c8 <_Bfree>
 800e442:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e444:	2300      	movs	r3, #0
 800e446:	6013      	str	r3, [r2, #0]
 800e448:	25a3      	movs	r5, #163	@ 0xa3
 800e44a:	e793      	b.n	800e374 <__gethex+0xf8>
 800e44c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e450:	2a2e      	cmp	r2, #46	@ 0x2e
 800e452:	d012      	beq.n	800e47a <__gethex+0x1fe>
 800e454:	2b20      	cmp	r3, #32
 800e456:	d104      	bne.n	800e462 <__gethex+0x1e6>
 800e458:	f845 bb04 	str.w	fp, [r5], #4
 800e45c:	f04f 0b00 	mov.w	fp, #0
 800e460:	465b      	mov	r3, fp
 800e462:	7830      	ldrb	r0, [r6, #0]
 800e464:	9303      	str	r3, [sp, #12]
 800e466:	f7ff fef3 	bl	800e250 <__hexdig_fun>
 800e46a:	9b03      	ldr	r3, [sp, #12]
 800e46c:	f000 000f 	and.w	r0, r0, #15
 800e470:	4098      	lsls	r0, r3
 800e472:	ea4b 0b00 	orr.w	fp, fp, r0
 800e476:	3304      	adds	r3, #4
 800e478:	e7ae      	b.n	800e3d8 <__gethex+0x15c>
 800e47a:	45b1      	cmp	r9, r6
 800e47c:	d8ea      	bhi.n	800e454 <__gethex+0x1d8>
 800e47e:	492b      	ldr	r1, [pc, #172]	@ (800e52c <__gethex+0x2b0>)
 800e480:	9303      	str	r3, [sp, #12]
 800e482:	2201      	movs	r2, #1
 800e484:	4630      	mov	r0, r6
 800e486:	f7ff fe33 	bl	800e0f0 <strncmp>
 800e48a:	9b03      	ldr	r3, [sp, #12]
 800e48c:	2800      	cmp	r0, #0
 800e48e:	d1e1      	bne.n	800e454 <__gethex+0x1d8>
 800e490:	e7a2      	b.n	800e3d8 <__gethex+0x15c>
 800e492:	1ea9      	subs	r1, r5, #2
 800e494:	4620      	mov	r0, r4
 800e496:	f7fe fd68 	bl	800cf6a <__any_on>
 800e49a:	2800      	cmp	r0, #0
 800e49c:	d0c2      	beq.n	800e424 <__gethex+0x1a8>
 800e49e:	f04f 0903 	mov.w	r9, #3
 800e4a2:	e7c1      	b.n	800e428 <__gethex+0x1ac>
 800e4a4:	da09      	bge.n	800e4ba <__gethex+0x23e>
 800e4a6:	1b75      	subs	r5, r6, r5
 800e4a8:	4621      	mov	r1, r4
 800e4aa:	9801      	ldr	r0, [sp, #4]
 800e4ac:	462a      	mov	r2, r5
 800e4ae:	f7fe fb23 	bl	800caf8 <__lshift>
 800e4b2:	1b7f      	subs	r7, r7, r5
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	f100 0a14 	add.w	sl, r0, #20
 800e4ba:	f04f 0900 	mov.w	r9, #0
 800e4be:	e7b8      	b.n	800e432 <__gethex+0x1b6>
 800e4c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e4c4:	42bd      	cmp	r5, r7
 800e4c6:	dd6f      	ble.n	800e5a8 <__gethex+0x32c>
 800e4c8:	1bed      	subs	r5, r5, r7
 800e4ca:	42ae      	cmp	r6, r5
 800e4cc:	dc34      	bgt.n	800e538 <__gethex+0x2bc>
 800e4ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e4d2:	2b02      	cmp	r3, #2
 800e4d4:	d022      	beq.n	800e51c <__gethex+0x2a0>
 800e4d6:	2b03      	cmp	r3, #3
 800e4d8:	d024      	beq.n	800e524 <__gethex+0x2a8>
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	d115      	bne.n	800e50a <__gethex+0x28e>
 800e4de:	42ae      	cmp	r6, r5
 800e4e0:	d113      	bne.n	800e50a <__gethex+0x28e>
 800e4e2:	2e01      	cmp	r6, #1
 800e4e4:	d10b      	bne.n	800e4fe <__gethex+0x282>
 800e4e6:	9a02      	ldr	r2, [sp, #8]
 800e4e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e4ec:	6013      	str	r3, [r2, #0]
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	6123      	str	r3, [r4, #16]
 800e4f2:	f8ca 3000 	str.w	r3, [sl]
 800e4f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4f8:	2562      	movs	r5, #98	@ 0x62
 800e4fa:	601c      	str	r4, [r3, #0]
 800e4fc:	e73a      	b.n	800e374 <__gethex+0xf8>
 800e4fe:	1e71      	subs	r1, r6, #1
 800e500:	4620      	mov	r0, r4
 800e502:	f7fe fd32 	bl	800cf6a <__any_on>
 800e506:	2800      	cmp	r0, #0
 800e508:	d1ed      	bne.n	800e4e6 <__gethex+0x26a>
 800e50a:	9801      	ldr	r0, [sp, #4]
 800e50c:	4621      	mov	r1, r4
 800e50e:	f7fe f8db 	bl	800c6c8 <_Bfree>
 800e512:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e514:	2300      	movs	r3, #0
 800e516:	6013      	str	r3, [r2, #0]
 800e518:	2550      	movs	r5, #80	@ 0x50
 800e51a:	e72b      	b.n	800e374 <__gethex+0xf8>
 800e51c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1f3      	bne.n	800e50a <__gethex+0x28e>
 800e522:	e7e0      	b.n	800e4e6 <__gethex+0x26a>
 800e524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e526:	2b00      	cmp	r3, #0
 800e528:	d1dd      	bne.n	800e4e6 <__gethex+0x26a>
 800e52a:	e7ee      	b.n	800e50a <__gethex+0x28e>
 800e52c:	0800f0b8 	.word	0x0800f0b8
 800e530:	0800ef4c 	.word	0x0800ef4c
 800e534:	0800f266 	.word	0x0800f266
 800e538:	1e6f      	subs	r7, r5, #1
 800e53a:	f1b9 0f00 	cmp.w	r9, #0
 800e53e:	d130      	bne.n	800e5a2 <__gethex+0x326>
 800e540:	b127      	cbz	r7, 800e54c <__gethex+0x2d0>
 800e542:	4639      	mov	r1, r7
 800e544:	4620      	mov	r0, r4
 800e546:	f7fe fd10 	bl	800cf6a <__any_on>
 800e54a:	4681      	mov	r9, r0
 800e54c:	117a      	asrs	r2, r7, #5
 800e54e:	2301      	movs	r3, #1
 800e550:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e554:	f007 071f 	and.w	r7, r7, #31
 800e558:	40bb      	lsls	r3, r7
 800e55a:	4213      	tst	r3, r2
 800e55c:	4629      	mov	r1, r5
 800e55e:	4620      	mov	r0, r4
 800e560:	bf18      	it	ne
 800e562:	f049 0902 	orrne.w	r9, r9, #2
 800e566:	f7ff fe21 	bl	800e1ac <rshift>
 800e56a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e56e:	1b76      	subs	r6, r6, r5
 800e570:	2502      	movs	r5, #2
 800e572:	f1b9 0f00 	cmp.w	r9, #0
 800e576:	d047      	beq.n	800e608 <__gethex+0x38c>
 800e578:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e57c:	2b02      	cmp	r3, #2
 800e57e:	d015      	beq.n	800e5ac <__gethex+0x330>
 800e580:	2b03      	cmp	r3, #3
 800e582:	d017      	beq.n	800e5b4 <__gethex+0x338>
 800e584:	2b01      	cmp	r3, #1
 800e586:	d109      	bne.n	800e59c <__gethex+0x320>
 800e588:	f019 0f02 	tst.w	r9, #2
 800e58c:	d006      	beq.n	800e59c <__gethex+0x320>
 800e58e:	f8da 3000 	ldr.w	r3, [sl]
 800e592:	ea49 0903 	orr.w	r9, r9, r3
 800e596:	f019 0f01 	tst.w	r9, #1
 800e59a:	d10e      	bne.n	800e5ba <__gethex+0x33e>
 800e59c:	f045 0510 	orr.w	r5, r5, #16
 800e5a0:	e032      	b.n	800e608 <__gethex+0x38c>
 800e5a2:	f04f 0901 	mov.w	r9, #1
 800e5a6:	e7d1      	b.n	800e54c <__gethex+0x2d0>
 800e5a8:	2501      	movs	r5, #1
 800e5aa:	e7e2      	b.n	800e572 <__gethex+0x2f6>
 800e5ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5ae:	f1c3 0301 	rsb	r3, r3, #1
 800e5b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d0f0      	beq.n	800e59c <__gethex+0x320>
 800e5ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e5be:	f104 0314 	add.w	r3, r4, #20
 800e5c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e5c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e5ca:	f04f 0c00 	mov.w	ip, #0
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e5d8:	d01b      	beq.n	800e612 <__gethex+0x396>
 800e5da:	3201      	adds	r2, #1
 800e5dc:	6002      	str	r2, [r0, #0]
 800e5de:	2d02      	cmp	r5, #2
 800e5e0:	f104 0314 	add.w	r3, r4, #20
 800e5e4:	d13c      	bne.n	800e660 <__gethex+0x3e4>
 800e5e6:	f8d8 2000 	ldr.w	r2, [r8]
 800e5ea:	3a01      	subs	r2, #1
 800e5ec:	42b2      	cmp	r2, r6
 800e5ee:	d109      	bne.n	800e604 <__gethex+0x388>
 800e5f0:	1171      	asrs	r1, r6, #5
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5f8:	f006 061f 	and.w	r6, r6, #31
 800e5fc:	fa02 f606 	lsl.w	r6, r2, r6
 800e600:	421e      	tst	r6, r3
 800e602:	d13a      	bne.n	800e67a <__gethex+0x3fe>
 800e604:	f045 0520 	orr.w	r5, r5, #32
 800e608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e60a:	601c      	str	r4, [r3, #0]
 800e60c:	9b02      	ldr	r3, [sp, #8]
 800e60e:	601f      	str	r7, [r3, #0]
 800e610:	e6b0      	b.n	800e374 <__gethex+0xf8>
 800e612:	4299      	cmp	r1, r3
 800e614:	f843 cc04 	str.w	ip, [r3, #-4]
 800e618:	d8d9      	bhi.n	800e5ce <__gethex+0x352>
 800e61a:	68a3      	ldr	r3, [r4, #8]
 800e61c:	459b      	cmp	fp, r3
 800e61e:	db17      	blt.n	800e650 <__gethex+0x3d4>
 800e620:	6861      	ldr	r1, [r4, #4]
 800e622:	9801      	ldr	r0, [sp, #4]
 800e624:	3101      	adds	r1, #1
 800e626:	f7fe f80f 	bl	800c648 <_Balloc>
 800e62a:	4681      	mov	r9, r0
 800e62c:	b918      	cbnz	r0, 800e636 <__gethex+0x3ba>
 800e62e:	4b1a      	ldr	r3, [pc, #104]	@ (800e698 <__gethex+0x41c>)
 800e630:	4602      	mov	r2, r0
 800e632:	2184      	movs	r1, #132	@ 0x84
 800e634:	e6c5      	b.n	800e3c2 <__gethex+0x146>
 800e636:	6922      	ldr	r2, [r4, #16]
 800e638:	3202      	adds	r2, #2
 800e63a:	f104 010c 	add.w	r1, r4, #12
 800e63e:	0092      	lsls	r2, r2, #2
 800e640:	300c      	adds	r0, #12
 800e642:	f7fd f8a0 	bl	800b786 <memcpy>
 800e646:	4621      	mov	r1, r4
 800e648:	9801      	ldr	r0, [sp, #4]
 800e64a:	f7fe f83d 	bl	800c6c8 <_Bfree>
 800e64e:	464c      	mov	r4, r9
 800e650:	6923      	ldr	r3, [r4, #16]
 800e652:	1c5a      	adds	r2, r3, #1
 800e654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e658:	6122      	str	r2, [r4, #16]
 800e65a:	2201      	movs	r2, #1
 800e65c:	615a      	str	r2, [r3, #20]
 800e65e:	e7be      	b.n	800e5de <__gethex+0x362>
 800e660:	6922      	ldr	r2, [r4, #16]
 800e662:	455a      	cmp	r2, fp
 800e664:	dd0b      	ble.n	800e67e <__gethex+0x402>
 800e666:	2101      	movs	r1, #1
 800e668:	4620      	mov	r0, r4
 800e66a:	f7ff fd9f 	bl	800e1ac <rshift>
 800e66e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e672:	3701      	adds	r7, #1
 800e674:	42bb      	cmp	r3, r7
 800e676:	f6ff aee0 	blt.w	800e43a <__gethex+0x1be>
 800e67a:	2501      	movs	r5, #1
 800e67c:	e7c2      	b.n	800e604 <__gethex+0x388>
 800e67e:	f016 061f 	ands.w	r6, r6, #31
 800e682:	d0fa      	beq.n	800e67a <__gethex+0x3fe>
 800e684:	4453      	add	r3, sl
 800e686:	f1c6 0620 	rsb	r6, r6, #32
 800e68a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e68e:	f7fe f8cd 	bl	800c82c <__hi0bits>
 800e692:	42b0      	cmp	r0, r6
 800e694:	dbe7      	blt.n	800e666 <__gethex+0x3ea>
 800e696:	e7f0      	b.n	800e67a <__gethex+0x3fe>
 800e698:	0800ef4c 	.word	0x0800ef4c

0800e69c <L_shift>:
 800e69c:	f1c2 0208 	rsb	r2, r2, #8
 800e6a0:	0092      	lsls	r2, r2, #2
 800e6a2:	b570      	push	{r4, r5, r6, lr}
 800e6a4:	f1c2 0620 	rsb	r6, r2, #32
 800e6a8:	6843      	ldr	r3, [r0, #4]
 800e6aa:	6804      	ldr	r4, [r0, #0]
 800e6ac:	fa03 f506 	lsl.w	r5, r3, r6
 800e6b0:	432c      	orrs	r4, r5
 800e6b2:	40d3      	lsrs	r3, r2
 800e6b4:	6004      	str	r4, [r0, #0]
 800e6b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e6ba:	4288      	cmp	r0, r1
 800e6bc:	d3f4      	bcc.n	800e6a8 <L_shift+0xc>
 800e6be:	bd70      	pop	{r4, r5, r6, pc}

0800e6c0 <__match>:
 800e6c0:	b530      	push	{r4, r5, lr}
 800e6c2:	6803      	ldr	r3, [r0, #0]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6ca:	b914      	cbnz	r4, 800e6d2 <__match+0x12>
 800e6cc:	6003      	str	r3, [r0, #0]
 800e6ce:	2001      	movs	r0, #1
 800e6d0:	bd30      	pop	{r4, r5, pc}
 800e6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e6da:	2d19      	cmp	r5, #25
 800e6dc:	bf98      	it	ls
 800e6de:	3220      	addls	r2, #32
 800e6e0:	42a2      	cmp	r2, r4
 800e6e2:	d0f0      	beq.n	800e6c6 <__match+0x6>
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	e7f3      	b.n	800e6d0 <__match+0x10>

0800e6e8 <__hexnan>:
 800e6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ec:	680b      	ldr	r3, [r1, #0]
 800e6ee:	6801      	ldr	r1, [r0, #0]
 800e6f0:	115e      	asrs	r6, r3, #5
 800e6f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e6f6:	f013 031f 	ands.w	r3, r3, #31
 800e6fa:	b087      	sub	sp, #28
 800e6fc:	bf18      	it	ne
 800e6fe:	3604      	addne	r6, #4
 800e700:	2500      	movs	r5, #0
 800e702:	1f37      	subs	r7, r6, #4
 800e704:	4682      	mov	sl, r0
 800e706:	4690      	mov	r8, r2
 800e708:	9301      	str	r3, [sp, #4]
 800e70a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e70e:	46b9      	mov	r9, r7
 800e710:	463c      	mov	r4, r7
 800e712:	9502      	str	r5, [sp, #8]
 800e714:	46ab      	mov	fp, r5
 800e716:	784a      	ldrb	r2, [r1, #1]
 800e718:	1c4b      	adds	r3, r1, #1
 800e71a:	9303      	str	r3, [sp, #12]
 800e71c:	b342      	cbz	r2, 800e770 <__hexnan+0x88>
 800e71e:	4610      	mov	r0, r2
 800e720:	9105      	str	r1, [sp, #20]
 800e722:	9204      	str	r2, [sp, #16]
 800e724:	f7ff fd94 	bl	800e250 <__hexdig_fun>
 800e728:	2800      	cmp	r0, #0
 800e72a:	d151      	bne.n	800e7d0 <__hexnan+0xe8>
 800e72c:	9a04      	ldr	r2, [sp, #16]
 800e72e:	9905      	ldr	r1, [sp, #20]
 800e730:	2a20      	cmp	r2, #32
 800e732:	d818      	bhi.n	800e766 <__hexnan+0x7e>
 800e734:	9b02      	ldr	r3, [sp, #8]
 800e736:	459b      	cmp	fp, r3
 800e738:	dd13      	ble.n	800e762 <__hexnan+0x7a>
 800e73a:	454c      	cmp	r4, r9
 800e73c:	d206      	bcs.n	800e74c <__hexnan+0x64>
 800e73e:	2d07      	cmp	r5, #7
 800e740:	dc04      	bgt.n	800e74c <__hexnan+0x64>
 800e742:	462a      	mov	r2, r5
 800e744:	4649      	mov	r1, r9
 800e746:	4620      	mov	r0, r4
 800e748:	f7ff ffa8 	bl	800e69c <L_shift>
 800e74c:	4544      	cmp	r4, r8
 800e74e:	d952      	bls.n	800e7f6 <__hexnan+0x10e>
 800e750:	2300      	movs	r3, #0
 800e752:	f1a4 0904 	sub.w	r9, r4, #4
 800e756:	f844 3c04 	str.w	r3, [r4, #-4]
 800e75a:	f8cd b008 	str.w	fp, [sp, #8]
 800e75e:	464c      	mov	r4, r9
 800e760:	461d      	mov	r5, r3
 800e762:	9903      	ldr	r1, [sp, #12]
 800e764:	e7d7      	b.n	800e716 <__hexnan+0x2e>
 800e766:	2a29      	cmp	r2, #41	@ 0x29
 800e768:	d157      	bne.n	800e81a <__hexnan+0x132>
 800e76a:	3102      	adds	r1, #2
 800e76c:	f8ca 1000 	str.w	r1, [sl]
 800e770:	f1bb 0f00 	cmp.w	fp, #0
 800e774:	d051      	beq.n	800e81a <__hexnan+0x132>
 800e776:	454c      	cmp	r4, r9
 800e778:	d206      	bcs.n	800e788 <__hexnan+0xa0>
 800e77a:	2d07      	cmp	r5, #7
 800e77c:	dc04      	bgt.n	800e788 <__hexnan+0xa0>
 800e77e:	462a      	mov	r2, r5
 800e780:	4649      	mov	r1, r9
 800e782:	4620      	mov	r0, r4
 800e784:	f7ff ff8a 	bl	800e69c <L_shift>
 800e788:	4544      	cmp	r4, r8
 800e78a:	d936      	bls.n	800e7fa <__hexnan+0x112>
 800e78c:	f1a8 0204 	sub.w	r2, r8, #4
 800e790:	4623      	mov	r3, r4
 800e792:	f853 1b04 	ldr.w	r1, [r3], #4
 800e796:	f842 1f04 	str.w	r1, [r2, #4]!
 800e79a:	429f      	cmp	r7, r3
 800e79c:	d2f9      	bcs.n	800e792 <__hexnan+0xaa>
 800e79e:	1b3b      	subs	r3, r7, r4
 800e7a0:	f023 0303 	bic.w	r3, r3, #3
 800e7a4:	3304      	adds	r3, #4
 800e7a6:	3401      	adds	r4, #1
 800e7a8:	3e03      	subs	r6, #3
 800e7aa:	42b4      	cmp	r4, r6
 800e7ac:	bf88      	it	hi
 800e7ae:	2304      	movhi	r3, #4
 800e7b0:	4443      	add	r3, r8
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	f843 2b04 	str.w	r2, [r3], #4
 800e7b8:	429f      	cmp	r7, r3
 800e7ba:	d2fb      	bcs.n	800e7b4 <__hexnan+0xcc>
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	b91b      	cbnz	r3, 800e7c8 <__hexnan+0xe0>
 800e7c0:	4547      	cmp	r7, r8
 800e7c2:	d128      	bne.n	800e816 <__hexnan+0x12e>
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	603b      	str	r3, [r7, #0]
 800e7c8:	2005      	movs	r0, #5
 800e7ca:	b007      	add	sp, #28
 800e7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d0:	3501      	adds	r5, #1
 800e7d2:	2d08      	cmp	r5, #8
 800e7d4:	f10b 0b01 	add.w	fp, fp, #1
 800e7d8:	dd06      	ble.n	800e7e8 <__hexnan+0x100>
 800e7da:	4544      	cmp	r4, r8
 800e7dc:	d9c1      	bls.n	800e762 <__hexnan+0x7a>
 800e7de:	2300      	movs	r3, #0
 800e7e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e7e4:	2501      	movs	r5, #1
 800e7e6:	3c04      	subs	r4, #4
 800e7e8:	6822      	ldr	r2, [r4, #0]
 800e7ea:	f000 000f 	and.w	r0, r0, #15
 800e7ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e7f2:	6020      	str	r0, [r4, #0]
 800e7f4:	e7b5      	b.n	800e762 <__hexnan+0x7a>
 800e7f6:	2508      	movs	r5, #8
 800e7f8:	e7b3      	b.n	800e762 <__hexnan+0x7a>
 800e7fa:	9b01      	ldr	r3, [sp, #4]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d0dd      	beq.n	800e7bc <__hexnan+0xd4>
 800e800:	f1c3 0320 	rsb	r3, r3, #32
 800e804:	f04f 32ff 	mov.w	r2, #4294967295
 800e808:	40da      	lsrs	r2, r3
 800e80a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e80e:	4013      	ands	r3, r2
 800e810:	f846 3c04 	str.w	r3, [r6, #-4]
 800e814:	e7d2      	b.n	800e7bc <__hexnan+0xd4>
 800e816:	3f04      	subs	r7, #4
 800e818:	e7d0      	b.n	800e7bc <__hexnan+0xd4>
 800e81a:	2004      	movs	r0, #4
 800e81c:	e7d5      	b.n	800e7ca <__hexnan+0xe2>

0800e81e <__ascii_mbtowc>:
 800e81e:	b082      	sub	sp, #8
 800e820:	b901      	cbnz	r1, 800e824 <__ascii_mbtowc+0x6>
 800e822:	a901      	add	r1, sp, #4
 800e824:	b142      	cbz	r2, 800e838 <__ascii_mbtowc+0x1a>
 800e826:	b14b      	cbz	r3, 800e83c <__ascii_mbtowc+0x1e>
 800e828:	7813      	ldrb	r3, [r2, #0]
 800e82a:	600b      	str	r3, [r1, #0]
 800e82c:	7812      	ldrb	r2, [r2, #0]
 800e82e:	1e10      	subs	r0, r2, #0
 800e830:	bf18      	it	ne
 800e832:	2001      	movne	r0, #1
 800e834:	b002      	add	sp, #8
 800e836:	4770      	bx	lr
 800e838:	4610      	mov	r0, r2
 800e83a:	e7fb      	b.n	800e834 <__ascii_mbtowc+0x16>
 800e83c:	f06f 0001 	mvn.w	r0, #1
 800e840:	e7f8      	b.n	800e834 <__ascii_mbtowc+0x16>

0800e842 <_realloc_r>:
 800e842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e846:	4680      	mov	r8, r0
 800e848:	4615      	mov	r5, r2
 800e84a:	460c      	mov	r4, r1
 800e84c:	b921      	cbnz	r1, 800e858 <_realloc_r+0x16>
 800e84e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e852:	4611      	mov	r1, r2
 800e854:	f7fd be6c 	b.w	800c530 <_malloc_r>
 800e858:	b92a      	cbnz	r2, 800e866 <_realloc_r+0x24>
 800e85a:	f7fd fdf5 	bl	800c448 <_free_r>
 800e85e:	2400      	movs	r4, #0
 800e860:	4620      	mov	r0, r4
 800e862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e866:	f000 f840 	bl	800e8ea <_malloc_usable_size_r>
 800e86a:	4285      	cmp	r5, r0
 800e86c:	4606      	mov	r6, r0
 800e86e:	d802      	bhi.n	800e876 <_realloc_r+0x34>
 800e870:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e874:	d8f4      	bhi.n	800e860 <_realloc_r+0x1e>
 800e876:	4629      	mov	r1, r5
 800e878:	4640      	mov	r0, r8
 800e87a:	f7fd fe59 	bl	800c530 <_malloc_r>
 800e87e:	4607      	mov	r7, r0
 800e880:	2800      	cmp	r0, #0
 800e882:	d0ec      	beq.n	800e85e <_realloc_r+0x1c>
 800e884:	42b5      	cmp	r5, r6
 800e886:	462a      	mov	r2, r5
 800e888:	4621      	mov	r1, r4
 800e88a:	bf28      	it	cs
 800e88c:	4632      	movcs	r2, r6
 800e88e:	f7fc ff7a 	bl	800b786 <memcpy>
 800e892:	4621      	mov	r1, r4
 800e894:	4640      	mov	r0, r8
 800e896:	f7fd fdd7 	bl	800c448 <_free_r>
 800e89a:	463c      	mov	r4, r7
 800e89c:	e7e0      	b.n	800e860 <_realloc_r+0x1e>

0800e89e <__ascii_wctomb>:
 800e89e:	4603      	mov	r3, r0
 800e8a0:	4608      	mov	r0, r1
 800e8a2:	b141      	cbz	r1, 800e8b6 <__ascii_wctomb+0x18>
 800e8a4:	2aff      	cmp	r2, #255	@ 0xff
 800e8a6:	d904      	bls.n	800e8b2 <__ascii_wctomb+0x14>
 800e8a8:	228a      	movs	r2, #138	@ 0x8a
 800e8aa:	601a      	str	r2, [r3, #0]
 800e8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e8b0:	4770      	bx	lr
 800e8b2:	700a      	strb	r2, [r1, #0]
 800e8b4:	2001      	movs	r0, #1
 800e8b6:	4770      	bx	lr

0800e8b8 <fiprintf>:
 800e8b8:	b40e      	push	{r1, r2, r3}
 800e8ba:	b503      	push	{r0, r1, lr}
 800e8bc:	4601      	mov	r1, r0
 800e8be:	ab03      	add	r3, sp, #12
 800e8c0:	4805      	ldr	r0, [pc, #20]	@ (800e8d8 <fiprintf+0x20>)
 800e8c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8c6:	6800      	ldr	r0, [r0, #0]
 800e8c8:	9301      	str	r3, [sp, #4]
 800e8ca:	f000 f83f 	bl	800e94c <_vfiprintf_r>
 800e8ce:	b002      	add	sp, #8
 800e8d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8d4:	b003      	add	sp, #12
 800e8d6:	4770      	bx	lr
 800e8d8:	200000b4 	.word	0x200000b4

0800e8dc <abort>:
 800e8dc:	b508      	push	{r3, lr}
 800e8de:	2006      	movs	r0, #6
 800e8e0:	f000 fa08 	bl	800ecf4 <raise>
 800e8e4:	2001      	movs	r0, #1
 800e8e6:	f7f2 ffe1 	bl	80018ac <_exit>

0800e8ea <_malloc_usable_size_r>:
 800e8ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8ee:	1f18      	subs	r0, r3, #4
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	bfbc      	itt	lt
 800e8f4:	580b      	ldrlt	r3, [r1, r0]
 800e8f6:	18c0      	addlt	r0, r0, r3
 800e8f8:	4770      	bx	lr

0800e8fa <__sfputc_r>:
 800e8fa:	6893      	ldr	r3, [r2, #8]
 800e8fc:	3b01      	subs	r3, #1
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	b410      	push	{r4}
 800e902:	6093      	str	r3, [r2, #8]
 800e904:	da08      	bge.n	800e918 <__sfputc_r+0x1e>
 800e906:	6994      	ldr	r4, [r2, #24]
 800e908:	42a3      	cmp	r3, r4
 800e90a:	db01      	blt.n	800e910 <__sfputc_r+0x16>
 800e90c:	290a      	cmp	r1, #10
 800e90e:	d103      	bne.n	800e918 <__sfputc_r+0x1e>
 800e910:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e914:	f000 b932 	b.w	800eb7c <__swbuf_r>
 800e918:	6813      	ldr	r3, [r2, #0]
 800e91a:	1c58      	adds	r0, r3, #1
 800e91c:	6010      	str	r0, [r2, #0]
 800e91e:	7019      	strb	r1, [r3, #0]
 800e920:	4608      	mov	r0, r1
 800e922:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e926:	4770      	bx	lr

0800e928 <__sfputs_r>:
 800e928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e92a:	4606      	mov	r6, r0
 800e92c:	460f      	mov	r7, r1
 800e92e:	4614      	mov	r4, r2
 800e930:	18d5      	adds	r5, r2, r3
 800e932:	42ac      	cmp	r4, r5
 800e934:	d101      	bne.n	800e93a <__sfputs_r+0x12>
 800e936:	2000      	movs	r0, #0
 800e938:	e007      	b.n	800e94a <__sfputs_r+0x22>
 800e93a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e93e:	463a      	mov	r2, r7
 800e940:	4630      	mov	r0, r6
 800e942:	f7ff ffda 	bl	800e8fa <__sfputc_r>
 800e946:	1c43      	adds	r3, r0, #1
 800e948:	d1f3      	bne.n	800e932 <__sfputs_r+0xa>
 800e94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e94c <_vfiprintf_r>:
 800e94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e950:	460d      	mov	r5, r1
 800e952:	b09d      	sub	sp, #116	@ 0x74
 800e954:	4614      	mov	r4, r2
 800e956:	4698      	mov	r8, r3
 800e958:	4606      	mov	r6, r0
 800e95a:	b118      	cbz	r0, 800e964 <_vfiprintf_r+0x18>
 800e95c:	6a03      	ldr	r3, [r0, #32]
 800e95e:	b90b      	cbnz	r3, 800e964 <_vfiprintf_r+0x18>
 800e960:	f7fc fdf8 	bl	800b554 <__sinit>
 800e964:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e966:	07d9      	lsls	r1, r3, #31
 800e968:	d405      	bmi.n	800e976 <_vfiprintf_r+0x2a>
 800e96a:	89ab      	ldrh	r3, [r5, #12]
 800e96c:	059a      	lsls	r2, r3, #22
 800e96e:	d402      	bmi.n	800e976 <_vfiprintf_r+0x2a>
 800e970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e972:	f7fc ff06 	bl	800b782 <__retarget_lock_acquire_recursive>
 800e976:	89ab      	ldrh	r3, [r5, #12]
 800e978:	071b      	lsls	r3, r3, #28
 800e97a:	d501      	bpl.n	800e980 <_vfiprintf_r+0x34>
 800e97c:	692b      	ldr	r3, [r5, #16]
 800e97e:	b99b      	cbnz	r3, 800e9a8 <_vfiprintf_r+0x5c>
 800e980:	4629      	mov	r1, r5
 800e982:	4630      	mov	r0, r6
 800e984:	f000 f938 	bl	800ebf8 <__swsetup_r>
 800e988:	b170      	cbz	r0, 800e9a8 <_vfiprintf_r+0x5c>
 800e98a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e98c:	07dc      	lsls	r4, r3, #31
 800e98e:	d504      	bpl.n	800e99a <_vfiprintf_r+0x4e>
 800e990:	f04f 30ff 	mov.w	r0, #4294967295
 800e994:	b01d      	add	sp, #116	@ 0x74
 800e996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e99a:	89ab      	ldrh	r3, [r5, #12]
 800e99c:	0598      	lsls	r0, r3, #22
 800e99e:	d4f7      	bmi.n	800e990 <_vfiprintf_r+0x44>
 800e9a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9a2:	f7fc feef 	bl	800b784 <__retarget_lock_release_recursive>
 800e9a6:	e7f3      	b.n	800e990 <_vfiprintf_r+0x44>
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9ac:	2320      	movs	r3, #32
 800e9ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e9b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9b6:	2330      	movs	r3, #48	@ 0x30
 800e9b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eb68 <_vfiprintf_r+0x21c>
 800e9bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e9c0:	f04f 0901 	mov.w	r9, #1
 800e9c4:	4623      	mov	r3, r4
 800e9c6:	469a      	mov	sl, r3
 800e9c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9cc:	b10a      	cbz	r2, 800e9d2 <_vfiprintf_r+0x86>
 800e9ce:	2a25      	cmp	r2, #37	@ 0x25
 800e9d0:	d1f9      	bne.n	800e9c6 <_vfiprintf_r+0x7a>
 800e9d2:	ebba 0b04 	subs.w	fp, sl, r4
 800e9d6:	d00b      	beq.n	800e9f0 <_vfiprintf_r+0xa4>
 800e9d8:	465b      	mov	r3, fp
 800e9da:	4622      	mov	r2, r4
 800e9dc:	4629      	mov	r1, r5
 800e9de:	4630      	mov	r0, r6
 800e9e0:	f7ff ffa2 	bl	800e928 <__sfputs_r>
 800e9e4:	3001      	adds	r0, #1
 800e9e6:	f000 80a7 	beq.w	800eb38 <_vfiprintf_r+0x1ec>
 800e9ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9ec:	445a      	add	r2, fp
 800e9ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800e9f0:	f89a 3000 	ldrb.w	r3, [sl]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	f000 809f 	beq.w	800eb38 <_vfiprintf_r+0x1ec>
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800ea00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea04:	f10a 0a01 	add.w	sl, sl, #1
 800ea08:	9304      	str	r3, [sp, #16]
 800ea0a:	9307      	str	r3, [sp, #28]
 800ea0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea10:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea12:	4654      	mov	r4, sl
 800ea14:	2205      	movs	r2, #5
 800ea16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea1a:	4853      	ldr	r0, [pc, #332]	@ (800eb68 <_vfiprintf_r+0x21c>)
 800ea1c:	f7f1 fc00 	bl	8000220 <memchr>
 800ea20:	9a04      	ldr	r2, [sp, #16]
 800ea22:	b9d8      	cbnz	r0, 800ea5c <_vfiprintf_r+0x110>
 800ea24:	06d1      	lsls	r1, r2, #27
 800ea26:	bf44      	itt	mi
 800ea28:	2320      	movmi	r3, #32
 800ea2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea2e:	0713      	lsls	r3, r2, #28
 800ea30:	bf44      	itt	mi
 800ea32:	232b      	movmi	r3, #43	@ 0x2b
 800ea34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea38:	f89a 3000 	ldrb.w	r3, [sl]
 800ea3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea3e:	d015      	beq.n	800ea6c <_vfiprintf_r+0x120>
 800ea40:	9a07      	ldr	r2, [sp, #28]
 800ea42:	4654      	mov	r4, sl
 800ea44:	2000      	movs	r0, #0
 800ea46:	f04f 0c0a 	mov.w	ip, #10
 800ea4a:	4621      	mov	r1, r4
 800ea4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea50:	3b30      	subs	r3, #48	@ 0x30
 800ea52:	2b09      	cmp	r3, #9
 800ea54:	d94b      	bls.n	800eaee <_vfiprintf_r+0x1a2>
 800ea56:	b1b0      	cbz	r0, 800ea86 <_vfiprintf_r+0x13a>
 800ea58:	9207      	str	r2, [sp, #28]
 800ea5a:	e014      	b.n	800ea86 <_vfiprintf_r+0x13a>
 800ea5c:	eba0 0308 	sub.w	r3, r0, r8
 800ea60:	fa09 f303 	lsl.w	r3, r9, r3
 800ea64:	4313      	orrs	r3, r2
 800ea66:	9304      	str	r3, [sp, #16]
 800ea68:	46a2      	mov	sl, r4
 800ea6a:	e7d2      	b.n	800ea12 <_vfiprintf_r+0xc6>
 800ea6c:	9b03      	ldr	r3, [sp, #12]
 800ea6e:	1d19      	adds	r1, r3, #4
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	9103      	str	r1, [sp, #12]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	bfbb      	ittet	lt
 800ea78:	425b      	neglt	r3, r3
 800ea7a:	f042 0202 	orrlt.w	r2, r2, #2
 800ea7e:	9307      	strge	r3, [sp, #28]
 800ea80:	9307      	strlt	r3, [sp, #28]
 800ea82:	bfb8      	it	lt
 800ea84:	9204      	strlt	r2, [sp, #16]
 800ea86:	7823      	ldrb	r3, [r4, #0]
 800ea88:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea8a:	d10a      	bne.n	800eaa2 <_vfiprintf_r+0x156>
 800ea8c:	7863      	ldrb	r3, [r4, #1]
 800ea8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea90:	d132      	bne.n	800eaf8 <_vfiprintf_r+0x1ac>
 800ea92:	9b03      	ldr	r3, [sp, #12]
 800ea94:	1d1a      	adds	r2, r3, #4
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	9203      	str	r2, [sp, #12]
 800ea9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea9e:	3402      	adds	r4, #2
 800eaa0:	9305      	str	r3, [sp, #20]
 800eaa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eb78 <_vfiprintf_r+0x22c>
 800eaa6:	7821      	ldrb	r1, [r4, #0]
 800eaa8:	2203      	movs	r2, #3
 800eaaa:	4650      	mov	r0, sl
 800eaac:	f7f1 fbb8 	bl	8000220 <memchr>
 800eab0:	b138      	cbz	r0, 800eac2 <_vfiprintf_r+0x176>
 800eab2:	9b04      	ldr	r3, [sp, #16]
 800eab4:	eba0 000a 	sub.w	r0, r0, sl
 800eab8:	2240      	movs	r2, #64	@ 0x40
 800eaba:	4082      	lsls	r2, r0
 800eabc:	4313      	orrs	r3, r2
 800eabe:	3401      	adds	r4, #1
 800eac0:	9304      	str	r3, [sp, #16]
 800eac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eac6:	4829      	ldr	r0, [pc, #164]	@ (800eb6c <_vfiprintf_r+0x220>)
 800eac8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eacc:	2206      	movs	r2, #6
 800eace:	f7f1 fba7 	bl	8000220 <memchr>
 800ead2:	2800      	cmp	r0, #0
 800ead4:	d03f      	beq.n	800eb56 <_vfiprintf_r+0x20a>
 800ead6:	4b26      	ldr	r3, [pc, #152]	@ (800eb70 <_vfiprintf_r+0x224>)
 800ead8:	bb1b      	cbnz	r3, 800eb22 <_vfiprintf_r+0x1d6>
 800eada:	9b03      	ldr	r3, [sp, #12]
 800eadc:	3307      	adds	r3, #7
 800eade:	f023 0307 	bic.w	r3, r3, #7
 800eae2:	3308      	adds	r3, #8
 800eae4:	9303      	str	r3, [sp, #12]
 800eae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eae8:	443b      	add	r3, r7
 800eaea:	9309      	str	r3, [sp, #36]	@ 0x24
 800eaec:	e76a      	b.n	800e9c4 <_vfiprintf_r+0x78>
 800eaee:	fb0c 3202 	mla	r2, ip, r2, r3
 800eaf2:	460c      	mov	r4, r1
 800eaf4:	2001      	movs	r0, #1
 800eaf6:	e7a8      	b.n	800ea4a <_vfiprintf_r+0xfe>
 800eaf8:	2300      	movs	r3, #0
 800eafa:	3401      	adds	r4, #1
 800eafc:	9305      	str	r3, [sp, #20]
 800eafe:	4619      	mov	r1, r3
 800eb00:	f04f 0c0a 	mov.w	ip, #10
 800eb04:	4620      	mov	r0, r4
 800eb06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb0a:	3a30      	subs	r2, #48	@ 0x30
 800eb0c:	2a09      	cmp	r2, #9
 800eb0e:	d903      	bls.n	800eb18 <_vfiprintf_r+0x1cc>
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d0c6      	beq.n	800eaa2 <_vfiprintf_r+0x156>
 800eb14:	9105      	str	r1, [sp, #20]
 800eb16:	e7c4      	b.n	800eaa2 <_vfiprintf_r+0x156>
 800eb18:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb1c:	4604      	mov	r4, r0
 800eb1e:	2301      	movs	r3, #1
 800eb20:	e7f0      	b.n	800eb04 <_vfiprintf_r+0x1b8>
 800eb22:	ab03      	add	r3, sp, #12
 800eb24:	9300      	str	r3, [sp, #0]
 800eb26:	462a      	mov	r2, r5
 800eb28:	4b12      	ldr	r3, [pc, #72]	@ (800eb74 <_vfiprintf_r+0x228>)
 800eb2a:	a904      	add	r1, sp, #16
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	f7fb feb9 	bl	800a8a4 <_printf_float>
 800eb32:	4607      	mov	r7, r0
 800eb34:	1c78      	adds	r0, r7, #1
 800eb36:	d1d6      	bne.n	800eae6 <_vfiprintf_r+0x19a>
 800eb38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb3a:	07d9      	lsls	r1, r3, #31
 800eb3c:	d405      	bmi.n	800eb4a <_vfiprintf_r+0x1fe>
 800eb3e:	89ab      	ldrh	r3, [r5, #12]
 800eb40:	059a      	lsls	r2, r3, #22
 800eb42:	d402      	bmi.n	800eb4a <_vfiprintf_r+0x1fe>
 800eb44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb46:	f7fc fe1d 	bl	800b784 <__retarget_lock_release_recursive>
 800eb4a:	89ab      	ldrh	r3, [r5, #12]
 800eb4c:	065b      	lsls	r3, r3, #25
 800eb4e:	f53f af1f 	bmi.w	800e990 <_vfiprintf_r+0x44>
 800eb52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb54:	e71e      	b.n	800e994 <_vfiprintf_r+0x48>
 800eb56:	ab03      	add	r3, sp, #12
 800eb58:	9300      	str	r3, [sp, #0]
 800eb5a:	462a      	mov	r2, r5
 800eb5c:	4b05      	ldr	r3, [pc, #20]	@ (800eb74 <_vfiprintf_r+0x228>)
 800eb5e:	a904      	add	r1, sp, #16
 800eb60:	4630      	mov	r0, r6
 800eb62:	f7fc f937 	bl	800add4 <_printf_i>
 800eb66:	e7e4      	b.n	800eb32 <_vfiprintf_r+0x1e6>
 800eb68:	0800f211 	.word	0x0800f211
 800eb6c:	0800f21b 	.word	0x0800f21b
 800eb70:	0800a8a5 	.word	0x0800a8a5
 800eb74:	0800e929 	.word	0x0800e929
 800eb78:	0800f217 	.word	0x0800f217

0800eb7c <__swbuf_r>:
 800eb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb7e:	460e      	mov	r6, r1
 800eb80:	4614      	mov	r4, r2
 800eb82:	4605      	mov	r5, r0
 800eb84:	b118      	cbz	r0, 800eb8e <__swbuf_r+0x12>
 800eb86:	6a03      	ldr	r3, [r0, #32]
 800eb88:	b90b      	cbnz	r3, 800eb8e <__swbuf_r+0x12>
 800eb8a:	f7fc fce3 	bl	800b554 <__sinit>
 800eb8e:	69a3      	ldr	r3, [r4, #24]
 800eb90:	60a3      	str	r3, [r4, #8]
 800eb92:	89a3      	ldrh	r3, [r4, #12]
 800eb94:	071a      	lsls	r2, r3, #28
 800eb96:	d501      	bpl.n	800eb9c <__swbuf_r+0x20>
 800eb98:	6923      	ldr	r3, [r4, #16]
 800eb9a:	b943      	cbnz	r3, 800ebae <__swbuf_r+0x32>
 800eb9c:	4621      	mov	r1, r4
 800eb9e:	4628      	mov	r0, r5
 800eba0:	f000 f82a 	bl	800ebf8 <__swsetup_r>
 800eba4:	b118      	cbz	r0, 800ebae <__swbuf_r+0x32>
 800eba6:	f04f 37ff 	mov.w	r7, #4294967295
 800ebaa:	4638      	mov	r0, r7
 800ebac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebae:	6823      	ldr	r3, [r4, #0]
 800ebb0:	6922      	ldr	r2, [r4, #16]
 800ebb2:	1a98      	subs	r0, r3, r2
 800ebb4:	6963      	ldr	r3, [r4, #20]
 800ebb6:	b2f6      	uxtb	r6, r6
 800ebb8:	4283      	cmp	r3, r0
 800ebba:	4637      	mov	r7, r6
 800ebbc:	dc05      	bgt.n	800ebca <__swbuf_r+0x4e>
 800ebbe:	4621      	mov	r1, r4
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	f7ff fa53 	bl	800e06c <_fflush_r>
 800ebc6:	2800      	cmp	r0, #0
 800ebc8:	d1ed      	bne.n	800eba6 <__swbuf_r+0x2a>
 800ebca:	68a3      	ldr	r3, [r4, #8]
 800ebcc:	3b01      	subs	r3, #1
 800ebce:	60a3      	str	r3, [r4, #8]
 800ebd0:	6823      	ldr	r3, [r4, #0]
 800ebd2:	1c5a      	adds	r2, r3, #1
 800ebd4:	6022      	str	r2, [r4, #0]
 800ebd6:	701e      	strb	r6, [r3, #0]
 800ebd8:	6962      	ldr	r2, [r4, #20]
 800ebda:	1c43      	adds	r3, r0, #1
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d004      	beq.n	800ebea <__swbuf_r+0x6e>
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	07db      	lsls	r3, r3, #31
 800ebe4:	d5e1      	bpl.n	800ebaa <__swbuf_r+0x2e>
 800ebe6:	2e0a      	cmp	r6, #10
 800ebe8:	d1df      	bne.n	800ebaa <__swbuf_r+0x2e>
 800ebea:	4621      	mov	r1, r4
 800ebec:	4628      	mov	r0, r5
 800ebee:	f7ff fa3d 	bl	800e06c <_fflush_r>
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	d0d9      	beq.n	800ebaa <__swbuf_r+0x2e>
 800ebf6:	e7d6      	b.n	800eba6 <__swbuf_r+0x2a>

0800ebf8 <__swsetup_r>:
 800ebf8:	b538      	push	{r3, r4, r5, lr}
 800ebfa:	4b29      	ldr	r3, [pc, #164]	@ (800eca0 <__swsetup_r+0xa8>)
 800ebfc:	4605      	mov	r5, r0
 800ebfe:	6818      	ldr	r0, [r3, #0]
 800ec00:	460c      	mov	r4, r1
 800ec02:	b118      	cbz	r0, 800ec0c <__swsetup_r+0x14>
 800ec04:	6a03      	ldr	r3, [r0, #32]
 800ec06:	b90b      	cbnz	r3, 800ec0c <__swsetup_r+0x14>
 800ec08:	f7fc fca4 	bl	800b554 <__sinit>
 800ec0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec10:	0719      	lsls	r1, r3, #28
 800ec12:	d422      	bmi.n	800ec5a <__swsetup_r+0x62>
 800ec14:	06da      	lsls	r2, r3, #27
 800ec16:	d407      	bmi.n	800ec28 <__swsetup_r+0x30>
 800ec18:	2209      	movs	r2, #9
 800ec1a:	602a      	str	r2, [r5, #0]
 800ec1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec20:	81a3      	strh	r3, [r4, #12]
 800ec22:	f04f 30ff 	mov.w	r0, #4294967295
 800ec26:	e033      	b.n	800ec90 <__swsetup_r+0x98>
 800ec28:	0758      	lsls	r0, r3, #29
 800ec2a:	d512      	bpl.n	800ec52 <__swsetup_r+0x5a>
 800ec2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec2e:	b141      	cbz	r1, 800ec42 <__swsetup_r+0x4a>
 800ec30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec34:	4299      	cmp	r1, r3
 800ec36:	d002      	beq.n	800ec3e <__swsetup_r+0x46>
 800ec38:	4628      	mov	r0, r5
 800ec3a:	f7fd fc05 	bl	800c448 <_free_r>
 800ec3e:	2300      	movs	r3, #0
 800ec40:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec42:	89a3      	ldrh	r3, [r4, #12]
 800ec44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ec48:	81a3      	strh	r3, [r4, #12]
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	6063      	str	r3, [r4, #4]
 800ec4e:	6923      	ldr	r3, [r4, #16]
 800ec50:	6023      	str	r3, [r4, #0]
 800ec52:	89a3      	ldrh	r3, [r4, #12]
 800ec54:	f043 0308 	orr.w	r3, r3, #8
 800ec58:	81a3      	strh	r3, [r4, #12]
 800ec5a:	6923      	ldr	r3, [r4, #16]
 800ec5c:	b94b      	cbnz	r3, 800ec72 <__swsetup_r+0x7a>
 800ec5e:	89a3      	ldrh	r3, [r4, #12]
 800ec60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ec64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec68:	d003      	beq.n	800ec72 <__swsetup_r+0x7a>
 800ec6a:	4621      	mov	r1, r4
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	f000 f883 	bl	800ed78 <__smakebuf_r>
 800ec72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec76:	f013 0201 	ands.w	r2, r3, #1
 800ec7a:	d00a      	beq.n	800ec92 <__swsetup_r+0x9a>
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	60a2      	str	r2, [r4, #8]
 800ec80:	6962      	ldr	r2, [r4, #20]
 800ec82:	4252      	negs	r2, r2
 800ec84:	61a2      	str	r2, [r4, #24]
 800ec86:	6922      	ldr	r2, [r4, #16]
 800ec88:	b942      	cbnz	r2, 800ec9c <__swsetup_r+0xa4>
 800ec8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ec8e:	d1c5      	bne.n	800ec1c <__swsetup_r+0x24>
 800ec90:	bd38      	pop	{r3, r4, r5, pc}
 800ec92:	0799      	lsls	r1, r3, #30
 800ec94:	bf58      	it	pl
 800ec96:	6962      	ldrpl	r2, [r4, #20]
 800ec98:	60a2      	str	r2, [r4, #8]
 800ec9a:	e7f4      	b.n	800ec86 <__swsetup_r+0x8e>
 800ec9c:	2000      	movs	r0, #0
 800ec9e:	e7f7      	b.n	800ec90 <__swsetup_r+0x98>
 800eca0:	200000b4 	.word	0x200000b4

0800eca4 <_raise_r>:
 800eca4:	291f      	cmp	r1, #31
 800eca6:	b538      	push	{r3, r4, r5, lr}
 800eca8:	4605      	mov	r5, r0
 800ecaa:	460c      	mov	r4, r1
 800ecac:	d904      	bls.n	800ecb8 <_raise_r+0x14>
 800ecae:	2316      	movs	r3, #22
 800ecb0:	6003      	str	r3, [r0, #0]
 800ecb2:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb6:	bd38      	pop	{r3, r4, r5, pc}
 800ecb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ecba:	b112      	cbz	r2, 800ecc2 <_raise_r+0x1e>
 800ecbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ecc0:	b94b      	cbnz	r3, 800ecd6 <_raise_r+0x32>
 800ecc2:	4628      	mov	r0, r5
 800ecc4:	f000 f830 	bl	800ed28 <_getpid_r>
 800ecc8:	4622      	mov	r2, r4
 800ecca:	4601      	mov	r1, r0
 800eccc:	4628      	mov	r0, r5
 800ecce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecd2:	f000 b817 	b.w	800ed04 <_kill_r>
 800ecd6:	2b01      	cmp	r3, #1
 800ecd8:	d00a      	beq.n	800ecf0 <_raise_r+0x4c>
 800ecda:	1c59      	adds	r1, r3, #1
 800ecdc:	d103      	bne.n	800ece6 <_raise_r+0x42>
 800ecde:	2316      	movs	r3, #22
 800ece0:	6003      	str	r3, [r0, #0]
 800ece2:	2001      	movs	r0, #1
 800ece4:	e7e7      	b.n	800ecb6 <_raise_r+0x12>
 800ece6:	2100      	movs	r1, #0
 800ece8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ecec:	4620      	mov	r0, r4
 800ecee:	4798      	blx	r3
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	e7e0      	b.n	800ecb6 <_raise_r+0x12>

0800ecf4 <raise>:
 800ecf4:	4b02      	ldr	r3, [pc, #8]	@ (800ed00 <raise+0xc>)
 800ecf6:	4601      	mov	r1, r0
 800ecf8:	6818      	ldr	r0, [r3, #0]
 800ecfa:	f7ff bfd3 	b.w	800eca4 <_raise_r>
 800ecfe:	bf00      	nop
 800ed00:	200000b4 	.word	0x200000b4

0800ed04 <_kill_r>:
 800ed04:	b538      	push	{r3, r4, r5, lr}
 800ed06:	4d07      	ldr	r5, [pc, #28]	@ (800ed24 <_kill_r+0x20>)
 800ed08:	2300      	movs	r3, #0
 800ed0a:	4604      	mov	r4, r0
 800ed0c:	4608      	mov	r0, r1
 800ed0e:	4611      	mov	r1, r2
 800ed10:	602b      	str	r3, [r5, #0]
 800ed12:	f7f2 fdbb 	bl	800188c <_kill>
 800ed16:	1c43      	adds	r3, r0, #1
 800ed18:	d102      	bne.n	800ed20 <_kill_r+0x1c>
 800ed1a:	682b      	ldr	r3, [r5, #0]
 800ed1c:	b103      	cbz	r3, 800ed20 <_kill_r+0x1c>
 800ed1e:	6023      	str	r3, [r4, #0]
 800ed20:	bd38      	pop	{r3, r4, r5, pc}
 800ed22:	bf00      	nop
 800ed24:	20000654 	.word	0x20000654

0800ed28 <_getpid_r>:
 800ed28:	f7f2 bda8 	b.w	800187c <_getpid>

0800ed2c <__swhatbuf_r>:
 800ed2c:	b570      	push	{r4, r5, r6, lr}
 800ed2e:	460c      	mov	r4, r1
 800ed30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed34:	2900      	cmp	r1, #0
 800ed36:	b096      	sub	sp, #88	@ 0x58
 800ed38:	4615      	mov	r5, r2
 800ed3a:	461e      	mov	r6, r3
 800ed3c:	da0d      	bge.n	800ed5a <__swhatbuf_r+0x2e>
 800ed3e:	89a3      	ldrh	r3, [r4, #12]
 800ed40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed44:	f04f 0100 	mov.w	r1, #0
 800ed48:	bf14      	ite	ne
 800ed4a:	2340      	movne	r3, #64	@ 0x40
 800ed4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ed50:	2000      	movs	r0, #0
 800ed52:	6031      	str	r1, [r6, #0]
 800ed54:	602b      	str	r3, [r5, #0]
 800ed56:	b016      	add	sp, #88	@ 0x58
 800ed58:	bd70      	pop	{r4, r5, r6, pc}
 800ed5a:	466a      	mov	r2, sp
 800ed5c:	f000 f848 	bl	800edf0 <_fstat_r>
 800ed60:	2800      	cmp	r0, #0
 800ed62:	dbec      	blt.n	800ed3e <__swhatbuf_r+0x12>
 800ed64:	9901      	ldr	r1, [sp, #4]
 800ed66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ed6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ed6e:	4259      	negs	r1, r3
 800ed70:	4159      	adcs	r1, r3
 800ed72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed76:	e7eb      	b.n	800ed50 <__swhatbuf_r+0x24>

0800ed78 <__smakebuf_r>:
 800ed78:	898b      	ldrh	r3, [r1, #12]
 800ed7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed7c:	079d      	lsls	r5, r3, #30
 800ed7e:	4606      	mov	r6, r0
 800ed80:	460c      	mov	r4, r1
 800ed82:	d507      	bpl.n	800ed94 <__smakebuf_r+0x1c>
 800ed84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ed88:	6023      	str	r3, [r4, #0]
 800ed8a:	6123      	str	r3, [r4, #16]
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	6163      	str	r3, [r4, #20]
 800ed90:	b003      	add	sp, #12
 800ed92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed94:	ab01      	add	r3, sp, #4
 800ed96:	466a      	mov	r2, sp
 800ed98:	f7ff ffc8 	bl	800ed2c <__swhatbuf_r>
 800ed9c:	9f00      	ldr	r7, [sp, #0]
 800ed9e:	4605      	mov	r5, r0
 800eda0:	4639      	mov	r1, r7
 800eda2:	4630      	mov	r0, r6
 800eda4:	f7fd fbc4 	bl	800c530 <_malloc_r>
 800eda8:	b948      	cbnz	r0, 800edbe <__smakebuf_r+0x46>
 800edaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edae:	059a      	lsls	r2, r3, #22
 800edb0:	d4ee      	bmi.n	800ed90 <__smakebuf_r+0x18>
 800edb2:	f023 0303 	bic.w	r3, r3, #3
 800edb6:	f043 0302 	orr.w	r3, r3, #2
 800edba:	81a3      	strh	r3, [r4, #12]
 800edbc:	e7e2      	b.n	800ed84 <__smakebuf_r+0xc>
 800edbe:	89a3      	ldrh	r3, [r4, #12]
 800edc0:	6020      	str	r0, [r4, #0]
 800edc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edc6:	81a3      	strh	r3, [r4, #12]
 800edc8:	9b01      	ldr	r3, [sp, #4]
 800edca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800edce:	b15b      	cbz	r3, 800ede8 <__smakebuf_r+0x70>
 800edd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edd4:	4630      	mov	r0, r6
 800edd6:	f000 f81d 	bl	800ee14 <_isatty_r>
 800edda:	b128      	cbz	r0, 800ede8 <__smakebuf_r+0x70>
 800eddc:	89a3      	ldrh	r3, [r4, #12]
 800edde:	f023 0303 	bic.w	r3, r3, #3
 800ede2:	f043 0301 	orr.w	r3, r3, #1
 800ede6:	81a3      	strh	r3, [r4, #12]
 800ede8:	89a3      	ldrh	r3, [r4, #12]
 800edea:	431d      	orrs	r5, r3
 800edec:	81a5      	strh	r5, [r4, #12]
 800edee:	e7cf      	b.n	800ed90 <__smakebuf_r+0x18>

0800edf0 <_fstat_r>:
 800edf0:	b538      	push	{r3, r4, r5, lr}
 800edf2:	4d07      	ldr	r5, [pc, #28]	@ (800ee10 <_fstat_r+0x20>)
 800edf4:	2300      	movs	r3, #0
 800edf6:	4604      	mov	r4, r0
 800edf8:	4608      	mov	r0, r1
 800edfa:	4611      	mov	r1, r2
 800edfc:	602b      	str	r3, [r5, #0]
 800edfe:	f7f2 fda5 	bl	800194c <_fstat>
 800ee02:	1c43      	adds	r3, r0, #1
 800ee04:	d102      	bne.n	800ee0c <_fstat_r+0x1c>
 800ee06:	682b      	ldr	r3, [r5, #0]
 800ee08:	b103      	cbz	r3, 800ee0c <_fstat_r+0x1c>
 800ee0a:	6023      	str	r3, [r4, #0]
 800ee0c:	bd38      	pop	{r3, r4, r5, pc}
 800ee0e:	bf00      	nop
 800ee10:	20000654 	.word	0x20000654

0800ee14 <_isatty_r>:
 800ee14:	b538      	push	{r3, r4, r5, lr}
 800ee16:	4d06      	ldr	r5, [pc, #24]	@ (800ee30 <_isatty_r+0x1c>)
 800ee18:	2300      	movs	r3, #0
 800ee1a:	4604      	mov	r4, r0
 800ee1c:	4608      	mov	r0, r1
 800ee1e:	602b      	str	r3, [r5, #0]
 800ee20:	f7f2 fda4 	bl	800196c <_isatty>
 800ee24:	1c43      	adds	r3, r0, #1
 800ee26:	d102      	bne.n	800ee2e <_isatty_r+0x1a>
 800ee28:	682b      	ldr	r3, [r5, #0]
 800ee2a:	b103      	cbz	r3, 800ee2e <_isatty_r+0x1a>
 800ee2c:	6023      	str	r3, [r4, #0]
 800ee2e:	bd38      	pop	{r3, r4, r5, pc}
 800ee30:	20000654 	.word	0x20000654

0800ee34 <_init>:
 800ee34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee36:	bf00      	nop
 800ee38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee3a:	bc08      	pop	{r3}
 800ee3c:	469e      	mov	lr, r3
 800ee3e:	4770      	bx	lr

0800ee40 <_fini>:
 800ee40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee42:	bf00      	nop
 800ee44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee46:	bc08      	pop	{r3}
 800ee48:	469e      	mov	lr, r3
 800ee4a:	4770      	bx	lr
