
focTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011bbc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08011da0  08011da0  00012da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012278  08012278  00014258  2**0
                  CONTENTS
  4 .ARM          00000008  08012278  08012278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012280  08012280  00014258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012280  08012280  00013280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012284  08012284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  08012288  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007dc  20000258  080124e0  00014258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a34  080124e0  00014a34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014258  2**0
                  CONTENTS, READONLY
 12 .debug_info   000285b2  00000000  00000000  00014288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005eb2  00000000  00000000  0003c83a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002048  00000000  00000000  000426f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001889  00000000  00000000  00044738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f43  00000000  00000000  00045fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002eb08  00000000  00000000  0006ef04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eefe8  00000000  00000000  0009da0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c9f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a54  00000000  00000000  0018ca38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0019648c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000258 	.word	0x20000258
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011d84 	.word	0x08011d84

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000025c 	.word	0x2000025c
 800021c:	08011d84 	.word	0x08011d84

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00d f98c 	bl	800e36c <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00d f986 	bl	800e36c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <MX_ADC1_Init+0x164>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <MX_ADC1_Init+0x164>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <MX_ADC1_Init+0x164>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <MX_ADC1_Init+0x164>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010cc:	f001 fdca 	bl	8002c64 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fca8 	bl	8001a2a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010e6:	f003 fef3 	bl	8004ed0 <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fc9b 	bl	8001a2a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_ADC1_Init+0x168>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4821      	ldr	r0, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001114:	f002 f962 	bl	80033dc <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fc84 	bl	8001a2a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC1_Init+0x16c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001150:	2384      	movs	r3, #132	@ 0x84
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001164:	f003 f9d4 	bl	8004510 <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fc5c 	bl	8001a2a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_ADC1_Init+0x170>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001182:	f003 f9c5 	bl	8004510 <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fc4d 	bl	8001a2a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000274 	.word	0x20000274
 800119c:	2e300800 	.word	0x2e300800
 80011a0:	0c900008 	.word	0x0c900008
 80011a4:	32601000 	.word	0x32601000

080011a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b098      	sub	sp, #96	@ 0x60
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b2:	223c      	movs	r2, #60	@ 0x3c
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f00d f8d8 	bl	800e36c <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2220      	movs	r2, #32
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00d f8d2 	bl	800e36c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011c8:	4b3f      	ldr	r3, [pc, #252]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011ca:	4a40      	ldr	r2, [pc, #256]	@ (80012cc <MX_ADC2_Init+0x124>)
 80011cc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011ce:	4b3e      	ldr	r3, [pc, #248]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011d6:	4b3c      	ldr	r3, [pc, #240]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011dc:	4b3a      	ldr	r3, [pc, #232]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011e2:	4b39      	ldr	r3, [pc, #228]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e8:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ee:	4b36      	ldr	r3, [pc, #216]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011f0:	2204      	movs	r2, #4
 80011f2:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011f4:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011fa:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001200:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001202:	2201      	movs	r2, #1
 8001204:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001206:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120e:	4b2e      	ldr	r3, [pc, #184]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001210:	2200      	movs	r2, #0
 8001212:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001214:	4b2c      	ldr	r3, [pc, #176]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001216:	2200      	movs	r2, #0
 8001218:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800121a:	4b2b      	ldr	r3, [pc, #172]	@ (80012c8 <MX_ADC2_Init+0x120>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001222:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001224:	2200      	movs	r2, #0
 8001226:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001228:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <MX_ADC2_Init+0x120>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001230:	4825      	ldr	r0, [pc, #148]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001232:	f001 fd17 	bl	8002c64 <HAL_ADC_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC2_Init+0x98>
  {
    Error_Handler();
 800123c:	f000 fbf5 	bl	8001a2a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001240:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <MX_ADC2_Init+0x128>)
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001244:	2309      	movs	r3, #9
 8001246:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001248:	2301      	movs	r3, #1
 800124a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800124c:	237f      	movs	r3, #127	@ 0x7f
 800124e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001250:	2304      	movs	r3, #4
 8001252:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigInjected.InjectedOffset = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 800126e:	2384      	movs	r3, #132	@ 0x84
 8001270:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001272:	2380      	movs	r3, #128	@ 0x80
 8001274:	653b      	str	r3, [r7, #80]	@ 0x50
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800127c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001280:	4619      	mov	r1, r3
 8001282:	4811      	ldr	r0, [pc, #68]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001284:	f003 f944 	bl	8004510 <HAL_ADCEx_InjectedConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 800128e:	f000 fbcc 	bl	8001a2a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <MX_ADC2_Init+0x12c>)
 8001294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001296:	2306      	movs	r3, #6
 8001298:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800129e:	237f      	movs	r3, #127	@ 0x7f
 80012a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a2:	2304      	movs	r3, #4
 80012a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4806      	ldr	r0, [pc, #24]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80012b0:	f002 f894 	bl	80033dc <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC2_Init+0x116>
  {
    Error_Handler();
 80012ba:	f000 fbb6 	bl	8001a2a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	3760      	adds	r7, #96	@ 0x60
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200002e0 	.word	0x200002e0
 80012cc:	50000100 	.word	0x50000100
 80012d0:	0c900008 	.word	0x0c900008
 80012d4:	04300002 	.word	0x04300002

080012d8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b09e      	sub	sp, #120	@ 0x78
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	2244      	movs	r2, #68	@ 0x44
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f00d f837 	bl	800e36c <memset>
  if(adcHandle->Instance==ADC1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001306:	d15f      	bne.n	80013c8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001308:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800130c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800130e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001312:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	4618      	mov	r0, r3
 800131a:	f006 fb8b 	bl	8007a34 <HAL_RCCEx_PeriphCLKConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001324:	f000 fb81 	bl	8001a2a <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001328:	4b4f      	ldr	r3, [pc, #316]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	4a4e      	ldr	r2, [pc, #312]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 8001330:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001332:	4b4d      	ldr	r3, [pc, #308]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10b      	bne.n	8001352 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800133a:	4b4c      	ldr	r3, [pc, #304]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a4b      	ldr	r2, [pc, #300]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001340:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b49      	ldr	r3, [pc, #292]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b46      	ldr	r3, [pc, #280]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4a45      	ldr	r2, [pc, #276]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135e:	4b43      	ldr	r3, [pc, #268]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4b40      	ldr	r3, [pc, #256]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a3f      	ldr	r2, [pc, #252]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b3d      	ldr	r3, [pc, #244]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001382:	2304      	movs	r3, #4
 8001384:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	2303      	movs	r3, #3
 8001388:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001398:	f005 fab6 	bl	8006908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 800139c:	f241 0302 	movw	r3, #4098	@ 0x1002
 80013a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013ae:	4619      	mov	r1, r3
 80013b0:	482f      	ldr	r0, [pc, #188]	@ (8001470 <HAL_ADC_MspInit+0x198>)
 80013b2:	f005 faa9 	bl	8006908 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2012      	movs	r0, #18
 80013bc:	f004 f92f 	bl	800561e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013c0:	2012      	movs	r0, #18
 80013c2:	f004 f946 	bl	8005652 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80013c6:	e04a      	b.n	800145e <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a29      	ldr	r2, [pc, #164]	@ (8001474 <HAL_ADC_MspInit+0x19c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d145      	bne.n	800145e <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013d8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	4618      	mov	r0, r3
 80013e4:	f006 fb26 	bl	8007a34 <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80013ee:	f000 fb1c 	bl	8001a2a <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d10b      	bne.n	800141c <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001408:	4a18      	ldr	r2, [pc, #96]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800140a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800140e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001410:	4b16      	ldr	r3, [pc, #88]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001414:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001420:	4a12      	ldr	r2, [pc, #72]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001428:	4b10      	ldr	r3, [pc, #64]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8001434:	2341      	movs	r3, #65	@ 0x41
 8001436:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001438:	2303      	movs	r3, #3
 800143a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144a:	f005 fa5d 	bl	8006908 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2012      	movs	r0, #18
 8001454:	f004 f8e3 	bl	800561e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001458:	2012      	movs	r0, #18
 800145a:	f004 f8fa 	bl	8005652 <HAL_NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3778      	adds	r7, #120	@ 0x78
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000034c 	.word	0x2000034c
 800146c:	40021000 	.word	0x40021000
 8001470:	48000400 	.word	0x48000400
 8001474:	50000100 	.word	0x50000100

08001478 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_COMP1_Init+0x44>)
 800147e:	4a10      	ldr	r2, [pc, #64]	@ (80014c0 <MX_COMP1_Init+0x48>)
 8001480:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001488:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_COMP1_Init+0x44>)
 800148c:	2240      	movs	r2, #64	@ 0x40
 800148e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001490:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <MX_COMP1_Init+0x44>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_COMP1_Init+0x44>)
 80014a4:	2211      	movs	r2, #17
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_COMP1_Init+0x44>)
 80014aa:	f003 fe73 	bl	8005194 <HAL_COMP_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 80014b4:	f000 fab9 	bl	8001a2a <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000350 	.word	0x20000350
 80014c0:	40010200 	.word	0x40010200

080014c4 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a13      	ldr	r2, [pc, #76]	@ (8001530 <HAL_COMP_MspInit+0x6c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d11f      	bne.n	8001526 <HAL_COMP_MspInit+0x62>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014fe:	2302      	movs	r3, #2
 8001500:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001502:	2303      	movs	r3, #3
 8001504:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	4619      	mov	r1, r3
 8001510:	4809      	ldr	r0, [pc, #36]	@ (8001538 <HAL_COMP_MspInit+0x74>)
 8001512:	f005 f9f9 	bl	8006908 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2040      	movs	r0, #64	@ 0x40
 800151c:	f004 f87f 	bl	800561e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8001520:	2040      	movs	r0, #64	@ 0x40
 8001522:	f004 f896 	bl	8005652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40010200 	.word	0x40010200
 8001534:	40021000 	.word	0x40021000
 8001538:	48000400 	.word	0x48000400

0800153c <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2230      	movs	r2, #48	@ 0x30
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f00c ff0f 	bl	800e36c <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800154e:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001550:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <MX_DAC3_Init+0x70>)
 8001552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001554:	4814      	ldr	r0, [pc, #80]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001556:	f004 f896 	bl	8005686 <HAL_DAC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001560:	f000 fa63 	bl	8001a2a <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001564:	2302      	movs	r3, #2
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800157c:	2302      	movs	r3, #2
 800157e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001590:	f004 f936 	bl	8005800 <HAL_DAC_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800159a:	f000 fa46 	bl	8001a2a <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3730      	adds	r7, #48	@ 0x30
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000374 	.word	0x20000374
 80015ac:	50001000 	.word	0x50001000

080015b0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <HAL_DAC_MspInit+0x38>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10b      	bne.n	80015da <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	50001000 	.word	0x50001000
 80015ec:	40021000 	.word	0x40021000

080015f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015f6:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <MX_DMA_Init+0x50>)
 80015f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fa:	4a11      	ldr	r2, [pc, #68]	@ (8001640 <MX_DMA_Init+0x50>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6493      	str	r3, [r2, #72]	@ 0x48
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <MX_DMA_Init+0x50>)
 8001604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800160e:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <MX_DMA_Init+0x50>)
 8001610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001612:	4a0b      	ldr	r2, [pc, #44]	@ (8001640 <MX_DMA_Init+0x50>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6493      	str	r3, [r2, #72]	@ 0x48
 800161a:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <MX_DMA_Init+0x50>)
 800161c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	200b      	movs	r0, #11
 800162c:	f003 fff7 	bl	800561e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001630:	200b      	movs	r0, #11
 8001632:	f004 f80e 	bl	8005652 <HAL_NVIC_EnableIRQ>

}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000

08001644 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001648:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800164a:	4a20      	ldr	r2, [pc, #128]	@ (80016cc <MX_FDCAN1_Init+0x88>)
 800164c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800164e:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001650:	2200      	movs	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001654:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800165a:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001660:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001662:	2200      	movs	r2, #0
 8001664:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001666:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001668:	2200      	movs	r2, #0
 800166a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800166c:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800166e:	2200      	movs	r2, #0
 8001670:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001674:	2214      	movs	r2, #20
 8001676:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800167a:	2201      	movs	r2, #1
 800167c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 800167e:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001680:	220a      	movs	r2, #10
 8001682:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8001684:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001686:	2205      	movs	r2, #5
 8001688:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800168c:	2214      	movs	r2, #20
 800168e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001690:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001692:	2201      	movs	r2, #1
 8001694:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001698:	220a      	movs	r2, #10
 800169a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800169e:	2205      	movs	r2, #5
 80016a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 80016a8:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80016b4:	4804      	ldr	r0, [pc, #16]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 80016b6:	f004 fcd5 	bl	8006064 <HAL_FDCAN_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80016c0:	f000 f9b3 	bl	8001a2a <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000388 	.word	0x20000388
 80016cc:	40006400 	.word	0x40006400

080016d0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b09a      	sub	sp, #104	@ 0x68
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	2244      	movs	r2, #68	@ 0x44
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f00c fe3b 	bl	800e36c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a24      	ldr	r2, [pc, #144]	@ (800178c <HAL_FDCAN_MspInit+0xbc>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d141      	bne.n	8001784 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001704:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001706:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800170a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4618      	mov	r0, r3
 8001712:	f006 f98f 	bl	8007a34 <HAL_RCCEx_PeriphCLKConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800171c:	f000 f985 	bl	8001a2a <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001724:	4a1a      	ldr	r2, [pc, #104]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 8001726:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800172a:	6593      	str	r3, [r2, #88]	@ 0x58
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173c:	4a14      	ldr	r2, [pc, #80]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001750:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001754:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001762:	2309      	movs	r3, #9
 8001764:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800176a:	4619      	mov	r1, r3
 800176c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001770:	f005 f8ca 	bl	8006908 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	2015      	movs	r0, #21
 800177a:	f003 ff50 	bl	800561e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800177e:	2015      	movs	r0, #21
 8001780:	f003 ff67 	bl	8005652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001784:	bf00      	nop
 8001786:	3768      	adds	r7, #104	@ 0x68
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40006400 	.word	0x40006400
 8001790:	40021000 	.word	0x40021000

08001794 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	4b39      	ldr	r3, [pc, #228]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	4a38      	ldr	r2, [pc, #224]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b6:	4b36      	ldr	r3, [pc, #216]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c2:	4b33      	ldr	r3, [pc, #204]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	4a32      	ldr	r2, [pc, #200]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017c8:	f043 0320 	orr.w	r3, r3, #32
 80017cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ce:	4b30      	ldr	r3, [pc, #192]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b2d      	ldr	r3, [pc, #180]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	4a2c      	ldr	r2, [pc, #176]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	4b27      	ldr	r3, [pc, #156]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	4a26      	ldr	r2, [pc, #152]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fe:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <MX_GPIO_Init+0xfc>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	2110      	movs	r1, #16
 800180e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001812:	f005 f9fb 	bl	8006c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2150      	movs	r1, #80	@ 0x50
 800181a:	481e      	ldr	r0, [pc, #120]	@ (8001894 <MX_GPIO_Init+0x100>)
 800181c:	f005 f9f6 	bl	8006c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001820:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001826:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800182a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	4817      	ldr	r0, [pc, #92]	@ (8001894 <MX_GPIO_Init+0x100>)
 8001838:	f005 f866 	bl	8006908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800183c:	2310      	movs	r3, #16
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001856:	f005 f857 	bl	8006908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 800185a:	2350      	movs	r3, #80	@ 0x50
 800185c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	4808      	ldr	r0, [pc, #32]	@ (8001894 <MX_GPIO_Init+0x100>)
 8001872:	f005 f849 	bl	8006908 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	2028      	movs	r0, #40	@ 0x28
 800187c:	f003 fecf 	bl	800561e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001880:	2028      	movs	r0, #40	@ 0x28
 8001882:	f003 fee6 	bl	8005652 <HAL_NVIC_EnableIRQ>

}
 8001886:	bf00      	nop
 8001888:	3728      	adds	r7, #40	@ 0x28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	48000800 	.word	0x48000800

08001898 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800189c:	f000 ff1f 	bl	80026de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a0:	f000 f87a 	bl	8001998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a4:	f7ff ff76 	bl	8001794 <MX_GPIO_Init>
  MX_DMA_Init();
 80018a8:	f7ff fea2 	bl	80015f0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80018ac:	f000 fe14 	bl	80024d8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80018b0:	f7ff fbc0 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 80018b4:	f7ff fc78 	bl	80011a8 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 80018b8:	f000 f8be 	bl	8001a38 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 80018bc:	f000 f8e4 	bl	8001a88 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 80018c0:	f000 f90a 	bl	8001ad8 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 80018c4:	f000 fbcc 	bl	8002060 <MX_TIM1_Init>
  MX_COMP1_Init();
 80018c8:	f7ff fdd6 	bl	8001478 <MX_COMP1_Init>
  MX_DAC3_Init();
 80018cc:	f7ff fe36 	bl	800153c <MX_DAC3_Init>
  MX_FDCAN1_Init();
 80018d0:	f7ff feb8 	bl	8001644 <MX_FDCAN1_Init>
  MX_TIM4_Init();
 80018d4:	f000 fcb8 	bl	8002248 <MX_TIM4_Init>
  MX_SPI1_Init();
 80018d8:	f000 f99c 	bl	8001c14 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 80018dc:	f00a f8f2 	bl	800bac4 <appInit>
  HAL_OPAMP_Start(&hopamp1);
 80018e0:	4823      	ldr	r0, [pc, #140]	@ (8001970 <main+0xd8>)
 80018e2:	f005 fa93 	bl	8006e0c <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 80018e6:	4823      	ldr	r0, [pc, #140]	@ (8001974 <main+0xdc>)
 80018e8:	f005 fa90 	bl	8006e0c <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 80018ec:	4822      	ldr	r0, [pc, #136]	@ (8001978 <main+0xe0>)
 80018ee:	f005 fa8d 	bl	8006e0c <HAL_OPAMP_Start>
  // HAL_UART_Receive_IT(&huart3, (uint8_t *)&aRxBuffer, 1);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80018f2:	217f      	movs	r1, #127	@ 0x7f
 80018f4:	4821      	ldr	r0, [pc, #132]	@ (800197c <main+0xe4>)
 80018f6:	f002 fbeb 	bl	80040d0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80018fa:	217f      	movs	r1, #127	@ 0x7f
 80018fc:	4820      	ldr	r0, [pc, #128]	@ (8001980 <main+0xe8>)
 80018fe:	f002 fbe7 	bl	80040d0 <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 8001902:	4b1e      	ldr	r3, [pc, #120]	@ (800197c <main+0xe4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2220      	movs	r2, #32
 8001908:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 800190a:	4b1c      	ldr	r3, [pc, #112]	@ (800197c <main+0xe4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2204      	movs	r2, #4
 8001910:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 8001912:	4b1b      	ldr	r3, [pc, #108]	@ (8001980 <main+0xe8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2220      	movs	r2, #32
 8001918:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 800191a:	4818      	ldr	r0, [pc, #96]	@ (800197c <main+0xe4>)
 800191c:	f002 fcea 	bl	80042f4 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 8001920:	4817      	ldr	r0, [pc, #92]	@ (8001980 <main+0xe8>)
 8001922:	f002 fc37 	bl	8004194 <HAL_ADCEx_InjectedStart>
  TIM1->ARR = 8000 - 1;
 8001926:	4b17      	ldr	r3, [pc, #92]	@ (8001984 <main+0xec>)
 8001928:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800192c:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->CCR4 = 8000 - 2;
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <main+0xec>)
 8001930:	f641 723e 	movw	r2, #7998	@ 0x1f3e
 8001934:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_Base_Start(&htim1);
 8001936:	4814      	ldr	r0, [pc, #80]	@ (8001988 <main+0xf0>)
 8001938:	f006 fef6 	bl	8008728 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800193c:	210c      	movs	r1, #12
 800193e:	4812      	ldr	r0, [pc, #72]	@ (8001988 <main+0xf0>)
 8001940:	f006 ffb6 	bl	80088b0 <HAL_TIM_PWM_Start>
  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 3000);
 8001944:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	480f      	ldr	r0, [pc, #60]	@ (800198c <main+0xf4>)
 800194e:	f003 ff29 	bl	80057a4 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
 8001952:	2100      	movs	r1, #0
 8001954:	480d      	ldr	r0, [pc, #52]	@ (800198c <main+0xf4>)
 8001956:	f003 feb9 	bl	80056cc <HAL_DAC_Start>
  //  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
  HAL_COMP_Start(&hcomp1);
 800195a:	480d      	ldr	r0, [pc, #52]	@ (8001990 <main+0xf8>)
 800195c:	f003 fcf6 	bl	800534c <HAL_COMP_Start>
  HAL_TIMEx_HallSensor_Start_IT(&htim4);
 8001960:	480c      	ldr	r0, [pc, #48]	@ (8001994 <main+0xfc>)
 8001962:	f008 fa35 	bl	8009dd0 <HAL_TIMEx_HallSensor_Start_IT>
  FDCAN_Config();
 8001966:	f00a ff9b 	bl	800c8a0 <FDCAN_Config>
    //    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
    //    HAL_Delay(10);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 800196a:	f00a fee7 	bl	800c73c <userMain>
 800196e:	e7fc      	b.n	800196a <main+0xd2>
 8001970:	200003ec 	.word	0x200003ec
 8001974:	20000428 	.word	0x20000428
 8001978:	20000464 	.word	0x20000464
 800197c:	20000274 	.word	0x20000274
 8001980:	200002e0 	.word	0x200002e0
 8001984:	40012c00 	.word	0x40012c00
 8001988:	20000508 	.word	0x20000508
 800198c:	20000374 	.word	0x20000374
 8001990:	20000350 	.word	0x20000350
 8001994:	20000554 	.word	0x20000554

08001998 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b094      	sub	sp, #80	@ 0x50
 800199c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199e:	f107 0318 	add.w	r3, r7, #24
 80019a2:	2238      	movs	r2, #56	@ 0x38
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f00c fce0 	bl	800e36c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f005 fa58 	bl	8006e70 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019c0:	2301      	movs	r3, #1
 80019c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ca:	2302      	movs	r3, #2
 80019cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ce:	2303      	movs	r3, #3
 80019d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80019d2:	2303      	movs	r3, #3
 80019d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80019d6:	2328      	movs	r3, #40	@ 0x28
 80019d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019da:	2302      	movs	r3, #2
 80019dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019de:	2302      	movs	r3, #2
 80019e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019e2:	2302      	movs	r3, #2
 80019e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e6:	f107 0318 	add.w	r3, r7, #24
 80019ea:	4618      	mov	r0, r3
 80019ec:	f005 faf4 	bl	8006fd8 <HAL_RCC_OscConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80019f6:	f000 f818 	bl	8001a2a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019fa:	230f      	movs	r3, #15
 80019fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fe:	2303      	movs	r3, #3
 8001a00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	2104      	movs	r1, #4
 8001a12:	4618      	mov	r0, r3
 8001a14:	f005 fdf2 	bl	80075fc <HAL_RCC_ClockConfig>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001a1e:	f000 f804 	bl	8001a2a <Error_Handler>
  }
}
 8001a22:	bf00      	nop
 8001a24:	3750      	adds	r7, #80	@ 0x50
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2e:	b672      	cpsid	i
}
 8001a30:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a32:	bf00      	nop
 8001a34:	e7fd      	b.n	8001a32 <Error_Handler+0x8>
	...

08001a38 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001a3c:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <MX_OPAMP1_Init+0x48>)
 8001a3e:	4a11      	ldr	r2, [pc, #68]	@ (8001a84 <MX_OPAMP1_Init+0x4c>)
 8001a40:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <MX_OPAMP1_Init+0x48>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 8001a48:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <MX_OPAMP1_Init+0x48>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <MX_OPAMP1_Init+0x48>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <MX_OPAMP1_Init+0x48>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <MX_OPAMP1_Init+0x48>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <MX_OPAMP1_Init+0x48>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <MX_OPAMP1_Init+0x48>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	@ (8001a80 <MX_OPAMP1_Init+0x48>)
 8001a6e:	f005 f8fd 	bl	8006c6c <HAL_OPAMP_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_OPAMP1_Init+0x44>
  {
    Error_Handler();
 8001a78:	f7ff ffd7 	bl	8001a2a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200003ec 	.word	0x200003ec
 8001a84:	40010300 	.word	0x40010300

08001a88 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001a8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <MX_OPAMP2_Init+0x48>)
 8001a8e:	4a11      	ldr	r2, [pc, #68]	@ (8001ad4 <MX_OPAMP2_Init+0x4c>)
 8001a90:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001a92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <MX_OPAMP2_Init+0x48>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_STANDALONE_MODE;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <MX_OPAMP2_Init+0x48>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <MX_OPAMP2_Init+0x48>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <MX_OPAMP2_Init+0x48>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <MX_OPAMP2_Init+0x48>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <MX_OPAMP2_Init+0x48>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <MX_OPAMP2_Init+0x48>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001abc:	4804      	ldr	r0, [pc, #16]	@ (8001ad0 <MX_OPAMP2_Init+0x48>)
 8001abe:	f005 f8d5 	bl	8006c6c <HAL_OPAMP_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_OPAMP2_Init+0x44>
  {
    Error_Handler();
 8001ac8:	f7ff ffaf 	bl	8001a2a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000428 	.word	0x20000428
 8001ad4:	40010304 	.word	0x40010304

08001ad8 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001adc:	4b10      	ldr	r3, [pc, #64]	@ (8001b20 <MX_OPAMP3_Init+0x48>)
 8001ade:	4a11      	ldr	r2, [pc, #68]	@ (8001b24 <MX_OPAMP3_Init+0x4c>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <MX_OPAMP3_Init+0x48>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_STANDALONE_MODE;
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <MX_OPAMP3_Init+0x48>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  hopamp3.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001aee:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <MX_OPAMP3_Init+0x48>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	60da      	str	r2, [r3, #12]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001af4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <MX_OPAMP3_Init+0x48>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <MX_OPAMP3_Init+0x48>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001b00:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <MX_OPAMP3_Init+0x48>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <MX_OPAMP3_Init+0x48>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001b0c:	4804      	ldr	r0, [pc, #16]	@ (8001b20 <MX_OPAMP3_Init+0x48>)
 8001b0e:	f005 f8ad 	bl	8006c6c <HAL_OPAMP_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_OPAMP3_Init+0x44>
  {
    Error_Handler();
 8001b18:	f7ff ff87 	bl	8001a2a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000464 	.word	0x20000464
 8001b24:	40010308 	.word	0x40010308

08001b28 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a2e      	ldr	r2, [pc, #184]	@ (8001c00 <HAL_OPAMP_MspInit+0xd8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d119      	bne.n	8001b7e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c04 <HAL_OPAMP_MspInit+0xdc>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c04 <HAL_OPAMP_MspInit+0xdc>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b56:	4b2b      	ldr	r3, [pc, #172]	@ (8001c04 <HAL_OPAMP_MspInit+0xdc>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b62:	230e      	movs	r3, #14
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b66:	2303      	movs	r3, #3
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b78:	f004 fec6 	bl	8006908 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8001b7c:	e03b      	b.n	8001bf6 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a21      	ldr	r2, [pc, #132]	@ (8001c08 <HAL_OPAMP_MspInit+0xe0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d119      	bne.n	8001bbc <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <HAL_OPAMP_MspInit+0xdc>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c04 <HAL_OPAMP_MspInit+0xdc>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b94:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <HAL_OPAMP_MspInit+0xdc>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ba0:	23e0      	movs	r3, #224	@ 0xe0
 8001ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb6:	f004 fea7 	bl	8006908 <HAL_GPIO_Init>
}
 8001bba:	e01c      	b.n	8001bf6 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a12      	ldr	r2, [pc, #72]	@ (8001c0c <HAL_OPAMP_MspInit+0xe4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d117      	bne.n	8001bf6 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <HAL_OPAMP_MspInit+0xdc>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	4a0e      	ldr	r2, [pc, #56]	@ (8001c04 <HAL_OPAMP_MspInit+0xdc>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <HAL_OPAMP_MspInit+0xdc>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001bde:	2307      	movs	r3, #7
 8001be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be2:	2303      	movs	r3, #3
 8001be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4807      	ldr	r0, [pc, #28]	@ (8001c10 <HAL_OPAMP_MspInit+0xe8>)
 8001bf2:	f004 fe89 	bl	8006908 <HAL_GPIO_Init>
}
 8001bf6:	bf00      	nop
 8001bf8:	3728      	adds	r7, #40	@ 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40010300 	.word	0x40010300
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010304 	.word	0x40010304
 8001c0c:	40010308 	.word	0x40010308
 8001c10:	48000400 	.word	0x48000400

08001c14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c18:	4b1b      	ldr	r3, [pc, #108]	@ (8001c88 <MX_SPI1_Init+0x74>)
 8001c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001c8c <MX_SPI1_Init+0x78>)
 8001c1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c88 <MX_SPI1_Init+0x74>)
 8001c20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c26:	4b18      	ldr	r3, [pc, #96]	@ (8001c88 <MX_SPI1_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001c2c:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <MX_SPI1_Init+0x74>)
 8001c2e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001c32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c34:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <MX_SPI1_Init+0x74>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c3a:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <MX_SPI1_Init+0x74>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c40:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <MX_SPI1_Init+0x74>)
 8001c42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <MX_SPI1_Init+0x74>)
 8001c4a:	2218      	movs	r2, #24
 8001c4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <MX_SPI1_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c54:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <MX_SPI1_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <MX_SPI1_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c60:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <MX_SPI1_Init+0x74>)
 8001c62:	2207      	movs	r2, #7
 8001c64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c66:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <MX_SPI1_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <MX_SPI1_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c72:	4805      	ldr	r0, [pc, #20]	@ (8001c88 <MX_SPI1_Init+0x74>)
 8001c74:	f006 f8ce 	bl	8007e14 <HAL_SPI_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c7e:	f7ff fed4 	bl	8001a2a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200004a0 	.word	0x200004a0
 8001c8c:	40013000 	.word	0x40013000

08001c90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a17      	ldr	r2, [pc, #92]	@ (8001d0c <HAL_SPI_MspInit+0x7c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d127      	bne.n	8001d02 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cb2:	4b17      	ldr	r3, [pc, #92]	@ (8001d10 <HAL_SPI_MspInit+0x80>)
 8001cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb6:	4a16      	ldr	r2, [pc, #88]	@ (8001d10 <HAL_SPI_MspInit+0x80>)
 8001cb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cbe:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <HAL_SPI_MspInit+0x80>)
 8001cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HAL_SPI_MspInit+0x80>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cce:	4a10      	ldr	r2, [pc, #64]	@ (8001d10 <HAL_SPI_MspInit+0x80>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <HAL_SPI_MspInit+0x80>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ce2:	2338      	movs	r3, #56	@ 0x38
 8001ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <HAL_SPI_MspInit+0x84>)
 8001cfe:	f004 fe03 	bl	8006908 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	@ 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40013000 	.word	0x40013000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	48000400 	.word	0x48000400

08001d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <HAL_MspInit+0x44>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d22:	4a0e      	ldr	r2, [pc, #56]	@ (8001d5c <HAL_MspInit+0x44>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <HAL_MspInit+0x44>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <HAL_MspInit+0x44>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3a:	4a08      	ldr	r2, [pc, #32]	@ (8001d5c <HAL_MspInit+0x44>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d40:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_MspInit+0x44>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d4e:	f005 f933 	bl	8006fb8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000

08001d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <NMI_Handler+0x4>

08001d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
 {
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <HardFault_Handler+0x4>

08001d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <MemManage_Handler+0x4>

08001d78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <BusFault_Handler+0x4>

08001d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <UsageFault_Handler+0x4>

08001d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db6:	f000 fce5 	bl	8002784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001dc4:	4802      	ldr	r0, [pc, #8]	@ (8001dd0 <DMA1_Channel1_IRQHandler+0x10>)
 8001dc6:	f004 f83b 	bl	8005e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000634 	.word	0x20000634

08001dd4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001dd8:	4803      	ldr	r0, [pc, #12]	@ (8001de8 <ADC1_2_IRQHandler+0x14>)
 8001dda:	f001 f8c7 	bl	8002f6c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001dde:	4803      	ldr	r0, [pc, #12]	@ (8001dec <ADC1_2_IRQHandler+0x18>)
 8001de0:	f001 f8c4 	bl	8002f6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000274 	.word	0x20000274
 8001dec:	200002e0 	.word	0x200002e0

08001df0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <FDCAN1_IT0_IRQHandler+0x1c>)
 8001df6:	f004 fb97 	bl	8006528 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
	HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,RxData);
 8001dfa:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <FDCAN1_IT0_IRQHandler+0x20>)
 8001dfc:	4a05      	ldr	r2, [pc, #20]	@ (8001e14 <FDCAN1_IT0_IRQHandler+0x24>)
 8001dfe:	2140      	movs	r1, #64	@ 0x40
 8001e00:	4802      	ldr	r0, [pc, #8]	@ (8001e0c <FDCAN1_IT0_IRQHandler+0x1c>)
 8001e02:	f004 fa89 	bl	8006318 <HAL_FDCAN_GetRxMessage>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000388 	.word	0x20000388
 8001e10:	200008c0 	.word	0x200008c0
 8001e14:	20000898 	.word	0x20000898

08001e18 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e1c:	4802      	ldr	r0, [pc, #8]	@ (8001e28 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001e1e:	f006 fedd 	bl	8008bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000508 	.word	0x20000508

08001e2c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e30:	4802      	ldr	r0, [pc, #8]	@ (8001e3c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e32:	f006 fed3 	bl	8008bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000508 	.word	0x20000508

08001e40 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e44:	4802      	ldr	r0, [pc, #8]	@ (8001e50 <TIM1_CC_IRQHandler+0x10>)
 8001e46:	f006 fec9 	bl	8008bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000508 	.word	0x20000508

08001e54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <TIM4_IRQHandler+0x10>)
 8001e5a:	f006 febf 	bl	8008bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000554 	.word	0x20000554

08001e68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e6c:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <USART3_IRQHandler+0x10>)
 8001e6e:	f008 fc81 	bl	800a774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200005a0 	.word	0x200005a0

08001e7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8001e80:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001e84:	f004 feda 	bl	8006c3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
 8001e88:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001e8c:	f004 fed6 	bl	8006c3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button3_Pin);
 8001e90:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e94:	f004 fed2 	bl	8006c3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001ea0:	4802      	ldr	r0, [pc, #8]	@ (8001eac <COMP1_2_3_IRQHandler+0x10>)
 8001ea2:	f003 fa9b 	bl	80053dc <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000350 	.word	0x20000350

08001eb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return 1;
 8001eb4:	2301      	movs	r3, #1
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_kill>:

int _kill(int pid, int sig)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eca:	f00c faa1 	bl	800e410 <__errno>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2216      	movs	r2, #22
 8001ed2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_exit>:

void _exit (int status)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ffe7 	bl	8001ec0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ef2:	bf00      	nop
 8001ef4:	e7fd      	b.n	8001ef2 <_exit+0x12>

08001ef6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	e00a      	b.n	8001f1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f08:	f3af 8000 	nop.w
 8001f0c:	4601      	mov	r1, r0
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	60ba      	str	r2, [r7, #8]
 8001f14:	b2ca      	uxtb	r2, r1
 8001f16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	dbf0      	blt.n	8001f08 <_read+0x12>
  }

  return len;
 8001f26:	687b      	ldr	r3, [r7, #4]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	e009      	b.n	8001f56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	60ba      	str	r2, [r7, #8]
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3301      	adds	r3, #1
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	dbf1      	blt.n	8001f42 <_write+0x12>
  }
  return len;
 8001f5e:	687b      	ldr	r3, [r7, #4]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <_close>:

int _close(int file)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f90:	605a      	str	r2, [r3, #4]
  return 0;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <_isatty>:

int _isatty(int file)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fa8:	2301      	movs	r3, #1
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b085      	sub	sp, #20
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd8:	4a14      	ldr	r2, [pc, #80]	@ (800202c <_sbrk+0x5c>)
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <_sbrk+0x60>)
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe4:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d102      	bne.n	8001ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fec:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <_sbrk+0x64>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	@ (8002038 <_sbrk+0x68>)
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d207      	bcs.n	8002010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002000:	f00c fa06 	bl	800e410 <__errno>
 8002004:	4603      	mov	r3, r0
 8002006:	220c      	movs	r2, #12
 8002008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
 800200e:	e009      	b.n	8002024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002010:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002016:	4b07      	ldr	r3, [pc, #28]	@ (8002034 <_sbrk+0x64>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	4a05      	ldr	r2, [pc, #20]	@ (8002034 <_sbrk+0x64>)
 8002020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002022:	68fb      	ldr	r3, [r7, #12]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20008000 	.word	0x20008000
 8002030:	00000400 	.word	0x00000400
 8002034:	20000504 	.word	0x20000504
 8002038:	20000a38 	.word	0x20000a38

0800203c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <SystemInit+0x20>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002046:	4a05      	ldr	r2, [pc, #20]	@ (800205c <SystemInit+0x20>)
 8002048:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800204c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b09e      	sub	sp, #120	@ 0x78
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002066:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002074:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002080:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800208c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
 800209c:	615a      	str	r2, [r3, #20]
 800209e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020a0:	463b      	mov	r3, r7
 80020a2:	2234      	movs	r2, #52	@ 0x34
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f00c f960 	bl	800e36c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ac:	4b64      	ldr	r3, [pc, #400]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 80020ae:	4a65      	ldr	r2, [pc, #404]	@ (8002244 <MX_TIM1_Init+0x1e4>)
 80020b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 80020b2:	4b63      	ldr	r3, [pc, #396]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80020b8:	4b61      	ldr	r3, [pc, #388]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 80020ba:	2220      	movs	r2, #32
 80020bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 80020be:	4b60      	ldr	r3, [pc, #384]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 80020c0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80020c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80020c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 80020c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80020ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020da:	4859      	ldr	r0, [pc, #356]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 80020dc:	f006 facc 	bl	8008678 <HAL_TIM_Base_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80020e6:	f7ff fca0 	bl	8001a2a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ee:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020f0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80020f4:	4619      	mov	r1, r3
 80020f6:	4852      	ldr	r0, [pc, #328]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 80020f8:	f006 ffd4 	bl	80090a4 <HAL_TIM_ConfigClockSource>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002102:	f7ff fc92 	bl	8001a2a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002106:	484e      	ldr	r0, [pc, #312]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 8002108:	f006 fb70 	bl	80087ec <HAL_TIM_PWM_Init>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8002112:	f7ff fc8a 	bl	8001a2a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002116:	2370      	movs	r3, #112	@ 0x70
 8002118:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002122:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002126:	4619      	mov	r1, r3
 8002128:	4845      	ldr	r0, [pc, #276]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 800212a:	f007 fff3 	bl	800a114 <HAL_TIMEx_MasterConfigSynchronization>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8002134:	f7ff fc79 	bl	8001a2a <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8002138:	2302      	movs	r3, #2
 800213a:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800213c:	2301      	movs	r3, #1
 800213e:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002140:	2300      	movs	r3, #0
 8002142:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002144:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002148:	461a      	mov	r2, r3
 800214a:	2101      	movs	r1, #1
 800214c:	483c      	ldr	r0, [pc, #240]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 800214e:	f008 f8ef 	bl	800a330 <HAL_TIMEx_ConfigBreakInput>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002158:	f7ff fc67 	bl	8001a2a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800215c:	2360      	movs	r3, #96	@ 0x60
 800215e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002164:	2300      	movs	r3, #0
 8002166:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002168:	2300      	movs	r3, #0
 800216a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002170:	2300      	movs	r3, #0
 8002172:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002174:	2300      	movs	r3, #0
 8002176:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002178:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800217c:	2200      	movs	r2, #0
 800217e:	4619      	mov	r1, r3
 8002180:	482f      	ldr	r0, [pc, #188]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 8002182:	f006 fe7b 	bl	8008e7c <HAL_TIM_PWM_ConfigChannel>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800218c:	f7ff fc4d 	bl	8001a2a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002190:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002194:	2204      	movs	r2, #4
 8002196:	4619      	mov	r1, r3
 8002198:	4829      	ldr	r0, [pc, #164]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 800219a:	f006 fe6f 	bl	8008e7c <HAL_TIM_PWM_ConfigChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80021a4:	f7ff fc41 	bl	8001a2a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021ac:	2208      	movs	r2, #8
 80021ae:	4619      	mov	r1, r3
 80021b0:	4823      	ldr	r0, [pc, #140]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 80021b2:	f006 fe63 	bl	8008e7c <HAL_TIM_PWM_ConfigChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 80021bc:	f7ff fc35 	bl	8001a2a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80021c0:	2370      	movs	r3, #112	@ 0x70
 80021c2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 7998;
 80021c4:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 80021c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021ce:	220c      	movs	r2, #12
 80021d0:	4619      	mov	r1, r3
 80021d2:	481b      	ldr	r0, [pc, #108]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 80021d4:	f006 fe52 	bl	8008e7c <HAL_TIM_PWM_ConfigChannel>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 80021de:	f7ff fc24 	bl	8001a2a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 120;
 80021ee:	2378      	movs	r3, #120	@ 0x78
 80021f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80021f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 2;
 80021fe:	2302      	movs	r3, #2
 8002200:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800220a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800221c:	463b      	mov	r3, r7
 800221e:	4619      	mov	r1, r3
 8002220:	4807      	ldr	r0, [pc, #28]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 8002222:	f007 fff9 	bl	800a218 <HAL_TIMEx_ConfigBreakDeadTime>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM1_Init+0x1d0>
  {
    Error_Handler();
 800222c:	f7ff fbfd 	bl	8001a2a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002230:	4803      	ldr	r0, [pc, #12]	@ (8002240 <MX_TIM1_Init+0x1e0>)
 8002232:	f000 f8e9 	bl	8002408 <HAL_TIM_MspPostInit>

}
 8002236:	bf00      	nop
 8002238:	3778      	adds	r7, #120	@ 0x78
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000508 	.word	0x20000508
 8002244:	40012c00 	.word	0x40012c00

08002248 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	@ 0x30
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224e:	f107 0320 	add.w	r3, r7, #32
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 800225c:	f107 0310 	add.w	r3, r7, #16
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002274:	4b26      	ldr	r3, [pc, #152]	@ (8002310 <MX_TIM4_Init+0xc8>)
 8002276:	4a27      	ldr	r2, [pc, #156]	@ (8002314 <MX_TIM4_Init+0xcc>)
 8002278:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800227a:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <MX_TIM4_Init+0xc8>)
 800227c:	220f      	movs	r2, #15
 800227e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002280:	4b23      	ldr	r3, [pc, #140]	@ (8002310 <MX_TIM4_Init+0xc8>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002286:	4b22      	ldr	r3, [pc, #136]	@ (8002310 <MX_TIM4_Init+0xc8>)
 8002288:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800228c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800228e:	4b20      	ldr	r3, [pc, #128]	@ (8002310 <MX_TIM4_Init+0xc8>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002294:	4b1e      	ldr	r3, [pc, #120]	@ (8002310 <MX_TIM4_Init+0xc8>)
 8002296:	2200      	movs	r2, #0
 8002298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800229a:	481d      	ldr	r0, [pc, #116]	@ (8002310 <MX_TIM4_Init+0xc8>)
 800229c:	f006 f9ec 	bl	8008678 <HAL_TIM_Base_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80022a6:	f7ff fbc0 	bl	8001a2a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022b0:	f107 0320 	add.w	r3, r7, #32
 80022b4:	4619      	mov	r1, r3
 80022b6:	4816      	ldr	r0, [pc, #88]	@ (8002310 <MX_TIM4_Init+0xc8>)
 80022b8:	f006 fef4 	bl	80090a4 <HAL_TIM_ConfigClockSource>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80022c2:	f7ff fbb2 	bl	8001a2a <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 10;
 80022ce:	230a      	movs	r3, #10
 80022d0:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 5;
 80022d2:	2305      	movs	r3, #5
 80022d4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 80022d6:	f107 0310 	add.w	r3, r7, #16
 80022da:	4619      	mov	r1, r3
 80022dc:	480c      	ldr	r0, [pc, #48]	@ (8002310 <MX_TIM4_Init+0xc8>)
 80022de:	f007 fcbe 	bl	8009c5e <HAL_TIMEx_HallSensor_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 80022e8:	f7ff fb9f 	bl	8001a2a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80022ec:	2350      	movs	r3, #80	@ 0x50
 80022ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	4619      	mov	r1, r3
 80022f8:	4805      	ldr	r0, [pc, #20]	@ (8002310 <MX_TIM4_Init+0xc8>)
 80022fa:	f007 ff0b 	bl	800a114 <HAL_TIMEx_MasterConfigSynchronization>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8002304:	f7ff fb91 	bl	8001a2a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002308:	bf00      	nop
 800230a:	3730      	adds	r7, #48	@ 0x30
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000554 	.word	0x20000554
 8002314:	40000800 	.word	0x40000800

08002318 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	@ 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a30      	ldr	r2, [pc, #192]	@ (80023f8 <HAL_TIM_Base_MspInit+0xe0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d124      	bne.n	8002384 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800233a:	4b30      	ldr	r3, [pc, #192]	@ (80023fc <HAL_TIM_Base_MspInit+0xe4>)
 800233c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800233e:	4a2f      	ldr	r2, [pc, #188]	@ (80023fc <HAL_TIM_Base_MspInit+0xe4>)
 8002340:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002344:	6613      	str	r3, [r2, #96]	@ 0x60
 8002346:	4b2d      	ldr	r3, [pc, #180]	@ (80023fc <HAL_TIM_Base_MspInit+0xe4>)
 8002348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800234a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	2018      	movs	r0, #24
 8002358:	f003 f961 	bl	800561e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800235c:	2018      	movs	r0, #24
 800235e:	f003 f978 	bl	8005652 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2100      	movs	r1, #0
 8002366:	2019      	movs	r0, #25
 8002368:	f003 f959 	bl	800561e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800236c:	2019      	movs	r0, #25
 800236e:	f003 f970 	bl	8005652 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2100      	movs	r1, #0
 8002376:	201b      	movs	r0, #27
 8002378:	f003 f951 	bl	800561e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800237c:	201b      	movs	r0, #27
 800237e:	f003 f968 	bl	8005652 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002382:	e035      	b.n	80023f0 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM4)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1d      	ldr	r2, [pc, #116]	@ (8002400 <HAL_TIM_Base_MspInit+0xe8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d130      	bne.n	80023f0 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800238e:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <HAL_TIM_Base_MspInit+0xe4>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002392:	4a1a      	ldr	r2, [pc, #104]	@ (80023fc <HAL_TIM_Base_MspInit+0xe4>)
 8002394:	f043 0304 	orr.w	r3, r3, #4
 8002398:	6593      	str	r3, [r2, #88]	@ 0x58
 800239a:	4b18      	ldr	r3, [pc, #96]	@ (80023fc <HAL_TIM_Base_MspInit+0xe4>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a6:	4b15      	ldr	r3, [pc, #84]	@ (80023fc <HAL_TIM_Base_MspInit+0xe4>)
 80023a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023aa:	4a14      	ldr	r2, [pc, #80]	@ (80023fc <HAL_TIM_Base_MspInit+0xe4>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023b2:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <HAL_TIM_Base_MspInit+0xe4>)
 80023b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80023be:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80023c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	2302      	movs	r3, #2
 80023c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023cc:	2300      	movs	r3, #0
 80023ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023d0:	2302      	movs	r3, #2
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	4619      	mov	r1, r3
 80023da:	480a      	ldr	r0, [pc, #40]	@ (8002404 <HAL_TIM_Base_MspInit+0xec>)
 80023dc:	f004 fa94 	bl	8006908 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2100      	movs	r1, #0
 80023e4:	201e      	movs	r0, #30
 80023e6:	f003 f91a 	bl	800561e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023ea:	201e      	movs	r0, #30
 80023ec:	f003 f931 	bl	8005652 <HAL_NVIC_EnableIRQ>
}
 80023f0:	bf00      	nop
 80023f2:	3728      	adds	r7, #40	@ 0x28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40012c00 	.word	0x40012c00
 80023fc:	40021000 	.word	0x40021000
 8002400:	40000800 	.word	0x40000800
 8002404:	48000400 	.word	0x48000400

08002408 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	@ 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a29      	ldr	r2, [pc, #164]	@ (80024cc <HAL_TIM_MspPostInit+0xc4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d14b      	bne.n	80024c2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242a:	4b29      	ldr	r3, [pc, #164]	@ (80024d0 <HAL_TIM_MspPostInit+0xc8>)
 800242c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242e:	4a28      	ldr	r2, [pc, #160]	@ (80024d0 <HAL_TIM_MspPostInit+0xc8>)
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002436:	4b26      	ldr	r3, [pc, #152]	@ (80024d0 <HAL_TIM_MspPostInit+0xc8>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	4b23      	ldr	r3, [pc, #140]	@ (80024d0 <HAL_TIM_MspPostInit+0xc8>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002446:	4a22      	ldr	r2, [pc, #136]	@ (80024d0 <HAL_TIM_MspPostInit+0xc8>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800244e:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <HAL_TIM_MspPostInit+0xc8>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800245a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800245e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800246c:	2306      	movs	r3, #6
 800246e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002470:	f107 0314 	add.w	r3, r7, #20
 8002474:	4619      	mov	r1, r3
 8002476:	4817      	ldr	r0, [pc, #92]	@ (80024d4 <HAL_TIM_MspPostInit+0xcc>)
 8002478:	f004 fa46 	bl	8006908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800247c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800248e:	2304      	movs	r3, #4
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	4619      	mov	r1, r3
 8002498:	480e      	ldr	r0, [pc, #56]	@ (80024d4 <HAL_TIM_MspPostInit+0xcc>)
 800249a:	f004 fa35 	bl	8006908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800249e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80024a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80024b0:	2306      	movs	r3, #6
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	4619      	mov	r1, r3
 80024ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024be:	f004 fa23 	bl	8006908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024c2:	bf00      	nop
 80024c4:	3728      	adds	r7, #40	@ 0x28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40012c00 	.word	0x40012c00
 80024d0:	40021000 	.word	0x40021000
 80024d4:	48000400 	.word	0x48000400

080024d8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024dc:	4b22      	ldr	r3, [pc, #136]	@ (8002568 <MX_USART3_UART_Init+0x90>)
 80024de:	4a23      	ldr	r2, [pc, #140]	@ (800256c <MX_USART3_UART_Init+0x94>)
 80024e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80024e2:	4b21      	ldr	r3, [pc, #132]	@ (8002568 <MX_USART3_UART_Init+0x90>)
 80024e4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80024e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002568 <MX_USART3_UART_Init+0x90>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002568 <MX_USART3_UART_Init+0x90>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002568 <MX_USART3_UART_Init+0x90>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002568 <MX_USART3_UART_Init+0x90>)
 80024fe:	220c      	movs	r2, #12
 8002500:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002502:	4b19      	ldr	r3, [pc, #100]	@ (8002568 <MX_USART3_UART_Init+0x90>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002508:	4b17      	ldr	r3, [pc, #92]	@ (8002568 <MX_USART3_UART_Init+0x90>)
 800250a:	2200      	movs	r2, #0
 800250c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800250e:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <MX_USART3_UART_Init+0x90>)
 8002510:	2200      	movs	r2, #0
 8002512:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002514:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <MX_USART3_UART_Init+0x90>)
 8002516:	2200      	movs	r2, #0
 8002518:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800251a:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <MX_USART3_UART_Init+0x90>)
 800251c:	2200      	movs	r2, #0
 800251e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002520:	4811      	ldr	r0, [pc, #68]	@ (8002568 <MX_USART3_UART_Init+0x90>)
 8002522:	f008 f848 	bl	800a5b6 <HAL_UART_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800252c:	f7ff fa7d 	bl	8001a2a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002530:	2100      	movs	r1, #0
 8002532:	480d      	ldr	r0, [pc, #52]	@ (8002568 <MX_USART3_UART_Init+0x90>)
 8002534:	f009 f9fb 	bl	800b92e <HAL_UARTEx_SetTxFifoThreshold>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800253e:	f7ff fa74 	bl	8001a2a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002542:	2100      	movs	r1, #0
 8002544:	4808      	ldr	r0, [pc, #32]	@ (8002568 <MX_USART3_UART_Init+0x90>)
 8002546:	f009 fa30 	bl	800b9aa <HAL_UARTEx_SetRxFifoThreshold>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002550:	f7ff fa6b 	bl	8001a2a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002554:	4804      	ldr	r0, [pc, #16]	@ (8002568 <MX_USART3_UART_Init+0x90>)
 8002556:	f009 f9b1 	bl	800b8bc <HAL_UARTEx_DisableFifoMode>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002560:	f7ff fa63 	bl	8001a2a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	200005a0 	.word	0x200005a0
 800256c:	40004800 	.word	0x40004800

08002570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b09a      	sub	sp, #104	@ 0x68
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002588:	f107 0310 	add.w	r3, r7, #16
 800258c:	2244      	movs	r2, #68	@ 0x44
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f00b feeb 	bl	800e36c <memset>
  if(uartHandle->Instance==USART3)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a37      	ldr	r2, [pc, #220]	@ (8002678 <HAL_UART_MspInit+0x108>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d167      	bne.n	8002670 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025a0:	2304      	movs	r3, #4
 80025a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025a8:	f107 0310 	add.w	r3, r7, #16
 80025ac:	4618      	mov	r0, r3
 80025ae:	f005 fa41 	bl	8007a34 <HAL_RCCEx_PeriphCLKConfig>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025b8:	f7ff fa37 	bl	8001a2a <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025bc:	4b2f      	ldr	r3, [pc, #188]	@ (800267c <HAL_UART_MspInit+0x10c>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c0:	4a2e      	ldr	r2, [pc, #184]	@ (800267c <HAL_UART_MspInit+0x10c>)
 80025c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80025c8:	4b2c      	ldr	r3, [pc, #176]	@ (800267c <HAL_UART_MspInit+0x10c>)
 80025ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d4:	4b29      	ldr	r3, [pc, #164]	@ (800267c <HAL_UART_MspInit+0x10c>)
 80025d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d8:	4a28      	ldr	r2, [pc, #160]	@ (800267c <HAL_UART_MspInit+0x10c>)
 80025da:	f043 0302 	orr.w	r3, r3, #2
 80025de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025e0:	4b26      	ldr	r3, [pc, #152]	@ (800267c <HAL_UART_MspInit+0x10c>)
 80025e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025f0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025fe:	2307      	movs	r3, #7
 8002600:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002602:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002606:	4619      	mov	r1, r3
 8002608:	481d      	ldr	r0, [pc, #116]	@ (8002680 <HAL_UART_MspInit+0x110>)
 800260a:	f004 f97d 	bl	8006908 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 800260e:	4b1d      	ldr	r3, [pc, #116]	@ (8002684 <HAL_UART_MspInit+0x114>)
 8002610:	4a1d      	ldr	r2, [pc, #116]	@ (8002688 <HAL_UART_MspInit+0x118>)
 8002612:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002614:	4b1b      	ldr	r3, [pc, #108]	@ (8002684 <HAL_UART_MspInit+0x114>)
 8002616:	221d      	movs	r2, #29
 8002618:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800261a:	4b1a      	ldr	r3, [pc, #104]	@ (8002684 <HAL_UART_MspInit+0x114>)
 800261c:	2210      	movs	r2, #16
 800261e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002620:	4b18      	ldr	r3, [pc, #96]	@ (8002684 <HAL_UART_MspInit+0x114>)
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002626:	4b17      	ldr	r3, [pc, #92]	@ (8002684 <HAL_UART_MspInit+0x114>)
 8002628:	2280      	movs	r2, #128	@ 0x80
 800262a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800262c:	4b15      	ldr	r3, [pc, #84]	@ (8002684 <HAL_UART_MspInit+0x114>)
 800262e:	2200      	movs	r2, #0
 8002630:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002632:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <HAL_UART_MspInit+0x114>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002638:	4b12      	ldr	r3, [pc, #72]	@ (8002684 <HAL_UART_MspInit+0x114>)
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800263e:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <HAL_UART_MspInit+0x114>)
 8002640:	2200      	movs	r2, #0
 8002642:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002644:	480f      	ldr	r0, [pc, #60]	@ (8002684 <HAL_UART_MspInit+0x114>)
 8002646:	f003 fa93 	bl	8005b70 <HAL_DMA_Init>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8002650:	f7ff f9eb 	bl	8001a2a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a0b      	ldr	r2, [pc, #44]	@ (8002684 <HAL_UART_MspInit+0x114>)
 8002658:	67da      	str	r2, [r3, #124]	@ 0x7c
 800265a:	4a0a      	ldr	r2, [pc, #40]	@ (8002684 <HAL_UART_MspInit+0x114>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002660:	2200      	movs	r2, #0
 8002662:	2100      	movs	r1, #0
 8002664:	2027      	movs	r0, #39	@ 0x27
 8002666:	f002 ffda 	bl	800561e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800266a:	2027      	movs	r0, #39	@ 0x27
 800266c:	f002 fff1 	bl	8005652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002670:	bf00      	nop
 8002672:	3768      	adds	r7, #104	@ 0x68
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40004800 	.word	0x40004800
 800267c:	40021000 	.word	0x40021000
 8002680:	48000400 	.word	0x48000400
 8002684:	20000634 	.word	0x20000634
 8002688:	40020008 	.word	0x40020008

0800268c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800268c:	480d      	ldr	r0, [pc, #52]	@ (80026c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800268e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002690:	f7ff fcd4 	bl	800203c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002694:	480c      	ldr	r0, [pc, #48]	@ (80026c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002696:	490d      	ldr	r1, [pc, #52]	@ (80026cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002698:	4a0d      	ldr	r2, [pc, #52]	@ (80026d0 <LoopForever+0xe>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800269c:	e002      	b.n	80026a4 <LoopCopyDataInit>

0800269e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800269e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a2:	3304      	adds	r3, #4

080026a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a8:	d3f9      	bcc.n	800269e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026aa:	4a0a      	ldr	r2, [pc, #40]	@ (80026d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026ac:	4c0a      	ldr	r4, [pc, #40]	@ (80026d8 <LoopForever+0x16>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b0:	e001      	b.n	80026b6 <LoopFillZerobss>

080026b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b4:	3204      	adds	r2, #4

080026b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b8:	d3fb      	bcc.n	80026b2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80026ba:	f00b feaf 	bl	800e41c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026be:	f7ff f8eb 	bl	8001898 <main>

080026c2 <LoopForever>:

LoopForever:
    b LoopForever
 80026c2:	e7fe      	b.n	80026c2 <LoopForever>
  ldr   r0, =_estack
 80026c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80026c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026cc:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 80026d0:	08012288 	.word	0x08012288
  ldr r2, =_sbss
 80026d4:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80026d8:	20000a34 	.word	0x20000a34

080026dc <COMP4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026dc:	e7fe      	b.n	80026dc <COMP4_IRQHandler>

080026de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e8:	2003      	movs	r0, #3
 80026ea:	f002 ff8d 	bl	8005608 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026ee:	200f      	movs	r0, #15
 80026f0:	f000 f80e 	bl	8002710 <HAL_InitTick>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	71fb      	strb	r3, [r7, #7]
 80026fe:	e001      	b.n	8002704 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002700:	f7ff fb0a 	bl	8001d18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002704:	79fb      	ldrb	r3, [r7, #7]

}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800271c:	4b16      	ldr	r3, [pc, #88]	@ (8002778 <HAL_InitTick+0x68>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d022      	beq.n	800276a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002724:	4b15      	ldr	r3, [pc, #84]	@ (800277c <HAL_InitTick+0x6c>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b13      	ldr	r3, [pc, #76]	@ (8002778 <HAL_InitTick+0x68>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002730:	fbb1 f3f3 	udiv	r3, r1, r3
 8002734:	fbb2 f3f3 	udiv	r3, r2, r3
 8002738:	4618      	mov	r0, r3
 800273a:	f002 ff98 	bl	800566e <HAL_SYSTICK_Config>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10f      	bne.n	8002764 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b0f      	cmp	r3, #15
 8002748:	d809      	bhi.n	800275e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800274a:	2200      	movs	r2, #0
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	f04f 30ff 	mov.w	r0, #4294967295
 8002752:	f002 ff64 	bl	800561e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002756:	4a0a      	ldr	r2, [pc, #40]	@ (8002780 <HAL_InitTick+0x70>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	e007      	b.n	800276e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	e004      	b.n	800276e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	e001      	b.n	800276e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800276e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000008 	.word	0x20000008
 800277c:	20000000 	.word	0x20000000
 8002780:	20000004 	.word	0x20000004

08002784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002788:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <HAL_IncTick+0x1c>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <HAL_IncTick+0x20>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4413      	add	r3, r2
 8002792:	4a03      	ldr	r2, [pc, #12]	@ (80027a0 <HAL_IncTick+0x1c>)
 8002794:	6013      	str	r3, [r2, #0]
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	20000694 	.word	0x20000694
 80027a4:	20000008 	.word	0x20000008

080027a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return uwTick;
 80027ac:	4b03      	ldr	r3, [pc, #12]	@ (80027bc <HAL_GetTick+0x14>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000694 	.word	0x20000694

080027c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	609a      	str	r2, [r3, #8]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	609a      	str	r2, [r3, #8]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3360      	adds	r3, #96	@ 0x60
 800283a:	461a      	mov	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b08      	ldr	r3, [pc, #32]	@ (800286c <LL_ADC_SetOffset+0x44>)
 800284a:	4013      	ands	r3, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	4313      	orrs	r3, r2
 8002858:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002860:	bf00      	nop
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	03fff000 	.word	0x03fff000

08002870 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3360      	adds	r3, #96	@ 0x60
 800287e:	461a      	mov	r2, r3
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3360      	adds	r3, #96	@ 0x60
 80028ac:	461a      	mov	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028c6:	bf00      	nop
 80028c8:	371c      	adds	r7, #28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b087      	sub	sp, #28
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3360      	adds	r3, #96	@ 0x60
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3360      	adds	r3, #96	@ 0x60
 8002918:	461a      	mov	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	431a      	orrs	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002932:	bf00      	nop
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	615a      	str	r2, [r3, #20]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800298a:	b480      	push	{r7}
 800298c:	b087      	sub	sp, #28
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3330      	adds	r3, #48	@ 0x30
 800299a:	461a      	mov	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	4413      	add	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	211f      	movs	r1, #31
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	401a      	ands	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	0e9b      	lsrs	r3, r3, #26
 80029c2:	f003 011f 	and.w	r1, r3, #31
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	431a      	orrs	r2, r3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ee:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	3314      	adds	r3, #20
 8002a18:	461a      	mov	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	0e5b      	lsrs	r3, r3, #25
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	4413      	add	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	0d1b      	lsrs	r3, r3, #20
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	2107      	movs	r1, #7
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	401a      	ands	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	0d1b      	lsrs	r3, r3, #20
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 0318 	and.w	r3, r3, #24
 8002a82:	4908      	ldr	r1, [pc, #32]	@ (8002aa4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a84:	40d9      	lsrs	r1, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	400b      	ands	r3, r1
 8002a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	0007ffff 	.word	0x0007ffff

08002aa8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002af0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6093      	str	r3, [r2, #8]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b18:	d101      	bne.n	8002b1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b40:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b68:	d101      	bne.n	8002b6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bb8:	f043 0202 	orr.w	r2, r3, #2
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <LL_ADC_IsEnabled+0x18>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <LL_ADC_IsEnabled+0x1a>
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d101      	bne.n	8002c0a <LL_ADC_IsDisableOngoing+0x18>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <LL_ADC_IsDisableOngoing+0x1a>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d101      	bne.n	8002c30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d101      	bne.n	8002c56 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b089      	sub	sp, #36	@ 0x24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e167      	b.n	8002f4e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d109      	bne.n	8002ca0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7fe fb23 	bl	80012d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff2d 	bl	8002b04 <LL_ADC_IsDeepPowerDownEnabled>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d004      	beq.n	8002cba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff13 	bl	8002ae0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff ff48 	bl	8002b54 <LL_ADC_IsInternalRegulatorEnabled>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d115      	bne.n	8002cf6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ff2c 	bl	8002b2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cd4:	4ba0      	ldr	r3, [pc, #640]	@ (8002f58 <HAL_ADC_Init+0x2f4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	4aa0      	ldr	r2, [pc, #640]	@ (8002f5c <HAL_ADC_Init+0x2f8>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ce8:	e002      	b.n	8002cf0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f9      	bne.n	8002cea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ff2a 	bl	8002b54 <LL_ADC_IsInternalRegulatorEnabled>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10d      	bne.n	8002d22 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	f043 0210 	orr.w	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d16:	f043 0201 	orr.w	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff ff76 	bl	8002c18 <LL_ADC_REG_IsConversionOngoing>
 8002d2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f040 8100 	bne.w	8002f3c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 80fc 	bne.w	8002f3c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d48:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d4c:	f043 0202 	orr.w	r2, r3, #2
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff37 	bl	8002bcc <LL_ADC_IsEnabled>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d111      	bne.n	8002d88 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d68:	f7ff ff30 	bl	8002bcc <LL_ADC_IsEnabled>
 8002d6c:	4604      	mov	r4, r0
 8002d6e:	487c      	ldr	r0, [pc, #496]	@ (8002f60 <HAL_ADC_Init+0x2fc>)
 8002d70:	f7ff ff2c 	bl	8002bcc <LL_ADC_IsEnabled>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4323      	orrs	r3, r4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4619      	mov	r1, r3
 8002d82:	4878      	ldr	r0, [pc, #480]	@ (8002f64 <HAL_ADC_Init+0x300>)
 8002d84:	f7ff fd1c 	bl	80027c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	7f5b      	ldrb	r3, [r3, #29]
 8002d8c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d92:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002d98:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002d9e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002da6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d106      	bne.n	8002dc4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	045b      	lsls	r3, r3, #17
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	4b60      	ldr	r3, [pc, #384]	@ (8002f68 <HAL_ADC_Init+0x304>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	69b9      	ldr	r1, [r7, #24]
 8002df0:	430b      	orrs	r3, r1
 8002df2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff ff15 	bl	8002c3e <LL_ADC_INJ_IsConversionOngoing>
 8002e14:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d16d      	bne.n	8002ef8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d16a      	bne.n	8002ef8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e26:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e2e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e3e:	f023 0302 	bic.w	r3, r3, #2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6812      	ldr	r2, [r2, #0]
 8002e46:	69b9      	ldr	r1, [r7, #24]
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d017      	beq.n	8002e84 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e6c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6911      	ldr	r1, [r2, #16]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002e82:	e013      	b.n	8002eac <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002e92:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ea4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ea8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d118      	bne.n	8002ee8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ecc:	4311      	orrs	r1, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ed2:	4311      	orrs	r1, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0201 	orr.w	r2, r2, #1
 8002ee4:	611a      	str	r2, [r3, #16]
 8002ee6:	e007      	b.n	8002ef8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d10c      	bne.n	8002f1a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	f023 010f 	bic.w	r1, r3, #15
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	1e5a      	subs	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f18:	e007      	b.n	8002f2a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 020f 	bic.w	r2, r2, #15
 8002f28:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	f043 0201 	orr.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f3a:	e007      	b.n	8002f4c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f40:	f043 0210 	orr.w	r2, r3, #16
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3724      	adds	r7, #36	@ 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd90      	pop	{r4, r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000000 	.word	0x20000000
 8002f5c:	053e2d63 	.word	0x053e2d63
 8002f60:	50000100 	.word	0x50000100
 8002f64:	50000300 	.word	0x50000300
 8002f68:	fff04007 	.word	0xfff04007

08002f6c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	@ 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002f74:	2300      	movs	r3, #0
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f88:	4883      	ldr	r0, [pc, #524]	@ (8003198 <HAL_ADC_IRQHandler+0x22c>)
 8002f8a:	f7ff fd8d 	bl	8002aa8 <LL_ADC_GetMultimode>
 8002f8e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d017      	beq.n	8002fca <HAL_ADC_IRQHandler+0x5e>
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d012      	beq.n	8002fca <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d105      	bne.n	8002fbc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f001 fa9d 	bl	80044fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <HAL_ADC_IRQHandler+0x72>
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8085 	beq.w	80030f4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d07f      	beq.n	80030f4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003004:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fca7 	bl	8002964 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d064      	beq.n	80030e6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a5e      	ldr	r2, [pc, #376]	@ (800319c <HAL_ADC_IRQHandler+0x230>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d002      	beq.n	800302c <HAL_ADC_IRQHandler+0xc0>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	e001      	b.n	8003030 <HAL_ADC_IRQHandler+0xc4>
 800302c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	4293      	cmp	r3, r2
 8003036:	d008      	beq.n	800304a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b05      	cmp	r3, #5
 8003042:	d002      	beq.n	800304a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2b09      	cmp	r3, #9
 8003048:	d104      	bne.n	8003054 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	623b      	str	r3, [r7, #32]
 8003052:	e00d      	b.n	8003070 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a50      	ldr	r2, [pc, #320]	@ (800319c <HAL_ADC_IRQHandler+0x230>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d002      	beq.n	8003064 <HAL_ADC_IRQHandler+0xf8>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	e001      	b.n	8003068 <HAL_ADC_IRQHandler+0xfc>
 8003064:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003068:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d135      	bne.n	80030e6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b08      	cmp	r3, #8
 8003086:	d12e      	bne.n	80030e6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fdc3 	bl	8002c18 <LL_ADC_REG_IsConversionOngoing>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d11a      	bne.n	80030ce <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 020c 	bic.w	r2, r2, #12
 80030a6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d112      	bne.n	80030e6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c4:	f043 0201 	orr.w	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030cc:	e00b      	b.n	80030e6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d2:	f043 0210 	orr.w	r2, r3, #16
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f95a 	bl	80033a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	220c      	movs	r2, #12
 80030f2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <HAL_ADC_IRQHandler+0x19c>
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10b      	bne.n	8003120 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 809e 	beq.w	8003250 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8098 	beq.w	8003250 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b00      	cmp	r3, #0
 800312a:	d105      	bne.n	8003138 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003130:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff fc50 	bl	80029e2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003142:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fc0b 	bl	8002964 <LL_ADC_REG_IsTriggerSourceSWStart>
 800314e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a11      	ldr	r2, [pc, #68]	@ (800319c <HAL_ADC_IRQHandler+0x230>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d002      	beq.n	8003160 <HAL_ADC_IRQHandler+0x1f4>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	e001      	b.n	8003164 <HAL_ADC_IRQHandler+0x1f8>
 8003160:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	4293      	cmp	r3, r2
 800316a:	d008      	beq.n	800317e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d005      	beq.n	800317e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b06      	cmp	r3, #6
 8003176:	d002      	beq.n	800317e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b07      	cmp	r3, #7
 800317c:	d104      	bne.n	8003188 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	623b      	str	r3, [r7, #32]
 8003186:	e011      	b.n	80031ac <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a03      	ldr	r2, [pc, #12]	@ (800319c <HAL_ADC_IRQHandler+0x230>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d006      	beq.n	80031a0 <HAL_ADC_IRQHandler+0x234>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	e005      	b.n	80031a4 <HAL_ADC_IRQHandler+0x238>
 8003198:	50000300 	.word	0x50000300
 800319c:	50000100 	.word	0x50000100
 80031a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031a4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d047      	beq.n	8003242 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d007      	beq.n	80031cc <HAL_ADC_IRQHandler+0x260>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d03f      	beq.n	8003242 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d13a      	bne.n	8003242 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d6:	2b40      	cmp	r3, #64	@ 0x40
 80031d8:	d133      	bne.n	8003242 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d12e      	bne.n	8003242 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fd28 	bl	8002c3e <LL_ADC_INJ_IsConversionOngoing>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d11a      	bne.n	800322a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003202:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003208:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d112      	bne.n	8003242 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	f043 0201 	orr.w	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003228:	e00b      	b.n	8003242 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322e:	f043 0210 	orr.w	r2, r3, #16
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323a:	f043 0201 	orr.w	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f009 fad8 	bl	800c7f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2260      	movs	r2, #96	@ 0x60
 800324e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003256:	2b00      	cmp	r3, #0
 8003258:	d011      	beq.n	800327e <HAL_ADC_IRQHandler+0x312>
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00c      	beq.n	800327e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003268:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f89f 	bl	80033b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2280      	movs	r2, #128	@ 0x80
 800327c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <HAL_ADC_IRQHandler+0x342>
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00d      	beq.n	80032ae <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003296:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f001 f918 	bl	80044d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d012      	beq.n	80032de <HAL_ADC_IRQHandler+0x372>
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00d      	beq.n	80032de <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f001 f90a 	bl	80044e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d036      	beq.n	8003356 <HAL_ADC_IRQHandler+0x3ea>
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d031      	beq.n	8003356 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80032fa:	2301      	movs	r3, #1
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80032fe:	e014      	b.n	800332a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003306:	4825      	ldr	r0, [pc, #148]	@ (800339c <HAL_ADC_IRQHandler+0x430>)
 8003308:	f7ff fbdc 	bl	8002ac4 <LL_ADC_GetMultiDMATransfer>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003312:	2301      	movs	r3, #1
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
 8003316:	e008      	b.n	800332a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003326:	2301      	movs	r3, #1
 8003328:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	2b01      	cmp	r3, #1
 800332e:	d10e      	bne.n	800334e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003334:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003340:	f043 0202 	orr.w	r2, r3, #2
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f83d 	bl	80033c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2210      	movs	r2, #16
 8003354:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d018      	beq.n	8003392 <HAL_ADC_IRQHandler+0x426>
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003366:	2b00      	cmp	r3, #0
 8003368:	d013      	beq.n	8003392 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800337a:	f043 0208 	orr.w	r2, r3, #8
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800338a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f001 f897 	bl	80044c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003392:	bf00      	nop
 8003394:	3728      	adds	r7, #40	@ 0x28
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	50000300 	.word	0x50000300

080033a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b0b6      	sub	sp, #216	@ 0xd8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x22>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e3c8      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x7b4>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fc04 	bl	8002c18 <LL_ADC_REG_IsConversionOngoing>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	f040 83ad 	bne.w	8003b72 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	f7ff fab0 	bl	800298a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fbf2 	bl	8002c18 <LL_ADC_REG_IsConversionOngoing>
 8003434:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fbfe 	bl	8002c3e <LL_ADC_INJ_IsConversionOngoing>
 8003442:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003446:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800344a:	2b00      	cmp	r3, #0
 800344c:	f040 81d9 	bne.w	8003802 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003450:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003454:	2b00      	cmp	r3, #0
 8003456:	f040 81d4 	bne.w	8003802 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003462:	d10f      	bne.n	8003484 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2200      	movs	r2, #0
 800346e:	4619      	mov	r1, r3
 8003470:	f7ff faca 	bl	8002a08 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fa5e 	bl	800293e <LL_ADC_SetSamplingTimeCommonConfig>
 8003482:	e00e      	b.n	80034a2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	6819      	ldr	r1, [r3, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	461a      	mov	r2, r3
 8003492:	f7ff fab9 	bl	8002a08 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fa4e 	bl	800293e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	08db      	lsrs	r3, r3, #3
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d022      	beq.n	800350a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	6919      	ldr	r1, [r3, #16]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034d4:	f7ff f9a8 	bl	8002828 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	6919      	ldr	r1, [r3, #16]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	461a      	mov	r2, r3
 80034e6:	f7ff f9f4 	bl	80028d2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d102      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x124>
 80034fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034fe:	e000      	b.n	8003502 <HAL_ADC_ConfigChannel+0x126>
 8003500:	2300      	movs	r3, #0
 8003502:	461a      	mov	r2, r3
 8003504:	f7ff fa00 	bl	8002908 <LL_ADC_SetOffsetSaturation>
 8003508:	e17b      	b.n	8003802 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff f9ad 	bl	8002870 <LL_ADC_GetOffsetChannel>
 8003516:	4603      	mov	r3, r0
 8003518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x15a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff f9a2 	bl	8002870 <LL_ADC_GetOffsetChannel>
 800352c:	4603      	mov	r3, r0
 800352e:	0e9b      	lsrs	r3, r3, #26
 8003530:	f003 021f 	and.w	r2, r3, #31
 8003534:	e01e      	b.n	8003574 <HAL_ADC_ConfigChannel+0x198>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff f997 	bl	8002870 <LL_ADC_GetOffsetChannel>
 8003542:	4603      	mov	r3, r0
 8003544:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800354c:	fa93 f3a3 	rbit	r3, r3
 8003550:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003554:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003558:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800355c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003564:	2320      	movs	r3, #32
 8003566:	e004      	b.n	8003572 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800356c:	fab3 f383 	clz	r3, r3
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357c:	2b00      	cmp	r3, #0
 800357e:	d105      	bne.n	800358c <HAL_ADC_ConfigChannel+0x1b0>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	0e9b      	lsrs	r3, r3, #26
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	e018      	b.n	80035be <HAL_ADC_ConfigChannel+0x1e2>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80035a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80035a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80035b0:	2320      	movs	r3, #32
 80035b2:	e004      	b.n	80035be <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80035b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035be:	429a      	cmp	r2, r3
 80035c0:	d106      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2200      	movs	r2, #0
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff f966 	bl	800289c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2101      	movs	r1, #1
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff f94a 	bl	8002870 <LL_ADC_GetOffsetChannel>
 80035dc:	4603      	mov	r3, r0
 80035de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10a      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x220>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2101      	movs	r1, #1
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff f93f 	bl	8002870 <LL_ADC_GetOffsetChannel>
 80035f2:	4603      	mov	r3, r0
 80035f4:	0e9b      	lsrs	r3, r3, #26
 80035f6:	f003 021f 	and.w	r2, r3, #31
 80035fa:	e01e      	b.n	800363a <HAL_ADC_ConfigChannel+0x25e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2101      	movs	r1, #1
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff f934 	bl	8002870 <LL_ADC_GetOffsetChannel>
 8003608:	4603      	mov	r3, r0
 800360a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800361a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800361e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003622:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800362a:	2320      	movs	r3, #32
 800362c:	e004      	b.n	8003638 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800362e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003642:	2b00      	cmp	r3, #0
 8003644:	d105      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x276>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	0e9b      	lsrs	r3, r3, #26
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	e018      	b.n	8003684 <HAL_ADC_ConfigChannel+0x2a8>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003666:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800366a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800366e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003676:	2320      	movs	r3, #32
 8003678:	e004      	b.n	8003684 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800367a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800367e:	fab3 f383 	clz	r3, r3
 8003682:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003684:	429a      	cmp	r2, r3
 8003686:	d106      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2200      	movs	r2, #0
 800368e:	2101      	movs	r1, #1
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff f903 	bl	800289c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2102      	movs	r1, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff f8e7 	bl	8002870 <LL_ADC_GetOffsetChannel>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x2e6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2102      	movs	r1, #2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff f8dc 	bl	8002870 <LL_ADC_GetOffsetChannel>
 80036b8:	4603      	mov	r3, r0
 80036ba:	0e9b      	lsrs	r3, r3, #26
 80036bc:	f003 021f 	and.w	r2, r3, #31
 80036c0:	e01e      	b.n	8003700 <HAL_ADC_ConfigChannel+0x324>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2102      	movs	r1, #2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff f8d1 	bl	8002870 <LL_ADC_GetOffsetChannel>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80036e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80036e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80036f0:	2320      	movs	r3, #32
 80036f2:	e004      	b.n	80036fe <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80036f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003708:	2b00      	cmp	r3, #0
 800370a:	d105      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x33c>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0e9b      	lsrs	r3, r3, #26
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	e016      	b.n	8003746 <HAL_ADC_ConfigChannel+0x36a>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800372a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800372c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003730:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003738:	2320      	movs	r3, #32
 800373a:	e004      	b.n	8003746 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800373c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003740:	fab3 f383 	clz	r3, r3
 8003744:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003746:	429a      	cmp	r2, r3
 8003748:	d106      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	2102      	movs	r1, #2
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff f8a2 	bl	800289c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2103      	movs	r1, #3
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff f886 	bl	8002870 <LL_ADC_GetOffsetChannel>
 8003764:	4603      	mov	r3, r0
 8003766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x3a8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2103      	movs	r1, #3
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff f87b 	bl	8002870 <LL_ADC_GetOffsetChannel>
 800377a:	4603      	mov	r3, r0
 800377c:	0e9b      	lsrs	r3, r3, #26
 800377e:	f003 021f 	and.w	r2, r3, #31
 8003782:	e017      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x3d8>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2103      	movs	r1, #3
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff f870 	bl	8002870 <LL_ADC_GetOffsetChannel>
 8003790:	4603      	mov	r3, r0
 8003792:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800379c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800379e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80037a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80037a6:	2320      	movs	r3, #32
 80037a8:	e003      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80037aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037ac:	fab3 f383 	clz	r3, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x3f0>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	0e9b      	lsrs	r3, r3, #26
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	e011      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x414>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80037da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80037de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80037e4:	2320      	movs	r3, #32
 80037e6:	e003      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80037e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ea:	fab3 f383 	clz	r3, r3
 80037ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d106      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2200      	movs	r2, #0
 80037fa:	2103      	movs	r1, #3
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff f84d 	bl	800289c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff f9e0 	bl	8002bcc <LL_ADC_IsEnabled>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 8140 	bne.w	8003a94 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	6819      	ldr	r1, [r3, #0]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	461a      	mov	r2, r3
 8003822:	f7ff f91d 	bl	8002a60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4a8f      	ldr	r2, [pc, #572]	@ (8003a68 <HAL_ADC_ConfigChannel+0x68c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	f040 8131 	bne.w	8003a94 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10b      	bne.n	800385a <HAL_ADC_ConfigChannel+0x47e>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	0e9b      	lsrs	r3, r3, #26
 8003848:	3301      	adds	r3, #1
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	2b09      	cmp	r3, #9
 8003850:	bf94      	ite	ls
 8003852:	2301      	movls	r3, #1
 8003854:	2300      	movhi	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	e019      	b.n	800388e <HAL_ADC_ConfigChannel+0x4b2>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003860:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800386a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800386c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003872:	2320      	movs	r3, #32
 8003874:	e003      	b.n	800387e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003876:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003878:	fab3 f383 	clz	r3, r3
 800387c:	b2db      	uxtb	r3, r3
 800387e:	3301      	adds	r3, #1
 8003880:	f003 031f 	and.w	r3, r3, #31
 8003884:	2b09      	cmp	r3, #9
 8003886:	bf94      	ite	ls
 8003888:	2301      	movls	r3, #1
 800388a:	2300      	movhi	r3, #0
 800388c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800388e:	2b00      	cmp	r3, #0
 8003890:	d079      	beq.n	8003986 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389a:	2b00      	cmp	r3, #0
 800389c:	d107      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x4d2>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	0e9b      	lsrs	r3, r3, #26
 80038a4:	3301      	adds	r3, #1
 80038a6:	069b      	lsls	r3, r3, #26
 80038a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038ac:	e015      	b.n	80038da <HAL_ADC_ConfigChannel+0x4fe>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038b6:	fa93 f3a3 	rbit	r3, r3
 80038ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80038bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038be:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80038c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80038c6:	2320      	movs	r3, #32
 80038c8:	e003      	b.n	80038d2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80038ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038cc:	fab3 f383 	clz	r3, r3
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	3301      	adds	r3, #1
 80038d4:	069b      	lsls	r3, r3, #26
 80038d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x51e>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	0e9b      	lsrs	r3, r3, #26
 80038ec:	3301      	adds	r3, #1
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	2101      	movs	r1, #1
 80038f4:	fa01 f303 	lsl.w	r3, r1, r3
 80038f8:	e017      	b.n	800392a <HAL_ADC_ConfigChannel+0x54e>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003902:	fa93 f3a3 	rbit	r3, r3
 8003906:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800390a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800390c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003912:	2320      	movs	r3, #32
 8003914:	e003      	b.n	800391e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003918:	fab3 f383 	clz	r3, r3
 800391c:	b2db      	uxtb	r3, r3
 800391e:	3301      	adds	r3, #1
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	2101      	movs	r1, #1
 8003926:	fa01 f303 	lsl.w	r3, r1, r3
 800392a:	ea42 0103 	orr.w	r1, r2, r3
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x574>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	0e9b      	lsrs	r3, r3, #26
 8003940:	3301      	adds	r3, #1
 8003942:	f003 021f 	and.w	r2, r3, #31
 8003946:	4613      	mov	r3, r2
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	4413      	add	r3, r2
 800394c:	051b      	lsls	r3, r3, #20
 800394e:	e018      	b.n	8003982 <HAL_ADC_ConfigChannel+0x5a6>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003958:	fa93 f3a3 	rbit	r3, r3
 800395c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800395e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003960:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003968:	2320      	movs	r3, #32
 800396a:	e003      	b.n	8003974 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800396c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800396e:	fab3 f383 	clz	r3, r3
 8003972:	b2db      	uxtb	r3, r3
 8003974:	3301      	adds	r3, #1
 8003976:	f003 021f 	and.w	r2, r3, #31
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003982:	430b      	orrs	r3, r1
 8003984:	e081      	b.n	8003a8a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398e:	2b00      	cmp	r3, #0
 8003990:	d107      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x5c6>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	0e9b      	lsrs	r3, r3, #26
 8003998:	3301      	adds	r3, #1
 800399a:	069b      	lsls	r3, r3, #26
 800399c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039a0:	e015      	b.n	80039ce <HAL_ADC_ConfigChannel+0x5f2>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039aa:	fa93 f3a3 	rbit	r3, r3
 80039ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80039b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80039b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80039ba:	2320      	movs	r3, #32
 80039bc:	e003      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80039be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c0:	fab3 f383 	clz	r3, r3
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	3301      	adds	r3, #1
 80039c8:	069b      	lsls	r3, r3, #26
 80039ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x612>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	0e9b      	lsrs	r3, r3, #26
 80039e0:	3301      	adds	r3, #1
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	2101      	movs	r1, #1
 80039e8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ec:	e017      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x642>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	61fb      	str	r3, [r7, #28]
  return result;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003a06:	2320      	movs	r3, #32
 8003a08:	e003      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	fab3 f383 	clz	r3, r3
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	3301      	adds	r3, #1
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	2101      	movs	r1, #1
 8003a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1e:	ea42 0103 	orr.w	r1, r2, r3
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10d      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x66e>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	0e9b      	lsrs	r3, r3, #26
 8003a34:	3301      	adds	r3, #1
 8003a36:	f003 021f 	and.w	r2, r3, #31
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	4413      	add	r3, r2
 8003a40:	3b1e      	subs	r3, #30
 8003a42:	051b      	lsls	r3, r3, #20
 8003a44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a48:	e01e      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x6ac>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	613b      	str	r3, [r7, #16]
  return result;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d104      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003a62:	2320      	movs	r3, #32
 8003a64:	e006      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x698>
 8003a66:	bf00      	nop
 8003a68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	3301      	adds	r3, #1
 8003a76:	f003 021f 	and.w	r2, r3, #31
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	3b1e      	subs	r3, #30
 8003a82:	051b      	lsls	r3, r3, #20
 8003a84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a88:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f7fe ffba 	bl	8002a08 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b3f      	ldr	r3, [pc, #252]	@ (8003b98 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d071      	beq.n	8003b84 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003aa0:	483e      	ldr	r0, [pc, #248]	@ (8003b9c <HAL_ADC_ConfigChannel+0x7c0>)
 8003aa2:	f7fe feb3 	bl	800280c <LL_ADC_GetCommonPathInternalCh>
 8003aa6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a3c      	ldr	r2, [pc, #240]	@ (8003ba0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_ADC_ConfigChannel+0x6e2>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ba4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d127      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003abe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ac2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d121      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ad2:	d157      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ad4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ad8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003adc:	4619      	mov	r1, r3
 8003ade:	482f      	ldr	r0, [pc, #188]	@ (8003b9c <HAL_ADC_ConfigChannel+0x7c0>)
 8003ae0:	f7fe fe81 	bl	80027e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ae4:	4b30      	ldr	r3, [pc, #192]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	099b      	lsrs	r3, r3, #6
 8003aea:	4a30      	ldr	r2, [pc, #192]	@ (8003bac <HAL_ADC_ConfigChannel+0x7d0>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	4613      	mov	r3, r2
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003afe:	e002      	b.n	8003b06 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f9      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b0c:	e03a      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a27      	ldr	r2, [pc, #156]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d113      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10d      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a22      	ldr	r2, [pc, #136]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d02a      	beq.n	8003b84 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b36:	4619      	mov	r1, r3
 8003b38:	4818      	ldr	r0, [pc, #96]	@ (8003b9c <HAL_ADC_ConfigChannel+0x7c0>)
 8003b3a:	f7fe fe54 	bl	80027e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b3e:	e021      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d11c      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d116      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a16      	ldr	r2, [pc, #88]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d011      	beq.n	8003b84 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b68:	4619      	mov	r1, r3
 8003b6a:	480c      	ldr	r0, [pc, #48]	@ (8003b9c <HAL_ADC_ConfigChannel+0x7c0>)
 8003b6c:	f7fe fe3b 	bl	80027e6 <LL_ADC_SetCommonPathInternalCh>
 8003b70:	e008      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b76:	f043 0220 	orr.w	r2, r3, #32
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b8c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	37d8      	adds	r7, #216	@ 0xd8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	80080000 	.word	0x80080000
 8003b9c:	50000300 	.word	0x50000300
 8003ba0:	c3210000 	.word	0xc3210000
 8003ba4:	90c00010 	.word	0x90c00010
 8003ba8:	20000000 	.word	0x20000000
 8003bac:	053e2d63 	.word	0x053e2d63
 8003bb0:	c7520000 	.word	0xc7520000
 8003bb4:	50000100 	.word	0x50000100
 8003bb8:	cb840000 	.word	0xcb840000

08003bbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe fffd 	bl	8002bcc <LL_ADC_IsEnabled>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d169      	bne.n	8003cac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	4b36      	ldr	r3, [pc, #216]	@ (8003cb8 <ADC_Enable+0xfc>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00d      	beq.n	8003c02 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bea:	f043 0210 	orr.w	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e055      	b.n	8003cae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe ffb8 	bl	8002b7c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c0c:	482b      	ldr	r0, [pc, #172]	@ (8003cbc <ADC_Enable+0x100>)
 8003c0e:	f7fe fdfd 	bl	800280c <LL_ADC_GetCommonPathInternalCh>
 8003c12:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003c14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d013      	beq.n	8003c44 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c1c:	4b28      	ldr	r3, [pc, #160]	@ (8003cc0 <ADC_Enable+0x104>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	099b      	lsrs	r3, r3, #6
 8003c22:	4a28      	ldr	r2, [pc, #160]	@ (8003cc4 <ADC_Enable+0x108>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	099b      	lsrs	r3, r3, #6
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c36:	e002      	b.n	8003c3e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f9      	bne.n	8003c38 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c44:	f7fe fdb0 	bl	80027a8 <HAL_GetTick>
 8003c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c4a:	e028      	b.n	8003c9e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fe ffbb 	bl	8002bcc <LL_ADC_IsEnabled>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d104      	bne.n	8003c66 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fe ff8b 	bl	8002b7c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c66:	f7fe fd9f 	bl	80027a8 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d914      	bls.n	8003c9e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d00d      	beq.n	8003c9e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c86:	f043 0210 	orr.w	r2, r3, #16
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c92:	f043 0201 	orr.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e007      	b.n	8003cae <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d1cf      	bne.n	8003c4c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	8000003f 	.word	0x8000003f
 8003cbc:	50000300 	.word	0x50000300
 8003cc0:	20000000 	.word	0x20000000
 8003cc4:	053e2d63 	.word	0x053e2d63

08003cc8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fe ff8c 	bl	8002bf2 <LL_ADC_IsDisableOngoing>
 8003cda:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fe ff73 	bl	8002bcc <LL_ADC_IsEnabled>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d047      	beq.n	8003d7c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d144      	bne.n	8003d7c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 030d 	and.w	r3, r3, #13
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d10c      	bne.n	8003d1a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe ff4d 	bl	8002ba4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2203      	movs	r2, #3
 8003d10:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d12:	f7fe fd49 	bl	80027a8 <HAL_GetTick>
 8003d16:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d18:	e029      	b.n	8003d6e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1e:	f043 0210 	orr.w	r2, r3, #16
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d2a:	f043 0201 	orr.w	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e023      	b.n	8003d7e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d36:	f7fe fd37 	bl	80027a8 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d914      	bls.n	8003d6e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00d      	beq.n	8003d6e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d56:	f043 0210 	orr.w	r2, r3, #16
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d62:	f043 0201 	orr.w	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e007      	b.n	8003d7e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1dc      	bne.n	8003d36 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <LL_ADC_SetCommonPathInternalCh>:
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <LL_ADC_GetCommonPathInternalCh>:
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <LL_ADC_SetOffset>:
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3360      	adds	r3, #96	@ 0x60
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b08      	ldr	r3, [pc, #32]	@ (8003e0c <LL_ADC_SetOffset+0x44>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	601a      	str	r2, [r3, #0]
}
 8003e00:	bf00      	nop
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	03fff000 	.word	0x03fff000

08003e10 <LL_ADC_GetOffsetChannel>:
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3360      	adds	r3, #96	@ 0x60
 8003e1e:	461a      	mov	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <LL_ADC_SetOffsetState>:
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3360      	adds	r3, #96	@ 0x60
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	431a      	orrs	r2, r3
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	601a      	str	r2, [r3, #0]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <LL_ADC_SetOffsetSign>:
{
 8003e72:	b480      	push	{r7}
 8003e74:	b087      	sub	sp, #28
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3360      	adds	r3, #96	@ 0x60
 8003e82:	461a      	mov	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	601a      	str	r2, [r3, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <LL_ADC_SetOffsetSaturation>:
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3360      	adds	r3, #96	@ 0x60
 8003eb8:	461a      	mov	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	601a      	str	r2, [r3, #0]
}
 8003ed2:	bf00      	nop
 8003ed4:	371c      	adds	r7, #28
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	615a      	str	r2, [r3, #20]
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <LL_ADC_INJ_GetTrigAuto>:
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <LL_ADC_SetChannelSamplingTime>:
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3314      	adds	r3, #20
 8003f30:	461a      	mov	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	0e5b      	lsrs	r3, r3, #25
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	4413      	add	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	0d1b      	lsrs	r3, r3, #20
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	2107      	movs	r1, #7
 8003f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	401a      	ands	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	0d1b      	lsrs	r3, r3, #20
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	431a      	orrs	r2, r3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	601a      	str	r2, [r3, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <LL_ADC_SetChannelSingleDiff>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f90:	43db      	mvns	r3, r3
 8003f92:	401a      	ands	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f003 0318 	and.w	r3, r3, #24
 8003f9a:	4908      	ldr	r1, [pc, #32]	@ (8003fbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f9c:	40d9      	lsrs	r1, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	400b      	ands	r3, r1
 8003fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003fae:	bf00      	nop
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	0007ffff 	.word	0x0007ffff

08003fc0 <LL_ADC_GetMultimode>:
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 031f 	and.w	r3, r3, #31
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_ADC_IsEnabled>:
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <LL_ADC_IsEnabled+0x18>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <LL_ADC_IsEnabled+0x1a>
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <LL_ADC_StartCalibration>:
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004014:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800401e:	4313      	orrs	r3, r2
 8004020:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	609a      	str	r2, [r3, #8]
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <LL_ADC_IsCalibrationOnGoing>:
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004044:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004048:	d101      	bne.n	800404e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <LL_ADC_REG_IsConversionOngoing>:
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b04      	cmp	r3, #4
 800406e:	d101      	bne.n	8004074 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <LL_ADC_INJ_StartConversion>:
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004092:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004096:	f043 0208 	orr.w	r2, r3, #8
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	609a      	str	r2, [r3, #8]
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <LL_ADC_INJ_IsConversionOngoing>:
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d101      	bne.n	80040c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_ADCEx_Calibration_Start+0x1c>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e04d      	b.n	8004188 <HAL_ADCEx_Calibration_Start+0xb8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff fde7 	bl	8003cc8 <ADC_Disable>
 80040fa:	4603      	mov	r3, r0
 80040fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d136      	bne.n	8004172 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004108:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800410c:	f023 0302 	bic.w	r3, r3, #2
 8004110:	f043 0202 	orr.w	r2, r3, #2
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6839      	ldr	r1, [r7, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff ff6f 	bl	8004002 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004124:	e014      	b.n	8004150 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	3301      	adds	r3, #1
 800412a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4a18      	ldr	r2, [pc, #96]	@ (8004190 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d90d      	bls.n	8004150 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004138:	f023 0312 	bic.w	r3, r3, #18
 800413c:	f043 0210 	orr.w	r2, r3, #16
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e01b      	b.n	8004188 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff ff6d 	bl	8004034 <LL_ADC_IsCalibrationOnGoing>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e2      	bne.n	8004126 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004164:	f023 0303 	bic.w	r3, r3, #3
 8004168:	f043 0201 	orr.w	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004170:	e005      	b.n	800417e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004176:	f043 0210 	orr.w	r2, r3, #16
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004186:	7bfb      	ldrb	r3, [r7, #15]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	0004de01 	.word	0x0004de01

08004194 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800419c:	4853      	ldr	r0, [pc, #332]	@ (80042ec <HAL_ADCEx_InjectedStart+0x158>)
 800419e:	f7ff ff0f 	bl	8003fc0 <LL_ADC_GetMultimode>
 80041a2:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff ff7e 	bl	80040aa <LL_ADC_INJ_IsConversionOngoing>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 80041b4:	2302      	movs	r3, #2
 80041b6:	e094      	b.n	80042e2 <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041c2:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ca:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d107      	bne.n	80041e8 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041dc:	f043 0220 	orr.w	r2, r3, #32
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e07c      	b.n	80042e2 <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_ADCEx_InjectedStart+0x62>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e075      	b.n	80042e2 <HAL_ADCEx_InjectedStart+0x14e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff fcdc 	bl	8003bbc <ADC_Enable>
 8004204:	4603      	mov	r3, r0
 8004206:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d164      	bne.n	80042d8 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004216:	2b00      	cmp	r3, #0
 8004218:	d006      	beq.n	8004228 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800421e:	f023 0208 	bic.w	r2, r3, #8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	661a      	str	r2, [r3, #96]	@ 0x60
 8004226:	e002      	b.n	800422e <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004232:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004236:	f023 0301 	bic.w	r3, r3, #1
 800423a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2a      	ldr	r2, [pc, #168]	@ (80042f0 <HAL_ADCEx_InjectedStart+0x15c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d002      	beq.n	8004252 <HAL_ADCEx_InjectedStart+0xbe>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	e001      	b.n	8004256 <HAL_ADCEx_InjectedStart+0xc2>
 8004252:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	4293      	cmp	r3, r2
 800425c:	d002      	beq.n	8004264 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004268:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2260      	movs	r2, #96	@ 0x60
 8004276:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1a      	ldr	r2, [pc, #104]	@ (80042f0 <HAL_ADCEx_InjectedStart+0x15c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d002      	beq.n	8004290 <HAL_ADCEx_InjectedStart+0xfc>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	e001      	b.n	8004294 <HAL_ADCEx_InjectedStart+0x100>
 8004290:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	4293      	cmp	r3, r2
 800429a:	d008      	beq.n	80042ae <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b06      	cmp	r3, #6
 80042a6:	d002      	beq.n	80042ae <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2b07      	cmp	r3, #7
 80042ac:	d10d      	bne.n	80042ca <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fe26 	bl	8003f04 <LL_ADC_INJ_GetTrigAuto>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d110      	bne.n	80042e0 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fedd 	bl	8004082 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80042c8:	e00a      	b.n	80042e0 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042d6:	e003      	b.n	80042e0 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	50000300 	.word	0x50000300
 80042f0:	50000100 	.word	0x50000100

080042f4 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042fc:	486e      	ldr	r0, [pc, #440]	@ (80044b8 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 80042fe:	f7ff fe5f 	bl	8003fc0 <LL_ADC_GetMultimode>
 8004302:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff fece 	bl	80040aa <LL_ADC_INJ_IsConversionOngoing>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
 8004316:	e0ca      	b.n	80044ae <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004322:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800432a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d107      	bne.n	8004348 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433c:	f043 0220 	orr.w	r2, r3, #32
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0b2      	b.n	80044ae <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_ADCEx_InjectedStart_IT+0x62>
 8004352:	2302      	movs	r3, #2
 8004354:	e0ab      	b.n	80044ae <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff fc2c 	bl	8003bbc <ADC_Enable>
 8004364:	4603      	mov	r3, r0
 8004366:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	2b00      	cmp	r3, #0
 800436c:	f040 809a 	bne.w	80044a4 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d006      	beq.n	800438a <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004380:	f023 0208 	bic.w	r2, r3, #8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	661a      	str	r2, [r3, #96]	@ 0x60
 8004388:	e002      	b.n	8004390 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004394:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004398:	f023 0301 	bic.w	r3, r3, #1
 800439c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a44      	ldr	r2, [pc, #272]	@ (80044bc <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d002      	beq.n	80043b4 <HAL_ADCEx_InjectedStart_IT+0xc0>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	e001      	b.n	80043b8 <HAL_ADCEx_InjectedStart_IT+0xc4>
 80043b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	4293      	cmp	r3, r2
 80043be:	d002      	beq.n	80043c6 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d105      	bne.n	80043d2 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2260      	movs	r2, #96	@ 0x60
 80043d8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d007      	beq.n	8004400 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043fe:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b08      	cmp	r3, #8
 8004406:	d110      	bne.n	800442a <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0220 	bic.w	r2, r2, #32
 8004416:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004426:	605a      	str	r2, [r3, #4]
          break;
 8004428:	e010      	b.n	800444c <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004438:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0220 	orr.w	r2, r2, #32
 8004448:	605a      	str	r2, [r3, #4]
          break;
 800444a:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1a      	ldr	r2, [pc, #104]	@ (80044bc <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d002      	beq.n	800445c <HAL_ADCEx_InjectedStart_IT+0x168>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	e001      	b.n	8004460 <HAL_ADCEx_InjectedStart_IT+0x16c>
 800445c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	4293      	cmp	r3, r2
 8004466:	d008      	beq.n	800447a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b06      	cmp	r3, #6
 8004472:	d002      	beq.n	800447a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2b07      	cmp	r3, #7
 8004478:	d10d      	bne.n	8004496 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fd40 	bl	8003f04 <LL_ADC_INJ_GetTrigAuto>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d110      	bne.n	80044ac <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fdf7 	bl	8004082 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004494:	e00a      	b.n	80044ac <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044a2:	e003      	b.n	80044ac <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	50000300 	.word	0x50000300
 80044bc:	50000100 	.word	0x50000100

080044c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b0b6      	sub	sp, #216	@ 0xd8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004530:	2b01      	cmp	r3, #1
 8004532:	d102      	bne.n	800453a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004534:	2302      	movs	r3, #2
 8004536:	f000 bcb5 	b.w	8004ea4 <HAL_ADCEx_InjectedConfigChannel+0x994>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800454e:	2b01      	cmp	r3, #1
 8004550:	d130      	bne.n	80045b4 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b09      	cmp	r3, #9
 8004558:	d179      	bne.n	800464e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d010      	beq.n	8004584 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	0e9b      	lsrs	r3, r3, #26
 8004568:	025b      	lsls	r3, r3, #9
 800456a:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004572:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004576:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004582:	e007      	b.n	8004594 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	0e9b      	lsrs	r3, r3, #26
 800458a:	025b      	lsls	r3, r3, #9
 800458c:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8004590:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800459a:	4b84      	ldr	r3, [pc, #528]	@ (80047ac <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 800459c:	4013      	ands	r3, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80045a6:	430b      	orrs	r3, r1
 80045a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80045b0:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80045b2:	e04c      	b.n	800464e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d11d      	bne.n	80045f8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6a1a      	ldr	r2, [r3, #32]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00d      	beq.n	80045ee <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045dc:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80045e0:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045ec:	e004      	b.n	80045f8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	0e9b      	lsrs	r3, r3, #26
 80045fe:	f003 021f 	and.w	r2, r3, #31
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800461c:	1e5a      	subs	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004626:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800463e:	4b5b      	ldr	r3, [pc, #364]	@ (80047ac <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004640:	4013      	ands	r3, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	430b      	orrs	r3, r1
 800464c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff fd29 	bl	80040aa <LL_ADC_INJ_IsConversionOngoing>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d124      	bne.n	80046a8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004664:	2b00      	cmp	r3, #0
 8004666:	d112      	bne.n	800468e <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004678:	055a      	lsls	r2, r3, #21
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004680:	051b      	lsls	r3, r3, #20
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	60da      	str	r2, [r3, #12]
 800468c:	e00c      	b.n	80046a8 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800469e:	055a      	lsls	r2, r3, #21
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fcd5 	bl	800405c <LL_ADC_REG_IsConversionOngoing>
 80046b2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fcf5 	bl	80040aa <LL_ADC_INJ_IsConversionOngoing>
 80046c0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f040 822e 	bne.w	8004b2a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f040 8229 	bne.w	8004b2a <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d116      	bne.n	8004716 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d108      	bne.n	8004704 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8004700:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004702:	e01f      	b.n	8004744 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004712:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004714:	e016      	b.n	8004744 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800471c:	2b01      	cmp	r3, #1
 800471e:	d109      	bne.n	8004734 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004732:	e007      	b.n	8004744 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004742:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800474a:	2b01      	cmp	r3, #1
 800474c:	d110      	bne.n	8004770 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004760:	430b      	orrs	r3, r1
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0202 	orr.w	r2, r2, #2
 800476c:	611a      	str	r2, [r3, #16]
 800476e:	e007      	b.n	8004780 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0202 	bic.w	r2, r2, #2
 800477e:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004788:	d112      	bne.n	80047b0 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2200      	movs	r2, #0
 8004794:	4619      	mov	r1, r3
 8004796:	f7ff fbc3 	bl	8003f20 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff fb9b 	bl	8003ede <LL_ADC_SetSamplingTimeCommonConfig>
 80047a8:	e011      	b.n	80047ce <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80047aa:	bf00      	nop
 80047ac:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80047bc:	461a      	mov	r2, r3
 80047be:	f7ff fbaf 	bl	8003f20 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2100      	movs	r1, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fb88 	bl	8003ede <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	08db      	lsrs	r3, r3, #3
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d022      	beq.n	8004836 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	6919      	ldr	r1, [r3, #16]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004800:	f7ff fae2 	bl	8003dc8 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6919      	ldr	r1, [r3, #16]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	461a      	mov	r2, r3
 8004812:	f7ff fb2e 	bl	8003e72 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004822:	2b01      	cmp	r3, #1
 8004824:	d102      	bne.n	800482c <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004826:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800482a:	e000      	b.n	800482e <HAL_ADCEx_InjectedConfigChannel+0x31e>
 800482c:	2300      	movs	r3, #0
 800482e:	461a      	mov	r2, r3
 8004830:	f7ff fb3a 	bl	8003ea8 <LL_ADC_SetOffsetSaturation>
 8004834:	e179      	b.n	8004b2a <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2100      	movs	r1, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff fae7 	bl	8003e10 <LL_ADC_GetOffsetChannel>
 8004842:	4603      	mov	r3, r0
 8004844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <HAL_ADCEx_InjectedConfigChannel+0x352>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff fadc 	bl	8003e10 <LL_ADC_GetOffsetChannel>
 8004858:	4603      	mov	r3, r0
 800485a:	0e9b      	lsrs	r3, r3, #26
 800485c:	f003 021f 	and.w	r2, r3, #31
 8004860:	e01e      	b.n	80048a0 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2100      	movs	r1, #0
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fad1 	bl	8003e10 <LL_ADC_GetOffsetChannel>
 800486e:	4603      	mov	r3, r0
 8004870:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004874:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004878:	fa93 f3a3 	rbit	r3, r3
 800487c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004880:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004884:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004888:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004890:	2320      	movs	r3, #32
 8004892:	e004      	b.n	800489e <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004894:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004898:	fab3 f383 	clz	r3, r3
 800489c:	b2db      	uxtb	r3, r3
 800489e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d105      	bne.n	80048b8 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	0e9b      	lsrs	r3, r3, #26
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	e018      	b.n	80048ea <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048c4:	fa93 f3a3 	rbit	r3, r3
 80048c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80048cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80048d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80048dc:	2320      	movs	r3, #32
 80048de:	e004      	b.n	80048ea <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80048e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048e4:	fab3 f383 	clz	r3, r3
 80048e8:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d106      	bne.n	80048fc <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2200      	movs	r2, #0
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff faa0 	bl	8003e3c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2101      	movs	r1, #1
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff fa84 	bl	8003e10 <LL_ADC_GetOffsetChannel>
 8004908:	4603      	mov	r3, r0
 800490a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10a      	bne.n	8004928 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2101      	movs	r1, #1
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fa79 	bl	8003e10 <LL_ADC_GetOffsetChannel>
 800491e:	4603      	mov	r3, r0
 8004920:	0e9b      	lsrs	r3, r3, #26
 8004922:	f003 021f 	and.w	r2, r3, #31
 8004926:	e01e      	b.n	8004966 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2101      	movs	r1, #1
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff fa6e 	bl	8003e10 <LL_ADC_GetOffsetChannel>
 8004934:	4603      	mov	r3, r0
 8004936:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800493e:	fa93 f3a3 	rbit	r3, r3
 8004942:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004946:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800494a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800494e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004956:	2320      	movs	r3, #32
 8004958:	e004      	b.n	8004964 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 800495a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800495e:	fab3 f383 	clz	r3, r3
 8004962:	b2db      	uxtb	r3, r3
 8004964:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800496e:	2b00      	cmp	r3, #0
 8004970:	d105      	bne.n	800497e <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	0e9b      	lsrs	r3, r3, #26
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	e018      	b.n	80049b0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004986:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800498a:	fa93 f3a3 	rbit	r3, r3
 800498e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004992:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004996:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800499a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80049a2:	2320      	movs	r3, #32
 80049a4:	e004      	b.n	80049b0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80049a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049aa:	fab3 f383 	clz	r3, r3
 80049ae:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d106      	bne.n	80049c2 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2200      	movs	r2, #0
 80049ba:	2101      	movs	r1, #1
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff fa3d 	bl	8003e3c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2102      	movs	r1, #2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fa21 	bl	8003e10 <LL_ADC_GetOffsetChannel>
 80049ce:	4603      	mov	r3, r0
 80049d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10a      	bne.n	80049ee <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2102      	movs	r1, #2
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff fa16 	bl	8003e10 <LL_ADC_GetOffsetChannel>
 80049e4:	4603      	mov	r3, r0
 80049e6:	0e9b      	lsrs	r3, r3, #26
 80049e8:	f003 021f 	and.w	r2, r3, #31
 80049ec:	e01e      	b.n	8004a2c <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2102      	movs	r1, #2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff fa0b 	bl	8003e10 <LL_ADC_GetOffsetChannel>
 80049fa:	4603      	mov	r3, r0
 80049fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a04:	fa93 f3a3 	rbit	r3, r3
 8004a08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004a1c:	2320      	movs	r3, #32
 8004a1e:	e004      	b.n	8004a2a <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a24:	fab3 f383 	clz	r3, r3
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d105      	bne.n	8004a44 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	0e9b      	lsrs	r3, r3, #26
 8004a3e:	f003 031f 	and.w	r3, r3, #31
 8004a42:	e014      	b.n	8004a6e <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a4c:	fa93 f3a3 	rbit	r3, r3
 8004a50:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004a52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004a60:	2320      	movs	r3, #32
 8004a62:	e004      	b.n	8004a6e <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004a64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a68:	fab3 f383 	clz	r3, r3
 8004a6c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d106      	bne.n	8004a80 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2200      	movs	r2, #0
 8004a78:	2102      	movs	r1, #2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff f9de 	bl	8003e3c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2103      	movs	r1, #3
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff f9c2 	bl	8003e10 <LL_ADC_GetOffsetChannel>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2103      	movs	r1, #3
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff f9b7 	bl	8003e10 <LL_ADC_GetOffsetChannel>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	0e9b      	lsrs	r3, r3, #26
 8004aa6:	f003 021f 	and.w	r2, r3, #31
 8004aaa:	e017      	b.n	8004adc <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2103      	movs	r1, #3
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff f9ac 	bl	8003e10 <LL_ADC_GetOffsetChannel>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004abe:	fa93 f3a3 	rbit	r3, r3
 8004ac2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ac6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004ac8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004ace:	2320      	movs	r3, #32
 8004ad0:	e003      	b.n	8004ada <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004ad2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ad4:	fab3 f383 	clz	r3, r3
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d105      	bne.n	8004af4 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	0e9b      	lsrs	r3, r3, #26
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	e011      	b.n	8004b18 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004afc:	fa93 f3a3 	rbit	r3, r3
 8004b00:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004b02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b04:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004b06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004b0c:	2320      	movs	r3, #32
 8004b0e:	e003      	b.n	8004b18 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004b10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b12:	fab3 f383 	clz	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d106      	bne.n	8004b2a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2200      	movs	r2, #0
 8004b22:	2103      	movs	r1, #3
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff f989 	bl	8003e3c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff fa54 	bl	8003fdc <LL_ADC_IsEnabled>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f040 8140 	bne.w	8004dbc <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	6819      	ldr	r1, [r3, #0]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	f7ff fa15 	bl	8003f78 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	4a8f      	ldr	r2, [pc, #572]	@ (8004d90 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	f040 8131 	bne.w	8004dbc <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	0e9b      	lsrs	r3, r3, #26
 8004b70:	3301      	adds	r3, #1
 8004b72:	f003 031f 	and.w	r3, r3, #31
 8004b76:	2b09      	cmp	r3, #9
 8004b78:	bf94      	ite	ls
 8004b7a:	2301      	movls	r3, #1
 8004b7c:	2300      	movhi	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	e019      	b.n	8004bb6 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b8a:	fa93 f3a3 	rbit	r3, r3
 8004b8e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004b94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004b9a:	2320      	movs	r3, #32
 8004b9c:	e003      	b.n	8004ba6 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ba0:	fab3 f383 	clz	r3, r3
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	f003 031f 	and.w	r3, r3, #31
 8004bac:	2b09      	cmp	r3, #9
 8004bae:	bf94      	ite	ls
 8004bb0:	2301      	movls	r3, #1
 8004bb2:	2300      	movhi	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d079      	beq.n	8004cae <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d107      	bne.n	8004bd6 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	0e9b      	lsrs	r3, r3, #26
 8004bcc:	3301      	adds	r3, #1
 8004bce:	069b      	lsls	r3, r3, #26
 8004bd0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bd4:	e015      	b.n	8004c02 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bde:	fa93 f3a3 	rbit	r3, r3
 8004be2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004be6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004bee:	2320      	movs	r3, #32
 8004bf0:	e003      	b.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004bf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bf4:	fab3 f383 	clz	r3, r3
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	069b      	lsls	r3, r3, #26
 8004bfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	0e9b      	lsrs	r3, r3, #26
 8004c14:	3301      	adds	r3, #1
 8004c16:	f003 031f 	and.w	r3, r3, #31
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c20:	e017      	b.n	8004c52 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c2a:	fa93 f3a3 	rbit	r3, r3
 8004c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c32:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004c3a:	2320      	movs	r3, #32
 8004c3c:	e003      	b.n	8004c46 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004c3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c40:	fab3 f383 	clz	r3, r3
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	3301      	adds	r3, #1
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c52:	ea42 0103 	orr.w	r1, r2, r3
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10a      	bne.n	8004c78 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	0e9b      	lsrs	r3, r3, #26
 8004c68:	3301      	adds	r3, #1
 8004c6a:	f003 021f 	and.w	r2, r3, #31
 8004c6e:	4613      	mov	r3, r2
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	4413      	add	r3, r2
 8004c74:	051b      	lsls	r3, r3, #20
 8004c76:	e018      	b.n	8004caa <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c80:	fa93 f3a3 	rbit	r3, r3
 8004c84:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c88:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004c90:	2320      	movs	r3, #32
 8004c92:	e003      	b.n	8004c9c <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c96:	fab3 f383 	clz	r3, r3
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	f003 021f 	and.w	r2, r3, #31
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	4413      	add	r3, r2
 8004ca8:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004caa:	430b      	orrs	r3, r1
 8004cac:	e081      	b.n	8004db2 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d107      	bne.n	8004cca <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	0e9b      	lsrs	r3, r3, #26
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	069b      	lsls	r3, r3, #26
 8004cc4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cc8:	e015      	b.n	8004cf6 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd2:	fa93 f3a3 	rbit	r3, r3
 8004cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	e003      	b.n	8004cee <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce8:	fab3 f383 	clz	r3, r3
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	069b      	lsls	r3, r3, #26
 8004cf2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d109      	bne.n	8004d16 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	0e9b      	lsrs	r3, r3, #26
 8004d08:	3301      	adds	r3, #1
 8004d0a:	f003 031f 	and.w	r3, r3, #31
 8004d0e:	2101      	movs	r1, #1
 8004d10:	fa01 f303 	lsl.w	r3, r1, r3
 8004d14:	e017      	b.n	8004d46 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	fa93 f3a3 	rbit	r3, r3
 8004d22:	61bb      	str	r3, [r7, #24]
  return result;
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004d2e:	2320      	movs	r3, #32
 8004d30:	e003      	b.n	8004d3a <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	fab3 f383 	clz	r3, r3
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	2101      	movs	r1, #1
 8004d42:	fa01 f303 	lsl.w	r3, r1, r3
 8004d46:	ea42 0103 	orr.w	r1, r2, r3
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10d      	bne.n	8004d72 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	0e9b      	lsrs	r3, r3, #26
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	f003 021f 	and.w	r2, r3, #31
 8004d62:	4613      	mov	r3, r2
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	4413      	add	r3, r2
 8004d68:	3b1e      	subs	r3, #30
 8004d6a:	051b      	lsls	r3, r3, #20
 8004d6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d70:	e01e      	b.n	8004db0 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	fa93 f3a3 	rbit	r3, r3
 8004d7e:	60fb      	str	r3, [r7, #12]
  return result;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004d8a:	2320      	movs	r3, #32
 8004d8c:	e006      	b.n	8004d9c <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004d8e:	bf00      	nop
 8004d90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	fab3 f383 	clz	r3, r3
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	f003 021f 	and.w	r2, r3, #31
 8004da2:	4613      	mov	r3, r2
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	4413      	add	r3, r2
 8004da8:	3b1e      	subs	r3, #30
 8004daa:	051b      	lsls	r3, r3, #20
 8004dac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004db0:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004db6:	4619      	mov	r1, r3
 8004db8:	f7ff f8b2 	bl	8003f20 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4b3a      	ldr	r3, [pc, #232]	@ (8004eac <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d067      	beq.n	8004e98 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004dc8:	4839      	ldr	r0, [pc, #228]	@ (8004eb0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004dca:	f7fe ffef 	bl	8003dac <LL_ADC_GetCommonPathInternalCh>
 8004dce:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a37      	ldr	r2, [pc, #220]	@ (8004eb4 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d004      	beq.n	8004de6 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a35      	ldr	r2, [pc, #212]	@ (8004eb8 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d127      	bne.n	8004e36 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004de6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004dea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d121      	bne.n	8004e36 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dfa:	d14d      	bne.n	8004e98 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004dfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e04:	4619      	mov	r1, r3
 8004e06:	482a      	ldr	r0, [pc, #168]	@ (8004eb0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004e08:	f7fe ffbd 	bl	8003d86 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ebc <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	099b      	lsrs	r3, r3, #6
 8004e12:	4a2b      	ldr	r2, [pc, #172]	@ (8004ec0 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004e14:	fba2 2303 	umull	r2, r3, r2, r3
 8004e18:	099a      	lsrs	r2, r3, #6
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004e24:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004e26:	e002      	b.n	8004e2e <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f9      	bne.n	8004e28 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e34:	e030      	b.n	8004e98 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a22      	ldr	r2, [pc, #136]	@ (8004ec4 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d113      	bne.n	8004e68 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10d      	bne.n	8004e68 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec8 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d020      	beq.n	8004e98 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4813      	ldr	r0, [pc, #76]	@ (8004eb0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004e62:	f7fe ff90 	bl	8003d86 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e66:	e017      	b.n	8004e98 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a17      	ldr	r2, [pc, #92]	@ (8004ecc <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d112      	bne.n	8004e98 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10c      	bne.n	8004e98 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a11      	ldr	r2, [pc, #68]	@ (8004ec8 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d007      	beq.n	8004e98 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e90:	4619      	mov	r1, r3
 8004e92:	4807      	ldr	r0, [pc, #28]	@ (8004eb0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004e94:	f7fe ff77 	bl	8003d86 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004ea0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	37d8      	adds	r7, #216	@ 0xd8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	80080000 	.word	0x80080000
 8004eb0:	50000300 	.word	0x50000300
 8004eb4:	c3210000 	.word	0xc3210000
 8004eb8:	90c00010 	.word	0x90c00010
 8004ebc:	20000000 	.word	0x20000000
 8004ec0:	053e2d63 	.word	0x053e2d63
 8004ec4:	c7520000 	.word	0xc7520000
 8004ec8:	50000100 	.word	0x50000100
 8004ecc:	cb840000 	.word	0xcb840000

08004ed0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004ed0:	b590      	push	{r4, r7, lr}
 8004ed2:	b0a1      	sub	sp, #132	@ 0x84
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d101      	bne.n	8004eee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e08b      	b.n	8005006 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004efa:	2300      	movs	r3, #0
 8004efc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f06:	d102      	bne.n	8004f0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f08:	4b41      	ldr	r3, [pc, #260]	@ (8005010 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	e001      	b.n	8004f12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10b      	bne.n	8004f30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f1c:	f043 0220 	orr.w	r2, r3, #32
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e06a      	b.n	8005006 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff f892 	bl	800405c <LL_ADC_REG_IsConversionOngoing>
 8004f38:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff f88c 	bl	800405c <LL_ADC_REG_IsConversionOngoing>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d14c      	bne.n	8004fe4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004f4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d149      	bne.n	8004fe4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f50:	4b30      	ldr	r3, [pc, #192]	@ (8005014 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004f52:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d028      	beq.n	8004fae <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	6859      	ldr	r1, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f6e:	035b      	lsls	r3, r3, #13
 8004f70:	430b      	orrs	r3, r1
 8004f72:	431a      	orrs	r2, r3
 8004f74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f76:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f78:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004f7c:	f7ff f82e 	bl	8003fdc <LL_ADC_IsEnabled>
 8004f80:	4604      	mov	r4, r0
 8004f82:	4823      	ldr	r0, [pc, #140]	@ (8005010 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f84:	f7ff f82a 	bl	8003fdc <LL_ADC_IsEnabled>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	4323      	orrs	r3, r4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d133      	bne.n	8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004f98:	f023 030f 	bic.w	r3, r3, #15
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	6811      	ldr	r1, [r2, #0]
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	6892      	ldr	r2, [r2, #8]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004faa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fac:	e024      	b.n	8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004fae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fb8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fba:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004fbe:	f7ff f80d 	bl	8003fdc <LL_ADC_IsEnabled>
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	4812      	ldr	r0, [pc, #72]	@ (8005010 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004fc6:	f7ff f809 	bl	8003fdc <LL_ADC_IsEnabled>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4323      	orrs	r3, r4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d112      	bne.n	8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004fd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004fda:	f023 030f 	bic.w	r3, r3, #15
 8004fde:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004fe0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fe2:	e009      	b.n	8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe8:	f043 0220 	orr.w	r2, r3, #32
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004ff6:	e000      	b.n	8004ffa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ff8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005002:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005006:	4618      	mov	r0, r3
 8005008:	3784      	adds	r7, #132	@ 0x84
 800500a:	46bd      	mov	sp, r7
 800500c:	bd90      	pop	{r4, r7, pc}
 800500e:	bf00      	nop
 8005010:	50000100 	.word	0x50000100
 8005014:	50000300 	.word	0x50000300

08005018 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005020:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <LL_EXTI_EnableIT_0_31+0x20>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	4904      	ldr	r1, [pc, #16]	@ (8005038 <LL_EXTI_EnableIT_0_31+0x20>)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4313      	orrs	r3, r2
 800502a:	600b      	str	r3, [r1, #0]
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40010400 	.word	0x40010400

0800503c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005044:	4b06      	ldr	r3, [pc, #24]	@ (8005060 <LL_EXTI_DisableIT_0_31+0x24>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	43db      	mvns	r3, r3
 800504c:	4904      	ldr	r1, [pc, #16]	@ (8005060 <LL_EXTI_DisableIT_0_31+0x24>)
 800504e:	4013      	ands	r3, r2
 8005050:	600b      	str	r3, [r1, #0]
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40010400 	.word	0x40010400

08005064 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800506c:	4b05      	ldr	r3, [pc, #20]	@ (8005084 <LL_EXTI_EnableEvent_0_31+0x20>)
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	4904      	ldr	r1, [pc, #16]	@ (8005084 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4313      	orrs	r3, r2
 8005076:	604b      	str	r3, [r1, #4]

}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	40010400 	.word	0x40010400

08005088 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005090:	4b06      	ldr	r3, [pc, #24]	@ (80050ac <LL_EXTI_DisableEvent_0_31+0x24>)
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	43db      	mvns	r3, r3
 8005098:	4904      	ldr	r1, [pc, #16]	@ (80050ac <LL_EXTI_DisableEvent_0_31+0x24>)
 800509a:	4013      	ands	r3, r2
 800509c:	604b      	str	r3, [r1, #4]
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40010400 	.word	0x40010400

080050b0 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80050b8:	4b05      	ldr	r3, [pc, #20]	@ (80050d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	4904      	ldr	r1, [pc, #16]	@ (80050d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	608b      	str	r3, [r1, #8]

}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	40010400 	.word	0x40010400

080050d4 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80050dc:	4b06      	ldr	r3, [pc, #24]	@ (80050f8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	43db      	mvns	r3, r3
 80050e4:	4904      	ldr	r1, [pc, #16]	@ (80050f8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	608b      	str	r3, [r1, #8]

}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40010400 	.word	0x40010400

080050fc <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005104:	4b05      	ldr	r3, [pc, #20]	@ (800511c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	4904      	ldr	r1, [pc, #16]	@ (800511c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4313      	orrs	r3, r2
 800510e:	60cb      	str	r3, [r1, #12]
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	40010400 	.word	0x40010400

08005120 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005128:	4b06      	ldr	r3, [pc, #24]	@ (8005144 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	43db      	mvns	r3, r3
 8005130:	4904      	ldr	r1, [pc, #16]	@ (8005144 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005132:	4013      	ands	r3, r2
 8005134:	60cb      	str	r3, [r1, #12]
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40010400 	.word	0x40010400

08005148 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8005150:	4b07      	ldr	r3, [pc, #28]	@ (8005170 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4013      	ands	r3, r2
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	429a      	cmp	r2, r3
 800515c:	d101      	bne.n	8005162 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	40010400 	.word	0x40010400

08005174 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800517c:	4a04      	ldr	r2, [pc, #16]	@ (8005190 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6153      	str	r3, [r2, #20]
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40010400 	.word	0x40010400

08005194 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d102      	bne.n	80051b0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	77fb      	strb	r3, [r7, #31]
 80051ae:	e0bc      	b.n	800532a <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051be:	d102      	bne.n	80051c6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	77fb      	strb	r3, [r7, #31]
 80051c4:	e0b1      	b.n	800532a <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	7f5b      	ldrb	r3, [r3, #29]
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d108      	bne.n	80051e2 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7fc f971 	bl	80014c4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051ec:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4b48      	ldr	r3, [pc, #288]	@ (8005334 <HAL_COMP_Init+0x1a0>)
 8005214:	4013      	ands	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	6979      	ldr	r1, [r7, #20]
 800521c:	430b      	orrs	r3, r1
 800521e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d016      	beq.n	800525c <HAL_COMP_Init+0xc8>
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d113      	bne.n	800525c <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005234:	4b40      	ldr	r3, [pc, #256]	@ (8005338 <HAL_COMP_Init+0x1a4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	099b      	lsrs	r3, r3, #6
 800523a:	4a40      	ldr	r2, [pc, #256]	@ (800533c <HAL_COMP_Init+0x1a8>)
 800523c:	fba2 2303 	umull	r2, r3, r2, r3
 8005240:	099b      	lsrs	r3, r3, #6
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800524e:	e002      	b.n	8005256 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3b01      	subs	r3, #1
 8005254:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f9      	bne.n	8005250 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a37      	ldr	r2, [pc, #220]	@ (8005340 <HAL_COMP_Init+0x1ac>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d012      	beq.n	800528c <HAL_COMP_Init+0xf8>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a36      	ldr	r2, [pc, #216]	@ (8005344 <HAL_COMP_Init+0x1b0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00a      	beq.n	8005286 <HAL_COMP_Init+0xf2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a34      	ldr	r2, [pc, #208]	@ (8005348 <HAL_COMP_Init+0x1b4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d102      	bne.n	8005280 <HAL_COMP_Init+0xec>
 800527a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800527e:	e007      	b.n	8005290 <HAL_COMP_Init+0xfc>
 8005280:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005284:	e004      	b.n	8005290 <HAL_COMP_Init+0xfc>
 8005286:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800528a:	e001      	b.n	8005290 <HAL_COMP_Init+0xfc>
 800528c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005290:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d037      	beq.n	800530e <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80052aa:	6938      	ldr	r0, [r7, #16]
 80052ac:	f7ff ff00 	bl	80050b0 <LL_EXTI_EnableRisingTrig_0_31>
 80052b0:	e002      	b.n	80052b8 <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80052b2:	6938      	ldr	r0, [r7, #16]
 80052b4:	f7ff ff0e 	bl	80050d4 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80052c4:	6938      	ldr	r0, [r7, #16]
 80052c6:	f7ff ff19 	bl	80050fc <LL_EXTI_EnableFallingTrig_0_31>
 80052ca:	e002      	b.n	80052d2 <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80052cc:	6938      	ldr	r0, [r7, #16]
 80052ce:	f7ff ff27 	bl	8005120 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 80052d2:	6938      	ldr	r0, [r7, #16]
 80052d4:	f7ff ff4e 	bl	8005174 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 80052e4:	6938      	ldr	r0, [r7, #16]
 80052e6:	f7ff febd 	bl	8005064 <LL_EXTI_EnableEvent_0_31>
 80052ea:	e002      	b.n	80052f2 <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 80052ec:	6938      	ldr	r0, [r7, #16]
 80052ee:	f7ff fecb 	bl	8005088 <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 80052fe:	6938      	ldr	r0, [r7, #16]
 8005300:	f7ff fe8a 	bl	8005018 <LL_EXTI_EnableIT_0_31>
 8005304:	e009      	b.n	800531a <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 8005306:	6938      	ldr	r0, [r7, #16]
 8005308:	f7ff fe98 	bl	800503c <LL_EXTI_DisableIT_0_31>
 800530c:	e005      	b.n	800531a <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 800530e:	6938      	ldr	r0, [r7, #16]
 8005310:	f7ff feba 	bl	8005088 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8005314:	6938      	ldr	r0, [r7, #16]
 8005316:	f7ff fe91 	bl	800503c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	7f5b      	ldrb	r3, [r3, #29]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800532a:	7ffb      	ldrb	r3, [r7, #31]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3720      	adds	r7, #32
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	ff007e0f 	.word	0xff007e0f
 8005338:	20000000 	.word	0x20000000
 800533c:	053e2d63 	.word	0x053e2d63
 8005340:	40010200 	.word	0x40010200
 8005344:	40010204 	.word	0x40010204
 8005348:	40010208 	.word	0x40010208

0800534c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005354:	2300      	movs	r3, #0
 8005356:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005358:	2300      	movs	r3, #0
 800535a:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d102      	bne.n	8005368 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
 8005366:	e02e      	b.n	80053c6 <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005372:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005376:	d102      	bne.n	800537e <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]
 800537c:	e023      	b.n	80053c6 <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	7f5b      	ldrb	r3, [r3, #29]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	d11c      	bne.n	80053c2 <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 800539e:	4b0d      	ldr	r3, [pc, #52]	@ (80053d4 <HAL_COMP_Start+0x88>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a0d      	ldr	r2, [pc, #52]	@ (80053d8 <HAL_COMP_Start+0x8c>)
 80053a4:	fba2 2303 	umull	r2, r3, r2, r3
 80053a8:	0cda      	lsrs	r2, r3, #19
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80053b2:	e002      	b.n	80053ba <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1f9      	bne.n	80053b4 <HAL_COMP_Start+0x68>
 80053c0:	e001      	b.n	80053c6 <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	20000000 	.word	0x20000000
 80053d8:	431bde83 	.word	0x431bde83

080053dc <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a17      	ldr	r2, [pc, #92]	@ (8005448 <HAL_COMP_IRQHandler+0x6c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d012      	beq.n	8005414 <HAL_COMP_IRQHandler+0x38>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a16      	ldr	r2, [pc, #88]	@ (800544c <HAL_COMP_IRQHandler+0x70>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00a      	beq.n	800540e <HAL_COMP_IRQHandler+0x32>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a14      	ldr	r2, [pc, #80]	@ (8005450 <HAL_COMP_IRQHandler+0x74>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d102      	bne.n	8005408 <HAL_COMP_IRQHandler+0x2c>
 8005402:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005406:	e007      	b.n	8005418 <HAL_COMP_IRQHandler+0x3c>
 8005408:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800540c:	e004      	b.n	8005418 <HAL_COMP_IRQHandler+0x3c>
 800540e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005412:	e001      	b.n	8005418 <HAL_COMP_IRQHandler+0x3c>
 8005414:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005418:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800541e:	68b8      	ldr	r0, [r7, #8]
 8005420:	f7ff fe92 	bl	8005148 <LL_EXTI_IsActiveFlag_0_31>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 800542a:	2301      	movs	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_COMP_IRQHandler+0x64>
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
    }
#else
    LL_EXTI_ClearFlag_0_31(exti_line);
 8005434:	68b8      	ldr	r0, [r7, #8]
 8005436:	f7ff fe9d 	bl	8005174 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f80a 	bl	8005454 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40010200 	.word	0x40010200
 800544c:	40010204 	.word	0x40010204
 8005450:	40010208 	.word	0x40010208

08005454 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005478:	4b0c      	ldr	r3, [pc, #48]	@ (80054ac <__NVIC_SetPriorityGrouping+0x44>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005484:	4013      	ands	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005490:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800549a:	4a04      	ldr	r2, [pc, #16]	@ (80054ac <__NVIC_SetPriorityGrouping+0x44>)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	60d3      	str	r3, [r2, #12]
}
 80054a0:	bf00      	nop
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	e000ed00 	.word	0xe000ed00

080054b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054b4:	4b04      	ldr	r3, [pc, #16]	@ (80054c8 <__NVIC_GetPriorityGrouping+0x18>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	0a1b      	lsrs	r3, r3, #8
 80054ba:	f003 0307 	and.w	r3, r3, #7
}
 80054be:	4618      	mov	r0, r3
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	e000ed00 	.word	0xe000ed00

080054cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	db0b      	blt.n	80054f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	f003 021f 	and.w	r2, r3, #31
 80054e4:	4907      	ldr	r1, [pc, #28]	@ (8005504 <__NVIC_EnableIRQ+0x38>)
 80054e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	2001      	movs	r0, #1
 80054ee:	fa00 f202 	lsl.w	r2, r0, r2
 80054f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	e000e100 	.word	0xe000e100

08005508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	6039      	str	r1, [r7, #0]
 8005512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005518:	2b00      	cmp	r3, #0
 800551a:	db0a      	blt.n	8005532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	b2da      	uxtb	r2, r3
 8005520:	490c      	ldr	r1, [pc, #48]	@ (8005554 <__NVIC_SetPriority+0x4c>)
 8005522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005526:	0112      	lsls	r2, r2, #4
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	440b      	add	r3, r1
 800552c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005530:	e00a      	b.n	8005548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	b2da      	uxtb	r2, r3
 8005536:	4908      	ldr	r1, [pc, #32]	@ (8005558 <__NVIC_SetPriority+0x50>)
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	3b04      	subs	r3, #4
 8005540:	0112      	lsls	r2, r2, #4
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	440b      	add	r3, r1
 8005546:	761a      	strb	r2, [r3, #24]
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	e000e100 	.word	0xe000e100
 8005558:	e000ed00 	.word	0xe000ed00

0800555c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800555c:	b480      	push	{r7}
 800555e:	b089      	sub	sp, #36	@ 0x24
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	f1c3 0307 	rsb	r3, r3, #7
 8005576:	2b04      	cmp	r3, #4
 8005578:	bf28      	it	cs
 800557a:	2304      	movcs	r3, #4
 800557c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	3304      	adds	r3, #4
 8005582:	2b06      	cmp	r3, #6
 8005584:	d902      	bls.n	800558c <NVIC_EncodePriority+0x30>
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	3b03      	subs	r3, #3
 800558a:	e000      	b.n	800558e <NVIC_EncodePriority+0x32>
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005590:	f04f 32ff 	mov.w	r2, #4294967295
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	43da      	mvns	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	401a      	ands	r2, r3
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055a4:	f04f 31ff 	mov.w	r1, #4294967295
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	fa01 f303 	lsl.w	r3, r1, r3
 80055ae:	43d9      	mvns	r1, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055b4:	4313      	orrs	r3, r2
         );
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3724      	adds	r7, #36	@ 0x24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
	...

080055c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055d4:	d301      	bcc.n	80055da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055d6:	2301      	movs	r3, #1
 80055d8:	e00f      	b.n	80055fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055da:	4a0a      	ldr	r2, [pc, #40]	@ (8005604 <SysTick_Config+0x40>)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3b01      	subs	r3, #1
 80055e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055e2:	210f      	movs	r1, #15
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295
 80055e8:	f7ff ff8e 	bl	8005508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055ec:	4b05      	ldr	r3, [pc, #20]	@ (8005604 <SysTick_Config+0x40>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055f2:	4b04      	ldr	r3, [pc, #16]	@ (8005604 <SysTick_Config+0x40>)
 80055f4:	2207      	movs	r2, #7
 80055f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	e000e010 	.word	0xe000e010

08005608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff ff29 	bl	8005468 <__NVIC_SetPriorityGrouping>
}
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b086      	sub	sp, #24
 8005622:	af00      	add	r7, sp, #0
 8005624:	4603      	mov	r3, r0
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
 800562a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800562c:	f7ff ff40 	bl	80054b0 <__NVIC_GetPriorityGrouping>
 8005630:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	6978      	ldr	r0, [r7, #20]
 8005638:	f7ff ff90 	bl	800555c <NVIC_EncodePriority>
 800563c:	4602      	mov	r2, r0
 800563e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005642:	4611      	mov	r1, r2
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff ff5f 	bl	8005508 <__NVIC_SetPriority>
}
 800564a:	bf00      	nop
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b082      	sub	sp, #8
 8005656:	af00      	add	r7, sp, #0
 8005658:	4603      	mov	r3, r0
 800565a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800565c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff ff33 	bl	80054cc <__NVIC_EnableIRQ>
}
 8005666:	bf00      	nop
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b082      	sub	sp, #8
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff ffa4 	bl	80055c4 <SysTick_Config>
 800567c:	4603      	mov	r3, r0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e014      	b.n	80056c2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	791b      	ldrb	r3, [r3, #4]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d105      	bne.n	80056ae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7fb ff81 	bl	80015b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2202      	movs	r2, #2
 80056b2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e056      	b.n	800578e <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	795b      	ldrb	r3, [r3, #5]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d101      	bne.n	80056ec <HAL_DAC_Start+0x20>
 80056e8:	2302      	movs	r3, #2
 80056ea:	e050      	b.n	800578e <HAL_DAC_Start+0xc2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2202      	movs	r2, #2
 80056f6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6819      	ldr	r1, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2201      	movs	r2, #1
 8005706:	409a      	lsls	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005710:	4b22      	ldr	r3, [pc, #136]	@ (800579c <HAL_DAC_Start+0xd0>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	099b      	lsrs	r3, r3, #6
 8005716:	4a22      	ldr	r2, [pc, #136]	@ (80057a0 <HAL_DAC_Start+0xd4>)
 8005718:	fba2 2303 	umull	r2, r3, r2, r3
 800571c:	099b      	lsrs	r3, r3, #6
 800571e:	3301      	adds	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005722:	e002      	b.n	800572a <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3b01      	subs	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f9      	bne.n	8005724 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10f      	bne.n	8005756 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005740:	2b02      	cmp	r3, #2
 8005742:	d11d      	bne.n	8005780 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	605a      	str	r2, [r3, #4]
 8005754:	e014      	b.n	8005780 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	f003 0310 	and.w	r3, r3, #16
 8005766:	2102      	movs	r1, #2
 8005768:	fa01 f303 	lsl.w	r3, r1, r3
 800576c:	429a      	cmp	r2, r3
 800576e:	d107      	bne.n	8005780 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0202 	orr.w	r2, r2, #2
 800577e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	20000000 	.word	0x20000000
 80057a0:	053e2d63 	.word	0x053e2d63

080057a4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
 80057b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e018      	b.n	80057f2 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d105      	bne.n	80057de <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4413      	add	r3, r2
 80057d8:	3308      	adds	r3, #8
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	e004      	b.n	80057e8 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4413      	add	r3, r2
 80057e4:	3314      	adds	r3, #20
 80057e6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	461a      	mov	r2, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
	...

08005800 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08a      	sub	sp, #40	@ 0x28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <HAL_DAC_ConfigChannel+0x1c>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e19e      	b.n	8005b5e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	795b      	ldrb	r3, [r3, #5]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_DAC_ConfigChannel+0x2c>
 8005828:	2302      	movs	r3, #2
 800582a:	e198      	b.n	8005b5e <HAL_DAC_ConfigChannel+0x35e>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2202      	movs	r2, #2
 8005836:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b04      	cmp	r3, #4
 800583e:	d17a      	bne.n	8005936 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005840:	f7fc ffb2 	bl	80027a8 <HAL_GetTick>
 8005844:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d13d      	bne.n	80058c8 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800584c:	e018      	b.n	8005880 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800584e:	f7fc ffab 	bl	80027a8 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b01      	cmp	r3, #1
 800585a:	d911      	bls.n	8005880 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005862:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f043 0208 	orr.w	r2, r3, #8
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2203      	movs	r2, #3
 800587a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e16e      	b.n	8005b5e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005886:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1df      	bne.n	800584e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005896:	641a      	str	r2, [r3, #64]	@ 0x40
 8005898:	e020      	b.n	80058dc <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800589a:	f7fc ff85 	bl	80027a8 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d90f      	bls.n	80058c8 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	da0a      	bge.n	80058c8 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f043 0208 	orr.w	r2, r3, #8
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2203      	movs	r2, #3
 80058c2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e14a      	b.n	8005b5e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	dbe3      	blt.n	800589a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058da:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f003 0310 	and.w	r3, r3, #16
 80058e8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80058ec:	fa01 f303 	lsl.w	r3, r1, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	ea02 0103 	and.w	r1, r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	409a      	lsls	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f003 0310 	and.w	r3, r3, #16
 8005916:	21ff      	movs	r1, #255	@ 0xff
 8005918:	fa01 f303 	lsl.w	r3, r1, r3
 800591c:	43db      	mvns	r3, r3
 800591e:	ea02 0103 	and.w	r1, r2, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	409a      	lsls	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d11d      	bne.n	800597a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005944:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f003 0310 	and.w	r3, r3, #16
 800594c:	221f      	movs	r2, #31
 800594e:	fa02 f303 	lsl.w	r3, r2, r3
 8005952:	43db      	mvns	r3, r3
 8005954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005956:	4013      	ands	r3, r2
 8005958:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f003 0310 	and.w	r3, r3, #16
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800596e:	4313      	orrs	r3, r2
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005978:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005980:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f003 0310 	and.w	r3, r3, #16
 8005988:	2207      	movs	r2, #7
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43db      	mvns	r3, r3
 8005990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005992:	4013      	ands	r3, r2
 8005994:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d102      	bne.n	80059a4 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800599e:	2300      	movs	r3, #0
 80059a0:	623b      	str	r3, [r7, #32]
 80059a2:	e00f      	b.n	80059c4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d102      	bne.n	80059b2 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80059ac:	2301      	movs	r3, #1
 80059ae:	623b      	str	r3, [r7, #32]
 80059b0:	e008      	b.n	80059c4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d102      	bne.n	80059c0 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80059ba:	2301      	movs	r3, #1
 80059bc:	623b      	str	r3, [r7, #32]
 80059be:	e001      	b.n	80059c4 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80059c0:	2300      	movs	r3, #0
 80059c2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	6a3a      	ldr	r2, [r7, #32]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	43db      	mvns	r3, r3
 80059e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e6:	4013      	ands	r3, r2
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	791b      	ldrb	r3, [r3, #4]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d102      	bne.n	80059f8 <HAL_DAC_ConfigChannel+0x1f8>
 80059f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059f6:	e000      	b.n	80059fa <HAL_DAC_ConfigChannel+0x1fa>
 80059f8:	2300      	movs	r3, #0
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a12:	4013      	ands	r3, r2
 8005a14:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	795b      	ldrb	r3, [r3, #5]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d102      	bne.n	8005a24 <HAL_DAC_ConfigChannel+0x224>
 8005a1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a22:	e000      	b.n	8005a26 <HAL_DAC_ConfigChannel+0x226>
 8005a24:	2300      	movs	r3, #0
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005a32:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d114      	bne.n	8005a66 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005a3c:	f001 ff7c 	bl	8007938 <HAL_RCC_GetHCLKFreq>
 8005a40:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	4a48      	ldr	r2, [pc, #288]	@ (8005b68 <HAL_DAC_ConfigChannel+0x368>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d904      	bls.n	8005a54 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a52:	e00f      	b.n	8005a74 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4a45      	ldr	r2, [pc, #276]	@ (8005b6c <HAL_DAC_ConfigChannel+0x36c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d90a      	bls.n	8005a72 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a64:	e006      	b.n	8005a74 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a70:	e000      	b.n	8005a74 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005a72:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f003 0310 	and.w	r3, r3, #16
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a82:	4313      	orrs	r3, r2
 8005a84:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6819      	ldr	r1, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa2:	43da      	mvns	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	400a      	ands	r2, r1
 8005aaa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f003 0310 	and.w	r3, r3, #16
 8005aba:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f003 0310 	and.w	r3, r3, #16
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	22c0      	movs	r2, #192	@ 0xc0
 8005af8:	fa02 f303 	lsl.w	r3, r2, r3
 8005afc:	43da      	mvns	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	400a      	ands	r2, r1
 8005b04:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	f003 030f 	and.w	r3, r3, #15
 8005b10:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	089b      	lsrs	r3, r3, #2
 8005b18:	021b      	lsls	r3, r3, #8
 8005b1a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005b34:	fa01 f303 	lsl.w	r3, r1, r3
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	ea02 0103 	and.w	r1, r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	409a      	lsls	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005b5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3728      	adds	r7, #40	@ 0x28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	09896800 	.word	0x09896800
 8005b6c:	04c4b400 	.word	0x04c4b400

08005b70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e08d      	b.n	8005c9e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	4b47      	ldr	r3, [pc, #284]	@ (8005ca8 <HAL_DMA_Init+0x138>)
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d80f      	bhi.n	8005bae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	4b45      	ldr	r3, [pc, #276]	@ (8005cac <HAL_DMA_Init+0x13c>)
 8005b96:	4413      	add	r3, r2
 8005b98:	4a45      	ldr	r2, [pc, #276]	@ (8005cb0 <HAL_DMA_Init+0x140>)
 8005b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9e:	091b      	lsrs	r3, r3, #4
 8005ba0:	009a      	lsls	r2, r3, #2
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a42      	ldr	r2, [pc, #264]	@ (8005cb4 <HAL_DMA_Init+0x144>)
 8005baa:	641a      	str	r2, [r3, #64]	@ 0x40
 8005bac:	e00e      	b.n	8005bcc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	4b40      	ldr	r3, [pc, #256]	@ (8005cb8 <HAL_DMA_Init+0x148>)
 8005bb6:	4413      	add	r3, r2
 8005bb8:	4a3d      	ldr	r2, [pc, #244]	@ (8005cb0 <HAL_DMA_Init+0x140>)
 8005bba:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbe:	091b      	lsrs	r3, r3, #4
 8005bc0:	009a      	lsls	r2, r3, #2
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a3c      	ldr	r2, [pc, #240]	@ (8005cbc <HAL_DMA_Init+0x14c>)
 8005bca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005be6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f9be 	bl	8005fa0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c2c:	d102      	bne.n	8005c34 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c48:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d010      	beq.n	8005c74 <HAL_DMA_Init+0x104>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d80c      	bhi.n	8005c74 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f9de 	bl	800601c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c70:	605a      	str	r2, [r3, #4]
 8005c72:	e008      	b.n	8005c86 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40020407 	.word	0x40020407
 8005cac:	bffdfff8 	.word	0xbffdfff8
 8005cb0:	cccccccd 	.word	0xcccccccd
 8005cb4:	40020000 	.word	0x40020000
 8005cb8:	bffdfbf8 	.word	0xbffdfbf8
 8005cbc:	40020400 	.word	0x40020400

08005cc0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d005      	beq.n	8005ce4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2204      	movs	r2, #4
 8005cdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	73fb      	strb	r3, [r7, #15]
 8005ce2:	e037      	b.n	8005d54 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 020e 	bic.w	r2, r2, #14
 8005cf2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cfe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d02:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0201 	bic.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d18:	f003 021f 	and.w	r2, r3, #31
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d20:	2101      	movs	r1, #1
 8005d22:	fa01 f202 	lsl.w	r2, r1, r2
 8005d26:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d30:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00c      	beq.n	8005d54 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d48:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005d52:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d00d      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2204      	movs	r2, #4
 8005d8e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	73fb      	strb	r3, [r7, #15]
 8005da4:	e047      	b.n	8005e36 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 020e 	bic.w	r2, r2, #14
 8005db4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0201 	bic.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dda:	f003 021f 	and.w	r2, r3, #31
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de2:	2101      	movs	r1, #1
 8005de4:	fa01 f202 	lsl.w	r2, r1, r2
 8005de8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005df2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00c      	beq.n	8005e16 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e14:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	4798      	blx	r3
    }
  }
  return status;
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5c:	f003 031f 	and.w	r3, r3, #31
 8005e60:	2204      	movs	r2, #4
 8005e62:	409a      	lsls	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4013      	ands	r3, r2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d026      	beq.n	8005eba <HAL_DMA_IRQHandler+0x7a>
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d021      	beq.n	8005eba <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d107      	bne.n	8005e94 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0204 	bic.w	r2, r2, #4
 8005e92:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e98:	f003 021f 	and.w	r2, r3, #31
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea0:	2104      	movs	r1, #4
 8005ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ea6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d071      	beq.n	8005f94 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005eb8:	e06c      	b.n	8005f94 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ebe:	f003 031f 	and.w	r3, r3, #31
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	409a      	lsls	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d02e      	beq.n	8005f2c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d029      	beq.n	8005f2c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10b      	bne.n	8005efe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 020a 	bic.w	r2, r2, #10
 8005ef4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f02:	f003 021f 	and.w	r2, r3, #31
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0a:	2102      	movs	r1, #2
 8005f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f10:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d038      	beq.n	8005f94 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005f2a:	e033      	b.n	8005f94 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	2208      	movs	r2, #8
 8005f36:	409a      	lsls	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d02a      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d025      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 020e 	bic.w	r2, r2, #14
 8005f58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5e:	f003 021f 	and.w	r2, r3, #31
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f66:	2101      	movs	r1, #1
 8005f68:	fa01 f202 	lsl.w	r2, r1, r2
 8005f6c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d004      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop
}
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	461a      	mov	r2, r3
 8005fae:	4b16      	ldr	r3, [pc, #88]	@ (8006008 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d802      	bhi.n	8005fba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005fb4:	4b15      	ldr	r3, [pc, #84]	@ (800600c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	e001      	b.n	8005fbe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005fba:	4b15      	ldr	r3, [pc, #84]	@ (8006010 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005fbc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	3b08      	subs	r3, #8
 8005fca:	4a12      	ldr	r2, [pc, #72]	@ (8006014 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd0:	091b      	lsrs	r3, r3, #4
 8005fd2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd8:	089b      	lsrs	r3, r3, #2
 8005fda:	009a      	lsls	r2, r3, #2
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	4413      	add	r3, r2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8006018 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005fea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f003 031f 	and.w	r3, r3, #31
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	409a      	lsls	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40020407 	.word	0x40020407
 800600c:	40020800 	.word	0x40020800
 8006010:	40020820 	.word	0x40020820
 8006014:	cccccccd 	.word	0xcccccccd
 8006018:	40020880 	.word	0x40020880

0800601c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	b2db      	uxtb	r3, r3
 800602a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4b0b      	ldr	r3, [pc, #44]	@ (800605c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	461a      	mov	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a08      	ldr	r2, [pc, #32]	@ (8006060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800603e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	3b01      	subs	r3, #1
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	2201      	movs	r2, #1
 800604a:	409a      	lsls	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006050:	bf00      	nop
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	1000823f 	.word	0x1000823f
 8006060:	40020940 	.word	0x40020940

08006064 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e147      	b.n	8006306 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d106      	bne.n	8006090 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fb fb20 	bl	80016d0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0210 	bic.w	r2, r2, #16
 800609e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060a0:	f7fc fb82 	bl	80027a8 <HAL_GetTick>
 80060a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80060a6:	e012      	b.n	80060ce <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80060a8:	f7fc fb7e 	bl	80027a8 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b0a      	cmp	r3, #10
 80060b4:	d90b      	bls.n	80060ce <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ba:	f043 0201 	orr.w	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2203      	movs	r2, #3
 80060c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e11b      	b.n	8006306 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d0e5      	beq.n	80060a8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060ec:	f7fc fb5c 	bl	80027a8 <HAL_GetTick>
 80060f0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80060f2:	e012      	b.n	800611a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80060f4:	f7fc fb58 	bl	80027a8 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b0a      	cmp	r3, #10
 8006100:	d90b      	bls.n	800611a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006106:	f043 0201 	orr.w	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2203      	movs	r2, #3
 8006112:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e0f5      	b.n	8006306 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0e5      	beq.n	80060f4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0202 	orr.w	r2, r2, #2
 8006136:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a74      	ldr	r2, [pc, #464]	@ (8006310 <HAL_FDCAN_Init+0x2ac>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d103      	bne.n	800614a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006142:	4a74      	ldr	r2, [pc, #464]	@ (8006314 <HAL_FDCAN_Init+0x2b0>)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	7c1b      	ldrb	r3, [r3, #16]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d108      	bne.n	8006164 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	699a      	ldr	r2, [r3, #24]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006160:	619a      	str	r2, [r3, #24]
 8006162:	e007      	b.n	8006174 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006172:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	7c5b      	ldrb	r3, [r3, #17]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d108      	bne.n	800618e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800618a:	619a      	str	r2, [r3, #24]
 800618c:	e007      	b.n	800619e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699a      	ldr	r2, [r3, #24]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800619c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	7c9b      	ldrb	r3, [r3, #18]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d108      	bne.n	80061b8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	699a      	ldr	r2, [r3, #24]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80061b4:	619a      	str	r2, [r3, #24]
 80061b6:	e007      	b.n	80061c8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699a      	ldr	r2, [r3, #24]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80061c6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699a      	ldr	r2, [r3, #24]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80061ec:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0210 	bic.w	r2, r2, #16
 80061fc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d108      	bne.n	8006218 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	699a      	ldr	r2, [r3, #24]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f042 0204 	orr.w	r2, r2, #4
 8006214:	619a      	str	r2, [r3, #24]
 8006216:	e02c      	b.n	8006272 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d028      	beq.n	8006272 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	2b02      	cmp	r3, #2
 8006226:	d01c      	beq.n	8006262 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006236:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691a      	ldr	r2, [r3, #16]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0210 	orr.w	r2, r2, #16
 8006246:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	2b03      	cmp	r3, #3
 800624e:	d110      	bne.n	8006272 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0220 	orr.w	r2, r2, #32
 800625e:	619a      	str	r2, [r3, #24]
 8006260:	e007      	b.n	8006272 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	699a      	ldr	r2, [r3, #24]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0220 	orr.w	r2, r2, #32
 8006270:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	3b01      	subs	r3, #1
 8006278:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	3b01      	subs	r3, #1
 8006280:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006282:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800628a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	3b01      	subs	r3, #1
 8006294:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800629a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800629c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062a6:	d115      	bne.n	80062d4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ac:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b2:	3b01      	subs	r3, #1
 80062b4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80062b6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062bc:	3b01      	subs	r3, #1
 80062be:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80062c0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c8:	3b01      	subs	r3, #1
 80062ca:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80062d0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80062d2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fab6 	bl	800685c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	40006400 	.word	0x40006400
 8006314:	40006500 	.word	0x40006500

08006318 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006318:	b480      	push	{r7}
 800631a:	b08b      	sub	sp, #44	@ 0x2c
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006330:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006332:	7efb      	ldrb	r3, [r7, #27]
 8006334:	2b02      	cmp	r3, #2
 8006336:	f040 80e8 	bne.w	800650a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b40      	cmp	r3, #64	@ 0x40
 800633e:	d137      	bne.n	80063b0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	2b00      	cmp	r3, #0
 800634e:	d107      	bne.n	8006360 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006354:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e0db      	b.n	8006518 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006368:	0e1b      	lsrs	r3, r3, #24
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b01      	cmp	r3, #1
 8006370:	d10a      	bne.n	8006388 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800637a:	0a5b      	lsrs	r3, r3, #9
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006384:	2301      	movs	r3, #1
 8006386:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006390:	0a1b      	lsrs	r3, r3, #8
 8006392:	f003 0303 	and.w	r3, r3, #3
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	4413      	add	r3, r2
 800639a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80063a0:	69fa      	ldr	r2, [r7, #28]
 80063a2:	4613      	mov	r3, r2
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	4413      	add	r3, r2
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	440b      	add	r3, r1
 80063ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ae:	e036      	b.n	800641e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d107      	bne.n	80063d0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0a3      	b.n	8006518 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063d8:	0e1b      	lsrs	r3, r3, #24
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d10a      	bne.n	80063f8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063ea:	0a1b      	lsrs	r3, r3, #8
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80063f4:	2301      	movs	r3, #1
 80063f6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006400:	0a1b      	lsrs	r3, r3, #8
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	4413      	add	r3, r2
 800640a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	4613      	mov	r3, r2
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	4413      	add	r3, r2
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	440b      	add	r3, r1
 800641c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d107      	bne.n	8006442 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	0c9b      	lsrs	r3, r3, #18
 8006438:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	e005      	b.n	800644e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	3304      	adds	r3, #4
 800646a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800646c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	b29a      	uxth	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	0c1b      	lsrs	r3, r3, #16
 800647c:	f003 020f 	and.w	r2, r3, #15
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	0e1b      	lsrs	r3, r3, #24
 80064a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	0fda      	lsrs	r2, r3, #31
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	3304      	adds	r3, #4
 80064b8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80064be:	2300      	movs	r3, #0
 80064c0:	623b      	str	r3, [r7, #32]
 80064c2:	e00a      	b.n	80064da <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	441a      	add	r2, r3
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	440b      	add	r3, r1
 80064d0:	7812      	ldrb	r2, [r2, #0]
 80064d2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	3301      	adds	r3, #1
 80064d8:	623b      	str	r3, [r7, #32]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	4a11      	ldr	r2, [pc, #68]	@ (8006524 <HAL_FDCAN_GetRxMessage+0x20c>)
 80064e0:	5cd3      	ldrb	r3, [r2, r3]
 80064e2:	461a      	mov	r2, r3
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d3ec      	bcc.n	80064c4 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b40      	cmp	r3, #64	@ 0x40
 80064ee:	d105      	bne.n	80064fc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80064fa:	e004      	b.n	8006506 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	e006      	b.n	8006518 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800650e:	f043 0208 	orr.w	r2, r3, #8
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
  }
}
 8006518:	4618      	mov	r0, r3
 800651a:	372c      	adds	r7, #44	@ 0x2c
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	08011dfc 	.word	0x08011dfc

08006528 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b08c      	sub	sp, #48	@ 0x30
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006536:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800653a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006544:	4013      	ands	r3, r2
 8006546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800654e:	f003 0307 	and.w	r3, r3, #7
 8006552:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800655a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800655c:	4013      	ands	r3, r2
 800655e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006566:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800656a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006574:	4013      	ands	r3, r2
 8006576:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800657e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8006582:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800658a:	6a3a      	ldr	r2, [r7, #32]
 800658c:	4013      	ands	r3, r2
 800658e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006596:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800659a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	4013      	ands	r3, r2
 80065a6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ae:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065b6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00b      	beq.n	80065da <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d006      	beq.n	80065da <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2240      	movs	r2, #64	@ 0x40
 80065d2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f921 	bl	800681c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d019      	beq.n	8006618 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d014      	beq.n	8006618 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80065f6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4013      	ands	r3, r2
 8006604:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800660e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006610:	6939      	ldr	r1, [r7, #16]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f8e3 	bl	80067de <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661a:	2b00      	cmp	r3, #0
 800661c:	d007      	beq.n	800662e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006624:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f8a2 	bl	8006772 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800662e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006630:	2b00      	cmp	r3, #0
 8006632:	d007      	beq.n	8006644 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800663a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800663c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f8a2 	bl	8006788 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006650:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006652:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f8a2 	bl	800679e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00c      	beq.n	800667e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800666a:	2b00      	cmp	r3, #0
 800666c:	d007      	beq.n	800667e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006676:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f89b 	bl	80067b4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006684:	2b00      	cmp	r3, #0
 8006686:	d018      	beq.n	80066ba <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800668e:	2b00      	cmp	r3, #0
 8006690:	d013      	beq.n	80066ba <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800669a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4013      	ands	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2280      	movs	r2, #128	@ 0x80
 80066b0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80066b2:	68f9      	ldr	r1, [r7, #12]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f887 	bl	80067c8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00c      	beq.n	80066de <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d007      	beq.n	80066de <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80066d6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f88b 	bl	80067f4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00c      	beq.n	8006702 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d007      	beq.n	8006702 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80066fa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f883 	bl	8006808 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00f      	beq.n	800672c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800671e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006724:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d007      	beq.n	8006742 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800673a:	69f9      	ldr	r1, [r7, #28]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f881 	bl	8006844 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d009      	beq.n	800675c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6a3a      	ldr	r2, [r7, #32]
 800674e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f863 	bl	8006830 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800676a:	bf00      	nop
 800676c:	3730      	adds	r7, #48	@ 0x30
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
	...

0800685c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006864:	4b27      	ldr	r3, [pc, #156]	@ (8006904 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8006866:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006876:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800687e:	041a      	lsls	r2, r3, #16
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800689c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a4:	061a      	lsls	r2, r3, #24
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	e005      	b.n	80068ea <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3304      	adds	r3, #4
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d3f3      	bcc.n	80068de <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80068f6:	bf00      	nop
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	4000a400 	.word	0x4000a400

08006908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006916:	e15a      	b.n	8006bce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	2101      	movs	r1, #1
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	fa01 f303 	lsl.w	r3, r1, r3
 8006924:	4013      	ands	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 814c 	beq.w	8006bc8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	2b01      	cmp	r3, #1
 800693a:	d005      	beq.n	8006948 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006944:	2b02      	cmp	r3, #2
 8006946:	d130      	bne.n	80069aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	2203      	movs	r2, #3
 8006954:	fa02 f303 	lsl.w	r3, r2, r3
 8006958:	43db      	mvns	r3, r3
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4013      	ands	r3, r2
 800695e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	fa02 f303 	lsl.w	r3, r2, r3
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4313      	orrs	r3, r2
 8006970:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800697e:	2201      	movs	r2, #1
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	fa02 f303 	lsl.w	r3, r2, r3
 8006986:	43db      	mvns	r3, r3
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4013      	ands	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	091b      	lsrs	r3, r3, #4
 8006994:	f003 0201 	and.w	r2, r3, #1
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	fa02 f303 	lsl.w	r3, r2, r3
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d017      	beq.n	80069e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	2203      	movs	r2, #3
 80069c2:	fa02 f303 	lsl.w	r3, r2, r3
 80069c6:	43db      	mvns	r3, r3
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	4013      	ands	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	fa02 f303 	lsl.w	r3, r2, r3
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	4313      	orrs	r3, r2
 80069de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f003 0303 	and.w	r3, r3, #3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d123      	bne.n	8006a3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	08da      	lsrs	r2, r3, #3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3208      	adds	r2, #8
 80069fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	220f      	movs	r2, #15
 8006a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0e:	43db      	mvns	r3, r3
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4013      	ands	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	691a      	ldr	r2, [r3, #16]
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	fa02 f303 	lsl.w	r3, r2, r3
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	08da      	lsrs	r2, r3, #3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3208      	adds	r2, #8
 8006a34:	6939      	ldr	r1, [r7, #16]
 8006a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	2203      	movs	r2, #3
 8006a46:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4a:	43db      	mvns	r3, r3
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f003 0203 	and.w	r2, r3, #3
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 80a6 	beq.w	8006bc8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a7c:	4b5b      	ldr	r3, [pc, #364]	@ (8006bec <HAL_GPIO_Init+0x2e4>)
 8006a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a80:	4a5a      	ldr	r2, [pc, #360]	@ (8006bec <HAL_GPIO_Init+0x2e4>)
 8006a82:	f043 0301 	orr.w	r3, r3, #1
 8006a86:	6613      	str	r3, [r2, #96]	@ 0x60
 8006a88:	4b58      	ldr	r3, [pc, #352]	@ (8006bec <HAL_GPIO_Init+0x2e4>)
 8006a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a94:	4a56      	ldr	r2, [pc, #344]	@ (8006bf0 <HAL_GPIO_Init+0x2e8>)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	089b      	lsrs	r3, r3, #2
 8006a9a:	3302      	adds	r3, #2
 8006a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f003 0303 	and.w	r3, r3, #3
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	220f      	movs	r2, #15
 8006aac:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab0:	43db      	mvns	r3, r3
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006abe:	d01f      	beq.n	8006b00 <HAL_GPIO_Init+0x1f8>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a4c      	ldr	r2, [pc, #304]	@ (8006bf4 <HAL_GPIO_Init+0x2ec>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d019      	beq.n	8006afc <HAL_GPIO_Init+0x1f4>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a4b      	ldr	r2, [pc, #300]	@ (8006bf8 <HAL_GPIO_Init+0x2f0>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d013      	beq.n	8006af8 <HAL_GPIO_Init+0x1f0>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a4a      	ldr	r2, [pc, #296]	@ (8006bfc <HAL_GPIO_Init+0x2f4>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00d      	beq.n	8006af4 <HAL_GPIO_Init+0x1ec>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a49      	ldr	r2, [pc, #292]	@ (8006c00 <HAL_GPIO_Init+0x2f8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d007      	beq.n	8006af0 <HAL_GPIO_Init+0x1e8>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a48      	ldr	r2, [pc, #288]	@ (8006c04 <HAL_GPIO_Init+0x2fc>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d101      	bne.n	8006aec <HAL_GPIO_Init+0x1e4>
 8006ae8:	2305      	movs	r3, #5
 8006aea:	e00a      	b.n	8006b02 <HAL_GPIO_Init+0x1fa>
 8006aec:	2306      	movs	r3, #6
 8006aee:	e008      	b.n	8006b02 <HAL_GPIO_Init+0x1fa>
 8006af0:	2304      	movs	r3, #4
 8006af2:	e006      	b.n	8006b02 <HAL_GPIO_Init+0x1fa>
 8006af4:	2303      	movs	r3, #3
 8006af6:	e004      	b.n	8006b02 <HAL_GPIO_Init+0x1fa>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e002      	b.n	8006b02 <HAL_GPIO_Init+0x1fa>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e000      	b.n	8006b02 <HAL_GPIO_Init+0x1fa>
 8006b00:	2300      	movs	r3, #0
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	f002 0203 	and.w	r2, r2, #3
 8006b08:	0092      	lsls	r2, r2, #2
 8006b0a:	4093      	lsls	r3, r2
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b12:	4937      	ldr	r1, [pc, #220]	@ (8006bf0 <HAL_GPIO_Init+0x2e8>)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	089b      	lsrs	r3, r3, #2
 8006b18:	3302      	adds	r3, #2
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b20:	4b39      	ldr	r3, [pc, #228]	@ (8006c08 <HAL_GPIO_Init+0x300>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	43db      	mvns	r3, r3
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006b44:	4a30      	ldr	r2, [pc, #192]	@ (8006c08 <HAL_GPIO_Init+0x300>)
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006c08 <HAL_GPIO_Init+0x300>)
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	43db      	mvns	r3, r3
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	4013      	ands	r3, r2
 8006b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006b6e:	4a26      	ldr	r2, [pc, #152]	@ (8006c08 <HAL_GPIO_Init+0x300>)
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006b74:	4b24      	ldr	r3, [pc, #144]	@ (8006c08 <HAL_GPIO_Init+0x300>)
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	43db      	mvns	r3, r3
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	4013      	ands	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006b98:	4a1b      	ldr	r2, [pc, #108]	@ (8006c08 <HAL_GPIO_Init+0x300>)
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006c08 <HAL_GPIO_Init+0x300>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	43db      	mvns	r3, r3
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4013      	ands	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006bc2:	4a11      	ldr	r2, [pc, #68]	@ (8006c08 <HAL_GPIO_Init+0x300>)
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f47f ae9d 	bne.w	8006918 <HAL_GPIO_Init+0x10>
  }
}
 8006bde:	bf00      	nop
 8006be0:	bf00      	nop
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	40021000 	.word	0x40021000
 8006bf0:	40010000 	.word	0x40010000
 8006bf4:	48000400 	.word	0x48000400
 8006bf8:	48000800 	.word	0x48000800
 8006bfc:	48000c00 	.word	0x48000c00
 8006c00:	48001000 	.word	0x48001000
 8006c04:	48001400 	.word	0x48001400
 8006c08:	40010400 	.word	0x40010400

08006c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	807b      	strh	r3, [r7, #2]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c1c:	787b      	ldrb	r3, [r7, #1]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c22:	887a      	ldrh	r2, [r7, #2]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c28:	e002      	b.n	8006c30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c2a:	887a      	ldrh	r2, [r7, #2]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006c46:	4b08      	ldr	r3, [pc, #32]	@ (8006c68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c48:	695a      	ldr	r2, [r3, #20]
 8006c4a:	88fb      	ldrh	r3, [r7, #6]
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d006      	beq.n	8006c60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c52:	4a05      	ldr	r2, [pc, #20]	@ (8006c68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c54:	88fb      	ldrh	r3, [r7, #6]
 8006c56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c58:	88fb      	ldrh	r3, [r7, #6]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f005 fd80 	bl	800c760 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40010400 	.word	0x40010400

08006c6c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e0bb      	b.n	8006dfa <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b05      	cmp	r3, #5
 8006c8c:	d101      	bne.n	8006c92 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e0b3      	b.n	8006dfa <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d101      	bne.n	8006ca2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e0ab      	b.n	8006dfa <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ca2:	4b58      	ldr	r3, [pc, #352]	@ (8006e04 <HAL_OPAMP_Init+0x198>)
 8006ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ca6:	4a57      	ldr	r2, [pc, #348]	@ (8006e04 <HAL_OPAMP_Init+0x198>)
 8006ca8:	f043 0301 	orr.w	r3, r3, #1
 8006cac:	6613      	str	r3, [r2, #96]	@ 0x60
 8006cae:	4b55      	ldr	r3, [pc, #340]	@ (8006e04 <HAL_OPAMP_Init+0x198>)
 8006cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	60bb      	str	r3, [r7, #8]
 8006cb8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d103      	bne.n	8006cce <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7fa ff2a 	bl	8001b28 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2b40      	cmp	r3, #64	@ 0x40
 8006cda:	d003      	beq.n	8006ce4 <HAL_OPAMP_Init+0x78>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	2b60      	cmp	r3, #96	@ 0x60
 8006ce2:	d133      	bne.n	8006d4c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f023 0110 	bic.w	r1, r3, #16
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	4b41      	ldr	r3, [pc, #260]	@ (8006e08 <HAL_OPAMP_Init+0x19c>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6851      	ldr	r1, [r2, #4]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6892      	ldr	r2, [r2, #8]
 8006d0c:	4311      	orrs	r1, r2
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	6912      	ldr	r2, [r2, #16]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	6879      	ldr	r1, [r7, #4]
 8006d16:	7d09      	ldrb	r1, [r1, #20]
 8006d18:	2901      	cmp	r1, #1
 8006d1a:	d102      	bne.n	8006d22 <HAL_OPAMP_Init+0xb6>
 8006d1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006d20:	e000      	b.n	8006d24 <HAL_OPAMP_Init+0xb8>
 8006d22:	2100      	movs	r1, #0
 8006d24:	4311      	orrs	r1, r2
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d2a:	4311      	orrs	r1, r2
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006d30:	4311      	orrs	r1, r2
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006d36:	04d2      	lsls	r2, r2, #19
 8006d38:	4311      	orrs	r1, r2
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006d3e:	0612      	lsls	r2, r2, #24
 8006d40:	4311      	orrs	r1, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6812      	ldr	r2, [r2, #0]
 8006d46:	430b      	orrs	r3, r1
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	e035      	b.n	8006db8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f023 0110 	bic.w	r1, r3, #16
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	4b27      	ldr	r3, [pc, #156]	@ (8006e08 <HAL_OPAMP_Init+0x19c>)
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6851      	ldr	r1, [r2, #4]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6892      	ldr	r2, [r2, #8]
 8006d74:	4311      	orrs	r1, r2
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	68d2      	ldr	r2, [r2, #12]
 8006d7a:	4311      	orrs	r1, r2
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6912      	ldr	r2, [r2, #16]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	7d09      	ldrb	r1, [r1, #20]
 8006d86:	2901      	cmp	r1, #1
 8006d88:	d102      	bne.n	8006d90 <HAL_OPAMP_Init+0x124>
 8006d8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006d8e:	e000      	b.n	8006d92 <HAL_OPAMP_Init+0x126>
 8006d90:	2100      	movs	r1, #0
 8006d92:	4311      	orrs	r1, r2
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d98:	4311      	orrs	r1, r2
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006d9e:	4311      	orrs	r1, r2
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006da4:	04d2      	lsls	r2, r2, #19
 8006da6:	4311      	orrs	r1, r2
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006dac:	0612      	lsls	r2, r2, #24
 8006dae:	4311      	orrs	r1, r2
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	6812      	ldr	r2, [r2, #0]
 8006db4:	430b      	orrs	r3, r1
 8006db6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	db10      	blt.n	8006de4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	699a      	ldr	r2, [r3, #24]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	430a      	orrs	r2, r1
 8006de2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d103      	bne.n	8006df8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	40021000 	.word	0x40021000
 8006e08:	e0003e11 	.word	0xe0003e11

08006e0c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d102      	bne.n	8006e24 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	73fb      	strb	r3, [r7, #15]
 8006e22:	e01d      	b.n	8006e60 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b05      	cmp	r3, #5
 8006e2e:	d102      	bne.n	8006e36 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	73fb      	strb	r3, [r7, #15]
 8006e34:	e014      	b.n	8006e60 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d10c      	bne.n	8006e5c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0201 	orr.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2204      	movs	r2, #4
 8006e56:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8006e5a:	e001      	b.n	8006e60 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
	...

08006e70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d141      	bne.n	8006f02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e8a:	d131      	bne.n	8006ef0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e8c:	4b47      	ldr	r3, [pc, #284]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e92:	4a46      	ldr	r2, [pc, #280]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e9c:	4b43      	ldr	r3, [pc, #268]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ea4:	4a41      	ldr	r2, [pc, #260]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006eaa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006eac:	4b40      	ldr	r3, [pc, #256]	@ (8006fb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2232      	movs	r2, #50	@ 0x32
 8006eb2:	fb02 f303 	mul.w	r3, r2, r3
 8006eb6:	4a3f      	ldr	r2, [pc, #252]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebc:	0c9b      	lsrs	r3, r3, #18
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ec2:	e002      	b.n	8006eca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eca:	4b38      	ldr	r3, [pc, #224]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ed6:	d102      	bne.n	8006ede <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f2      	bne.n	8006ec4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ede:	4b33      	ldr	r3, [pc, #204]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eea:	d158      	bne.n	8006f9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e057      	b.n	8006fa0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006efc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006f00:	e04d      	b.n	8006f9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f08:	d141      	bne.n	8006f8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f0a:	4b28      	ldr	r3, [pc, #160]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f16:	d131      	bne.n	8006f7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f18:	4b24      	ldr	r3, [pc, #144]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f1e:	4a23      	ldr	r2, [pc, #140]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f28:	4b20      	ldr	r3, [pc, #128]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f30:	4a1e      	ldr	r2, [pc, #120]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006f38:	4b1d      	ldr	r3, [pc, #116]	@ (8006fb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2232      	movs	r2, #50	@ 0x32
 8006f3e:	fb02 f303 	mul.w	r3, r2, r3
 8006f42:	4a1c      	ldr	r2, [pc, #112]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f44:	fba2 2303 	umull	r2, r3, r2, r3
 8006f48:	0c9b      	lsrs	r3, r3, #18
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f4e:	e002      	b.n	8006f56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f56:	4b15      	ldr	r3, [pc, #84]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f62:	d102      	bne.n	8006f6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f2      	bne.n	8006f50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f6a:	4b10      	ldr	r3, [pc, #64]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f76:	d112      	bne.n	8006f9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e011      	b.n	8006fa0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f82:	4a0a      	ldr	r2, [pc, #40]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006f8c:	e007      	b.n	8006f9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f8e:	4b07      	ldr	r3, [pc, #28]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f96:	4a05      	ldr	r2, [pc, #20]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f9c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	40007000 	.word	0x40007000
 8006fb0:	20000000 	.word	0x20000000
 8006fb4:	431bde83 	.word	0x431bde83

08006fb8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006fbc:	4b05      	ldr	r3, [pc, #20]	@ (8006fd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	4a04      	ldr	r2, [pc, #16]	@ (8006fd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006fc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fc6:	6093      	str	r3, [r2, #8]
}
 8006fc8:	bf00      	nop
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	40007000 	.word	0x40007000

08006fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e2fe      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d075      	beq.n	80070e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ff6:	4b97      	ldr	r3, [pc, #604]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f003 030c 	and.w	r3, r3, #12
 8006ffe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007000:	4b94      	ldr	r3, [pc, #592]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	2b0c      	cmp	r3, #12
 800700e:	d102      	bne.n	8007016 <HAL_RCC_OscConfig+0x3e>
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	2b03      	cmp	r3, #3
 8007014:	d002      	beq.n	800701c <HAL_RCC_OscConfig+0x44>
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	2b08      	cmp	r3, #8
 800701a:	d10b      	bne.n	8007034 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800701c:	4b8d      	ldr	r3, [pc, #564]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d05b      	beq.n	80070e0 <HAL_RCC_OscConfig+0x108>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d157      	bne.n	80070e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e2d9      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800703c:	d106      	bne.n	800704c <HAL_RCC_OscConfig+0x74>
 800703e:	4b85      	ldr	r3, [pc, #532]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a84      	ldr	r2, [pc, #528]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 8007044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	e01d      	b.n	8007088 <HAL_RCC_OscConfig+0xb0>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007054:	d10c      	bne.n	8007070 <HAL_RCC_OscConfig+0x98>
 8007056:	4b7f      	ldr	r3, [pc, #508]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a7e      	ldr	r2, [pc, #504]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 800705c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	4b7c      	ldr	r3, [pc, #496]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a7b      	ldr	r2, [pc, #492]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 8007068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	e00b      	b.n	8007088 <HAL_RCC_OscConfig+0xb0>
 8007070:	4b78      	ldr	r3, [pc, #480]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a77      	ldr	r2, [pc, #476]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 8007076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	4b75      	ldr	r3, [pc, #468]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a74      	ldr	r2, [pc, #464]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 8007082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d013      	beq.n	80070b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007090:	f7fb fb8a 	bl	80027a8 <HAL_GetTick>
 8007094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007096:	e008      	b.n	80070aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007098:	f7fb fb86 	bl	80027a8 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b64      	cmp	r3, #100	@ 0x64
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e29e      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070aa:	4b6a      	ldr	r3, [pc, #424]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0f0      	beq.n	8007098 <HAL_RCC_OscConfig+0xc0>
 80070b6:	e014      	b.n	80070e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b8:	f7fb fb76 	bl	80027a8 <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070c0:	f7fb fb72 	bl	80027a8 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b64      	cmp	r3, #100	@ 0x64
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e28a      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070d2:	4b60      	ldr	r3, [pc, #384]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f0      	bne.n	80070c0 <HAL_RCC_OscConfig+0xe8>
 80070de:	e000      	b.n	80070e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d075      	beq.n	80071da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070ee:	4b59      	ldr	r3, [pc, #356]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 030c 	and.w	r3, r3, #12
 80070f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070f8:	4b56      	ldr	r3, [pc, #344]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f003 0303 	and.w	r3, r3, #3
 8007100:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	2b0c      	cmp	r3, #12
 8007106:	d102      	bne.n	800710e <HAL_RCC_OscConfig+0x136>
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2b02      	cmp	r3, #2
 800710c:	d002      	beq.n	8007114 <HAL_RCC_OscConfig+0x13c>
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b04      	cmp	r3, #4
 8007112:	d11f      	bne.n	8007154 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007114:	4b4f      	ldr	r3, [pc, #316]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800711c:	2b00      	cmp	r3, #0
 800711e:	d005      	beq.n	800712c <HAL_RCC_OscConfig+0x154>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e25d      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800712c:	4b49      	ldr	r3, [pc, #292]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	061b      	lsls	r3, r3, #24
 800713a:	4946      	ldr	r1, [pc, #280]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 800713c:	4313      	orrs	r3, r2
 800713e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007140:	4b45      	ldr	r3, [pc, #276]	@ (8007258 <HAL_RCC_OscConfig+0x280>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4618      	mov	r0, r3
 8007146:	f7fb fae3 	bl	8002710 <HAL_InitTick>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d043      	beq.n	80071d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e249      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d023      	beq.n	80071a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800715c:	4b3d      	ldr	r3, [pc, #244]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a3c      	ldr	r2, [pc, #240]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 8007162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007168:	f7fb fb1e 	bl	80027a8 <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007170:	f7fb fb1a 	bl	80027a8 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e232      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007182:	4b34      	ldr	r3, [pc, #208]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0f0      	beq.n	8007170 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800718e:	4b31      	ldr	r3, [pc, #196]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	061b      	lsls	r3, r3, #24
 800719c:	492d      	ldr	r1, [pc, #180]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	604b      	str	r3, [r1, #4]
 80071a2:	e01a      	b.n	80071da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a2a      	ldr	r2, [pc, #168]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 80071aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b0:	f7fb fafa 	bl	80027a8 <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071b8:	f7fb faf6 	bl	80027a8 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e20e      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071ca:	4b22      	ldr	r3, [pc, #136]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f0      	bne.n	80071b8 <HAL_RCC_OscConfig+0x1e0>
 80071d6:	e000      	b.n	80071da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d041      	beq.n	800726a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d01c      	beq.n	8007228 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071ee:	4b19      	ldr	r3, [pc, #100]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 80071f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071f4:	4a17      	ldr	r2, [pc, #92]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 80071f6:	f043 0301 	orr.w	r3, r3, #1
 80071fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071fe:	f7fb fad3 	bl	80027a8 <HAL_GetTick>
 8007202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007204:	e008      	b.n	8007218 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007206:	f7fb facf 	bl	80027a8 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b02      	cmp	r3, #2
 8007212:	d901      	bls.n	8007218 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e1e7      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007218:	4b0e      	ldr	r3, [pc, #56]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 800721a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0ef      	beq.n	8007206 <HAL_RCC_OscConfig+0x22e>
 8007226:	e020      	b.n	800726a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007228:	4b0a      	ldr	r3, [pc, #40]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 800722a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800722e:	4a09      	ldr	r2, [pc, #36]	@ (8007254 <HAL_RCC_OscConfig+0x27c>)
 8007230:	f023 0301 	bic.w	r3, r3, #1
 8007234:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007238:	f7fb fab6 	bl	80027a8 <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800723e:	e00d      	b.n	800725c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007240:	f7fb fab2 	bl	80027a8 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d906      	bls.n	800725c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e1ca      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
 8007252:	bf00      	nop
 8007254:	40021000 	.word	0x40021000
 8007258:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800725c:	4b8c      	ldr	r3, [pc, #560]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 800725e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1ea      	bne.n	8007240 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 80a6 	beq.w	80073c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007278:	2300      	movs	r3, #0
 800727a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800727c:	4b84      	ldr	r3, [pc, #528]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 800727e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_RCC_OscConfig+0x2b4>
 8007288:	2301      	movs	r3, #1
 800728a:	e000      	b.n	800728e <HAL_RCC_OscConfig+0x2b6>
 800728c:	2300      	movs	r3, #0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00d      	beq.n	80072ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007292:	4b7f      	ldr	r3, [pc, #508]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 8007294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007296:	4a7e      	ldr	r2, [pc, #504]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 8007298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800729c:	6593      	str	r3, [r2, #88]	@ 0x58
 800729e:	4b7c      	ldr	r3, [pc, #496]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 80072a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80072aa:	2301      	movs	r3, #1
 80072ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072ae:	4b79      	ldr	r3, [pc, #484]	@ (8007494 <HAL_RCC_OscConfig+0x4bc>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d118      	bne.n	80072ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072ba:	4b76      	ldr	r3, [pc, #472]	@ (8007494 <HAL_RCC_OscConfig+0x4bc>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a75      	ldr	r2, [pc, #468]	@ (8007494 <HAL_RCC_OscConfig+0x4bc>)
 80072c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072c6:	f7fb fa6f 	bl	80027a8 <HAL_GetTick>
 80072ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072cc:	e008      	b.n	80072e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ce:	f7fb fa6b 	bl	80027a8 <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d901      	bls.n	80072e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e183      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072e0:	4b6c      	ldr	r3, [pc, #432]	@ (8007494 <HAL_RCC_OscConfig+0x4bc>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d0f0      	beq.n	80072ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d108      	bne.n	8007306 <HAL_RCC_OscConfig+0x32e>
 80072f4:	4b66      	ldr	r3, [pc, #408]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 80072f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072fa:	4a65      	ldr	r2, [pc, #404]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 80072fc:	f043 0301 	orr.w	r3, r3, #1
 8007300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007304:	e024      	b.n	8007350 <HAL_RCC_OscConfig+0x378>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	2b05      	cmp	r3, #5
 800730c:	d110      	bne.n	8007330 <HAL_RCC_OscConfig+0x358>
 800730e:	4b60      	ldr	r3, [pc, #384]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 8007310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007314:	4a5e      	ldr	r2, [pc, #376]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 8007316:	f043 0304 	orr.w	r3, r3, #4
 800731a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800731e:	4b5c      	ldr	r3, [pc, #368]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 8007320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007324:	4a5a      	ldr	r2, [pc, #360]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 8007326:	f043 0301 	orr.w	r3, r3, #1
 800732a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800732e:	e00f      	b.n	8007350 <HAL_RCC_OscConfig+0x378>
 8007330:	4b57      	ldr	r3, [pc, #348]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 8007332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007336:	4a56      	ldr	r2, [pc, #344]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 8007338:	f023 0301 	bic.w	r3, r3, #1
 800733c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007340:	4b53      	ldr	r3, [pc, #332]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 8007342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007346:	4a52      	ldr	r2, [pc, #328]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 8007348:	f023 0304 	bic.w	r3, r3, #4
 800734c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d016      	beq.n	8007386 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007358:	f7fb fa26 	bl	80027a8 <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800735e:	e00a      	b.n	8007376 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007360:	f7fb fa22 	bl	80027a8 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800736e:	4293      	cmp	r3, r2
 8007370:	d901      	bls.n	8007376 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e138      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007376:	4b46      	ldr	r3, [pc, #280]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 8007378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0ed      	beq.n	8007360 <HAL_RCC_OscConfig+0x388>
 8007384:	e015      	b.n	80073b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007386:	f7fb fa0f 	bl	80027a8 <HAL_GetTick>
 800738a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800738c:	e00a      	b.n	80073a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800738e:	f7fb fa0b 	bl	80027a8 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800739c:	4293      	cmp	r3, r2
 800739e:	d901      	bls.n	80073a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e121      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073a4:	4b3a      	ldr	r3, [pc, #232]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 80073a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1ed      	bne.n	800738e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073b2:	7ffb      	ldrb	r3, [r7, #31]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d105      	bne.n	80073c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073b8:	4b35      	ldr	r3, [pc, #212]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 80073ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073bc:	4a34      	ldr	r2, [pc, #208]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 80073be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0320 	and.w	r3, r3, #32
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d03c      	beq.n	800744a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01c      	beq.n	8007412 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 80073da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073de:	4a2c      	ldr	r2, [pc, #176]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 80073e0:	f043 0301 	orr.w	r3, r3, #1
 80073e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e8:	f7fb f9de 	bl	80027a8 <HAL_GetTick>
 80073ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073ee:	e008      	b.n	8007402 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073f0:	f7fb f9da 	bl	80027a8 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d901      	bls.n	8007402 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e0f2      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007402:	4b23      	ldr	r3, [pc, #140]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 8007404:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0ef      	beq.n	80073f0 <HAL_RCC_OscConfig+0x418>
 8007410:	e01b      	b.n	800744a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007412:	4b1f      	ldr	r3, [pc, #124]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 8007414:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007418:	4a1d      	ldr	r2, [pc, #116]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 800741a:	f023 0301 	bic.w	r3, r3, #1
 800741e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007422:	f7fb f9c1 	bl	80027a8 <HAL_GetTick>
 8007426:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007428:	e008      	b.n	800743c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800742a:	f7fb f9bd 	bl	80027a8 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d901      	bls.n	800743c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e0d5      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800743c:	4b14      	ldr	r3, [pc, #80]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 800743e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1ef      	bne.n	800742a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 80c9 	beq.w	80075e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007454:	4b0e      	ldr	r3, [pc, #56]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f003 030c 	and.w	r3, r3, #12
 800745c:	2b0c      	cmp	r3, #12
 800745e:	f000 8083 	beq.w	8007568 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d15e      	bne.n	8007528 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800746a:	4b09      	ldr	r3, [pc, #36]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a08      	ldr	r2, [pc, #32]	@ (8007490 <HAL_RCC_OscConfig+0x4b8>)
 8007470:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007476:	f7fb f997 	bl	80027a8 <HAL_GetTick>
 800747a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800747c:	e00c      	b.n	8007498 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800747e:	f7fb f993 	bl	80027a8 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d905      	bls.n	8007498 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e0ab      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
 8007490:	40021000 	.word	0x40021000
 8007494:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007498:	4b55      	ldr	r3, [pc, #340]	@ (80075f0 <HAL_RCC_OscConfig+0x618>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1ec      	bne.n	800747e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074a4:	4b52      	ldr	r3, [pc, #328]	@ (80075f0 <HAL_RCC_OscConfig+0x618>)
 80074a6:	68da      	ldr	r2, [r3, #12]
 80074a8:	4b52      	ldr	r3, [pc, #328]	@ (80075f4 <HAL_RCC_OscConfig+0x61c>)
 80074aa:	4013      	ands	r3, r2
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	6a11      	ldr	r1, [r2, #32]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80074b4:	3a01      	subs	r2, #1
 80074b6:	0112      	lsls	r2, r2, #4
 80074b8:	4311      	orrs	r1, r2
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80074be:	0212      	lsls	r2, r2, #8
 80074c0:	4311      	orrs	r1, r2
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80074c6:	0852      	lsrs	r2, r2, #1
 80074c8:	3a01      	subs	r2, #1
 80074ca:	0552      	lsls	r2, r2, #21
 80074cc:	4311      	orrs	r1, r2
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80074d2:	0852      	lsrs	r2, r2, #1
 80074d4:	3a01      	subs	r2, #1
 80074d6:	0652      	lsls	r2, r2, #25
 80074d8:	4311      	orrs	r1, r2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80074de:	06d2      	lsls	r2, r2, #27
 80074e0:	430a      	orrs	r2, r1
 80074e2:	4943      	ldr	r1, [pc, #268]	@ (80075f0 <HAL_RCC_OscConfig+0x618>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074e8:	4b41      	ldr	r3, [pc, #260]	@ (80075f0 <HAL_RCC_OscConfig+0x618>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a40      	ldr	r2, [pc, #256]	@ (80075f0 <HAL_RCC_OscConfig+0x618>)
 80074ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074f4:	4b3e      	ldr	r3, [pc, #248]	@ (80075f0 <HAL_RCC_OscConfig+0x618>)
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	4a3d      	ldr	r2, [pc, #244]	@ (80075f0 <HAL_RCC_OscConfig+0x618>)
 80074fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007500:	f7fb f952 	bl	80027a8 <HAL_GetTick>
 8007504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007506:	e008      	b.n	800751a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007508:	f7fb f94e 	bl	80027a8 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d901      	bls.n	800751a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e066      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800751a:	4b35      	ldr	r3, [pc, #212]	@ (80075f0 <HAL_RCC_OscConfig+0x618>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d0f0      	beq.n	8007508 <HAL_RCC_OscConfig+0x530>
 8007526:	e05e      	b.n	80075e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007528:	4b31      	ldr	r3, [pc, #196]	@ (80075f0 <HAL_RCC_OscConfig+0x618>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a30      	ldr	r2, [pc, #192]	@ (80075f0 <HAL_RCC_OscConfig+0x618>)
 800752e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007534:	f7fb f938 	bl	80027a8 <HAL_GetTick>
 8007538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800753a:	e008      	b.n	800754e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800753c:	f7fb f934 	bl	80027a8 <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	2b02      	cmp	r3, #2
 8007548:	d901      	bls.n	800754e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e04c      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800754e:	4b28      	ldr	r3, [pc, #160]	@ (80075f0 <HAL_RCC_OscConfig+0x618>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1f0      	bne.n	800753c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800755a:	4b25      	ldr	r3, [pc, #148]	@ (80075f0 <HAL_RCC_OscConfig+0x618>)
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	4924      	ldr	r1, [pc, #144]	@ (80075f0 <HAL_RCC_OscConfig+0x618>)
 8007560:	4b25      	ldr	r3, [pc, #148]	@ (80075f8 <HAL_RCC_OscConfig+0x620>)
 8007562:	4013      	ands	r3, r2
 8007564:	60cb      	str	r3, [r1, #12]
 8007566:	e03e      	b.n	80075e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d101      	bne.n	8007574 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e039      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007574:	4b1e      	ldr	r3, [pc, #120]	@ (80075f0 <HAL_RCC_OscConfig+0x618>)
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f003 0203 	and.w	r2, r3, #3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	429a      	cmp	r2, r3
 8007586:	d12c      	bne.n	80075e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007592:	3b01      	subs	r3, #1
 8007594:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007596:	429a      	cmp	r2, r3
 8007598:	d123      	bne.n	80075e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d11b      	bne.n	80075e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d113      	bne.n	80075e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c4:	085b      	lsrs	r3, r3, #1
 80075c6:	3b01      	subs	r3, #1
 80075c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d109      	bne.n	80075e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075d8:	085b      	lsrs	r3, r3, #1
 80075da:	3b01      	subs	r3, #1
 80075dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075de:	429a      	cmp	r2, r3
 80075e0:	d001      	beq.n	80075e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e000      	b.n	80075e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3720      	adds	r7, #32
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40021000 	.word	0x40021000
 80075f4:	019f800c 	.word	0x019f800c
 80075f8:	feeefffc 	.word	0xfeeefffc

080075fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007606:	2300      	movs	r3, #0
 8007608:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e11e      	b.n	8007852 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007614:	4b91      	ldr	r3, [pc, #580]	@ (800785c <HAL_RCC_ClockConfig+0x260>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 030f 	and.w	r3, r3, #15
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d910      	bls.n	8007644 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007622:	4b8e      	ldr	r3, [pc, #568]	@ (800785c <HAL_RCC_ClockConfig+0x260>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f023 020f 	bic.w	r2, r3, #15
 800762a:	498c      	ldr	r1, [pc, #560]	@ (800785c <HAL_RCC_ClockConfig+0x260>)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	4313      	orrs	r3, r2
 8007630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007632:	4b8a      	ldr	r3, [pc, #552]	@ (800785c <HAL_RCC_ClockConfig+0x260>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 030f 	and.w	r3, r3, #15
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	429a      	cmp	r2, r3
 800763e:	d001      	beq.n	8007644 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e106      	b.n	8007852 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d073      	beq.n	8007738 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	2b03      	cmp	r3, #3
 8007656:	d129      	bne.n	80076ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007658:	4b81      	ldr	r3, [pc, #516]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e0f4      	b.n	8007852 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007668:	f000 f99e 	bl	80079a8 <RCC_GetSysClockFreqFromPLLSource>
 800766c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	4a7c      	ldr	r2, [pc, #496]	@ (8007864 <HAL_RCC_ClockConfig+0x268>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d93f      	bls.n	80076f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007676:	4b7a      	ldr	r3, [pc, #488]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d009      	beq.n	8007696 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800768a:	2b00      	cmp	r3, #0
 800768c:	d033      	beq.n	80076f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007692:	2b00      	cmp	r3, #0
 8007694:	d12f      	bne.n	80076f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007696:	4b72      	ldr	r3, [pc, #456]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800769e:	4a70      	ldr	r2, [pc, #448]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 80076a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80076a6:	2380      	movs	r3, #128	@ 0x80
 80076a8:	617b      	str	r3, [r7, #20]
 80076aa:	e024      	b.n	80076f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d107      	bne.n	80076c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076b4:	4b6a      	ldr	r3, [pc, #424]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d109      	bne.n	80076d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e0c6      	b.n	8007852 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076c4:	4b66      	ldr	r3, [pc, #408]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e0be      	b.n	8007852 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80076d4:	f000 f8ce 	bl	8007874 <HAL_RCC_GetSysClockFreq>
 80076d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	4a61      	ldr	r2, [pc, #388]	@ (8007864 <HAL_RCC_ClockConfig+0x268>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d909      	bls.n	80076f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80076e2:	4b5f      	ldr	r3, [pc, #380]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076ea:	4a5d      	ldr	r2, [pc, #372]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 80076ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80076f2:	2380      	movs	r3, #128	@ 0x80
 80076f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076f6:	4b5a      	ldr	r3, [pc, #360]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f023 0203 	bic.w	r2, r3, #3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	4957      	ldr	r1, [pc, #348]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 8007704:	4313      	orrs	r3, r2
 8007706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007708:	f7fb f84e 	bl	80027a8 <HAL_GetTick>
 800770c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800770e:	e00a      	b.n	8007726 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007710:	f7fb f84a 	bl	80027a8 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800771e:	4293      	cmp	r3, r2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e095      	b.n	8007852 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007726:	4b4e      	ldr	r3, [pc, #312]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f003 020c 	and.w	r2, r3, #12
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	429a      	cmp	r2, r3
 8007736:	d1eb      	bne.n	8007710 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d023      	beq.n	800778c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d005      	beq.n	800775c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007750:	4b43      	ldr	r3, [pc, #268]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	4a42      	ldr	r2, [pc, #264]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 8007756:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800775a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0308 	and.w	r3, r3, #8
 8007764:	2b00      	cmp	r3, #0
 8007766:	d007      	beq.n	8007778 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007768:	4b3d      	ldr	r3, [pc, #244]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007770:	4a3b      	ldr	r2, [pc, #236]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 8007772:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007776:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007778:	4b39      	ldr	r3, [pc, #228]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	4936      	ldr	r1, [pc, #216]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 8007786:	4313      	orrs	r3, r2
 8007788:	608b      	str	r3, [r1, #8]
 800778a:	e008      	b.n	800779e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	2b80      	cmp	r3, #128	@ 0x80
 8007790:	d105      	bne.n	800779e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007792:	4b33      	ldr	r3, [pc, #204]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	4a32      	ldr	r2, [pc, #200]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 8007798:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800779c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800779e:	4b2f      	ldr	r3, [pc, #188]	@ (800785c <HAL_RCC_ClockConfig+0x260>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 030f 	and.w	r3, r3, #15
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d21d      	bcs.n	80077e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ac:	4b2b      	ldr	r3, [pc, #172]	@ (800785c <HAL_RCC_ClockConfig+0x260>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f023 020f 	bic.w	r2, r3, #15
 80077b4:	4929      	ldr	r1, [pc, #164]	@ (800785c <HAL_RCC_ClockConfig+0x260>)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80077bc:	f7fa fff4 	bl	80027a8 <HAL_GetTick>
 80077c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077c2:	e00a      	b.n	80077da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077c4:	f7fa fff0 	bl	80027a8 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d901      	bls.n	80077da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e03b      	b.n	8007852 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077da:	4b20      	ldr	r3, [pc, #128]	@ (800785c <HAL_RCC_ClockConfig+0x260>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 030f 	and.w	r3, r3, #15
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d1ed      	bne.n	80077c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d008      	beq.n	8007806 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	4917      	ldr	r1, [pc, #92]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 8007802:	4313      	orrs	r3, r2
 8007804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0308 	and.w	r3, r3, #8
 800780e:	2b00      	cmp	r3, #0
 8007810:	d009      	beq.n	8007826 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007812:	4b13      	ldr	r3, [pc, #76]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	490f      	ldr	r1, [pc, #60]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 8007822:	4313      	orrs	r3, r2
 8007824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007826:	f000 f825 	bl	8007874 <HAL_RCC_GetSysClockFreq>
 800782a:	4602      	mov	r2, r0
 800782c:	4b0c      	ldr	r3, [pc, #48]	@ (8007860 <HAL_RCC_ClockConfig+0x264>)
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	091b      	lsrs	r3, r3, #4
 8007832:	f003 030f 	and.w	r3, r3, #15
 8007836:	490c      	ldr	r1, [pc, #48]	@ (8007868 <HAL_RCC_ClockConfig+0x26c>)
 8007838:	5ccb      	ldrb	r3, [r1, r3]
 800783a:	f003 031f 	and.w	r3, r3, #31
 800783e:	fa22 f303 	lsr.w	r3, r2, r3
 8007842:	4a0a      	ldr	r2, [pc, #40]	@ (800786c <HAL_RCC_ClockConfig+0x270>)
 8007844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007846:	4b0a      	ldr	r3, [pc, #40]	@ (8007870 <HAL_RCC_ClockConfig+0x274>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4618      	mov	r0, r3
 800784c:	f7fa ff60 	bl	8002710 <HAL_InitTick>
 8007850:	4603      	mov	r3, r0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	40022000 	.word	0x40022000
 8007860:	40021000 	.word	0x40021000
 8007864:	04c4b400 	.word	0x04c4b400
 8007868:	08011de4 	.word	0x08011de4
 800786c:	20000000 	.word	0x20000000
 8007870:	20000004 	.word	0x20000004

08007874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800787a:	4b2c      	ldr	r3, [pc, #176]	@ (800792c <HAL_RCC_GetSysClockFreq+0xb8>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 030c 	and.w	r3, r3, #12
 8007882:	2b04      	cmp	r3, #4
 8007884:	d102      	bne.n	800788c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007886:	4b2a      	ldr	r3, [pc, #168]	@ (8007930 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007888:	613b      	str	r3, [r7, #16]
 800788a:	e047      	b.n	800791c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800788c:	4b27      	ldr	r3, [pc, #156]	@ (800792c <HAL_RCC_GetSysClockFreq+0xb8>)
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f003 030c 	and.w	r3, r3, #12
 8007894:	2b08      	cmp	r3, #8
 8007896:	d102      	bne.n	800789e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007898:	4b26      	ldr	r3, [pc, #152]	@ (8007934 <HAL_RCC_GetSysClockFreq+0xc0>)
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	e03e      	b.n	800791c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800789e:	4b23      	ldr	r3, [pc, #140]	@ (800792c <HAL_RCC_GetSysClockFreq+0xb8>)
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f003 030c 	and.w	r3, r3, #12
 80078a6:	2b0c      	cmp	r3, #12
 80078a8:	d136      	bne.n	8007918 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078aa:	4b20      	ldr	r3, [pc, #128]	@ (800792c <HAL_RCC_GetSysClockFreq+0xb8>)
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f003 0303 	and.w	r3, r3, #3
 80078b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078b4:	4b1d      	ldr	r3, [pc, #116]	@ (800792c <HAL_RCC_GetSysClockFreq+0xb8>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	091b      	lsrs	r3, r3, #4
 80078ba:	f003 030f 	and.w	r3, r3, #15
 80078be:	3301      	adds	r3, #1
 80078c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d10c      	bne.n	80078e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078c8:	4a1a      	ldr	r2, [pc, #104]	@ (8007934 <HAL_RCC_GetSysClockFreq+0xc0>)
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d0:	4a16      	ldr	r2, [pc, #88]	@ (800792c <HAL_RCC_GetSysClockFreq+0xb8>)
 80078d2:	68d2      	ldr	r2, [r2, #12]
 80078d4:	0a12      	lsrs	r2, r2, #8
 80078d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80078da:	fb02 f303 	mul.w	r3, r2, r3
 80078de:	617b      	str	r3, [r7, #20]
      break;
 80078e0:	e00c      	b.n	80078fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078e2:	4a13      	ldr	r2, [pc, #76]	@ (8007930 <HAL_RCC_GetSysClockFreq+0xbc>)
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ea:	4a10      	ldr	r2, [pc, #64]	@ (800792c <HAL_RCC_GetSysClockFreq+0xb8>)
 80078ec:	68d2      	ldr	r2, [r2, #12]
 80078ee:	0a12      	lsrs	r2, r2, #8
 80078f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80078f4:	fb02 f303 	mul.w	r3, r2, r3
 80078f8:	617b      	str	r3, [r7, #20]
      break;
 80078fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078fc:	4b0b      	ldr	r3, [pc, #44]	@ (800792c <HAL_RCC_GetSysClockFreq+0xb8>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	0e5b      	lsrs	r3, r3, #25
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	3301      	adds	r3, #1
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	fbb2 f3f3 	udiv	r3, r2, r3
 8007914:	613b      	str	r3, [r7, #16]
 8007916:	e001      	b.n	800791c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800791c:	693b      	ldr	r3, [r7, #16]
}
 800791e:	4618      	mov	r0, r3
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40021000 	.word	0x40021000
 8007930:	00f42400 	.word	0x00f42400
 8007934:	016e3600 	.word	0x016e3600

08007938 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800793c:	4b03      	ldr	r3, [pc, #12]	@ (800794c <HAL_RCC_GetHCLKFreq+0x14>)
 800793e:	681b      	ldr	r3, [r3, #0]
}
 8007940:	4618      	mov	r0, r3
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	20000000 	.word	0x20000000

08007950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007954:	f7ff fff0 	bl	8007938 <HAL_RCC_GetHCLKFreq>
 8007958:	4602      	mov	r2, r0
 800795a:	4b06      	ldr	r3, [pc, #24]	@ (8007974 <HAL_RCC_GetPCLK1Freq+0x24>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	0a1b      	lsrs	r3, r3, #8
 8007960:	f003 0307 	and.w	r3, r3, #7
 8007964:	4904      	ldr	r1, [pc, #16]	@ (8007978 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007966:	5ccb      	ldrb	r3, [r1, r3]
 8007968:	f003 031f 	and.w	r3, r3, #31
 800796c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007970:	4618      	mov	r0, r3
 8007972:	bd80      	pop	{r7, pc}
 8007974:	40021000 	.word	0x40021000
 8007978:	08011df4 	.word	0x08011df4

0800797c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007980:	f7ff ffda 	bl	8007938 <HAL_RCC_GetHCLKFreq>
 8007984:	4602      	mov	r2, r0
 8007986:	4b06      	ldr	r3, [pc, #24]	@ (80079a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	0adb      	lsrs	r3, r3, #11
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	4904      	ldr	r1, [pc, #16]	@ (80079a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007992:	5ccb      	ldrb	r3, [r1, r3]
 8007994:	f003 031f 	and.w	r3, r3, #31
 8007998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800799c:	4618      	mov	r0, r3
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	40021000 	.word	0x40021000
 80079a4:	08011df4 	.word	0x08011df4

080079a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f003 0303 	and.w	r3, r3, #3
 80079b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	091b      	lsrs	r3, r3, #4
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	3301      	adds	r3, #1
 80079c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d10c      	bne.n	80079e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079cc:	4a17      	ldr	r2, [pc, #92]	@ (8007a2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d4:	4a14      	ldr	r2, [pc, #80]	@ (8007a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079d6:	68d2      	ldr	r2, [r2, #12]
 80079d8:	0a12      	lsrs	r2, r2, #8
 80079da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079de:	fb02 f303 	mul.w	r3, r2, r3
 80079e2:	617b      	str	r3, [r7, #20]
    break;
 80079e4:	e00c      	b.n	8007a00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079e6:	4a12      	ldr	r2, [pc, #72]	@ (8007a30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ee:	4a0e      	ldr	r2, [pc, #56]	@ (8007a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079f0:	68d2      	ldr	r2, [r2, #12]
 80079f2:	0a12      	lsrs	r2, r2, #8
 80079f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079f8:	fb02 f303 	mul.w	r3, r2, r3
 80079fc:	617b      	str	r3, [r7, #20]
    break;
 80079fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a00:	4b09      	ldr	r3, [pc, #36]	@ (8007a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	0e5b      	lsrs	r3, r3, #25
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007a1a:	687b      	ldr	r3, [r7, #4]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	371c      	adds	r7, #28
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	40021000 	.word	0x40021000
 8007a2c:	016e3600 	.word	0x016e3600
 8007a30:	00f42400 	.word	0x00f42400

08007a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a40:	2300      	movs	r3, #0
 8007a42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 8098 	beq.w	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a52:	2300      	movs	r3, #0
 8007a54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a56:	4b43      	ldr	r3, [pc, #268]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10d      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a62:	4b40      	ldr	r3, [pc, #256]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a66:	4a3f      	ldr	r2, [pc, #252]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a76:	60bb      	str	r3, [r7, #8]
 8007a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a39      	ldr	r2, [pc, #228]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a8a:	f7fa fe8d 	bl	80027a8 <HAL_GetTick>
 8007a8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a90:	e009      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a92:	f7fa fe89 	bl	80027a8 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d902      	bls.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	74fb      	strb	r3, [r7, #19]
        break;
 8007aa4:	e005      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aa6:	4b30      	ldr	r3, [pc, #192]	@ (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0ef      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007ab2:	7cfb      	ldrb	r3, [r7, #19]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d159      	bne.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ac2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d01e      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d019      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ad4:	4b23      	ldr	r3, [pc, #140]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ade:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ae0:	4b20      	ldr	r3, [pc, #128]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007af0:	4b1c      	ldr	r3, [pc, #112]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af6:	4a1b      	ldr	r2, [pc, #108]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b00:	4a18      	ldr	r2, [pc, #96]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d016      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b12:	f7fa fe49 	bl	80027a8 <HAL_GetTick>
 8007b16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b18:	e00b      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b1a:	f7fa fe45 	bl	80027a8 <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d902      	bls.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	74fb      	strb	r3, [r7, #19]
            break;
 8007b30:	e006      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b32:	4b0c      	ldr	r3, [pc, #48]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b38:	f003 0302 	and.w	r3, r3, #2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d0ec      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007b40:	7cfb      	ldrb	r3, [r7, #19]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10b      	bne.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b46:	4b07      	ldr	r3, [pc, #28]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b54:	4903      	ldr	r1, [pc, #12]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007b5c:	e008      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b5e:	7cfb      	ldrb	r3, [r7, #19]
 8007b60:	74bb      	strb	r3, [r7, #18]
 8007b62:	e005      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007b64:	40021000 	.word	0x40021000
 8007b68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b6c:	7cfb      	ldrb	r3, [r7, #19]
 8007b6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b70:	7c7b      	ldrb	r3, [r7, #17]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d105      	bne.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b76:	4ba6      	ldr	r3, [pc, #664]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b7a:	4aa5      	ldr	r2, [pc, #660]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b8e:	4ba0      	ldr	r3, [pc, #640]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b94:	f023 0203 	bic.w	r2, r3, #3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	499c      	ldr	r1, [pc, #624]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bb0:	4b97      	ldr	r3, [pc, #604]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bb6:	f023 020c 	bic.w	r2, r3, #12
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	4994      	ldr	r1, [pc, #592]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00a      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bd2:	4b8f      	ldr	r3, [pc, #572]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	498b      	ldr	r1, [pc, #556]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0308 	and.w	r3, r3, #8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bf4:	4b86      	ldr	r3, [pc, #536]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bfa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	4983      	ldr	r1, [pc, #524]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0320 	and.w	r3, r3, #32
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c16:	4b7e      	ldr	r3, [pc, #504]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c1c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	497a      	ldr	r1, [pc, #488]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c38:	4b75      	ldr	r3, [pc, #468]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c3e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	4972      	ldr	r1, [pc, #456]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	4969      	ldr	r1, [pc, #420]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c7c:	4b64      	ldr	r3, [pc, #400]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c82:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	4961      	ldr	r1, [pc, #388]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c9e:	4b5c      	ldr	r3, [pc, #368]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cac:	4958      	ldr	r1, [pc, #352]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d015      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007cc0:	4b53      	ldr	r3, [pc, #332]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cce:	4950      	ldr	r1, [pc, #320]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cde:	d105      	bne.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d015      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007cf8:	4b45      	ldr	r3, [pc, #276]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cfe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d06:	4942      	ldr	r1, [pc, #264]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d16:	d105      	bne.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d18:	4b3d      	ldr	r3, [pc, #244]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	4a3c      	ldr	r2, [pc, #240]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d22:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d015      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d30:	4b37      	ldr	r3, [pc, #220]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d36:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d3e:	4934      	ldr	r1, [pc, #208]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d4e:	d105      	bne.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d50:	4b2f      	ldr	r3, [pc, #188]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	4a2e      	ldr	r2, [pc, #184]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d5a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d015      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d68:	4b29      	ldr	r3, [pc, #164]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d76:	4926      	ldr	r1, [pc, #152]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d86:	d105      	bne.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d88:	4b21      	ldr	r3, [pc, #132]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	4a20      	ldr	r2, [pc, #128]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d92:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d015      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007da0:	4b1b      	ldr	r3, [pc, #108]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dae:	4918      	ldr	r1, [pc, #96]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dbe:	d105      	bne.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dc0:	4b13      	ldr	r3, [pc, #76]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	4a12      	ldr	r2, [pc, #72]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d015      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dde:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de6:	490a      	ldr	r1, [pc, #40]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007df2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007df6:	d105      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007df8:	4b05      	ldr	r3, [pc, #20]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	4a04      	ldr	r2, [pc, #16]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007e04:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3718      	adds	r7, #24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	40021000 	.word	0x40021000

08007e14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e09d      	b.n	8007f62 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d108      	bne.n	8007e40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e36:	d009      	beq.n	8007e4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	61da      	str	r2, [r3, #28]
 8007e3e:	e005      	b.n	8007e4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d106      	bne.n	8007e6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7f9 ff12 	bl	8001c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e8c:	d902      	bls.n	8007e94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60fb      	str	r3, [r7, #12]
 8007e92:	e002      	b.n	8007e9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007ea2:	d007      	beq.n	8007eb4 <HAL_SPI_Init+0xa0>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007eac:	d002      	beq.n	8007eb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	69db      	ldr	r3, [r3, #28]
 8007ee8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007eec:	431a      	orrs	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ef6:	ea42 0103 	orr.w	r1, r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	0c1b      	lsrs	r3, r3, #16
 8007f10:	f003 0204 	and.w	r2, r3, #4
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f18:	f003 0310 	and.w	r3, r3, #16
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f22:	f003 0308 	and.w	r3, r3, #8
 8007f26:	431a      	orrs	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007f30:	ea42 0103 	orr.w	r1, r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	69da      	ldr	r2, [r3, #28]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b08a      	sub	sp, #40	@ 0x28
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	60b9      	str	r1, [r7, #8]
 8007f74:	607a      	str	r2, [r7, #4]
 8007f76:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d101      	bne.n	8007f90 <HAL_SPI_TransmitReceive+0x26>
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	e20a      	b.n	80083a6 <HAL_SPI_TransmitReceive+0x43c>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f98:	f7fa fc06 	bl	80027a8 <HAL_GetTick>
 8007f9c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007fa4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007fac:	887b      	ldrh	r3, [r7, #2]
 8007fae:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007fb0:	887b      	ldrh	r3, [r7, #2]
 8007fb2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007fb4:	7efb      	ldrb	r3, [r7, #27]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d00e      	beq.n	8007fd8 <HAL_SPI_TransmitReceive+0x6e>
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fc0:	d106      	bne.n	8007fd0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d102      	bne.n	8007fd0 <HAL_SPI_TransmitReceive+0x66>
 8007fca:	7efb      	ldrb	r3, [r7, #27]
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d003      	beq.n	8007fd8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007fd6:	e1e0      	b.n	800839a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d005      	beq.n	8007fea <HAL_SPI_TransmitReceive+0x80>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <HAL_SPI_TransmitReceive+0x80>
 8007fe4:	887b      	ldrh	r3, [r7, #2]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d103      	bne.n	8007ff2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007ff0:	e1d3      	b.n	800839a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	d003      	beq.n	8008006 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2205      	movs	r2, #5
 8008002:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	887a      	ldrh	r2, [r7, #2]
 8008016:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	887a      	ldrh	r2, [r7, #2]
 800801e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	887a      	ldrh	r2, [r7, #2]
 800802c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	887a      	ldrh	r2, [r7, #2]
 8008032:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008048:	d802      	bhi.n	8008050 <HAL_SPI_TransmitReceive+0xe6>
 800804a:	8a3b      	ldrh	r3, [r7, #16]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d908      	bls.n	8008062 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800805e:	605a      	str	r2, [r3, #4]
 8008060:	e007      	b.n	8008072 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008070:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800807c:	2b40      	cmp	r3, #64	@ 0x40
 800807e:	d007      	beq.n	8008090 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800808e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008098:	f240 8081 	bls.w	800819e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <HAL_SPI_TransmitReceive+0x140>
 80080a4:	8a7b      	ldrh	r3, [r7, #18]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d16d      	bne.n	8008186 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ae:	881a      	ldrh	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ba:	1c9a      	adds	r2, r3, #2
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080ce:	e05a      	b.n	8008186 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d11b      	bne.n	8008116 <HAL_SPI_TransmitReceive+0x1ac>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d016      	beq.n	8008116 <HAL_SPI_TransmitReceive+0x1ac>
 80080e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d113      	bne.n	8008116 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f2:	881a      	ldrh	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fe:	1c9a      	adds	r2, r3, #2
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008108:	b29b      	uxth	r3, r3
 800810a:	3b01      	subs	r3, #1
 800810c:	b29a      	uxth	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b01      	cmp	r3, #1
 8008122:	d11c      	bne.n	800815e <HAL_SPI_TransmitReceive+0x1f4>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800812a:	b29b      	uxth	r3, r3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d016      	beq.n	800815e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68da      	ldr	r2, [r3, #12]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800813a:	b292      	uxth	r2, r2
 800813c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008142:	1c9a      	adds	r2, r3, #2
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800814e:	b29b      	uxth	r3, r3
 8008150:	3b01      	subs	r3, #1
 8008152:	b29a      	uxth	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800815a:	2301      	movs	r3, #1
 800815c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800815e:	f7fa fb23 	bl	80027a8 <HAL_GetTick>
 8008162:	4602      	mov	r2, r0
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800816a:	429a      	cmp	r2, r3
 800816c:	d80b      	bhi.n	8008186 <HAL_SPI_TransmitReceive+0x21c>
 800816e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008174:	d007      	beq.n	8008186 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008184:	e109      	b.n	800839a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800818a:	b29b      	uxth	r3, r3
 800818c:	2b00      	cmp	r3, #0
 800818e:	d19f      	bne.n	80080d0 <HAL_SPI_TransmitReceive+0x166>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008196:	b29b      	uxth	r3, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	d199      	bne.n	80080d0 <HAL_SPI_TransmitReceive+0x166>
 800819c:	e0e3      	b.n	8008366 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <HAL_SPI_TransmitReceive+0x244>
 80081a6:	8a7b      	ldrh	r3, [r7, #18]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	f040 80cf 	bne.w	800834c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d912      	bls.n	80081de <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081bc:	881a      	ldrh	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c8:	1c9a      	adds	r2, r3, #2
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	3b02      	subs	r3, #2
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80081dc:	e0b6      	b.n	800834c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	330c      	adds	r3, #12
 80081e8:	7812      	ldrb	r2, [r2, #0]
 80081ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f0:	1c5a      	adds	r2, r3, #1
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	3b01      	subs	r3, #1
 80081fe:	b29a      	uxth	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008204:	e0a2      	b.n	800834c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f003 0302 	and.w	r3, r3, #2
 8008210:	2b02      	cmp	r3, #2
 8008212:	d134      	bne.n	800827e <HAL_SPI_TransmitReceive+0x314>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008218:	b29b      	uxth	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d02f      	beq.n	800827e <HAL_SPI_TransmitReceive+0x314>
 800821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008220:	2b01      	cmp	r3, #1
 8008222:	d12c      	bne.n	800827e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008228:	b29b      	uxth	r3, r3
 800822a:	2b01      	cmp	r3, #1
 800822c:	d912      	bls.n	8008254 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008232:	881a      	ldrh	r2, [r3, #0]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800823e:	1c9a      	adds	r2, r3, #2
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008248:	b29b      	uxth	r3, r3
 800824a:	3b02      	subs	r3, #2
 800824c:	b29a      	uxth	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008252:	e012      	b.n	800827a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	330c      	adds	r3, #12
 800825e:	7812      	ldrb	r2, [r2, #0]
 8008260:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008270:	b29b      	uxth	r3, r3
 8008272:	3b01      	subs	r3, #1
 8008274:	b29a      	uxth	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b01      	cmp	r3, #1
 800828a:	d148      	bne.n	800831e <HAL_SPI_TransmitReceive+0x3b4>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008292:	b29b      	uxth	r3, r3
 8008294:	2b00      	cmp	r3, #0
 8008296:	d042      	beq.n	800831e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800829e:	b29b      	uxth	r3, r3
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d923      	bls.n	80082ec <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ae:	b292      	uxth	r2, r2
 80082b0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b6:	1c9a      	adds	r2, r3, #2
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	3b02      	subs	r3, #2
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d81f      	bhi.n	800831a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80082e8:	605a      	str	r2, [r3, #4]
 80082ea:	e016      	b.n	800831a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f103 020c 	add.w	r2, r3, #12
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f8:	7812      	ldrb	r2, [r2, #0]
 80082fa:	b2d2      	uxtb	r2, r2
 80082fc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008302:	1c5a      	adds	r2, r3, #1
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800830e:	b29b      	uxth	r3, r3
 8008310:	3b01      	subs	r3, #1
 8008312:	b29a      	uxth	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800831a:	2301      	movs	r3, #1
 800831c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800831e:	f7fa fa43 	bl	80027a8 <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800832a:	429a      	cmp	r2, r3
 800832c:	d803      	bhi.n	8008336 <HAL_SPI_TransmitReceive+0x3cc>
 800832e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008334:	d102      	bne.n	800833c <HAL_SPI_TransmitReceive+0x3d2>
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	2b00      	cmp	r3, #0
 800833a:	d107      	bne.n	800834c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800834a:	e026      	b.n	800839a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008350:	b29b      	uxth	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	f47f af57 	bne.w	8008206 <HAL_SPI_TransmitReceive+0x29c>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800835e:	b29b      	uxth	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	f47f af50 	bne.w	8008206 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008366:	69fa      	ldr	r2, [r7, #28]
 8008368:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 f93e 	bl	80085ec <SPI_EndRxTxTransaction>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2220      	movs	r2, #32
 8008380:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008390:	e003      	b.n	800839a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80083a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3728      	adds	r7, #40	@ 0x28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	4613      	mov	r3, r2
 80083be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80083c0:	f7fa f9f2 	bl	80027a8 <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c8:	1a9b      	subs	r3, r3, r2
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	4413      	add	r3, r2
 80083ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083d0:	f7fa f9ea 	bl	80027a8 <HAL_GetTick>
 80083d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083d6:	4b39      	ldr	r3, [pc, #228]	@ (80084bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	015b      	lsls	r3, r3, #5
 80083dc:	0d1b      	lsrs	r3, r3, #20
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	fb02 f303 	mul.w	r3, r2, r3
 80083e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083e6:	e054      	b.n	8008492 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ee:	d050      	beq.n	8008492 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083f0:	f7fa f9da 	bl	80027a8 <HAL_GetTick>
 80083f4:	4602      	mov	r2, r0
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	69fa      	ldr	r2, [r7, #28]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d902      	bls.n	8008406 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d13d      	bne.n	8008482 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008414:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800841e:	d111      	bne.n	8008444 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008428:	d004      	beq.n	8008434 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008432:	d107      	bne.n	8008444 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008442:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008448:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800844c:	d10f      	bne.n	800846e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800846c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e017      	b.n	80084b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d101      	bne.n	800848c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	3b01      	subs	r3, #1
 8008490:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	4013      	ands	r3, r2
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	429a      	cmp	r2, r3
 80084a0:	bf0c      	ite	eq
 80084a2:	2301      	moveq	r3, #1
 80084a4:	2300      	movne	r3, #0
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	461a      	mov	r2, r3
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d19b      	bne.n	80083e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3720      	adds	r7, #32
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20000000 	.word	0x20000000

080084c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	@ 0x28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80084ce:	2300      	movs	r3, #0
 80084d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80084d2:	f7fa f969 	bl	80027a8 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084da:	1a9b      	subs	r3, r3, r2
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	4413      	add	r3, r2
 80084e0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80084e2:	f7fa f961 	bl	80027a8 <HAL_GetTick>
 80084e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	330c      	adds	r3, #12
 80084ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80084f0:	4b3d      	ldr	r3, [pc, #244]	@ (80085e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	4613      	mov	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	00da      	lsls	r2, r3, #3
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	0d1b      	lsrs	r3, r3, #20
 8008500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008502:	fb02 f303 	mul.w	r3, r2, r3
 8008506:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008508:	e060      	b.n	80085cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008510:	d107      	bne.n	8008522 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d104      	bne.n	8008522 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	b2db      	uxtb	r3, r3
 800851e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008520:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008528:	d050      	beq.n	80085cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800852a:	f7fa f93d 	bl	80027a8 <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008536:	429a      	cmp	r2, r3
 8008538:	d902      	bls.n	8008540 <SPI_WaitFifoStateUntilTimeout+0x80>
 800853a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853c:	2b00      	cmp	r3, #0
 800853e:	d13d      	bne.n	80085bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800854e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008558:	d111      	bne.n	800857e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008562:	d004      	beq.n	800856e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800856c:	d107      	bne.n	800857e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800857c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008582:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008586:	d10f      	bne.n	80085a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e010      	b.n	80085de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689a      	ldr	r2, [r3, #8]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	4013      	ands	r3, r2
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d196      	bne.n	800850a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3728      	adds	r7, #40	@ 0x28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20000000 	.word	0x20000000

080085ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af02      	add	r7, sp, #8
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2200      	movs	r2, #0
 8008600:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f7ff ff5b 	bl	80084c0 <SPI_WaitFifoStateUntilTimeout>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d007      	beq.n	8008620 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008614:	f043 0220 	orr.w	r2, r3, #32
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e027      	b.n	8008670 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2200      	movs	r2, #0
 8008628:	2180      	movs	r1, #128	@ 0x80
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f7ff fec0 	bl	80083b0 <SPI_WaitFlagStateUntilTimeout>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d007      	beq.n	8008646 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800863a:	f043 0220 	orr.w	r2, r3, #32
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e014      	b.n	8008670 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2200      	movs	r2, #0
 800864e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f7ff ff34 	bl	80084c0 <SPI_WaitFifoStateUntilTimeout>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d007      	beq.n	800866e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008662:	f043 0220 	orr.w	r2, r3, #32
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e000      	b.n	8008670 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e049      	b.n	800871e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d106      	bne.n	80086a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7f9 fe3a 	bl	8002318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3304      	adds	r3, #4
 80086b4:	4619      	mov	r1, r3
 80086b6:	4610      	mov	r0, r2
 80086b8:	f000 fe16 	bl	80092e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
	...

08008728 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b01      	cmp	r3, #1
 800873a:	d001      	beq.n	8008740 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e042      	b.n	80087c6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2202      	movs	r2, #2
 8008744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a21      	ldr	r2, [pc, #132]	@ (80087d4 <HAL_TIM_Base_Start+0xac>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d018      	beq.n	8008784 <HAL_TIM_Base_Start+0x5c>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800875a:	d013      	beq.n	8008784 <HAL_TIM_Base_Start+0x5c>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a1d      	ldr	r2, [pc, #116]	@ (80087d8 <HAL_TIM_Base_Start+0xb0>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d00e      	beq.n	8008784 <HAL_TIM_Base_Start+0x5c>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a1c      	ldr	r2, [pc, #112]	@ (80087dc <HAL_TIM_Base_Start+0xb4>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d009      	beq.n	8008784 <HAL_TIM_Base_Start+0x5c>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a1a      	ldr	r2, [pc, #104]	@ (80087e0 <HAL_TIM_Base_Start+0xb8>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d004      	beq.n	8008784 <HAL_TIM_Base_Start+0x5c>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a19      	ldr	r2, [pc, #100]	@ (80087e4 <HAL_TIM_Base_Start+0xbc>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d115      	bne.n	80087b0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	4b17      	ldr	r3, [pc, #92]	@ (80087e8 <HAL_TIM_Base_Start+0xc0>)
 800878c:	4013      	ands	r3, r2
 800878e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2b06      	cmp	r3, #6
 8008794:	d015      	beq.n	80087c2 <HAL_TIM_Base_Start+0x9a>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800879c:	d011      	beq.n	80087c2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f042 0201 	orr.w	r2, r2, #1
 80087ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ae:	e008      	b.n	80087c2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f042 0201 	orr.w	r2, r2, #1
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	e000      	b.n	80087c4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	40012c00 	.word	0x40012c00
 80087d8:	40000400 	.word	0x40000400
 80087dc:	40000800 	.word	0x40000800
 80087e0:	40013400 	.word	0x40013400
 80087e4:	40014000 	.word	0x40014000
 80087e8:	00010007 	.word	0x00010007

080087ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d101      	bne.n	80087fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e049      	b.n	8008892 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d106      	bne.n	8008818 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f841 	bl	800889a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2202      	movs	r2, #2
 800881c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3304      	adds	r3, #4
 8008828:	4619      	mov	r1, r3
 800882a:	4610      	mov	r0, r2
 800882c:	f000 fd5c 	bl	80092e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800889a:	b480      	push	{r7}
 800889c:	b083      	sub	sp, #12
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80088a2:	bf00      	nop
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
	...

080088b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d109      	bne.n	80088d4 <HAL_TIM_PWM_Start+0x24>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	bf14      	ite	ne
 80088cc:	2301      	movne	r3, #1
 80088ce:	2300      	moveq	r3, #0
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	e03c      	b.n	800894e <HAL_TIM_PWM_Start+0x9e>
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	d109      	bne.n	80088ee <HAL_TIM_PWM_Start+0x3e>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	bf14      	ite	ne
 80088e6:	2301      	movne	r3, #1
 80088e8:	2300      	moveq	r3, #0
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	e02f      	b.n	800894e <HAL_TIM_PWM_Start+0x9e>
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	2b08      	cmp	r3, #8
 80088f2:	d109      	bne.n	8008908 <HAL_TIM_PWM_Start+0x58>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	bf14      	ite	ne
 8008900:	2301      	movne	r3, #1
 8008902:	2300      	moveq	r3, #0
 8008904:	b2db      	uxtb	r3, r3
 8008906:	e022      	b.n	800894e <HAL_TIM_PWM_Start+0x9e>
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	2b0c      	cmp	r3, #12
 800890c:	d109      	bne.n	8008922 <HAL_TIM_PWM_Start+0x72>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b01      	cmp	r3, #1
 8008918:	bf14      	ite	ne
 800891a:	2301      	movne	r3, #1
 800891c:	2300      	moveq	r3, #0
 800891e:	b2db      	uxtb	r3, r3
 8008920:	e015      	b.n	800894e <HAL_TIM_PWM_Start+0x9e>
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2b10      	cmp	r3, #16
 8008926:	d109      	bne.n	800893c <HAL_TIM_PWM_Start+0x8c>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b01      	cmp	r3, #1
 8008932:	bf14      	ite	ne
 8008934:	2301      	movne	r3, #1
 8008936:	2300      	moveq	r3, #0
 8008938:	b2db      	uxtb	r3, r3
 800893a:	e008      	b.n	800894e <HAL_TIM_PWM_Start+0x9e>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b01      	cmp	r3, #1
 8008946:	bf14      	ite	ne
 8008948:	2301      	movne	r3, #1
 800894a:	2300      	moveq	r3, #0
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e097      	b.n	8008a86 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d104      	bne.n	8008966 <HAL_TIM_PWM_Start+0xb6>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2202      	movs	r2, #2
 8008960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008964:	e023      	b.n	80089ae <HAL_TIM_PWM_Start+0xfe>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b04      	cmp	r3, #4
 800896a:	d104      	bne.n	8008976 <HAL_TIM_PWM_Start+0xc6>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008974:	e01b      	b.n	80089ae <HAL_TIM_PWM_Start+0xfe>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b08      	cmp	r3, #8
 800897a:	d104      	bne.n	8008986 <HAL_TIM_PWM_Start+0xd6>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2202      	movs	r2, #2
 8008980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008984:	e013      	b.n	80089ae <HAL_TIM_PWM_Start+0xfe>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b0c      	cmp	r3, #12
 800898a:	d104      	bne.n	8008996 <HAL_TIM_PWM_Start+0xe6>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008994:	e00b      	b.n	80089ae <HAL_TIM_PWM_Start+0xfe>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b10      	cmp	r3, #16
 800899a:	d104      	bne.n	80089a6 <HAL_TIM_PWM_Start+0xf6>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2202      	movs	r2, #2
 80089a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089a4:	e003      	b.n	80089ae <HAL_TIM_PWM_Start+0xfe>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2202      	movs	r2, #2
 80089aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2201      	movs	r2, #1
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f001 f92c 	bl	8009c14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a33      	ldr	r2, [pc, #204]	@ (8008a90 <HAL_TIM_PWM_Start+0x1e0>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d013      	beq.n	80089ee <HAL_TIM_PWM_Start+0x13e>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a32      	ldr	r2, [pc, #200]	@ (8008a94 <HAL_TIM_PWM_Start+0x1e4>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d00e      	beq.n	80089ee <HAL_TIM_PWM_Start+0x13e>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a30      	ldr	r2, [pc, #192]	@ (8008a98 <HAL_TIM_PWM_Start+0x1e8>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d009      	beq.n	80089ee <HAL_TIM_PWM_Start+0x13e>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a2f      	ldr	r2, [pc, #188]	@ (8008a9c <HAL_TIM_PWM_Start+0x1ec>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d004      	beq.n	80089ee <HAL_TIM_PWM_Start+0x13e>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a2d      	ldr	r2, [pc, #180]	@ (8008aa0 <HAL_TIM_PWM_Start+0x1f0>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d101      	bne.n	80089f2 <HAL_TIM_PWM_Start+0x142>
 80089ee:	2301      	movs	r3, #1
 80089f0:	e000      	b.n	80089f4 <HAL_TIM_PWM_Start+0x144>
 80089f2:	2300      	movs	r3, #0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d007      	beq.n	8008a08 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a06:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a20      	ldr	r2, [pc, #128]	@ (8008a90 <HAL_TIM_PWM_Start+0x1e0>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d018      	beq.n	8008a44 <HAL_TIM_PWM_Start+0x194>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a1a:	d013      	beq.n	8008a44 <HAL_TIM_PWM_Start+0x194>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a20      	ldr	r2, [pc, #128]	@ (8008aa4 <HAL_TIM_PWM_Start+0x1f4>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d00e      	beq.n	8008a44 <HAL_TIM_PWM_Start+0x194>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8008aa8 <HAL_TIM_PWM_Start+0x1f8>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d009      	beq.n	8008a44 <HAL_TIM_PWM_Start+0x194>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a17      	ldr	r2, [pc, #92]	@ (8008a94 <HAL_TIM_PWM_Start+0x1e4>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d004      	beq.n	8008a44 <HAL_TIM_PWM_Start+0x194>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a16      	ldr	r2, [pc, #88]	@ (8008a98 <HAL_TIM_PWM_Start+0x1e8>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d115      	bne.n	8008a70 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	689a      	ldr	r2, [r3, #8]
 8008a4a:	4b18      	ldr	r3, [pc, #96]	@ (8008aac <HAL_TIM_PWM_Start+0x1fc>)
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2b06      	cmp	r3, #6
 8008a54:	d015      	beq.n	8008a82 <HAL_TIM_PWM_Start+0x1d2>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a5c:	d011      	beq.n	8008a82 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f042 0201 	orr.w	r2, r2, #1
 8008a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a6e:	e008      	b.n	8008a82 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f042 0201 	orr.w	r2, r2, #1
 8008a7e:	601a      	str	r2, [r3, #0]
 8008a80:	e000      	b.n	8008a84 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	40012c00 	.word	0x40012c00
 8008a94:	40013400 	.word	0x40013400
 8008a98:	40014000 	.word	0x40014000
 8008a9c:	40014400 	.word	0x40014400
 8008aa0:	40014800 	.word	0x40014800
 8008aa4:	40000400 	.word	0x40000400
 8008aa8:	40000800 	.word	0x40000800
 8008aac:	00010007 	.word	0x00010007

08008ab0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	6839      	ldr	r1, [r7, #0]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f001 f8a6 	bl	8009c14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a3e      	ldr	r2, [pc, #248]	@ (8008bc8 <HAL_TIM_PWM_Stop+0x118>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d013      	beq.n	8008afa <HAL_TIM_PWM_Stop+0x4a>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a3d      	ldr	r2, [pc, #244]	@ (8008bcc <HAL_TIM_PWM_Stop+0x11c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d00e      	beq.n	8008afa <HAL_TIM_PWM_Stop+0x4a>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a3b      	ldr	r2, [pc, #236]	@ (8008bd0 <HAL_TIM_PWM_Stop+0x120>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d009      	beq.n	8008afa <HAL_TIM_PWM_Stop+0x4a>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a3a      	ldr	r2, [pc, #232]	@ (8008bd4 <HAL_TIM_PWM_Stop+0x124>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d004      	beq.n	8008afa <HAL_TIM_PWM_Stop+0x4a>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a38      	ldr	r2, [pc, #224]	@ (8008bd8 <HAL_TIM_PWM_Stop+0x128>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d101      	bne.n	8008afe <HAL_TIM_PWM_Stop+0x4e>
 8008afa:	2301      	movs	r3, #1
 8008afc:	e000      	b.n	8008b00 <HAL_TIM_PWM_Stop+0x50>
 8008afe:	2300      	movs	r3, #0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d017      	beq.n	8008b34 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6a1a      	ldr	r2, [r3, #32]
 8008b0a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008b0e:	4013      	ands	r3, r2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10f      	bne.n	8008b34 <HAL_TIM_PWM_Stop+0x84>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6a1a      	ldr	r2, [r3, #32]
 8008b1a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008b1e:	4013      	ands	r3, r2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d107      	bne.n	8008b34 <HAL_TIM_PWM_Stop+0x84>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b32:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6a1a      	ldr	r2, [r3, #32]
 8008b3a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008b3e:	4013      	ands	r3, r2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10f      	bne.n	8008b64 <HAL_TIM_PWM_Stop+0xb4>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6a1a      	ldr	r2, [r3, #32]
 8008b4a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008b4e:	4013      	ands	r3, r2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d107      	bne.n	8008b64 <HAL_TIM_PWM_Stop+0xb4>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f022 0201 	bic.w	r2, r2, #1
 8008b62:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d104      	bne.n	8008b74 <HAL_TIM_PWM_Stop+0xc4>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b72:	e023      	b.n	8008bbc <HAL_TIM_PWM_Stop+0x10c>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	d104      	bne.n	8008b84 <HAL_TIM_PWM_Stop+0xd4>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b82:	e01b      	b.n	8008bbc <HAL_TIM_PWM_Stop+0x10c>
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	2b08      	cmp	r3, #8
 8008b88:	d104      	bne.n	8008b94 <HAL_TIM_PWM_Stop+0xe4>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b92:	e013      	b.n	8008bbc <HAL_TIM_PWM_Stop+0x10c>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b0c      	cmp	r3, #12
 8008b98:	d104      	bne.n	8008ba4 <HAL_TIM_PWM_Stop+0xf4>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ba2:	e00b      	b.n	8008bbc <HAL_TIM_PWM_Stop+0x10c>
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	2b10      	cmp	r3, #16
 8008ba8:	d104      	bne.n	8008bb4 <HAL_TIM_PWM_Stop+0x104>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bb2:	e003      	b.n	8008bbc <HAL_TIM_PWM_Stop+0x10c>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	40012c00 	.word	0x40012c00
 8008bcc:	40013400 	.word	0x40013400
 8008bd0:	40014000 	.word	0x40014000
 8008bd4:	40014400 	.word	0x40014400
 8008bd8:	40014800 	.word	0x40014800

08008bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	f003 0302 	and.w	r3, r3, #2
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d020      	beq.n	8008c40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d01b      	beq.n	8008c40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f06f 0202 	mvn.w	r2, #2
 8008c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	f003 0303 	and.w	r3, r3, #3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f003 fe30 	bl	800c88c <HAL_TIM_IC_CaptureCallback>
 8008c2c:	e005      	b.n	8008c3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fb3c 	bl	80092ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fb43 	bl	80092c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	f003 0304 	and.w	r3, r3, #4
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d020      	beq.n	8008c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f003 0304 	and.w	r3, r3, #4
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d01b      	beq.n	8008c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f06f 0204 	mvn.w	r2, #4
 8008c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2202      	movs	r2, #2
 8008c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d003      	beq.n	8008c7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f003 fe0a 	bl	800c88c <HAL_TIM_IC_CaptureCallback>
 8008c78:	e005      	b.n	8008c86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fb16 	bl	80092ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fb1d 	bl	80092c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	f003 0308 	and.w	r3, r3, #8
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d020      	beq.n	8008cd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f003 0308 	and.w	r3, r3, #8
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01b      	beq.n	8008cd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f06f 0208 	mvn.w	r2, #8
 8008ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2204      	movs	r2, #4
 8008cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	f003 0303 	and.w	r3, r3, #3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d003      	beq.n	8008cc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f003 fde4 	bl	800c88c <HAL_TIM_IC_CaptureCallback>
 8008cc4:	e005      	b.n	8008cd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 faf0 	bl	80092ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 faf7 	bl	80092c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	f003 0310 	and.w	r3, r3, #16
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d020      	beq.n	8008d24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f003 0310 	and.w	r3, r3, #16
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01b      	beq.n	8008d24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f06f 0210 	mvn.w	r2, #16
 8008cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2208      	movs	r2, #8
 8008cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	69db      	ldr	r3, [r3, #28]
 8008d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f003 fdbe 	bl	800c88c <HAL_TIM_IC_CaptureCallback>
 8008d10:	e005      	b.n	8008d1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 faca 	bl	80092ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fad1 	bl	80092c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	f003 0301 	and.w	r3, r3, #1
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00c      	beq.n	8008d48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d007      	beq.n	8008d48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f06f 0201 	mvn.w	r2, #1
 8008d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 faa8 	bl	8009298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d104      	bne.n	8008d5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00c      	beq.n	8008d76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f001 fbbf 	bl	800a4f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00c      	beq.n	8008d9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d007      	beq.n	8008d9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f001 fbb7 	bl	800a508 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00c      	beq.n	8008dbe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d007      	beq.n	8008dbe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fa8b 	bl	80092d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	f003 0320 	and.w	r3, r3, #32
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00c      	beq.n	8008de2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f003 0320 	and.w	r3, r3, #32
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d007      	beq.n	8008de2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f06f 0220 	mvn.w	r2, #32
 8008dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 fb7f 	bl	800a4e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00c      	beq.n	8008e06 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d007      	beq.n	8008e06 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f001 fb8b 	bl	800a51c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00c      	beq.n	8008e2a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d007      	beq.n	8008e2a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f001 fb83 	bl	800a530 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00c      	beq.n	8008e4e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d007      	beq.n	8008e4e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f001 fb7b 	bl	800a544 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00c      	beq.n	8008e72 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d007      	beq.n	8008e72 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f001 fb73 	bl	800a558 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e72:	bf00      	nop
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
	...

08008e7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d101      	bne.n	8008e9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e96:	2302      	movs	r3, #2
 8008e98:	e0ff      	b.n	800909a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b14      	cmp	r3, #20
 8008ea6:	f200 80f0 	bhi.w	800908a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb0:	08008f05 	.word	0x08008f05
 8008eb4:	0800908b 	.word	0x0800908b
 8008eb8:	0800908b 	.word	0x0800908b
 8008ebc:	0800908b 	.word	0x0800908b
 8008ec0:	08008f45 	.word	0x08008f45
 8008ec4:	0800908b 	.word	0x0800908b
 8008ec8:	0800908b 	.word	0x0800908b
 8008ecc:	0800908b 	.word	0x0800908b
 8008ed0:	08008f87 	.word	0x08008f87
 8008ed4:	0800908b 	.word	0x0800908b
 8008ed8:	0800908b 	.word	0x0800908b
 8008edc:	0800908b 	.word	0x0800908b
 8008ee0:	08008fc7 	.word	0x08008fc7
 8008ee4:	0800908b 	.word	0x0800908b
 8008ee8:	0800908b 	.word	0x0800908b
 8008eec:	0800908b 	.word	0x0800908b
 8008ef0:	08009009 	.word	0x08009009
 8008ef4:	0800908b 	.word	0x0800908b
 8008ef8:	0800908b 	.word	0x0800908b
 8008efc:	0800908b 	.word	0x0800908b
 8008f00:	08009049 	.word	0x08009049
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68b9      	ldr	r1, [r7, #8]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fa88 	bl	8009420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	699a      	ldr	r2, [r3, #24]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f042 0208 	orr.w	r2, r2, #8
 8008f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	699a      	ldr	r2, [r3, #24]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 0204 	bic.w	r2, r2, #4
 8008f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6999      	ldr	r1, [r3, #24]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	691a      	ldr	r2, [r3, #16]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	619a      	str	r2, [r3, #24]
      break;
 8008f42:	e0a5      	b.n	8009090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68b9      	ldr	r1, [r7, #8]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 faf8 	bl	8009540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	699a      	ldr	r2, [r3, #24]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	699a      	ldr	r2, [r3, #24]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6999      	ldr	r1, [r3, #24]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	021a      	lsls	r2, r3, #8
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	619a      	str	r2, [r3, #24]
      break;
 8008f84:	e084      	b.n	8009090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68b9      	ldr	r1, [r7, #8]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 fb61 	bl	8009654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	69da      	ldr	r2, [r3, #28]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f042 0208 	orr.w	r2, r2, #8
 8008fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	69da      	ldr	r2, [r3, #28]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f022 0204 	bic.w	r2, r2, #4
 8008fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	69d9      	ldr	r1, [r3, #28]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	691a      	ldr	r2, [r3, #16]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	61da      	str	r2, [r3, #28]
      break;
 8008fc4:	e064      	b.n	8009090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68b9      	ldr	r1, [r7, #8]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 fbc9 	bl	8009764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	69da      	ldr	r2, [r3, #28]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	69da      	ldr	r2, [r3, #28]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	69d9      	ldr	r1, [r3, #28]
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	021a      	lsls	r2, r3, #8
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	61da      	str	r2, [r3, #28]
      break;
 8009006:	e043      	b.n	8009090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68b9      	ldr	r1, [r7, #8]
 800900e:	4618      	mov	r0, r3
 8009010:	f000 fc32 	bl	8009878 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f042 0208 	orr.w	r2, r2, #8
 8009022:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 0204 	bic.w	r2, r2, #4
 8009032:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	691a      	ldr	r2, [r3, #16]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009046:	e023      	b.n	8009090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68b9      	ldr	r1, [r7, #8]
 800904e:	4618      	mov	r0, r3
 8009050:	f000 fc76 	bl	8009940 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009062:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009072:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	021a      	lsls	r2, r3, #8
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	430a      	orrs	r2, r1
 8009086:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009088:	e002      	b.n	8009090 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	75fb      	strb	r3, [r7, #23]
      break;
 800908e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009098:	7dfb      	ldrb	r3, [r7, #23]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3718      	adds	r7, #24
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop

080090a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d101      	bne.n	80090c0 <HAL_TIM_ConfigClockSource+0x1c>
 80090bc:	2302      	movs	r3, #2
 80090be:	e0de      	b.n	800927e <HAL_TIM_ConfigClockSource+0x1da>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80090de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80090e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a63      	ldr	r2, [pc, #396]	@ (8009288 <HAL_TIM_ConfigClockSource+0x1e4>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	f000 80a9 	beq.w	8009252 <HAL_TIM_ConfigClockSource+0x1ae>
 8009100:	4a61      	ldr	r2, [pc, #388]	@ (8009288 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009102:	4293      	cmp	r3, r2
 8009104:	f200 80ae 	bhi.w	8009264 <HAL_TIM_ConfigClockSource+0x1c0>
 8009108:	4a60      	ldr	r2, [pc, #384]	@ (800928c <HAL_TIM_ConfigClockSource+0x1e8>)
 800910a:	4293      	cmp	r3, r2
 800910c:	f000 80a1 	beq.w	8009252 <HAL_TIM_ConfigClockSource+0x1ae>
 8009110:	4a5e      	ldr	r2, [pc, #376]	@ (800928c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009112:	4293      	cmp	r3, r2
 8009114:	f200 80a6 	bhi.w	8009264 <HAL_TIM_ConfigClockSource+0x1c0>
 8009118:	4a5d      	ldr	r2, [pc, #372]	@ (8009290 <HAL_TIM_ConfigClockSource+0x1ec>)
 800911a:	4293      	cmp	r3, r2
 800911c:	f000 8099 	beq.w	8009252 <HAL_TIM_ConfigClockSource+0x1ae>
 8009120:	4a5b      	ldr	r2, [pc, #364]	@ (8009290 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009122:	4293      	cmp	r3, r2
 8009124:	f200 809e 	bhi.w	8009264 <HAL_TIM_ConfigClockSource+0x1c0>
 8009128:	4a5a      	ldr	r2, [pc, #360]	@ (8009294 <HAL_TIM_ConfigClockSource+0x1f0>)
 800912a:	4293      	cmp	r3, r2
 800912c:	f000 8091 	beq.w	8009252 <HAL_TIM_ConfigClockSource+0x1ae>
 8009130:	4a58      	ldr	r2, [pc, #352]	@ (8009294 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009132:	4293      	cmp	r3, r2
 8009134:	f200 8096 	bhi.w	8009264 <HAL_TIM_ConfigClockSource+0x1c0>
 8009138:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800913c:	f000 8089 	beq.w	8009252 <HAL_TIM_ConfigClockSource+0x1ae>
 8009140:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009144:	f200 808e 	bhi.w	8009264 <HAL_TIM_ConfigClockSource+0x1c0>
 8009148:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800914c:	d03e      	beq.n	80091cc <HAL_TIM_ConfigClockSource+0x128>
 800914e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009152:	f200 8087 	bhi.w	8009264 <HAL_TIM_ConfigClockSource+0x1c0>
 8009156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800915a:	f000 8086 	beq.w	800926a <HAL_TIM_ConfigClockSource+0x1c6>
 800915e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009162:	d87f      	bhi.n	8009264 <HAL_TIM_ConfigClockSource+0x1c0>
 8009164:	2b70      	cmp	r3, #112	@ 0x70
 8009166:	d01a      	beq.n	800919e <HAL_TIM_ConfigClockSource+0xfa>
 8009168:	2b70      	cmp	r3, #112	@ 0x70
 800916a:	d87b      	bhi.n	8009264 <HAL_TIM_ConfigClockSource+0x1c0>
 800916c:	2b60      	cmp	r3, #96	@ 0x60
 800916e:	d050      	beq.n	8009212 <HAL_TIM_ConfigClockSource+0x16e>
 8009170:	2b60      	cmp	r3, #96	@ 0x60
 8009172:	d877      	bhi.n	8009264 <HAL_TIM_ConfigClockSource+0x1c0>
 8009174:	2b50      	cmp	r3, #80	@ 0x50
 8009176:	d03c      	beq.n	80091f2 <HAL_TIM_ConfigClockSource+0x14e>
 8009178:	2b50      	cmp	r3, #80	@ 0x50
 800917a:	d873      	bhi.n	8009264 <HAL_TIM_ConfigClockSource+0x1c0>
 800917c:	2b40      	cmp	r3, #64	@ 0x40
 800917e:	d058      	beq.n	8009232 <HAL_TIM_ConfigClockSource+0x18e>
 8009180:	2b40      	cmp	r3, #64	@ 0x40
 8009182:	d86f      	bhi.n	8009264 <HAL_TIM_ConfigClockSource+0x1c0>
 8009184:	2b30      	cmp	r3, #48	@ 0x30
 8009186:	d064      	beq.n	8009252 <HAL_TIM_ConfigClockSource+0x1ae>
 8009188:	2b30      	cmp	r3, #48	@ 0x30
 800918a:	d86b      	bhi.n	8009264 <HAL_TIM_ConfigClockSource+0x1c0>
 800918c:	2b20      	cmp	r3, #32
 800918e:	d060      	beq.n	8009252 <HAL_TIM_ConfigClockSource+0x1ae>
 8009190:	2b20      	cmp	r3, #32
 8009192:	d867      	bhi.n	8009264 <HAL_TIM_ConfigClockSource+0x1c0>
 8009194:	2b00      	cmp	r3, #0
 8009196:	d05c      	beq.n	8009252 <HAL_TIM_ConfigClockSource+0x1ae>
 8009198:	2b10      	cmp	r3, #16
 800919a:	d05a      	beq.n	8009252 <HAL_TIM_ConfigClockSource+0x1ae>
 800919c:	e062      	b.n	8009264 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091ae:	f000 fd11 	bl	8009bd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80091c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	609a      	str	r2, [r3, #8]
      break;
 80091ca:	e04f      	b.n	800926c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091dc:	f000 fcfa 	bl	8009bd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	689a      	ldr	r2, [r3, #8]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091ee:	609a      	str	r2, [r3, #8]
      break;
 80091f0:	e03c      	b.n	800926c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091fe:	461a      	mov	r2, r3
 8009200:	f000 fc6c 	bl	8009adc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2150      	movs	r1, #80	@ 0x50
 800920a:	4618      	mov	r0, r3
 800920c:	f000 fcc5 	bl	8009b9a <TIM_ITRx_SetConfig>
      break;
 8009210:	e02c      	b.n	800926c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800921e:	461a      	mov	r2, r3
 8009220:	f000 fc8b 	bl	8009b3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2160      	movs	r1, #96	@ 0x60
 800922a:	4618      	mov	r0, r3
 800922c:	f000 fcb5 	bl	8009b9a <TIM_ITRx_SetConfig>
      break;
 8009230:	e01c      	b.n	800926c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800923e:	461a      	mov	r2, r3
 8009240:	f000 fc4c 	bl	8009adc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2140      	movs	r1, #64	@ 0x40
 800924a:	4618      	mov	r0, r3
 800924c:	f000 fca5 	bl	8009b9a <TIM_ITRx_SetConfig>
      break;
 8009250:	e00c      	b.n	800926c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4619      	mov	r1, r3
 800925c:	4610      	mov	r0, r2
 800925e:	f000 fc9c 	bl	8009b9a <TIM_ITRx_SetConfig>
      break;
 8009262:	e003      	b.n	800926c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	73fb      	strb	r3, [r7, #15]
      break;
 8009268:	e000      	b.n	800926c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800926a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800927c:	7bfb      	ldrb	r3, [r7, #15]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	00100070 	.word	0x00100070
 800928c:	00100040 	.word	0x00100040
 8009290:	00100030 	.word	0x00100030
 8009294:	00100020 	.word	0x00100020

08009298 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a42      	ldr	r2, [pc, #264]	@ (8009404 <TIM_Base_SetConfig+0x11c>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d00f      	beq.n	8009320 <TIM_Base_SetConfig+0x38>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009306:	d00b      	beq.n	8009320 <TIM_Base_SetConfig+0x38>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a3f      	ldr	r2, [pc, #252]	@ (8009408 <TIM_Base_SetConfig+0x120>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d007      	beq.n	8009320 <TIM_Base_SetConfig+0x38>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a3e      	ldr	r2, [pc, #248]	@ (800940c <TIM_Base_SetConfig+0x124>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d003      	beq.n	8009320 <TIM_Base_SetConfig+0x38>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a3d      	ldr	r2, [pc, #244]	@ (8009410 <TIM_Base_SetConfig+0x128>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d108      	bne.n	8009332 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	4313      	orrs	r3, r2
 8009330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a33      	ldr	r2, [pc, #204]	@ (8009404 <TIM_Base_SetConfig+0x11c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d01b      	beq.n	8009372 <TIM_Base_SetConfig+0x8a>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009340:	d017      	beq.n	8009372 <TIM_Base_SetConfig+0x8a>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a30      	ldr	r2, [pc, #192]	@ (8009408 <TIM_Base_SetConfig+0x120>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d013      	beq.n	8009372 <TIM_Base_SetConfig+0x8a>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a2f      	ldr	r2, [pc, #188]	@ (800940c <TIM_Base_SetConfig+0x124>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d00f      	beq.n	8009372 <TIM_Base_SetConfig+0x8a>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a2e      	ldr	r2, [pc, #184]	@ (8009410 <TIM_Base_SetConfig+0x128>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d00b      	beq.n	8009372 <TIM_Base_SetConfig+0x8a>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a2d      	ldr	r2, [pc, #180]	@ (8009414 <TIM_Base_SetConfig+0x12c>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d007      	beq.n	8009372 <TIM_Base_SetConfig+0x8a>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a2c      	ldr	r2, [pc, #176]	@ (8009418 <TIM_Base_SetConfig+0x130>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d003      	beq.n	8009372 <TIM_Base_SetConfig+0x8a>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a2b      	ldr	r2, [pc, #172]	@ (800941c <TIM_Base_SetConfig+0x134>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d108      	bne.n	8009384 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	4313      	orrs	r3, r2
 8009382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	4313      	orrs	r3, r2
 8009390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	689a      	ldr	r2, [r3, #8]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a16      	ldr	r2, [pc, #88]	@ (8009404 <TIM_Base_SetConfig+0x11c>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d00f      	beq.n	80093d0 <TIM_Base_SetConfig+0xe8>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a17      	ldr	r2, [pc, #92]	@ (8009410 <TIM_Base_SetConfig+0x128>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d00b      	beq.n	80093d0 <TIM_Base_SetConfig+0xe8>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a16      	ldr	r2, [pc, #88]	@ (8009414 <TIM_Base_SetConfig+0x12c>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d007      	beq.n	80093d0 <TIM_Base_SetConfig+0xe8>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a15      	ldr	r2, [pc, #84]	@ (8009418 <TIM_Base_SetConfig+0x130>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d003      	beq.n	80093d0 <TIM_Base_SetConfig+0xe8>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a14      	ldr	r2, [pc, #80]	@ (800941c <TIM_Base_SetConfig+0x134>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d103      	bne.n	80093d8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	691a      	ldr	r2, [r3, #16]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d105      	bne.n	80093f6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	f023 0201 	bic.w	r2, r3, #1
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	611a      	str	r2, [r3, #16]
  }
}
 80093f6:	bf00      	nop
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	40012c00 	.word	0x40012c00
 8009408:	40000400 	.word	0x40000400
 800940c:	40000800 	.word	0x40000800
 8009410:	40013400 	.word	0x40013400
 8009414:	40014000 	.word	0x40014000
 8009418:	40014400 	.word	0x40014400
 800941c:	40014800 	.word	0x40014800

08009420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009420:	b480      	push	{r7}
 8009422:	b087      	sub	sp, #28
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a1b      	ldr	r3, [r3, #32]
 800942e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a1b      	ldr	r3, [r3, #32]
 8009434:	f023 0201 	bic.w	r2, r3, #1
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800944e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f023 0303 	bic.w	r3, r3, #3
 800945a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	4313      	orrs	r3, r2
 8009464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	f023 0302 	bic.w	r3, r3, #2
 800946c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	4313      	orrs	r3, r2
 8009476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a2c      	ldr	r2, [pc, #176]	@ (800952c <TIM_OC1_SetConfig+0x10c>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d00f      	beq.n	80094a0 <TIM_OC1_SetConfig+0x80>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a2b      	ldr	r2, [pc, #172]	@ (8009530 <TIM_OC1_SetConfig+0x110>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d00b      	beq.n	80094a0 <TIM_OC1_SetConfig+0x80>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a2a      	ldr	r2, [pc, #168]	@ (8009534 <TIM_OC1_SetConfig+0x114>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d007      	beq.n	80094a0 <TIM_OC1_SetConfig+0x80>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a29      	ldr	r2, [pc, #164]	@ (8009538 <TIM_OC1_SetConfig+0x118>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d003      	beq.n	80094a0 <TIM_OC1_SetConfig+0x80>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a28      	ldr	r2, [pc, #160]	@ (800953c <TIM_OC1_SetConfig+0x11c>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d10c      	bne.n	80094ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f023 0308 	bic.w	r3, r3, #8
 80094a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	f023 0304 	bic.w	r3, r3, #4
 80094b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a1b      	ldr	r2, [pc, #108]	@ (800952c <TIM_OC1_SetConfig+0x10c>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d00f      	beq.n	80094e2 <TIM_OC1_SetConfig+0xc2>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a1a      	ldr	r2, [pc, #104]	@ (8009530 <TIM_OC1_SetConfig+0x110>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d00b      	beq.n	80094e2 <TIM_OC1_SetConfig+0xc2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a19      	ldr	r2, [pc, #100]	@ (8009534 <TIM_OC1_SetConfig+0x114>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d007      	beq.n	80094e2 <TIM_OC1_SetConfig+0xc2>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a18      	ldr	r2, [pc, #96]	@ (8009538 <TIM_OC1_SetConfig+0x118>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d003      	beq.n	80094e2 <TIM_OC1_SetConfig+0xc2>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a17      	ldr	r2, [pc, #92]	@ (800953c <TIM_OC1_SetConfig+0x11c>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d111      	bne.n	8009506 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80094f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	4313      	orrs	r3, r2
 8009504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	685a      	ldr	r2, [r3, #4]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	697a      	ldr	r2, [r7, #20]
 800951e:	621a      	str	r2, [r3, #32]
}
 8009520:	bf00      	nop
 8009522:	371c      	adds	r7, #28
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	40012c00 	.word	0x40012c00
 8009530:	40013400 	.word	0x40013400
 8009534:	40014000 	.word	0x40014000
 8009538:	40014400 	.word	0x40014400
 800953c:	40014800 	.word	0x40014800

08009540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a1b      	ldr	r3, [r3, #32]
 8009554:	f023 0210 	bic.w	r2, r3, #16
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800956e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800957a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	021b      	lsls	r3, r3, #8
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	4313      	orrs	r3, r2
 8009586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	f023 0320 	bic.w	r3, r3, #32
 800958e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	011b      	lsls	r3, r3, #4
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	4313      	orrs	r3, r2
 800959a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a28      	ldr	r2, [pc, #160]	@ (8009640 <TIM_OC2_SetConfig+0x100>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d003      	beq.n	80095ac <TIM_OC2_SetConfig+0x6c>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a27      	ldr	r2, [pc, #156]	@ (8009644 <TIM_OC2_SetConfig+0x104>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d10d      	bne.n	80095c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	011b      	lsls	r3, r3, #4
 80095ba:	697a      	ldr	r2, [r7, #20]
 80095bc:	4313      	orrs	r3, r2
 80095be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a1d      	ldr	r2, [pc, #116]	@ (8009640 <TIM_OC2_SetConfig+0x100>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d00f      	beq.n	80095f0 <TIM_OC2_SetConfig+0xb0>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a1c      	ldr	r2, [pc, #112]	@ (8009644 <TIM_OC2_SetConfig+0x104>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d00b      	beq.n	80095f0 <TIM_OC2_SetConfig+0xb0>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a1b      	ldr	r2, [pc, #108]	@ (8009648 <TIM_OC2_SetConfig+0x108>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d007      	beq.n	80095f0 <TIM_OC2_SetConfig+0xb0>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a1a      	ldr	r2, [pc, #104]	@ (800964c <TIM_OC2_SetConfig+0x10c>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d003      	beq.n	80095f0 <TIM_OC2_SetConfig+0xb0>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a19      	ldr	r2, [pc, #100]	@ (8009650 <TIM_OC2_SetConfig+0x110>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d113      	bne.n	8009618 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	4313      	orrs	r3, r2
 800960a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	4313      	orrs	r3, r2
 8009616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	693a      	ldr	r2, [r7, #16]
 800961c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	621a      	str	r2, [r3, #32]
}
 8009632:	bf00      	nop
 8009634:	371c      	adds	r7, #28
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	40012c00 	.word	0x40012c00
 8009644:	40013400 	.word	0x40013400
 8009648:	40014000 	.word	0x40014000
 800964c:	40014400 	.word	0x40014400
 8009650:	40014800 	.word	0x40014800

08009654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009654:	b480      	push	{r7}
 8009656:	b087      	sub	sp, #28
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f023 0303 	bic.w	r3, r3, #3
 800968e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	4313      	orrs	r3, r2
 8009698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80096a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	021b      	lsls	r3, r3, #8
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a27      	ldr	r2, [pc, #156]	@ (8009750 <TIM_OC3_SetConfig+0xfc>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d003      	beq.n	80096be <TIM_OC3_SetConfig+0x6a>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a26      	ldr	r2, [pc, #152]	@ (8009754 <TIM_OC3_SetConfig+0x100>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d10d      	bne.n	80096da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80096c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	021b      	lsls	r3, r3, #8
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80096d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a1c      	ldr	r2, [pc, #112]	@ (8009750 <TIM_OC3_SetConfig+0xfc>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d00f      	beq.n	8009702 <TIM_OC3_SetConfig+0xae>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a1b      	ldr	r2, [pc, #108]	@ (8009754 <TIM_OC3_SetConfig+0x100>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d00b      	beq.n	8009702 <TIM_OC3_SetConfig+0xae>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a1a      	ldr	r2, [pc, #104]	@ (8009758 <TIM_OC3_SetConfig+0x104>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d007      	beq.n	8009702 <TIM_OC3_SetConfig+0xae>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a19      	ldr	r2, [pc, #100]	@ (800975c <TIM_OC3_SetConfig+0x108>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d003      	beq.n	8009702 <TIM_OC3_SetConfig+0xae>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a18      	ldr	r2, [pc, #96]	@ (8009760 <TIM_OC3_SetConfig+0x10c>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d113      	bne.n	800972a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	011b      	lsls	r3, r3, #4
 8009718:	693a      	ldr	r2, [r7, #16]
 800971a:	4313      	orrs	r3, r2
 800971c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	699b      	ldr	r3, [r3, #24]
 8009722:	011b      	lsls	r3, r3, #4
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	4313      	orrs	r3, r2
 8009728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	621a      	str	r2, [r3, #32]
}
 8009744:	bf00      	nop
 8009746:	371c      	adds	r7, #28
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	40012c00 	.word	0x40012c00
 8009754:	40013400 	.word	0x40013400
 8009758:	40014000 	.word	0x40014000
 800975c:	40014400 	.word	0x40014400
 8009760:	40014800 	.word	0x40014800

08009764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a1b      	ldr	r3, [r3, #32]
 8009772:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6a1b      	ldr	r3, [r3, #32]
 8009778:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	69db      	ldr	r3, [r3, #28]
 800978a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800979e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	021b      	lsls	r3, r3, #8
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	031b      	lsls	r3, r3, #12
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	4313      	orrs	r3, r2
 80097be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a28      	ldr	r2, [pc, #160]	@ (8009864 <TIM_OC4_SetConfig+0x100>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d003      	beq.n	80097d0 <TIM_OC4_SetConfig+0x6c>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a27      	ldr	r2, [pc, #156]	@ (8009868 <TIM_OC4_SetConfig+0x104>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d10d      	bne.n	80097ec <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80097d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	031b      	lsls	r3, r3, #12
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a1d      	ldr	r2, [pc, #116]	@ (8009864 <TIM_OC4_SetConfig+0x100>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d00f      	beq.n	8009814 <TIM_OC4_SetConfig+0xb0>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a1c      	ldr	r2, [pc, #112]	@ (8009868 <TIM_OC4_SetConfig+0x104>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d00b      	beq.n	8009814 <TIM_OC4_SetConfig+0xb0>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a1b      	ldr	r2, [pc, #108]	@ (800986c <TIM_OC4_SetConfig+0x108>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d007      	beq.n	8009814 <TIM_OC4_SetConfig+0xb0>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a1a      	ldr	r2, [pc, #104]	@ (8009870 <TIM_OC4_SetConfig+0x10c>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d003      	beq.n	8009814 <TIM_OC4_SetConfig+0xb0>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a19      	ldr	r2, [pc, #100]	@ (8009874 <TIM_OC4_SetConfig+0x110>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d113      	bne.n	800983c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800981a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009822:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	019b      	lsls	r3, r3, #6
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	4313      	orrs	r3, r2
 800982e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	019b      	lsls	r3, r3, #6
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	4313      	orrs	r3, r2
 800983a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	693a      	ldr	r2, [r7, #16]
 8009840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	621a      	str	r2, [r3, #32]
}
 8009856:	bf00      	nop
 8009858:	371c      	adds	r7, #28
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	40012c00 	.word	0x40012c00
 8009868:	40013400 	.word	0x40013400
 800986c:	40014000 	.word	0x40014000
 8009870:	40014400 	.word	0x40014400
 8009874:	40014800 	.word	0x40014800

08009878 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009878:	b480      	push	{r7}
 800987a:	b087      	sub	sp, #28
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a1b      	ldr	r3, [r3, #32]
 800988c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800989e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80098bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	041b      	lsls	r3, r3, #16
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a17      	ldr	r2, [pc, #92]	@ (800992c <TIM_OC5_SetConfig+0xb4>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d00f      	beq.n	80098f2 <TIM_OC5_SetConfig+0x7a>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a16      	ldr	r2, [pc, #88]	@ (8009930 <TIM_OC5_SetConfig+0xb8>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d00b      	beq.n	80098f2 <TIM_OC5_SetConfig+0x7a>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a15      	ldr	r2, [pc, #84]	@ (8009934 <TIM_OC5_SetConfig+0xbc>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d007      	beq.n	80098f2 <TIM_OC5_SetConfig+0x7a>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a14      	ldr	r2, [pc, #80]	@ (8009938 <TIM_OC5_SetConfig+0xc0>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d003      	beq.n	80098f2 <TIM_OC5_SetConfig+0x7a>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a13      	ldr	r2, [pc, #76]	@ (800993c <TIM_OC5_SetConfig+0xc4>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d109      	bne.n	8009906 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	021b      	lsls	r3, r3, #8
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	4313      	orrs	r3, r2
 8009904:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	621a      	str	r2, [r3, #32]
}
 8009920:	bf00      	nop
 8009922:	371c      	adds	r7, #28
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	40012c00 	.word	0x40012c00
 8009930:	40013400 	.word	0x40013400
 8009934:	40014000 	.word	0x40014000
 8009938:	40014400 	.word	0x40014400
 800993c:	40014800 	.word	0x40014800

08009940 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009940:	b480      	push	{r7}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a1b      	ldr	r3, [r3, #32]
 8009954:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800996e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	021b      	lsls	r3, r3, #8
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	4313      	orrs	r3, r2
 800997e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	051b      	lsls	r3, r3, #20
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	4313      	orrs	r3, r2
 8009992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a18      	ldr	r2, [pc, #96]	@ (80099f8 <TIM_OC6_SetConfig+0xb8>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d00f      	beq.n	80099bc <TIM_OC6_SetConfig+0x7c>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a17      	ldr	r2, [pc, #92]	@ (80099fc <TIM_OC6_SetConfig+0xbc>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d00b      	beq.n	80099bc <TIM_OC6_SetConfig+0x7c>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a16      	ldr	r2, [pc, #88]	@ (8009a00 <TIM_OC6_SetConfig+0xc0>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d007      	beq.n	80099bc <TIM_OC6_SetConfig+0x7c>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a15      	ldr	r2, [pc, #84]	@ (8009a04 <TIM_OC6_SetConfig+0xc4>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d003      	beq.n	80099bc <TIM_OC6_SetConfig+0x7c>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a14      	ldr	r2, [pc, #80]	@ (8009a08 <TIM_OC6_SetConfig+0xc8>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d109      	bne.n	80099d0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80099c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	695b      	ldr	r3, [r3, #20]
 80099c8:	029b      	lsls	r3, r3, #10
 80099ca:	697a      	ldr	r2, [r7, #20]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	621a      	str	r2, [r3, #32]
}
 80099ea:	bf00      	nop
 80099ec:	371c      	adds	r7, #28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	40012c00 	.word	0x40012c00
 80099fc:	40013400 	.word	0x40013400
 8009a00:	40014000 	.word	0x40014000
 8009a04:	40014400 	.word	0x40014400
 8009a08:	40014800 	.word	0x40014800

08009a0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b087      	sub	sp, #28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
 8009a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6a1b      	ldr	r3, [r3, #32]
 8009a24:	f023 0201 	bic.w	r2, r3, #1
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4a24      	ldr	r2, [pc, #144]	@ (8009ac8 <TIM_TI1_SetConfig+0xbc>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d013      	beq.n	8009a62 <TIM_TI1_SetConfig+0x56>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a40:	d00f      	beq.n	8009a62 <TIM_TI1_SetConfig+0x56>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	4a21      	ldr	r2, [pc, #132]	@ (8009acc <TIM_TI1_SetConfig+0xc0>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d00b      	beq.n	8009a62 <TIM_TI1_SetConfig+0x56>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	4a20      	ldr	r2, [pc, #128]	@ (8009ad0 <TIM_TI1_SetConfig+0xc4>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d007      	beq.n	8009a62 <TIM_TI1_SetConfig+0x56>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	4a1f      	ldr	r2, [pc, #124]	@ (8009ad4 <TIM_TI1_SetConfig+0xc8>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d003      	beq.n	8009a62 <TIM_TI1_SetConfig+0x56>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8009ad8 <TIM_TI1_SetConfig+0xcc>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d101      	bne.n	8009a66 <TIM_TI1_SetConfig+0x5a>
 8009a62:	2301      	movs	r3, #1
 8009a64:	e000      	b.n	8009a68 <TIM_TI1_SetConfig+0x5c>
 8009a66:	2300      	movs	r3, #0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d008      	beq.n	8009a7e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	f023 0303 	bic.w	r3, r3, #3
 8009a72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	617b      	str	r3, [r7, #20]
 8009a7c:	e003      	b.n	8009a86 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f043 0301 	orr.w	r3, r3, #1
 8009a84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	011b      	lsls	r3, r3, #4
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	697a      	ldr	r2, [r7, #20]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	f023 030a 	bic.w	r3, r3, #10
 8009aa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	f003 030a 	and.w	r3, r3, #10
 8009aa8:	693a      	ldr	r2, [r7, #16]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	621a      	str	r2, [r3, #32]
}
 8009aba:	bf00      	nop
 8009abc:	371c      	adds	r7, #28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	40012c00 	.word	0x40012c00
 8009acc:	40000400 	.word	0x40000400
 8009ad0:	40000800 	.word	0x40000800
 8009ad4:	40013400 	.word	0x40013400
 8009ad8:	40014000 	.word	0x40014000

08009adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b087      	sub	sp, #28
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6a1b      	ldr	r3, [r3, #32]
 8009aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	f023 0201 	bic.w	r2, r3, #1
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	011b      	lsls	r3, r3, #4
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f023 030a 	bic.w	r3, r3, #10
 8009b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b1a:	697a      	ldr	r2, [r7, #20]
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	693a      	ldr	r2, [r7, #16]
 8009b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	621a      	str	r2, [r3, #32]
}
 8009b2e:	bf00      	nop
 8009b30:	371c      	adds	r7, #28
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	b087      	sub	sp, #28
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	60f8      	str	r0, [r7, #12]
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
 8009b50:	f023 0210 	bic.w	r2, r3, #16
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	031b      	lsls	r3, r3, #12
 8009b6a:	693a      	ldr	r2, [r7, #16]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009b76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	011b      	lsls	r3, r3, #4
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	693a      	ldr	r2, [r7, #16]
 8009b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	621a      	str	r2, [r3, #32]
}
 8009b8e:	bf00      	nop
 8009b90:	371c      	adds	r7, #28
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b085      	sub	sp, #20
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	f043 0307 	orr.w	r3, r3, #7
 8009bc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	609a      	str	r2, [r3, #8]
}
 8009bc8:	bf00      	nop
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009bee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	021a      	lsls	r2, r3, #8
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	609a      	str	r2, [r3, #8]
}
 8009c08:	bf00      	nop
 8009c0a:	371c      	adds	r7, #28
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	f003 031f 	and.w	r3, r3, #31
 8009c26:	2201      	movs	r2, #1
 8009c28:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6a1a      	ldr	r2, [r3, #32]
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	43db      	mvns	r3, r3
 8009c36:	401a      	ands	r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6a1a      	ldr	r2, [r3, #32]
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	f003 031f 	and.w	r3, r3, #31
 8009c46:	6879      	ldr	r1, [r7, #4]
 8009c48:	fa01 f303 	lsl.w	r3, r1, r3
 8009c4c:	431a      	orrs	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	621a      	str	r2, [r3, #32]
}
 8009c52:	bf00      	nop
 8009c54:	371c      	adds	r7, #28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b08a      	sub	sp, #40	@ 0x28
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d101      	bne.n	8009c72 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e0a0      	b.n	8009db4 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d106      	bne.n	8009c8c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f898 	bl	8009dbc <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2202      	movs	r2, #2
 8009c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	3304      	adds	r3, #4
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	4610      	mov	r0, r2
 8009ca0:	f7ff fb22 	bl	80092e8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6818      	ldr	r0, [r3, #0]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	6819      	ldr	r1, [r3, #0]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	2203      	movs	r2, #3
 8009cb2:	f7ff feab 	bl	8009a0c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	699a      	ldr	r2, [r3, #24]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f022 020c 	bic.w	r2, r2, #12
 8009cc4:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6999      	ldr	r1, [r3, #24]
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	430a      	orrs	r2, r1
 8009cd6:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	685a      	ldr	r2, [r3, #4]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009ce6:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	6812      	ldr	r2, [r2, #0]
 8009cf2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cfa:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689a      	ldr	r2, [r3, #8]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d0a:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	6812      	ldr	r2, [r2, #0]
 8009d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d1a:	f023 0307 	bic.w	r3, r3, #7
 8009d1e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	689a      	ldr	r2, [r3, #8]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f042 0204 	orr.w	r2, r2, #4
 8009d2e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8009d30:	2300      	movs	r3, #0
 8009d32:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009d34:	2300      	movs	r3, #0
 8009d36:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8009d38:	2370      	movs	r3, #112	@ 0x70
 8009d3a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009d40:	2300      	movs	r3, #0
 8009d42:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009d44:	2300      	movs	r3, #0
 8009d46:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f107 020c 	add.w	r2, r7, #12
 8009d56:	4611      	mov	r1, r2
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7ff fbf1 	bl	8009540 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	6812      	ldr	r2, [r2, #0]
 8009d68:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d70:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	685a      	ldr	r2, [r3, #4]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8009d80:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3728      	adds	r7, #40	@ 0x28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8009dc4:	bf00      	nop
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009dde:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009de6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009dee:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009df6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d108      	bne.n	8009e10 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d105      	bne.n	8009e10 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e04:	7b7b      	ldrb	r3, [r7, #13]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d102      	bne.n	8009e10 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e0a:	7b3b      	ldrb	r3, [r7, #12]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d001      	beq.n	8009e14 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	e05d      	b.n	8009ed0 <HAL_TIMEx_HallSensor_Start_IT+0x100>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2202      	movs	r2, #2
 8009e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2202      	movs	r2, #2
 8009e20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68da      	ldr	r2, [r3, #12]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f042 0202 	orr.w	r2, r2, #2
 8009e42:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7ff fee1 	bl	8009c14 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a20      	ldr	r2, [pc, #128]	@ (8009ed8 <HAL_TIMEx_HallSensor_Start_IT+0x108>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d018      	beq.n	8009e8e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e64:	d013      	beq.n	8009e8e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8009edc <HAL_TIMEx_HallSensor_Start_IT+0x10c>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d00e      	beq.n	8009e8e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a1a      	ldr	r2, [pc, #104]	@ (8009ee0 <HAL_TIMEx_HallSensor_Start_IT+0x110>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d009      	beq.n	8009e8e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a19      	ldr	r2, [pc, #100]	@ (8009ee4 <HAL_TIMEx_HallSensor_Start_IT+0x114>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d004      	beq.n	8009e8e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a17      	ldr	r2, [pc, #92]	@ (8009ee8 <HAL_TIMEx_HallSensor_Start_IT+0x118>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d115      	bne.n	8009eba <HAL_TIMEx_HallSensor_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	689a      	ldr	r2, [r3, #8]
 8009e94:	4b15      	ldr	r3, [pc, #84]	@ (8009eec <HAL_TIMEx_HallSensor_Start_IT+0x11c>)
 8009e96:	4013      	ands	r3, r2
 8009e98:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b06      	cmp	r3, #6
 8009e9e:	d015      	beq.n	8009ecc <HAL_TIMEx_HallSensor_Start_IT+0xfc>
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ea6:	d011      	beq.n	8009ecc <HAL_TIMEx_HallSensor_Start_IT+0xfc>
    {
      __HAL_TIM_ENABLE(htim);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f042 0201 	orr.w	r2, r2, #1
 8009eb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eb8:	e008      	b.n	8009ecc <HAL_TIMEx_HallSensor_Start_IT+0xfc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f042 0201 	orr.w	r2, r2, #1
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	e000      	b.n	8009ece <HAL_TIMEx_HallSensor_Start_IT+0xfe>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ecc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	40012c00 	.word	0x40012c00
 8009edc:	40000400 	.word	0x40000400
 8009ee0:	40000800 	.word	0x40000800
 8009ee4:	40013400 	.word	0x40013400
 8009ee8:	40014000 	.word	0x40014000
 8009eec:	00010007 	.word	0x00010007

08009ef0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d109      	bne.n	8009f14 <HAL_TIMEx_PWMN_Start+0x24>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	bf14      	ite	ne
 8009f0c:	2301      	movne	r3, #1
 8009f0e:	2300      	moveq	r3, #0
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	e022      	b.n	8009f5a <HAL_TIMEx_PWMN_Start+0x6a>
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	2b04      	cmp	r3, #4
 8009f18:	d109      	bne.n	8009f2e <HAL_TIMEx_PWMN_Start+0x3e>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	bf14      	ite	ne
 8009f26:	2301      	movne	r3, #1
 8009f28:	2300      	moveq	r3, #0
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	e015      	b.n	8009f5a <HAL_TIMEx_PWMN_Start+0x6a>
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	2b08      	cmp	r3, #8
 8009f32:	d109      	bne.n	8009f48 <HAL_TIMEx_PWMN_Start+0x58>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	bf14      	ite	ne
 8009f40:	2301      	movne	r3, #1
 8009f42:	2300      	moveq	r3, #0
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	e008      	b.n	8009f5a <HAL_TIMEx_PWMN_Start+0x6a>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	bf14      	ite	ne
 8009f54:	2301      	movne	r3, #1
 8009f56:	2300      	moveq	r3, #0
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e069      	b.n	800a036 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d104      	bne.n	8009f72 <HAL_TIMEx_PWMN_Start+0x82>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f70:	e013      	b.n	8009f9a <HAL_TIMEx_PWMN_Start+0xaa>
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	2b04      	cmp	r3, #4
 8009f76:	d104      	bne.n	8009f82 <HAL_TIMEx_PWMN_Start+0x92>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f80:	e00b      	b.n	8009f9a <HAL_TIMEx_PWMN_Start+0xaa>
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	2b08      	cmp	r3, #8
 8009f86:	d104      	bne.n	8009f92 <HAL_TIMEx_PWMN_Start+0xa2>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f90:	e003      	b.n	8009f9a <HAL_TIMEx_PWMN_Start+0xaa>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2202      	movs	r2, #2
 8009f96:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2204      	movs	r2, #4
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f000 fae2 	bl	800a56c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009fb6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a20      	ldr	r2, [pc, #128]	@ (800a040 <HAL_TIMEx_PWMN_Start+0x150>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d018      	beq.n	8009ff4 <HAL_TIMEx_PWMN_Start+0x104>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fca:	d013      	beq.n	8009ff4 <HAL_TIMEx_PWMN_Start+0x104>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a1c      	ldr	r2, [pc, #112]	@ (800a044 <HAL_TIMEx_PWMN_Start+0x154>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d00e      	beq.n	8009ff4 <HAL_TIMEx_PWMN_Start+0x104>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a1b      	ldr	r2, [pc, #108]	@ (800a048 <HAL_TIMEx_PWMN_Start+0x158>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d009      	beq.n	8009ff4 <HAL_TIMEx_PWMN_Start+0x104>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a19      	ldr	r2, [pc, #100]	@ (800a04c <HAL_TIMEx_PWMN_Start+0x15c>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d004      	beq.n	8009ff4 <HAL_TIMEx_PWMN_Start+0x104>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a18      	ldr	r2, [pc, #96]	@ (800a050 <HAL_TIMEx_PWMN_Start+0x160>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d115      	bne.n	800a020 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689a      	ldr	r2, [r3, #8]
 8009ffa:	4b16      	ldr	r3, [pc, #88]	@ (800a054 <HAL_TIMEx_PWMN_Start+0x164>)
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b06      	cmp	r3, #6
 800a004:	d015      	beq.n	800a032 <HAL_TIMEx_PWMN_Start+0x142>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a00c:	d011      	beq.n	800a032 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f042 0201 	orr.w	r2, r2, #1
 800a01c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a01e:	e008      	b.n	800a032 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f042 0201 	orr.w	r2, r2, #1
 800a02e:	601a      	str	r2, [r3, #0]
 800a030:	e000      	b.n	800a034 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a032:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	40012c00 	.word	0x40012c00
 800a044:	40000400 	.word	0x40000400
 800a048:	40000800 	.word	0x40000800
 800a04c:	40013400 	.word	0x40013400
 800a050:	40014000 	.word	0x40014000
 800a054:	00010007 	.word	0x00010007

0800a058 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2200      	movs	r2, #0
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 fa7e 	bl	800a56c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	6a1a      	ldr	r2, [r3, #32]
 800a076:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a07a:	4013      	ands	r3, r2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10f      	bne.n	800a0a0 <HAL_TIMEx_PWMN_Stop+0x48>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	6a1a      	ldr	r2, [r3, #32]
 800a086:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a08a:	4013      	ands	r3, r2
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d107      	bne.n	800a0a0 <HAL_TIMEx_PWMN_Stop+0x48>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a09e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6a1a      	ldr	r2, [r3, #32]
 800a0a6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10f      	bne.n	800a0d0 <HAL_TIMEx_PWMN_Stop+0x78>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6a1a      	ldr	r2, [r3, #32]
 800a0b6:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d107      	bne.n	800a0d0 <HAL_TIMEx_PWMN_Stop+0x78>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f022 0201 	bic.w	r2, r2, #1
 800a0ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d104      	bne.n	800a0e0 <HAL_TIMEx_PWMN_Stop+0x88>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0de:	e013      	b.n	800a108 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d104      	bne.n	800a0f0 <HAL_TIMEx_PWMN_Stop+0x98>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0ee:	e00b      	b.n	800a108 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	2b08      	cmp	r3, #8
 800a0f4:	d104      	bne.n	800a100 <HAL_TIMEx_PWMN_Stop+0xa8>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0fe:	e003      	b.n	800a108 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a124:	2b01      	cmp	r3, #1
 800a126:	d101      	bne.n	800a12c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a128:	2302      	movs	r3, #2
 800a12a:	e065      	b.n	800a1f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2202      	movs	r2, #2
 800a138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a2c      	ldr	r2, [pc, #176]	@ (800a204 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d004      	beq.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a2b      	ldr	r2, [pc, #172]	@ (800a208 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d108      	bne.n	800a172 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a166:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	4313      	orrs	r3, r2
 800a170:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a17c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68fa      	ldr	r2, [r7, #12]
 800a184:	4313      	orrs	r3, r2
 800a186:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a1b      	ldr	r2, [pc, #108]	@ (800a204 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d018      	beq.n	800a1cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1a2:	d013      	beq.n	800a1cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a18      	ldr	r2, [pc, #96]	@ (800a20c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d00e      	beq.n	800a1cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a17      	ldr	r2, [pc, #92]	@ (800a210 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d009      	beq.n	800a1cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a12      	ldr	r2, [pc, #72]	@ (800a208 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d004      	beq.n	800a1cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a13      	ldr	r2, [pc, #76]	@ (800a214 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d10c      	bne.n	800a1e6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3714      	adds	r7, #20
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	40012c00 	.word	0x40012c00
 800a208:	40013400 	.word	0x40013400
 800a20c:	40000400 	.word	0x40000400
 800a210:	40000800 	.word	0x40000800
 800a214:	40014000 	.word	0x40014000

0800a218 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a222:	2300      	movs	r3, #0
 800a224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d101      	bne.n	800a234 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a230:	2302      	movs	r3, #2
 800a232:	e073      	b.n	800a31c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	4313      	orrs	r3, r2
 800a256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	4313      	orrs	r3, r2
 800a264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4313      	orrs	r3, r2
 800a272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	4313      	orrs	r3, r2
 800a280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	695b      	ldr	r3, [r3, #20]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a29a:	4313      	orrs	r3, r2
 800a29c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	041b      	lsls	r3, r3, #16
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	69db      	ldr	r3, [r3, #28]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a19      	ldr	r2, [pc, #100]	@ (800a328 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d004      	beq.n	800a2d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a18      	ldr	r2, [pc, #96]	@ (800a32c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d11c      	bne.n	800a30a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2da:	051b      	lsls	r3, r3, #20
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	6a1b      	ldr	r3, [r3, #32]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a306:	4313      	orrs	r3, r2
 800a308:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3714      	adds	r7, #20
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	40012c00 	.word	0x40012c00
 800a32c:	40013400 	.word	0x40013400

0800a330 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 800a330:	b480      	push	{r7}
 800a332:	b08b      	sub	sp, #44	@ 0x2c
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a33c:	2300      	movs	r3, #0
 800a33e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d101      	bne.n	800a350 <HAL_TIMEx_ConfigBreakInput+0x20>
 800a34c:	2302      	movs	r3, #2
 800a34e:	e0c1      	b.n	800a4d4 <HAL_TIMEx_ConfigBreakInput+0x1a4>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	3b01      	subs	r3, #1
 800a35e:	2b0f      	cmp	r3, #15
 800a360:	d854      	bhi.n	800a40c <HAL_TIMEx_ConfigBreakInput+0xdc>
 800a362:	a201      	add	r2, pc, #4	@ (adr r2, 800a368 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800a364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a368:	0800a3a9 	.word	0x0800a3a9
 800a36c:	0800a3bd 	.word	0x0800a3bd
 800a370:	0800a40d 	.word	0x0800a40d
 800a374:	0800a3d1 	.word	0x0800a3d1
 800a378:	0800a40d 	.word	0x0800a40d
 800a37c:	0800a40d 	.word	0x0800a40d
 800a380:	0800a40d 	.word	0x0800a40d
 800a384:	0800a3e5 	.word	0x0800a3e5
 800a388:	0800a40d 	.word	0x0800a40d
 800a38c:	0800a40d 	.word	0x0800a40d
 800a390:	0800a40d 	.word	0x0800a40d
 800a394:	0800a40d 	.word	0x0800a40d
 800a398:	0800a40d 	.word	0x0800a40d
 800a39c:	0800a40d 	.word	0x0800a40d
 800a3a0:	0800a40d 	.word	0x0800a40d
 800a3a4:	0800a3f9 	.word	0x0800a3f9
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800a3b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3b4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800a3b6:	2309      	movs	r3, #9
 800a3b8:	617b      	str	r3, [r7, #20]
      break;
 800a3ba:	e030      	b.n	800a41e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800a3bc:	2302      	movs	r3, #2
 800a3be:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800a3c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3c8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800a3ca:	230a      	movs	r3, #10
 800a3cc:	617b      	str	r3, [r7, #20]
      break;
 800a3ce:	e026      	b.n	800a41e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800a3d0:	2304      	movs	r3, #4
 800a3d2:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800a3d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a3dc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800a3de:	230b      	movs	r3, #11
 800a3e0:	617b      	str	r3, [r7, #20]
      break;
 800a3e2:	e01c      	b.n	800a41e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800a3e4:	2308      	movs	r3, #8
 800a3e6:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800a3ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a3f0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800a3f2:	230c      	movs	r3, #12
 800a3f4:	617b      	str	r3, [r7, #20]
      break;
 800a3f6:	e012      	b.n	800a41e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800a3f8:	2310      	movs	r3, #16
 800a3fa:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800a3fc:	2304      	movs	r3, #4
 800a3fe:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800a400:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a404:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800a406:	230d      	movs	r3, #13
 800a408:	617b      	str	r3, [r7, #20]
      break;
 800a40a:	e008      	b.n	800a41e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 800a40c:	2300      	movs	r3, #0
 800a40e:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800a410:	2300      	movs	r3, #0
 800a412:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800a414:	2300      	movs	r3, #0
 800a416:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800a418:	2300      	movs	r3, #0
 800a41a:	617b      	str	r3, [r7, #20]
      break;
 800a41c:	bf00      	nop
    }
  }

  switch (BreakInput)
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d003      	beq.n	800a42c <HAL_TIMEx_ConfigBreakInput+0xfc>
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	2b02      	cmp	r3, #2
 800a428:	d025      	beq.n	800a476 <HAL_TIMEx_ConfigBreakInput+0x146>
 800a42a:	e049      	b.n	800a4c0 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a432:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	43db      	mvns	r3, r3
 800a438:	693a      	ldr	r2, [r7, #16]
 800a43a:	4013      	ands	r3, r2
 800a43c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	409a      	lsls	r2, r3
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	4013      	ands	r3, r2
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	43db      	mvns	r3, r3
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	4013      	ands	r3, r2
 800a458:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	689a      	ldr	r2, [r3, #8]
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	409a      	lsls	r2, r3
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	4013      	ands	r3, r2
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	4313      	orrs	r3, r2
 800a46a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800a474:	e028      	b.n	800a4c8 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a47c:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800a47e:	6a3b      	ldr	r3, [r7, #32]
 800a480:	43db      	mvns	r3, r3
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	4013      	ands	r3, r2
 800a486:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	409a      	lsls	r2, r3
 800a490:	6a3b      	ldr	r3, [r7, #32]
 800a492:	4013      	ands	r3, r2
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	4313      	orrs	r3, r2
 800a498:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	43db      	mvns	r3, r3
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	689a      	ldr	r2, [r3, #8]
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	409a      	lsls	r2, r3
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800a4be:	e003      	b.n	800a4c8 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800a4c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a4d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	372c      	adds	r7, #44	@ 0x2c
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a538:	bf00      	nop
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a54c:	bf00      	nop
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a560:	bf00      	nop
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b087      	sub	sp, #28
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	f003 030f 	and.w	r3, r3, #15
 800a57e:	2204      	movs	r2, #4
 800a580:	fa02 f303 	lsl.w	r3, r2, r3
 800a584:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6a1a      	ldr	r2, [r3, #32]
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	43db      	mvns	r3, r3
 800a58e:	401a      	ands	r2, r3
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6a1a      	ldr	r2, [r3, #32]
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	f003 030f 	and.w	r3, r3, #15
 800a59e:	6879      	ldr	r1, [r7, #4]
 800a5a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a4:	431a      	orrs	r2, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	621a      	str	r2, [r3, #32]
}
 800a5aa:	bf00      	nop
 800a5ac:	371c      	adds	r7, #28
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b082      	sub	sp, #8
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e042      	b.n	800a64e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d106      	bne.n	800a5e0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7f7 ffc8 	bl	8002570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2224      	movs	r2, #36	@ 0x24
 800a5e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f022 0201 	bic.w	r2, r2, #1
 800a5f6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d002      	beq.n	800a606 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fedd 	bl	800b3c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fc0e 	bl	800ae28 <UART_SetConfig>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d101      	bne.n	800a616 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	e01b      	b.n	800a64e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	685a      	ldr	r2, [r3, #4]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a624:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	689a      	ldr	r2, [r3, #8]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a634:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f042 0201 	orr.w	r2, r2, #1
 800a644:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 ff5c 	bl	800b504 <UART_CheckIdleState>
 800a64c:	4603      	mov	r3, r0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3708      	adds	r7, #8
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a656:	b580      	push	{r7, lr}
 800a658:	b08a      	sub	sp, #40	@ 0x28
 800a65a:	af02      	add	r7, sp, #8
 800a65c:	60f8      	str	r0, [r7, #12]
 800a65e:	60b9      	str	r1, [r7, #8]
 800a660:	603b      	str	r3, [r7, #0]
 800a662:	4613      	mov	r3, r2
 800a664:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a66c:	2b20      	cmp	r3, #32
 800a66e:	d17b      	bne.n	800a768 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d002      	beq.n	800a67c <HAL_UART_Transmit+0x26>
 800a676:	88fb      	ldrh	r3, [r7, #6]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e074      	b.n	800a76a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2221      	movs	r2, #33	@ 0x21
 800a68c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a690:	f7f8 f88a 	bl	80027a8 <HAL_GetTick>
 800a694:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	88fa      	ldrh	r2, [r7, #6]
 800a69a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	88fa      	ldrh	r2, [r7, #6]
 800a6a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6ae:	d108      	bne.n	800a6c2 <HAL_UART_Transmit+0x6c>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d104      	bne.n	800a6c2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	61bb      	str	r3, [r7, #24]
 800a6c0:	e003      	b.n	800a6ca <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a6ca:	e030      	b.n	800a72e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	2180      	movs	r1, #128	@ 0x80
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f000 ffbe 	bl	800b658 <UART_WaitOnFlagUntilTimeout>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d005      	beq.n	800a6ee <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2220      	movs	r2, #32
 800a6e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	e03d      	b.n	800a76a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10b      	bne.n	800a70c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	881b      	ldrh	r3, [r3, #0]
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a702:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	3302      	adds	r3, #2
 800a708:	61bb      	str	r3, [r7, #24]
 800a70a:	e007      	b.n	800a71c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	781a      	ldrb	r2, [r3, #0]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	3301      	adds	r3, #1
 800a71a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a722:	b29b      	uxth	r3, r3
 800a724:	3b01      	subs	r3, #1
 800a726:	b29a      	uxth	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a734:	b29b      	uxth	r3, r3
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1c8      	bne.n	800a6cc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	2200      	movs	r2, #0
 800a742:	2140      	movs	r1, #64	@ 0x40
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f000 ff87 	bl	800b658 <UART_WaitOnFlagUntilTimeout>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d005      	beq.n	800a75c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2220      	movs	r2, #32
 800a754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a758:	2303      	movs	r3, #3
 800a75a:	e006      	b.n	800a76a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2220      	movs	r2, #32
 800a760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a764:	2300      	movs	r3, #0
 800a766:	e000      	b.n	800a76a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a768:	2302      	movs	r3, #2
  }
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3720      	adds	r7, #32
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
	...

0800a774 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b0ba      	sub	sp, #232	@ 0xe8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	69db      	ldr	r3, [r3, #28]
 800a782:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a79a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a79e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a7a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d11b      	bne.n	800a7e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a7b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7b4:	f003 0320 	and.w	r3, r3, #32
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d015      	beq.n	800a7e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a7bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7c0:	f003 0320 	and.w	r3, r3, #32
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d105      	bne.n	800a7d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a7c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d009      	beq.n	800a7e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 82e3 	beq.w	800ada4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	4798      	blx	r3
      }
      return;
 800a7e6:	e2dd      	b.n	800ada4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a7e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f000 8123 	beq.w	800aa38 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a7f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a7f6:	4b8d      	ldr	r3, [pc, #564]	@ (800aa2c <HAL_UART_IRQHandler+0x2b8>)
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d106      	bne.n	800a80c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a7fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a802:	4b8b      	ldr	r3, [pc, #556]	@ (800aa30 <HAL_UART_IRQHandler+0x2bc>)
 800a804:	4013      	ands	r3, r2
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 8116 	beq.w	800aa38 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a80c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a810:	f003 0301 	and.w	r3, r3, #1
 800a814:	2b00      	cmp	r3, #0
 800a816:	d011      	beq.n	800a83c <HAL_UART_IRQHandler+0xc8>
 800a818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a81c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00b      	beq.n	800a83c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2201      	movs	r2, #1
 800a82a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a832:	f043 0201 	orr.w	r2, r3, #1
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a83c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a840:	f003 0302 	and.w	r3, r3, #2
 800a844:	2b00      	cmp	r3, #0
 800a846:	d011      	beq.n	800a86c <HAL_UART_IRQHandler+0xf8>
 800a848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a84c:	f003 0301 	and.w	r3, r3, #1
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00b      	beq.n	800a86c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2202      	movs	r2, #2
 800a85a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a862:	f043 0204 	orr.w	r2, r3, #4
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a86c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a870:	f003 0304 	and.w	r3, r3, #4
 800a874:	2b00      	cmp	r3, #0
 800a876:	d011      	beq.n	800a89c <HAL_UART_IRQHandler+0x128>
 800a878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a87c:	f003 0301 	and.w	r3, r3, #1
 800a880:	2b00      	cmp	r3, #0
 800a882:	d00b      	beq.n	800a89c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2204      	movs	r2, #4
 800a88a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a892:	f043 0202 	orr.w	r2, r3, #2
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a89c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8a0:	f003 0308 	and.w	r3, r3, #8
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d017      	beq.n	800a8d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a8a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8ac:	f003 0320 	and.w	r3, r3, #32
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d105      	bne.n	800a8c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a8b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a8b8:	4b5c      	ldr	r3, [pc, #368]	@ (800aa2c <HAL_UART_IRQHandler+0x2b8>)
 800a8ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00b      	beq.n	800a8d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2208      	movs	r2, #8
 800a8c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ce:	f043 0208 	orr.w	r2, r3, #8
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a8d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d012      	beq.n	800a90a <HAL_UART_IRQHandler+0x196>
 800a8e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00c      	beq.n	800a90a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a8f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a900:	f043 0220 	orr.w	r2, r3, #32
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a910:	2b00      	cmp	r3, #0
 800a912:	f000 8249 	beq.w	800ada8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a91a:	f003 0320 	and.w	r3, r3, #32
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d013      	beq.n	800a94a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a926:	f003 0320 	and.w	r3, r3, #32
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d105      	bne.n	800a93a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a92e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a936:	2b00      	cmp	r3, #0
 800a938:	d007      	beq.n	800a94a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d003      	beq.n	800a94a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a950:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a95e:	2b40      	cmp	r3, #64	@ 0x40
 800a960:	d005      	beq.n	800a96e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a966:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d054      	beq.n	800aa18 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fedf 	bl	800b732 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a97e:	2b40      	cmp	r3, #64	@ 0x40
 800a980:	d146      	bne.n	800aa10 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	3308      	adds	r3, #8
 800a988:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a990:	e853 3f00 	ldrex	r3, [r3]
 800a994:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a998:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a99c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3308      	adds	r3, #8
 800a9aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a9ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a9b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a9ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a9be:	e841 2300 	strex	r3, r2, [r1]
 800a9c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a9c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1d9      	bne.n	800a982 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d017      	beq.n	800aa08 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9de:	4a15      	ldr	r2, [pc, #84]	@ (800aa34 <HAL_UART_IRQHandler+0x2c0>)
 800a9e0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fb f9c2 	bl	8005d72 <HAL_DMA_Abort_IT>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d019      	beq.n	800aa28 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800aa02:	4610      	mov	r0, r2
 800aa04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa06:	e00f      	b.n	800aa28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 f9e1 	bl	800add0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa0e:	e00b      	b.n	800aa28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 f9dd 	bl	800add0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa16:	e007      	b.n	800aa28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 f9d9 	bl	800add0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800aa26:	e1bf      	b.n	800ada8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa28:	bf00      	nop
    return;
 800aa2a:	e1bd      	b.n	800ada8 <HAL_UART_IRQHandler+0x634>
 800aa2c:	10000001 	.word	0x10000001
 800aa30:	04000120 	.word	0x04000120
 800aa34:	0800b7ff 	.word	0x0800b7ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	f040 8153 	bne.w	800ace8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aa42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa46:	f003 0310 	and.w	r3, r3, #16
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	f000 814c 	beq.w	800ace8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aa50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa54:	f003 0310 	and.w	r3, r3, #16
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f000 8145 	beq.w	800ace8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2210      	movs	r2, #16
 800aa64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa70:	2b40      	cmp	r3, #64	@ 0x40
 800aa72:	f040 80bb 	bne.w	800abec <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f000 818f 	beq.w	800adac <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	f080 8187 	bcs.w	800adac <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aaa4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0320 	and.w	r3, r3, #32
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f040 8087 	bne.w	800abca <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aac8:	e853 3f00 	ldrex	r3, [r3]
 800aacc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aad8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	461a      	mov	r2, r3
 800aae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aae6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aaea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aaf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800aafe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1da      	bne.n	800aabc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	3308      	adds	r3, #8
 800ab0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab10:	e853 3f00 	ldrex	r3, [r3]
 800ab14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ab16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab18:	f023 0301 	bic.w	r3, r3, #1
 800ab1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	3308      	adds	r3, #8
 800ab26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ab2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ab2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ab32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ab36:	e841 2300 	strex	r3, r2, [r1]
 800ab3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ab3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1e1      	bne.n	800ab06 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	3308      	adds	r3, #8
 800ab48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab4c:	e853 3f00 	ldrex	r3, [r3]
 800ab50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ab52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	3308      	adds	r3, #8
 800ab62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ab66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ab68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ab6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ab6e:	e841 2300 	strex	r3, r2, [r1]
 800ab72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ab74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1e3      	bne.n	800ab42 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2220      	movs	r2, #32
 800ab7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab90:	e853 3f00 	ldrex	r3, [r3]
 800ab94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ab96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab98:	f023 0310 	bic.w	r3, r3, #16
 800ab9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	461a      	mov	r2, r3
 800aba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800abac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800abb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800abb2:	e841 2300 	strex	r3, r2, [r1]
 800abb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800abb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1e4      	bne.n	800ab88 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7fb f87b 	bl	8005cc0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2202      	movs	r2, #2
 800abce:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abdc:	b29b      	uxth	r3, r3
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	4619      	mov	r1, r3
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 f8fd 	bl	800ade4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800abea:	e0df      	b.n	800adac <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 80d1 	beq.w	800adb0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800ac0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f000 80cc 	beq.w	800adb0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac20:	e853 3f00 	ldrex	r3, [r3]
 800ac24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	461a      	mov	r2, r3
 800ac36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ac3a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac3c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac42:	e841 2300 	strex	r3, r2, [r1]
 800ac46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1e4      	bne.n	800ac18 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	3308      	adds	r3, #8
 800ac54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac58:	e853 3f00 	ldrex	r3, [r3]
 800ac5c:	623b      	str	r3, [r7, #32]
   return(result);
 800ac5e:	6a3b      	ldr	r3, [r7, #32]
 800ac60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac64:	f023 0301 	bic.w	r3, r3, #1
 800ac68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	3308      	adds	r3, #8
 800ac72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ac76:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac7e:	e841 2300 	strex	r3, r2, [r1]
 800ac82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1e1      	bne.n	800ac4e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2220      	movs	r2, #32
 800ac8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	e853 3f00 	ldrex	r3, [r3]
 800acaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f023 0310 	bic.w	r3, r3, #16
 800acb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	461a      	mov	r2, r3
 800acbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800acc0:	61fb      	str	r3, [r7, #28]
 800acc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc4:	69b9      	ldr	r1, [r7, #24]
 800acc6:	69fa      	ldr	r2, [r7, #28]
 800acc8:	e841 2300 	strex	r3, r2, [r1]
 800accc:	617b      	str	r3, [r7, #20]
   return(result);
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1e4      	bne.n	800ac9e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2202      	movs	r2, #2
 800acd8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800acda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800acde:	4619      	mov	r1, r3
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 f87f 	bl	800ade4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ace6:	e063      	b.n	800adb0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ace8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00e      	beq.n	800ad12 <HAL_UART_IRQHandler+0x59e>
 800acf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800acf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d008      	beq.n	800ad12 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ad08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fdb8 	bl	800b880 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad10:	e051      	b.n	800adb6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ad12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d014      	beq.n	800ad48 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ad1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d105      	bne.n	800ad36 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ad2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d008      	beq.n	800ad48 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d03a      	beq.n	800adb4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	4798      	blx	r3
    }
    return;
 800ad46:	e035      	b.n	800adb4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ad48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d009      	beq.n	800ad68 <HAL_UART_IRQHandler+0x5f4>
 800ad54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d003      	beq.n	800ad68 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fd62 	bl	800b82a <UART_EndTransmit_IT>
    return;
 800ad66:	e026      	b.n	800adb6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ad68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d009      	beq.n	800ad88 <HAL_UART_IRQHandler+0x614>
 800ad74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d003      	beq.n	800ad88 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 fd91 	bl	800b8a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad86:	e016      	b.n	800adb6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ad88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d010      	beq.n	800adb6 <HAL_UART_IRQHandler+0x642>
 800ad94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	da0c      	bge.n	800adb6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fd79 	bl	800b894 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ada2:	e008      	b.n	800adb6 <HAL_UART_IRQHandler+0x642>
      return;
 800ada4:	bf00      	nop
 800ada6:	e006      	b.n	800adb6 <HAL_UART_IRQHandler+0x642>
    return;
 800ada8:	bf00      	nop
 800adaa:	e004      	b.n	800adb6 <HAL_UART_IRQHandler+0x642>
      return;
 800adac:	bf00      	nop
 800adae:	e002      	b.n	800adb6 <HAL_UART_IRQHandler+0x642>
      return;
 800adb0:	bf00      	nop
 800adb2:	e000      	b.n	800adb6 <HAL_UART_IRQHandler+0x642>
    return;
 800adb4:	bf00      	nop
  }
}
 800adb6:	37e8      	adds	r7, #232	@ 0xe8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800adc4:	bf00      	nop
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800add8:	bf00      	nop
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	460b      	mov	r3, r1
 800adee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae0a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae12:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	4313      	orrs	r3, r2
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3714      	adds	r7, #20
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr
	...

0800ae28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae2c:	b08c      	sub	sp, #48	@ 0x30
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	689a      	ldr	r2, [r3, #8]
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	691b      	ldr	r3, [r3, #16]
 800ae40:	431a      	orrs	r2, r3
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	695b      	ldr	r3, [r3, #20]
 800ae46:	431a      	orrs	r2, r3
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	69db      	ldr	r3, [r3, #28]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	4bab      	ldr	r3, [pc, #684]	@ (800b104 <UART_SetConfig+0x2dc>)
 800ae58:	4013      	ands	r3, r2
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	6812      	ldr	r2, [r2, #0]
 800ae5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae60:	430b      	orrs	r3, r1
 800ae62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	68da      	ldr	r2, [r3, #12]
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	430a      	orrs	r2, r1
 800ae78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4aa0      	ldr	r2, [pc, #640]	@ (800b108 <UART_SetConfig+0x2e0>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d004      	beq.n	800ae94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
 800ae8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae90:	4313      	orrs	r3, r2
 800ae92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ae9e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800aea2:	697a      	ldr	r2, [r7, #20]
 800aea4:	6812      	ldr	r2, [r2, #0]
 800aea6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aea8:	430b      	orrs	r3, r1
 800aeaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeb2:	f023 010f 	bic.w	r1, r3, #15
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	430a      	orrs	r2, r1
 800aec0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a91      	ldr	r2, [pc, #580]	@ (800b10c <UART_SetConfig+0x2e4>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d125      	bne.n	800af18 <UART_SetConfig+0xf0>
 800aecc:	4b90      	ldr	r3, [pc, #576]	@ (800b110 <UART_SetConfig+0x2e8>)
 800aece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aed2:	f003 0303 	and.w	r3, r3, #3
 800aed6:	2b03      	cmp	r3, #3
 800aed8:	d81a      	bhi.n	800af10 <UART_SetConfig+0xe8>
 800aeda:	a201      	add	r2, pc, #4	@ (adr r2, 800aee0 <UART_SetConfig+0xb8>)
 800aedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee0:	0800aef1 	.word	0x0800aef1
 800aee4:	0800af01 	.word	0x0800af01
 800aee8:	0800aef9 	.word	0x0800aef9
 800aeec:	0800af09 	.word	0x0800af09
 800aef0:	2301      	movs	r3, #1
 800aef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aef6:	e0d6      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800aef8:	2302      	movs	r3, #2
 800aefa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aefe:	e0d2      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800af00:	2304      	movs	r3, #4
 800af02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af06:	e0ce      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800af08:	2308      	movs	r3, #8
 800af0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af0e:	e0ca      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800af10:	2310      	movs	r3, #16
 800af12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af16:	e0c6      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a7d      	ldr	r2, [pc, #500]	@ (800b114 <UART_SetConfig+0x2ec>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d138      	bne.n	800af94 <UART_SetConfig+0x16c>
 800af22:	4b7b      	ldr	r3, [pc, #492]	@ (800b110 <UART_SetConfig+0x2e8>)
 800af24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af28:	f003 030c 	and.w	r3, r3, #12
 800af2c:	2b0c      	cmp	r3, #12
 800af2e:	d82d      	bhi.n	800af8c <UART_SetConfig+0x164>
 800af30:	a201      	add	r2, pc, #4	@ (adr r2, 800af38 <UART_SetConfig+0x110>)
 800af32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af36:	bf00      	nop
 800af38:	0800af6d 	.word	0x0800af6d
 800af3c:	0800af8d 	.word	0x0800af8d
 800af40:	0800af8d 	.word	0x0800af8d
 800af44:	0800af8d 	.word	0x0800af8d
 800af48:	0800af7d 	.word	0x0800af7d
 800af4c:	0800af8d 	.word	0x0800af8d
 800af50:	0800af8d 	.word	0x0800af8d
 800af54:	0800af8d 	.word	0x0800af8d
 800af58:	0800af75 	.word	0x0800af75
 800af5c:	0800af8d 	.word	0x0800af8d
 800af60:	0800af8d 	.word	0x0800af8d
 800af64:	0800af8d 	.word	0x0800af8d
 800af68:	0800af85 	.word	0x0800af85
 800af6c:	2300      	movs	r3, #0
 800af6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af72:	e098      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800af74:	2302      	movs	r3, #2
 800af76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af7a:	e094      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800af7c:	2304      	movs	r3, #4
 800af7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af82:	e090      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800af84:	2308      	movs	r3, #8
 800af86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af8a:	e08c      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800af8c:	2310      	movs	r3, #16
 800af8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af92:	e088      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a5f      	ldr	r2, [pc, #380]	@ (800b118 <UART_SetConfig+0x2f0>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d125      	bne.n	800afea <UART_SetConfig+0x1c2>
 800af9e:	4b5c      	ldr	r3, [pc, #368]	@ (800b110 <UART_SetConfig+0x2e8>)
 800afa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afa4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800afa8:	2b30      	cmp	r3, #48	@ 0x30
 800afaa:	d016      	beq.n	800afda <UART_SetConfig+0x1b2>
 800afac:	2b30      	cmp	r3, #48	@ 0x30
 800afae:	d818      	bhi.n	800afe2 <UART_SetConfig+0x1ba>
 800afb0:	2b20      	cmp	r3, #32
 800afb2:	d00a      	beq.n	800afca <UART_SetConfig+0x1a2>
 800afb4:	2b20      	cmp	r3, #32
 800afb6:	d814      	bhi.n	800afe2 <UART_SetConfig+0x1ba>
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d002      	beq.n	800afc2 <UART_SetConfig+0x19a>
 800afbc:	2b10      	cmp	r3, #16
 800afbe:	d008      	beq.n	800afd2 <UART_SetConfig+0x1aa>
 800afc0:	e00f      	b.n	800afe2 <UART_SetConfig+0x1ba>
 800afc2:	2300      	movs	r3, #0
 800afc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afc8:	e06d      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800afca:	2302      	movs	r3, #2
 800afcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afd0:	e069      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800afd2:	2304      	movs	r3, #4
 800afd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afd8:	e065      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800afda:	2308      	movs	r3, #8
 800afdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afe0:	e061      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800afe2:	2310      	movs	r3, #16
 800afe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afe8:	e05d      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a4b      	ldr	r2, [pc, #300]	@ (800b11c <UART_SetConfig+0x2f4>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d125      	bne.n	800b040 <UART_SetConfig+0x218>
 800aff4:	4b46      	ldr	r3, [pc, #280]	@ (800b110 <UART_SetConfig+0x2e8>)
 800aff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800affa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800affe:	2bc0      	cmp	r3, #192	@ 0xc0
 800b000:	d016      	beq.n	800b030 <UART_SetConfig+0x208>
 800b002:	2bc0      	cmp	r3, #192	@ 0xc0
 800b004:	d818      	bhi.n	800b038 <UART_SetConfig+0x210>
 800b006:	2b80      	cmp	r3, #128	@ 0x80
 800b008:	d00a      	beq.n	800b020 <UART_SetConfig+0x1f8>
 800b00a:	2b80      	cmp	r3, #128	@ 0x80
 800b00c:	d814      	bhi.n	800b038 <UART_SetConfig+0x210>
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d002      	beq.n	800b018 <UART_SetConfig+0x1f0>
 800b012:	2b40      	cmp	r3, #64	@ 0x40
 800b014:	d008      	beq.n	800b028 <UART_SetConfig+0x200>
 800b016:	e00f      	b.n	800b038 <UART_SetConfig+0x210>
 800b018:	2300      	movs	r3, #0
 800b01a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b01e:	e042      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800b020:	2302      	movs	r3, #2
 800b022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b026:	e03e      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800b028:	2304      	movs	r3, #4
 800b02a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b02e:	e03a      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800b030:	2308      	movs	r3, #8
 800b032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b036:	e036      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800b038:	2310      	movs	r3, #16
 800b03a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b03e:	e032      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a30      	ldr	r2, [pc, #192]	@ (800b108 <UART_SetConfig+0x2e0>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d12a      	bne.n	800b0a0 <UART_SetConfig+0x278>
 800b04a:	4b31      	ldr	r3, [pc, #196]	@ (800b110 <UART_SetConfig+0x2e8>)
 800b04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b050:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b054:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b058:	d01a      	beq.n	800b090 <UART_SetConfig+0x268>
 800b05a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b05e:	d81b      	bhi.n	800b098 <UART_SetConfig+0x270>
 800b060:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b064:	d00c      	beq.n	800b080 <UART_SetConfig+0x258>
 800b066:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b06a:	d815      	bhi.n	800b098 <UART_SetConfig+0x270>
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d003      	beq.n	800b078 <UART_SetConfig+0x250>
 800b070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b074:	d008      	beq.n	800b088 <UART_SetConfig+0x260>
 800b076:	e00f      	b.n	800b098 <UART_SetConfig+0x270>
 800b078:	2300      	movs	r3, #0
 800b07a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b07e:	e012      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800b080:	2302      	movs	r3, #2
 800b082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b086:	e00e      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800b088:	2304      	movs	r3, #4
 800b08a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b08e:	e00a      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800b090:	2308      	movs	r3, #8
 800b092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b096:	e006      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800b098:	2310      	movs	r3, #16
 800b09a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b09e:	e002      	b.n	800b0a6 <UART_SetConfig+0x27e>
 800b0a0:	2310      	movs	r3, #16
 800b0a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a17      	ldr	r2, [pc, #92]	@ (800b108 <UART_SetConfig+0x2e0>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	f040 80a8 	bne.w	800b202 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b0b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0b6:	2b08      	cmp	r3, #8
 800b0b8:	d834      	bhi.n	800b124 <UART_SetConfig+0x2fc>
 800b0ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b0c0 <UART_SetConfig+0x298>)
 800b0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c0:	0800b0e5 	.word	0x0800b0e5
 800b0c4:	0800b125 	.word	0x0800b125
 800b0c8:	0800b0ed 	.word	0x0800b0ed
 800b0cc:	0800b125 	.word	0x0800b125
 800b0d0:	0800b0f3 	.word	0x0800b0f3
 800b0d4:	0800b125 	.word	0x0800b125
 800b0d8:	0800b125 	.word	0x0800b125
 800b0dc:	0800b125 	.word	0x0800b125
 800b0e0:	0800b0fb 	.word	0x0800b0fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0e4:	f7fc fc34 	bl	8007950 <HAL_RCC_GetPCLK1Freq>
 800b0e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b0ea:	e021      	b.n	800b130 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0ec:	4b0c      	ldr	r3, [pc, #48]	@ (800b120 <UART_SetConfig+0x2f8>)
 800b0ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b0f0:	e01e      	b.n	800b130 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0f2:	f7fc fbbf 	bl	8007874 <HAL_RCC_GetSysClockFreq>
 800b0f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b0f8:	e01a      	b.n	800b130 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b100:	e016      	b.n	800b130 <UART_SetConfig+0x308>
 800b102:	bf00      	nop
 800b104:	cfff69f3 	.word	0xcfff69f3
 800b108:	40008000 	.word	0x40008000
 800b10c:	40013800 	.word	0x40013800
 800b110:	40021000 	.word	0x40021000
 800b114:	40004400 	.word	0x40004400
 800b118:	40004800 	.word	0x40004800
 800b11c:	40004c00 	.word	0x40004c00
 800b120:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b124:	2300      	movs	r3, #0
 800b126:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b12e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b132:	2b00      	cmp	r3, #0
 800b134:	f000 812a 	beq.w	800b38c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b13c:	4a9e      	ldr	r2, [pc, #632]	@ (800b3b8 <UART_SetConfig+0x590>)
 800b13e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b142:	461a      	mov	r2, r3
 800b144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b146:	fbb3 f3f2 	udiv	r3, r3, r2
 800b14a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	685a      	ldr	r2, [r3, #4]
 800b150:	4613      	mov	r3, r2
 800b152:	005b      	lsls	r3, r3, #1
 800b154:	4413      	add	r3, r2
 800b156:	69ba      	ldr	r2, [r7, #24]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d305      	bcc.n	800b168 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b162:	69ba      	ldr	r2, [r7, #24]
 800b164:	429a      	cmp	r2, r3
 800b166:	d903      	bls.n	800b170 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b16e:	e10d      	b.n	800b38c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b172:	2200      	movs	r2, #0
 800b174:	60bb      	str	r3, [r7, #8]
 800b176:	60fa      	str	r2, [r7, #12]
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b17c:	4a8e      	ldr	r2, [pc, #568]	@ (800b3b8 <UART_SetConfig+0x590>)
 800b17e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b182:	b29b      	uxth	r3, r3
 800b184:	2200      	movs	r2, #0
 800b186:	603b      	str	r3, [r7, #0]
 800b188:	607a      	str	r2, [r7, #4]
 800b18a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b18e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b192:	f7f5 fda1 	bl	8000cd8 <__aeabi_uldivmod>
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	4610      	mov	r0, r2
 800b19c:	4619      	mov	r1, r3
 800b19e:	f04f 0200 	mov.w	r2, #0
 800b1a2:	f04f 0300 	mov.w	r3, #0
 800b1a6:	020b      	lsls	r3, r1, #8
 800b1a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b1ac:	0202      	lsls	r2, r0, #8
 800b1ae:	6979      	ldr	r1, [r7, #20]
 800b1b0:	6849      	ldr	r1, [r1, #4]
 800b1b2:	0849      	lsrs	r1, r1, #1
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	4605      	mov	r5, r0
 800b1ba:	eb12 0804 	adds.w	r8, r2, r4
 800b1be:	eb43 0905 	adc.w	r9, r3, r5
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	469a      	mov	sl, r3
 800b1ca:	4693      	mov	fp, r2
 800b1cc:	4652      	mov	r2, sl
 800b1ce:	465b      	mov	r3, fp
 800b1d0:	4640      	mov	r0, r8
 800b1d2:	4649      	mov	r1, r9
 800b1d4:	f7f5 fd80 	bl	8000cd8 <__aeabi_uldivmod>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4613      	mov	r3, r2
 800b1de:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1e6:	d308      	bcc.n	800b1fa <UART_SetConfig+0x3d2>
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
 800b1ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1ee:	d204      	bcs.n	800b1fa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	6a3a      	ldr	r2, [r7, #32]
 800b1f6:	60da      	str	r2, [r3, #12]
 800b1f8:	e0c8      	b.n	800b38c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b200:	e0c4      	b.n	800b38c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	69db      	ldr	r3, [r3, #28]
 800b206:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b20a:	d167      	bne.n	800b2dc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b20c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b210:	2b08      	cmp	r3, #8
 800b212:	d828      	bhi.n	800b266 <UART_SetConfig+0x43e>
 800b214:	a201      	add	r2, pc, #4	@ (adr r2, 800b21c <UART_SetConfig+0x3f4>)
 800b216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21a:	bf00      	nop
 800b21c:	0800b241 	.word	0x0800b241
 800b220:	0800b249 	.word	0x0800b249
 800b224:	0800b251 	.word	0x0800b251
 800b228:	0800b267 	.word	0x0800b267
 800b22c:	0800b257 	.word	0x0800b257
 800b230:	0800b267 	.word	0x0800b267
 800b234:	0800b267 	.word	0x0800b267
 800b238:	0800b267 	.word	0x0800b267
 800b23c:	0800b25f 	.word	0x0800b25f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b240:	f7fc fb86 	bl	8007950 <HAL_RCC_GetPCLK1Freq>
 800b244:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b246:	e014      	b.n	800b272 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b248:	f7fc fb98 	bl	800797c <HAL_RCC_GetPCLK2Freq>
 800b24c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b24e:	e010      	b.n	800b272 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b250:	4b5a      	ldr	r3, [pc, #360]	@ (800b3bc <UART_SetConfig+0x594>)
 800b252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b254:	e00d      	b.n	800b272 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b256:	f7fc fb0d 	bl	8007874 <HAL_RCC_GetSysClockFreq>
 800b25a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b25c:	e009      	b.n	800b272 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b25e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b264:	e005      	b.n	800b272 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b266:	2300      	movs	r3, #0
 800b268:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b270:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 8089 	beq.w	800b38c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b27e:	4a4e      	ldr	r2, [pc, #312]	@ (800b3b8 <UART_SetConfig+0x590>)
 800b280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b284:	461a      	mov	r2, r3
 800b286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b288:	fbb3 f3f2 	udiv	r3, r3, r2
 800b28c:	005a      	lsls	r2, r3, #1
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	085b      	lsrs	r3, r3, #1
 800b294:	441a      	add	r2, r3
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b29e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2a0:	6a3b      	ldr	r3, [r7, #32]
 800b2a2:	2b0f      	cmp	r3, #15
 800b2a4:	d916      	bls.n	800b2d4 <UART_SetConfig+0x4ac>
 800b2a6:	6a3b      	ldr	r3, [r7, #32]
 800b2a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2ac:	d212      	bcs.n	800b2d4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b2ae:	6a3b      	ldr	r3, [r7, #32]
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	f023 030f 	bic.w	r3, r3, #15
 800b2b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
 800b2ba:	085b      	lsrs	r3, r3, #1
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	f003 0307 	and.w	r3, r3, #7
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	8bfb      	ldrh	r3, [r7, #30]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	8bfa      	ldrh	r2, [r7, #30]
 800b2d0:	60da      	str	r2, [r3, #12]
 800b2d2:	e05b      	b.n	800b38c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b2da:	e057      	b.n	800b38c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b2dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b2e0:	2b08      	cmp	r3, #8
 800b2e2:	d828      	bhi.n	800b336 <UART_SetConfig+0x50e>
 800b2e4:	a201      	add	r2, pc, #4	@ (adr r2, 800b2ec <UART_SetConfig+0x4c4>)
 800b2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ea:	bf00      	nop
 800b2ec:	0800b311 	.word	0x0800b311
 800b2f0:	0800b319 	.word	0x0800b319
 800b2f4:	0800b321 	.word	0x0800b321
 800b2f8:	0800b337 	.word	0x0800b337
 800b2fc:	0800b327 	.word	0x0800b327
 800b300:	0800b337 	.word	0x0800b337
 800b304:	0800b337 	.word	0x0800b337
 800b308:	0800b337 	.word	0x0800b337
 800b30c:	0800b32f 	.word	0x0800b32f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b310:	f7fc fb1e 	bl	8007950 <HAL_RCC_GetPCLK1Freq>
 800b314:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b316:	e014      	b.n	800b342 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b318:	f7fc fb30 	bl	800797c <HAL_RCC_GetPCLK2Freq>
 800b31c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b31e:	e010      	b.n	800b342 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b320:	4b26      	ldr	r3, [pc, #152]	@ (800b3bc <UART_SetConfig+0x594>)
 800b322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b324:	e00d      	b.n	800b342 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b326:	f7fc faa5 	bl	8007874 <HAL_RCC_GetSysClockFreq>
 800b32a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b32c:	e009      	b.n	800b342 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b32e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b334:	e005      	b.n	800b342 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b336:	2300      	movs	r3, #0
 800b338:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b340:	bf00      	nop
    }

    if (pclk != 0U)
 800b342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b344:	2b00      	cmp	r3, #0
 800b346:	d021      	beq.n	800b38c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b34c:	4a1a      	ldr	r2, [pc, #104]	@ (800b3b8 <UART_SetConfig+0x590>)
 800b34e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b352:	461a      	mov	r2, r3
 800b354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b356:	fbb3 f2f2 	udiv	r2, r3, r2
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	085b      	lsrs	r3, r3, #1
 800b360:	441a      	add	r2, r3
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	fbb2 f3f3 	udiv	r3, r2, r3
 800b36a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b36c:	6a3b      	ldr	r3, [r7, #32]
 800b36e:	2b0f      	cmp	r3, #15
 800b370:	d909      	bls.n	800b386 <UART_SetConfig+0x55e>
 800b372:	6a3b      	ldr	r3, [r7, #32]
 800b374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b378:	d205      	bcs.n	800b386 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b37a:	6a3b      	ldr	r3, [r7, #32]
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	60da      	str	r2, [r3, #12]
 800b384:	e002      	b.n	800b38c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	2201      	movs	r2, #1
 800b390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	2201      	movs	r2, #1
 800b398:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b3a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3730      	adds	r7, #48	@ 0x30
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3b6:	bf00      	nop
 800b3b8:	08011e0c 	.word	0x08011e0c
 800b3bc:	00f42400 	.word	0x00f42400

0800b3c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3cc:	f003 0308 	and.w	r3, r3, #8
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00a      	beq.n	800b3ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	430a      	orrs	r2, r1
 800b3e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ee:	f003 0301 	and.w	r3, r3, #1
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00a      	beq.n	800b40c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	430a      	orrs	r2, r1
 800b40a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b410:	f003 0302 	and.w	r3, r3, #2
 800b414:	2b00      	cmp	r3, #0
 800b416:	d00a      	beq.n	800b42e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	430a      	orrs	r2, r1
 800b42c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b432:	f003 0304 	and.w	r3, r3, #4
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00a      	beq.n	800b450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	430a      	orrs	r2, r1
 800b44e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b454:	f003 0310 	and.w	r3, r3, #16
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00a      	beq.n	800b472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	430a      	orrs	r2, r1
 800b470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b476:	f003 0320 	and.w	r3, r3, #32
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00a      	beq.n	800b494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	430a      	orrs	r2, r1
 800b492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d01a      	beq.n	800b4d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	430a      	orrs	r2, r1
 800b4b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4be:	d10a      	bne.n	800b4d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	430a      	orrs	r2, r1
 800b4d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00a      	beq.n	800b4f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	430a      	orrs	r2, r1
 800b4f6:	605a      	str	r2, [r3, #4]
  }
}
 800b4f8:	bf00      	nop
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b098      	sub	sp, #96	@ 0x60
 800b508:	af02      	add	r7, sp, #8
 800b50a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b514:	f7f7 f948 	bl	80027a8 <HAL_GetTick>
 800b518:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 0308 	and.w	r3, r3, #8
 800b524:	2b08      	cmp	r3, #8
 800b526:	d12f      	bne.n	800b588 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b528:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b530:	2200      	movs	r2, #0
 800b532:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f88e 	bl	800b658 <UART_WaitOnFlagUntilTimeout>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d022      	beq.n	800b588 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b54a:	e853 3f00 	ldrex	r3, [r3]
 800b54e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b556:	653b      	str	r3, [r7, #80]	@ 0x50
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	461a      	mov	r2, r3
 800b55e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b560:	647b      	str	r3, [r7, #68]	@ 0x44
 800b562:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b564:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b566:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b568:	e841 2300 	strex	r3, r2, [r1]
 800b56c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b56e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1e6      	bne.n	800b542 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2220      	movs	r2, #32
 800b578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b584:	2303      	movs	r3, #3
 800b586:	e063      	b.n	800b650 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f003 0304 	and.w	r3, r3, #4
 800b592:	2b04      	cmp	r3, #4
 800b594:	d149      	bne.n	800b62a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b596:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f857 	bl	800b658 <UART_WaitOnFlagUntilTimeout>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d03c      	beq.n	800b62a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b8:	e853 3f00 	ldrex	r3, [r3]
 800b5bc:	623b      	str	r3, [r7, #32]
   return(result);
 800b5be:	6a3b      	ldr	r3, [r7, #32]
 800b5c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5d6:	e841 2300 	strex	r3, r2, [r1]
 800b5da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1e6      	bne.n	800b5b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	3308      	adds	r3, #8
 800b5e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	e853 3f00 	ldrex	r3, [r3]
 800b5f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f023 0301 	bic.w	r3, r3, #1
 800b5f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	3308      	adds	r3, #8
 800b600:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b602:	61fa      	str	r2, [r7, #28]
 800b604:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b606:	69b9      	ldr	r1, [r7, #24]
 800b608:	69fa      	ldr	r2, [r7, #28]
 800b60a:	e841 2300 	strex	r3, r2, [r1]
 800b60e:	617b      	str	r3, [r7, #20]
   return(result);
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1e5      	bne.n	800b5e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2220      	movs	r2, #32
 800b61a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b626:	2303      	movs	r3, #3
 800b628:	e012      	b.n	800b650 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2220      	movs	r2, #32
 800b62e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2220      	movs	r2, #32
 800b636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3758      	adds	r7, #88	@ 0x58
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	603b      	str	r3, [r7, #0]
 800b664:	4613      	mov	r3, r2
 800b666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b668:	e04f      	b.n	800b70a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b670:	d04b      	beq.n	800b70a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b672:	f7f7 f899 	bl	80027a8 <HAL_GetTick>
 800b676:	4602      	mov	r2, r0
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	69ba      	ldr	r2, [r7, #24]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d302      	bcc.n	800b688 <UART_WaitOnFlagUntilTimeout+0x30>
 800b682:	69bb      	ldr	r3, [r7, #24]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d101      	bne.n	800b68c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b688:	2303      	movs	r3, #3
 800b68a:	e04e      	b.n	800b72a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f003 0304 	and.w	r3, r3, #4
 800b696:	2b00      	cmp	r3, #0
 800b698:	d037      	beq.n	800b70a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2b80      	cmp	r3, #128	@ 0x80
 800b69e:	d034      	beq.n	800b70a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	2b40      	cmp	r3, #64	@ 0x40
 800b6a4:	d031      	beq.n	800b70a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	69db      	ldr	r3, [r3, #28]
 800b6ac:	f003 0308 	and.w	r3, r3, #8
 800b6b0:	2b08      	cmp	r3, #8
 800b6b2:	d110      	bne.n	800b6d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2208      	movs	r2, #8
 800b6ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f000 f838 	bl	800b732 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2208      	movs	r2, #8
 800b6c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e029      	b.n	800b72a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	69db      	ldr	r3, [r3, #28]
 800b6dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6e4:	d111      	bne.n	800b70a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f000 f81e 	bl	800b732 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2220      	movs	r2, #32
 800b6fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2200      	movs	r2, #0
 800b702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b706:	2303      	movs	r3, #3
 800b708:	e00f      	b.n	800b72a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	69da      	ldr	r2, [r3, #28]
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	4013      	ands	r3, r2
 800b714:	68ba      	ldr	r2, [r7, #8]
 800b716:	429a      	cmp	r2, r3
 800b718:	bf0c      	ite	eq
 800b71a:	2301      	moveq	r3, #1
 800b71c:	2300      	movne	r3, #0
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	461a      	mov	r2, r3
 800b722:	79fb      	ldrb	r3, [r7, #7]
 800b724:	429a      	cmp	r2, r3
 800b726:	d0a0      	beq.n	800b66a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b728:	2300      	movs	r3, #0
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b732:	b480      	push	{r7}
 800b734:	b095      	sub	sp, #84	@ 0x54
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b742:	e853 3f00 	ldrex	r3, [r3]
 800b746:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b74a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b74e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	461a      	mov	r2, r3
 800b756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b758:	643b      	str	r3, [r7, #64]	@ 0x40
 800b75a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b75c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b75e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b760:	e841 2300 	strex	r3, r2, [r1]
 800b764:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1e6      	bne.n	800b73a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	3308      	adds	r3, #8
 800b772:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b774:	6a3b      	ldr	r3, [r7, #32]
 800b776:	e853 3f00 	ldrex	r3, [r3]
 800b77a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b782:	f023 0301 	bic.w	r3, r3, #1
 800b786:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3308      	adds	r3, #8
 800b78e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b790:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b792:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b794:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b798:	e841 2300 	strex	r3, r2, [r1]
 800b79c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d1e3      	bne.n	800b76c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d118      	bne.n	800b7de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	e853 3f00 	ldrex	r3, [r3]
 800b7b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	f023 0310 	bic.w	r3, r3, #16
 800b7c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7ca:	61bb      	str	r3, [r7, #24]
 800b7cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ce:	6979      	ldr	r1, [r7, #20]
 800b7d0:	69ba      	ldr	r2, [r7, #24]
 800b7d2:	e841 2300 	strex	r3, r2, [r1]
 800b7d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1e6      	bne.n	800b7ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2220      	movs	r2, #32
 800b7e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b7f2:	bf00      	nop
 800b7f4:	3754      	adds	r7, #84	@ 0x54
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b80a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2200      	movs	r2, #0
 800b810:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f7ff fad7 	bl	800add0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b822:	bf00      	nop
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b088      	sub	sp, #32
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	e853 3f00 	ldrex	r3, [r3]
 800b83e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b846:	61fb      	str	r3, [r7, #28]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	461a      	mov	r2, r3
 800b84e:	69fb      	ldr	r3, [r7, #28]
 800b850:	61bb      	str	r3, [r7, #24]
 800b852:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b854:	6979      	ldr	r1, [r7, #20]
 800b856:	69ba      	ldr	r2, [r7, #24]
 800b858:	e841 2300 	strex	r3, r2, [r1]
 800b85c:	613b      	str	r3, [r7, #16]
   return(result);
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1e6      	bne.n	800b832 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2220      	movs	r2, #32
 800b868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7ff faa2 	bl	800adbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b878:	bf00      	nop
 800b87a:	3720      	adds	r7, #32
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b89c:	bf00      	nop
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b8b0:	bf00      	nop
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d101      	bne.n	800b8d2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b8ce:	2302      	movs	r3, #2
 800b8d0:	e027      	b.n	800b922 <HAL_UARTEx_DisableFifoMode+0x66>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2224      	movs	r2, #36	@ 0x24
 800b8de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f022 0201 	bic.w	r2, r2, #1
 800b8f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b900:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2220      	movs	r2, #32
 800b914:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	3714      	adds	r7, #20
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b084      	sub	sp, #16
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
 800b936:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d101      	bne.n	800b946 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b942:	2302      	movs	r3, #2
 800b944:	e02d      	b.n	800b9a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2201      	movs	r2, #1
 800b94a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2224      	movs	r2, #36	@ 0x24
 800b952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f022 0201 	bic.w	r2, r2, #1
 800b96c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	683a      	ldr	r2, [r7, #0]
 800b97e:	430a      	orrs	r2, r1
 800b980:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f850 	bl	800ba28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2220      	movs	r2, #32
 800b994:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b084      	sub	sp, #16
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
 800b9b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d101      	bne.n	800b9c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b9be:	2302      	movs	r3, #2
 800b9c0:	e02d      	b.n	800ba1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2224      	movs	r2, #36	@ 0x24
 800b9ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f022 0201 	bic.w	r2, r2, #1
 800b9e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	430a      	orrs	r2, r1
 800b9fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 f812 	bl	800ba28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2220      	movs	r2, #32
 800ba10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d108      	bne.n	800ba4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba48:	e031      	b.n	800baae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba4a:	2308      	movs	r3, #8
 800ba4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba4e:	2308      	movs	r3, #8
 800ba50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	0e5b      	lsrs	r3, r3, #25
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	f003 0307 	and.w	r3, r3, #7
 800ba60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	0f5b      	lsrs	r3, r3, #29
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	f003 0307 	and.w	r3, r3, #7
 800ba70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba72:	7bbb      	ldrb	r3, [r7, #14]
 800ba74:	7b3a      	ldrb	r2, [r7, #12]
 800ba76:	4911      	ldr	r1, [pc, #68]	@ (800babc <UARTEx_SetNbDataToProcess+0x94>)
 800ba78:	5c8a      	ldrb	r2, [r1, r2]
 800ba7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba7e:	7b3a      	ldrb	r2, [r7, #12]
 800ba80:	490f      	ldr	r1, [pc, #60]	@ (800bac0 <UARTEx_SetNbDataToProcess+0x98>)
 800ba82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba84:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
 800ba92:	7b7a      	ldrb	r2, [r7, #13]
 800ba94:	4909      	ldr	r1, [pc, #36]	@ (800babc <UARTEx_SetNbDataToProcess+0x94>)
 800ba96:	5c8a      	ldrb	r2, [r1, r2]
 800ba98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba9c:	7b7a      	ldrb	r2, [r7, #13]
 800ba9e:	4908      	ldr	r1, [pc, #32]	@ (800bac0 <UARTEx_SetNbDataToProcess+0x98>)
 800baa0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800baa2:	fb93 f3f2 	sdiv	r3, r3, r2
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800baae:	bf00      	nop
 800bab0:	3714      	adds	r7, #20
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	08011e24 	.word	0x08011e24
 800bac0:	08011e2c 	.word	0x08011e2c

0800bac4 <appInit>:

static void standingBy();
static void working(void);

void appInit()
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	af00      	add	r7, sp, #0
    motorInit();
 800bac8:	f000 f8d8 	bl	800bc7c <motorInit>
}
 800bacc:	bf00      	nop
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <appRunning>:

void appRunning()
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	af00      	add	r7, sp, #0

    getKeyState(&keyState);
 800bad4:	480d      	ldr	r0, [pc, #52]	@ (800bb0c <appRunning+0x3c>)
 800bad6:	f000 fc19 	bl	800c30c <getKeyState>

    if (++flashCnt >= 10)
 800bada:	4b0d      	ldr	r3, [pc, #52]	@ (800bb10 <appRunning+0x40>)
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	3301      	adds	r3, #1
 800bae0:	b2da      	uxtb	r2, r3
 800bae2:	4b0b      	ldr	r3, [pc, #44]	@ (800bb10 <appRunning+0x40>)
 800bae4:	701a      	strb	r2, [r3, #0]
 800bae6:	4b0a      	ldr	r3, [pc, #40]	@ (800bb10 <appRunning+0x40>)
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	2b09      	cmp	r3, #9
 800baec:	d902      	bls.n	800baf4 <appRunning+0x24>
        flashCnt = 0;
 800baee:	4b08      	ldr	r3, [pc, #32]	@ (800bb10 <appRunning+0x40>)
 800baf0:	2200      	movs	r2, #0
 800baf2:	701a      	strb	r2, [r3, #0]

    led1On = 0;
 800baf4:	4b07      	ldr	r3, [pc, #28]	@ (800bb14 <appRunning+0x44>)
 800baf6:	2200      	movs	r2, #0
 800baf8:	701a      	strb	r2, [r3, #0]
    led2On = 0;
 800bafa:	4b07      	ldr	r3, [pc, #28]	@ (800bb18 <appRunning+0x48>)
 800bafc:	2200      	movs	r2, #0
 800bafe:	701a      	strb	r2, [r3, #0]
    // case WORK:
    //     working();
    //     break;
    // }

    txDataProcess();
 800bb00:	f000 f80c 	bl	800bb1c <txDataProcess>

    LED_drive();
 800bb04:	f000 fc40 	bl	800c388 <LED_drive>
}
 800bb08:	bf00      	nop
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	20000698 	.word	0x20000698
 800bb10:	20000699 	.word	0x20000699
 800bb14:	20000880 	.word	0x20000880
 800bb18:	20000881 	.word	0x20000881

0800bb1c <txDataProcess>:
        // }
    }
}
#include "mt6701.h"
static void txDataProcess()
{
 800bb1c:	b5b0      	push	{r4, r5, r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af02      	add	r7, sp, #8
    // uint val;
    // uint angle;
    // getZeroElecAngle(&motor1);
    getElecAngle(&motor1);
 800bb22:	480e      	ldr	r0, [pc, #56]	@ (800bb5c <txDataProcess+0x40>)
 800bb24:	f000 f918 	bl	800bd58 <getElecAngle>

    sprintf(txBuffer, "zeroAngle: %f, rawAngle: %f\n", motor1.zeroElectricAngleOffSet, motor1.angle_el);
 800bb28:	4b0c      	ldr	r3, [pc, #48]	@ (800bb5c <txDataProcess+0x40>)
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7f4 fd33 	bl	8000598 <__aeabi_f2d>
 800bb32:	4604      	mov	r4, r0
 800bb34:	460d      	mov	r5, r1
 800bb36:	4b09      	ldr	r3, [pc, #36]	@ (800bb5c <txDataProcess+0x40>)
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7f4 fd2c 	bl	8000598 <__aeabi_f2d>
 800bb40:	4602      	mov	r2, r0
 800bb42:	460b      	mov	r3, r1
 800bb44:	e9cd 2300 	strd	r2, r3, [sp]
 800bb48:	4622      	mov	r2, r4
 800bb4a:	462b      	mov	r3, r5
 800bb4c:	4904      	ldr	r1, [pc, #16]	@ (800bb60 <txDataProcess+0x44>)
 800bb4e:	4805      	ldr	r0, [pc, #20]	@ (800bb64 <txDataProcess+0x48>)
 800bb50:	f002 fb88 	bl	800e264 <siprintf>
    // sprintf(txBuffer, "rawData: %u, rawAnle: %f, fullAngle: %f\n", rawData, rawAngle, fullAngle);
    // sprintf(txBuffer, "rawAnle: %f, eAngle: %f\n", rawAngle, motor1.angle_el);
}
 800bb54:	bf00      	nop
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bdb0      	pop	{r4, r5, r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	2000069c 	.word	0x2000069c
 800bb60:	08011da0 	.word	0x08011da0
 800bb64:	20000750 	.word	0x20000750

0800bb68 <Parity_bit_Calculate>:
static unsigned int rotationCount, rotationCount_Last;

// https://blog.csdn.net/weixin_42416680/article/details/132197502
//  计算奇偶函数
uint16_t Parity_bit_Calculate(uint16_t data_2_cal)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b085      	sub	sp, #20
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	4603      	mov	r3, r0
 800bb70:	80fb      	strh	r3, [r7, #6]
    uint16_t parity_bit_value = 0;
 800bb72:	2300      	movs	r3, #0
 800bb74:	81fb      	strh	r3, [r7, #14]
    while (data_2_cal != 0)
 800bb76:	e006      	b.n	800bb86 <Parity_bit_Calculate+0x1e>
    {
        parity_bit_value ^= data_2_cal;
 800bb78:	89fa      	ldrh	r2, [r7, #14]
 800bb7a:	88fb      	ldrh	r3, [r7, #6]
 800bb7c:	4053      	eors	r3, r2
 800bb7e:	81fb      	strh	r3, [r7, #14]
        data_2_cal >>= 1;
 800bb80:	88fb      	ldrh	r3, [r7, #6]
 800bb82:	085b      	lsrs	r3, r3, #1
 800bb84:	80fb      	strh	r3, [r7, #6]
    while (data_2_cal != 0)
 800bb86:	88fb      	ldrh	r3, [r7, #6]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1f5      	bne.n	800bb78 <Parity_bit_Calculate+0x10>
    }
    return (parity_bit_value & 0x1);
 800bb8c:	89fb      	ldrh	r3, [r7, #14]
 800bb8e:	f003 0301 	and.w	r3, r3, #1
 800bb92:	b29b      	uxth	r3, r3
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3714      	adds	r7, #20
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <SPI_ReadWrite_OneByte>:
// SPI发送读取函数
uint16_t SPI_ReadWrite_OneByte(uint16_t _txdata)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b086      	sub	sp, #24
 800bba4:	af02      	add	r7, sp, #8
 800bba6:	4603      	mov	r3, r0
 800bba8:	80fb      	strh	r3, [r7, #6]
    CS_GPIO_Port->BSRR = (uint32_t)CS_Pin << 16U; // Chip select
 800bbaa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bbae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bbb2:	619a      	str	r2, [r3, #24]
                                                  // AS5407P_CS_L // cs拉低
    uint16_t rxdata;

    if (HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&_txdata, (uint8_t *)&rxdata, 1, 1000) != HAL_OK)
 800bbb4:	f107 020e 	add.w	r2, r7, #14
 800bbb8:	1db9      	adds	r1, r7, #6
 800bbba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	4808      	ldr	r0, [pc, #32]	@ (800bbe4 <SPI_ReadWrite_OneByte+0x44>)
 800bbc4:	f7fc f9d1 	bl	8007f6a <HAL_SPI_TransmitReceive>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <SPI_ReadWrite_OneByte+0x32>
        rxdata = 0;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	81fb      	strh	r3, [r7, #14]
    //   AS5407P_CS_H // cs拉高 return rxdata;

    CS_GPIO_Port->BSRR = CS_Pin;
 800bbd2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bbd6:	2210      	movs	r2, #16
 800bbd8:	619a      	str	r2, [r3, #24]
    return rxdata;
 800bbda:	89fb      	ldrh	r3, [r7, #14]
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3710      	adds	r7, #16
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	200004a0 	.word	0x200004a0

0800bbe8 <as5047readRawData>:

uint16_t as5047readRawData(uint16_t add)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	4603      	mov	r3, r0
 800bbf0:	80fb      	strh	r3, [r7, #6]
    uint16_t data;
    add |= 0x4000;
 800bbf2:	88fb      	ldrh	r3, [r7, #6]
 800bbf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bbf8:	80fb      	strh	r3, [r7, #6]
    // 读指令 bit14 置1
    if (Parity_bit_Calculate(add) == 1)
 800bbfa:	88fb      	ldrh	r3, [r7, #6]
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7ff ffb3 	bl	800bb68 <Parity_bit_Calculate>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d105      	bne.n	800bc14 <as5047readRawData+0x2c>
        add = add | 0x8000;
 800bc08:	88fb      	ldrh	r3, [r7, #6]
 800bc0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc12:	80fb      	strh	r3, [r7, #6]
    // 如果前15位 1的个数位偶数，则Bit15 置1
    SPI_ReadWrite_OneByte(add);
 800bc14:	88fb      	ldrh	r3, [r7, #6]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7ff ffc2 	bl	800bba0 <SPI_ReadWrite_OneByte>
    // 发送一条指令，不管读回的数据
    data = SPI_ReadWrite_OneByte(NOP | 0x4000);
 800bc1c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800bc20:	f7ff ffbe 	bl	800bba0 <SPI_ReadWrite_OneByte>
 800bc24:	4603      	mov	r3, r0
 800bc26:	81fb      	strh	r3, [r7, #14]
    // 发送一条空指令，读取上一次指令返回的数据。
    data &= 0x3fff;
 800bc28:	89fb      	ldrh	r3, [r7, #14]
 800bc2a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bc2e:	81fb      	strh	r3, [r7, #14]
    return data;
 800bc30:	89fb      	ldrh	r3, [r7, #14]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
	...

0800bc3c <as5047GetRawAngle>:

// 将传感器原始数据转化为弧度
float as5047GetRawAngle(void)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
    uint16_t rawData = as5047readRawData(ANGLECOM);
 800bc42:	f643 70ff 	movw	r0, #16383	@ 0x3fff
 800bc46:	f7ff ffcf 	bl	800bbe8 <as5047readRawData>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800bc4e:	88fb      	ldrh	r3, [r7, #6]
 800bc50:	ee07 3a90 	vmov	s15, r3
 800bc54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bc58:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800bc74 <as5047GetRawAngle+0x38>
 800bc5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bc60:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800bc78 <as5047GetRawAngle+0x3c>
 800bc64:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800bc68:	eeb0 0a67 	vmov.f32	s0, s15
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	46800000 	.word	0x46800000
 800bc78:	40c90fdb 	.word	0x40c90fdb

0800bc7c <motorInit>:

static void setPwm1(unsigned short int a, unsigned short int b, unsigned short int c);
static void getElecAngle1(BldcMotor *motor);

void motorInit()
{
 800bc7c:	b5b0      	push	{r4, r5, r7, lr}
 800bc7e:	af00      	add	r7, sp, #0
    motor1.pole_pairs = 7;
 800bc80:	4b15      	ldr	r3, [pc, #84]	@ (800bcd8 <motorInit+0x5c>)
 800bc82:	2207      	movs	r2, #7
 800bc84:	721a      	strb	r2, [r3, #8]
    motor1.setPwm = setPwm1;
 800bc86:	4b14      	ldr	r3, [pc, #80]	@ (800bcd8 <motorInit+0x5c>)
 800bc88:	4a14      	ldr	r2, [pc, #80]	@ (800bcdc <motorInit+0x60>)
 800bc8a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    motor1.getShaftAngle = as5047GetRawAngle;
 800bc8e:	4b12      	ldr	r3, [pc, #72]	@ (800bcd8 <motorInit+0x5c>)
 800bc90:	4a13      	ldr	r2, [pc, #76]	@ (800bce0 <motorInit+0x64>)
 800bc92:	611a      	str	r2, [r3, #16]
    motor1.zeroElectricAngleOffSet = 0;
 800bc94:	4b10      	ldr	r3, [pc, #64]	@ (800bcd8 <motorInit+0x5c>)
 800bc96:	f04f 0200 	mov.w	r2, #0
 800bc9a:	605a      	str	r2, [r3, #4]
    getZeroElecAngle(&motor1);
 800bc9c:	480e      	ldr	r0, [pc, #56]	@ (800bcd8 <motorInit+0x5c>)
 800bc9e:	f000 f83d 	bl	800bd1c <getZeroElecAngle>

    getElecAngle(&motor1); // 观察电角度是否为0
 800bca2:	480d      	ldr	r0, [pc, #52]	@ (800bcd8 <motorInit+0x5c>)
 800bca4:	f000 f858 	bl	800bd58 <getElecAngle>
    FOC_log("[zeroAngleOffset,zeroAngle]:%f,%f\r\n", motor1.zeroElectricAngleOffSet, motor1.angle_el);
 800bca8:	4b0b      	ldr	r3, [pc, #44]	@ (800bcd8 <motorInit+0x5c>)
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7f4 fc73 	bl	8000598 <__aeabi_f2d>
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	460d      	mov	r5, r1
 800bcb6:	4b08      	ldr	r3, [pc, #32]	@ (800bcd8 <motorInit+0x5c>)
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7f4 fc6c 	bl	8000598 <__aeabi_f2d>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	ec43 2b11 	vmov	d1, r2, r3
 800bcc8:	ec45 4b10 	vmov	d0, r4, r5
 800bccc:	4805      	ldr	r0, [pc, #20]	@ (800bce4 <motorInit+0x68>)
 800bcce:	f000 f89f 	bl	800be10 <FOC_log>
}
 800bcd2:	bf00      	nop
 800bcd4:	bdb0      	pop	{r4, r5, r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	2000069c 	.word	0x2000069c
 800bcdc:	0800bce9 	.word	0x0800bce9
 800bce0:	0800bc3d 	.word	0x0800bc3d
 800bce4:	08011dc0 	.word	0x08011dc0

0800bce8 <setPwm1>:

static void setPwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	4603      	mov	r3, r0
 800bcf0:	80fb      	strh	r3, [r7, #6]
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	80bb      	strh	r3, [r7, #4]
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = a;
 800bcfa:	4a07      	ldr	r2, [pc, #28]	@ (800bd18 <setPwm1+0x30>)
 800bcfc:	88fb      	ldrh	r3, [r7, #6]
 800bcfe:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800bd00:	4a05      	ldr	r2, [pc, #20]	@ (800bd18 <setPwm1+0x30>)
 800bd02:	88bb      	ldrh	r3, [r7, #4]
 800bd04:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = c;
 800bd06:	4a04      	ldr	r2, [pc, #16]	@ (800bd18 <setPwm1+0x30>)
 800bd08:	887b      	ldrh	r3, [r7, #2]
 800bd0a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr
 800bd18:	40012c00 	.word	0x40012c00

0800bd1c <getZeroElecAngle>:

void getZeroElecAngle(BldcMotor *motor)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
    setPhaseVoltage(motor, 0.0f, 2.0f, 0.0f);
 800bd24:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 800bd54 <getZeroElecAngle+0x38>
 800bd28:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800bd2c:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800bd54 <getZeroElecAngle+0x38>
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f001 f935 	bl	800cfa0 <setPhaseVoltage>
    delay(1000);
 800bd36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bd3a:	f000 fc75 	bl	800c628 <delay>
    getElecAngle(motor);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 f80a 	bl	800bd58 <getElecAngle>
    motor->zeroElectricAngleOffSet = motor->angle_el; // 测量电角度零位偏差
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	68da      	ldr	r2, [r3, #12]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	605a      	str	r2, [r3, #4]
}
 800bd4c:	bf00      	nop
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	00000000 	.word	0x00000000

0800bd58 <getElecAngle>:

void getElecAngle(BldcMotor *motor)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	ed2d 8b02 	vpush	{d8}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
    motor->angle_el = _normalizeAngle(motor->pole_pairs * motor->getShaftAngle() - motor->zeroElectricAngleOffSet);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	7a1b      	ldrb	r3, [r3, #8]
 800bd68:	ee07 3a90 	vmov	s15, r3
 800bd6c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	4798      	blx	r3
 800bd76:	eef0 7a40 	vmov.f32	s15, s0
 800bd7a:	ee28 7a27 	vmul.f32	s14, s16, s15
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	edd3 7a01 	vldr	s15, [r3, #4]
 800bd84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd88:	eeb0 0a67 	vmov.f32	s0, s15
 800bd8c:	f000 fa88 	bl	800c2a0 <_normalizeAngle>
 800bd90:	eef0 7a40 	vmov.f32	s15, s0
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800bd9a:	bf00      	nop
 800bd9c:	3708      	adds	r7, #8
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	ecbd 8b02 	vpop	{d8}
 800bda4:	bd80      	pop	{r7, pc}
	...

0800bda8 <foc>:

void foc(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]

    static bool calibrateOffset;

    if (!calibrateOffset)
 800bdb4:	4b14      	ldr	r3, [pc, #80]	@ (800be08 <foc+0x60>)
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d109      	bne.n	800bdd0 <foc+0x28>
    {
        getCurrentOffsets(&motor1, adc_a, adc_b, 100);
 800bdbc:	2364      	movs	r3, #100	@ 0x64
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	68b9      	ldr	r1, [r7, #8]
 800bdc2:	4812      	ldr	r0, [pc, #72]	@ (800be0c <foc+0x64>)
 800bdc4:	f000 f868 	bl	800be98 <getCurrentOffsets>
        calibrateOffset = 1;
 800bdc8:	4b0f      	ldr	r3, [pc, #60]	@ (800be08 <foc+0x60>)
 800bdca:	2201      	movs	r2, #1
 800bdcc:	701a      	strb	r2, [r3, #0]
        getDQCurrents(motor);
        getDQVoltages(motor);
        getABVoltages(motor);
        setSVPWM(motor);
    }
}
 800bdce:	e016      	b.n	800bdfe <foc+0x56>
        getElecAngle(motor);
 800bdd0:	68f8      	ldr	r0, [r7, #12]
 800bdd2:	f7ff ffc1 	bl	800bd58 <getElecAngle>
        getPhaseCurrents(motor, adc_a, adc_b);
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	68b9      	ldr	r1, [r7, #8]
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 f8b0 	bl	800bf40 <getPhaseCurrents>
        getABCurrents(motor);
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f000 f929 	bl	800c038 <getABCurrents>
        getDQCurrents(motor);
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f000 f94c 	bl	800c084 <getDQCurrents>
        getDQVoltages(motor);
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f000 fe43 	bl	800ca78 <getDQVoltages>
        getABVoltages(motor);
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f000 feae 	bl	800cb54 <getABVoltages>
        setSVPWM(motor);
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f000 fee7 	bl	800cbcc <setSVPWM>
}
 800bdfe:	bf00      	nop
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	2000074c 	.word	0x2000074c
 800be0c:	2000069c 	.word	0x2000069c

0800be10 <FOC_log>:
  }
}

// DMA模式
void FOC_log(const char *format, ...)
{
 800be10:	b40f      	push	{r0, r1, r2, r3}
 800be12:	b580      	push	{r7, lr}
 800be14:	b0c2      	sub	sp, #264	@ 0x108
 800be16:	af00      	add	r7, sp, #0
  va_list args;           // 定义参数列表变量
  va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 800be18:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800be1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800be20:	1d3b      	adds	r3, r7, #4
 800be22:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800be26:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800be2a:	4618      	mov	r0, r3
 800be2c:	f002 fa94 	bl	800e358 <vsiprintf>
  va_end(args);                   // 结束可变参数的使用

  // 等待上次的数据发送完成，避免新的数据覆盖正在传输的数据，导致混乱
  while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
 800be30:	bf00      	nop
 800be32:	480d      	ldr	r0, [pc, #52]	@ (800be68 <FOC_log+0x58>)
 800be34:	f7fe ffe2 	bl	800adfc <HAL_UART_GetState>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b21      	cmp	r3, #33	@ 0x21
 800be3c:	d0f9      	beq.n	800be32 <FOC_log+0x22>
  {
    // Wait for DMA transfer to complete
  }
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
 800be3e:	1d3b      	adds	r3, r7, #4
 800be40:	4618      	mov	r0, r3
 800be42:	f7f4 fa3d 	bl	80002c0 <strlen>
 800be46:	4603      	mov	r3, r0
 800be48:	b29a      	uxth	r2, r3
 800be4a:	1d39      	adds	r1, r7, #4
 800be4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800be50:	4805      	ldr	r0, [pc, #20]	@ (800be68 <FOC_log+0x58>)
 800be52:	f7fe fc00 	bl	800a656 <HAL_UART_Transmit>
}
 800be56:	bf00      	nop
 800be58:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800be5c:	46bd      	mov	sp, r7
 800be5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be62:	b004      	add	sp, #16
 800be64:	4770      	bx	lr
 800be66:	bf00      	nop
 800be68:	200005a0 	.word	0x200005a0

0800be6c <printLog>:

void printLog()
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	af00      	add	r7, sp, #0
#if CALI_PID
  printf("bldcMotor.target=%.2f, velocity=%.2f, ShaftAngle=%.2f\n", bldcMotor.target, shaftVelocity, shaftAngle);
  // printf("bldcMotor.target=%.2f, RPM=%d\n", bldcMotor.target, getRPM());
#elif SHOW_WAVE == 0
  HAL_UART_Transmit(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer), 1000);
 800be70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800be74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800be78:	4905      	ldr	r1, [pc, #20]	@ (800be90 <printLog+0x24>)
 800be7a:	4806      	ldr	r0, [pc, #24]	@ (800be94 <printLog+0x28>)
 800be7c:	f7fe fbeb 	bl	800a656 <HAL_UART_Transmit>
  // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
  memset(txBuffer, '\0', sizeof(txBuffer));
 800be80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800be84:	2100      	movs	r1, #0
 800be86:	4802      	ldr	r0, [pc, #8]	@ (800be90 <printLog+0x24>)
 800be88:	f002 fa70 	bl	800e36c <memset>
#endif
}
 800be8c:	bf00      	nop
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	20000750 	.word	0x20000750
 800be94:	200005a0 	.word	0x200005a0

0800be98 <getCurrentOffsets>:

#include "current.h"
#include "foc_utils.h"
// Function finding zero offsets of the ADC
void getCurrentOffsets(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b, uint32_t rounds)
{
 800be98:	b480      	push	{r7}
 800be9a:	b087      	sub	sp, #28
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	607a      	str	r2, [r7, #4]
 800bea4:	603b      	str	r3, [r7, #0]
    // find adc offset = zero current voltage
    motor->offset_ia = 0;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f04f 0200 	mov.w	r2, #0
 800beac:	615a      	str	r2, [r3, #20]
    motor->offset_ib = 0;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f04f 0200 	mov.w	r2, #0
 800beb4:	619a      	str	r2, [r3, #24]
    // read the adc voltage  times ( arbitrary number )
    for (int i = 0; i < rounds; i++)
 800beb6:	2300      	movs	r3, #0
 800beb8:	617b      	str	r3, [r7, #20]
 800beba:	e01c      	b.n	800bef6 <getCurrentOffsets+0x5e>
    {
        motor->offset_ia += adc_a;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	ed93 7a05 	vldr	s14, [r3, #20]
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	ee07 3a90 	vmov	s15, r3
 800bec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800becc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	edc3 7a05 	vstr	s15, [r3, #20]
        motor->offset_ib += adc_b;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	ed93 7a06 	vldr	s14, [r3, #24]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	ee07 3a90 	vmov	s15, r3
 800bee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	edc3 7a06 	vstr	s15, [r3, #24]
    for (int i = 0; i < rounds; i++)
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	3301      	adds	r3, #1
 800bef4:	617b      	str	r3, [r7, #20]
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	683a      	ldr	r2, [r7, #0]
 800befa:	429a      	cmp	r2, r3
 800befc:	d8de      	bhi.n	800bebc <getCurrentOffsets+0x24>
    }
    // calculate the mean offsets
    motor->offset_ia = motor->offset_ia / rounds;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	edd3 6a05 	vldr	s13, [r3, #20]
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	ee07 3a90 	vmov	s15, r3
 800bf0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bf0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	edc3 7a05 	vstr	s15, [r3, #20]
    motor->offset_ib = motor->offset_ib / rounds;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	edd3 6a06 	vldr	s13, [r3, #24]
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	ee07 3a90 	vmov	s15, r3
 800bf24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bf28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800bf32:	bf00      	nop
 800bf34:	371c      	adds	r7, #28
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr
	...

0800bf40 <getPhaseCurrents>:
// read all three phase currents (if possible 2 or 3)
void getPhaseCurrents(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
    motor->Ia = (adc_a - motor->offset_ia) * ADC_VLOTS_RADIO * VLOTS_AMPS_RATIO; // amps
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	ee07 3a90 	vmov	s15, r3
 800bf52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	edd3 7a05 	vldr	s15, [r3, #20]
 800bf5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf60:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800c030 <getPhaseCurrents+0xf0>
 800bf64:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bf68:	ee17 0a90 	vmov	r0, s15
 800bf6c:	f7f4 fb14 	bl	8000598 <__aeabi_f2d>
 800bf70:	a32b      	add	r3, pc, #172	@ (adr r3, 800c020 <getPhaseCurrents+0xe0>)
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	f7f4 fc91 	bl	800089c <__aeabi_ddiv>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	4610      	mov	r0, r2
 800bf80:	4619      	mov	r1, r3
 800bf82:	a329      	add	r3, pc, #164	@ (adr r3, 800c028 <getPhaseCurrents+0xe8>)
 800bf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf88:	f7f4 fc88 	bl	800089c <__aeabi_ddiv>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	460b      	mov	r3, r1
 800bf90:	4610      	mov	r0, r2
 800bf92:	4619      	mov	r1, r3
 800bf94:	f04f 0200 	mov.w	r2, #0
 800bf98:	4b26      	ldr	r3, [pc, #152]	@ (800c034 <getPhaseCurrents+0xf4>)
 800bf9a:	f7f4 fc7f 	bl	800089c <__aeabi_ddiv>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	4610      	mov	r0, r2
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	f7f4 fe47 	bl	8000c38 <__aeabi_d2f>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	61da      	str	r2, [r3, #28]
    motor->Ib = (adc_b - motor->offset_ib) * ADC_VLOTS_RADIO * VLOTS_AMPS_RATIO; // amps
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	ee07 3a90 	vmov	s15, r3
 800bfb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	edd3 7a06 	vldr	s15, [r3, #24]
 800bfc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfc4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800c030 <getPhaseCurrents+0xf0>
 800bfc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bfcc:	ee17 0a90 	vmov	r0, s15
 800bfd0:	f7f4 fae2 	bl	8000598 <__aeabi_f2d>
 800bfd4:	a312      	add	r3, pc, #72	@ (adr r3, 800c020 <getPhaseCurrents+0xe0>)
 800bfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfda:	f7f4 fc5f 	bl	800089c <__aeabi_ddiv>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	4610      	mov	r0, r2
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	a310      	add	r3, pc, #64	@ (adr r3, 800c028 <getPhaseCurrents+0xe8>)
 800bfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfec:	f7f4 fc56 	bl	800089c <__aeabi_ddiv>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4610      	mov	r0, r2
 800bff6:	4619      	mov	r1, r3
 800bff8:	f04f 0200 	mov.w	r2, #0
 800bffc:	4b0d      	ldr	r3, [pc, #52]	@ (800c034 <getPhaseCurrents+0xf4>)
 800bffe:	f7f4 fc4d 	bl	800089c <__aeabi_ddiv>
 800c002:	4602      	mov	r2, r0
 800c004:	460b      	mov	r3, r1
 800c006:	4610      	mov	r0, r2
 800c008:	4619      	mov	r1, r3
 800c00a:	f7f4 fe15 	bl	8000c38 <__aeabi_d2f>
 800c00e:	4602      	mov	r2, r0
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	621a      	str	r2, [r3, #32]
}
 800c014:	bf00      	nop
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	f3af 8000 	nop.w
 800c020:	00000000 	.word	0x00000000
 800c024:	40affe00 	.word	0x40affe00
 800c028:	a0000000 	.word	0xa0000000
 800c02c:	3fb99999 	.word	0x3fb99999
 800c030:	40533333 	.word	0x40533333
 800c034:	40590000 	.word	0x40590000

0800c038 <getABCurrents>:
// Ibeta = 1/sqrt(3) * Ia + 1/sqrt(3) * 2Ib
/*============================================================================*/
//   calculating Alpha Beta currents from phase currents
//   - function calculating Clarke transform of the phase currents
void getABCurrents(BldcMotor *motor)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
    motor->Ialpha = motor->Ia;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	69da      	ldr	r2, [r3, #28]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	625a      	str	r2, [r3, #36]	@ 0x24
    motor->Ibeta = _1_SQRT3 * motor->Ia + _2_SQRT3 * motor->Ib;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	edd3 7a07 	vldr	s15, [r3, #28]
 800c04e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800c07c <getABCurrents+0x44>
 800c052:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	edd3 7a08 	vldr	s15, [r3, #32]
 800c05c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800c080 <getABCurrents+0x48>
 800c060:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c064:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 800c06e:	bf00      	nop
 800c070:	370c      	adds	r7, #12
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	3f13cd3a 	.word	0x3f13cd3a
 800c080:	3f93cd3a 	.word	0x3f93cd3a

0800c084 <getDQCurrents>:
/*============================================================================*/
// function used with the foc algorihtm
//   calculating D and Q currents from Alpha Beta currents and electrical angle
//   - function calculating Clarke transform of the phase currents
void getDQCurrents(BldcMotor *motor)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
    float ct;
    float st;
    _sincos(motor->angle_el, &st, &ct);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	edd3 7a03 	vldr	s15, [r3, #12]
 800c092:	f107 020c 	add.w	r2, r7, #12
 800c096:	f107 0308 	add.w	r3, r7, #8
 800c09a:	4611      	mov	r1, r2
 800c09c:	4618      	mov	r0, r3
 800c09e:	eeb0 0a67 	vmov.f32	s0, s15
 800c0a2:	f000 f8dd 	bl	800c260 <_sincos>
    motor->Id = motor->Ialpha * ct + motor->Ibeta * st;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800c0ac:	edd7 7a03 	vldr	s15, [r7, #12]
 800c0b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800c0ba:	edd7 7a02 	vldr	s15, [r7, #8]
 800c0be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    motor->Iq = motor->Ibeta * ct - motor->Ialpha * st;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800c0d2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c0d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800c0e0:	edd7 7a02 	vldr	s15, [r7, #8]
 800c0e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800c0f2:	bf00      	nop
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	0000      	movs	r0, r0
 800c0fc:	0000      	movs	r0, r0
	...

0800c100 <_sin>:

// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af00      	add	r7, sp, #0
 800c106:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f7f4 fa44 	bl	8000598 <__aeabi_f2d>
 800c110:	a339      	add	r3, pc, #228	@ (adr r3, 800c1f8 <_sin+0xf8>)
 800c112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c116:	f7f4 fa97 	bl	8000648 <__aeabi_dmul>
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	4610      	mov	r0, r2
 800c120:	4619      	mov	r1, r3
 800c122:	f7f4 fd69 	bl	8000bf8 <__aeabi_d2uiz>
 800c126:	4603      	mov	r3, r0
 800c128:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	0a1b      	lsrs	r3, r3, #8
 800c134:	b2db      	uxtb	r3, r3
 800c136:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2b3f      	cmp	r3, #63	@ 0x3f
 800c13c:	d80b      	bhi.n	800c156 <_sin+0x56>
  {
    t1 = sine_array[i];
 800c13e:	4a2c      	ldr	r2, [pc, #176]	@ (800c1f0 <_sin+0xf0>)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c146:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	3301      	adds	r3, #1
 800c14c:	4a28      	ldr	r2, [pc, #160]	@ (800c1f0 <_sin+0xf0>)
 800c14e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c152:	613b      	str	r3, [r7, #16]
 800c154:	e033      	b.n	800c1be <_sin+0xbe>
  }
  else if (i < 128)
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2b7f      	cmp	r3, #127	@ 0x7f
 800c15a:	d80e      	bhi.n	800c17a <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800c162:	4a23      	ldr	r2, [pc, #140]	@ (800c1f0 <_sin+0xf0>)
 800c164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c168:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800c170:	4a1f      	ldr	r2, [pc, #124]	@ (800c1f0 <_sin+0xf0>)
 800c172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c176:	613b      	str	r3, [r7, #16]
 800c178:	e021      	b.n	800c1be <_sin+0xbe>
  }
  else if (i < 192)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2bbf      	cmp	r3, #191	@ 0xbf
 800c17e:	d80e      	bhi.n	800c19e <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	3b80      	subs	r3, #128	@ 0x80
 800c184:	4a1a      	ldr	r2, [pc, #104]	@ (800c1f0 <_sin+0xf0>)
 800c186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c18a:	425b      	negs	r3, r3
 800c18c:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	3b7f      	subs	r3, #127	@ 0x7f
 800c192:	4a17      	ldr	r2, [pc, #92]	@ (800c1f0 <_sin+0xf0>)
 800c194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c198:	425b      	negs	r3, r3
 800c19a:	613b      	str	r3, [r7, #16]
 800c19c:	e00f      	b.n	800c1be <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800c1a4:	4a12      	ldr	r2, [pc, #72]	@ (800c1f0 <_sin+0xf0>)
 800c1a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1aa:	425b      	negs	r3, r3
 800c1ac:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800c1b4:	4a0e      	ldr	r2, [pc, #56]	@ (800c1f0 <_sin+0xf0>)
 800c1b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1ba:	425b      	negs	r3, r3
 800c1bc:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	1ad3      	subs	r3, r2, r3
 800c1c4:	68ba      	ldr	r2, [r7, #8]
 800c1c6:	fb02 f303 	mul.w	r3, r2, r3
 800c1ca:	121a      	asrs	r2, r3, #8
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	ee07 3a90 	vmov	s15, r3
 800c1d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1d8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800c1f4 <_sin+0xf4>
 800c1dc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800c1e0:	eeb0 0a67 	vmov.f32	s0, s15
 800c1e4:	3718      	adds	r7, #24
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	f3af 8000 	nop.w
 800c1f0:	2000000c 	.word	0x2000000c
 800c1f4:	38000000 	.word	0x38000000
 800c1f8:	6446f9b4 	.word	0x6446f9b4
 800c1fc:	40c45f30 	.word	0x40c45f30

0800c200 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800c20a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c20e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800c258 <_cos+0x58>
 800c212:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c216:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800c21a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c21e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800c25c <_cos+0x5c>
 800c222:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c22a:	dd06      	ble.n	800c23a <_cos+0x3a>
 800c22c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c230:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800c25c <_cos+0x5c>
 800c234:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c238:	e001      	b.n	800c23e <_cos+0x3e>
 800c23a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c23e:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800c242:	ed97 0a03 	vldr	s0, [r7, #12]
 800c246:	f7ff ff5b 	bl	800c100 <_sin>
 800c24a:	eef0 7a40 	vmov.f32	s15, s0
}
 800c24e:	eeb0 0a67 	vmov.f32	s0, s15
 800c252:	3710      	adds	r7, #16
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	3fc90fdb 	.word	0x3fc90fdb
 800c25c:	40c90fdb 	.word	0x40c90fdb

0800c260 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	ed87 0a03 	vstr	s0, [r7, #12]
 800c26a:	60b8      	str	r0, [r7, #8]
 800c26c:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800c26e:	ed97 0a03 	vldr	s0, [r7, #12]
 800c272:	f7ff ff45 	bl	800c100 <_sin>
 800c276:	eef0 7a40 	vmov.f32	s15, s0
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800c280:	ed97 0a03 	vldr	s0, [r7, #12]
 800c284:	f7ff ffbc 	bl	800c200 <_cos>
 800c288:	eef0 7a40 	vmov.f32	s15, s0
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	edc3 7a00 	vstr	s15, [r3]
}
 800c292:	bf00      	nop
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	0000      	movs	r0, r0
 800c29c:	0000      	movs	r0, r0
	...

0800c2a0 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f7f4 f974 	bl	8000598 <__aeabi_f2d>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800c300 <_normalizeAngle+0x60>
 800c2b8:	ec43 2b10 	vmov	d0, r2, r3
 800c2bc:	f005 fc2a 	bl	8011b14 <fmod>
 800c2c0:	ec53 2b10 	vmov	r2, r3, d0
 800c2c4:	4610      	mov	r0, r2
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	f7f4 fcb6 	bl	8000c38 <__aeabi_d2f>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800c2d0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2dc:	db02      	blt.n	800c2e4 <_normalizeAngle+0x44>
 800c2de:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2e2:	e005      	b.n	800c2f0 <_normalizeAngle+0x50>
 800c2e4:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2e8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800c308 <_normalizeAngle+0x68>
 800c2ec:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800c2f0:	eeb0 0a67 	vmov.f32	s0, s15
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	f3af 8000 	nop.w
 800c300:	60000000 	.word	0x60000000
 800c304:	401921fb 	.word	0x401921fb
 800c308:	40c90fdb 	.word	0x40c90fdb

0800c30c <getKeyState>:

/*
将物理按键转化为逻辑按键
 */
void getKeyState(KeyState *keyState)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b085      	sub	sp, #20
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
    uchar i;

    if (keyStruct[1].trigType == TRIG_SHORT)
 800c314:	4b1b      	ldr	r3, [pc, #108]	@ (800c384 <getKeyState+0x78>)
 800c316:	7d1b      	ldrb	r3, [r3, #20]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d103      	bne.n	800c324 <getKeyState+0x18>
        *keyState = USER1_SHORT;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2201      	movs	r2, #1
 800c320:	701a      	strb	r2, [r3, #0]
 800c322:	e014      	b.n	800c34e <getKeyState+0x42>
    else if (keyStruct[2].trigType == TRIG_SHORT)
 800c324:	4b17      	ldr	r3, [pc, #92]	@ (800c384 <getKeyState+0x78>)
 800c326:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d103      	bne.n	800c336 <getKeyState+0x2a>
        *keyState = USER2_SHORT;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2202      	movs	r2, #2
 800c332:	701a      	strb	r2, [r3, #0]
 800c334:	e00b      	b.n	800c34e <getKeyState+0x42>
    else if (keyStruct[3].trigType == TRIG_SHORT)
 800c336:	4b13      	ldr	r3, [pc, #76]	@ (800c384 <getKeyState+0x78>)
 800c338:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d103      	bne.n	800c348 <getKeyState+0x3c>
        *keyState = USER3_SHORT;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2203      	movs	r2, #3
 800c344:	701a      	strb	r2, [r3, #0]
 800c346:	e002      	b.n	800c34e <getKeyState+0x42>
    else
        *keyState = NONE_KEY;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < KEY_NUM; i++)
 800c34e:	2300      	movs	r3, #0
 800c350:	73fb      	strb	r3, [r7, #15]
 800c352:	e00c      	b.n	800c36e <getKeyState+0x62>
    {
        keyStruct[i].trigType = NO_TRIG;
 800c354:	7bfa      	ldrb	r2, [r7, #15]
 800c356:	490b      	ldr	r1, [pc, #44]	@ (800c384 <getKeyState+0x78>)
 800c358:	4613      	mov	r3, r2
 800c35a:	005b      	lsls	r3, r3, #1
 800c35c:	4413      	add	r3, r2
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	440b      	add	r3, r1
 800c362:	3308      	adds	r3, #8
 800c364:	2200      	movs	r2, #0
 800c366:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < KEY_NUM; i++)
 800c368:	7bfb      	ldrb	r3, [r7, #15]
 800c36a:	3301      	adds	r3, #1
 800c36c:	73fb      	strb	r3, [r7, #15]
 800c36e:	7bfb      	ldrb	r3, [r7, #15]
 800c370:	2b03      	cmp	r3, #3
 800c372:	d9ef      	bls.n	800c354 <getKeyState+0x48>
    }
}
 800c374:	bf00      	nop
 800c376:	bf00      	nop
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	20000850 	.word	0x20000850

0800c388 <LED_drive>:
#include "led.h"

bool led1On, led2On;

void LED_drive()
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	af00      	add	r7, sp, #0
    if (led1On)
 800c38c:	4b0f      	ldr	r3, [pc, #60]	@ (800c3cc <LED_drive+0x44>)
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d005      	beq.n	800c3a0 <LED_drive+0x18>
        LED1_ON;
 800c394:	2200      	movs	r2, #0
 800c396:	2140      	movs	r1, #64	@ 0x40
 800c398:	480d      	ldr	r0, [pc, #52]	@ (800c3d0 <LED_drive+0x48>)
 800c39a:	f7fa fc37 	bl	8006c0c <HAL_GPIO_WritePin>
 800c39e:	e004      	b.n	800c3aa <LED_drive+0x22>
    else
        LED1_OFF;
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	2140      	movs	r1, #64	@ 0x40
 800c3a4:	480a      	ldr	r0, [pc, #40]	@ (800c3d0 <LED_drive+0x48>)
 800c3a6:	f7fa fc31 	bl	8006c0c <HAL_GPIO_WritePin>

    if (led2On)
 800c3aa:	4b0a      	ldr	r3, [pc, #40]	@ (800c3d4 <LED_drive+0x4c>)
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d005      	beq.n	800c3be <LED_drive+0x36>
        LED2_ON;
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	2110      	movs	r1, #16
 800c3b6:	4806      	ldr	r0, [pc, #24]	@ (800c3d0 <LED_drive+0x48>)
 800c3b8:	f7fa fc28 	bl	8006c0c <HAL_GPIO_WritePin>
    else
        LED2_OFF;
}
 800c3bc:	e004      	b.n	800c3c8 <LED_drive+0x40>
        LED2_OFF;
 800c3be:	2201      	movs	r2, #1
 800c3c0:	2110      	movs	r1, #16
 800c3c2:	4803      	ldr	r0, [pc, #12]	@ (800c3d0 <LED_drive+0x48>)
 800c3c4:	f7fa fc22 	bl	8006c0c <HAL_GPIO_WritePin>
}
 800c3c8:	bf00      	nop
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	20000880 	.word	0x20000880
 800c3d0:	48000800 	.word	0x48000800
 800c3d4:	20000881 	.word	0x20000881

0800c3d8 <lpfOperator>:
#include "lowpass_filter.h"

float lpfOperator(LowPassFilter *lfp, float x)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	ed87 0a00 	vstr	s0, [r7]

    float alpha = lfp->Tf / (lfp->Tf + lfp->dt);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	edd3 6a00 	vldr	s13, [r3]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	ed93 7a00 	vldr	s14, [r3]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	edd3 7a01 	vldr	s15, [r3, #4]
 800c3f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c3fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3fe:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha * lfp->y_prev + (1.0f - alpha) * x;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	ed93 7a02 	vldr	s14, [r3, #8]
 800c408:	edd7 7a03 	vldr	s15, [r7, #12]
 800c40c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c410:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c414:	edd7 7a03 	vldr	s15, [r7, #12]
 800c418:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c41c:	edd7 7a00 	vldr	s15, [r7]
 800c420:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c424:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c428:	edc7 7a02 	vstr	s15, [r7, #8]
    lfp->y_prev = y;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	609a      	str	r2, [r3, #8]

    return y;
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	ee07 3a90 	vmov	s15, r3
}
 800c438:	eeb0 0a67 	vmov.f32	s0, s15
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr

0800c446 <pidOperator>:
#include "pid.h"
#include "foc_utils.h"

// PID controller function
float pidOperator(PidController *pidController, float error)
{
 800c446:	b480      	push	{r7}
 800c448:	b089      	sub	sp, #36	@ 0x24
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
 800c44e:	ed87 0a00 	vstr	s0, [r7]
    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = pidController->P * error;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	edd3 7a00 	vldr	s15, [r3]
 800c458:	ed97 7a00 	vldr	s14, [r7]
 800c45c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c460:	edc7 7a06 	vstr	s15, [r7, #24]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float integral = pidController->integral_prev + pidController->I * pidController->Ts * 0.5f * (error + pidController->error_prev);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	ed93 7a07 	vldr	s14, [r3, #28]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	edd3 6a01 	vldr	s13, [r3, #4]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	edd3 7a08 	vldr	s15, [r3, #32]
 800c476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c47a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800c47e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	ed93 6a05 	vldr	s12, [r3, #20]
 800c488:	edd7 7a00 	vldr	s15, [r7]
 800c48c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800c490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c494:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c498:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -(pidController->limit), pidController->limit);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	edd3 7a04 	vldr	s15, [r3, #16]
 800c4a2:	eef1 7a67 	vneg.f32	s15, s15
 800c4a6:	ed97 7a05 	vldr	s14, [r7, #20]
 800c4aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4b2:	d505      	bpl.n	800c4c0 <pidOperator+0x7a>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	edd3 7a04 	vldr	s15, [r3, #16]
 800c4ba:	eef1 7a67 	vneg.f32	s15, s15
 800c4be:	e00f      	b.n	800c4e0 <pidOperator+0x9a>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	edd3 7a04 	vldr	s15, [r3, #16]
 800c4c6:	ed97 7a05 	vldr	s14, [r7, #20]
 800c4ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4d2:	dd03      	ble.n	800c4dc <pidOperator+0x96>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	edd3 7a04 	vldr	s15, [r3, #16]
 800c4da:	e001      	b.n	800c4e0 <pidOperator+0x9a>
 800c4dc:	edd7 7a05 	vldr	s15, [r7, #20]
 800c4e0:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = pidController->D * (error - pidController->error_prev) / pidController->Ts;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	ed93 7a02 	vldr	s14, [r3, #8]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	edd3 7a05 	vldr	s15, [r3, #20]
 800c4f0:	edd7 6a00 	vldr	s13, [r7]
 800c4f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c4f8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	ed93 7a08 	vldr	s14, [r3, #32]
 800c502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c506:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 800c50a:	ed97 7a06 	vldr	s14, [r7, #24]
 800c50e:	edd7 7a05 	vldr	s15, [r7, #20]
 800c512:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c516:	ed97 7a04 	vldr	s14, [r7, #16]
 800c51a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c51e:	edc7 7a07 	vstr	s15, [r7, #28]
    // antiwindup - limit the output variable
    output = _constrain(output, -pidController->limit, pidController->limit);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	edd3 7a04 	vldr	s15, [r3, #16]
 800c528:	eef1 7a67 	vneg.f32	s15, s15
 800c52c:	ed97 7a07 	vldr	s14, [r7, #28]
 800c530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c538:	d505      	bpl.n	800c546 <pidOperator+0x100>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	edd3 7a04 	vldr	s15, [r3, #16]
 800c540:	eef1 7a67 	vneg.f32	s15, s15
 800c544:	e00f      	b.n	800c566 <pidOperator+0x120>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	edd3 7a04 	vldr	s15, [r3, #16]
 800c54c:	ed97 7a07 	vldr	s14, [r7, #28]
 800c550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c558:	dd03      	ble.n	800c562 <pidOperator+0x11c>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	edd3 7a04 	vldr	s15, [r3, #16]
 800c560:	e001      	b.n	800c566 <pidOperator+0x120>
 800c562:	edd7 7a07 	vldr	s15, [r7, #28]
 800c566:	edc7 7a07 	vstr	s15, [r7, #28]

    // if output ramp defined
    if (pidController->output_ramp > 0)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	edd3 7a03 	vldr	s15, [r3, #12]
 800c570:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c578:	dd42      	ble.n	800c600 <pidOperator+0x1ba>
    {
        // limit the acceleration by ramping the output
        float output_rate = (output - pidController->output_prev) / pidController->Ts;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	edd3 7a06 	vldr	s15, [r3, #24]
 800c580:	ed97 7a07 	vldr	s14, [r7, #28]
 800c584:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	ed93 7a08 	vldr	s14, [r3, #32]
 800c58e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c592:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > pidController->output_ramp)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	edd3 7a03 	vldr	s15, [r3, #12]
 800c59c:	ed97 7a03 	vldr	s14, [r7, #12]
 800c5a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a8:	dd0f      	ble.n	800c5ca <pidOperator+0x184>
            output = pidController->output_prev + pidController->output_ramp * pidController->Ts;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	ed93 7a06 	vldr	s14, [r3, #24]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	edd3 6a03 	vldr	s13, [r3, #12]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	edd3 7a08 	vldr	s15, [r3, #32]
 800c5bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5c4:	edc7 7a07 	vstr	s15, [r7, #28]
 800c5c8:	e01a      	b.n	800c600 <pidOperator+0x1ba>
        else if (output_rate < -pidController->output_ramp)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	edd3 7a03 	vldr	s15, [r3, #12]
 800c5d0:	eef1 7a67 	vneg.f32	s15, s15
 800c5d4:	ed97 7a03 	vldr	s14, [r7, #12]
 800c5d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5e0:	d50e      	bpl.n	800c600 <pidOperator+0x1ba>
            output = pidController->output_prev - pidController->output_ramp * pidController->Ts;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	ed93 7a06 	vldr	s14, [r3, #24]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	edd3 6a03 	vldr	s13, [r3, #12]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	edd3 7a08 	vldr	s15, [r3, #32]
 800c5f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5fc:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    // saving for the next pass
    pidController->integral_prev = integral;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	697a      	ldr	r2, [r7, #20]
 800c604:	61da      	str	r2, [r3, #28]
    pidController->output_prev = output;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	69fa      	ldr	r2, [r7, #28]
 800c60a:	619a      	str	r2, [r3, #24]
    pidController->error_prev = error;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	683a      	ldr	r2, [r7, #0]
 800c610:	615a      	str	r2, [r3, #20]
    return output;
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	ee07 3a90 	vmov	s15, r3
}
 800c618:	eeb0 0a67 	vmov.f32	s0, s15
 800c61c:	3724      	adds	r7, #36	@ 0x24
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
	...

0800c628 <delay>:
#include "time_utils.h"

__IO uint32_t m, tms, u, t0;

void delay(uint32_t _ms)
{
 800c628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c62c:	b082      	sub	sp, #8
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800c632:	f000 f83b 	bl	800c6ac <micros>
 800c636:	4602      	mov	r2, r0
 800c638:	460b      	mov	r3, r1
 800c63a:	4b11      	ldr	r3, [pc, #68]	@ (800c680 <delay+0x58>)
 800c63c:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800c63e:	e000      	b.n	800c642 <delay+0x1a>
        __NOP();
 800c640:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800c642:	f000 f833 	bl	800c6ac <micros>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	490d      	ldr	r1, [pc, #52]	@ (800c680 <delay+0x58>)
 800c64c:	6809      	ldr	r1, [r1, #0]
 800c64e:	2000      	movs	r0, #0
 800c650:	468a      	mov	sl, r1
 800c652:	4683      	mov	fp, r0
 800c654:	ebb2 040a 	subs.w	r4, r2, sl
 800c658:	eb63 050b 	sbc.w	r5, r3, fp
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c662:	fb02 f303 	mul.w	r3, r2, r3
 800c666:	2200      	movs	r2, #0
 800c668:	4698      	mov	r8, r3
 800c66a:	4691      	mov	r9, r2
 800c66c:	4544      	cmp	r4, r8
 800c66e:	eb75 0309 	sbcs.w	r3, r5, r9
 800c672:	d3e5      	bcc.n	800c640 <delay+0x18>
}
 800c674:	bf00      	nop
 800c676:	bf00      	nop
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c680:	20000890 	.word	0x20000890

0800c684 <LL_SYSTICK_IsActiveCounterFlag>:
    while (_us--)
        __NOP();
}

__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag()
{
 800c684:	b480      	push	{r7}
 800c686:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800c688:	4b07      	ldr	r3, [pc, #28]	@ (800c6a8 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c694:	bf0c      	ite	eq
 800c696:	2301      	moveq	r3, #1
 800c698:	2300      	movne	r3, #0
 800c69a:	b2db      	uxtb	r3, r3
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	e000e010 	.word	0xe000e010

0800c6ac <micros>:

uint64_t micros()
{
 800c6ac:	b5b0      	push	{r4, r5, r7, lr}
 800c6ae:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800c6b0:	f7ff ffe8 	bl	800c684 <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800c6b4:	f7f6 f878 	bl	80027a8 <HAL_GetTick>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	4a1c      	ldr	r2, [pc, #112]	@ (800c72c <micros+0x80>)
 800c6bc:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800c6be:	4b1c      	ldr	r3, [pc, #112]	@ (800c730 <micros+0x84>)
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	4a1b      	ldr	r2, [pc, #108]	@ (800c734 <micros+0x88>)
 800c6c6:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800c6c8:	4b1a      	ldr	r3, [pc, #104]	@ (800c734 <micros+0x88>)
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	4b18      	ldr	r3, [pc, #96]	@ (800c730 <micros+0x84>)
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	1ad3      	subs	r3, r2, r3
 800c6d2:	4a19      	ldr	r2, [pc, #100]	@ (800c738 <micros+0x8c>)
 800c6d4:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800c6d6:	f7ff ffd5 	bl	800c684 <LL_SYSTICK_IsActiveCounterFlag>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00b      	beq.n	800c6f8 <micros+0x4c>
    {
        m = HAL_GetTick();
 800c6e0:	f7f6 f862 	bl	80027a8 <HAL_GetTick>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	4a11      	ldr	r2, [pc, #68]	@ (800c72c <micros+0x80>)
 800c6e8:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800c6ea:	4b12      	ldr	r3, [pc, #72]	@ (800c734 <micros+0x88>)
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	4b10      	ldr	r3, [pc, #64]	@ (800c730 <micros+0x84>)
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	1ad3      	subs	r3, r2, r3
 800c6f4:	4a10      	ldr	r2, [pc, #64]	@ (800c738 <micros+0x8c>)
 800c6f6:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800c6f8:	4b0c      	ldr	r3, [pc, #48]	@ (800c72c <micros+0x80>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c700:	fb03 f202 	mul.w	r2, r3, r2
 800c704:	4b0c      	ldr	r3, [pc, #48]	@ (800c738 <micros+0x8c>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c70c:	fb03 f101 	mul.w	r1, r3, r1
 800c710:	4b08      	ldr	r3, [pc, #32]	@ (800c734 <micros+0x88>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	fbb1 f3f3 	udiv	r3, r1, r3
 800c718:	4413      	add	r3, r2
 800c71a:	2200      	movs	r2, #0
 800c71c:	461c      	mov	r4, r3
 800c71e:	4615      	mov	r5, r2
 800c720:	4622      	mov	r2, r4
 800c722:	462b      	mov	r3, r5
}
 800c724:	4610      	mov	r0, r2
 800c726:	4619      	mov	r1, r3
 800c728:	bdb0      	pop	{r4, r5, r7, pc}
 800c72a:	bf00      	nop
 800c72c:	20000884 	.word	0x20000884
 800c730:	e000e010 	.word	0xe000e010
 800c734:	20000888 	.word	0x20000888
 800c738:	2000088c 	.word	0x2000088c

0800c73c <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
static bool powerLost;
void userMain(void)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	af00      	add	r7, sp, #0
	// {
	// 	_30ms = 0;
	// 	sensoring();
	// }

	if (get100MsFlag())
 800c740:	f000 f972 	bl	800ca28 <get100MsFlag>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d001      	beq.n	800c74e <userMain+0x12>
	{
		appRunning();
 800c74a:	f7ff f9c1 	bl	800bad0 <appRunning>
	}

	if (get500MsFlag())
 800c74e:	f000 f97f 	bl	800ca50 <get500MsFlag>
 800c752:	4603      	mov	r3, r0
 800c754:	2b00      	cmp	r3, #0
 800c756:	d001      	beq.n	800c75c <userMain+0x20>
	{
		printLog();
 800c758:	f7ff fb88 	bl	800be6c <printLog>
	}
}
 800c75c:	bf00      	nop
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <HAL_GPIO_EXTI_Callback>:
void setPowerLost()
{
	powerLost = 1;
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
 800c766:	4603      	mov	r3, r0
 800c768:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	if (Button3_Pin == GPIO_Pin)
 800c76a:	88fb      	ldrh	r3, [r7, #6]
 800c76c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c770:	d13a      	bne.n	800c7e8 <HAL_GPIO_EXTI_Callback+0x88>
	{
		Motor_state = ~Motor_state;
 800c772:	4b1f      	ldr	r3, [pc, #124]	@ (800c7f0 <HAL_GPIO_EXTI_Callback+0x90>)
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	43db      	mvns	r3, r3
 800c778:	b2da      	uxtb	r2, r3
 800c77a:	4b1d      	ldr	r3, [pc, #116]	@ (800c7f0 <HAL_GPIO_EXTI_Callback+0x90>)
 800c77c:	701a      	strb	r2, [r3, #0]
		if (0 == Motor_state)
 800c77e:	4b1c      	ldr	r3, [pc, #112]	@ (800c7f0 <HAL_GPIO_EXTI_Callback+0x90>)
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d118      	bne.n	800c7b8 <HAL_GPIO_EXTI_Callback+0x58>
		{
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800c786:	2100      	movs	r1, #0
 800c788:	481a      	ldr	r0, [pc, #104]	@ (800c7f4 <HAL_GPIO_EXTI_Callback+0x94>)
 800c78a:	f7fc f991 	bl	8008ab0 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800c78e:	2104      	movs	r1, #4
 800c790:	4818      	ldr	r0, [pc, #96]	@ (800c7f4 <HAL_GPIO_EXTI_Callback+0x94>)
 800c792:	f7fc f98d 	bl	8008ab0 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800c796:	2108      	movs	r1, #8
 800c798:	4816      	ldr	r0, [pc, #88]	@ (800c7f4 <HAL_GPIO_EXTI_Callback+0x94>)
 800c79a:	f7fc f989 	bl	8008ab0 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800c79e:	2100      	movs	r1, #0
 800c7a0:	4814      	ldr	r0, [pc, #80]	@ (800c7f4 <HAL_GPIO_EXTI_Callback+0x94>)
 800c7a2:	f7fd fc59 	bl	800a058 <HAL_TIMEx_PWMN_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800c7a6:	2104      	movs	r1, #4
 800c7a8:	4812      	ldr	r0, [pc, #72]	@ (800c7f4 <HAL_GPIO_EXTI_Callback+0x94>)
 800c7aa:	f7fd fc55 	bl	800a058 <HAL_TIMEx_PWMN_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800c7ae:	2108      	movs	r1, #8
 800c7b0:	4810      	ldr	r0, [pc, #64]	@ (800c7f4 <HAL_GPIO_EXTI_Callback+0x94>)
 800c7b2:	f7fd fc51 	bl	800a058 <HAL_TIMEx_PWMN_Stop>
		}
	}
	/* NOTE: This function should not be modified, when the callback is needed,
			 the HAL_GPIO_EXTI_Callback could be implemented in the user file
	 */
}
 800c7b6:	e017      	b.n	800c7e8 <HAL_GPIO_EXTI_Callback+0x88>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	480e      	ldr	r0, [pc, #56]	@ (800c7f4 <HAL_GPIO_EXTI_Callback+0x94>)
 800c7bc:	f7fc f878 	bl	80088b0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800c7c0:	2104      	movs	r1, #4
 800c7c2:	480c      	ldr	r0, [pc, #48]	@ (800c7f4 <HAL_GPIO_EXTI_Callback+0x94>)
 800c7c4:	f7fc f874 	bl	80088b0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800c7c8:	2108      	movs	r1, #8
 800c7ca:	480a      	ldr	r0, [pc, #40]	@ (800c7f4 <HAL_GPIO_EXTI_Callback+0x94>)
 800c7cc:	f7fc f870 	bl	80088b0 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	4808      	ldr	r0, [pc, #32]	@ (800c7f4 <HAL_GPIO_EXTI_Callback+0x94>)
 800c7d4:	f7fd fb8c 	bl	8009ef0 <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800c7d8:	2104      	movs	r1, #4
 800c7da:	4806      	ldr	r0, [pc, #24]	@ (800c7f4 <HAL_GPIO_EXTI_Callback+0x94>)
 800c7dc:	f7fd fb88 	bl	8009ef0 <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800c7e0:	2108      	movs	r1, #8
 800c7e2:	4804      	ldr	r0, [pc, #16]	@ (800c7f4 <HAL_GPIO_EXTI_Callback+0x94>)
 800c7e4:	f7fd fb84 	bl	8009ef0 <HAL_TIMEx_PWMN_Start>
}
 800c7e8:	bf00      	nop
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	20000894 	.word	0x20000894
 800c7f4:	20000508 	.word	0x20000508

0800c7f8 <HAL_ADCEx_InjectedConvCpltCallback>:
	USART3->TDR = (uint8_t)ch;
	return ch;
}

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
	static uint8_t cnt;
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hadc);
	if (hadc == &hadc1)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4a1d      	ldr	r2, [pc, #116]	@ (800c878 <HAL_ADCEx_InjectedConvCpltCallback+0x80>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d12e      	bne.n	800c866 <HAL_ADCEx_InjectedConvCpltCallback+0x6e>
	{
		foc(&motor1, hadc1.Instance->JDR1, hadc2.Instance->JDR1);
 800c808:	4b1b      	ldr	r3, [pc, #108]	@ (800c878 <HAL_ADCEx_InjectedConvCpltCallback+0x80>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800c810:	4b1a      	ldr	r3, [pc, #104]	@ (800c87c <HAL_ADCEx_InjectedConvCpltCallback+0x84>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c818:	461a      	mov	r2, r3
 800c81a:	4819      	ldr	r0, [pc, #100]	@ (800c880 <HAL_ADCEx_InjectedConvCpltCallback+0x88>)
 800c81c:	f7ff fac4 	bl	800bda8 <foc>

		// 	Ia = (adc1_in1 - IA_Offset) * 0.02197f;
		// 	Ib = (adc1_in2 - IB_Offset) * 0.02197f;
		// 	Ic = (adc1_in3 - IC_Offset) * 0.02197f;
		static float elecAngle;
		elecAngle += 0.01;
 800c820:	4b18      	ldr	r3, [pc, #96]	@ (800c884 <HAL_ADCEx_InjectedConvCpltCallback+0x8c>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4618      	mov	r0, r3
 800c826:	f7f3 feb7 	bl	8000598 <__aeabi_f2d>
 800c82a:	a311      	add	r3, pc, #68	@ (adr r3, 800c870 <HAL_ADCEx_InjectedConvCpltCallback+0x78>)
 800c82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c830:	f7f3 fd54 	bl	80002dc <__adddf3>
 800c834:	4602      	mov	r2, r0
 800c836:	460b      	mov	r3, r1
 800c838:	4610      	mov	r0, r2
 800c83a:	4619      	mov	r1, r3
 800c83c:	f7f4 f9fc 	bl	8000c38 <__aeabi_d2f>
 800c840:	4603      	mov	r3, r0
 800c842:	4a10      	ldr	r2, [pc, #64]	@ (800c884 <HAL_ADCEx_InjectedConvCpltCallback+0x8c>)
 800c844:	6013      	str	r3, [r2, #0]
		if (elecAngle >= _2PI)
 800c846:	4b0f      	ldr	r3, [pc, #60]	@ (800c884 <HAL_ADCEx_InjectedConvCpltCallback+0x8c>)
 800c848:	edd3 7a00 	vldr	s15, [r3]
 800c84c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c888 <HAL_ADCEx_InjectedConvCpltCallback+0x90>
 800c850:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c858:	db03      	blt.n	800c862 <HAL_ADCEx_InjectedConvCpltCallback+0x6a>
			elecAngle = 0;
 800c85a:	4b0a      	ldr	r3, [pc, #40]	@ (800c884 <HAL_ADCEx_InjectedConvCpltCallback+0x8c>)
 800c85c:	f04f 0200 	mov.w	r2, #0
 800c860:	601a      	str	r2, [r3, #0]
		// setPhaseVoltage(&motor1, 2, 0, elecAngle);

		dealPer100us();
 800c862:	f000 f825 	bl	800c8b0 <dealPer100us>
	}

	/* NOTE : This function should not be modified. When the callback is needed,
			  function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
	*/
}
 800c866:	bf00      	nop
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	47ae147b 	.word	0x47ae147b
 800c874:	3f847ae1 	.word	0x3f847ae1
 800c878:	20000274 	.word	0x20000274
 800c87c:	200002e0 	.word	0x200002e0
 800c880:	2000069c 	.word	0x2000069c
 800c884:	200008c8 	.word	0x200008c8
 800c888:	40c90fdb 	.word	0x40c90fdb

0800c88c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
	// }

	/* NOTE : This function should not be modified, when the callback is needed,
			  the HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 800c894:	bf00      	nop
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <FDCAN_Config>:

void FDCAN_Config(void)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	af00      	add	r7, sp, #0
	// TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	// TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	// TxHeader.MessageMarker = 0x52;

	// HAL_FDCAN_Start(&hfdcan1);
}
 800c8a4:	bf00      	nop
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr
	...

0800c8b0 <dealPer100us>:
static uchar withoutZeroCnt, powerOnCnt;

static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag;

void dealPer100us()
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800c8b4:	4b08      	ldr	r3, [pc, #32]	@ (800c8d8 <dealPer100us+0x28>)
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	4b06      	ldr	r3, [pc, #24]	@ (800c8d8 <dealPer100us+0x28>)
 800c8be:	701a      	strb	r2, [r3, #0]
 800c8c0:	4b05      	ldr	r3, [pc, #20]	@ (800c8d8 <dealPer100us+0x28>)
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	2b09      	cmp	r3, #9
 800c8c6:	d904      	bls.n	800c8d2 <dealPer100us+0x22>
    {
        cnt = 0;
 800c8c8:	4b03      	ldr	r3, [pc, #12]	@ (800c8d8 <dealPer100us+0x28>)
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800c8ce:	f000 f805 	bl	800c8dc <dealPerMs>
    }

#if ZERO_POLL
    zeroPolling();
#endif
}
 800c8d2:	bf00      	nop
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	200008dc 	.word	0x200008dc

0800c8dc <dealPerMs>:

// 定时器中断调用
 void dealPerMs()
{
 800c8dc:	b480      	push	{r7}
 800c8de:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt;
    if (++_5msCnt >= 5)
 800c8e0:	4b40      	ldr	r3, [pc, #256]	@ (800c9e4 <dealPerMs+0x108>)
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	b2da      	uxtb	r2, r3
 800c8e8:	4b3e      	ldr	r3, [pc, #248]	@ (800c9e4 <dealPerMs+0x108>)
 800c8ea:	701a      	strb	r2, [r3, #0]
 800c8ec:	4b3d      	ldr	r3, [pc, #244]	@ (800c9e4 <dealPerMs+0x108>)
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	2b04      	cmp	r3, #4
 800c8f2:	d905      	bls.n	800c900 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800c8f4:	4b3b      	ldr	r3, [pc, #236]	@ (800c9e4 <dealPerMs+0x108>)
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800c8fa:	4b3b      	ldr	r3, [pc, #236]	@ (800c9e8 <dealPerMs+0x10c>)
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800c900:	4b3a      	ldr	r3, [pc, #232]	@ (800c9ec <dealPerMs+0x110>)
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	3301      	adds	r3, #1
 800c906:	b2da      	uxtb	r2, r3
 800c908:	4b38      	ldr	r3, [pc, #224]	@ (800c9ec <dealPerMs+0x110>)
 800c90a:	701a      	strb	r2, [r3, #0]
 800c90c:	4b37      	ldr	r3, [pc, #220]	@ (800c9ec <dealPerMs+0x110>)
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	2b09      	cmp	r3, #9
 800c912:	d905      	bls.n	800c920 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800c914:	4b35      	ldr	r3, [pc, #212]	@ (800c9ec <dealPerMs+0x110>)
 800c916:	2200      	movs	r2, #0
 800c918:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800c91a:	4b35      	ldr	r3, [pc, #212]	@ (800c9f0 <dealPerMs+0x114>)
 800c91c:	2201      	movs	r2, #1
 800c91e:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800c920:	4b34      	ldr	r3, [pc, #208]	@ (800c9f4 <dealPerMs+0x118>)
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	3301      	adds	r3, #1
 800c926:	b2da      	uxtb	r2, r3
 800c928:	4b32      	ldr	r3, [pc, #200]	@ (800c9f4 <dealPerMs+0x118>)
 800c92a:	701a      	strb	r2, [r3, #0]
 800c92c:	4b31      	ldr	r3, [pc, #196]	@ (800c9f4 <dealPerMs+0x118>)
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	2b13      	cmp	r3, #19
 800c932:	d905      	bls.n	800c940 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800c934:	4b2f      	ldr	r3, [pc, #188]	@ (800c9f4 <dealPerMs+0x118>)
 800c936:	2200      	movs	r2, #0
 800c938:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800c93a:	4b2f      	ldr	r3, [pc, #188]	@ (800c9f8 <dealPerMs+0x11c>)
 800c93c:	2201      	movs	r2, #1
 800c93e:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800c940:	4b2e      	ldr	r3, [pc, #184]	@ (800c9fc <dealPerMs+0x120>)
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	3301      	adds	r3, #1
 800c946:	b2da      	uxtb	r2, r3
 800c948:	4b2c      	ldr	r3, [pc, #176]	@ (800c9fc <dealPerMs+0x120>)
 800c94a:	701a      	strb	r2, [r3, #0]
 800c94c:	4b2b      	ldr	r3, [pc, #172]	@ (800c9fc <dealPerMs+0x120>)
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	2b1d      	cmp	r3, #29
 800c952:	d905      	bls.n	800c960 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800c954:	4b29      	ldr	r3, [pc, #164]	@ (800c9fc <dealPerMs+0x120>)
 800c956:	2200      	movs	r2, #0
 800c958:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800c95a:	4b29      	ldr	r3, [pc, #164]	@ (800ca00 <dealPerMs+0x124>)
 800c95c:	2201      	movs	r2, #1
 800c95e:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800c960:	4b28      	ldr	r3, [pc, #160]	@ (800ca04 <dealPerMs+0x128>)
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	3301      	adds	r3, #1
 800c966:	b2da      	uxtb	r2, r3
 800c968:	4b26      	ldr	r3, [pc, #152]	@ (800ca04 <dealPerMs+0x128>)
 800c96a:	701a      	strb	r2, [r3, #0]
 800c96c:	4b25      	ldr	r3, [pc, #148]	@ (800ca04 <dealPerMs+0x128>)
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	2b63      	cmp	r3, #99	@ 0x63
 800c972:	d905      	bls.n	800c980 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800c974:	4b23      	ldr	r3, [pc, #140]	@ (800ca04 <dealPerMs+0x128>)
 800c976:	2200      	movs	r2, #0
 800c978:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800c97a:	4b23      	ldr	r3, [pc, #140]	@ (800ca08 <dealPerMs+0x12c>)
 800c97c:	2201      	movs	r2, #1
 800c97e:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800c980:	4b22      	ldr	r3, [pc, #136]	@ (800ca0c <dealPerMs+0x130>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	3301      	adds	r3, #1
 800c986:	4a21      	ldr	r2, [pc, #132]	@ (800ca0c <dealPerMs+0x130>)
 800c988:	6013      	str	r3, [r2, #0]
 800c98a:	4b20      	ldr	r3, [pc, #128]	@ (800ca0c <dealPerMs+0x130>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800c992:	d305      	bcc.n	800c9a0 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800c994:	4b1d      	ldr	r3, [pc, #116]	@ (800ca0c <dealPerMs+0x130>)
 800c996:	2200      	movs	r2, #0
 800c998:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800c99a:	4b1d      	ldr	r3, [pc, #116]	@ (800ca10 <dealPerMs+0x134>)
 800c99c:	2201      	movs	r2, #1
 800c99e:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800c9a0:	4b1c      	ldr	r3, [pc, #112]	@ (800ca14 <dealPerMs+0x138>)
 800c9a2:	2232      	movs	r2, #50	@ 0x32
 800c9a4:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800c9a6:	4b1c      	ldr	r3, [pc, #112]	@ (800ca18 <dealPerMs+0x13c>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	4a1a      	ldr	r2, [pc, #104]	@ (800ca18 <dealPerMs+0x13c>)
 800c9ae:	6013      	str	r3, [r2, #0]
 800c9b0:	4b19      	ldr	r3, [pc, #100]	@ (800ca18 <dealPerMs+0x13c>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c9b8:	d305      	bcc.n	800c9c6 <dealPerMs+0xea>
    {
        _1msCnt = 0;
 800c9ba:	4b17      	ldr	r3, [pc, #92]	@ (800ca18 <dealPerMs+0x13c>)
 800c9bc:	2200      	movs	r2, #0
 800c9be:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800c9c0:	4b16      	ldr	r3, [pc, #88]	@ (800ca1c <dealPerMs+0x140>)
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800c9c6:	4b16      	ldr	r3, [pc, #88]	@ (800ca20 <dealPerMs+0x144>)
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	701a      	strb	r2, [r3, #0]
        memorize();
        // beepOnce();
    }
#else
    if (withoutZeroCnt < ZERO_ERR_TIME)
        withoutZeroCnt++;
 800c9cc:	4b15      	ldr	r3, [pc, #84]	@ (800ca24 <dealPerMs+0x148>)
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	b2da      	uxtb	r2, r3
 800c9d4:	4b13      	ldr	r3, [pc, #76]	@ (800ca24 <dealPerMs+0x148>)
 800c9d6:	701a      	strb	r2, [r3, #0]
    //             }
    //         }
    //         //	else
    //     }
    // #endif
}
 800c9d8:	bf00      	nop
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
 800c9e4:	200008dd 	.word	0x200008dd
 800c9e8:	200008d6 	.word	0x200008d6
 800c9ec:	200008de 	.word	0x200008de
 800c9f0:	200008d7 	.word	0x200008d7
 800c9f4:	200008df 	.word	0x200008df
 800c9f8:	200008d8 	.word	0x200008d8
 800c9fc:	200008e0 	.word	0x200008e0
 800ca00:	200008d9 	.word	0x200008d9
 800ca04:	200008e1 	.word	0x200008e1
 800ca08:	200008da 	.word	0x200008da
 800ca0c:	200008e4 	.word	0x200008e4
 800ca10:	200008db 	.word	0x200008db
 800ca14:	200008d4 	.word	0x200008d4
 800ca18:	200008d0 	.word	0x200008d0
 800ca1c:	200008cc 	.word	0x200008cc
 800ca20:	200008cd 	.word	0x200008cd
 800ca24:	200008d5 	.word	0x200008d5

0800ca28 <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800ca28:	b480      	push	{r7}
 800ca2a:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800ca2c:	4b07      	ldr	r3, [pc, #28]	@ (800ca4c <get100MsFlag+0x24>)
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d004      	beq.n	800ca3e <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800ca34:	4b05      	ldr	r3, [pc, #20]	@ (800ca4c <get100MsFlag+0x24>)
 800ca36:	2200      	movs	r2, #0
 800ca38:	701a      	strb	r2, [r3, #0]
        return 1;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e000      	b.n	800ca40 <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800ca3e:	2300      	movs	r3, #0
    }
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop
 800ca4c:	200008da 	.word	0x200008da

0800ca50 <get500MsFlag>:

bool get500MsFlag()
{
 800ca50:	b480      	push	{r7}
 800ca52:	af00      	add	r7, sp, #0
    if (_500msFlag)
 800ca54:	4b07      	ldr	r3, [pc, #28]	@ (800ca74 <get500MsFlag+0x24>)
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d004      	beq.n	800ca66 <get500MsFlag+0x16>
    {
        _500msFlag = 0;
 800ca5c:	4b05      	ldr	r3, [pc, #20]	@ (800ca74 <get500MsFlag+0x24>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	701a      	strb	r2, [r3, #0]
        return 1;
 800ca62:	2301      	movs	r3, #1
 800ca64:	e000      	b.n	800ca68 <get500MsFlag+0x18>
    }
    else
    {
        return 0;
 800ca66:	2300      	movs	r3, #0
    }
 800ca68:	4618      	mov	r0, r3
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	200008db 	.word	0x200008db

0800ca78 <getDQVoltages>:
#include "foc_utils.h"
#include "comm.h"

const char sectorRemap[] = {0, 2, 6, 1, 4, 3, 5};
void getDQVoltages(BldcMotor *motor)
{
 800ca78:	b590      	push	{r4, r7, lr}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]

    motor->Id = lpfOperator(&motor->lpf, motor->Id);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7f3 fd84 	bl	8000598 <__aeabi_f2d>
 800ca90:	4602      	mov	r2, r0
 800ca92:	460b      	mov	r3, r1
 800ca94:	ec43 2b10 	vmov	d0, r2, r3
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f7ff fc9d 	bl	800c3d8 <lpfOperator>
 800ca9e:	ee07 0a90 	vmov	s15, r0
 800caa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    motor->Iq = lpfOperator(&motor->lpf, motor->Iq);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7f3 fd6e 	bl	8000598 <__aeabi_f2d>
 800cabc:	4602      	mov	r2, r0
 800cabe:	460b      	mov	r3, r1
 800cac0:	ec43 2b10 	vmov	d0, r2, r3
 800cac4:	4620      	mov	r0, r4
 800cac6:	f7ff fc87 	bl	800c3d8 <lpfOperator>
 800caca:	ee07 0a90 	vmov	s15, r0
 800cace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    motor->Ud = pidOperator(&motor->pid_id, motor->IdGoal - motor->Id);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800caea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800caee:	ee17 0a90 	vmov	r0, s15
 800caf2:	f7f3 fd51 	bl	8000598 <__aeabi_f2d>
 800caf6:	4602      	mov	r2, r0
 800caf8:	460b      	mov	r3, r1
 800cafa:	ec43 2b10 	vmov	d0, r2, r3
 800cafe:	4620      	mov	r0, r4
 800cb00:	f7ff fca1 	bl	800c446 <pidOperator>
 800cb04:	ee07 0a90 	vmov	s15, r0
 800cb08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
    motor->Uq = pidOperator(&motor->pid_iq, motor->IqGoal - motor->Iq);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f103 0460 	add.w	r4, r3, #96	@ 0x60
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800cb24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb28:	ee17 0a90 	vmov	r0, s15
 800cb2c:	f7f3 fd34 	bl	8000598 <__aeabi_f2d>
 800cb30:	4602      	mov	r2, r0
 800cb32:	460b      	mov	r3, r1
 800cb34:	ec43 2b10 	vmov	d0, r2, r3
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f7ff fc84 	bl	800c446 <pidOperator>
 800cb3e:	ee07 0a90 	vmov	s15, r0
 800cb42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
}
 800cb4c:	bf00      	nop
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd90      	pop	{r4, r7, pc}

0800cb54 <getABVoltages>:
// Park逆变换
// Ualpha = Ud * Cosθr + Uq * Sinθr
// Ubeta = Uq * Cosθr + Ud * Sinθr
/*============================================================================*/
void getABVoltages(BldcMotor *motor)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
    float ct;
    float st;
    _sincos(motor->angle_el, &st, &ct);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	edd3 7a03 	vldr	s15, [r3, #12]
 800cb62:	f107 020c 	add.w	r2, r7, #12
 800cb66:	f107 0308 	add.w	r3, r7, #8
 800cb6a:	4611      	mov	r1, r2
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	eeb0 0a67 	vmov.f32	s0, s15
 800cb72:	f7ff fb75 	bl	800c260 <_sincos>
    motor->Ualpha = motor->Ud * ct - motor->Uq * st;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	ed93 7a24 	vldr	s14, [r3, #144]	@ 0x90
 800cb7c:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	edd3 6a25 	vldr	s13, [r3, #148]	@ 0x94
 800cb8a:	edd7 7a02 	vldr	s15, [r7, #8]
 800cb8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cb92:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98
    motor->Ubeta = motor->Uq * ct + motor->Ud * st;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	ed93 7a25 	vldr	s14, [r3, #148]	@ 0x94
 800cba2:	edd7 7a03 	vldr	s15, [r7, #12]
 800cba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	edd3 6a24 	vldr	s13, [r3, #144]	@ 0x90
 800cbb0:	edd7 7a02 	vldr	s15, [r7, #8]
 800cbb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cbb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
}
 800cbc2:	bf00      	nop
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
	...

0800cbcc <setSVPWM>:

void setSVPWM(BldcMotor *motor)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b08c      	sub	sp, #48	@ 0x30
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
    uint32_t d1, d2, d3;
    float tFirst = 0, tSecond = 0;
 800cbd4:	f04f 0300 	mov.w	r3, #0
 800cbd8:	623b      	str	r3, [r7, #32]
 800cbda:	f04f 0300 	mov.w	r3, #0
 800cbde:	61fb      	str	r3, [r7, #28]
    float K = _SQRT3 * HALP_PWM_PERIOD / U_DC;
 800cbe0:	4bc5      	ldr	r3, [pc, #788]	@ (800cef8 <setSVPWM+0x32c>)
 800cbe2:	61bb      	str	r3, [r7, #24]
    float X = K * motor->Ubeta;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 800cbea:	ed97 7a06 	vldr	s14, [r7, #24]
 800cbee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbf2:	edc7 7a05 	vstr	s15, [r7, #20]
    float Y = K * (_SQRT3 * motor->Ualpha / 2.0f - motor->Ubeta / 2.0f);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 800cbfc:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 800cefc <setSVPWM+0x330>
 800cc00:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc04:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800cc08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	edd3 6a27 	vldr	s13, [r3, #156]	@ 0x9c
 800cc12:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800cc16:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800cc1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc1e:	ed97 7a06 	vldr	s14, [r7, #24]
 800cc22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc26:	edc7 7a04 	vstr	s15, [r7, #16]
    float Z = K * (-_SQRT3 * motor->Ualpha / 2.0f - motor->Ubeta / 2.0f);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 800cc30:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 800cf00 <setSVPWM+0x334>
 800cc34:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc38:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800cc3c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	edd3 6a27 	vldr	s13, [r3, #156]	@ 0x9c
 800cc46:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800cc4a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800cc4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc52:	ed97 7a06 	vldr	s14, [r7, #24]
 800cc56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc5a:	edc7 7a03 	vstr	s15, [r7, #12]

    uint8_t sector = sectorRemap[(X > 0.0f) + ((Y > 0.0f) << 1) + ((Z > 0.0f) << 2)]; // sector = A + 2B + 4C
 800cc5e:	edd7 7a05 	vldr	s15, [r7, #20]
 800cc62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc6a:	bfcc      	ite	gt
 800cc6c:	2301      	movgt	r3, #1
 800cc6e:	2300      	movle	r3, #0
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	461a      	mov	r2, r3
 800cc74:	edd7 7a04 	vldr	s15, [r7, #16]
 800cc78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cc7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc80:	dd01      	ble.n	800cc86 <setSVPWM+0xba>
 800cc82:	2302      	movs	r3, #2
 800cc84:	e000      	b.n	800cc88 <setSVPWM+0xbc>
 800cc86:	2300      	movs	r3, #0
 800cc88:	4413      	add	r3, r2
 800cc8a:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cc92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc96:	dd01      	ble.n	800cc9c <setSVPWM+0xd0>
 800cc98:	2204      	movs	r2, #4
 800cc9a:	e000      	b.n	800cc9e <setSVPWM+0xd2>
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	4413      	add	r3, r2
 800cca0:	4a98      	ldr	r2, [pc, #608]	@ (800cf04 <setSVPWM+0x338>)
 800cca2:	5cd3      	ldrb	r3, [r2, r3]
 800cca4:	72fb      	strb	r3, [r7, #11]

    switch (sector)
 800cca6:	7afb      	ldrb	r3, [r7, #11]
 800cca8:	3b01      	subs	r3, #1
 800ccaa:	2b05      	cmp	r3, #5
 800ccac:	f200 816a 	bhi.w	800cf84 <setSVPWM+0x3b8>
 800ccb0:	a201      	add	r2, pc, #4	@ (adr r2, 800ccb8 <setSVPWM+0xec>)
 800ccb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb6:	bf00      	nop
 800ccb8:	0800ccd1 	.word	0x0800ccd1
 800ccbc:	0800cd39 	.word	0x0800cd39
 800ccc0:	0800cdb1 	.word	0x0800cdb1
 800ccc4:	0800ce19 	.word	0x0800ce19
 800ccc8:	0800ce91 	.word	0x0800ce91
 800cccc:	0800cf0d 	.word	0x0800cf0d
    {
    case 1:
        tFirst = Y;
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	623b      	str	r3, [r7, #32]
        tSecond = X;
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	61fb      	str	r3, [r7, #28]
        d1 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800ccd8:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 800cf08 <setSVPWM+0x33c>
 800ccdc:	edd7 7a08 	vldr	s15, [r7, #32]
 800cce0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cce4:	edd7 7a07 	vldr	s15, [r7, #28]
 800cce8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ccec:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ccf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ccf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccf8:	ee17 3a90 	vmov	r3, s15
 800ccfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d2 = d1 + tFirst;
 800ccfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd00:	ee07 3a90 	vmov	s15, r3
 800cd04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cd08:	edd7 7a08 	vldr	s15, [r7, #32]
 800cd0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd14:	ee17 3a90 	vmov	r3, s15
 800cd18:	62bb      	str	r3, [r7, #40]	@ 0x28
        d3 = d2 + tSecond;
 800cd1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd1c:	ee07 3a90 	vmov	s15, r3
 800cd20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cd24:	edd7 7a07 	vldr	s15, [r7, #28]
 800cd28:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd30:	ee17 3a90 	vmov	r3, s15
 800cd34:	627b      	str	r3, [r7, #36]	@ 0x24

        break;
 800cd36:	e125      	b.n	800cf84 <setSVPWM+0x3b8>
    case 2:
        tFirst = -Y;
 800cd38:	edd7 7a04 	vldr	s15, [r7, #16]
 800cd3c:	eef1 7a67 	vneg.f32	s15, s15
 800cd40:	edc7 7a08 	vstr	s15, [r7, #32]
        tSecond = -Z;
 800cd44:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd48:	eef1 7a67 	vneg.f32	s15, s15
 800cd4c:	edc7 7a07 	vstr	s15, [r7, #28]
        d2 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800cd50:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 800cf08 <setSVPWM+0x33c>
 800cd54:	edd7 7a08 	vldr	s15, [r7, #32]
 800cd58:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cd5c:	edd7 7a07 	vldr	s15, [r7, #28]
 800cd60:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cd64:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800cd68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cd6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd70:	ee17 3a90 	vmov	r3, s15
 800cd74:	62bb      	str	r3, [r7, #40]	@ 0x28
        d1 = d2 + tFirst;
 800cd76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd78:	ee07 3a90 	vmov	s15, r3
 800cd7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cd80:	edd7 7a08 	vldr	s15, [r7, #32]
 800cd84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd8c:	ee17 3a90 	vmov	r3, s15
 800cd90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d3 = d1 + tSecond;
 800cd92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd94:	ee07 3a90 	vmov	s15, r3
 800cd98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cd9c:	edd7 7a07 	vldr	s15, [r7, #28]
 800cda0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cda4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cda8:	ee17 3a90 	vmov	r3, s15
 800cdac:	627b      	str	r3, [r7, #36]	@ 0x24

        break;
 800cdae:	e0e9      	b.n	800cf84 <setSVPWM+0x3b8>
    case 3:
        tFirst = X;
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	623b      	str	r3, [r7, #32]
        tSecond = Z;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	61fb      	str	r3, [r7, #28]
        d2 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800cdb8:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800cf08 <setSVPWM+0x33c>
 800cdbc:	edd7 7a08 	vldr	s15, [r7, #32]
 800cdc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cdc4:	edd7 7a07 	vldr	s15, [r7, #28]
 800cdc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cdcc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800cdd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cdd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdd8:	ee17 3a90 	vmov	r3, s15
 800cddc:	62bb      	str	r3, [r7, #40]	@ 0x28
        d3 = d2 + tFirst;
 800cdde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde0:	ee07 3a90 	vmov	s15, r3
 800cde4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cde8:	edd7 7a08 	vldr	s15, [r7, #32]
 800cdec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cdf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdf4:	ee17 3a90 	vmov	r3, s15
 800cdf8:	627b      	str	r3, [r7, #36]	@ 0x24
        d1 = d3 + tSecond;
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdfc:	ee07 3a90 	vmov	s15, r3
 800ce00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ce04:	edd7 7a07 	vldr	s15, [r7, #28]
 800ce08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce10:	ee17 3a90 	vmov	r3, s15
 800ce14:	62fb      	str	r3, [r7, #44]	@ 0x2c

        break;
 800ce16:	e0b5      	b.n	800cf84 <setSVPWM+0x3b8>
    case 4:
        tFirst = -X;
 800ce18:	edd7 7a05 	vldr	s15, [r7, #20]
 800ce1c:	eef1 7a67 	vneg.f32	s15, s15
 800ce20:	edc7 7a08 	vstr	s15, [r7, #32]
        tSecond = -Y;
 800ce24:	edd7 7a04 	vldr	s15, [r7, #16]
 800ce28:	eef1 7a67 	vneg.f32	s15, s15
 800ce2c:	edc7 7a07 	vstr	s15, [r7, #28]
        d3 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800ce30:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800cf08 <setSVPWM+0x33c>
 800ce34:	edd7 7a08 	vldr	s15, [r7, #32]
 800ce38:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ce3c:	edd7 7a07 	vldr	s15, [r7, #28]
 800ce40:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ce44:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ce48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ce4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce50:	ee17 3a90 	vmov	r3, s15
 800ce54:	627b      	str	r3, [r7, #36]	@ 0x24
        d2 = d3 + tFirst;
 800ce56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce58:	ee07 3a90 	vmov	s15, r3
 800ce5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ce60:	edd7 7a08 	vldr	s15, [r7, #32]
 800ce64:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce6c:	ee17 3a90 	vmov	r3, s15
 800ce70:	62bb      	str	r3, [r7, #40]	@ 0x28
        d1 = d2 + tSecond;
 800ce72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce74:	ee07 3a90 	vmov	s15, r3
 800ce78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ce7c:	edd7 7a07 	vldr	s15, [r7, #28]
 800ce80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce88:	ee17 3a90 	vmov	r3, s15
 800ce8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        break;
 800ce8e:	e079      	b.n	800cf84 <setSVPWM+0x3b8>

    case 5:
        tFirst = Z;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	623b      	str	r3, [r7, #32]
        tSecond = Y;
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	61fb      	str	r3, [r7, #28]
        d3 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800ce98:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800cf08 <setSVPWM+0x33c>
 800ce9c:	edd7 7a08 	vldr	s15, [r7, #32]
 800cea0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cea4:	edd7 7a07 	vldr	s15, [r7, #28]
 800cea8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ceac:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ceb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ceb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceb8:	ee17 3a90 	vmov	r3, s15
 800cebc:	627b      	str	r3, [r7, #36]	@ 0x24
        d1 = d3 + tFirst;
 800cebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec0:	ee07 3a90 	vmov	s15, r3
 800cec4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cec8:	edd7 7a08 	vldr	s15, [r7, #32]
 800cecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ced0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ced4:	ee17 3a90 	vmov	r3, s15
 800ced8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d2 = d1 + tSecond;
 800ceda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cedc:	ee07 3a90 	vmov	s15, r3
 800cee0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cee4:	edd7 7a07 	vldr	s15, [r7, #28]
 800cee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ceec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cef0:	ee17 3a90 	vmov	r3, s15
 800cef4:	62bb      	str	r3, [r7, #40]	@ 0x28

        break;
 800cef6:	e045      	b.n	800cf84 <setSVPWM+0x3b8>
 800cef8:	4490566b 	.word	0x4490566b
 800cefc:	3fddb3d7 	.word	0x3fddb3d7
 800cf00:	bfddb3d7 	.word	0xbfddb3d7
 800cf04:	08011e34 	.word	0x08011e34
 800cf08:	45fa0000 	.word	0x45fa0000

    case 6:
        tFirst = -Z;
 800cf0c:	edd7 7a03 	vldr	s15, [r7, #12]
 800cf10:	eef1 7a67 	vneg.f32	s15, s15
 800cf14:	edc7 7a08 	vstr	s15, [r7, #32]
        tSecond = -X;
 800cf18:	edd7 7a05 	vldr	s15, [r7, #20]
 800cf1c:	eef1 7a67 	vneg.f32	s15, s15
 800cf20:	edc7 7a07 	vstr	s15, [r7, #28]
        d1 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800cf24:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 800cf08 <setSVPWM+0x33c>
 800cf28:	edd7 7a08 	vldr	s15, [r7, #32]
 800cf2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cf30:	edd7 7a07 	vldr	s15, [r7, #28]
 800cf34:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cf38:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800cf3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cf40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf44:	ee17 3a90 	vmov	r3, s15
 800cf48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d3 = d1 + tFirst;
 800cf4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf4c:	ee07 3a90 	vmov	s15, r3
 800cf50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cf54:	edd7 7a08 	vldr	s15, [r7, #32]
 800cf58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf60:	ee17 3a90 	vmov	r3, s15
 800cf64:	627b      	str	r3, [r7, #36]	@ 0x24
        d2 = d3 + tSecond;
 800cf66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf68:	ee07 3a90 	vmov	s15, r3
 800cf6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cf70:	edd7 7a07 	vldr	s15, [r7, #28]
 800cf74:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf7c:	ee17 3a90 	vmov	r3, s15
 800cf80:	62bb      	str	r3, [r7, #40]	@ 0x28

        break;
 800cf82:	bf00      	nop
    motor->d1 = d1;
    motor->d2 = d2;
    motor->d3 = d3;
#endif

    motor->setPwm(d1, d2, d3);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cf8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf8c:	b290      	uxth	r0, r2
 800cf8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf90:	b291      	uxth	r1, r2
 800cf92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf94:	b292      	uxth	r2, r2
 800cf96:	4798      	blx	r3
}
 800cf98:	bf00      	nop
 800cf9a:	3730      	adds	r7, #48	@ 0x30
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <setPhaseVoltage>:

// Park逆变换*SVPWM
void setPhaseVoltage(BldcMotor *motor, float Uq, float Ud, float angle_el)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b092      	sub	sp, #72	@ 0x48
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	ed87 0a02 	vstr	s0, [r7, #8]
 800cfac:	edc7 0a01 	vstr	s1, [r7, #4]
 800cfb0:	ed87 1a00 	vstr	s2, [r7]

    Uq = _constrain(Uq, -UqMAX, UqMAX);
 800cfb4:	edd7 7a02 	vldr	s15, [r7, #8]
 800cfb8:	ed9f 7acb 	vldr	s14, [pc, #812]	@ 800d2e8 <setPhaseVoltage+0x348>
 800cfbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cfc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfc4:	d501      	bpl.n	800cfca <setPhaseVoltage+0x2a>
 800cfc6:	4bc9      	ldr	r3, [pc, #804]	@ (800d2ec <setPhaseVoltage+0x34c>)
 800cfc8:	e00b      	b.n	800cfe2 <setPhaseVoltage+0x42>
 800cfca:	edd7 7a02 	vldr	s15, [r7, #8]
 800cfce:	ed9f 7ac8 	vldr	s14, [pc, #800]	@ 800d2f0 <setPhaseVoltage+0x350>
 800cfd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cfd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfda:	dd01      	ble.n	800cfe0 <setPhaseVoltage+0x40>
 800cfdc:	4bc5      	ldr	r3, [pc, #788]	@ (800d2f4 <setPhaseVoltage+0x354>)
 800cfde:	e000      	b.n	800cfe2 <setPhaseVoltage+0x42>
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	60bb      	str	r3, [r7, #8]

    float ct;
    float st;
    _sincos(angle_el, &st, &ct);
 800cfe4:	f107 0214 	add.w	r2, r7, #20
 800cfe8:	f107 0310 	add.w	r3, r7, #16
 800cfec:	4611      	mov	r1, r2
 800cfee:	4618      	mov	r0, r3
 800cff0:	ed97 0a00 	vldr	s0, [r7]
 800cff4:	f7ff f934 	bl	800c260 <_sincos>
    // Park逆变换
    float Ualpha = Ud * ct - Uq * st;
 800cff8:	ed97 7a05 	vldr	s14, [r7, #20]
 800cffc:	edd7 7a01 	vldr	s15, [r7, #4]
 800d000:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d004:	edd7 6a04 	vldr	s13, [r7, #16]
 800d008:	edd7 7a02 	vldr	s15, [r7, #8]
 800d00c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d010:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d014:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float Ubeta = Uq * ct + Ud * st;
 800d018:	ed97 7a05 	vldr	s14, [r7, #20]
 800d01c:	edd7 7a02 	vldr	s15, [r7, #8]
 800d020:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d024:	edd7 6a04 	vldr	s13, [r7, #16]
 800d028:	edd7 7a01 	vldr	s15, [r7, #4]
 800d02c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d030:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d034:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    uint32_t d1, d2, d3;
    float tFirst = 0, tSecond = 0;
 800d038:	f04f 0300 	mov.w	r3, #0
 800d03c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d03e:	f04f 0300 	mov.w	r3, #0
 800d042:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float K = _SQRT3 * HALP_PWM_PERIOD / U_DC;
 800d044:	4bac      	ldr	r3, [pc, #688]	@ (800d2f8 <setPhaseVoltage+0x358>)
 800d046:	62bb      	str	r3, [r7, #40]	@ 0x28
    float X = K * Ubeta;
 800d048:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d04c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d050:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d054:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float Y = K * (_SQRT3 * Ualpha / 2.0f - Ubeta / 2.0f);
 800d058:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d05c:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 800d2fc <setPhaseVoltage+0x35c>
 800d060:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d064:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d068:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d06c:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800d070:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800d074:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d07c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d080:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d084:	edc7 7a08 	vstr	s15, [r7, #32]
    float Z = K * (-_SQRT3 * Ualpha / 2.0f - Ubeta / 2.0f);
 800d088:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d08c:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 800d300 <setPhaseVoltage+0x360>
 800d090:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d094:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d098:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d09c:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800d0a0:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800d0a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d0a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0ac:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d0b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0b4:	edc7 7a07 	vstr	s15, [r7, #28]

    uint8_t sector = sectorRemap[(X > 0.0f) + ((Y > 0.0f) << 1) + ((Z > 0.0f) << 2)]; // sector = A + 2B + 4C
 800d0b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d0bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c4:	bfcc      	ite	gt
 800d0c6:	2301      	movgt	r3, #1
 800d0c8:	2300      	movle	r3, #0
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	edd7 7a08 	vldr	s15, [r7, #32]
 800d0d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0da:	dd01      	ble.n	800d0e0 <setPhaseVoltage+0x140>
 800d0dc:	2302      	movs	r3, #2
 800d0de:	e000      	b.n	800d0e2 <setPhaseVoltage+0x142>
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	4413      	add	r3, r2
 800d0e4:	edd7 7a07 	vldr	s15, [r7, #28]
 800d0e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0f0:	dd01      	ble.n	800d0f6 <setPhaseVoltage+0x156>
 800d0f2:	2204      	movs	r2, #4
 800d0f4:	e000      	b.n	800d0f8 <setPhaseVoltage+0x158>
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	4413      	add	r3, r2
 800d0fa:	4a82      	ldr	r2, [pc, #520]	@ (800d304 <setPhaseVoltage+0x364>)
 800d0fc:	5cd3      	ldrb	r3, [r2, r3]
 800d0fe:	76fb      	strb	r3, [r7, #27]

    switch (sector)
 800d100:	7efb      	ldrb	r3, [r7, #27]
 800d102:	3b01      	subs	r3, #1
 800d104:	2b05      	cmp	r3, #5
 800d106:	f200 8171 	bhi.w	800d3ec <setPhaseVoltage+0x44c>
 800d10a:	a201      	add	r2, pc, #4	@ (adr r2, 800d110 <setPhaseVoltage+0x170>)
 800d10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d110:	0800d129 	.word	0x0800d129
 800d114:	0800d191 	.word	0x0800d191
 800d118:	0800d209 	.word	0x0800d209
 800d11c:	0800d271 	.word	0x0800d271
 800d120:	0800d30d 	.word	0x0800d30d
 800d124:	0800d375 	.word	0x0800d375
    {
    case 1:
        tFirst = Y;
 800d128:	6a3b      	ldr	r3, [r7, #32]
 800d12a:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = X;
 800d12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d12e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d1 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800d130:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800d308 <setPhaseVoltage+0x368>
 800d134:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d138:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d13c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d140:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d144:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d14c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d150:	ee17 3a90 	vmov	r3, s15
 800d154:	647b      	str	r3, [r7, #68]	@ 0x44
        d2 = d1 + tFirst;
 800d156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d158:	ee07 3a90 	vmov	s15, r3
 800d15c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d160:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d164:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d16c:	ee17 3a90 	vmov	r3, s15
 800d170:	643b      	str	r3, [r7, #64]	@ 0x40
        d3 = d2 + tSecond;
 800d172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d174:	ee07 3a90 	vmov	s15, r3
 800d178:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d17c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d180:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d188:	ee17 3a90 	vmov	r3, s15
 800d18c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        break;
 800d18e:	e12d      	b.n	800d3ec <setPhaseVoltage+0x44c>
    case 2:
        tFirst = -Y;
 800d190:	edd7 7a08 	vldr	s15, [r7, #32]
 800d194:	eef1 7a67 	vneg.f32	s15, s15
 800d198:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -Z;
 800d19c:	edd7 7a07 	vldr	s15, [r7, #28]
 800d1a0:	eef1 7a67 	vneg.f32	s15, s15
 800d1a4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d2 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800d1a8:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 800d308 <setPhaseVoltage+0x368>
 800d1ac:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d1b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d1b4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d1b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d1bc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d1c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d1c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1c8:	ee17 3a90 	vmov	r3, s15
 800d1cc:	643b      	str	r3, [r7, #64]	@ 0x40
        d1 = d2 + tFirst;
 800d1ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1d0:	ee07 3a90 	vmov	s15, r3
 800d1d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d1d8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d1dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d1e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1e4:	ee17 3a90 	vmov	r3, s15
 800d1e8:	647b      	str	r3, [r7, #68]	@ 0x44
        d3 = d1 + tSecond;
 800d1ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1ec:	ee07 3a90 	vmov	s15, r3
 800d1f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d1f4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d1f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d1fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d200:	ee17 3a90 	vmov	r3, s15
 800d204:	63fb      	str	r3, [r7, #60]	@ 0x3c

        break;
 800d206:	e0f1      	b.n	800d3ec <setPhaseVoltage+0x44c>
    case 3:
        tFirst = X;
 800d208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d20a:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = Z;
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d2 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800d210:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800d308 <setPhaseVoltage+0x368>
 800d214:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d218:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d21c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d220:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d224:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d228:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d22c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d230:	ee17 3a90 	vmov	r3, s15
 800d234:	643b      	str	r3, [r7, #64]	@ 0x40
        d3 = d2 + tFirst;
 800d236:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d238:	ee07 3a90 	vmov	s15, r3
 800d23c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d240:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d244:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d24c:	ee17 3a90 	vmov	r3, s15
 800d250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d1 = d3 + tSecond;
 800d252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d254:	ee07 3a90 	vmov	s15, r3
 800d258:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d25c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d260:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d268:	ee17 3a90 	vmov	r3, s15
 800d26c:	647b      	str	r3, [r7, #68]	@ 0x44

        break;
 800d26e:	e0bd      	b.n	800d3ec <setPhaseVoltage+0x44c>
    case 4:
        tFirst = -X;
 800d270:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d274:	eef1 7a67 	vneg.f32	s15, s15
 800d278:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -Y;
 800d27c:	edd7 7a08 	vldr	s15, [r7, #32]
 800d280:	eef1 7a67 	vneg.f32	s15, s15
 800d284:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d3 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800d288:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800d308 <setPhaseVoltage+0x368>
 800d28c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d290:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d294:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d298:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d29c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d2a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d2a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2a8:	ee17 3a90 	vmov	r3, s15
 800d2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d2 = d3 + tFirst;
 800d2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2b0:	ee07 3a90 	vmov	s15, r3
 800d2b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d2b8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d2bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2c4:	ee17 3a90 	vmov	r3, s15
 800d2c8:	643b      	str	r3, [r7, #64]	@ 0x40
        d1 = d2 + tSecond;
 800d2ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2cc:	ee07 3a90 	vmov	s15, r3
 800d2d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d2d4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d2d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2e0:	ee17 3a90 	vmov	r3, s15
 800d2e4:	647b      	str	r3, [r7, #68]	@ 0x44

        break;
 800d2e6:	e081      	b.n	800d3ec <setPhaseVoltage+0x44c>
 800d2e8:	c0ddb3d7 	.word	0xc0ddb3d7
 800d2ec:	c0ddb3d7 	.word	0xc0ddb3d7
 800d2f0:	40ddb3d7 	.word	0x40ddb3d7
 800d2f4:	40ddb3d7 	.word	0x40ddb3d7
 800d2f8:	4490566b 	.word	0x4490566b
 800d2fc:	3fddb3d7 	.word	0x3fddb3d7
 800d300:	bfddb3d7 	.word	0xbfddb3d7
 800d304:	08011e34 	.word	0x08011e34
 800d308:	45fa0000 	.word	0x45fa0000

    case 5:
        tFirst = Z;
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = Y;
 800d310:	6a3b      	ldr	r3, [r7, #32]
 800d312:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d3 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800d314:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 800d308 <setPhaseVoltage+0x368>
 800d318:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d31c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d320:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d324:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d328:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d32c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d334:	ee17 3a90 	vmov	r3, s15
 800d338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d1 = d3 + tFirst;
 800d33a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d33c:	ee07 3a90 	vmov	s15, r3
 800d340:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d344:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d34c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d350:	ee17 3a90 	vmov	r3, s15
 800d354:	647b      	str	r3, [r7, #68]	@ 0x44
        d2 = d1 + tSecond;
 800d356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d358:	ee07 3a90 	vmov	s15, r3
 800d35c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d360:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d364:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d36c:	ee17 3a90 	vmov	r3, s15
 800d370:	643b      	str	r3, [r7, #64]	@ 0x40

        break;
 800d372:	e03b      	b.n	800d3ec <setPhaseVoltage+0x44c>

    case 6:
        tFirst = -Z;
 800d374:	edd7 7a07 	vldr	s15, [r7, #28]
 800d378:	eef1 7a67 	vneg.f32	s15, s15
 800d37c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -X;
 800d380:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d384:	eef1 7a67 	vneg.f32	s15, s15
 800d388:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d1 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800d38c:	ed1f 7a22 	vldr	s14, [pc, #-136]	@ 800d308 <setPhaseVoltage+0x368>
 800d390:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d394:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d398:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d39c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d3a0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d3a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d3a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3ac:	ee17 3a90 	vmov	r3, s15
 800d3b0:	647b      	str	r3, [r7, #68]	@ 0x44
        d3 = d1 + tFirst;
 800d3b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3b4:	ee07 3a90 	vmov	s15, r3
 800d3b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d3bc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d3c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3c8:	ee17 3a90 	vmov	r3, s15
 800d3cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d2 = d3 + tSecond;
 800d3ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3d0:	ee07 3a90 	vmov	s15, r3
 800d3d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d3d8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d3dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3e4:	ee17 3a90 	vmov	r3, s15
 800d3e8:	643b      	str	r3, [r7, #64]	@ 0x40

        break;
 800d3ea:	bf00      	nop
    motor->d1 = d1;
    motor->d2 = d2;
    motor->d3 = d3;
#endif

    motor->setPwm(d1, d2, d3);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d3f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3f4:	b290      	uxth	r0, r2
 800d3f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d3f8:	b291      	uxth	r1, r2
 800d3fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d3fc:	b292      	uxth	r2, r2
 800d3fe:	4798      	blx	r3
}
 800d400:	bf00      	nop
 800d402:	3748      	adds	r7, #72	@ 0x48
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <__cvt>:
 800d408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d40c:	ec57 6b10 	vmov	r6, r7, d0
 800d410:	2f00      	cmp	r7, #0
 800d412:	460c      	mov	r4, r1
 800d414:	4619      	mov	r1, r3
 800d416:	463b      	mov	r3, r7
 800d418:	bfbb      	ittet	lt
 800d41a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d41e:	461f      	movlt	r7, r3
 800d420:	2300      	movge	r3, #0
 800d422:	232d      	movlt	r3, #45	@ 0x2d
 800d424:	700b      	strb	r3, [r1, #0]
 800d426:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d428:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d42c:	4691      	mov	r9, r2
 800d42e:	f023 0820 	bic.w	r8, r3, #32
 800d432:	bfbc      	itt	lt
 800d434:	4632      	movlt	r2, r6
 800d436:	4616      	movlt	r6, r2
 800d438:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d43c:	d005      	beq.n	800d44a <__cvt+0x42>
 800d43e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d442:	d100      	bne.n	800d446 <__cvt+0x3e>
 800d444:	3401      	adds	r4, #1
 800d446:	2102      	movs	r1, #2
 800d448:	e000      	b.n	800d44c <__cvt+0x44>
 800d44a:	2103      	movs	r1, #3
 800d44c:	ab03      	add	r3, sp, #12
 800d44e:	9301      	str	r3, [sp, #4]
 800d450:	ab02      	add	r3, sp, #8
 800d452:	9300      	str	r3, [sp, #0]
 800d454:	ec47 6b10 	vmov	d0, r6, r7
 800d458:	4653      	mov	r3, sl
 800d45a:	4622      	mov	r2, r4
 800d45c:	f001 f894 	bl	800e588 <_dtoa_r>
 800d460:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d464:	4605      	mov	r5, r0
 800d466:	d119      	bne.n	800d49c <__cvt+0x94>
 800d468:	f019 0f01 	tst.w	r9, #1
 800d46c:	d00e      	beq.n	800d48c <__cvt+0x84>
 800d46e:	eb00 0904 	add.w	r9, r0, r4
 800d472:	2200      	movs	r2, #0
 800d474:	2300      	movs	r3, #0
 800d476:	4630      	mov	r0, r6
 800d478:	4639      	mov	r1, r7
 800d47a:	f7f3 fb4d 	bl	8000b18 <__aeabi_dcmpeq>
 800d47e:	b108      	cbz	r0, 800d484 <__cvt+0x7c>
 800d480:	f8cd 900c 	str.w	r9, [sp, #12]
 800d484:	2230      	movs	r2, #48	@ 0x30
 800d486:	9b03      	ldr	r3, [sp, #12]
 800d488:	454b      	cmp	r3, r9
 800d48a:	d31e      	bcc.n	800d4ca <__cvt+0xc2>
 800d48c:	9b03      	ldr	r3, [sp, #12]
 800d48e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d490:	1b5b      	subs	r3, r3, r5
 800d492:	4628      	mov	r0, r5
 800d494:	6013      	str	r3, [r2, #0]
 800d496:	b004      	add	sp, #16
 800d498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d49c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d4a0:	eb00 0904 	add.w	r9, r0, r4
 800d4a4:	d1e5      	bne.n	800d472 <__cvt+0x6a>
 800d4a6:	7803      	ldrb	r3, [r0, #0]
 800d4a8:	2b30      	cmp	r3, #48	@ 0x30
 800d4aa:	d10a      	bne.n	800d4c2 <__cvt+0xba>
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	4639      	mov	r1, r7
 800d4b4:	f7f3 fb30 	bl	8000b18 <__aeabi_dcmpeq>
 800d4b8:	b918      	cbnz	r0, 800d4c2 <__cvt+0xba>
 800d4ba:	f1c4 0401 	rsb	r4, r4, #1
 800d4be:	f8ca 4000 	str.w	r4, [sl]
 800d4c2:	f8da 3000 	ldr.w	r3, [sl]
 800d4c6:	4499      	add	r9, r3
 800d4c8:	e7d3      	b.n	800d472 <__cvt+0x6a>
 800d4ca:	1c59      	adds	r1, r3, #1
 800d4cc:	9103      	str	r1, [sp, #12]
 800d4ce:	701a      	strb	r2, [r3, #0]
 800d4d0:	e7d9      	b.n	800d486 <__cvt+0x7e>

0800d4d2 <__exponent>:
 800d4d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4d4:	2900      	cmp	r1, #0
 800d4d6:	bfba      	itte	lt
 800d4d8:	4249      	neglt	r1, r1
 800d4da:	232d      	movlt	r3, #45	@ 0x2d
 800d4dc:	232b      	movge	r3, #43	@ 0x2b
 800d4de:	2909      	cmp	r1, #9
 800d4e0:	7002      	strb	r2, [r0, #0]
 800d4e2:	7043      	strb	r3, [r0, #1]
 800d4e4:	dd29      	ble.n	800d53a <__exponent+0x68>
 800d4e6:	f10d 0307 	add.w	r3, sp, #7
 800d4ea:	461d      	mov	r5, r3
 800d4ec:	270a      	movs	r7, #10
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	fbb1 f6f7 	udiv	r6, r1, r7
 800d4f4:	fb07 1416 	mls	r4, r7, r6, r1
 800d4f8:	3430      	adds	r4, #48	@ 0x30
 800d4fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d4fe:	460c      	mov	r4, r1
 800d500:	2c63      	cmp	r4, #99	@ 0x63
 800d502:	f103 33ff 	add.w	r3, r3, #4294967295
 800d506:	4631      	mov	r1, r6
 800d508:	dcf1      	bgt.n	800d4ee <__exponent+0x1c>
 800d50a:	3130      	adds	r1, #48	@ 0x30
 800d50c:	1e94      	subs	r4, r2, #2
 800d50e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d512:	1c41      	adds	r1, r0, #1
 800d514:	4623      	mov	r3, r4
 800d516:	42ab      	cmp	r3, r5
 800d518:	d30a      	bcc.n	800d530 <__exponent+0x5e>
 800d51a:	f10d 0309 	add.w	r3, sp, #9
 800d51e:	1a9b      	subs	r3, r3, r2
 800d520:	42ac      	cmp	r4, r5
 800d522:	bf88      	it	hi
 800d524:	2300      	movhi	r3, #0
 800d526:	3302      	adds	r3, #2
 800d528:	4403      	add	r3, r0
 800d52a:	1a18      	subs	r0, r3, r0
 800d52c:	b003      	add	sp, #12
 800d52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d530:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d534:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d538:	e7ed      	b.n	800d516 <__exponent+0x44>
 800d53a:	2330      	movs	r3, #48	@ 0x30
 800d53c:	3130      	adds	r1, #48	@ 0x30
 800d53e:	7083      	strb	r3, [r0, #2]
 800d540:	70c1      	strb	r1, [r0, #3]
 800d542:	1d03      	adds	r3, r0, #4
 800d544:	e7f1      	b.n	800d52a <__exponent+0x58>
	...

0800d548 <_printf_float>:
 800d548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54c:	b08d      	sub	sp, #52	@ 0x34
 800d54e:	460c      	mov	r4, r1
 800d550:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d554:	4616      	mov	r6, r2
 800d556:	461f      	mov	r7, r3
 800d558:	4605      	mov	r5, r0
 800d55a:	f000 ff0f 	bl	800e37c <_localeconv_r>
 800d55e:	6803      	ldr	r3, [r0, #0]
 800d560:	9304      	str	r3, [sp, #16]
 800d562:	4618      	mov	r0, r3
 800d564:	f7f2 feac 	bl	80002c0 <strlen>
 800d568:	2300      	movs	r3, #0
 800d56a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d56c:	f8d8 3000 	ldr.w	r3, [r8]
 800d570:	9005      	str	r0, [sp, #20]
 800d572:	3307      	adds	r3, #7
 800d574:	f023 0307 	bic.w	r3, r3, #7
 800d578:	f103 0208 	add.w	r2, r3, #8
 800d57c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d580:	f8d4 b000 	ldr.w	fp, [r4]
 800d584:	f8c8 2000 	str.w	r2, [r8]
 800d588:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d58c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d590:	9307      	str	r3, [sp, #28]
 800d592:	f8cd 8018 	str.w	r8, [sp, #24]
 800d596:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d59a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d59e:	4b9c      	ldr	r3, [pc, #624]	@ (800d810 <_printf_float+0x2c8>)
 800d5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5a4:	f7f3 faea 	bl	8000b7c <__aeabi_dcmpun>
 800d5a8:	bb70      	cbnz	r0, 800d608 <_printf_float+0xc0>
 800d5aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5ae:	4b98      	ldr	r3, [pc, #608]	@ (800d810 <_printf_float+0x2c8>)
 800d5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b4:	f7f3 fac4 	bl	8000b40 <__aeabi_dcmple>
 800d5b8:	bb30      	cbnz	r0, 800d608 <_printf_float+0xc0>
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	2300      	movs	r3, #0
 800d5be:	4640      	mov	r0, r8
 800d5c0:	4649      	mov	r1, r9
 800d5c2:	f7f3 fab3 	bl	8000b2c <__aeabi_dcmplt>
 800d5c6:	b110      	cbz	r0, 800d5ce <_printf_float+0x86>
 800d5c8:	232d      	movs	r3, #45	@ 0x2d
 800d5ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5ce:	4a91      	ldr	r2, [pc, #580]	@ (800d814 <_printf_float+0x2cc>)
 800d5d0:	4b91      	ldr	r3, [pc, #580]	@ (800d818 <_printf_float+0x2d0>)
 800d5d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d5d6:	bf94      	ite	ls
 800d5d8:	4690      	movls	r8, r2
 800d5da:	4698      	movhi	r8, r3
 800d5dc:	2303      	movs	r3, #3
 800d5de:	6123      	str	r3, [r4, #16]
 800d5e0:	f02b 0304 	bic.w	r3, fp, #4
 800d5e4:	6023      	str	r3, [r4, #0]
 800d5e6:	f04f 0900 	mov.w	r9, #0
 800d5ea:	9700      	str	r7, [sp, #0]
 800d5ec:	4633      	mov	r3, r6
 800d5ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d5f0:	4621      	mov	r1, r4
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	f000 f9d2 	bl	800d99c <_printf_common>
 800d5f8:	3001      	adds	r0, #1
 800d5fa:	f040 808d 	bne.w	800d718 <_printf_float+0x1d0>
 800d5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d602:	b00d      	add	sp, #52	@ 0x34
 800d604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d608:	4642      	mov	r2, r8
 800d60a:	464b      	mov	r3, r9
 800d60c:	4640      	mov	r0, r8
 800d60e:	4649      	mov	r1, r9
 800d610:	f7f3 fab4 	bl	8000b7c <__aeabi_dcmpun>
 800d614:	b140      	cbz	r0, 800d628 <_printf_float+0xe0>
 800d616:	464b      	mov	r3, r9
 800d618:	2b00      	cmp	r3, #0
 800d61a:	bfbc      	itt	lt
 800d61c:	232d      	movlt	r3, #45	@ 0x2d
 800d61e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d622:	4a7e      	ldr	r2, [pc, #504]	@ (800d81c <_printf_float+0x2d4>)
 800d624:	4b7e      	ldr	r3, [pc, #504]	@ (800d820 <_printf_float+0x2d8>)
 800d626:	e7d4      	b.n	800d5d2 <_printf_float+0x8a>
 800d628:	6863      	ldr	r3, [r4, #4]
 800d62a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d62e:	9206      	str	r2, [sp, #24]
 800d630:	1c5a      	adds	r2, r3, #1
 800d632:	d13b      	bne.n	800d6ac <_printf_float+0x164>
 800d634:	2306      	movs	r3, #6
 800d636:	6063      	str	r3, [r4, #4]
 800d638:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d63c:	2300      	movs	r3, #0
 800d63e:	6022      	str	r2, [r4, #0]
 800d640:	9303      	str	r3, [sp, #12]
 800d642:	ab0a      	add	r3, sp, #40	@ 0x28
 800d644:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d648:	ab09      	add	r3, sp, #36	@ 0x24
 800d64a:	9300      	str	r3, [sp, #0]
 800d64c:	6861      	ldr	r1, [r4, #4]
 800d64e:	ec49 8b10 	vmov	d0, r8, r9
 800d652:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d656:	4628      	mov	r0, r5
 800d658:	f7ff fed6 	bl	800d408 <__cvt>
 800d65c:	9b06      	ldr	r3, [sp, #24]
 800d65e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d660:	2b47      	cmp	r3, #71	@ 0x47
 800d662:	4680      	mov	r8, r0
 800d664:	d129      	bne.n	800d6ba <_printf_float+0x172>
 800d666:	1cc8      	adds	r0, r1, #3
 800d668:	db02      	blt.n	800d670 <_printf_float+0x128>
 800d66a:	6863      	ldr	r3, [r4, #4]
 800d66c:	4299      	cmp	r1, r3
 800d66e:	dd41      	ble.n	800d6f4 <_printf_float+0x1ac>
 800d670:	f1aa 0a02 	sub.w	sl, sl, #2
 800d674:	fa5f fa8a 	uxtb.w	sl, sl
 800d678:	3901      	subs	r1, #1
 800d67a:	4652      	mov	r2, sl
 800d67c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d680:	9109      	str	r1, [sp, #36]	@ 0x24
 800d682:	f7ff ff26 	bl	800d4d2 <__exponent>
 800d686:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d688:	1813      	adds	r3, r2, r0
 800d68a:	2a01      	cmp	r2, #1
 800d68c:	4681      	mov	r9, r0
 800d68e:	6123      	str	r3, [r4, #16]
 800d690:	dc02      	bgt.n	800d698 <_printf_float+0x150>
 800d692:	6822      	ldr	r2, [r4, #0]
 800d694:	07d2      	lsls	r2, r2, #31
 800d696:	d501      	bpl.n	800d69c <_printf_float+0x154>
 800d698:	3301      	adds	r3, #1
 800d69a:	6123      	str	r3, [r4, #16]
 800d69c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d0a2      	beq.n	800d5ea <_printf_float+0xa2>
 800d6a4:	232d      	movs	r3, #45	@ 0x2d
 800d6a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6aa:	e79e      	b.n	800d5ea <_printf_float+0xa2>
 800d6ac:	9a06      	ldr	r2, [sp, #24]
 800d6ae:	2a47      	cmp	r2, #71	@ 0x47
 800d6b0:	d1c2      	bne.n	800d638 <_printf_float+0xf0>
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d1c0      	bne.n	800d638 <_printf_float+0xf0>
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	e7bd      	b.n	800d636 <_printf_float+0xee>
 800d6ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d6be:	d9db      	bls.n	800d678 <_printf_float+0x130>
 800d6c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d6c4:	d118      	bne.n	800d6f8 <_printf_float+0x1b0>
 800d6c6:	2900      	cmp	r1, #0
 800d6c8:	6863      	ldr	r3, [r4, #4]
 800d6ca:	dd0b      	ble.n	800d6e4 <_printf_float+0x19c>
 800d6cc:	6121      	str	r1, [r4, #16]
 800d6ce:	b913      	cbnz	r3, 800d6d6 <_printf_float+0x18e>
 800d6d0:	6822      	ldr	r2, [r4, #0]
 800d6d2:	07d0      	lsls	r0, r2, #31
 800d6d4:	d502      	bpl.n	800d6dc <_printf_float+0x194>
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	440b      	add	r3, r1
 800d6da:	6123      	str	r3, [r4, #16]
 800d6dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d6de:	f04f 0900 	mov.w	r9, #0
 800d6e2:	e7db      	b.n	800d69c <_printf_float+0x154>
 800d6e4:	b913      	cbnz	r3, 800d6ec <_printf_float+0x1a4>
 800d6e6:	6822      	ldr	r2, [r4, #0]
 800d6e8:	07d2      	lsls	r2, r2, #31
 800d6ea:	d501      	bpl.n	800d6f0 <_printf_float+0x1a8>
 800d6ec:	3302      	adds	r3, #2
 800d6ee:	e7f4      	b.n	800d6da <_printf_float+0x192>
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	e7f2      	b.n	800d6da <_printf_float+0x192>
 800d6f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d6f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6fa:	4299      	cmp	r1, r3
 800d6fc:	db05      	blt.n	800d70a <_printf_float+0x1c2>
 800d6fe:	6823      	ldr	r3, [r4, #0]
 800d700:	6121      	str	r1, [r4, #16]
 800d702:	07d8      	lsls	r0, r3, #31
 800d704:	d5ea      	bpl.n	800d6dc <_printf_float+0x194>
 800d706:	1c4b      	adds	r3, r1, #1
 800d708:	e7e7      	b.n	800d6da <_printf_float+0x192>
 800d70a:	2900      	cmp	r1, #0
 800d70c:	bfd4      	ite	le
 800d70e:	f1c1 0202 	rsble	r2, r1, #2
 800d712:	2201      	movgt	r2, #1
 800d714:	4413      	add	r3, r2
 800d716:	e7e0      	b.n	800d6da <_printf_float+0x192>
 800d718:	6823      	ldr	r3, [r4, #0]
 800d71a:	055a      	lsls	r2, r3, #21
 800d71c:	d407      	bmi.n	800d72e <_printf_float+0x1e6>
 800d71e:	6923      	ldr	r3, [r4, #16]
 800d720:	4642      	mov	r2, r8
 800d722:	4631      	mov	r1, r6
 800d724:	4628      	mov	r0, r5
 800d726:	47b8      	blx	r7
 800d728:	3001      	adds	r0, #1
 800d72a:	d12b      	bne.n	800d784 <_printf_float+0x23c>
 800d72c:	e767      	b.n	800d5fe <_printf_float+0xb6>
 800d72e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d732:	f240 80dd 	bls.w	800d8f0 <_printf_float+0x3a8>
 800d736:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d73a:	2200      	movs	r2, #0
 800d73c:	2300      	movs	r3, #0
 800d73e:	f7f3 f9eb 	bl	8000b18 <__aeabi_dcmpeq>
 800d742:	2800      	cmp	r0, #0
 800d744:	d033      	beq.n	800d7ae <_printf_float+0x266>
 800d746:	4a37      	ldr	r2, [pc, #220]	@ (800d824 <_printf_float+0x2dc>)
 800d748:	2301      	movs	r3, #1
 800d74a:	4631      	mov	r1, r6
 800d74c:	4628      	mov	r0, r5
 800d74e:	47b8      	blx	r7
 800d750:	3001      	adds	r0, #1
 800d752:	f43f af54 	beq.w	800d5fe <_printf_float+0xb6>
 800d756:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d75a:	4543      	cmp	r3, r8
 800d75c:	db02      	blt.n	800d764 <_printf_float+0x21c>
 800d75e:	6823      	ldr	r3, [r4, #0]
 800d760:	07d8      	lsls	r0, r3, #31
 800d762:	d50f      	bpl.n	800d784 <_printf_float+0x23c>
 800d764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d768:	4631      	mov	r1, r6
 800d76a:	4628      	mov	r0, r5
 800d76c:	47b8      	blx	r7
 800d76e:	3001      	adds	r0, #1
 800d770:	f43f af45 	beq.w	800d5fe <_printf_float+0xb6>
 800d774:	f04f 0900 	mov.w	r9, #0
 800d778:	f108 38ff 	add.w	r8, r8, #4294967295
 800d77c:	f104 0a1a 	add.w	sl, r4, #26
 800d780:	45c8      	cmp	r8, r9
 800d782:	dc09      	bgt.n	800d798 <_printf_float+0x250>
 800d784:	6823      	ldr	r3, [r4, #0]
 800d786:	079b      	lsls	r3, r3, #30
 800d788:	f100 8103 	bmi.w	800d992 <_printf_float+0x44a>
 800d78c:	68e0      	ldr	r0, [r4, #12]
 800d78e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d790:	4298      	cmp	r0, r3
 800d792:	bfb8      	it	lt
 800d794:	4618      	movlt	r0, r3
 800d796:	e734      	b.n	800d602 <_printf_float+0xba>
 800d798:	2301      	movs	r3, #1
 800d79a:	4652      	mov	r2, sl
 800d79c:	4631      	mov	r1, r6
 800d79e:	4628      	mov	r0, r5
 800d7a0:	47b8      	blx	r7
 800d7a2:	3001      	adds	r0, #1
 800d7a4:	f43f af2b 	beq.w	800d5fe <_printf_float+0xb6>
 800d7a8:	f109 0901 	add.w	r9, r9, #1
 800d7ac:	e7e8      	b.n	800d780 <_printf_float+0x238>
 800d7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	dc39      	bgt.n	800d828 <_printf_float+0x2e0>
 800d7b4:	4a1b      	ldr	r2, [pc, #108]	@ (800d824 <_printf_float+0x2dc>)
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	4631      	mov	r1, r6
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	47b8      	blx	r7
 800d7be:	3001      	adds	r0, #1
 800d7c0:	f43f af1d 	beq.w	800d5fe <_printf_float+0xb6>
 800d7c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d7c8:	ea59 0303 	orrs.w	r3, r9, r3
 800d7cc:	d102      	bne.n	800d7d4 <_printf_float+0x28c>
 800d7ce:	6823      	ldr	r3, [r4, #0]
 800d7d0:	07d9      	lsls	r1, r3, #31
 800d7d2:	d5d7      	bpl.n	800d784 <_printf_float+0x23c>
 800d7d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7d8:	4631      	mov	r1, r6
 800d7da:	4628      	mov	r0, r5
 800d7dc:	47b8      	blx	r7
 800d7de:	3001      	adds	r0, #1
 800d7e0:	f43f af0d 	beq.w	800d5fe <_printf_float+0xb6>
 800d7e4:	f04f 0a00 	mov.w	sl, #0
 800d7e8:	f104 0b1a 	add.w	fp, r4, #26
 800d7ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7ee:	425b      	negs	r3, r3
 800d7f0:	4553      	cmp	r3, sl
 800d7f2:	dc01      	bgt.n	800d7f8 <_printf_float+0x2b0>
 800d7f4:	464b      	mov	r3, r9
 800d7f6:	e793      	b.n	800d720 <_printf_float+0x1d8>
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	465a      	mov	r2, fp
 800d7fc:	4631      	mov	r1, r6
 800d7fe:	4628      	mov	r0, r5
 800d800:	47b8      	blx	r7
 800d802:	3001      	adds	r0, #1
 800d804:	f43f aefb 	beq.w	800d5fe <_printf_float+0xb6>
 800d808:	f10a 0a01 	add.w	sl, sl, #1
 800d80c:	e7ee      	b.n	800d7ec <_printf_float+0x2a4>
 800d80e:	bf00      	nop
 800d810:	7fefffff 	.word	0x7fefffff
 800d814:	08011e3b 	.word	0x08011e3b
 800d818:	08011e3f 	.word	0x08011e3f
 800d81c:	08011e43 	.word	0x08011e43
 800d820:	08011e47 	.word	0x08011e47
 800d824:	08011e4b 	.word	0x08011e4b
 800d828:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d82a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d82e:	4553      	cmp	r3, sl
 800d830:	bfa8      	it	ge
 800d832:	4653      	movge	r3, sl
 800d834:	2b00      	cmp	r3, #0
 800d836:	4699      	mov	r9, r3
 800d838:	dc36      	bgt.n	800d8a8 <_printf_float+0x360>
 800d83a:	f04f 0b00 	mov.w	fp, #0
 800d83e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d842:	f104 021a 	add.w	r2, r4, #26
 800d846:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d848:	9306      	str	r3, [sp, #24]
 800d84a:	eba3 0309 	sub.w	r3, r3, r9
 800d84e:	455b      	cmp	r3, fp
 800d850:	dc31      	bgt.n	800d8b6 <_printf_float+0x36e>
 800d852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d854:	459a      	cmp	sl, r3
 800d856:	dc3a      	bgt.n	800d8ce <_printf_float+0x386>
 800d858:	6823      	ldr	r3, [r4, #0]
 800d85a:	07da      	lsls	r2, r3, #31
 800d85c:	d437      	bmi.n	800d8ce <_printf_float+0x386>
 800d85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d860:	ebaa 0903 	sub.w	r9, sl, r3
 800d864:	9b06      	ldr	r3, [sp, #24]
 800d866:	ebaa 0303 	sub.w	r3, sl, r3
 800d86a:	4599      	cmp	r9, r3
 800d86c:	bfa8      	it	ge
 800d86e:	4699      	movge	r9, r3
 800d870:	f1b9 0f00 	cmp.w	r9, #0
 800d874:	dc33      	bgt.n	800d8de <_printf_float+0x396>
 800d876:	f04f 0800 	mov.w	r8, #0
 800d87a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d87e:	f104 0b1a 	add.w	fp, r4, #26
 800d882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d884:	ebaa 0303 	sub.w	r3, sl, r3
 800d888:	eba3 0309 	sub.w	r3, r3, r9
 800d88c:	4543      	cmp	r3, r8
 800d88e:	f77f af79 	ble.w	800d784 <_printf_float+0x23c>
 800d892:	2301      	movs	r3, #1
 800d894:	465a      	mov	r2, fp
 800d896:	4631      	mov	r1, r6
 800d898:	4628      	mov	r0, r5
 800d89a:	47b8      	blx	r7
 800d89c:	3001      	adds	r0, #1
 800d89e:	f43f aeae 	beq.w	800d5fe <_printf_float+0xb6>
 800d8a2:	f108 0801 	add.w	r8, r8, #1
 800d8a6:	e7ec      	b.n	800d882 <_printf_float+0x33a>
 800d8a8:	4642      	mov	r2, r8
 800d8aa:	4631      	mov	r1, r6
 800d8ac:	4628      	mov	r0, r5
 800d8ae:	47b8      	blx	r7
 800d8b0:	3001      	adds	r0, #1
 800d8b2:	d1c2      	bne.n	800d83a <_printf_float+0x2f2>
 800d8b4:	e6a3      	b.n	800d5fe <_printf_float+0xb6>
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	4631      	mov	r1, r6
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	9206      	str	r2, [sp, #24]
 800d8be:	47b8      	blx	r7
 800d8c0:	3001      	adds	r0, #1
 800d8c2:	f43f ae9c 	beq.w	800d5fe <_printf_float+0xb6>
 800d8c6:	9a06      	ldr	r2, [sp, #24]
 800d8c8:	f10b 0b01 	add.w	fp, fp, #1
 800d8cc:	e7bb      	b.n	800d846 <_printf_float+0x2fe>
 800d8ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8d2:	4631      	mov	r1, r6
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	47b8      	blx	r7
 800d8d8:	3001      	adds	r0, #1
 800d8da:	d1c0      	bne.n	800d85e <_printf_float+0x316>
 800d8dc:	e68f      	b.n	800d5fe <_printf_float+0xb6>
 800d8de:	9a06      	ldr	r2, [sp, #24]
 800d8e0:	464b      	mov	r3, r9
 800d8e2:	4442      	add	r2, r8
 800d8e4:	4631      	mov	r1, r6
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	47b8      	blx	r7
 800d8ea:	3001      	adds	r0, #1
 800d8ec:	d1c3      	bne.n	800d876 <_printf_float+0x32e>
 800d8ee:	e686      	b.n	800d5fe <_printf_float+0xb6>
 800d8f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d8f4:	f1ba 0f01 	cmp.w	sl, #1
 800d8f8:	dc01      	bgt.n	800d8fe <_printf_float+0x3b6>
 800d8fa:	07db      	lsls	r3, r3, #31
 800d8fc:	d536      	bpl.n	800d96c <_printf_float+0x424>
 800d8fe:	2301      	movs	r3, #1
 800d900:	4642      	mov	r2, r8
 800d902:	4631      	mov	r1, r6
 800d904:	4628      	mov	r0, r5
 800d906:	47b8      	blx	r7
 800d908:	3001      	adds	r0, #1
 800d90a:	f43f ae78 	beq.w	800d5fe <_printf_float+0xb6>
 800d90e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d912:	4631      	mov	r1, r6
 800d914:	4628      	mov	r0, r5
 800d916:	47b8      	blx	r7
 800d918:	3001      	adds	r0, #1
 800d91a:	f43f ae70 	beq.w	800d5fe <_printf_float+0xb6>
 800d91e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d922:	2200      	movs	r2, #0
 800d924:	2300      	movs	r3, #0
 800d926:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d92a:	f7f3 f8f5 	bl	8000b18 <__aeabi_dcmpeq>
 800d92e:	b9c0      	cbnz	r0, 800d962 <_printf_float+0x41a>
 800d930:	4653      	mov	r3, sl
 800d932:	f108 0201 	add.w	r2, r8, #1
 800d936:	4631      	mov	r1, r6
 800d938:	4628      	mov	r0, r5
 800d93a:	47b8      	blx	r7
 800d93c:	3001      	adds	r0, #1
 800d93e:	d10c      	bne.n	800d95a <_printf_float+0x412>
 800d940:	e65d      	b.n	800d5fe <_printf_float+0xb6>
 800d942:	2301      	movs	r3, #1
 800d944:	465a      	mov	r2, fp
 800d946:	4631      	mov	r1, r6
 800d948:	4628      	mov	r0, r5
 800d94a:	47b8      	blx	r7
 800d94c:	3001      	adds	r0, #1
 800d94e:	f43f ae56 	beq.w	800d5fe <_printf_float+0xb6>
 800d952:	f108 0801 	add.w	r8, r8, #1
 800d956:	45d0      	cmp	r8, sl
 800d958:	dbf3      	blt.n	800d942 <_printf_float+0x3fa>
 800d95a:	464b      	mov	r3, r9
 800d95c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d960:	e6df      	b.n	800d722 <_printf_float+0x1da>
 800d962:	f04f 0800 	mov.w	r8, #0
 800d966:	f104 0b1a 	add.w	fp, r4, #26
 800d96a:	e7f4      	b.n	800d956 <_printf_float+0x40e>
 800d96c:	2301      	movs	r3, #1
 800d96e:	4642      	mov	r2, r8
 800d970:	e7e1      	b.n	800d936 <_printf_float+0x3ee>
 800d972:	2301      	movs	r3, #1
 800d974:	464a      	mov	r2, r9
 800d976:	4631      	mov	r1, r6
 800d978:	4628      	mov	r0, r5
 800d97a:	47b8      	blx	r7
 800d97c:	3001      	adds	r0, #1
 800d97e:	f43f ae3e 	beq.w	800d5fe <_printf_float+0xb6>
 800d982:	f108 0801 	add.w	r8, r8, #1
 800d986:	68e3      	ldr	r3, [r4, #12]
 800d988:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d98a:	1a5b      	subs	r3, r3, r1
 800d98c:	4543      	cmp	r3, r8
 800d98e:	dcf0      	bgt.n	800d972 <_printf_float+0x42a>
 800d990:	e6fc      	b.n	800d78c <_printf_float+0x244>
 800d992:	f04f 0800 	mov.w	r8, #0
 800d996:	f104 0919 	add.w	r9, r4, #25
 800d99a:	e7f4      	b.n	800d986 <_printf_float+0x43e>

0800d99c <_printf_common>:
 800d99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9a0:	4616      	mov	r6, r2
 800d9a2:	4698      	mov	r8, r3
 800d9a4:	688a      	ldr	r2, [r1, #8]
 800d9a6:	690b      	ldr	r3, [r1, #16]
 800d9a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	bfb8      	it	lt
 800d9b0:	4613      	movlt	r3, r2
 800d9b2:	6033      	str	r3, [r6, #0]
 800d9b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d9b8:	4607      	mov	r7, r0
 800d9ba:	460c      	mov	r4, r1
 800d9bc:	b10a      	cbz	r2, 800d9c2 <_printf_common+0x26>
 800d9be:	3301      	adds	r3, #1
 800d9c0:	6033      	str	r3, [r6, #0]
 800d9c2:	6823      	ldr	r3, [r4, #0]
 800d9c4:	0699      	lsls	r1, r3, #26
 800d9c6:	bf42      	ittt	mi
 800d9c8:	6833      	ldrmi	r3, [r6, #0]
 800d9ca:	3302      	addmi	r3, #2
 800d9cc:	6033      	strmi	r3, [r6, #0]
 800d9ce:	6825      	ldr	r5, [r4, #0]
 800d9d0:	f015 0506 	ands.w	r5, r5, #6
 800d9d4:	d106      	bne.n	800d9e4 <_printf_common+0x48>
 800d9d6:	f104 0a19 	add.w	sl, r4, #25
 800d9da:	68e3      	ldr	r3, [r4, #12]
 800d9dc:	6832      	ldr	r2, [r6, #0]
 800d9de:	1a9b      	subs	r3, r3, r2
 800d9e0:	42ab      	cmp	r3, r5
 800d9e2:	dc26      	bgt.n	800da32 <_printf_common+0x96>
 800d9e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d9e8:	6822      	ldr	r2, [r4, #0]
 800d9ea:	3b00      	subs	r3, #0
 800d9ec:	bf18      	it	ne
 800d9ee:	2301      	movne	r3, #1
 800d9f0:	0692      	lsls	r2, r2, #26
 800d9f2:	d42b      	bmi.n	800da4c <_printf_common+0xb0>
 800d9f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d9f8:	4641      	mov	r1, r8
 800d9fa:	4638      	mov	r0, r7
 800d9fc:	47c8      	blx	r9
 800d9fe:	3001      	adds	r0, #1
 800da00:	d01e      	beq.n	800da40 <_printf_common+0xa4>
 800da02:	6823      	ldr	r3, [r4, #0]
 800da04:	6922      	ldr	r2, [r4, #16]
 800da06:	f003 0306 	and.w	r3, r3, #6
 800da0a:	2b04      	cmp	r3, #4
 800da0c:	bf02      	ittt	eq
 800da0e:	68e5      	ldreq	r5, [r4, #12]
 800da10:	6833      	ldreq	r3, [r6, #0]
 800da12:	1aed      	subeq	r5, r5, r3
 800da14:	68a3      	ldr	r3, [r4, #8]
 800da16:	bf0c      	ite	eq
 800da18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da1c:	2500      	movne	r5, #0
 800da1e:	4293      	cmp	r3, r2
 800da20:	bfc4      	itt	gt
 800da22:	1a9b      	subgt	r3, r3, r2
 800da24:	18ed      	addgt	r5, r5, r3
 800da26:	2600      	movs	r6, #0
 800da28:	341a      	adds	r4, #26
 800da2a:	42b5      	cmp	r5, r6
 800da2c:	d11a      	bne.n	800da64 <_printf_common+0xc8>
 800da2e:	2000      	movs	r0, #0
 800da30:	e008      	b.n	800da44 <_printf_common+0xa8>
 800da32:	2301      	movs	r3, #1
 800da34:	4652      	mov	r2, sl
 800da36:	4641      	mov	r1, r8
 800da38:	4638      	mov	r0, r7
 800da3a:	47c8      	blx	r9
 800da3c:	3001      	adds	r0, #1
 800da3e:	d103      	bne.n	800da48 <_printf_common+0xac>
 800da40:	f04f 30ff 	mov.w	r0, #4294967295
 800da44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da48:	3501      	adds	r5, #1
 800da4a:	e7c6      	b.n	800d9da <_printf_common+0x3e>
 800da4c:	18e1      	adds	r1, r4, r3
 800da4e:	1c5a      	adds	r2, r3, #1
 800da50:	2030      	movs	r0, #48	@ 0x30
 800da52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da56:	4422      	add	r2, r4
 800da58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da60:	3302      	adds	r3, #2
 800da62:	e7c7      	b.n	800d9f4 <_printf_common+0x58>
 800da64:	2301      	movs	r3, #1
 800da66:	4622      	mov	r2, r4
 800da68:	4641      	mov	r1, r8
 800da6a:	4638      	mov	r0, r7
 800da6c:	47c8      	blx	r9
 800da6e:	3001      	adds	r0, #1
 800da70:	d0e6      	beq.n	800da40 <_printf_common+0xa4>
 800da72:	3601      	adds	r6, #1
 800da74:	e7d9      	b.n	800da2a <_printf_common+0x8e>
	...

0800da78 <_printf_i>:
 800da78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da7c:	7e0f      	ldrb	r7, [r1, #24]
 800da7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da80:	2f78      	cmp	r7, #120	@ 0x78
 800da82:	4691      	mov	r9, r2
 800da84:	4680      	mov	r8, r0
 800da86:	460c      	mov	r4, r1
 800da88:	469a      	mov	sl, r3
 800da8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da8e:	d807      	bhi.n	800daa0 <_printf_i+0x28>
 800da90:	2f62      	cmp	r7, #98	@ 0x62
 800da92:	d80a      	bhi.n	800daaa <_printf_i+0x32>
 800da94:	2f00      	cmp	r7, #0
 800da96:	f000 80d2 	beq.w	800dc3e <_printf_i+0x1c6>
 800da9a:	2f58      	cmp	r7, #88	@ 0x58
 800da9c:	f000 80b9 	beq.w	800dc12 <_printf_i+0x19a>
 800daa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800daa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800daa8:	e03a      	b.n	800db20 <_printf_i+0xa8>
 800daaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800daae:	2b15      	cmp	r3, #21
 800dab0:	d8f6      	bhi.n	800daa0 <_printf_i+0x28>
 800dab2:	a101      	add	r1, pc, #4	@ (adr r1, 800dab8 <_printf_i+0x40>)
 800dab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dab8:	0800db11 	.word	0x0800db11
 800dabc:	0800db25 	.word	0x0800db25
 800dac0:	0800daa1 	.word	0x0800daa1
 800dac4:	0800daa1 	.word	0x0800daa1
 800dac8:	0800daa1 	.word	0x0800daa1
 800dacc:	0800daa1 	.word	0x0800daa1
 800dad0:	0800db25 	.word	0x0800db25
 800dad4:	0800daa1 	.word	0x0800daa1
 800dad8:	0800daa1 	.word	0x0800daa1
 800dadc:	0800daa1 	.word	0x0800daa1
 800dae0:	0800daa1 	.word	0x0800daa1
 800dae4:	0800dc25 	.word	0x0800dc25
 800dae8:	0800db4f 	.word	0x0800db4f
 800daec:	0800dbdf 	.word	0x0800dbdf
 800daf0:	0800daa1 	.word	0x0800daa1
 800daf4:	0800daa1 	.word	0x0800daa1
 800daf8:	0800dc47 	.word	0x0800dc47
 800dafc:	0800daa1 	.word	0x0800daa1
 800db00:	0800db4f 	.word	0x0800db4f
 800db04:	0800daa1 	.word	0x0800daa1
 800db08:	0800daa1 	.word	0x0800daa1
 800db0c:	0800dbe7 	.word	0x0800dbe7
 800db10:	6833      	ldr	r3, [r6, #0]
 800db12:	1d1a      	adds	r2, r3, #4
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	6032      	str	r2, [r6, #0]
 800db18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db20:	2301      	movs	r3, #1
 800db22:	e09d      	b.n	800dc60 <_printf_i+0x1e8>
 800db24:	6833      	ldr	r3, [r6, #0]
 800db26:	6820      	ldr	r0, [r4, #0]
 800db28:	1d19      	adds	r1, r3, #4
 800db2a:	6031      	str	r1, [r6, #0]
 800db2c:	0606      	lsls	r6, r0, #24
 800db2e:	d501      	bpl.n	800db34 <_printf_i+0xbc>
 800db30:	681d      	ldr	r5, [r3, #0]
 800db32:	e003      	b.n	800db3c <_printf_i+0xc4>
 800db34:	0645      	lsls	r5, r0, #25
 800db36:	d5fb      	bpl.n	800db30 <_printf_i+0xb8>
 800db38:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db3c:	2d00      	cmp	r5, #0
 800db3e:	da03      	bge.n	800db48 <_printf_i+0xd0>
 800db40:	232d      	movs	r3, #45	@ 0x2d
 800db42:	426d      	negs	r5, r5
 800db44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db48:	4859      	ldr	r0, [pc, #356]	@ (800dcb0 <_printf_i+0x238>)
 800db4a:	230a      	movs	r3, #10
 800db4c:	e011      	b.n	800db72 <_printf_i+0xfa>
 800db4e:	6821      	ldr	r1, [r4, #0]
 800db50:	6833      	ldr	r3, [r6, #0]
 800db52:	0608      	lsls	r0, r1, #24
 800db54:	f853 5b04 	ldr.w	r5, [r3], #4
 800db58:	d402      	bmi.n	800db60 <_printf_i+0xe8>
 800db5a:	0649      	lsls	r1, r1, #25
 800db5c:	bf48      	it	mi
 800db5e:	b2ad      	uxthmi	r5, r5
 800db60:	2f6f      	cmp	r7, #111	@ 0x6f
 800db62:	4853      	ldr	r0, [pc, #332]	@ (800dcb0 <_printf_i+0x238>)
 800db64:	6033      	str	r3, [r6, #0]
 800db66:	bf14      	ite	ne
 800db68:	230a      	movne	r3, #10
 800db6a:	2308      	moveq	r3, #8
 800db6c:	2100      	movs	r1, #0
 800db6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db72:	6866      	ldr	r6, [r4, #4]
 800db74:	60a6      	str	r6, [r4, #8]
 800db76:	2e00      	cmp	r6, #0
 800db78:	bfa2      	ittt	ge
 800db7a:	6821      	ldrge	r1, [r4, #0]
 800db7c:	f021 0104 	bicge.w	r1, r1, #4
 800db80:	6021      	strge	r1, [r4, #0]
 800db82:	b90d      	cbnz	r5, 800db88 <_printf_i+0x110>
 800db84:	2e00      	cmp	r6, #0
 800db86:	d04b      	beq.n	800dc20 <_printf_i+0x1a8>
 800db88:	4616      	mov	r6, r2
 800db8a:	fbb5 f1f3 	udiv	r1, r5, r3
 800db8e:	fb03 5711 	mls	r7, r3, r1, r5
 800db92:	5dc7      	ldrb	r7, [r0, r7]
 800db94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db98:	462f      	mov	r7, r5
 800db9a:	42bb      	cmp	r3, r7
 800db9c:	460d      	mov	r5, r1
 800db9e:	d9f4      	bls.n	800db8a <_printf_i+0x112>
 800dba0:	2b08      	cmp	r3, #8
 800dba2:	d10b      	bne.n	800dbbc <_printf_i+0x144>
 800dba4:	6823      	ldr	r3, [r4, #0]
 800dba6:	07df      	lsls	r7, r3, #31
 800dba8:	d508      	bpl.n	800dbbc <_printf_i+0x144>
 800dbaa:	6923      	ldr	r3, [r4, #16]
 800dbac:	6861      	ldr	r1, [r4, #4]
 800dbae:	4299      	cmp	r1, r3
 800dbb0:	bfde      	ittt	le
 800dbb2:	2330      	movle	r3, #48	@ 0x30
 800dbb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dbbc:	1b92      	subs	r2, r2, r6
 800dbbe:	6122      	str	r2, [r4, #16]
 800dbc0:	f8cd a000 	str.w	sl, [sp]
 800dbc4:	464b      	mov	r3, r9
 800dbc6:	aa03      	add	r2, sp, #12
 800dbc8:	4621      	mov	r1, r4
 800dbca:	4640      	mov	r0, r8
 800dbcc:	f7ff fee6 	bl	800d99c <_printf_common>
 800dbd0:	3001      	adds	r0, #1
 800dbd2:	d14a      	bne.n	800dc6a <_printf_i+0x1f2>
 800dbd4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbd8:	b004      	add	sp, #16
 800dbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbde:	6823      	ldr	r3, [r4, #0]
 800dbe0:	f043 0320 	orr.w	r3, r3, #32
 800dbe4:	6023      	str	r3, [r4, #0]
 800dbe6:	4833      	ldr	r0, [pc, #204]	@ (800dcb4 <_printf_i+0x23c>)
 800dbe8:	2778      	movs	r7, #120	@ 0x78
 800dbea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dbee:	6823      	ldr	r3, [r4, #0]
 800dbf0:	6831      	ldr	r1, [r6, #0]
 800dbf2:	061f      	lsls	r7, r3, #24
 800dbf4:	f851 5b04 	ldr.w	r5, [r1], #4
 800dbf8:	d402      	bmi.n	800dc00 <_printf_i+0x188>
 800dbfa:	065f      	lsls	r7, r3, #25
 800dbfc:	bf48      	it	mi
 800dbfe:	b2ad      	uxthmi	r5, r5
 800dc00:	6031      	str	r1, [r6, #0]
 800dc02:	07d9      	lsls	r1, r3, #31
 800dc04:	bf44      	itt	mi
 800dc06:	f043 0320 	orrmi.w	r3, r3, #32
 800dc0a:	6023      	strmi	r3, [r4, #0]
 800dc0c:	b11d      	cbz	r5, 800dc16 <_printf_i+0x19e>
 800dc0e:	2310      	movs	r3, #16
 800dc10:	e7ac      	b.n	800db6c <_printf_i+0xf4>
 800dc12:	4827      	ldr	r0, [pc, #156]	@ (800dcb0 <_printf_i+0x238>)
 800dc14:	e7e9      	b.n	800dbea <_printf_i+0x172>
 800dc16:	6823      	ldr	r3, [r4, #0]
 800dc18:	f023 0320 	bic.w	r3, r3, #32
 800dc1c:	6023      	str	r3, [r4, #0]
 800dc1e:	e7f6      	b.n	800dc0e <_printf_i+0x196>
 800dc20:	4616      	mov	r6, r2
 800dc22:	e7bd      	b.n	800dba0 <_printf_i+0x128>
 800dc24:	6833      	ldr	r3, [r6, #0]
 800dc26:	6825      	ldr	r5, [r4, #0]
 800dc28:	6961      	ldr	r1, [r4, #20]
 800dc2a:	1d18      	adds	r0, r3, #4
 800dc2c:	6030      	str	r0, [r6, #0]
 800dc2e:	062e      	lsls	r6, r5, #24
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	d501      	bpl.n	800dc38 <_printf_i+0x1c0>
 800dc34:	6019      	str	r1, [r3, #0]
 800dc36:	e002      	b.n	800dc3e <_printf_i+0x1c6>
 800dc38:	0668      	lsls	r0, r5, #25
 800dc3a:	d5fb      	bpl.n	800dc34 <_printf_i+0x1bc>
 800dc3c:	8019      	strh	r1, [r3, #0]
 800dc3e:	2300      	movs	r3, #0
 800dc40:	6123      	str	r3, [r4, #16]
 800dc42:	4616      	mov	r6, r2
 800dc44:	e7bc      	b.n	800dbc0 <_printf_i+0x148>
 800dc46:	6833      	ldr	r3, [r6, #0]
 800dc48:	1d1a      	adds	r2, r3, #4
 800dc4a:	6032      	str	r2, [r6, #0]
 800dc4c:	681e      	ldr	r6, [r3, #0]
 800dc4e:	6862      	ldr	r2, [r4, #4]
 800dc50:	2100      	movs	r1, #0
 800dc52:	4630      	mov	r0, r6
 800dc54:	f7f2 fae4 	bl	8000220 <memchr>
 800dc58:	b108      	cbz	r0, 800dc5e <_printf_i+0x1e6>
 800dc5a:	1b80      	subs	r0, r0, r6
 800dc5c:	6060      	str	r0, [r4, #4]
 800dc5e:	6863      	ldr	r3, [r4, #4]
 800dc60:	6123      	str	r3, [r4, #16]
 800dc62:	2300      	movs	r3, #0
 800dc64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc68:	e7aa      	b.n	800dbc0 <_printf_i+0x148>
 800dc6a:	6923      	ldr	r3, [r4, #16]
 800dc6c:	4632      	mov	r2, r6
 800dc6e:	4649      	mov	r1, r9
 800dc70:	4640      	mov	r0, r8
 800dc72:	47d0      	blx	sl
 800dc74:	3001      	adds	r0, #1
 800dc76:	d0ad      	beq.n	800dbd4 <_printf_i+0x15c>
 800dc78:	6823      	ldr	r3, [r4, #0]
 800dc7a:	079b      	lsls	r3, r3, #30
 800dc7c:	d413      	bmi.n	800dca6 <_printf_i+0x22e>
 800dc7e:	68e0      	ldr	r0, [r4, #12]
 800dc80:	9b03      	ldr	r3, [sp, #12]
 800dc82:	4298      	cmp	r0, r3
 800dc84:	bfb8      	it	lt
 800dc86:	4618      	movlt	r0, r3
 800dc88:	e7a6      	b.n	800dbd8 <_printf_i+0x160>
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	4632      	mov	r2, r6
 800dc8e:	4649      	mov	r1, r9
 800dc90:	4640      	mov	r0, r8
 800dc92:	47d0      	blx	sl
 800dc94:	3001      	adds	r0, #1
 800dc96:	d09d      	beq.n	800dbd4 <_printf_i+0x15c>
 800dc98:	3501      	adds	r5, #1
 800dc9a:	68e3      	ldr	r3, [r4, #12]
 800dc9c:	9903      	ldr	r1, [sp, #12]
 800dc9e:	1a5b      	subs	r3, r3, r1
 800dca0:	42ab      	cmp	r3, r5
 800dca2:	dcf2      	bgt.n	800dc8a <_printf_i+0x212>
 800dca4:	e7eb      	b.n	800dc7e <_printf_i+0x206>
 800dca6:	2500      	movs	r5, #0
 800dca8:	f104 0619 	add.w	r6, r4, #25
 800dcac:	e7f5      	b.n	800dc9a <_printf_i+0x222>
 800dcae:	bf00      	nop
 800dcb0:	08011e4d 	.word	0x08011e4d
 800dcb4:	08011e5e 	.word	0x08011e5e

0800dcb8 <_scanf_float>:
 800dcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcbc:	b087      	sub	sp, #28
 800dcbe:	4617      	mov	r7, r2
 800dcc0:	9303      	str	r3, [sp, #12]
 800dcc2:	688b      	ldr	r3, [r1, #8]
 800dcc4:	1e5a      	subs	r2, r3, #1
 800dcc6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800dcca:	bf81      	itttt	hi
 800dccc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dcd0:	eb03 0b05 	addhi.w	fp, r3, r5
 800dcd4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800dcd8:	608b      	strhi	r3, [r1, #8]
 800dcda:	680b      	ldr	r3, [r1, #0]
 800dcdc:	460a      	mov	r2, r1
 800dcde:	f04f 0500 	mov.w	r5, #0
 800dce2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800dce6:	f842 3b1c 	str.w	r3, [r2], #28
 800dcea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dcee:	4680      	mov	r8, r0
 800dcf0:	460c      	mov	r4, r1
 800dcf2:	bf98      	it	ls
 800dcf4:	f04f 0b00 	movls.w	fp, #0
 800dcf8:	9201      	str	r2, [sp, #4]
 800dcfa:	4616      	mov	r6, r2
 800dcfc:	46aa      	mov	sl, r5
 800dcfe:	46a9      	mov	r9, r5
 800dd00:	9502      	str	r5, [sp, #8]
 800dd02:	68a2      	ldr	r2, [r4, #8]
 800dd04:	b152      	cbz	r2, 800dd1c <_scanf_float+0x64>
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	2b4e      	cmp	r3, #78	@ 0x4e
 800dd0c:	d864      	bhi.n	800ddd8 <_scanf_float+0x120>
 800dd0e:	2b40      	cmp	r3, #64	@ 0x40
 800dd10:	d83c      	bhi.n	800dd8c <_scanf_float+0xd4>
 800dd12:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800dd16:	b2c8      	uxtb	r0, r1
 800dd18:	280e      	cmp	r0, #14
 800dd1a:	d93a      	bls.n	800dd92 <_scanf_float+0xda>
 800dd1c:	f1b9 0f00 	cmp.w	r9, #0
 800dd20:	d003      	beq.n	800dd2a <_scanf_float+0x72>
 800dd22:	6823      	ldr	r3, [r4, #0]
 800dd24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd28:	6023      	str	r3, [r4, #0]
 800dd2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd2e:	f1ba 0f01 	cmp.w	sl, #1
 800dd32:	f200 8117 	bhi.w	800df64 <_scanf_float+0x2ac>
 800dd36:	9b01      	ldr	r3, [sp, #4]
 800dd38:	429e      	cmp	r6, r3
 800dd3a:	f200 8108 	bhi.w	800df4e <_scanf_float+0x296>
 800dd3e:	2001      	movs	r0, #1
 800dd40:	b007      	add	sp, #28
 800dd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd46:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800dd4a:	2a0d      	cmp	r2, #13
 800dd4c:	d8e6      	bhi.n	800dd1c <_scanf_float+0x64>
 800dd4e:	a101      	add	r1, pc, #4	@ (adr r1, 800dd54 <_scanf_float+0x9c>)
 800dd50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dd54:	0800de9b 	.word	0x0800de9b
 800dd58:	0800dd1d 	.word	0x0800dd1d
 800dd5c:	0800dd1d 	.word	0x0800dd1d
 800dd60:	0800dd1d 	.word	0x0800dd1d
 800dd64:	0800defb 	.word	0x0800defb
 800dd68:	0800ded3 	.word	0x0800ded3
 800dd6c:	0800dd1d 	.word	0x0800dd1d
 800dd70:	0800dd1d 	.word	0x0800dd1d
 800dd74:	0800dea9 	.word	0x0800dea9
 800dd78:	0800dd1d 	.word	0x0800dd1d
 800dd7c:	0800dd1d 	.word	0x0800dd1d
 800dd80:	0800dd1d 	.word	0x0800dd1d
 800dd84:	0800dd1d 	.word	0x0800dd1d
 800dd88:	0800de61 	.word	0x0800de61
 800dd8c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800dd90:	e7db      	b.n	800dd4a <_scanf_float+0x92>
 800dd92:	290e      	cmp	r1, #14
 800dd94:	d8c2      	bhi.n	800dd1c <_scanf_float+0x64>
 800dd96:	a001      	add	r0, pc, #4	@ (adr r0, 800dd9c <_scanf_float+0xe4>)
 800dd98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dd9c:	0800de51 	.word	0x0800de51
 800dda0:	0800dd1d 	.word	0x0800dd1d
 800dda4:	0800de51 	.word	0x0800de51
 800dda8:	0800dee7 	.word	0x0800dee7
 800ddac:	0800dd1d 	.word	0x0800dd1d
 800ddb0:	0800ddf9 	.word	0x0800ddf9
 800ddb4:	0800de37 	.word	0x0800de37
 800ddb8:	0800de37 	.word	0x0800de37
 800ddbc:	0800de37 	.word	0x0800de37
 800ddc0:	0800de37 	.word	0x0800de37
 800ddc4:	0800de37 	.word	0x0800de37
 800ddc8:	0800de37 	.word	0x0800de37
 800ddcc:	0800de37 	.word	0x0800de37
 800ddd0:	0800de37 	.word	0x0800de37
 800ddd4:	0800de37 	.word	0x0800de37
 800ddd8:	2b6e      	cmp	r3, #110	@ 0x6e
 800ddda:	d809      	bhi.n	800ddf0 <_scanf_float+0x138>
 800dddc:	2b60      	cmp	r3, #96	@ 0x60
 800ddde:	d8b2      	bhi.n	800dd46 <_scanf_float+0x8e>
 800dde0:	2b54      	cmp	r3, #84	@ 0x54
 800dde2:	d07b      	beq.n	800dedc <_scanf_float+0x224>
 800dde4:	2b59      	cmp	r3, #89	@ 0x59
 800dde6:	d199      	bne.n	800dd1c <_scanf_float+0x64>
 800dde8:	2d07      	cmp	r5, #7
 800ddea:	d197      	bne.n	800dd1c <_scanf_float+0x64>
 800ddec:	2508      	movs	r5, #8
 800ddee:	e02c      	b.n	800de4a <_scanf_float+0x192>
 800ddf0:	2b74      	cmp	r3, #116	@ 0x74
 800ddf2:	d073      	beq.n	800dedc <_scanf_float+0x224>
 800ddf4:	2b79      	cmp	r3, #121	@ 0x79
 800ddf6:	e7f6      	b.n	800dde6 <_scanf_float+0x12e>
 800ddf8:	6821      	ldr	r1, [r4, #0]
 800ddfa:	05c8      	lsls	r0, r1, #23
 800ddfc:	d51b      	bpl.n	800de36 <_scanf_float+0x17e>
 800ddfe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800de02:	6021      	str	r1, [r4, #0]
 800de04:	f109 0901 	add.w	r9, r9, #1
 800de08:	f1bb 0f00 	cmp.w	fp, #0
 800de0c:	d003      	beq.n	800de16 <_scanf_float+0x15e>
 800de0e:	3201      	adds	r2, #1
 800de10:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de14:	60a2      	str	r2, [r4, #8]
 800de16:	68a3      	ldr	r3, [r4, #8]
 800de18:	3b01      	subs	r3, #1
 800de1a:	60a3      	str	r3, [r4, #8]
 800de1c:	6923      	ldr	r3, [r4, #16]
 800de1e:	3301      	adds	r3, #1
 800de20:	6123      	str	r3, [r4, #16]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	3b01      	subs	r3, #1
 800de26:	2b00      	cmp	r3, #0
 800de28:	607b      	str	r3, [r7, #4]
 800de2a:	f340 8087 	ble.w	800df3c <_scanf_float+0x284>
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	3301      	adds	r3, #1
 800de32:	603b      	str	r3, [r7, #0]
 800de34:	e765      	b.n	800dd02 <_scanf_float+0x4a>
 800de36:	eb1a 0105 	adds.w	r1, sl, r5
 800de3a:	f47f af6f 	bne.w	800dd1c <_scanf_float+0x64>
 800de3e:	6822      	ldr	r2, [r4, #0]
 800de40:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800de44:	6022      	str	r2, [r4, #0]
 800de46:	460d      	mov	r5, r1
 800de48:	468a      	mov	sl, r1
 800de4a:	f806 3b01 	strb.w	r3, [r6], #1
 800de4e:	e7e2      	b.n	800de16 <_scanf_float+0x15e>
 800de50:	6822      	ldr	r2, [r4, #0]
 800de52:	0610      	lsls	r0, r2, #24
 800de54:	f57f af62 	bpl.w	800dd1c <_scanf_float+0x64>
 800de58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800de5c:	6022      	str	r2, [r4, #0]
 800de5e:	e7f4      	b.n	800de4a <_scanf_float+0x192>
 800de60:	f1ba 0f00 	cmp.w	sl, #0
 800de64:	d10e      	bne.n	800de84 <_scanf_float+0x1cc>
 800de66:	f1b9 0f00 	cmp.w	r9, #0
 800de6a:	d10e      	bne.n	800de8a <_scanf_float+0x1d2>
 800de6c:	6822      	ldr	r2, [r4, #0]
 800de6e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800de72:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800de76:	d108      	bne.n	800de8a <_scanf_float+0x1d2>
 800de78:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800de7c:	6022      	str	r2, [r4, #0]
 800de7e:	f04f 0a01 	mov.w	sl, #1
 800de82:	e7e2      	b.n	800de4a <_scanf_float+0x192>
 800de84:	f1ba 0f02 	cmp.w	sl, #2
 800de88:	d055      	beq.n	800df36 <_scanf_float+0x27e>
 800de8a:	2d01      	cmp	r5, #1
 800de8c:	d002      	beq.n	800de94 <_scanf_float+0x1dc>
 800de8e:	2d04      	cmp	r5, #4
 800de90:	f47f af44 	bne.w	800dd1c <_scanf_float+0x64>
 800de94:	3501      	adds	r5, #1
 800de96:	b2ed      	uxtb	r5, r5
 800de98:	e7d7      	b.n	800de4a <_scanf_float+0x192>
 800de9a:	f1ba 0f01 	cmp.w	sl, #1
 800de9e:	f47f af3d 	bne.w	800dd1c <_scanf_float+0x64>
 800dea2:	f04f 0a02 	mov.w	sl, #2
 800dea6:	e7d0      	b.n	800de4a <_scanf_float+0x192>
 800dea8:	b97d      	cbnz	r5, 800deca <_scanf_float+0x212>
 800deaa:	f1b9 0f00 	cmp.w	r9, #0
 800deae:	f47f af38 	bne.w	800dd22 <_scanf_float+0x6a>
 800deb2:	6822      	ldr	r2, [r4, #0]
 800deb4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800deb8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800debc:	f040 8108 	bne.w	800e0d0 <_scanf_float+0x418>
 800dec0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dec4:	6022      	str	r2, [r4, #0]
 800dec6:	2501      	movs	r5, #1
 800dec8:	e7bf      	b.n	800de4a <_scanf_float+0x192>
 800deca:	2d03      	cmp	r5, #3
 800decc:	d0e2      	beq.n	800de94 <_scanf_float+0x1dc>
 800dece:	2d05      	cmp	r5, #5
 800ded0:	e7de      	b.n	800de90 <_scanf_float+0x1d8>
 800ded2:	2d02      	cmp	r5, #2
 800ded4:	f47f af22 	bne.w	800dd1c <_scanf_float+0x64>
 800ded8:	2503      	movs	r5, #3
 800deda:	e7b6      	b.n	800de4a <_scanf_float+0x192>
 800dedc:	2d06      	cmp	r5, #6
 800dede:	f47f af1d 	bne.w	800dd1c <_scanf_float+0x64>
 800dee2:	2507      	movs	r5, #7
 800dee4:	e7b1      	b.n	800de4a <_scanf_float+0x192>
 800dee6:	6822      	ldr	r2, [r4, #0]
 800dee8:	0591      	lsls	r1, r2, #22
 800deea:	f57f af17 	bpl.w	800dd1c <_scanf_float+0x64>
 800deee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800def2:	6022      	str	r2, [r4, #0]
 800def4:	f8cd 9008 	str.w	r9, [sp, #8]
 800def8:	e7a7      	b.n	800de4a <_scanf_float+0x192>
 800defa:	6822      	ldr	r2, [r4, #0]
 800defc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800df00:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800df04:	d006      	beq.n	800df14 <_scanf_float+0x25c>
 800df06:	0550      	lsls	r0, r2, #21
 800df08:	f57f af08 	bpl.w	800dd1c <_scanf_float+0x64>
 800df0c:	f1b9 0f00 	cmp.w	r9, #0
 800df10:	f000 80de 	beq.w	800e0d0 <_scanf_float+0x418>
 800df14:	0591      	lsls	r1, r2, #22
 800df16:	bf58      	it	pl
 800df18:	9902      	ldrpl	r1, [sp, #8]
 800df1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800df1e:	bf58      	it	pl
 800df20:	eba9 0101 	subpl.w	r1, r9, r1
 800df24:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800df28:	bf58      	it	pl
 800df2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800df2e:	6022      	str	r2, [r4, #0]
 800df30:	f04f 0900 	mov.w	r9, #0
 800df34:	e789      	b.n	800de4a <_scanf_float+0x192>
 800df36:	f04f 0a03 	mov.w	sl, #3
 800df3a:	e786      	b.n	800de4a <_scanf_float+0x192>
 800df3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800df40:	4639      	mov	r1, r7
 800df42:	4640      	mov	r0, r8
 800df44:	4798      	blx	r3
 800df46:	2800      	cmp	r0, #0
 800df48:	f43f aedb 	beq.w	800dd02 <_scanf_float+0x4a>
 800df4c:	e6e6      	b.n	800dd1c <_scanf_float+0x64>
 800df4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df56:	463a      	mov	r2, r7
 800df58:	4640      	mov	r0, r8
 800df5a:	4798      	blx	r3
 800df5c:	6923      	ldr	r3, [r4, #16]
 800df5e:	3b01      	subs	r3, #1
 800df60:	6123      	str	r3, [r4, #16]
 800df62:	e6e8      	b.n	800dd36 <_scanf_float+0x7e>
 800df64:	1e6b      	subs	r3, r5, #1
 800df66:	2b06      	cmp	r3, #6
 800df68:	d824      	bhi.n	800dfb4 <_scanf_float+0x2fc>
 800df6a:	2d02      	cmp	r5, #2
 800df6c:	d836      	bhi.n	800dfdc <_scanf_float+0x324>
 800df6e:	9b01      	ldr	r3, [sp, #4]
 800df70:	429e      	cmp	r6, r3
 800df72:	f67f aee4 	bls.w	800dd3e <_scanf_float+0x86>
 800df76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df7e:	463a      	mov	r2, r7
 800df80:	4640      	mov	r0, r8
 800df82:	4798      	blx	r3
 800df84:	6923      	ldr	r3, [r4, #16]
 800df86:	3b01      	subs	r3, #1
 800df88:	6123      	str	r3, [r4, #16]
 800df8a:	e7f0      	b.n	800df6e <_scanf_float+0x2b6>
 800df8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df90:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800df94:	463a      	mov	r2, r7
 800df96:	4640      	mov	r0, r8
 800df98:	4798      	blx	r3
 800df9a:	6923      	ldr	r3, [r4, #16]
 800df9c:	3b01      	subs	r3, #1
 800df9e:	6123      	str	r3, [r4, #16]
 800dfa0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dfa4:	fa5f fa8a 	uxtb.w	sl, sl
 800dfa8:	f1ba 0f02 	cmp.w	sl, #2
 800dfac:	d1ee      	bne.n	800df8c <_scanf_float+0x2d4>
 800dfae:	3d03      	subs	r5, #3
 800dfb0:	b2ed      	uxtb	r5, r5
 800dfb2:	1b76      	subs	r6, r6, r5
 800dfb4:	6823      	ldr	r3, [r4, #0]
 800dfb6:	05da      	lsls	r2, r3, #23
 800dfb8:	d530      	bpl.n	800e01c <_scanf_float+0x364>
 800dfba:	055b      	lsls	r3, r3, #21
 800dfbc:	d511      	bpl.n	800dfe2 <_scanf_float+0x32a>
 800dfbe:	9b01      	ldr	r3, [sp, #4]
 800dfc0:	429e      	cmp	r6, r3
 800dfc2:	f67f aebc 	bls.w	800dd3e <_scanf_float+0x86>
 800dfc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dfca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dfce:	463a      	mov	r2, r7
 800dfd0:	4640      	mov	r0, r8
 800dfd2:	4798      	blx	r3
 800dfd4:	6923      	ldr	r3, [r4, #16]
 800dfd6:	3b01      	subs	r3, #1
 800dfd8:	6123      	str	r3, [r4, #16]
 800dfda:	e7f0      	b.n	800dfbe <_scanf_float+0x306>
 800dfdc:	46aa      	mov	sl, r5
 800dfde:	46b3      	mov	fp, r6
 800dfe0:	e7de      	b.n	800dfa0 <_scanf_float+0x2e8>
 800dfe2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dfe6:	6923      	ldr	r3, [r4, #16]
 800dfe8:	2965      	cmp	r1, #101	@ 0x65
 800dfea:	f103 33ff 	add.w	r3, r3, #4294967295
 800dfee:	f106 35ff 	add.w	r5, r6, #4294967295
 800dff2:	6123      	str	r3, [r4, #16]
 800dff4:	d00c      	beq.n	800e010 <_scanf_float+0x358>
 800dff6:	2945      	cmp	r1, #69	@ 0x45
 800dff8:	d00a      	beq.n	800e010 <_scanf_float+0x358>
 800dffa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dffe:	463a      	mov	r2, r7
 800e000:	4640      	mov	r0, r8
 800e002:	4798      	blx	r3
 800e004:	6923      	ldr	r3, [r4, #16]
 800e006:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e00a:	3b01      	subs	r3, #1
 800e00c:	1eb5      	subs	r5, r6, #2
 800e00e:	6123      	str	r3, [r4, #16]
 800e010:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e014:	463a      	mov	r2, r7
 800e016:	4640      	mov	r0, r8
 800e018:	4798      	blx	r3
 800e01a:	462e      	mov	r6, r5
 800e01c:	6822      	ldr	r2, [r4, #0]
 800e01e:	f012 0210 	ands.w	r2, r2, #16
 800e022:	d001      	beq.n	800e028 <_scanf_float+0x370>
 800e024:	2000      	movs	r0, #0
 800e026:	e68b      	b.n	800dd40 <_scanf_float+0x88>
 800e028:	7032      	strb	r2, [r6, #0]
 800e02a:	6823      	ldr	r3, [r4, #0]
 800e02c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e034:	d11c      	bne.n	800e070 <_scanf_float+0x3b8>
 800e036:	9b02      	ldr	r3, [sp, #8]
 800e038:	454b      	cmp	r3, r9
 800e03a:	eba3 0209 	sub.w	r2, r3, r9
 800e03e:	d123      	bne.n	800e088 <_scanf_float+0x3d0>
 800e040:	9901      	ldr	r1, [sp, #4]
 800e042:	2200      	movs	r2, #0
 800e044:	4640      	mov	r0, r8
 800e046:	f002 fc17 	bl	8010878 <_strtod_r>
 800e04a:	9b03      	ldr	r3, [sp, #12]
 800e04c:	6821      	ldr	r1, [r4, #0]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f011 0f02 	tst.w	r1, #2
 800e054:	ec57 6b10 	vmov	r6, r7, d0
 800e058:	f103 0204 	add.w	r2, r3, #4
 800e05c:	d01f      	beq.n	800e09e <_scanf_float+0x3e6>
 800e05e:	9903      	ldr	r1, [sp, #12]
 800e060:	600a      	str	r2, [r1, #0]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	e9c3 6700 	strd	r6, r7, [r3]
 800e068:	68e3      	ldr	r3, [r4, #12]
 800e06a:	3301      	adds	r3, #1
 800e06c:	60e3      	str	r3, [r4, #12]
 800e06e:	e7d9      	b.n	800e024 <_scanf_float+0x36c>
 800e070:	9b04      	ldr	r3, [sp, #16]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d0e4      	beq.n	800e040 <_scanf_float+0x388>
 800e076:	9905      	ldr	r1, [sp, #20]
 800e078:	230a      	movs	r3, #10
 800e07a:	3101      	adds	r1, #1
 800e07c:	4640      	mov	r0, r8
 800e07e:	f002 fc7b 	bl	8010978 <_strtol_r>
 800e082:	9b04      	ldr	r3, [sp, #16]
 800e084:	9e05      	ldr	r6, [sp, #20]
 800e086:	1ac2      	subs	r2, r0, r3
 800e088:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e08c:	429e      	cmp	r6, r3
 800e08e:	bf28      	it	cs
 800e090:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e094:	4910      	ldr	r1, [pc, #64]	@ (800e0d8 <_scanf_float+0x420>)
 800e096:	4630      	mov	r0, r6
 800e098:	f000 f8e4 	bl	800e264 <siprintf>
 800e09c:	e7d0      	b.n	800e040 <_scanf_float+0x388>
 800e09e:	f011 0f04 	tst.w	r1, #4
 800e0a2:	9903      	ldr	r1, [sp, #12]
 800e0a4:	600a      	str	r2, [r1, #0]
 800e0a6:	d1dc      	bne.n	800e062 <_scanf_float+0x3aa>
 800e0a8:	681d      	ldr	r5, [r3, #0]
 800e0aa:	4632      	mov	r2, r6
 800e0ac:	463b      	mov	r3, r7
 800e0ae:	4630      	mov	r0, r6
 800e0b0:	4639      	mov	r1, r7
 800e0b2:	f7f2 fd63 	bl	8000b7c <__aeabi_dcmpun>
 800e0b6:	b128      	cbz	r0, 800e0c4 <_scanf_float+0x40c>
 800e0b8:	4808      	ldr	r0, [pc, #32]	@ (800e0dc <_scanf_float+0x424>)
 800e0ba:	f000 f9d7 	bl	800e46c <nanf>
 800e0be:	ed85 0a00 	vstr	s0, [r5]
 800e0c2:	e7d1      	b.n	800e068 <_scanf_float+0x3b0>
 800e0c4:	4630      	mov	r0, r6
 800e0c6:	4639      	mov	r1, r7
 800e0c8:	f7f2 fdb6 	bl	8000c38 <__aeabi_d2f>
 800e0cc:	6028      	str	r0, [r5, #0]
 800e0ce:	e7cb      	b.n	800e068 <_scanf_float+0x3b0>
 800e0d0:	f04f 0900 	mov.w	r9, #0
 800e0d4:	e629      	b.n	800dd2a <_scanf_float+0x72>
 800e0d6:	bf00      	nop
 800e0d8:	08011e6f 	.word	0x08011e6f
 800e0dc:	08012205 	.word	0x08012205

0800e0e0 <std>:
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	b510      	push	{r4, lr}
 800e0e4:	4604      	mov	r4, r0
 800e0e6:	e9c0 3300 	strd	r3, r3, [r0]
 800e0ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0ee:	6083      	str	r3, [r0, #8]
 800e0f0:	8181      	strh	r1, [r0, #12]
 800e0f2:	6643      	str	r3, [r0, #100]	@ 0x64
 800e0f4:	81c2      	strh	r2, [r0, #14]
 800e0f6:	6183      	str	r3, [r0, #24]
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	2208      	movs	r2, #8
 800e0fc:	305c      	adds	r0, #92	@ 0x5c
 800e0fe:	f000 f935 	bl	800e36c <memset>
 800e102:	4b0d      	ldr	r3, [pc, #52]	@ (800e138 <std+0x58>)
 800e104:	6263      	str	r3, [r4, #36]	@ 0x24
 800e106:	4b0d      	ldr	r3, [pc, #52]	@ (800e13c <std+0x5c>)
 800e108:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e10a:	4b0d      	ldr	r3, [pc, #52]	@ (800e140 <std+0x60>)
 800e10c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e10e:	4b0d      	ldr	r3, [pc, #52]	@ (800e144 <std+0x64>)
 800e110:	6323      	str	r3, [r4, #48]	@ 0x30
 800e112:	4b0d      	ldr	r3, [pc, #52]	@ (800e148 <std+0x68>)
 800e114:	6224      	str	r4, [r4, #32]
 800e116:	429c      	cmp	r4, r3
 800e118:	d006      	beq.n	800e128 <std+0x48>
 800e11a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e11e:	4294      	cmp	r4, r2
 800e120:	d002      	beq.n	800e128 <std+0x48>
 800e122:	33d0      	adds	r3, #208	@ 0xd0
 800e124:	429c      	cmp	r4, r3
 800e126:	d105      	bne.n	800e134 <std+0x54>
 800e128:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e130:	f000 b998 	b.w	800e464 <__retarget_lock_init_recursive>
 800e134:	bd10      	pop	{r4, pc}
 800e136:	bf00      	nop
 800e138:	0800e2a5 	.word	0x0800e2a5
 800e13c:	0800e2c7 	.word	0x0800e2c7
 800e140:	0800e2ff 	.word	0x0800e2ff
 800e144:	0800e323 	.word	0x0800e323
 800e148:	200008e8 	.word	0x200008e8

0800e14c <stdio_exit_handler>:
 800e14c:	4a02      	ldr	r2, [pc, #8]	@ (800e158 <stdio_exit_handler+0xc>)
 800e14e:	4903      	ldr	r1, [pc, #12]	@ (800e15c <stdio_exit_handler+0x10>)
 800e150:	4803      	ldr	r0, [pc, #12]	@ (800e160 <stdio_exit_handler+0x14>)
 800e152:	f000 b869 	b.w	800e228 <_fwalk_sglue>
 800e156:	bf00      	nop
 800e158:	20000090 	.word	0x20000090
 800e15c:	08010d35 	.word	0x08010d35
 800e160:	200000a0 	.word	0x200000a0

0800e164 <cleanup_stdio>:
 800e164:	6841      	ldr	r1, [r0, #4]
 800e166:	4b0c      	ldr	r3, [pc, #48]	@ (800e198 <cleanup_stdio+0x34>)
 800e168:	4299      	cmp	r1, r3
 800e16a:	b510      	push	{r4, lr}
 800e16c:	4604      	mov	r4, r0
 800e16e:	d001      	beq.n	800e174 <cleanup_stdio+0x10>
 800e170:	f002 fde0 	bl	8010d34 <_fflush_r>
 800e174:	68a1      	ldr	r1, [r4, #8]
 800e176:	4b09      	ldr	r3, [pc, #36]	@ (800e19c <cleanup_stdio+0x38>)
 800e178:	4299      	cmp	r1, r3
 800e17a:	d002      	beq.n	800e182 <cleanup_stdio+0x1e>
 800e17c:	4620      	mov	r0, r4
 800e17e:	f002 fdd9 	bl	8010d34 <_fflush_r>
 800e182:	68e1      	ldr	r1, [r4, #12]
 800e184:	4b06      	ldr	r3, [pc, #24]	@ (800e1a0 <cleanup_stdio+0x3c>)
 800e186:	4299      	cmp	r1, r3
 800e188:	d004      	beq.n	800e194 <cleanup_stdio+0x30>
 800e18a:	4620      	mov	r0, r4
 800e18c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e190:	f002 bdd0 	b.w	8010d34 <_fflush_r>
 800e194:	bd10      	pop	{r4, pc}
 800e196:	bf00      	nop
 800e198:	200008e8 	.word	0x200008e8
 800e19c:	20000950 	.word	0x20000950
 800e1a0:	200009b8 	.word	0x200009b8

0800e1a4 <global_stdio_init.part.0>:
 800e1a4:	b510      	push	{r4, lr}
 800e1a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e1d4 <global_stdio_init.part.0+0x30>)
 800e1a8:	4c0b      	ldr	r4, [pc, #44]	@ (800e1d8 <global_stdio_init.part.0+0x34>)
 800e1aa:	4a0c      	ldr	r2, [pc, #48]	@ (800e1dc <global_stdio_init.part.0+0x38>)
 800e1ac:	601a      	str	r2, [r3, #0]
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	2104      	movs	r1, #4
 800e1b4:	f7ff ff94 	bl	800e0e0 <std>
 800e1b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e1bc:	2201      	movs	r2, #1
 800e1be:	2109      	movs	r1, #9
 800e1c0:	f7ff ff8e 	bl	800e0e0 <std>
 800e1c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e1c8:	2202      	movs	r2, #2
 800e1ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1ce:	2112      	movs	r1, #18
 800e1d0:	f7ff bf86 	b.w	800e0e0 <std>
 800e1d4:	20000a20 	.word	0x20000a20
 800e1d8:	200008e8 	.word	0x200008e8
 800e1dc:	0800e14d 	.word	0x0800e14d

0800e1e0 <__sfp_lock_acquire>:
 800e1e0:	4801      	ldr	r0, [pc, #4]	@ (800e1e8 <__sfp_lock_acquire+0x8>)
 800e1e2:	f000 b940 	b.w	800e466 <__retarget_lock_acquire_recursive>
 800e1e6:	bf00      	nop
 800e1e8:	20000a29 	.word	0x20000a29

0800e1ec <__sfp_lock_release>:
 800e1ec:	4801      	ldr	r0, [pc, #4]	@ (800e1f4 <__sfp_lock_release+0x8>)
 800e1ee:	f000 b93b 	b.w	800e468 <__retarget_lock_release_recursive>
 800e1f2:	bf00      	nop
 800e1f4:	20000a29 	.word	0x20000a29

0800e1f8 <__sinit>:
 800e1f8:	b510      	push	{r4, lr}
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	f7ff fff0 	bl	800e1e0 <__sfp_lock_acquire>
 800e200:	6a23      	ldr	r3, [r4, #32]
 800e202:	b11b      	cbz	r3, 800e20c <__sinit+0x14>
 800e204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e208:	f7ff bff0 	b.w	800e1ec <__sfp_lock_release>
 800e20c:	4b04      	ldr	r3, [pc, #16]	@ (800e220 <__sinit+0x28>)
 800e20e:	6223      	str	r3, [r4, #32]
 800e210:	4b04      	ldr	r3, [pc, #16]	@ (800e224 <__sinit+0x2c>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d1f5      	bne.n	800e204 <__sinit+0xc>
 800e218:	f7ff ffc4 	bl	800e1a4 <global_stdio_init.part.0>
 800e21c:	e7f2      	b.n	800e204 <__sinit+0xc>
 800e21e:	bf00      	nop
 800e220:	0800e165 	.word	0x0800e165
 800e224:	20000a20 	.word	0x20000a20

0800e228 <_fwalk_sglue>:
 800e228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e22c:	4607      	mov	r7, r0
 800e22e:	4688      	mov	r8, r1
 800e230:	4614      	mov	r4, r2
 800e232:	2600      	movs	r6, #0
 800e234:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e238:	f1b9 0901 	subs.w	r9, r9, #1
 800e23c:	d505      	bpl.n	800e24a <_fwalk_sglue+0x22>
 800e23e:	6824      	ldr	r4, [r4, #0]
 800e240:	2c00      	cmp	r4, #0
 800e242:	d1f7      	bne.n	800e234 <_fwalk_sglue+0xc>
 800e244:	4630      	mov	r0, r6
 800e246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e24a:	89ab      	ldrh	r3, [r5, #12]
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d907      	bls.n	800e260 <_fwalk_sglue+0x38>
 800e250:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e254:	3301      	adds	r3, #1
 800e256:	d003      	beq.n	800e260 <_fwalk_sglue+0x38>
 800e258:	4629      	mov	r1, r5
 800e25a:	4638      	mov	r0, r7
 800e25c:	47c0      	blx	r8
 800e25e:	4306      	orrs	r6, r0
 800e260:	3568      	adds	r5, #104	@ 0x68
 800e262:	e7e9      	b.n	800e238 <_fwalk_sglue+0x10>

0800e264 <siprintf>:
 800e264:	b40e      	push	{r1, r2, r3}
 800e266:	b500      	push	{lr}
 800e268:	b09c      	sub	sp, #112	@ 0x70
 800e26a:	ab1d      	add	r3, sp, #116	@ 0x74
 800e26c:	9002      	str	r0, [sp, #8]
 800e26e:	9006      	str	r0, [sp, #24]
 800e270:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e274:	4809      	ldr	r0, [pc, #36]	@ (800e29c <siprintf+0x38>)
 800e276:	9107      	str	r1, [sp, #28]
 800e278:	9104      	str	r1, [sp, #16]
 800e27a:	4909      	ldr	r1, [pc, #36]	@ (800e2a0 <siprintf+0x3c>)
 800e27c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e280:	9105      	str	r1, [sp, #20]
 800e282:	6800      	ldr	r0, [r0, #0]
 800e284:	9301      	str	r3, [sp, #4]
 800e286:	a902      	add	r1, sp, #8
 800e288:	f002 fbd4 	bl	8010a34 <_svfiprintf_r>
 800e28c:	9b02      	ldr	r3, [sp, #8]
 800e28e:	2200      	movs	r2, #0
 800e290:	701a      	strb	r2, [r3, #0]
 800e292:	b01c      	add	sp, #112	@ 0x70
 800e294:	f85d eb04 	ldr.w	lr, [sp], #4
 800e298:	b003      	add	sp, #12
 800e29a:	4770      	bx	lr
 800e29c:	2000009c 	.word	0x2000009c
 800e2a0:	ffff0208 	.word	0xffff0208

0800e2a4 <__sread>:
 800e2a4:	b510      	push	{r4, lr}
 800e2a6:	460c      	mov	r4, r1
 800e2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ac:	f000 f88c 	bl	800e3c8 <_read_r>
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	bfab      	itete	ge
 800e2b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e2b6:	89a3      	ldrhlt	r3, [r4, #12]
 800e2b8:	181b      	addge	r3, r3, r0
 800e2ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e2be:	bfac      	ite	ge
 800e2c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e2c2:	81a3      	strhlt	r3, [r4, #12]
 800e2c4:	bd10      	pop	{r4, pc}

0800e2c6 <__swrite>:
 800e2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ca:	461f      	mov	r7, r3
 800e2cc:	898b      	ldrh	r3, [r1, #12]
 800e2ce:	05db      	lsls	r3, r3, #23
 800e2d0:	4605      	mov	r5, r0
 800e2d2:	460c      	mov	r4, r1
 800e2d4:	4616      	mov	r6, r2
 800e2d6:	d505      	bpl.n	800e2e4 <__swrite+0x1e>
 800e2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2dc:	2302      	movs	r3, #2
 800e2de:	2200      	movs	r2, #0
 800e2e0:	f000 f860 	bl	800e3a4 <_lseek_r>
 800e2e4:	89a3      	ldrh	r3, [r4, #12]
 800e2e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e2ee:	81a3      	strh	r3, [r4, #12]
 800e2f0:	4632      	mov	r2, r6
 800e2f2:	463b      	mov	r3, r7
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2fa:	f000 b877 	b.w	800e3ec <_write_r>

0800e2fe <__sseek>:
 800e2fe:	b510      	push	{r4, lr}
 800e300:	460c      	mov	r4, r1
 800e302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e306:	f000 f84d 	bl	800e3a4 <_lseek_r>
 800e30a:	1c43      	adds	r3, r0, #1
 800e30c:	89a3      	ldrh	r3, [r4, #12]
 800e30e:	bf15      	itete	ne
 800e310:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e312:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e316:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e31a:	81a3      	strheq	r3, [r4, #12]
 800e31c:	bf18      	it	ne
 800e31e:	81a3      	strhne	r3, [r4, #12]
 800e320:	bd10      	pop	{r4, pc}

0800e322 <__sclose>:
 800e322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e326:	f000 b82d 	b.w	800e384 <_close_r>
	...

0800e32c <_vsiprintf_r>:
 800e32c:	b500      	push	{lr}
 800e32e:	b09b      	sub	sp, #108	@ 0x6c
 800e330:	9100      	str	r1, [sp, #0]
 800e332:	9104      	str	r1, [sp, #16]
 800e334:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e338:	9105      	str	r1, [sp, #20]
 800e33a:	9102      	str	r1, [sp, #8]
 800e33c:	4905      	ldr	r1, [pc, #20]	@ (800e354 <_vsiprintf_r+0x28>)
 800e33e:	9103      	str	r1, [sp, #12]
 800e340:	4669      	mov	r1, sp
 800e342:	f002 fb77 	bl	8010a34 <_svfiprintf_r>
 800e346:	9b00      	ldr	r3, [sp, #0]
 800e348:	2200      	movs	r2, #0
 800e34a:	701a      	strb	r2, [r3, #0]
 800e34c:	b01b      	add	sp, #108	@ 0x6c
 800e34e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e352:	bf00      	nop
 800e354:	ffff0208 	.word	0xffff0208

0800e358 <vsiprintf>:
 800e358:	4613      	mov	r3, r2
 800e35a:	460a      	mov	r2, r1
 800e35c:	4601      	mov	r1, r0
 800e35e:	4802      	ldr	r0, [pc, #8]	@ (800e368 <vsiprintf+0x10>)
 800e360:	6800      	ldr	r0, [r0, #0]
 800e362:	f7ff bfe3 	b.w	800e32c <_vsiprintf_r>
 800e366:	bf00      	nop
 800e368:	2000009c 	.word	0x2000009c

0800e36c <memset>:
 800e36c:	4402      	add	r2, r0
 800e36e:	4603      	mov	r3, r0
 800e370:	4293      	cmp	r3, r2
 800e372:	d100      	bne.n	800e376 <memset+0xa>
 800e374:	4770      	bx	lr
 800e376:	f803 1b01 	strb.w	r1, [r3], #1
 800e37a:	e7f9      	b.n	800e370 <memset+0x4>

0800e37c <_localeconv_r>:
 800e37c:	4800      	ldr	r0, [pc, #0]	@ (800e380 <_localeconv_r+0x4>)
 800e37e:	4770      	bx	lr
 800e380:	200001dc 	.word	0x200001dc

0800e384 <_close_r>:
 800e384:	b538      	push	{r3, r4, r5, lr}
 800e386:	4d06      	ldr	r5, [pc, #24]	@ (800e3a0 <_close_r+0x1c>)
 800e388:	2300      	movs	r3, #0
 800e38a:	4604      	mov	r4, r0
 800e38c:	4608      	mov	r0, r1
 800e38e:	602b      	str	r3, [r5, #0]
 800e390:	f7f3 fdea 	bl	8001f68 <_close>
 800e394:	1c43      	adds	r3, r0, #1
 800e396:	d102      	bne.n	800e39e <_close_r+0x1a>
 800e398:	682b      	ldr	r3, [r5, #0]
 800e39a:	b103      	cbz	r3, 800e39e <_close_r+0x1a>
 800e39c:	6023      	str	r3, [r4, #0]
 800e39e:	bd38      	pop	{r3, r4, r5, pc}
 800e3a0:	20000a24 	.word	0x20000a24

0800e3a4 <_lseek_r>:
 800e3a4:	b538      	push	{r3, r4, r5, lr}
 800e3a6:	4d07      	ldr	r5, [pc, #28]	@ (800e3c4 <_lseek_r+0x20>)
 800e3a8:	4604      	mov	r4, r0
 800e3aa:	4608      	mov	r0, r1
 800e3ac:	4611      	mov	r1, r2
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	602a      	str	r2, [r5, #0]
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	f7f3 fdff 	bl	8001fb6 <_lseek>
 800e3b8:	1c43      	adds	r3, r0, #1
 800e3ba:	d102      	bne.n	800e3c2 <_lseek_r+0x1e>
 800e3bc:	682b      	ldr	r3, [r5, #0]
 800e3be:	b103      	cbz	r3, 800e3c2 <_lseek_r+0x1e>
 800e3c0:	6023      	str	r3, [r4, #0]
 800e3c2:	bd38      	pop	{r3, r4, r5, pc}
 800e3c4:	20000a24 	.word	0x20000a24

0800e3c8 <_read_r>:
 800e3c8:	b538      	push	{r3, r4, r5, lr}
 800e3ca:	4d07      	ldr	r5, [pc, #28]	@ (800e3e8 <_read_r+0x20>)
 800e3cc:	4604      	mov	r4, r0
 800e3ce:	4608      	mov	r0, r1
 800e3d0:	4611      	mov	r1, r2
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	602a      	str	r2, [r5, #0]
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	f7f3 fd8d 	bl	8001ef6 <_read>
 800e3dc:	1c43      	adds	r3, r0, #1
 800e3de:	d102      	bne.n	800e3e6 <_read_r+0x1e>
 800e3e0:	682b      	ldr	r3, [r5, #0]
 800e3e2:	b103      	cbz	r3, 800e3e6 <_read_r+0x1e>
 800e3e4:	6023      	str	r3, [r4, #0]
 800e3e6:	bd38      	pop	{r3, r4, r5, pc}
 800e3e8:	20000a24 	.word	0x20000a24

0800e3ec <_write_r>:
 800e3ec:	b538      	push	{r3, r4, r5, lr}
 800e3ee:	4d07      	ldr	r5, [pc, #28]	@ (800e40c <_write_r+0x20>)
 800e3f0:	4604      	mov	r4, r0
 800e3f2:	4608      	mov	r0, r1
 800e3f4:	4611      	mov	r1, r2
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	602a      	str	r2, [r5, #0]
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	f7f3 fd98 	bl	8001f30 <_write>
 800e400:	1c43      	adds	r3, r0, #1
 800e402:	d102      	bne.n	800e40a <_write_r+0x1e>
 800e404:	682b      	ldr	r3, [r5, #0]
 800e406:	b103      	cbz	r3, 800e40a <_write_r+0x1e>
 800e408:	6023      	str	r3, [r4, #0]
 800e40a:	bd38      	pop	{r3, r4, r5, pc}
 800e40c:	20000a24 	.word	0x20000a24

0800e410 <__errno>:
 800e410:	4b01      	ldr	r3, [pc, #4]	@ (800e418 <__errno+0x8>)
 800e412:	6818      	ldr	r0, [r3, #0]
 800e414:	4770      	bx	lr
 800e416:	bf00      	nop
 800e418:	2000009c 	.word	0x2000009c

0800e41c <__libc_init_array>:
 800e41c:	b570      	push	{r4, r5, r6, lr}
 800e41e:	4d0d      	ldr	r5, [pc, #52]	@ (800e454 <__libc_init_array+0x38>)
 800e420:	4c0d      	ldr	r4, [pc, #52]	@ (800e458 <__libc_init_array+0x3c>)
 800e422:	1b64      	subs	r4, r4, r5
 800e424:	10a4      	asrs	r4, r4, #2
 800e426:	2600      	movs	r6, #0
 800e428:	42a6      	cmp	r6, r4
 800e42a:	d109      	bne.n	800e440 <__libc_init_array+0x24>
 800e42c:	4d0b      	ldr	r5, [pc, #44]	@ (800e45c <__libc_init_array+0x40>)
 800e42e:	4c0c      	ldr	r4, [pc, #48]	@ (800e460 <__libc_init_array+0x44>)
 800e430:	f003 fca8 	bl	8011d84 <_init>
 800e434:	1b64      	subs	r4, r4, r5
 800e436:	10a4      	asrs	r4, r4, #2
 800e438:	2600      	movs	r6, #0
 800e43a:	42a6      	cmp	r6, r4
 800e43c:	d105      	bne.n	800e44a <__libc_init_array+0x2e>
 800e43e:	bd70      	pop	{r4, r5, r6, pc}
 800e440:	f855 3b04 	ldr.w	r3, [r5], #4
 800e444:	4798      	blx	r3
 800e446:	3601      	adds	r6, #1
 800e448:	e7ee      	b.n	800e428 <__libc_init_array+0xc>
 800e44a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e44e:	4798      	blx	r3
 800e450:	3601      	adds	r6, #1
 800e452:	e7f2      	b.n	800e43a <__libc_init_array+0x1e>
 800e454:	08012280 	.word	0x08012280
 800e458:	08012280 	.word	0x08012280
 800e45c:	08012280 	.word	0x08012280
 800e460:	08012284 	.word	0x08012284

0800e464 <__retarget_lock_init_recursive>:
 800e464:	4770      	bx	lr

0800e466 <__retarget_lock_acquire_recursive>:
 800e466:	4770      	bx	lr

0800e468 <__retarget_lock_release_recursive>:
 800e468:	4770      	bx	lr
	...

0800e46c <nanf>:
 800e46c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e474 <nanf+0x8>
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	7fc00000 	.word	0x7fc00000

0800e478 <quorem>:
 800e478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47c:	6903      	ldr	r3, [r0, #16]
 800e47e:	690c      	ldr	r4, [r1, #16]
 800e480:	42a3      	cmp	r3, r4
 800e482:	4607      	mov	r7, r0
 800e484:	db7e      	blt.n	800e584 <quorem+0x10c>
 800e486:	3c01      	subs	r4, #1
 800e488:	f101 0814 	add.w	r8, r1, #20
 800e48c:	00a3      	lsls	r3, r4, #2
 800e48e:	f100 0514 	add.w	r5, r0, #20
 800e492:	9300      	str	r3, [sp, #0]
 800e494:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e498:	9301      	str	r3, [sp, #4]
 800e49a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e49e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e4aa:	fbb2 f6f3 	udiv	r6, r2, r3
 800e4ae:	d32e      	bcc.n	800e50e <quorem+0x96>
 800e4b0:	f04f 0a00 	mov.w	sl, #0
 800e4b4:	46c4      	mov	ip, r8
 800e4b6:	46ae      	mov	lr, r5
 800e4b8:	46d3      	mov	fp, sl
 800e4ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e4be:	b298      	uxth	r0, r3
 800e4c0:	fb06 a000 	mla	r0, r6, r0, sl
 800e4c4:	0c02      	lsrs	r2, r0, #16
 800e4c6:	0c1b      	lsrs	r3, r3, #16
 800e4c8:	fb06 2303 	mla	r3, r6, r3, r2
 800e4cc:	f8de 2000 	ldr.w	r2, [lr]
 800e4d0:	b280      	uxth	r0, r0
 800e4d2:	b292      	uxth	r2, r2
 800e4d4:	1a12      	subs	r2, r2, r0
 800e4d6:	445a      	add	r2, fp
 800e4d8:	f8de 0000 	ldr.w	r0, [lr]
 800e4dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4e0:	b29b      	uxth	r3, r3
 800e4e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e4e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e4ea:	b292      	uxth	r2, r2
 800e4ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e4f0:	45e1      	cmp	r9, ip
 800e4f2:	f84e 2b04 	str.w	r2, [lr], #4
 800e4f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e4fa:	d2de      	bcs.n	800e4ba <quorem+0x42>
 800e4fc:	9b00      	ldr	r3, [sp, #0]
 800e4fe:	58eb      	ldr	r3, [r5, r3]
 800e500:	b92b      	cbnz	r3, 800e50e <quorem+0x96>
 800e502:	9b01      	ldr	r3, [sp, #4]
 800e504:	3b04      	subs	r3, #4
 800e506:	429d      	cmp	r5, r3
 800e508:	461a      	mov	r2, r3
 800e50a:	d32f      	bcc.n	800e56c <quorem+0xf4>
 800e50c:	613c      	str	r4, [r7, #16]
 800e50e:	4638      	mov	r0, r7
 800e510:	f001 f9c2 	bl	800f898 <__mcmp>
 800e514:	2800      	cmp	r0, #0
 800e516:	db25      	blt.n	800e564 <quorem+0xec>
 800e518:	4629      	mov	r1, r5
 800e51a:	2000      	movs	r0, #0
 800e51c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e520:	f8d1 c000 	ldr.w	ip, [r1]
 800e524:	fa1f fe82 	uxth.w	lr, r2
 800e528:	fa1f f38c 	uxth.w	r3, ip
 800e52c:	eba3 030e 	sub.w	r3, r3, lr
 800e530:	4403      	add	r3, r0
 800e532:	0c12      	lsrs	r2, r2, #16
 800e534:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e538:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e542:	45c1      	cmp	r9, r8
 800e544:	f841 3b04 	str.w	r3, [r1], #4
 800e548:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e54c:	d2e6      	bcs.n	800e51c <quorem+0xa4>
 800e54e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e556:	b922      	cbnz	r2, 800e562 <quorem+0xea>
 800e558:	3b04      	subs	r3, #4
 800e55a:	429d      	cmp	r5, r3
 800e55c:	461a      	mov	r2, r3
 800e55e:	d30b      	bcc.n	800e578 <quorem+0x100>
 800e560:	613c      	str	r4, [r7, #16]
 800e562:	3601      	adds	r6, #1
 800e564:	4630      	mov	r0, r6
 800e566:	b003      	add	sp, #12
 800e568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e56c:	6812      	ldr	r2, [r2, #0]
 800e56e:	3b04      	subs	r3, #4
 800e570:	2a00      	cmp	r2, #0
 800e572:	d1cb      	bne.n	800e50c <quorem+0x94>
 800e574:	3c01      	subs	r4, #1
 800e576:	e7c6      	b.n	800e506 <quorem+0x8e>
 800e578:	6812      	ldr	r2, [r2, #0]
 800e57a:	3b04      	subs	r3, #4
 800e57c:	2a00      	cmp	r2, #0
 800e57e:	d1ef      	bne.n	800e560 <quorem+0xe8>
 800e580:	3c01      	subs	r4, #1
 800e582:	e7ea      	b.n	800e55a <quorem+0xe2>
 800e584:	2000      	movs	r0, #0
 800e586:	e7ee      	b.n	800e566 <quorem+0xee>

0800e588 <_dtoa_r>:
 800e588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e58c:	69c7      	ldr	r7, [r0, #28]
 800e58e:	b099      	sub	sp, #100	@ 0x64
 800e590:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e594:	ec55 4b10 	vmov	r4, r5, d0
 800e598:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e59a:	9109      	str	r1, [sp, #36]	@ 0x24
 800e59c:	4683      	mov	fp, r0
 800e59e:	920e      	str	r2, [sp, #56]	@ 0x38
 800e5a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e5a2:	b97f      	cbnz	r7, 800e5c4 <_dtoa_r+0x3c>
 800e5a4:	2010      	movs	r0, #16
 800e5a6:	f000 fdfd 	bl	800f1a4 <malloc>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	f8cb 001c 	str.w	r0, [fp, #28]
 800e5b0:	b920      	cbnz	r0, 800e5bc <_dtoa_r+0x34>
 800e5b2:	4ba7      	ldr	r3, [pc, #668]	@ (800e850 <_dtoa_r+0x2c8>)
 800e5b4:	21ef      	movs	r1, #239	@ 0xef
 800e5b6:	48a7      	ldr	r0, [pc, #668]	@ (800e854 <_dtoa_r+0x2cc>)
 800e5b8:	f002 fc36 	bl	8010e28 <__assert_func>
 800e5bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e5c0:	6007      	str	r7, [r0, #0]
 800e5c2:	60c7      	str	r7, [r0, #12]
 800e5c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e5c8:	6819      	ldr	r1, [r3, #0]
 800e5ca:	b159      	cbz	r1, 800e5e4 <_dtoa_r+0x5c>
 800e5cc:	685a      	ldr	r2, [r3, #4]
 800e5ce:	604a      	str	r2, [r1, #4]
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	4093      	lsls	r3, r2
 800e5d4:	608b      	str	r3, [r1, #8]
 800e5d6:	4658      	mov	r0, fp
 800e5d8:	f000 feda 	bl	800f390 <_Bfree>
 800e5dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	601a      	str	r2, [r3, #0]
 800e5e4:	1e2b      	subs	r3, r5, #0
 800e5e6:	bfb9      	ittee	lt
 800e5e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e5ec:	9303      	strlt	r3, [sp, #12]
 800e5ee:	2300      	movge	r3, #0
 800e5f0:	6033      	strge	r3, [r6, #0]
 800e5f2:	9f03      	ldr	r7, [sp, #12]
 800e5f4:	4b98      	ldr	r3, [pc, #608]	@ (800e858 <_dtoa_r+0x2d0>)
 800e5f6:	bfbc      	itt	lt
 800e5f8:	2201      	movlt	r2, #1
 800e5fa:	6032      	strlt	r2, [r6, #0]
 800e5fc:	43bb      	bics	r3, r7
 800e5fe:	d112      	bne.n	800e626 <_dtoa_r+0x9e>
 800e600:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e602:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e606:	6013      	str	r3, [r2, #0]
 800e608:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e60c:	4323      	orrs	r3, r4
 800e60e:	f000 854d 	beq.w	800f0ac <_dtoa_r+0xb24>
 800e612:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e614:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e86c <_dtoa_r+0x2e4>
 800e618:	2b00      	cmp	r3, #0
 800e61a:	f000 854f 	beq.w	800f0bc <_dtoa_r+0xb34>
 800e61e:	f10a 0303 	add.w	r3, sl, #3
 800e622:	f000 bd49 	b.w	800f0b8 <_dtoa_r+0xb30>
 800e626:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e62a:	2200      	movs	r2, #0
 800e62c:	ec51 0b17 	vmov	r0, r1, d7
 800e630:	2300      	movs	r3, #0
 800e632:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e636:	f7f2 fa6f 	bl	8000b18 <__aeabi_dcmpeq>
 800e63a:	4680      	mov	r8, r0
 800e63c:	b158      	cbz	r0, 800e656 <_dtoa_r+0xce>
 800e63e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e640:	2301      	movs	r3, #1
 800e642:	6013      	str	r3, [r2, #0]
 800e644:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e646:	b113      	cbz	r3, 800e64e <_dtoa_r+0xc6>
 800e648:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e64a:	4b84      	ldr	r3, [pc, #528]	@ (800e85c <_dtoa_r+0x2d4>)
 800e64c:	6013      	str	r3, [r2, #0]
 800e64e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e870 <_dtoa_r+0x2e8>
 800e652:	f000 bd33 	b.w	800f0bc <_dtoa_r+0xb34>
 800e656:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e65a:	aa16      	add	r2, sp, #88	@ 0x58
 800e65c:	a917      	add	r1, sp, #92	@ 0x5c
 800e65e:	4658      	mov	r0, fp
 800e660:	f001 fa3a 	bl	800fad8 <__d2b>
 800e664:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e668:	4681      	mov	r9, r0
 800e66a:	2e00      	cmp	r6, #0
 800e66c:	d077      	beq.n	800e75e <_dtoa_r+0x1d6>
 800e66e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e670:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e67c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e680:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e684:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e688:	4619      	mov	r1, r3
 800e68a:	2200      	movs	r2, #0
 800e68c:	4b74      	ldr	r3, [pc, #464]	@ (800e860 <_dtoa_r+0x2d8>)
 800e68e:	f7f1 fe23 	bl	80002d8 <__aeabi_dsub>
 800e692:	a369      	add	r3, pc, #420	@ (adr r3, 800e838 <_dtoa_r+0x2b0>)
 800e694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e698:	f7f1 ffd6 	bl	8000648 <__aeabi_dmul>
 800e69c:	a368      	add	r3, pc, #416	@ (adr r3, 800e840 <_dtoa_r+0x2b8>)
 800e69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a2:	f7f1 fe1b 	bl	80002dc <__adddf3>
 800e6a6:	4604      	mov	r4, r0
 800e6a8:	4630      	mov	r0, r6
 800e6aa:	460d      	mov	r5, r1
 800e6ac:	f7f1 ff62 	bl	8000574 <__aeabi_i2d>
 800e6b0:	a365      	add	r3, pc, #404	@ (adr r3, 800e848 <_dtoa_r+0x2c0>)
 800e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b6:	f7f1 ffc7 	bl	8000648 <__aeabi_dmul>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	460b      	mov	r3, r1
 800e6be:	4620      	mov	r0, r4
 800e6c0:	4629      	mov	r1, r5
 800e6c2:	f7f1 fe0b 	bl	80002dc <__adddf3>
 800e6c6:	4604      	mov	r4, r0
 800e6c8:	460d      	mov	r5, r1
 800e6ca:	f7f2 fa6d 	bl	8000ba8 <__aeabi_d2iz>
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	4607      	mov	r7, r0
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	4629      	mov	r1, r5
 800e6d8:	f7f2 fa28 	bl	8000b2c <__aeabi_dcmplt>
 800e6dc:	b140      	cbz	r0, 800e6f0 <_dtoa_r+0x168>
 800e6de:	4638      	mov	r0, r7
 800e6e0:	f7f1 ff48 	bl	8000574 <__aeabi_i2d>
 800e6e4:	4622      	mov	r2, r4
 800e6e6:	462b      	mov	r3, r5
 800e6e8:	f7f2 fa16 	bl	8000b18 <__aeabi_dcmpeq>
 800e6ec:	b900      	cbnz	r0, 800e6f0 <_dtoa_r+0x168>
 800e6ee:	3f01      	subs	r7, #1
 800e6f0:	2f16      	cmp	r7, #22
 800e6f2:	d851      	bhi.n	800e798 <_dtoa_r+0x210>
 800e6f4:	4b5b      	ldr	r3, [pc, #364]	@ (800e864 <_dtoa_r+0x2dc>)
 800e6f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e702:	f7f2 fa13 	bl	8000b2c <__aeabi_dcmplt>
 800e706:	2800      	cmp	r0, #0
 800e708:	d048      	beq.n	800e79c <_dtoa_r+0x214>
 800e70a:	3f01      	subs	r7, #1
 800e70c:	2300      	movs	r3, #0
 800e70e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e710:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e712:	1b9b      	subs	r3, r3, r6
 800e714:	1e5a      	subs	r2, r3, #1
 800e716:	bf44      	itt	mi
 800e718:	f1c3 0801 	rsbmi	r8, r3, #1
 800e71c:	2300      	movmi	r3, #0
 800e71e:	9208      	str	r2, [sp, #32]
 800e720:	bf54      	ite	pl
 800e722:	f04f 0800 	movpl.w	r8, #0
 800e726:	9308      	strmi	r3, [sp, #32]
 800e728:	2f00      	cmp	r7, #0
 800e72a:	db39      	blt.n	800e7a0 <_dtoa_r+0x218>
 800e72c:	9b08      	ldr	r3, [sp, #32]
 800e72e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e730:	443b      	add	r3, r7
 800e732:	9308      	str	r3, [sp, #32]
 800e734:	2300      	movs	r3, #0
 800e736:	930a      	str	r3, [sp, #40]	@ 0x28
 800e738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e73a:	2b09      	cmp	r3, #9
 800e73c:	d864      	bhi.n	800e808 <_dtoa_r+0x280>
 800e73e:	2b05      	cmp	r3, #5
 800e740:	bfc4      	itt	gt
 800e742:	3b04      	subgt	r3, #4
 800e744:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e748:	f1a3 0302 	sub.w	r3, r3, #2
 800e74c:	bfcc      	ite	gt
 800e74e:	2400      	movgt	r4, #0
 800e750:	2401      	movle	r4, #1
 800e752:	2b03      	cmp	r3, #3
 800e754:	d863      	bhi.n	800e81e <_dtoa_r+0x296>
 800e756:	e8df f003 	tbb	[pc, r3]
 800e75a:	372a      	.short	0x372a
 800e75c:	5535      	.short	0x5535
 800e75e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e762:	441e      	add	r6, r3
 800e764:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e768:	2b20      	cmp	r3, #32
 800e76a:	bfc1      	itttt	gt
 800e76c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e770:	409f      	lslgt	r7, r3
 800e772:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e776:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e77a:	bfd6      	itet	le
 800e77c:	f1c3 0320 	rsble	r3, r3, #32
 800e780:	ea47 0003 	orrgt.w	r0, r7, r3
 800e784:	fa04 f003 	lslle.w	r0, r4, r3
 800e788:	f7f1 fee4 	bl	8000554 <__aeabi_ui2d>
 800e78c:	2201      	movs	r2, #1
 800e78e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e792:	3e01      	subs	r6, #1
 800e794:	9214      	str	r2, [sp, #80]	@ 0x50
 800e796:	e777      	b.n	800e688 <_dtoa_r+0x100>
 800e798:	2301      	movs	r3, #1
 800e79a:	e7b8      	b.n	800e70e <_dtoa_r+0x186>
 800e79c:	9012      	str	r0, [sp, #72]	@ 0x48
 800e79e:	e7b7      	b.n	800e710 <_dtoa_r+0x188>
 800e7a0:	427b      	negs	r3, r7
 800e7a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	eba8 0807 	sub.w	r8, r8, r7
 800e7aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e7ac:	e7c4      	b.n	800e738 <_dtoa_r+0x1b0>
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	dc35      	bgt.n	800e824 <_dtoa_r+0x29c>
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	9300      	str	r3, [sp, #0]
 800e7bc:	9307      	str	r3, [sp, #28]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e7c2:	e00b      	b.n	800e7dc <_dtoa_r+0x254>
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	e7f3      	b.n	800e7b0 <_dtoa_r+0x228>
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7ce:	18fb      	adds	r3, r7, r3
 800e7d0:	9300      	str	r3, [sp, #0]
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	9307      	str	r3, [sp, #28]
 800e7d8:	bfb8      	it	lt
 800e7da:	2301      	movlt	r3, #1
 800e7dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e7e0:	2100      	movs	r1, #0
 800e7e2:	2204      	movs	r2, #4
 800e7e4:	f102 0514 	add.w	r5, r2, #20
 800e7e8:	429d      	cmp	r5, r3
 800e7ea:	d91f      	bls.n	800e82c <_dtoa_r+0x2a4>
 800e7ec:	6041      	str	r1, [r0, #4]
 800e7ee:	4658      	mov	r0, fp
 800e7f0:	f000 fd8e 	bl	800f310 <_Balloc>
 800e7f4:	4682      	mov	sl, r0
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	d13c      	bne.n	800e874 <_dtoa_r+0x2ec>
 800e7fa:	4b1b      	ldr	r3, [pc, #108]	@ (800e868 <_dtoa_r+0x2e0>)
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	f240 11af 	movw	r1, #431	@ 0x1af
 800e802:	e6d8      	b.n	800e5b6 <_dtoa_r+0x2e>
 800e804:	2301      	movs	r3, #1
 800e806:	e7e0      	b.n	800e7ca <_dtoa_r+0x242>
 800e808:	2401      	movs	r4, #1
 800e80a:	2300      	movs	r3, #0
 800e80c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e80e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e810:	f04f 33ff 	mov.w	r3, #4294967295
 800e814:	9300      	str	r3, [sp, #0]
 800e816:	9307      	str	r3, [sp, #28]
 800e818:	2200      	movs	r2, #0
 800e81a:	2312      	movs	r3, #18
 800e81c:	e7d0      	b.n	800e7c0 <_dtoa_r+0x238>
 800e81e:	2301      	movs	r3, #1
 800e820:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e822:	e7f5      	b.n	800e810 <_dtoa_r+0x288>
 800e824:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	9307      	str	r3, [sp, #28]
 800e82a:	e7d7      	b.n	800e7dc <_dtoa_r+0x254>
 800e82c:	3101      	adds	r1, #1
 800e82e:	0052      	lsls	r2, r2, #1
 800e830:	e7d8      	b.n	800e7e4 <_dtoa_r+0x25c>
 800e832:	bf00      	nop
 800e834:	f3af 8000 	nop.w
 800e838:	636f4361 	.word	0x636f4361
 800e83c:	3fd287a7 	.word	0x3fd287a7
 800e840:	8b60c8b3 	.word	0x8b60c8b3
 800e844:	3fc68a28 	.word	0x3fc68a28
 800e848:	509f79fb 	.word	0x509f79fb
 800e84c:	3fd34413 	.word	0x3fd34413
 800e850:	08011e81 	.word	0x08011e81
 800e854:	08011e98 	.word	0x08011e98
 800e858:	7ff00000 	.word	0x7ff00000
 800e85c:	08011e4c 	.word	0x08011e4c
 800e860:	3ff80000 	.word	0x3ff80000
 800e864:	08011f90 	.word	0x08011f90
 800e868:	08011ef0 	.word	0x08011ef0
 800e86c:	08011e7d 	.word	0x08011e7d
 800e870:	08011e4b 	.word	0x08011e4b
 800e874:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e878:	6018      	str	r0, [r3, #0]
 800e87a:	9b07      	ldr	r3, [sp, #28]
 800e87c:	2b0e      	cmp	r3, #14
 800e87e:	f200 80a4 	bhi.w	800e9ca <_dtoa_r+0x442>
 800e882:	2c00      	cmp	r4, #0
 800e884:	f000 80a1 	beq.w	800e9ca <_dtoa_r+0x442>
 800e888:	2f00      	cmp	r7, #0
 800e88a:	dd33      	ble.n	800e8f4 <_dtoa_r+0x36c>
 800e88c:	4bad      	ldr	r3, [pc, #692]	@ (800eb44 <_dtoa_r+0x5bc>)
 800e88e:	f007 020f 	and.w	r2, r7, #15
 800e892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e896:	ed93 7b00 	vldr	d7, [r3]
 800e89a:	05f8      	lsls	r0, r7, #23
 800e89c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e8a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e8a4:	d516      	bpl.n	800e8d4 <_dtoa_r+0x34c>
 800e8a6:	4ba8      	ldr	r3, [pc, #672]	@ (800eb48 <_dtoa_r+0x5c0>)
 800e8a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e8ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8b0:	f7f1 fff4 	bl	800089c <__aeabi_ddiv>
 800e8b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8b8:	f004 040f 	and.w	r4, r4, #15
 800e8bc:	2603      	movs	r6, #3
 800e8be:	4da2      	ldr	r5, [pc, #648]	@ (800eb48 <_dtoa_r+0x5c0>)
 800e8c0:	b954      	cbnz	r4, 800e8d8 <_dtoa_r+0x350>
 800e8c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8ca:	f7f1 ffe7 	bl	800089c <__aeabi_ddiv>
 800e8ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8d2:	e028      	b.n	800e926 <_dtoa_r+0x39e>
 800e8d4:	2602      	movs	r6, #2
 800e8d6:	e7f2      	b.n	800e8be <_dtoa_r+0x336>
 800e8d8:	07e1      	lsls	r1, r4, #31
 800e8da:	d508      	bpl.n	800e8ee <_dtoa_r+0x366>
 800e8dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e8e4:	f7f1 feb0 	bl	8000648 <__aeabi_dmul>
 800e8e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8ec:	3601      	adds	r6, #1
 800e8ee:	1064      	asrs	r4, r4, #1
 800e8f0:	3508      	adds	r5, #8
 800e8f2:	e7e5      	b.n	800e8c0 <_dtoa_r+0x338>
 800e8f4:	f000 80d2 	beq.w	800ea9c <_dtoa_r+0x514>
 800e8f8:	427c      	negs	r4, r7
 800e8fa:	4b92      	ldr	r3, [pc, #584]	@ (800eb44 <_dtoa_r+0x5bc>)
 800e8fc:	4d92      	ldr	r5, [pc, #584]	@ (800eb48 <_dtoa_r+0x5c0>)
 800e8fe:	f004 020f 	and.w	r2, r4, #15
 800e902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e90e:	f7f1 fe9b 	bl	8000648 <__aeabi_dmul>
 800e912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e916:	1124      	asrs	r4, r4, #4
 800e918:	2300      	movs	r3, #0
 800e91a:	2602      	movs	r6, #2
 800e91c:	2c00      	cmp	r4, #0
 800e91e:	f040 80b2 	bne.w	800ea86 <_dtoa_r+0x4fe>
 800e922:	2b00      	cmp	r3, #0
 800e924:	d1d3      	bne.n	800e8ce <_dtoa_r+0x346>
 800e926:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e928:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	f000 80b7 	beq.w	800eaa0 <_dtoa_r+0x518>
 800e932:	4b86      	ldr	r3, [pc, #536]	@ (800eb4c <_dtoa_r+0x5c4>)
 800e934:	2200      	movs	r2, #0
 800e936:	4620      	mov	r0, r4
 800e938:	4629      	mov	r1, r5
 800e93a:	f7f2 f8f7 	bl	8000b2c <__aeabi_dcmplt>
 800e93e:	2800      	cmp	r0, #0
 800e940:	f000 80ae 	beq.w	800eaa0 <_dtoa_r+0x518>
 800e944:	9b07      	ldr	r3, [sp, #28]
 800e946:	2b00      	cmp	r3, #0
 800e948:	f000 80aa 	beq.w	800eaa0 <_dtoa_r+0x518>
 800e94c:	9b00      	ldr	r3, [sp, #0]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	dd37      	ble.n	800e9c2 <_dtoa_r+0x43a>
 800e952:	1e7b      	subs	r3, r7, #1
 800e954:	9304      	str	r3, [sp, #16]
 800e956:	4620      	mov	r0, r4
 800e958:	4b7d      	ldr	r3, [pc, #500]	@ (800eb50 <_dtoa_r+0x5c8>)
 800e95a:	2200      	movs	r2, #0
 800e95c:	4629      	mov	r1, r5
 800e95e:	f7f1 fe73 	bl	8000648 <__aeabi_dmul>
 800e962:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e966:	9c00      	ldr	r4, [sp, #0]
 800e968:	3601      	adds	r6, #1
 800e96a:	4630      	mov	r0, r6
 800e96c:	f7f1 fe02 	bl	8000574 <__aeabi_i2d>
 800e970:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e974:	f7f1 fe68 	bl	8000648 <__aeabi_dmul>
 800e978:	4b76      	ldr	r3, [pc, #472]	@ (800eb54 <_dtoa_r+0x5cc>)
 800e97a:	2200      	movs	r2, #0
 800e97c:	f7f1 fcae 	bl	80002dc <__adddf3>
 800e980:	4605      	mov	r5, r0
 800e982:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e986:	2c00      	cmp	r4, #0
 800e988:	f040 808d 	bne.w	800eaa6 <_dtoa_r+0x51e>
 800e98c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e990:	4b71      	ldr	r3, [pc, #452]	@ (800eb58 <_dtoa_r+0x5d0>)
 800e992:	2200      	movs	r2, #0
 800e994:	f7f1 fca0 	bl	80002d8 <__aeabi_dsub>
 800e998:	4602      	mov	r2, r0
 800e99a:	460b      	mov	r3, r1
 800e99c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e9a0:	462a      	mov	r2, r5
 800e9a2:	4633      	mov	r3, r6
 800e9a4:	f7f2 f8e0 	bl	8000b68 <__aeabi_dcmpgt>
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	f040 828b 	bne.w	800eec4 <_dtoa_r+0x93c>
 800e9ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9b2:	462a      	mov	r2, r5
 800e9b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e9b8:	f7f2 f8b8 	bl	8000b2c <__aeabi_dcmplt>
 800e9bc:	2800      	cmp	r0, #0
 800e9be:	f040 8128 	bne.w	800ec12 <_dtoa_r+0x68a>
 800e9c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e9c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e9ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	f2c0 815a 	blt.w	800ec86 <_dtoa_r+0x6fe>
 800e9d2:	2f0e      	cmp	r7, #14
 800e9d4:	f300 8157 	bgt.w	800ec86 <_dtoa_r+0x6fe>
 800e9d8:	4b5a      	ldr	r3, [pc, #360]	@ (800eb44 <_dtoa_r+0x5bc>)
 800e9da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e9de:	ed93 7b00 	vldr	d7, [r3]
 800e9e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	ed8d 7b00 	vstr	d7, [sp]
 800e9ea:	da03      	bge.n	800e9f4 <_dtoa_r+0x46c>
 800e9ec:	9b07      	ldr	r3, [sp, #28]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	f340 8101 	ble.w	800ebf6 <_dtoa_r+0x66e>
 800e9f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e9f8:	4656      	mov	r6, sl
 800e9fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9fe:	4620      	mov	r0, r4
 800ea00:	4629      	mov	r1, r5
 800ea02:	f7f1 ff4b 	bl	800089c <__aeabi_ddiv>
 800ea06:	f7f2 f8cf 	bl	8000ba8 <__aeabi_d2iz>
 800ea0a:	4680      	mov	r8, r0
 800ea0c:	f7f1 fdb2 	bl	8000574 <__aeabi_i2d>
 800ea10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea14:	f7f1 fe18 	bl	8000648 <__aeabi_dmul>
 800ea18:	4602      	mov	r2, r0
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	4629      	mov	r1, r5
 800ea20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ea24:	f7f1 fc58 	bl	80002d8 <__aeabi_dsub>
 800ea28:	f806 4b01 	strb.w	r4, [r6], #1
 800ea2c:	9d07      	ldr	r5, [sp, #28]
 800ea2e:	eba6 040a 	sub.w	r4, r6, sl
 800ea32:	42a5      	cmp	r5, r4
 800ea34:	4602      	mov	r2, r0
 800ea36:	460b      	mov	r3, r1
 800ea38:	f040 8117 	bne.w	800ec6a <_dtoa_r+0x6e2>
 800ea3c:	f7f1 fc4e 	bl	80002dc <__adddf3>
 800ea40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea44:	4604      	mov	r4, r0
 800ea46:	460d      	mov	r5, r1
 800ea48:	f7f2 f88e 	bl	8000b68 <__aeabi_dcmpgt>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	f040 80f9 	bne.w	800ec44 <_dtoa_r+0x6bc>
 800ea52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea56:	4620      	mov	r0, r4
 800ea58:	4629      	mov	r1, r5
 800ea5a:	f7f2 f85d 	bl	8000b18 <__aeabi_dcmpeq>
 800ea5e:	b118      	cbz	r0, 800ea68 <_dtoa_r+0x4e0>
 800ea60:	f018 0f01 	tst.w	r8, #1
 800ea64:	f040 80ee 	bne.w	800ec44 <_dtoa_r+0x6bc>
 800ea68:	4649      	mov	r1, r9
 800ea6a:	4658      	mov	r0, fp
 800ea6c:	f000 fc90 	bl	800f390 <_Bfree>
 800ea70:	2300      	movs	r3, #0
 800ea72:	7033      	strb	r3, [r6, #0]
 800ea74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ea76:	3701      	adds	r7, #1
 800ea78:	601f      	str	r7, [r3, #0]
 800ea7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	f000 831d 	beq.w	800f0bc <_dtoa_r+0xb34>
 800ea82:	601e      	str	r6, [r3, #0]
 800ea84:	e31a      	b.n	800f0bc <_dtoa_r+0xb34>
 800ea86:	07e2      	lsls	r2, r4, #31
 800ea88:	d505      	bpl.n	800ea96 <_dtoa_r+0x50e>
 800ea8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea8e:	f7f1 fddb 	bl	8000648 <__aeabi_dmul>
 800ea92:	3601      	adds	r6, #1
 800ea94:	2301      	movs	r3, #1
 800ea96:	1064      	asrs	r4, r4, #1
 800ea98:	3508      	adds	r5, #8
 800ea9a:	e73f      	b.n	800e91c <_dtoa_r+0x394>
 800ea9c:	2602      	movs	r6, #2
 800ea9e:	e742      	b.n	800e926 <_dtoa_r+0x39e>
 800eaa0:	9c07      	ldr	r4, [sp, #28]
 800eaa2:	9704      	str	r7, [sp, #16]
 800eaa4:	e761      	b.n	800e96a <_dtoa_r+0x3e2>
 800eaa6:	4b27      	ldr	r3, [pc, #156]	@ (800eb44 <_dtoa_r+0x5bc>)
 800eaa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eaaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eaae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eab2:	4454      	add	r4, sl
 800eab4:	2900      	cmp	r1, #0
 800eab6:	d053      	beq.n	800eb60 <_dtoa_r+0x5d8>
 800eab8:	4928      	ldr	r1, [pc, #160]	@ (800eb5c <_dtoa_r+0x5d4>)
 800eaba:	2000      	movs	r0, #0
 800eabc:	f7f1 feee 	bl	800089c <__aeabi_ddiv>
 800eac0:	4633      	mov	r3, r6
 800eac2:	462a      	mov	r2, r5
 800eac4:	f7f1 fc08 	bl	80002d8 <__aeabi_dsub>
 800eac8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eacc:	4656      	mov	r6, sl
 800eace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ead2:	f7f2 f869 	bl	8000ba8 <__aeabi_d2iz>
 800ead6:	4605      	mov	r5, r0
 800ead8:	f7f1 fd4c 	bl	8000574 <__aeabi_i2d>
 800eadc:	4602      	mov	r2, r0
 800eade:	460b      	mov	r3, r1
 800eae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eae4:	f7f1 fbf8 	bl	80002d8 <__aeabi_dsub>
 800eae8:	3530      	adds	r5, #48	@ 0x30
 800eaea:	4602      	mov	r2, r0
 800eaec:	460b      	mov	r3, r1
 800eaee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eaf2:	f806 5b01 	strb.w	r5, [r6], #1
 800eaf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eafa:	f7f2 f817 	bl	8000b2c <__aeabi_dcmplt>
 800eafe:	2800      	cmp	r0, #0
 800eb00:	d171      	bne.n	800ebe6 <_dtoa_r+0x65e>
 800eb02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb06:	4911      	ldr	r1, [pc, #68]	@ (800eb4c <_dtoa_r+0x5c4>)
 800eb08:	2000      	movs	r0, #0
 800eb0a:	f7f1 fbe5 	bl	80002d8 <__aeabi_dsub>
 800eb0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb12:	f7f2 f80b 	bl	8000b2c <__aeabi_dcmplt>
 800eb16:	2800      	cmp	r0, #0
 800eb18:	f040 8095 	bne.w	800ec46 <_dtoa_r+0x6be>
 800eb1c:	42a6      	cmp	r6, r4
 800eb1e:	f43f af50 	beq.w	800e9c2 <_dtoa_r+0x43a>
 800eb22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eb26:	4b0a      	ldr	r3, [pc, #40]	@ (800eb50 <_dtoa_r+0x5c8>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f7f1 fd8d 	bl	8000648 <__aeabi_dmul>
 800eb2e:	4b08      	ldr	r3, [pc, #32]	@ (800eb50 <_dtoa_r+0x5c8>)
 800eb30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb34:	2200      	movs	r2, #0
 800eb36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb3a:	f7f1 fd85 	bl	8000648 <__aeabi_dmul>
 800eb3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb42:	e7c4      	b.n	800eace <_dtoa_r+0x546>
 800eb44:	08011f90 	.word	0x08011f90
 800eb48:	08011f68 	.word	0x08011f68
 800eb4c:	3ff00000 	.word	0x3ff00000
 800eb50:	40240000 	.word	0x40240000
 800eb54:	401c0000 	.word	0x401c0000
 800eb58:	40140000 	.word	0x40140000
 800eb5c:	3fe00000 	.word	0x3fe00000
 800eb60:	4631      	mov	r1, r6
 800eb62:	4628      	mov	r0, r5
 800eb64:	f7f1 fd70 	bl	8000648 <__aeabi_dmul>
 800eb68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb6c:	9415      	str	r4, [sp, #84]	@ 0x54
 800eb6e:	4656      	mov	r6, sl
 800eb70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb74:	f7f2 f818 	bl	8000ba8 <__aeabi_d2iz>
 800eb78:	4605      	mov	r5, r0
 800eb7a:	f7f1 fcfb 	bl	8000574 <__aeabi_i2d>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	460b      	mov	r3, r1
 800eb82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb86:	f7f1 fba7 	bl	80002d8 <__aeabi_dsub>
 800eb8a:	3530      	adds	r5, #48	@ 0x30
 800eb8c:	f806 5b01 	strb.w	r5, [r6], #1
 800eb90:	4602      	mov	r2, r0
 800eb92:	460b      	mov	r3, r1
 800eb94:	42a6      	cmp	r6, r4
 800eb96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eb9a:	f04f 0200 	mov.w	r2, #0
 800eb9e:	d124      	bne.n	800ebea <_dtoa_r+0x662>
 800eba0:	4bac      	ldr	r3, [pc, #688]	@ (800ee54 <_dtoa_r+0x8cc>)
 800eba2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eba6:	f7f1 fb99 	bl	80002dc <__adddf3>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	460b      	mov	r3, r1
 800ebae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebb2:	f7f1 ffd9 	bl	8000b68 <__aeabi_dcmpgt>
 800ebb6:	2800      	cmp	r0, #0
 800ebb8:	d145      	bne.n	800ec46 <_dtoa_r+0x6be>
 800ebba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ebbe:	49a5      	ldr	r1, [pc, #660]	@ (800ee54 <_dtoa_r+0x8cc>)
 800ebc0:	2000      	movs	r0, #0
 800ebc2:	f7f1 fb89 	bl	80002d8 <__aeabi_dsub>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	460b      	mov	r3, r1
 800ebca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebce:	f7f1 ffad 	bl	8000b2c <__aeabi_dcmplt>
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	f43f aef5 	beq.w	800e9c2 <_dtoa_r+0x43a>
 800ebd8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ebda:	1e73      	subs	r3, r6, #1
 800ebdc:	9315      	str	r3, [sp, #84]	@ 0x54
 800ebde:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ebe2:	2b30      	cmp	r3, #48	@ 0x30
 800ebe4:	d0f8      	beq.n	800ebd8 <_dtoa_r+0x650>
 800ebe6:	9f04      	ldr	r7, [sp, #16]
 800ebe8:	e73e      	b.n	800ea68 <_dtoa_r+0x4e0>
 800ebea:	4b9b      	ldr	r3, [pc, #620]	@ (800ee58 <_dtoa_r+0x8d0>)
 800ebec:	f7f1 fd2c 	bl	8000648 <__aeabi_dmul>
 800ebf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebf4:	e7bc      	b.n	800eb70 <_dtoa_r+0x5e8>
 800ebf6:	d10c      	bne.n	800ec12 <_dtoa_r+0x68a>
 800ebf8:	4b98      	ldr	r3, [pc, #608]	@ (800ee5c <_dtoa_r+0x8d4>)
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec00:	f7f1 fd22 	bl	8000648 <__aeabi_dmul>
 800ec04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec08:	f7f1 ffa4 	bl	8000b54 <__aeabi_dcmpge>
 800ec0c:	2800      	cmp	r0, #0
 800ec0e:	f000 8157 	beq.w	800eec0 <_dtoa_r+0x938>
 800ec12:	2400      	movs	r4, #0
 800ec14:	4625      	mov	r5, r4
 800ec16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec18:	43db      	mvns	r3, r3
 800ec1a:	9304      	str	r3, [sp, #16]
 800ec1c:	4656      	mov	r6, sl
 800ec1e:	2700      	movs	r7, #0
 800ec20:	4621      	mov	r1, r4
 800ec22:	4658      	mov	r0, fp
 800ec24:	f000 fbb4 	bl	800f390 <_Bfree>
 800ec28:	2d00      	cmp	r5, #0
 800ec2a:	d0dc      	beq.n	800ebe6 <_dtoa_r+0x65e>
 800ec2c:	b12f      	cbz	r7, 800ec3a <_dtoa_r+0x6b2>
 800ec2e:	42af      	cmp	r7, r5
 800ec30:	d003      	beq.n	800ec3a <_dtoa_r+0x6b2>
 800ec32:	4639      	mov	r1, r7
 800ec34:	4658      	mov	r0, fp
 800ec36:	f000 fbab 	bl	800f390 <_Bfree>
 800ec3a:	4629      	mov	r1, r5
 800ec3c:	4658      	mov	r0, fp
 800ec3e:	f000 fba7 	bl	800f390 <_Bfree>
 800ec42:	e7d0      	b.n	800ebe6 <_dtoa_r+0x65e>
 800ec44:	9704      	str	r7, [sp, #16]
 800ec46:	4633      	mov	r3, r6
 800ec48:	461e      	mov	r6, r3
 800ec4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec4e:	2a39      	cmp	r2, #57	@ 0x39
 800ec50:	d107      	bne.n	800ec62 <_dtoa_r+0x6da>
 800ec52:	459a      	cmp	sl, r3
 800ec54:	d1f8      	bne.n	800ec48 <_dtoa_r+0x6c0>
 800ec56:	9a04      	ldr	r2, [sp, #16]
 800ec58:	3201      	adds	r2, #1
 800ec5a:	9204      	str	r2, [sp, #16]
 800ec5c:	2230      	movs	r2, #48	@ 0x30
 800ec5e:	f88a 2000 	strb.w	r2, [sl]
 800ec62:	781a      	ldrb	r2, [r3, #0]
 800ec64:	3201      	adds	r2, #1
 800ec66:	701a      	strb	r2, [r3, #0]
 800ec68:	e7bd      	b.n	800ebe6 <_dtoa_r+0x65e>
 800ec6a:	4b7b      	ldr	r3, [pc, #492]	@ (800ee58 <_dtoa_r+0x8d0>)
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	f7f1 fceb 	bl	8000648 <__aeabi_dmul>
 800ec72:	2200      	movs	r2, #0
 800ec74:	2300      	movs	r3, #0
 800ec76:	4604      	mov	r4, r0
 800ec78:	460d      	mov	r5, r1
 800ec7a:	f7f1 ff4d 	bl	8000b18 <__aeabi_dcmpeq>
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	f43f aebb 	beq.w	800e9fa <_dtoa_r+0x472>
 800ec84:	e6f0      	b.n	800ea68 <_dtoa_r+0x4e0>
 800ec86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ec88:	2a00      	cmp	r2, #0
 800ec8a:	f000 80db 	beq.w	800ee44 <_dtoa_r+0x8bc>
 800ec8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec90:	2a01      	cmp	r2, #1
 800ec92:	f300 80bf 	bgt.w	800ee14 <_dtoa_r+0x88c>
 800ec96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ec98:	2a00      	cmp	r2, #0
 800ec9a:	f000 80b7 	beq.w	800ee0c <_dtoa_r+0x884>
 800ec9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800eca2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800eca4:	4646      	mov	r6, r8
 800eca6:	9a08      	ldr	r2, [sp, #32]
 800eca8:	2101      	movs	r1, #1
 800ecaa:	441a      	add	r2, r3
 800ecac:	4658      	mov	r0, fp
 800ecae:	4498      	add	r8, r3
 800ecb0:	9208      	str	r2, [sp, #32]
 800ecb2:	f000 fc6b 	bl	800f58c <__i2b>
 800ecb6:	4605      	mov	r5, r0
 800ecb8:	b15e      	cbz	r6, 800ecd2 <_dtoa_r+0x74a>
 800ecba:	9b08      	ldr	r3, [sp, #32]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	dd08      	ble.n	800ecd2 <_dtoa_r+0x74a>
 800ecc0:	42b3      	cmp	r3, r6
 800ecc2:	9a08      	ldr	r2, [sp, #32]
 800ecc4:	bfa8      	it	ge
 800ecc6:	4633      	movge	r3, r6
 800ecc8:	eba8 0803 	sub.w	r8, r8, r3
 800eccc:	1af6      	subs	r6, r6, r3
 800ecce:	1ad3      	subs	r3, r2, r3
 800ecd0:	9308      	str	r3, [sp, #32]
 800ecd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ecd4:	b1f3      	cbz	r3, 800ed14 <_dtoa_r+0x78c>
 800ecd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	f000 80b7 	beq.w	800ee4c <_dtoa_r+0x8c4>
 800ecde:	b18c      	cbz	r4, 800ed04 <_dtoa_r+0x77c>
 800ece0:	4629      	mov	r1, r5
 800ece2:	4622      	mov	r2, r4
 800ece4:	4658      	mov	r0, fp
 800ece6:	f000 fd11 	bl	800f70c <__pow5mult>
 800ecea:	464a      	mov	r2, r9
 800ecec:	4601      	mov	r1, r0
 800ecee:	4605      	mov	r5, r0
 800ecf0:	4658      	mov	r0, fp
 800ecf2:	f000 fc61 	bl	800f5b8 <__multiply>
 800ecf6:	4649      	mov	r1, r9
 800ecf8:	9004      	str	r0, [sp, #16]
 800ecfa:	4658      	mov	r0, fp
 800ecfc:	f000 fb48 	bl	800f390 <_Bfree>
 800ed00:	9b04      	ldr	r3, [sp, #16]
 800ed02:	4699      	mov	r9, r3
 800ed04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed06:	1b1a      	subs	r2, r3, r4
 800ed08:	d004      	beq.n	800ed14 <_dtoa_r+0x78c>
 800ed0a:	4649      	mov	r1, r9
 800ed0c:	4658      	mov	r0, fp
 800ed0e:	f000 fcfd 	bl	800f70c <__pow5mult>
 800ed12:	4681      	mov	r9, r0
 800ed14:	2101      	movs	r1, #1
 800ed16:	4658      	mov	r0, fp
 800ed18:	f000 fc38 	bl	800f58c <__i2b>
 800ed1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed1e:	4604      	mov	r4, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	f000 81cf 	beq.w	800f0c4 <_dtoa_r+0xb3c>
 800ed26:	461a      	mov	r2, r3
 800ed28:	4601      	mov	r1, r0
 800ed2a:	4658      	mov	r0, fp
 800ed2c:	f000 fcee 	bl	800f70c <__pow5mult>
 800ed30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	4604      	mov	r4, r0
 800ed36:	f300 8095 	bgt.w	800ee64 <_dtoa_r+0x8dc>
 800ed3a:	9b02      	ldr	r3, [sp, #8]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f040 8087 	bne.w	800ee50 <_dtoa_r+0x8c8>
 800ed42:	9b03      	ldr	r3, [sp, #12]
 800ed44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	f040 8089 	bne.w	800ee60 <_dtoa_r+0x8d8>
 800ed4e:	9b03      	ldr	r3, [sp, #12]
 800ed50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed54:	0d1b      	lsrs	r3, r3, #20
 800ed56:	051b      	lsls	r3, r3, #20
 800ed58:	b12b      	cbz	r3, 800ed66 <_dtoa_r+0x7de>
 800ed5a:	9b08      	ldr	r3, [sp, #32]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	9308      	str	r3, [sp, #32]
 800ed60:	f108 0801 	add.w	r8, r8, #1
 800ed64:	2301      	movs	r3, #1
 800ed66:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f000 81b0 	beq.w	800f0d0 <_dtoa_r+0xb48>
 800ed70:	6923      	ldr	r3, [r4, #16]
 800ed72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed76:	6918      	ldr	r0, [r3, #16]
 800ed78:	f000 fbbc 	bl	800f4f4 <__hi0bits>
 800ed7c:	f1c0 0020 	rsb	r0, r0, #32
 800ed80:	9b08      	ldr	r3, [sp, #32]
 800ed82:	4418      	add	r0, r3
 800ed84:	f010 001f 	ands.w	r0, r0, #31
 800ed88:	d077      	beq.n	800ee7a <_dtoa_r+0x8f2>
 800ed8a:	f1c0 0320 	rsb	r3, r0, #32
 800ed8e:	2b04      	cmp	r3, #4
 800ed90:	dd6b      	ble.n	800ee6a <_dtoa_r+0x8e2>
 800ed92:	9b08      	ldr	r3, [sp, #32]
 800ed94:	f1c0 001c 	rsb	r0, r0, #28
 800ed98:	4403      	add	r3, r0
 800ed9a:	4480      	add	r8, r0
 800ed9c:	4406      	add	r6, r0
 800ed9e:	9308      	str	r3, [sp, #32]
 800eda0:	f1b8 0f00 	cmp.w	r8, #0
 800eda4:	dd05      	ble.n	800edb2 <_dtoa_r+0x82a>
 800eda6:	4649      	mov	r1, r9
 800eda8:	4642      	mov	r2, r8
 800edaa:	4658      	mov	r0, fp
 800edac:	f000 fd08 	bl	800f7c0 <__lshift>
 800edb0:	4681      	mov	r9, r0
 800edb2:	9b08      	ldr	r3, [sp, #32]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	dd05      	ble.n	800edc4 <_dtoa_r+0x83c>
 800edb8:	4621      	mov	r1, r4
 800edba:	461a      	mov	r2, r3
 800edbc:	4658      	mov	r0, fp
 800edbe:	f000 fcff 	bl	800f7c0 <__lshift>
 800edc2:	4604      	mov	r4, r0
 800edc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d059      	beq.n	800ee7e <_dtoa_r+0x8f6>
 800edca:	4621      	mov	r1, r4
 800edcc:	4648      	mov	r0, r9
 800edce:	f000 fd63 	bl	800f898 <__mcmp>
 800edd2:	2800      	cmp	r0, #0
 800edd4:	da53      	bge.n	800ee7e <_dtoa_r+0x8f6>
 800edd6:	1e7b      	subs	r3, r7, #1
 800edd8:	9304      	str	r3, [sp, #16]
 800edda:	4649      	mov	r1, r9
 800eddc:	2300      	movs	r3, #0
 800edde:	220a      	movs	r2, #10
 800ede0:	4658      	mov	r0, fp
 800ede2:	f000 faf7 	bl	800f3d4 <__multadd>
 800ede6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ede8:	4681      	mov	r9, r0
 800edea:	2b00      	cmp	r3, #0
 800edec:	f000 8172 	beq.w	800f0d4 <_dtoa_r+0xb4c>
 800edf0:	2300      	movs	r3, #0
 800edf2:	4629      	mov	r1, r5
 800edf4:	220a      	movs	r2, #10
 800edf6:	4658      	mov	r0, fp
 800edf8:	f000 faec 	bl	800f3d4 <__multadd>
 800edfc:	9b00      	ldr	r3, [sp, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	4605      	mov	r5, r0
 800ee02:	dc67      	bgt.n	800eed4 <_dtoa_r+0x94c>
 800ee04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee06:	2b02      	cmp	r3, #2
 800ee08:	dc41      	bgt.n	800ee8e <_dtoa_r+0x906>
 800ee0a:	e063      	b.n	800eed4 <_dtoa_r+0x94c>
 800ee0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ee0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ee12:	e746      	b.n	800eca2 <_dtoa_r+0x71a>
 800ee14:	9b07      	ldr	r3, [sp, #28]
 800ee16:	1e5c      	subs	r4, r3, #1
 800ee18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee1a:	42a3      	cmp	r3, r4
 800ee1c:	bfbf      	itttt	lt
 800ee1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ee20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ee22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ee24:	1ae3      	sublt	r3, r4, r3
 800ee26:	bfb4      	ite	lt
 800ee28:	18d2      	addlt	r2, r2, r3
 800ee2a:	1b1c      	subge	r4, r3, r4
 800ee2c:	9b07      	ldr	r3, [sp, #28]
 800ee2e:	bfbc      	itt	lt
 800ee30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ee32:	2400      	movlt	r4, #0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	bfb5      	itete	lt
 800ee38:	eba8 0603 	sublt.w	r6, r8, r3
 800ee3c:	9b07      	ldrge	r3, [sp, #28]
 800ee3e:	2300      	movlt	r3, #0
 800ee40:	4646      	movge	r6, r8
 800ee42:	e730      	b.n	800eca6 <_dtoa_r+0x71e>
 800ee44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ee46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ee48:	4646      	mov	r6, r8
 800ee4a:	e735      	b.n	800ecb8 <_dtoa_r+0x730>
 800ee4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee4e:	e75c      	b.n	800ed0a <_dtoa_r+0x782>
 800ee50:	2300      	movs	r3, #0
 800ee52:	e788      	b.n	800ed66 <_dtoa_r+0x7de>
 800ee54:	3fe00000 	.word	0x3fe00000
 800ee58:	40240000 	.word	0x40240000
 800ee5c:	40140000 	.word	0x40140000
 800ee60:	9b02      	ldr	r3, [sp, #8]
 800ee62:	e780      	b.n	800ed66 <_dtoa_r+0x7de>
 800ee64:	2300      	movs	r3, #0
 800ee66:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee68:	e782      	b.n	800ed70 <_dtoa_r+0x7e8>
 800ee6a:	d099      	beq.n	800eda0 <_dtoa_r+0x818>
 800ee6c:	9a08      	ldr	r2, [sp, #32]
 800ee6e:	331c      	adds	r3, #28
 800ee70:	441a      	add	r2, r3
 800ee72:	4498      	add	r8, r3
 800ee74:	441e      	add	r6, r3
 800ee76:	9208      	str	r2, [sp, #32]
 800ee78:	e792      	b.n	800eda0 <_dtoa_r+0x818>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	e7f6      	b.n	800ee6c <_dtoa_r+0x8e4>
 800ee7e:	9b07      	ldr	r3, [sp, #28]
 800ee80:	9704      	str	r7, [sp, #16]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	dc20      	bgt.n	800eec8 <_dtoa_r+0x940>
 800ee86:	9300      	str	r3, [sp, #0]
 800ee88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee8a:	2b02      	cmp	r3, #2
 800ee8c:	dd1e      	ble.n	800eecc <_dtoa_r+0x944>
 800ee8e:	9b00      	ldr	r3, [sp, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	f47f aec0 	bne.w	800ec16 <_dtoa_r+0x68e>
 800ee96:	4621      	mov	r1, r4
 800ee98:	2205      	movs	r2, #5
 800ee9a:	4658      	mov	r0, fp
 800ee9c:	f000 fa9a 	bl	800f3d4 <__multadd>
 800eea0:	4601      	mov	r1, r0
 800eea2:	4604      	mov	r4, r0
 800eea4:	4648      	mov	r0, r9
 800eea6:	f000 fcf7 	bl	800f898 <__mcmp>
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	f77f aeb3 	ble.w	800ec16 <_dtoa_r+0x68e>
 800eeb0:	4656      	mov	r6, sl
 800eeb2:	2331      	movs	r3, #49	@ 0x31
 800eeb4:	f806 3b01 	strb.w	r3, [r6], #1
 800eeb8:	9b04      	ldr	r3, [sp, #16]
 800eeba:	3301      	adds	r3, #1
 800eebc:	9304      	str	r3, [sp, #16]
 800eebe:	e6ae      	b.n	800ec1e <_dtoa_r+0x696>
 800eec0:	9c07      	ldr	r4, [sp, #28]
 800eec2:	9704      	str	r7, [sp, #16]
 800eec4:	4625      	mov	r5, r4
 800eec6:	e7f3      	b.n	800eeb0 <_dtoa_r+0x928>
 800eec8:	9b07      	ldr	r3, [sp, #28]
 800eeca:	9300      	str	r3, [sp, #0]
 800eecc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eece:	2b00      	cmp	r3, #0
 800eed0:	f000 8104 	beq.w	800f0dc <_dtoa_r+0xb54>
 800eed4:	2e00      	cmp	r6, #0
 800eed6:	dd05      	ble.n	800eee4 <_dtoa_r+0x95c>
 800eed8:	4629      	mov	r1, r5
 800eeda:	4632      	mov	r2, r6
 800eedc:	4658      	mov	r0, fp
 800eede:	f000 fc6f 	bl	800f7c0 <__lshift>
 800eee2:	4605      	mov	r5, r0
 800eee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d05a      	beq.n	800efa0 <_dtoa_r+0xa18>
 800eeea:	6869      	ldr	r1, [r5, #4]
 800eeec:	4658      	mov	r0, fp
 800eeee:	f000 fa0f 	bl	800f310 <_Balloc>
 800eef2:	4606      	mov	r6, r0
 800eef4:	b928      	cbnz	r0, 800ef02 <_dtoa_r+0x97a>
 800eef6:	4b84      	ldr	r3, [pc, #528]	@ (800f108 <_dtoa_r+0xb80>)
 800eef8:	4602      	mov	r2, r0
 800eefa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eefe:	f7ff bb5a 	b.w	800e5b6 <_dtoa_r+0x2e>
 800ef02:	692a      	ldr	r2, [r5, #16]
 800ef04:	3202      	adds	r2, #2
 800ef06:	0092      	lsls	r2, r2, #2
 800ef08:	f105 010c 	add.w	r1, r5, #12
 800ef0c:	300c      	adds	r0, #12
 800ef0e:	f001 ff75 	bl	8010dfc <memcpy>
 800ef12:	2201      	movs	r2, #1
 800ef14:	4631      	mov	r1, r6
 800ef16:	4658      	mov	r0, fp
 800ef18:	f000 fc52 	bl	800f7c0 <__lshift>
 800ef1c:	f10a 0301 	add.w	r3, sl, #1
 800ef20:	9307      	str	r3, [sp, #28]
 800ef22:	9b00      	ldr	r3, [sp, #0]
 800ef24:	4453      	add	r3, sl
 800ef26:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef28:	9b02      	ldr	r3, [sp, #8]
 800ef2a:	f003 0301 	and.w	r3, r3, #1
 800ef2e:	462f      	mov	r7, r5
 800ef30:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef32:	4605      	mov	r5, r0
 800ef34:	9b07      	ldr	r3, [sp, #28]
 800ef36:	4621      	mov	r1, r4
 800ef38:	3b01      	subs	r3, #1
 800ef3a:	4648      	mov	r0, r9
 800ef3c:	9300      	str	r3, [sp, #0]
 800ef3e:	f7ff fa9b 	bl	800e478 <quorem>
 800ef42:	4639      	mov	r1, r7
 800ef44:	9002      	str	r0, [sp, #8]
 800ef46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ef4a:	4648      	mov	r0, r9
 800ef4c:	f000 fca4 	bl	800f898 <__mcmp>
 800ef50:	462a      	mov	r2, r5
 800ef52:	9008      	str	r0, [sp, #32]
 800ef54:	4621      	mov	r1, r4
 800ef56:	4658      	mov	r0, fp
 800ef58:	f000 fcba 	bl	800f8d0 <__mdiff>
 800ef5c:	68c2      	ldr	r2, [r0, #12]
 800ef5e:	4606      	mov	r6, r0
 800ef60:	bb02      	cbnz	r2, 800efa4 <_dtoa_r+0xa1c>
 800ef62:	4601      	mov	r1, r0
 800ef64:	4648      	mov	r0, r9
 800ef66:	f000 fc97 	bl	800f898 <__mcmp>
 800ef6a:	4602      	mov	r2, r0
 800ef6c:	4631      	mov	r1, r6
 800ef6e:	4658      	mov	r0, fp
 800ef70:	920e      	str	r2, [sp, #56]	@ 0x38
 800ef72:	f000 fa0d 	bl	800f390 <_Bfree>
 800ef76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef7a:	9e07      	ldr	r6, [sp, #28]
 800ef7c:	ea43 0102 	orr.w	r1, r3, r2
 800ef80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef82:	4319      	orrs	r1, r3
 800ef84:	d110      	bne.n	800efa8 <_dtoa_r+0xa20>
 800ef86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ef8a:	d029      	beq.n	800efe0 <_dtoa_r+0xa58>
 800ef8c:	9b08      	ldr	r3, [sp, #32]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	dd02      	ble.n	800ef98 <_dtoa_r+0xa10>
 800ef92:	9b02      	ldr	r3, [sp, #8]
 800ef94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ef98:	9b00      	ldr	r3, [sp, #0]
 800ef9a:	f883 8000 	strb.w	r8, [r3]
 800ef9e:	e63f      	b.n	800ec20 <_dtoa_r+0x698>
 800efa0:	4628      	mov	r0, r5
 800efa2:	e7bb      	b.n	800ef1c <_dtoa_r+0x994>
 800efa4:	2201      	movs	r2, #1
 800efa6:	e7e1      	b.n	800ef6c <_dtoa_r+0x9e4>
 800efa8:	9b08      	ldr	r3, [sp, #32]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	db04      	blt.n	800efb8 <_dtoa_r+0xa30>
 800efae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800efb0:	430b      	orrs	r3, r1
 800efb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800efb4:	430b      	orrs	r3, r1
 800efb6:	d120      	bne.n	800effa <_dtoa_r+0xa72>
 800efb8:	2a00      	cmp	r2, #0
 800efba:	dded      	ble.n	800ef98 <_dtoa_r+0xa10>
 800efbc:	4649      	mov	r1, r9
 800efbe:	2201      	movs	r2, #1
 800efc0:	4658      	mov	r0, fp
 800efc2:	f000 fbfd 	bl	800f7c0 <__lshift>
 800efc6:	4621      	mov	r1, r4
 800efc8:	4681      	mov	r9, r0
 800efca:	f000 fc65 	bl	800f898 <__mcmp>
 800efce:	2800      	cmp	r0, #0
 800efd0:	dc03      	bgt.n	800efda <_dtoa_r+0xa52>
 800efd2:	d1e1      	bne.n	800ef98 <_dtoa_r+0xa10>
 800efd4:	f018 0f01 	tst.w	r8, #1
 800efd8:	d0de      	beq.n	800ef98 <_dtoa_r+0xa10>
 800efda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800efde:	d1d8      	bne.n	800ef92 <_dtoa_r+0xa0a>
 800efe0:	9a00      	ldr	r2, [sp, #0]
 800efe2:	2339      	movs	r3, #57	@ 0x39
 800efe4:	7013      	strb	r3, [r2, #0]
 800efe6:	4633      	mov	r3, r6
 800efe8:	461e      	mov	r6, r3
 800efea:	3b01      	subs	r3, #1
 800efec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800eff0:	2a39      	cmp	r2, #57	@ 0x39
 800eff2:	d052      	beq.n	800f09a <_dtoa_r+0xb12>
 800eff4:	3201      	adds	r2, #1
 800eff6:	701a      	strb	r2, [r3, #0]
 800eff8:	e612      	b.n	800ec20 <_dtoa_r+0x698>
 800effa:	2a00      	cmp	r2, #0
 800effc:	dd07      	ble.n	800f00e <_dtoa_r+0xa86>
 800effe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f002:	d0ed      	beq.n	800efe0 <_dtoa_r+0xa58>
 800f004:	9a00      	ldr	r2, [sp, #0]
 800f006:	f108 0301 	add.w	r3, r8, #1
 800f00a:	7013      	strb	r3, [r2, #0]
 800f00c:	e608      	b.n	800ec20 <_dtoa_r+0x698>
 800f00e:	9b07      	ldr	r3, [sp, #28]
 800f010:	9a07      	ldr	r2, [sp, #28]
 800f012:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f016:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f018:	4293      	cmp	r3, r2
 800f01a:	d028      	beq.n	800f06e <_dtoa_r+0xae6>
 800f01c:	4649      	mov	r1, r9
 800f01e:	2300      	movs	r3, #0
 800f020:	220a      	movs	r2, #10
 800f022:	4658      	mov	r0, fp
 800f024:	f000 f9d6 	bl	800f3d4 <__multadd>
 800f028:	42af      	cmp	r7, r5
 800f02a:	4681      	mov	r9, r0
 800f02c:	f04f 0300 	mov.w	r3, #0
 800f030:	f04f 020a 	mov.w	r2, #10
 800f034:	4639      	mov	r1, r7
 800f036:	4658      	mov	r0, fp
 800f038:	d107      	bne.n	800f04a <_dtoa_r+0xac2>
 800f03a:	f000 f9cb 	bl	800f3d4 <__multadd>
 800f03e:	4607      	mov	r7, r0
 800f040:	4605      	mov	r5, r0
 800f042:	9b07      	ldr	r3, [sp, #28]
 800f044:	3301      	adds	r3, #1
 800f046:	9307      	str	r3, [sp, #28]
 800f048:	e774      	b.n	800ef34 <_dtoa_r+0x9ac>
 800f04a:	f000 f9c3 	bl	800f3d4 <__multadd>
 800f04e:	4629      	mov	r1, r5
 800f050:	4607      	mov	r7, r0
 800f052:	2300      	movs	r3, #0
 800f054:	220a      	movs	r2, #10
 800f056:	4658      	mov	r0, fp
 800f058:	f000 f9bc 	bl	800f3d4 <__multadd>
 800f05c:	4605      	mov	r5, r0
 800f05e:	e7f0      	b.n	800f042 <_dtoa_r+0xaba>
 800f060:	9b00      	ldr	r3, [sp, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	bfcc      	ite	gt
 800f066:	461e      	movgt	r6, r3
 800f068:	2601      	movle	r6, #1
 800f06a:	4456      	add	r6, sl
 800f06c:	2700      	movs	r7, #0
 800f06e:	4649      	mov	r1, r9
 800f070:	2201      	movs	r2, #1
 800f072:	4658      	mov	r0, fp
 800f074:	f000 fba4 	bl	800f7c0 <__lshift>
 800f078:	4621      	mov	r1, r4
 800f07a:	4681      	mov	r9, r0
 800f07c:	f000 fc0c 	bl	800f898 <__mcmp>
 800f080:	2800      	cmp	r0, #0
 800f082:	dcb0      	bgt.n	800efe6 <_dtoa_r+0xa5e>
 800f084:	d102      	bne.n	800f08c <_dtoa_r+0xb04>
 800f086:	f018 0f01 	tst.w	r8, #1
 800f08a:	d1ac      	bne.n	800efe6 <_dtoa_r+0xa5e>
 800f08c:	4633      	mov	r3, r6
 800f08e:	461e      	mov	r6, r3
 800f090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f094:	2a30      	cmp	r2, #48	@ 0x30
 800f096:	d0fa      	beq.n	800f08e <_dtoa_r+0xb06>
 800f098:	e5c2      	b.n	800ec20 <_dtoa_r+0x698>
 800f09a:	459a      	cmp	sl, r3
 800f09c:	d1a4      	bne.n	800efe8 <_dtoa_r+0xa60>
 800f09e:	9b04      	ldr	r3, [sp, #16]
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	9304      	str	r3, [sp, #16]
 800f0a4:	2331      	movs	r3, #49	@ 0x31
 800f0a6:	f88a 3000 	strb.w	r3, [sl]
 800f0aa:	e5b9      	b.n	800ec20 <_dtoa_r+0x698>
 800f0ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f0ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f10c <_dtoa_r+0xb84>
 800f0b2:	b11b      	cbz	r3, 800f0bc <_dtoa_r+0xb34>
 800f0b4:	f10a 0308 	add.w	r3, sl, #8
 800f0b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f0ba:	6013      	str	r3, [r2, #0]
 800f0bc:	4650      	mov	r0, sl
 800f0be:	b019      	add	sp, #100	@ 0x64
 800f0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	f77f ae37 	ble.w	800ed3a <_dtoa_r+0x7b2>
 800f0cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0d0:	2001      	movs	r0, #1
 800f0d2:	e655      	b.n	800ed80 <_dtoa_r+0x7f8>
 800f0d4:	9b00      	ldr	r3, [sp, #0]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	f77f aed6 	ble.w	800ee88 <_dtoa_r+0x900>
 800f0dc:	4656      	mov	r6, sl
 800f0de:	4621      	mov	r1, r4
 800f0e0:	4648      	mov	r0, r9
 800f0e2:	f7ff f9c9 	bl	800e478 <quorem>
 800f0e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f0ea:	f806 8b01 	strb.w	r8, [r6], #1
 800f0ee:	9b00      	ldr	r3, [sp, #0]
 800f0f0:	eba6 020a 	sub.w	r2, r6, sl
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	ddb3      	ble.n	800f060 <_dtoa_r+0xad8>
 800f0f8:	4649      	mov	r1, r9
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	220a      	movs	r2, #10
 800f0fe:	4658      	mov	r0, fp
 800f100:	f000 f968 	bl	800f3d4 <__multadd>
 800f104:	4681      	mov	r9, r0
 800f106:	e7ea      	b.n	800f0de <_dtoa_r+0xb56>
 800f108:	08011ef0 	.word	0x08011ef0
 800f10c:	08011e74 	.word	0x08011e74

0800f110 <_free_r>:
 800f110:	b538      	push	{r3, r4, r5, lr}
 800f112:	4605      	mov	r5, r0
 800f114:	2900      	cmp	r1, #0
 800f116:	d041      	beq.n	800f19c <_free_r+0x8c>
 800f118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f11c:	1f0c      	subs	r4, r1, #4
 800f11e:	2b00      	cmp	r3, #0
 800f120:	bfb8      	it	lt
 800f122:	18e4      	addlt	r4, r4, r3
 800f124:	f000 f8e8 	bl	800f2f8 <__malloc_lock>
 800f128:	4a1d      	ldr	r2, [pc, #116]	@ (800f1a0 <_free_r+0x90>)
 800f12a:	6813      	ldr	r3, [r2, #0]
 800f12c:	b933      	cbnz	r3, 800f13c <_free_r+0x2c>
 800f12e:	6063      	str	r3, [r4, #4]
 800f130:	6014      	str	r4, [r2, #0]
 800f132:	4628      	mov	r0, r5
 800f134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f138:	f000 b8e4 	b.w	800f304 <__malloc_unlock>
 800f13c:	42a3      	cmp	r3, r4
 800f13e:	d908      	bls.n	800f152 <_free_r+0x42>
 800f140:	6820      	ldr	r0, [r4, #0]
 800f142:	1821      	adds	r1, r4, r0
 800f144:	428b      	cmp	r3, r1
 800f146:	bf01      	itttt	eq
 800f148:	6819      	ldreq	r1, [r3, #0]
 800f14a:	685b      	ldreq	r3, [r3, #4]
 800f14c:	1809      	addeq	r1, r1, r0
 800f14e:	6021      	streq	r1, [r4, #0]
 800f150:	e7ed      	b.n	800f12e <_free_r+0x1e>
 800f152:	461a      	mov	r2, r3
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	b10b      	cbz	r3, 800f15c <_free_r+0x4c>
 800f158:	42a3      	cmp	r3, r4
 800f15a:	d9fa      	bls.n	800f152 <_free_r+0x42>
 800f15c:	6811      	ldr	r1, [r2, #0]
 800f15e:	1850      	adds	r0, r2, r1
 800f160:	42a0      	cmp	r0, r4
 800f162:	d10b      	bne.n	800f17c <_free_r+0x6c>
 800f164:	6820      	ldr	r0, [r4, #0]
 800f166:	4401      	add	r1, r0
 800f168:	1850      	adds	r0, r2, r1
 800f16a:	4283      	cmp	r3, r0
 800f16c:	6011      	str	r1, [r2, #0]
 800f16e:	d1e0      	bne.n	800f132 <_free_r+0x22>
 800f170:	6818      	ldr	r0, [r3, #0]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	6053      	str	r3, [r2, #4]
 800f176:	4408      	add	r0, r1
 800f178:	6010      	str	r0, [r2, #0]
 800f17a:	e7da      	b.n	800f132 <_free_r+0x22>
 800f17c:	d902      	bls.n	800f184 <_free_r+0x74>
 800f17e:	230c      	movs	r3, #12
 800f180:	602b      	str	r3, [r5, #0]
 800f182:	e7d6      	b.n	800f132 <_free_r+0x22>
 800f184:	6820      	ldr	r0, [r4, #0]
 800f186:	1821      	adds	r1, r4, r0
 800f188:	428b      	cmp	r3, r1
 800f18a:	bf04      	itt	eq
 800f18c:	6819      	ldreq	r1, [r3, #0]
 800f18e:	685b      	ldreq	r3, [r3, #4]
 800f190:	6063      	str	r3, [r4, #4]
 800f192:	bf04      	itt	eq
 800f194:	1809      	addeq	r1, r1, r0
 800f196:	6021      	streq	r1, [r4, #0]
 800f198:	6054      	str	r4, [r2, #4]
 800f19a:	e7ca      	b.n	800f132 <_free_r+0x22>
 800f19c:	bd38      	pop	{r3, r4, r5, pc}
 800f19e:	bf00      	nop
 800f1a0:	20000a30 	.word	0x20000a30

0800f1a4 <malloc>:
 800f1a4:	4b02      	ldr	r3, [pc, #8]	@ (800f1b0 <malloc+0xc>)
 800f1a6:	4601      	mov	r1, r0
 800f1a8:	6818      	ldr	r0, [r3, #0]
 800f1aa:	f000 b825 	b.w	800f1f8 <_malloc_r>
 800f1ae:	bf00      	nop
 800f1b0:	2000009c 	.word	0x2000009c

0800f1b4 <sbrk_aligned>:
 800f1b4:	b570      	push	{r4, r5, r6, lr}
 800f1b6:	4e0f      	ldr	r6, [pc, #60]	@ (800f1f4 <sbrk_aligned+0x40>)
 800f1b8:	460c      	mov	r4, r1
 800f1ba:	6831      	ldr	r1, [r6, #0]
 800f1bc:	4605      	mov	r5, r0
 800f1be:	b911      	cbnz	r1, 800f1c6 <sbrk_aligned+0x12>
 800f1c0:	f001 fe0c 	bl	8010ddc <_sbrk_r>
 800f1c4:	6030      	str	r0, [r6, #0]
 800f1c6:	4621      	mov	r1, r4
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	f001 fe07 	bl	8010ddc <_sbrk_r>
 800f1ce:	1c43      	adds	r3, r0, #1
 800f1d0:	d103      	bne.n	800f1da <sbrk_aligned+0x26>
 800f1d2:	f04f 34ff 	mov.w	r4, #4294967295
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	bd70      	pop	{r4, r5, r6, pc}
 800f1da:	1cc4      	adds	r4, r0, #3
 800f1dc:	f024 0403 	bic.w	r4, r4, #3
 800f1e0:	42a0      	cmp	r0, r4
 800f1e2:	d0f8      	beq.n	800f1d6 <sbrk_aligned+0x22>
 800f1e4:	1a21      	subs	r1, r4, r0
 800f1e6:	4628      	mov	r0, r5
 800f1e8:	f001 fdf8 	bl	8010ddc <_sbrk_r>
 800f1ec:	3001      	adds	r0, #1
 800f1ee:	d1f2      	bne.n	800f1d6 <sbrk_aligned+0x22>
 800f1f0:	e7ef      	b.n	800f1d2 <sbrk_aligned+0x1e>
 800f1f2:	bf00      	nop
 800f1f4:	20000a2c 	.word	0x20000a2c

0800f1f8 <_malloc_r>:
 800f1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1fc:	1ccd      	adds	r5, r1, #3
 800f1fe:	f025 0503 	bic.w	r5, r5, #3
 800f202:	3508      	adds	r5, #8
 800f204:	2d0c      	cmp	r5, #12
 800f206:	bf38      	it	cc
 800f208:	250c      	movcc	r5, #12
 800f20a:	2d00      	cmp	r5, #0
 800f20c:	4606      	mov	r6, r0
 800f20e:	db01      	blt.n	800f214 <_malloc_r+0x1c>
 800f210:	42a9      	cmp	r1, r5
 800f212:	d904      	bls.n	800f21e <_malloc_r+0x26>
 800f214:	230c      	movs	r3, #12
 800f216:	6033      	str	r3, [r6, #0]
 800f218:	2000      	movs	r0, #0
 800f21a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f21e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f2f4 <_malloc_r+0xfc>
 800f222:	f000 f869 	bl	800f2f8 <__malloc_lock>
 800f226:	f8d8 3000 	ldr.w	r3, [r8]
 800f22a:	461c      	mov	r4, r3
 800f22c:	bb44      	cbnz	r4, 800f280 <_malloc_r+0x88>
 800f22e:	4629      	mov	r1, r5
 800f230:	4630      	mov	r0, r6
 800f232:	f7ff ffbf 	bl	800f1b4 <sbrk_aligned>
 800f236:	1c43      	adds	r3, r0, #1
 800f238:	4604      	mov	r4, r0
 800f23a:	d158      	bne.n	800f2ee <_malloc_r+0xf6>
 800f23c:	f8d8 4000 	ldr.w	r4, [r8]
 800f240:	4627      	mov	r7, r4
 800f242:	2f00      	cmp	r7, #0
 800f244:	d143      	bne.n	800f2ce <_malloc_r+0xd6>
 800f246:	2c00      	cmp	r4, #0
 800f248:	d04b      	beq.n	800f2e2 <_malloc_r+0xea>
 800f24a:	6823      	ldr	r3, [r4, #0]
 800f24c:	4639      	mov	r1, r7
 800f24e:	4630      	mov	r0, r6
 800f250:	eb04 0903 	add.w	r9, r4, r3
 800f254:	f001 fdc2 	bl	8010ddc <_sbrk_r>
 800f258:	4581      	cmp	r9, r0
 800f25a:	d142      	bne.n	800f2e2 <_malloc_r+0xea>
 800f25c:	6821      	ldr	r1, [r4, #0]
 800f25e:	1a6d      	subs	r5, r5, r1
 800f260:	4629      	mov	r1, r5
 800f262:	4630      	mov	r0, r6
 800f264:	f7ff ffa6 	bl	800f1b4 <sbrk_aligned>
 800f268:	3001      	adds	r0, #1
 800f26a:	d03a      	beq.n	800f2e2 <_malloc_r+0xea>
 800f26c:	6823      	ldr	r3, [r4, #0]
 800f26e:	442b      	add	r3, r5
 800f270:	6023      	str	r3, [r4, #0]
 800f272:	f8d8 3000 	ldr.w	r3, [r8]
 800f276:	685a      	ldr	r2, [r3, #4]
 800f278:	bb62      	cbnz	r2, 800f2d4 <_malloc_r+0xdc>
 800f27a:	f8c8 7000 	str.w	r7, [r8]
 800f27e:	e00f      	b.n	800f2a0 <_malloc_r+0xa8>
 800f280:	6822      	ldr	r2, [r4, #0]
 800f282:	1b52      	subs	r2, r2, r5
 800f284:	d420      	bmi.n	800f2c8 <_malloc_r+0xd0>
 800f286:	2a0b      	cmp	r2, #11
 800f288:	d917      	bls.n	800f2ba <_malloc_r+0xc2>
 800f28a:	1961      	adds	r1, r4, r5
 800f28c:	42a3      	cmp	r3, r4
 800f28e:	6025      	str	r5, [r4, #0]
 800f290:	bf18      	it	ne
 800f292:	6059      	strne	r1, [r3, #4]
 800f294:	6863      	ldr	r3, [r4, #4]
 800f296:	bf08      	it	eq
 800f298:	f8c8 1000 	streq.w	r1, [r8]
 800f29c:	5162      	str	r2, [r4, r5]
 800f29e:	604b      	str	r3, [r1, #4]
 800f2a0:	4630      	mov	r0, r6
 800f2a2:	f000 f82f 	bl	800f304 <__malloc_unlock>
 800f2a6:	f104 000b 	add.w	r0, r4, #11
 800f2aa:	1d23      	adds	r3, r4, #4
 800f2ac:	f020 0007 	bic.w	r0, r0, #7
 800f2b0:	1ac2      	subs	r2, r0, r3
 800f2b2:	bf1c      	itt	ne
 800f2b4:	1a1b      	subne	r3, r3, r0
 800f2b6:	50a3      	strne	r3, [r4, r2]
 800f2b8:	e7af      	b.n	800f21a <_malloc_r+0x22>
 800f2ba:	6862      	ldr	r2, [r4, #4]
 800f2bc:	42a3      	cmp	r3, r4
 800f2be:	bf0c      	ite	eq
 800f2c0:	f8c8 2000 	streq.w	r2, [r8]
 800f2c4:	605a      	strne	r2, [r3, #4]
 800f2c6:	e7eb      	b.n	800f2a0 <_malloc_r+0xa8>
 800f2c8:	4623      	mov	r3, r4
 800f2ca:	6864      	ldr	r4, [r4, #4]
 800f2cc:	e7ae      	b.n	800f22c <_malloc_r+0x34>
 800f2ce:	463c      	mov	r4, r7
 800f2d0:	687f      	ldr	r7, [r7, #4]
 800f2d2:	e7b6      	b.n	800f242 <_malloc_r+0x4a>
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	42a3      	cmp	r3, r4
 800f2da:	d1fb      	bne.n	800f2d4 <_malloc_r+0xdc>
 800f2dc:	2300      	movs	r3, #0
 800f2de:	6053      	str	r3, [r2, #4]
 800f2e0:	e7de      	b.n	800f2a0 <_malloc_r+0xa8>
 800f2e2:	230c      	movs	r3, #12
 800f2e4:	6033      	str	r3, [r6, #0]
 800f2e6:	4630      	mov	r0, r6
 800f2e8:	f000 f80c 	bl	800f304 <__malloc_unlock>
 800f2ec:	e794      	b.n	800f218 <_malloc_r+0x20>
 800f2ee:	6005      	str	r5, [r0, #0]
 800f2f0:	e7d6      	b.n	800f2a0 <_malloc_r+0xa8>
 800f2f2:	bf00      	nop
 800f2f4:	20000a30 	.word	0x20000a30

0800f2f8 <__malloc_lock>:
 800f2f8:	4801      	ldr	r0, [pc, #4]	@ (800f300 <__malloc_lock+0x8>)
 800f2fa:	f7ff b8b4 	b.w	800e466 <__retarget_lock_acquire_recursive>
 800f2fe:	bf00      	nop
 800f300:	20000a28 	.word	0x20000a28

0800f304 <__malloc_unlock>:
 800f304:	4801      	ldr	r0, [pc, #4]	@ (800f30c <__malloc_unlock+0x8>)
 800f306:	f7ff b8af 	b.w	800e468 <__retarget_lock_release_recursive>
 800f30a:	bf00      	nop
 800f30c:	20000a28 	.word	0x20000a28

0800f310 <_Balloc>:
 800f310:	b570      	push	{r4, r5, r6, lr}
 800f312:	69c6      	ldr	r6, [r0, #28]
 800f314:	4604      	mov	r4, r0
 800f316:	460d      	mov	r5, r1
 800f318:	b976      	cbnz	r6, 800f338 <_Balloc+0x28>
 800f31a:	2010      	movs	r0, #16
 800f31c:	f7ff ff42 	bl	800f1a4 <malloc>
 800f320:	4602      	mov	r2, r0
 800f322:	61e0      	str	r0, [r4, #28]
 800f324:	b920      	cbnz	r0, 800f330 <_Balloc+0x20>
 800f326:	4b18      	ldr	r3, [pc, #96]	@ (800f388 <_Balloc+0x78>)
 800f328:	4818      	ldr	r0, [pc, #96]	@ (800f38c <_Balloc+0x7c>)
 800f32a:	216b      	movs	r1, #107	@ 0x6b
 800f32c:	f001 fd7c 	bl	8010e28 <__assert_func>
 800f330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f334:	6006      	str	r6, [r0, #0]
 800f336:	60c6      	str	r6, [r0, #12]
 800f338:	69e6      	ldr	r6, [r4, #28]
 800f33a:	68f3      	ldr	r3, [r6, #12]
 800f33c:	b183      	cbz	r3, 800f360 <_Balloc+0x50>
 800f33e:	69e3      	ldr	r3, [r4, #28]
 800f340:	68db      	ldr	r3, [r3, #12]
 800f342:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f346:	b9b8      	cbnz	r0, 800f378 <_Balloc+0x68>
 800f348:	2101      	movs	r1, #1
 800f34a:	fa01 f605 	lsl.w	r6, r1, r5
 800f34e:	1d72      	adds	r2, r6, #5
 800f350:	0092      	lsls	r2, r2, #2
 800f352:	4620      	mov	r0, r4
 800f354:	f001 fd86 	bl	8010e64 <_calloc_r>
 800f358:	b160      	cbz	r0, 800f374 <_Balloc+0x64>
 800f35a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f35e:	e00e      	b.n	800f37e <_Balloc+0x6e>
 800f360:	2221      	movs	r2, #33	@ 0x21
 800f362:	2104      	movs	r1, #4
 800f364:	4620      	mov	r0, r4
 800f366:	f001 fd7d 	bl	8010e64 <_calloc_r>
 800f36a:	69e3      	ldr	r3, [r4, #28]
 800f36c:	60f0      	str	r0, [r6, #12]
 800f36e:	68db      	ldr	r3, [r3, #12]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d1e4      	bne.n	800f33e <_Balloc+0x2e>
 800f374:	2000      	movs	r0, #0
 800f376:	bd70      	pop	{r4, r5, r6, pc}
 800f378:	6802      	ldr	r2, [r0, #0]
 800f37a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f37e:	2300      	movs	r3, #0
 800f380:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f384:	e7f7      	b.n	800f376 <_Balloc+0x66>
 800f386:	bf00      	nop
 800f388:	08011e81 	.word	0x08011e81
 800f38c:	08011f01 	.word	0x08011f01

0800f390 <_Bfree>:
 800f390:	b570      	push	{r4, r5, r6, lr}
 800f392:	69c6      	ldr	r6, [r0, #28]
 800f394:	4605      	mov	r5, r0
 800f396:	460c      	mov	r4, r1
 800f398:	b976      	cbnz	r6, 800f3b8 <_Bfree+0x28>
 800f39a:	2010      	movs	r0, #16
 800f39c:	f7ff ff02 	bl	800f1a4 <malloc>
 800f3a0:	4602      	mov	r2, r0
 800f3a2:	61e8      	str	r0, [r5, #28]
 800f3a4:	b920      	cbnz	r0, 800f3b0 <_Bfree+0x20>
 800f3a6:	4b09      	ldr	r3, [pc, #36]	@ (800f3cc <_Bfree+0x3c>)
 800f3a8:	4809      	ldr	r0, [pc, #36]	@ (800f3d0 <_Bfree+0x40>)
 800f3aa:	218f      	movs	r1, #143	@ 0x8f
 800f3ac:	f001 fd3c 	bl	8010e28 <__assert_func>
 800f3b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3b4:	6006      	str	r6, [r0, #0]
 800f3b6:	60c6      	str	r6, [r0, #12]
 800f3b8:	b13c      	cbz	r4, 800f3ca <_Bfree+0x3a>
 800f3ba:	69eb      	ldr	r3, [r5, #28]
 800f3bc:	6862      	ldr	r2, [r4, #4]
 800f3be:	68db      	ldr	r3, [r3, #12]
 800f3c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f3c4:	6021      	str	r1, [r4, #0]
 800f3c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f3ca:	bd70      	pop	{r4, r5, r6, pc}
 800f3cc:	08011e81 	.word	0x08011e81
 800f3d0:	08011f01 	.word	0x08011f01

0800f3d4 <__multadd>:
 800f3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3d8:	690d      	ldr	r5, [r1, #16]
 800f3da:	4607      	mov	r7, r0
 800f3dc:	460c      	mov	r4, r1
 800f3de:	461e      	mov	r6, r3
 800f3e0:	f101 0c14 	add.w	ip, r1, #20
 800f3e4:	2000      	movs	r0, #0
 800f3e6:	f8dc 3000 	ldr.w	r3, [ip]
 800f3ea:	b299      	uxth	r1, r3
 800f3ec:	fb02 6101 	mla	r1, r2, r1, r6
 800f3f0:	0c1e      	lsrs	r6, r3, #16
 800f3f2:	0c0b      	lsrs	r3, r1, #16
 800f3f4:	fb02 3306 	mla	r3, r2, r6, r3
 800f3f8:	b289      	uxth	r1, r1
 800f3fa:	3001      	adds	r0, #1
 800f3fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f400:	4285      	cmp	r5, r0
 800f402:	f84c 1b04 	str.w	r1, [ip], #4
 800f406:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f40a:	dcec      	bgt.n	800f3e6 <__multadd+0x12>
 800f40c:	b30e      	cbz	r6, 800f452 <__multadd+0x7e>
 800f40e:	68a3      	ldr	r3, [r4, #8]
 800f410:	42ab      	cmp	r3, r5
 800f412:	dc19      	bgt.n	800f448 <__multadd+0x74>
 800f414:	6861      	ldr	r1, [r4, #4]
 800f416:	4638      	mov	r0, r7
 800f418:	3101      	adds	r1, #1
 800f41a:	f7ff ff79 	bl	800f310 <_Balloc>
 800f41e:	4680      	mov	r8, r0
 800f420:	b928      	cbnz	r0, 800f42e <__multadd+0x5a>
 800f422:	4602      	mov	r2, r0
 800f424:	4b0c      	ldr	r3, [pc, #48]	@ (800f458 <__multadd+0x84>)
 800f426:	480d      	ldr	r0, [pc, #52]	@ (800f45c <__multadd+0x88>)
 800f428:	21ba      	movs	r1, #186	@ 0xba
 800f42a:	f001 fcfd 	bl	8010e28 <__assert_func>
 800f42e:	6922      	ldr	r2, [r4, #16]
 800f430:	3202      	adds	r2, #2
 800f432:	f104 010c 	add.w	r1, r4, #12
 800f436:	0092      	lsls	r2, r2, #2
 800f438:	300c      	adds	r0, #12
 800f43a:	f001 fcdf 	bl	8010dfc <memcpy>
 800f43e:	4621      	mov	r1, r4
 800f440:	4638      	mov	r0, r7
 800f442:	f7ff ffa5 	bl	800f390 <_Bfree>
 800f446:	4644      	mov	r4, r8
 800f448:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f44c:	3501      	adds	r5, #1
 800f44e:	615e      	str	r6, [r3, #20]
 800f450:	6125      	str	r5, [r4, #16]
 800f452:	4620      	mov	r0, r4
 800f454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f458:	08011ef0 	.word	0x08011ef0
 800f45c:	08011f01 	.word	0x08011f01

0800f460 <__s2b>:
 800f460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f464:	460c      	mov	r4, r1
 800f466:	4615      	mov	r5, r2
 800f468:	461f      	mov	r7, r3
 800f46a:	2209      	movs	r2, #9
 800f46c:	3308      	adds	r3, #8
 800f46e:	4606      	mov	r6, r0
 800f470:	fb93 f3f2 	sdiv	r3, r3, r2
 800f474:	2100      	movs	r1, #0
 800f476:	2201      	movs	r2, #1
 800f478:	429a      	cmp	r2, r3
 800f47a:	db09      	blt.n	800f490 <__s2b+0x30>
 800f47c:	4630      	mov	r0, r6
 800f47e:	f7ff ff47 	bl	800f310 <_Balloc>
 800f482:	b940      	cbnz	r0, 800f496 <__s2b+0x36>
 800f484:	4602      	mov	r2, r0
 800f486:	4b19      	ldr	r3, [pc, #100]	@ (800f4ec <__s2b+0x8c>)
 800f488:	4819      	ldr	r0, [pc, #100]	@ (800f4f0 <__s2b+0x90>)
 800f48a:	21d3      	movs	r1, #211	@ 0xd3
 800f48c:	f001 fccc 	bl	8010e28 <__assert_func>
 800f490:	0052      	lsls	r2, r2, #1
 800f492:	3101      	adds	r1, #1
 800f494:	e7f0      	b.n	800f478 <__s2b+0x18>
 800f496:	9b08      	ldr	r3, [sp, #32]
 800f498:	6143      	str	r3, [r0, #20]
 800f49a:	2d09      	cmp	r5, #9
 800f49c:	f04f 0301 	mov.w	r3, #1
 800f4a0:	6103      	str	r3, [r0, #16]
 800f4a2:	dd16      	ble.n	800f4d2 <__s2b+0x72>
 800f4a4:	f104 0909 	add.w	r9, r4, #9
 800f4a8:	46c8      	mov	r8, r9
 800f4aa:	442c      	add	r4, r5
 800f4ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f4b0:	4601      	mov	r1, r0
 800f4b2:	3b30      	subs	r3, #48	@ 0x30
 800f4b4:	220a      	movs	r2, #10
 800f4b6:	4630      	mov	r0, r6
 800f4b8:	f7ff ff8c 	bl	800f3d4 <__multadd>
 800f4bc:	45a0      	cmp	r8, r4
 800f4be:	d1f5      	bne.n	800f4ac <__s2b+0x4c>
 800f4c0:	f1a5 0408 	sub.w	r4, r5, #8
 800f4c4:	444c      	add	r4, r9
 800f4c6:	1b2d      	subs	r5, r5, r4
 800f4c8:	1963      	adds	r3, r4, r5
 800f4ca:	42bb      	cmp	r3, r7
 800f4cc:	db04      	blt.n	800f4d8 <__s2b+0x78>
 800f4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4d2:	340a      	adds	r4, #10
 800f4d4:	2509      	movs	r5, #9
 800f4d6:	e7f6      	b.n	800f4c6 <__s2b+0x66>
 800f4d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f4dc:	4601      	mov	r1, r0
 800f4de:	3b30      	subs	r3, #48	@ 0x30
 800f4e0:	220a      	movs	r2, #10
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f7ff ff76 	bl	800f3d4 <__multadd>
 800f4e8:	e7ee      	b.n	800f4c8 <__s2b+0x68>
 800f4ea:	bf00      	nop
 800f4ec:	08011ef0 	.word	0x08011ef0
 800f4f0:	08011f01 	.word	0x08011f01

0800f4f4 <__hi0bits>:
 800f4f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	bf36      	itet	cc
 800f4fc:	0403      	lslcc	r3, r0, #16
 800f4fe:	2000      	movcs	r0, #0
 800f500:	2010      	movcc	r0, #16
 800f502:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f506:	bf3c      	itt	cc
 800f508:	021b      	lslcc	r3, r3, #8
 800f50a:	3008      	addcc	r0, #8
 800f50c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f510:	bf3c      	itt	cc
 800f512:	011b      	lslcc	r3, r3, #4
 800f514:	3004      	addcc	r0, #4
 800f516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f51a:	bf3c      	itt	cc
 800f51c:	009b      	lslcc	r3, r3, #2
 800f51e:	3002      	addcc	r0, #2
 800f520:	2b00      	cmp	r3, #0
 800f522:	db05      	blt.n	800f530 <__hi0bits+0x3c>
 800f524:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f528:	f100 0001 	add.w	r0, r0, #1
 800f52c:	bf08      	it	eq
 800f52e:	2020      	moveq	r0, #32
 800f530:	4770      	bx	lr

0800f532 <__lo0bits>:
 800f532:	6803      	ldr	r3, [r0, #0]
 800f534:	4602      	mov	r2, r0
 800f536:	f013 0007 	ands.w	r0, r3, #7
 800f53a:	d00b      	beq.n	800f554 <__lo0bits+0x22>
 800f53c:	07d9      	lsls	r1, r3, #31
 800f53e:	d421      	bmi.n	800f584 <__lo0bits+0x52>
 800f540:	0798      	lsls	r0, r3, #30
 800f542:	bf49      	itett	mi
 800f544:	085b      	lsrmi	r3, r3, #1
 800f546:	089b      	lsrpl	r3, r3, #2
 800f548:	2001      	movmi	r0, #1
 800f54a:	6013      	strmi	r3, [r2, #0]
 800f54c:	bf5c      	itt	pl
 800f54e:	6013      	strpl	r3, [r2, #0]
 800f550:	2002      	movpl	r0, #2
 800f552:	4770      	bx	lr
 800f554:	b299      	uxth	r1, r3
 800f556:	b909      	cbnz	r1, 800f55c <__lo0bits+0x2a>
 800f558:	0c1b      	lsrs	r3, r3, #16
 800f55a:	2010      	movs	r0, #16
 800f55c:	b2d9      	uxtb	r1, r3
 800f55e:	b909      	cbnz	r1, 800f564 <__lo0bits+0x32>
 800f560:	3008      	adds	r0, #8
 800f562:	0a1b      	lsrs	r3, r3, #8
 800f564:	0719      	lsls	r1, r3, #28
 800f566:	bf04      	itt	eq
 800f568:	091b      	lsreq	r3, r3, #4
 800f56a:	3004      	addeq	r0, #4
 800f56c:	0799      	lsls	r1, r3, #30
 800f56e:	bf04      	itt	eq
 800f570:	089b      	lsreq	r3, r3, #2
 800f572:	3002      	addeq	r0, #2
 800f574:	07d9      	lsls	r1, r3, #31
 800f576:	d403      	bmi.n	800f580 <__lo0bits+0x4e>
 800f578:	085b      	lsrs	r3, r3, #1
 800f57a:	f100 0001 	add.w	r0, r0, #1
 800f57e:	d003      	beq.n	800f588 <__lo0bits+0x56>
 800f580:	6013      	str	r3, [r2, #0]
 800f582:	4770      	bx	lr
 800f584:	2000      	movs	r0, #0
 800f586:	4770      	bx	lr
 800f588:	2020      	movs	r0, #32
 800f58a:	4770      	bx	lr

0800f58c <__i2b>:
 800f58c:	b510      	push	{r4, lr}
 800f58e:	460c      	mov	r4, r1
 800f590:	2101      	movs	r1, #1
 800f592:	f7ff febd 	bl	800f310 <_Balloc>
 800f596:	4602      	mov	r2, r0
 800f598:	b928      	cbnz	r0, 800f5a6 <__i2b+0x1a>
 800f59a:	4b05      	ldr	r3, [pc, #20]	@ (800f5b0 <__i2b+0x24>)
 800f59c:	4805      	ldr	r0, [pc, #20]	@ (800f5b4 <__i2b+0x28>)
 800f59e:	f240 1145 	movw	r1, #325	@ 0x145
 800f5a2:	f001 fc41 	bl	8010e28 <__assert_func>
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	6144      	str	r4, [r0, #20]
 800f5aa:	6103      	str	r3, [r0, #16]
 800f5ac:	bd10      	pop	{r4, pc}
 800f5ae:	bf00      	nop
 800f5b0:	08011ef0 	.word	0x08011ef0
 800f5b4:	08011f01 	.word	0x08011f01

0800f5b8 <__multiply>:
 800f5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5bc:	4614      	mov	r4, r2
 800f5be:	690a      	ldr	r2, [r1, #16]
 800f5c0:	6923      	ldr	r3, [r4, #16]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	bfa8      	it	ge
 800f5c6:	4623      	movge	r3, r4
 800f5c8:	460f      	mov	r7, r1
 800f5ca:	bfa4      	itt	ge
 800f5cc:	460c      	movge	r4, r1
 800f5ce:	461f      	movge	r7, r3
 800f5d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f5d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f5d8:	68a3      	ldr	r3, [r4, #8]
 800f5da:	6861      	ldr	r1, [r4, #4]
 800f5dc:	eb0a 0609 	add.w	r6, sl, r9
 800f5e0:	42b3      	cmp	r3, r6
 800f5e2:	b085      	sub	sp, #20
 800f5e4:	bfb8      	it	lt
 800f5e6:	3101      	addlt	r1, #1
 800f5e8:	f7ff fe92 	bl	800f310 <_Balloc>
 800f5ec:	b930      	cbnz	r0, 800f5fc <__multiply+0x44>
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	4b44      	ldr	r3, [pc, #272]	@ (800f704 <__multiply+0x14c>)
 800f5f2:	4845      	ldr	r0, [pc, #276]	@ (800f708 <__multiply+0x150>)
 800f5f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f5f8:	f001 fc16 	bl	8010e28 <__assert_func>
 800f5fc:	f100 0514 	add.w	r5, r0, #20
 800f600:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f604:	462b      	mov	r3, r5
 800f606:	2200      	movs	r2, #0
 800f608:	4543      	cmp	r3, r8
 800f60a:	d321      	bcc.n	800f650 <__multiply+0x98>
 800f60c:	f107 0114 	add.w	r1, r7, #20
 800f610:	f104 0214 	add.w	r2, r4, #20
 800f614:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f618:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f61c:	9302      	str	r3, [sp, #8]
 800f61e:	1b13      	subs	r3, r2, r4
 800f620:	3b15      	subs	r3, #21
 800f622:	f023 0303 	bic.w	r3, r3, #3
 800f626:	3304      	adds	r3, #4
 800f628:	f104 0715 	add.w	r7, r4, #21
 800f62c:	42ba      	cmp	r2, r7
 800f62e:	bf38      	it	cc
 800f630:	2304      	movcc	r3, #4
 800f632:	9301      	str	r3, [sp, #4]
 800f634:	9b02      	ldr	r3, [sp, #8]
 800f636:	9103      	str	r1, [sp, #12]
 800f638:	428b      	cmp	r3, r1
 800f63a:	d80c      	bhi.n	800f656 <__multiply+0x9e>
 800f63c:	2e00      	cmp	r6, #0
 800f63e:	dd03      	ble.n	800f648 <__multiply+0x90>
 800f640:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f644:	2b00      	cmp	r3, #0
 800f646:	d05b      	beq.n	800f700 <__multiply+0x148>
 800f648:	6106      	str	r6, [r0, #16]
 800f64a:	b005      	add	sp, #20
 800f64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f650:	f843 2b04 	str.w	r2, [r3], #4
 800f654:	e7d8      	b.n	800f608 <__multiply+0x50>
 800f656:	f8b1 a000 	ldrh.w	sl, [r1]
 800f65a:	f1ba 0f00 	cmp.w	sl, #0
 800f65e:	d024      	beq.n	800f6aa <__multiply+0xf2>
 800f660:	f104 0e14 	add.w	lr, r4, #20
 800f664:	46a9      	mov	r9, r5
 800f666:	f04f 0c00 	mov.w	ip, #0
 800f66a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f66e:	f8d9 3000 	ldr.w	r3, [r9]
 800f672:	fa1f fb87 	uxth.w	fp, r7
 800f676:	b29b      	uxth	r3, r3
 800f678:	fb0a 330b 	mla	r3, sl, fp, r3
 800f67c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f680:	f8d9 7000 	ldr.w	r7, [r9]
 800f684:	4463      	add	r3, ip
 800f686:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f68a:	fb0a c70b 	mla	r7, sl, fp, ip
 800f68e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f692:	b29b      	uxth	r3, r3
 800f694:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f698:	4572      	cmp	r2, lr
 800f69a:	f849 3b04 	str.w	r3, [r9], #4
 800f69e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f6a2:	d8e2      	bhi.n	800f66a <__multiply+0xb2>
 800f6a4:	9b01      	ldr	r3, [sp, #4]
 800f6a6:	f845 c003 	str.w	ip, [r5, r3]
 800f6aa:	9b03      	ldr	r3, [sp, #12]
 800f6ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f6b0:	3104      	adds	r1, #4
 800f6b2:	f1b9 0f00 	cmp.w	r9, #0
 800f6b6:	d021      	beq.n	800f6fc <__multiply+0x144>
 800f6b8:	682b      	ldr	r3, [r5, #0]
 800f6ba:	f104 0c14 	add.w	ip, r4, #20
 800f6be:	46ae      	mov	lr, r5
 800f6c0:	f04f 0a00 	mov.w	sl, #0
 800f6c4:	f8bc b000 	ldrh.w	fp, [ip]
 800f6c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f6cc:	fb09 770b 	mla	r7, r9, fp, r7
 800f6d0:	4457      	add	r7, sl
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f6d8:	f84e 3b04 	str.w	r3, [lr], #4
 800f6dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f6e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6e4:	f8be 3000 	ldrh.w	r3, [lr]
 800f6e8:	fb09 330a 	mla	r3, r9, sl, r3
 800f6ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f6f0:	4562      	cmp	r2, ip
 800f6f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6f6:	d8e5      	bhi.n	800f6c4 <__multiply+0x10c>
 800f6f8:	9f01      	ldr	r7, [sp, #4]
 800f6fa:	51eb      	str	r3, [r5, r7]
 800f6fc:	3504      	adds	r5, #4
 800f6fe:	e799      	b.n	800f634 <__multiply+0x7c>
 800f700:	3e01      	subs	r6, #1
 800f702:	e79b      	b.n	800f63c <__multiply+0x84>
 800f704:	08011ef0 	.word	0x08011ef0
 800f708:	08011f01 	.word	0x08011f01

0800f70c <__pow5mult>:
 800f70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f710:	4615      	mov	r5, r2
 800f712:	f012 0203 	ands.w	r2, r2, #3
 800f716:	4607      	mov	r7, r0
 800f718:	460e      	mov	r6, r1
 800f71a:	d007      	beq.n	800f72c <__pow5mult+0x20>
 800f71c:	4c25      	ldr	r4, [pc, #148]	@ (800f7b4 <__pow5mult+0xa8>)
 800f71e:	3a01      	subs	r2, #1
 800f720:	2300      	movs	r3, #0
 800f722:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f726:	f7ff fe55 	bl	800f3d4 <__multadd>
 800f72a:	4606      	mov	r6, r0
 800f72c:	10ad      	asrs	r5, r5, #2
 800f72e:	d03d      	beq.n	800f7ac <__pow5mult+0xa0>
 800f730:	69fc      	ldr	r4, [r7, #28]
 800f732:	b97c      	cbnz	r4, 800f754 <__pow5mult+0x48>
 800f734:	2010      	movs	r0, #16
 800f736:	f7ff fd35 	bl	800f1a4 <malloc>
 800f73a:	4602      	mov	r2, r0
 800f73c:	61f8      	str	r0, [r7, #28]
 800f73e:	b928      	cbnz	r0, 800f74c <__pow5mult+0x40>
 800f740:	4b1d      	ldr	r3, [pc, #116]	@ (800f7b8 <__pow5mult+0xac>)
 800f742:	481e      	ldr	r0, [pc, #120]	@ (800f7bc <__pow5mult+0xb0>)
 800f744:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f748:	f001 fb6e 	bl	8010e28 <__assert_func>
 800f74c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f750:	6004      	str	r4, [r0, #0]
 800f752:	60c4      	str	r4, [r0, #12]
 800f754:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f758:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f75c:	b94c      	cbnz	r4, 800f772 <__pow5mult+0x66>
 800f75e:	f240 2171 	movw	r1, #625	@ 0x271
 800f762:	4638      	mov	r0, r7
 800f764:	f7ff ff12 	bl	800f58c <__i2b>
 800f768:	2300      	movs	r3, #0
 800f76a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f76e:	4604      	mov	r4, r0
 800f770:	6003      	str	r3, [r0, #0]
 800f772:	f04f 0900 	mov.w	r9, #0
 800f776:	07eb      	lsls	r3, r5, #31
 800f778:	d50a      	bpl.n	800f790 <__pow5mult+0x84>
 800f77a:	4631      	mov	r1, r6
 800f77c:	4622      	mov	r2, r4
 800f77e:	4638      	mov	r0, r7
 800f780:	f7ff ff1a 	bl	800f5b8 <__multiply>
 800f784:	4631      	mov	r1, r6
 800f786:	4680      	mov	r8, r0
 800f788:	4638      	mov	r0, r7
 800f78a:	f7ff fe01 	bl	800f390 <_Bfree>
 800f78e:	4646      	mov	r6, r8
 800f790:	106d      	asrs	r5, r5, #1
 800f792:	d00b      	beq.n	800f7ac <__pow5mult+0xa0>
 800f794:	6820      	ldr	r0, [r4, #0]
 800f796:	b938      	cbnz	r0, 800f7a8 <__pow5mult+0x9c>
 800f798:	4622      	mov	r2, r4
 800f79a:	4621      	mov	r1, r4
 800f79c:	4638      	mov	r0, r7
 800f79e:	f7ff ff0b 	bl	800f5b8 <__multiply>
 800f7a2:	6020      	str	r0, [r4, #0]
 800f7a4:	f8c0 9000 	str.w	r9, [r0]
 800f7a8:	4604      	mov	r4, r0
 800f7aa:	e7e4      	b.n	800f776 <__pow5mult+0x6a>
 800f7ac:	4630      	mov	r0, r6
 800f7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7b2:	bf00      	nop
 800f7b4:	08011f5c 	.word	0x08011f5c
 800f7b8:	08011e81 	.word	0x08011e81
 800f7bc:	08011f01 	.word	0x08011f01

0800f7c0 <__lshift>:
 800f7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7c4:	460c      	mov	r4, r1
 800f7c6:	6849      	ldr	r1, [r1, #4]
 800f7c8:	6923      	ldr	r3, [r4, #16]
 800f7ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f7ce:	68a3      	ldr	r3, [r4, #8]
 800f7d0:	4607      	mov	r7, r0
 800f7d2:	4691      	mov	r9, r2
 800f7d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f7d8:	f108 0601 	add.w	r6, r8, #1
 800f7dc:	42b3      	cmp	r3, r6
 800f7de:	db0b      	blt.n	800f7f8 <__lshift+0x38>
 800f7e0:	4638      	mov	r0, r7
 800f7e2:	f7ff fd95 	bl	800f310 <_Balloc>
 800f7e6:	4605      	mov	r5, r0
 800f7e8:	b948      	cbnz	r0, 800f7fe <__lshift+0x3e>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	4b28      	ldr	r3, [pc, #160]	@ (800f890 <__lshift+0xd0>)
 800f7ee:	4829      	ldr	r0, [pc, #164]	@ (800f894 <__lshift+0xd4>)
 800f7f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f7f4:	f001 fb18 	bl	8010e28 <__assert_func>
 800f7f8:	3101      	adds	r1, #1
 800f7fa:	005b      	lsls	r3, r3, #1
 800f7fc:	e7ee      	b.n	800f7dc <__lshift+0x1c>
 800f7fe:	2300      	movs	r3, #0
 800f800:	f100 0114 	add.w	r1, r0, #20
 800f804:	f100 0210 	add.w	r2, r0, #16
 800f808:	4618      	mov	r0, r3
 800f80a:	4553      	cmp	r3, sl
 800f80c:	db33      	blt.n	800f876 <__lshift+0xb6>
 800f80e:	6920      	ldr	r0, [r4, #16]
 800f810:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f814:	f104 0314 	add.w	r3, r4, #20
 800f818:	f019 091f 	ands.w	r9, r9, #31
 800f81c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f820:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f824:	d02b      	beq.n	800f87e <__lshift+0xbe>
 800f826:	f1c9 0e20 	rsb	lr, r9, #32
 800f82a:	468a      	mov	sl, r1
 800f82c:	2200      	movs	r2, #0
 800f82e:	6818      	ldr	r0, [r3, #0]
 800f830:	fa00 f009 	lsl.w	r0, r0, r9
 800f834:	4310      	orrs	r0, r2
 800f836:	f84a 0b04 	str.w	r0, [sl], #4
 800f83a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f83e:	459c      	cmp	ip, r3
 800f840:	fa22 f20e 	lsr.w	r2, r2, lr
 800f844:	d8f3      	bhi.n	800f82e <__lshift+0x6e>
 800f846:	ebac 0304 	sub.w	r3, ip, r4
 800f84a:	3b15      	subs	r3, #21
 800f84c:	f023 0303 	bic.w	r3, r3, #3
 800f850:	3304      	adds	r3, #4
 800f852:	f104 0015 	add.w	r0, r4, #21
 800f856:	4584      	cmp	ip, r0
 800f858:	bf38      	it	cc
 800f85a:	2304      	movcc	r3, #4
 800f85c:	50ca      	str	r2, [r1, r3]
 800f85e:	b10a      	cbz	r2, 800f864 <__lshift+0xa4>
 800f860:	f108 0602 	add.w	r6, r8, #2
 800f864:	3e01      	subs	r6, #1
 800f866:	4638      	mov	r0, r7
 800f868:	612e      	str	r6, [r5, #16]
 800f86a:	4621      	mov	r1, r4
 800f86c:	f7ff fd90 	bl	800f390 <_Bfree>
 800f870:	4628      	mov	r0, r5
 800f872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f876:	f842 0f04 	str.w	r0, [r2, #4]!
 800f87a:	3301      	adds	r3, #1
 800f87c:	e7c5      	b.n	800f80a <__lshift+0x4a>
 800f87e:	3904      	subs	r1, #4
 800f880:	f853 2b04 	ldr.w	r2, [r3], #4
 800f884:	f841 2f04 	str.w	r2, [r1, #4]!
 800f888:	459c      	cmp	ip, r3
 800f88a:	d8f9      	bhi.n	800f880 <__lshift+0xc0>
 800f88c:	e7ea      	b.n	800f864 <__lshift+0xa4>
 800f88e:	bf00      	nop
 800f890:	08011ef0 	.word	0x08011ef0
 800f894:	08011f01 	.word	0x08011f01

0800f898 <__mcmp>:
 800f898:	690a      	ldr	r2, [r1, #16]
 800f89a:	4603      	mov	r3, r0
 800f89c:	6900      	ldr	r0, [r0, #16]
 800f89e:	1a80      	subs	r0, r0, r2
 800f8a0:	b530      	push	{r4, r5, lr}
 800f8a2:	d10e      	bne.n	800f8c2 <__mcmp+0x2a>
 800f8a4:	3314      	adds	r3, #20
 800f8a6:	3114      	adds	r1, #20
 800f8a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f8ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f8b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f8b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f8b8:	4295      	cmp	r5, r2
 800f8ba:	d003      	beq.n	800f8c4 <__mcmp+0x2c>
 800f8bc:	d205      	bcs.n	800f8ca <__mcmp+0x32>
 800f8be:	f04f 30ff 	mov.w	r0, #4294967295
 800f8c2:	bd30      	pop	{r4, r5, pc}
 800f8c4:	42a3      	cmp	r3, r4
 800f8c6:	d3f3      	bcc.n	800f8b0 <__mcmp+0x18>
 800f8c8:	e7fb      	b.n	800f8c2 <__mcmp+0x2a>
 800f8ca:	2001      	movs	r0, #1
 800f8cc:	e7f9      	b.n	800f8c2 <__mcmp+0x2a>
	...

0800f8d0 <__mdiff>:
 800f8d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d4:	4689      	mov	r9, r1
 800f8d6:	4606      	mov	r6, r0
 800f8d8:	4611      	mov	r1, r2
 800f8da:	4648      	mov	r0, r9
 800f8dc:	4614      	mov	r4, r2
 800f8de:	f7ff ffdb 	bl	800f898 <__mcmp>
 800f8e2:	1e05      	subs	r5, r0, #0
 800f8e4:	d112      	bne.n	800f90c <__mdiff+0x3c>
 800f8e6:	4629      	mov	r1, r5
 800f8e8:	4630      	mov	r0, r6
 800f8ea:	f7ff fd11 	bl	800f310 <_Balloc>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	b928      	cbnz	r0, 800f8fe <__mdiff+0x2e>
 800f8f2:	4b3f      	ldr	r3, [pc, #252]	@ (800f9f0 <__mdiff+0x120>)
 800f8f4:	f240 2137 	movw	r1, #567	@ 0x237
 800f8f8:	483e      	ldr	r0, [pc, #248]	@ (800f9f4 <__mdiff+0x124>)
 800f8fa:	f001 fa95 	bl	8010e28 <__assert_func>
 800f8fe:	2301      	movs	r3, #1
 800f900:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f904:	4610      	mov	r0, r2
 800f906:	b003      	add	sp, #12
 800f908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f90c:	bfbc      	itt	lt
 800f90e:	464b      	movlt	r3, r9
 800f910:	46a1      	movlt	r9, r4
 800f912:	4630      	mov	r0, r6
 800f914:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f918:	bfba      	itte	lt
 800f91a:	461c      	movlt	r4, r3
 800f91c:	2501      	movlt	r5, #1
 800f91e:	2500      	movge	r5, #0
 800f920:	f7ff fcf6 	bl	800f310 <_Balloc>
 800f924:	4602      	mov	r2, r0
 800f926:	b918      	cbnz	r0, 800f930 <__mdiff+0x60>
 800f928:	4b31      	ldr	r3, [pc, #196]	@ (800f9f0 <__mdiff+0x120>)
 800f92a:	f240 2145 	movw	r1, #581	@ 0x245
 800f92e:	e7e3      	b.n	800f8f8 <__mdiff+0x28>
 800f930:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f934:	6926      	ldr	r6, [r4, #16]
 800f936:	60c5      	str	r5, [r0, #12]
 800f938:	f109 0310 	add.w	r3, r9, #16
 800f93c:	f109 0514 	add.w	r5, r9, #20
 800f940:	f104 0e14 	add.w	lr, r4, #20
 800f944:	f100 0b14 	add.w	fp, r0, #20
 800f948:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f94c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f950:	9301      	str	r3, [sp, #4]
 800f952:	46d9      	mov	r9, fp
 800f954:	f04f 0c00 	mov.w	ip, #0
 800f958:	9b01      	ldr	r3, [sp, #4]
 800f95a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f95e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f962:	9301      	str	r3, [sp, #4]
 800f964:	fa1f f38a 	uxth.w	r3, sl
 800f968:	4619      	mov	r1, r3
 800f96a:	b283      	uxth	r3, r0
 800f96c:	1acb      	subs	r3, r1, r3
 800f96e:	0c00      	lsrs	r0, r0, #16
 800f970:	4463      	add	r3, ip
 800f972:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f976:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f980:	4576      	cmp	r6, lr
 800f982:	f849 3b04 	str.w	r3, [r9], #4
 800f986:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f98a:	d8e5      	bhi.n	800f958 <__mdiff+0x88>
 800f98c:	1b33      	subs	r3, r6, r4
 800f98e:	3b15      	subs	r3, #21
 800f990:	f023 0303 	bic.w	r3, r3, #3
 800f994:	3415      	adds	r4, #21
 800f996:	3304      	adds	r3, #4
 800f998:	42a6      	cmp	r6, r4
 800f99a:	bf38      	it	cc
 800f99c:	2304      	movcc	r3, #4
 800f99e:	441d      	add	r5, r3
 800f9a0:	445b      	add	r3, fp
 800f9a2:	461e      	mov	r6, r3
 800f9a4:	462c      	mov	r4, r5
 800f9a6:	4544      	cmp	r4, r8
 800f9a8:	d30e      	bcc.n	800f9c8 <__mdiff+0xf8>
 800f9aa:	f108 0103 	add.w	r1, r8, #3
 800f9ae:	1b49      	subs	r1, r1, r5
 800f9b0:	f021 0103 	bic.w	r1, r1, #3
 800f9b4:	3d03      	subs	r5, #3
 800f9b6:	45a8      	cmp	r8, r5
 800f9b8:	bf38      	it	cc
 800f9ba:	2100      	movcc	r1, #0
 800f9bc:	440b      	add	r3, r1
 800f9be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f9c2:	b191      	cbz	r1, 800f9ea <__mdiff+0x11a>
 800f9c4:	6117      	str	r7, [r2, #16]
 800f9c6:	e79d      	b.n	800f904 <__mdiff+0x34>
 800f9c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800f9cc:	46e6      	mov	lr, ip
 800f9ce:	0c08      	lsrs	r0, r1, #16
 800f9d0:	fa1c fc81 	uxtah	ip, ip, r1
 800f9d4:	4471      	add	r1, lr
 800f9d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f9da:	b289      	uxth	r1, r1
 800f9dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f9e0:	f846 1b04 	str.w	r1, [r6], #4
 800f9e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f9e8:	e7dd      	b.n	800f9a6 <__mdiff+0xd6>
 800f9ea:	3f01      	subs	r7, #1
 800f9ec:	e7e7      	b.n	800f9be <__mdiff+0xee>
 800f9ee:	bf00      	nop
 800f9f0:	08011ef0 	.word	0x08011ef0
 800f9f4:	08011f01 	.word	0x08011f01

0800f9f8 <__ulp>:
 800f9f8:	b082      	sub	sp, #8
 800f9fa:	ed8d 0b00 	vstr	d0, [sp]
 800f9fe:	9a01      	ldr	r2, [sp, #4]
 800fa00:	4b0f      	ldr	r3, [pc, #60]	@ (800fa40 <__ulp+0x48>)
 800fa02:	4013      	ands	r3, r2
 800fa04:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	dc08      	bgt.n	800fa1e <__ulp+0x26>
 800fa0c:	425b      	negs	r3, r3
 800fa0e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fa12:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fa16:	da04      	bge.n	800fa22 <__ulp+0x2a>
 800fa18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fa1c:	4113      	asrs	r3, r2
 800fa1e:	2200      	movs	r2, #0
 800fa20:	e008      	b.n	800fa34 <__ulp+0x3c>
 800fa22:	f1a2 0314 	sub.w	r3, r2, #20
 800fa26:	2b1e      	cmp	r3, #30
 800fa28:	bfda      	itte	le
 800fa2a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fa2e:	40da      	lsrle	r2, r3
 800fa30:	2201      	movgt	r2, #1
 800fa32:	2300      	movs	r3, #0
 800fa34:	4619      	mov	r1, r3
 800fa36:	4610      	mov	r0, r2
 800fa38:	ec41 0b10 	vmov	d0, r0, r1
 800fa3c:	b002      	add	sp, #8
 800fa3e:	4770      	bx	lr
 800fa40:	7ff00000 	.word	0x7ff00000

0800fa44 <__b2d>:
 800fa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa48:	6906      	ldr	r6, [r0, #16]
 800fa4a:	f100 0814 	add.w	r8, r0, #20
 800fa4e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fa52:	1f37      	subs	r7, r6, #4
 800fa54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fa58:	4610      	mov	r0, r2
 800fa5a:	f7ff fd4b 	bl	800f4f4 <__hi0bits>
 800fa5e:	f1c0 0320 	rsb	r3, r0, #32
 800fa62:	280a      	cmp	r0, #10
 800fa64:	600b      	str	r3, [r1, #0]
 800fa66:	491b      	ldr	r1, [pc, #108]	@ (800fad4 <__b2d+0x90>)
 800fa68:	dc15      	bgt.n	800fa96 <__b2d+0x52>
 800fa6a:	f1c0 0c0b 	rsb	ip, r0, #11
 800fa6e:	fa22 f30c 	lsr.w	r3, r2, ip
 800fa72:	45b8      	cmp	r8, r7
 800fa74:	ea43 0501 	orr.w	r5, r3, r1
 800fa78:	bf34      	ite	cc
 800fa7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa7e:	2300      	movcs	r3, #0
 800fa80:	3015      	adds	r0, #21
 800fa82:	fa02 f000 	lsl.w	r0, r2, r0
 800fa86:	fa23 f30c 	lsr.w	r3, r3, ip
 800fa8a:	4303      	orrs	r3, r0
 800fa8c:	461c      	mov	r4, r3
 800fa8e:	ec45 4b10 	vmov	d0, r4, r5
 800fa92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa96:	45b8      	cmp	r8, r7
 800fa98:	bf3a      	itte	cc
 800fa9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa9e:	f1a6 0708 	subcc.w	r7, r6, #8
 800faa2:	2300      	movcs	r3, #0
 800faa4:	380b      	subs	r0, #11
 800faa6:	d012      	beq.n	800face <__b2d+0x8a>
 800faa8:	f1c0 0120 	rsb	r1, r0, #32
 800faac:	fa23 f401 	lsr.w	r4, r3, r1
 800fab0:	4082      	lsls	r2, r0
 800fab2:	4322      	orrs	r2, r4
 800fab4:	4547      	cmp	r7, r8
 800fab6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800faba:	bf8c      	ite	hi
 800fabc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fac0:	2200      	movls	r2, #0
 800fac2:	4083      	lsls	r3, r0
 800fac4:	40ca      	lsrs	r2, r1
 800fac6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800faca:	4313      	orrs	r3, r2
 800facc:	e7de      	b.n	800fa8c <__b2d+0x48>
 800face:	ea42 0501 	orr.w	r5, r2, r1
 800fad2:	e7db      	b.n	800fa8c <__b2d+0x48>
 800fad4:	3ff00000 	.word	0x3ff00000

0800fad8 <__d2b>:
 800fad8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fadc:	460f      	mov	r7, r1
 800fade:	2101      	movs	r1, #1
 800fae0:	ec59 8b10 	vmov	r8, r9, d0
 800fae4:	4616      	mov	r6, r2
 800fae6:	f7ff fc13 	bl	800f310 <_Balloc>
 800faea:	4604      	mov	r4, r0
 800faec:	b930      	cbnz	r0, 800fafc <__d2b+0x24>
 800faee:	4602      	mov	r2, r0
 800faf0:	4b23      	ldr	r3, [pc, #140]	@ (800fb80 <__d2b+0xa8>)
 800faf2:	4824      	ldr	r0, [pc, #144]	@ (800fb84 <__d2b+0xac>)
 800faf4:	f240 310f 	movw	r1, #783	@ 0x30f
 800faf8:	f001 f996 	bl	8010e28 <__assert_func>
 800fafc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fb00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb04:	b10d      	cbz	r5, 800fb0a <__d2b+0x32>
 800fb06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb0a:	9301      	str	r3, [sp, #4]
 800fb0c:	f1b8 0300 	subs.w	r3, r8, #0
 800fb10:	d023      	beq.n	800fb5a <__d2b+0x82>
 800fb12:	4668      	mov	r0, sp
 800fb14:	9300      	str	r3, [sp, #0]
 800fb16:	f7ff fd0c 	bl	800f532 <__lo0bits>
 800fb1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fb1e:	b1d0      	cbz	r0, 800fb56 <__d2b+0x7e>
 800fb20:	f1c0 0320 	rsb	r3, r0, #32
 800fb24:	fa02 f303 	lsl.w	r3, r2, r3
 800fb28:	430b      	orrs	r3, r1
 800fb2a:	40c2      	lsrs	r2, r0
 800fb2c:	6163      	str	r3, [r4, #20]
 800fb2e:	9201      	str	r2, [sp, #4]
 800fb30:	9b01      	ldr	r3, [sp, #4]
 800fb32:	61a3      	str	r3, [r4, #24]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	bf0c      	ite	eq
 800fb38:	2201      	moveq	r2, #1
 800fb3a:	2202      	movne	r2, #2
 800fb3c:	6122      	str	r2, [r4, #16]
 800fb3e:	b1a5      	cbz	r5, 800fb6a <__d2b+0x92>
 800fb40:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fb44:	4405      	add	r5, r0
 800fb46:	603d      	str	r5, [r7, #0]
 800fb48:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fb4c:	6030      	str	r0, [r6, #0]
 800fb4e:	4620      	mov	r0, r4
 800fb50:	b003      	add	sp, #12
 800fb52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb56:	6161      	str	r1, [r4, #20]
 800fb58:	e7ea      	b.n	800fb30 <__d2b+0x58>
 800fb5a:	a801      	add	r0, sp, #4
 800fb5c:	f7ff fce9 	bl	800f532 <__lo0bits>
 800fb60:	9b01      	ldr	r3, [sp, #4]
 800fb62:	6163      	str	r3, [r4, #20]
 800fb64:	3020      	adds	r0, #32
 800fb66:	2201      	movs	r2, #1
 800fb68:	e7e8      	b.n	800fb3c <__d2b+0x64>
 800fb6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fb72:	6038      	str	r0, [r7, #0]
 800fb74:	6918      	ldr	r0, [r3, #16]
 800fb76:	f7ff fcbd 	bl	800f4f4 <__hi0bits>
 800fb7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb7e:	e7e5      	b.n	800fb4c <__d2b+0x74>
 800fb80:	08011ef0 	.word	0x08011ef0
 800fb84:	08011f01 	.word	0x08011f01

0800fb88 <__ratio>:
 800fb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb8c:	b085      	sub	sp, #20
 800fb8e:	e9cd 1000 	strd	r1, r0, [sp]
 800fb92:	a902      	add	r1, sp, #8
 800fb94:	f7ff ff56 	bl	800fa44 <__b2d>
 800fb98:	9800      	ldr	r0, [sp, #0]
 800fb9a:	a903      	add	r1, sp, #12
 800fb9c:	ec55 4b10 	vmov	r4, r5, d0
 800fba0:	f7ff ff50 	bl	800fa44 <__b2d>
 800fba4:	9b01      	ldr	r3, [sp, #4]
 800fba6:	6919      	ldr	r1, [r3, #16]
 800fba8:	9b00      	ldr	r3, [sp, #0]
 800fbaa:	691b      	ldr	r3, [r3, #16]
 800fbac:	1ac9      	subs	r1, r1, r3
 800fbae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fbb2:	1a9b      	subs	r3, r3, r2
 800fbb4:	ec5b ab10 	vmov	sl, fp, d0
 800fbb8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	bfce      	itee	gt
 800fbc0:	462a      	movgt	r2, r5
 800fbc2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fbc6:	465a      	movle	r2, fp
 800fbc8:	462f      	mov	r7, r5
 800fbca:	46d9      	mov	r9, fp
 800fbcc:	bfcc      	ite	gt
 800fbce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fbd2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fbd6:	464b      	mov	r3, r9
 800fbd8:	4652      	mov	r2, sl
 800fbda:	4620      	mov	r0, r4
 800fbdc:	4639      	mov	r1, r7
 800fbde:	f7f0 fe5d 	bl	800089c <__aeabi_ddiv>
 800fbe2:	ec41 0b10 	vmov	d0, r0, r1
 800fbe6:	b005      	add	sp, #20
 800fbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbec <__copybits>:
 800fbec:	3901      	subs	r1, #1
 800fbee:	b570      	push	{r4, r5, r6, lr}
 800fbf0:	1149      	asrs	r1, r1, #5
 800fbf2:	6914      	ldr	r4, [r2, #16]
 800fbf4:	3101      	adds	r1, #1
 800fbf6:	f102 0314 	add.w	r3, r2, #20
 800fbfa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fbfe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fc02:	1f05      	subs	r5, r0, #4
 800fc04:	42a3      	cmp	r3, r4
 800fc06:	d30c      	bcc.n	800fc22 <__copybits+0x36>
 800fc08:	1aa3      	subs	r3, r4, r2
 800fc0a:	3b11      	subs	r3, #17
 800fc0c:	f023 0303 	bic.w	r3, r3, #3
 800fc10:	3211      	adds	r2, #17
 800fc12:	42a2      	cmp	r2, r4
 800fc14:	bf88      	it	hi
 800fc16:	2300      	movhi	r3, #0
 800fc18:	4418      	add	r0, r3
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	4288      	cmp	r0, r1
 800fc1e:	d305      	bcc.n	800fc2c <__copybits+0x40>
 800fc20:	bd70      	pop	{r4, r5, r6, pc}
 800fc22:	f853 6b04 	ldr.w	r6, [r3], #4
 800fc26:	f845 6f04 	str.w	r6, [r5, #4]!
 800fc2a:	e7eb      	b.n	800fc04 <__copybits+0x18>
 800fc2c:	f840 3b04 	str.w	r3, [r0], #4
 800fc30:	e7f4      	b.n	800fc1c <__copybits+0x30>

0800fc32 <__any_on>:
 800fc32:	f100 0214 	add.w	r2, r0, #20
 800fc36:	6900      	ldr	r0, [r0, #16]
 800fc38:	114b      	asrs	r3, r1, #5
 800fc3a:	4298      	cmp	r0, r3
 800fc3c:	b510      	push	{r4, lr}
 800fc3e:	db11      	blt.n	800fc64 <__any_on+0x32>
 800fc40:	dd0a      	ble.n	800fc58 <__any_on+0x26>
 800fc42:	f011 011f 	ands.w	r1, r1, #31
 800fc46:	d007      	beq.n	800fc58 <__any_on+0x26>
 800fc48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fc4c:	fa24 f001 	lsr.w	r0, r4, r1
 800fc50:	fa00 f101 	lsl.w	r1, r0, r1
 800fc54:	428c      	cmp	r4, r1
 800fc56:	d10b      	bne.n	800fc70 <__any_on+0x3e>
 800fc58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d803      	bhi.n	800fc68 <__any_on+0x36>
 800fc60:	2000      	movs	r0, #0
 800fc62:	bd10      	pop	{r4, pc}
 800fc64:	4603      	mov	r3, r0
 800fc66:	e7f7      	b.n	800fc58 <__any_on+0x26>
 800fc68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc6c:	2900      	cmp	r1, #0
 800fc6e:	d0f5      	beq.n	800fc5c <__any_on+0x2a>
 800fc70:	2001      	movs	r0, #1
 800fc72:	e7f6      	b.n	800fc62 <__any_on+0x30>

0800fc74 <sulp>:
 800fc74:	b570      	push	{r4, r5, r6, lr}
 800fc76:	4604      	mov	r4, r0
 800fc78:	460d      	mov	r5, r1
 800fc7a:	ec45 4b10 	vmov	d0, r4, r5
 800fc7e:	4616      	mov	r6, r2
 800fc80:	f7ff feba 	bl	800f9f8 <__ulp>
 800fc84:	ec51 0b10 	vmov	r0, r1, d0
 800fc88:	b17e      	cbz	r6, 800fcaa <sulp+0x36>
 800fc8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fc8e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	dd09      	ble.n	800fcaa <sulp+0x36>
 800fc96:	051b      	lsls	r3, r3, #20
 800fc98:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800fc9c:	2400      	movs	r4, #0
 800fc9e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800fca2:	4622      	mov	r2, r4
 800fca4:	462b      	mov	r3, r5
 800fca6:	f7f0 fccf 	bl	8000648 <__aeabi_dmul>
 800fcaa:	ec41 0b10 	vmov	d0, r0, r1
 800fcae:	bd70      	pop	{r4, r5, r6, pc}

0800fcb0 <_strtod_l>:
 800fcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcb4:	b09f      	sub	sp, #124	@ 0x7c
 800fcb6:	460c      	mov	r4, r1
 800fcb8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800fcba:	2200      	movs	r2, #0
 800fcbc:	921a      	str	r2, [sp, #104]	@ 0x68
 800fcbe:	9005      	str	r0, [sp, #20]
 800fcc0:	f04f 0a00 	mov.w	sl, #0
 800fcc4:	f04f 0b00 	mov.w	fp, #0
 800fcc8:	460a      	mov	r2, r1
 800fcca:	9219      	str	r2, [sp, #100]	@ 0x64
 800fccc:	7811      	ldrb	r1, [r2, #0]
 800fcce:	292b      	cmp	r1, #43	@ 0x2b
 800fcd0:	d04a      	beq.n	800fd68 <_strtod_l+0xb8>
 800fcd2:	d838      	bhi.n	800fd46 <_strtod_l+0x96>
 800fcd4:	290d      	cmp	r1, #13
 800fcd6:	d832      	bhi.n	800fd3e <_strtod_l+0x8e>
 800fcd8:	2908      	cmp	r1, #8
 800fcda:	d832      	bhi.n	800fd42 <_strtod_l+0x92>
 800fcdc:	2900      	cmp	r1, #0
 800fcde:	d03b      	beq.n	800fd58 <_strtod_l+0xa8>
 800fce0:	2200      	movs	r2, #0
 800fce2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fce4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800fce6:	782a      	ldrb	r2, [r5, #0]
 800fce8:	2a30      	cmp	r2, #48	@ 0x30
 800fcea:	f040 80b3 	bne.w	800fe54 <_strtod_l+0x1a4>
 800fcee:	786a      	ldrb	r2, [r5, #1]
 800fcf0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fcf4:	2a58      	cmp	r2, #88	@ 0x58
 800fcf6:	d16e      	bne.n	800fdd6 <_strtod_l+0x126>
 800fcf8:	9302      	str	r3, [sp, #8]
 800fcfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fcfc:	9301      	str	r3, [sp, #4]
 800fcfe:	ab1a      	add	r3, sp, #104	@ 0x68
 800fd00:	9300      	str	r3, [sp, #0]
 800fd02:	4a8e      	ldr	r2, [pc, #568]	@ (800ff3c <_strtod_l+0x28c>)
 800fd04:	9805      	ldr	r0, [sp, #20]
 800fd06:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fd08:	a919      	add	r1, sp, #100	@ 0x64
 800fd0a:	f001 f927 	bl	8010f5c <__gethex>
 800fd0e:	f010 060f 	ands.w	r6, r0, #15
 800fd12:	4604      	mov	r4, r0
 800fd14:	d005      	beq.n	800fd22 <_strtod_l+0x72>
 800fd16:	2e06      	cmp	r6, #6
 800fd18:	d128      	bne.n	800fd6c <_strtod_l+0xbc>
 800fd1a:	3501      	adds	r5, #1
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	9519      	str	r5, [sp, #100]	@ 0x64
 800fd20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f040 858e 	bne.w	8010846 <_strtod_l+0xb96>
 800fd2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd2c:	b1cb      	cbz	r3, 800fd62 <_strtod_l+0xb2>
 800fd2e:	4652      	mov	r2, sl
 800fd30:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800fd34:	ec43 2b10 	vmov	d0, r2, r3
 800fd38:	b01f      	add	sp, #124	@ 0x7c
 800fd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd3e:	2920      	cmp	r1, #32
 800fd40:	d1ce      	bne.n	800fce0 <_strtod_l+0x30>
 800fd42:	3201      	adds	r2, #1
 800fd44:	e7c1      	b.n	800fcca <_strtod_l+0x1a>
 800fd46:	292d      	cmp	r1, #45	@ 0x2d
 800fd48:	d1ca      	bne.n	800fce0 <_strtod_l+0x30>
 800fd4a:	2101      	movs	r1, #1
 800fd4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fd4e:	1c51      	adds	r1, r2, #1
 800fd50:	9119      	str	r1, [sp, #100]	@ 0x64
 800fd52:	7852      	ldrb	r2, [r2, #1]
 800fd54:	2a00      	cmp	r2, #0
 800fd56:	d1c5      	bne.n	800fce4 <_strtod_l+0x34>
 800fd58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd5a:	9419      	str	r4, [sp, #100]	@ 0x64
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f040 8570 	bne.w	8010842 <_strtod_l+0xb92>
 800fd62:	4652      	mov	r2, sl
 800fd64:	465b      	mov	r3, fp
 800fd66:	e7e5      	b.n	800fd34 <_strtod_l+0x84>
 800fd68:	2100      	movs	r1, #0
 800fd6a:	e7ef      	b.n	800fd4c <_strtod_l+0x9c>
 800fd6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fd6e:	b13a      	cbz	r2, 800fd80 <_strtod_l+0xd0>
 800fd70:	2135      	movs	r1, #53	@ 0x35
 800fd72:	a81c      	add	r0, sp, #112	@ 0x70
 800fd74:	f7ff ff3a 	bl	800fbec <__copybits>
 800fd78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd7a:	9805      	ldr	r0, [sp, #20]
 800fd7c:	f7ff fb08 	bl	800f390 <_Bfree>
 800fd80:	3e01      	subs	r6, #1
 800fd82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fd84:	2e04      	cmp	r6, #4
 800fd86:	d806      	bhi.n	800fd96 <_strtod_l+0xe6>
 800fd88:	e8df f006 	tbb	[pc, r6]
 800fd8c:	201d0314 	.word	0x201d0314
 800fd90:	14          	.byte	0x14
 800fd91:	00          	.byte	0x00
 800fd92:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800fd96:	05e1      	lsls	r1, r4, #23
 800fd98:	bf48      	it	mi
 800fd9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800fd9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fda2:	0d1b      	lsrs	r3, r3, #20
 800fda4:	051b      	lsls	r3, r3, #20
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d1bb      	bne.n	800fd22 <_strtod_l+0x72>
 800fdaa:	f7fe fb31 	bl	800e410 <__errno>
 800fdae:	2322      	movs	r3, #34	@ 0x22
 800fdb0:	6003      	str	r3, [r0, #0]
 800fdb2:	e7b6      	b.n	800fd22 <_strtod_l+0x72>
 800fdb4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800fdb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fdbc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fdc0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fdc4:	e7e7      	b.n	800fd96 <_strtod_l+0xe6>
 800fdc6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ff44 <_strtod_l+0x294>
 800fdca:	e7e4      	b.n	800fd96 <_strtod_l+0xe6>
 800fdcc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800fdd0:	f04f 3aff 	mov.w	sl, #4294967295
 800fdd4:	e7df      	b.n	800fd96 <_strtod_l+0xe6>
 800fdd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fdd8:	1c5a      	adds	r2, r3, #1
 800fdda:	9219      	str	r2, [sp, #100]	@ 0x64
 800fddc:	785b      	ldrb	r3, [r3, #1]
 800fdde:	2b30      	cmp	r3, #48	@ 0x30
 800fde0:	d0f9      	beq.n	800fdd6 <_strtod_l+0x126>
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d09d      	beq.n	800fd22 <_strtod_l+0x72>
 800fde6:	2301      	movs	r3, #1
 800fde8:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fdec:	930c      	str	r3, [sp, #48]	@ 0x30
 800fdee:	2300      	movs	r3, #0
 800fdf0:	9308      	str	r3, [sp, #32]
 800fdf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800fdf4:	461f      	mov	r7, r3
 800fdf6:	220a      	movs	r2, #10
 800fdf8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800fdfa:	7805      	ldrb	r5, [r0, #0]
 800fdfc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800fe00:	b2d9      	uxtb	r1, r3
 800fe02:	2909      	cmp	r1, #9
 800fe04:	d928      	bls.n	800fe58 <_strtod_l+0x1a8>
 800fe06:	494e      	ldr	r1, [pc, #312]	@ (800ff40 <_strtod_l+0x290>)
 800fe08:	2201      	movs	r2, #1
 800fe0a:	f000 ffd5 	bl	8010db8 <strncmp>
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	d032      	beq.n	800fe78 <_strtod_l+0x1c8>
 800fe12:	2000      	movs	r0, #0
 800fe14:	462a      	mov	r2, r5
 800fe16:	4681      	mov	r9, r0
 800fe18:	463d      	mov	r5, r7
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	2a65      	cmp	r2, #101	@ 0x65
 800fe1e:	d001      	beq.n	800fe24 <_strtod_l+0x174>
 800fe20:	2a45      	cmp	r2, #69	@ 0x45
 800fe22:	d114      	bne.n	800fe4e <_strtod_l+0x19e>
 800fe24:	b91d      	cbnz	r5, 800fe2e <_strtod_l+0x17e>
 800fe26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe28:	4302      	orrs	r2, r0
 800fe2a:	d095      	beq.n	800fd58 <_strtod_l+0xa8>
 800fe2c:	2500      	movs	r5, #0
 800fe2e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fe30:	1c62      	adds	r2, r4, #1
 800fe32:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe34:	7862      	ldrb	r2, [r4, #1]
 800fe36:	2a2b      	cmp	r2, #43	@ 0x2b
 800fe38:	d077      	beq.n	800ff2a <_strtod_l+0x27a>
 800fe3a:	2a2d      	cmp	r2, #45	@ 0x2d
 800fe3c:	d07b      	beq.n	800ff36 <_strtod_l+0x286>
 800fe3e:	f04f 0c00 	mov.w	ip, #0
 800fe42:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800fe46:	2909      	cmp	r1, #9
 800fe48:	f240 8082 	bls.w	800ff50 <_strtod_l+0x2a0>
 800fe4c:	9419      	str	r4, [sp, #100]	@ 0x64
 800fe4e:	f04f 0800 	mov.w	r8, #0
 800fe52:	e0a2      	b.n	800ff9a <_strtod_l+0x2ea>
 800fe54:	2300      	movs	r3, #0
 800fe56:	e7c7      	b.n	800fde8 <_strtod_l+0x138>
 800fe58:	2f08      	cmp	r7, #8
 800fe5a:	bfd5      	itete	le
 800fe5c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800fe5e:	9908      	ldrgt	r1, [sp, #32]
 800fe60:	fb02 3301 	mlale	r3, r2, r1, r3
 800fe64:	fb02 3301 	mlagt	r3, r2, r1, r3
 800fe68:	f100 0001 	add.w	r0, r0, #1
 800fe6c:	bfd4      	ite	le
 800fe6e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800fe70:	9308      	strgt	r3, [sp, #32]
 800fe72:	3701      	adds	r7, #1
 800fe74:	9019      	str	r0, [sp, #100]	@ 0x64
 800fe76:	e7bf      	b.n	800fdf8 <_strtod_l+0x148>
 800fe78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe7a:	1c5a      	adds	r2, r3, #1
 800fe7c:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe7e:	785a      	ldrb	r2, [r3, #1]
 800fe80:	b37f      	cbz	r7, 800fee2 <_strtod_l+0x232>
 800fe82:	4681      	mov	r9, r0
 800fe84:	463d      	mov	r5, r7
 800fe86:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800fe8a:	2b09      	cmp	r3, #9
 800fe8c:	d912      	bls.n	800feb4 <_strtod_l+0x204>
 800fe8e:	2301      	movs	r3, #1
 800fe90:	e7c4      	b.n	800fe1c <_strtod_l+0x16c>
 800fe92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe94:	1c5a      	adds	r2, r3, #1
 800fe96:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe98:	785a      	ldrb	r2, [r3, #1]
 800fe9a:	3001      	adds	r0, #1
 800fe9c:	2a30      	cmp	r2, #48	@ 0x30
 800fe9e:	d0f8      	beq.n	800fe92 <_strtod_l+0x1e2>
 800fea0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800fea4:	2b08      	cmp	r3, #8
 800fea6:	f200 84d3 	bhi.w	8010850 <_strtod_l+0xba0>
 800feaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800feac:	930c      	str	r3, [sp, #48]	@ 0x30
 800feae:	4681      	mov	r9, r0
 800feb0:	2000      	movs	r0, #0
 800feb2:	4605      	mov	r5, r0
 800feb4:	3a30      	subs	r2, #48	@ 0x30
 800feb6:	f100 0301 	add.w	r3, r0, #1
 800feba:	d02a      	beq.n	800ff12 <_strtod_l+0x262>
 800febc:	4499      	add	r9, r3
 800febe:	eb00 0c05 	add.w	ip, r0, r5
 800fec2:	462b      	mov	r3, r5
 800fec4:	210a      	movs	r1, #10
 800fec6:	4563      	cmp	r3, ip
 800fec8:	d10d      	bne.n	800fee6 <_strtod_l+0x236>
 800feca:	1c69      	adds	r1, r5, #1
 800fecc:	4401      	add	r1, r0
 800fece:	4428      	add	r0, r5
 800fed0:	2808      	cmp	r0, #8
 800fed2:	dc16      	bgt.n	800ff02 <_strtod_l+0x252>
 800fed4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fed6:	230a      	movs	r3, #10
 800fed8:	fb03 2300 	mla	r3, r3, r0, r2
 800fedc:	930a      	str	r3, [sp, #40]	@ 0x28
 800fede:	2300      	movs	r3, #0
 800fee0:	e018      	b.n	800ff14 <_strtod_l+0x264>
 800fee2:	4638      	mov	r0, r7
 800fee4:	e7da      	b.n	800fe9c <_strtod_l+0x1ec>
 800fee6:	2b08      	cmp	r3, #8
 800fee8:	f103 0301 	add.w	r3, r3, #1
 800feec:	dc03      	bgt.n	800fef6 <_strtod_l+0x246>
 800feee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800fef0:	434e      	muls	r6, r1
 800fef2:	960a      	str	r6, [sp, #40]	@ 0x28
 800fef4:	e7e7      	b.n	800fec6 <_strtod_l+0x216>
 800fef6:	2b10      	cmp	r3, #16
 800fef8:	bfde      	ittt	le
 800fefa:	9e08      	ldrle	r6, [sp, #32]
 800fefc:	434e      	mulle	r6, r1
 800fefe:	9608      	strle	r6, [sp, #32]
 800ff00:	e7e1      	b.n	800fec6 <_strtod_l+0x216>
 800ff02:	280f      	cmp	r0, #15
 800ff04:	dceb      	bgt.n	800fede <_strtod_l+0x22e>
 800ff06:	9808      	ldr	r0, [sp, #32]
 800ff08:	230a      	movs	r3, #10
 800ff0a:	fb03 2300 	mla	r3, r3, r0, r2
 800ff0e:	9308      	str	r3, [sp, #32]
 800ff10:	e7e5      	b.n	800fede <_strtod_l+0x22e>
 800ff12:	4629      	mov	r1, r5
 800ff14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff16:	1c50      	adds	r0, r2, #1
 800ff18:	9019      	str	r0, [sp, #100]	@ 0x64
 800ff1a:	7852      	ldrb	r2, [r2, #1]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	460d      	mov	r5, r1
 800ff20:	e7b1      	b.n	800fe86 <_strtod_l+0x1d6>
 800ff22:	f04f 0900 	mov.w	r9, #0
 800ff26:	2301      	movs	r3, #1
 800ff28:	e77d      	b.n	800fe26 <_strtod_l+0x176>
 800ff2a:	f04f 0c00 	mov.w	ip, #0
 800ff2e:	1ca2      	adds	r2, r4, #2
 800ff30:	9219      	str	r2, [sp, #100]	@ 0x64
 800ff32:	78a2      	ldrb	r2, [r4, #2]
 800ff34:	e785      	b.n	800fe42 <_strtod_l+0x192>
 800ff36:	f04f 0c01 	mov.w	ip, #1
 800ff3a:	e7f8      	b.n	800ff2e <_strtod_l+0x27e>
 800ff3c:	08012070 	.word	0x08012070
 800ff40:	08012058 	.word	0x08012058
 800ff44:	7ff00000 	.word	0x7ff00000
 800ff48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff4a:	1c51      	adds	r1, r2, #1
 800ff4c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ff4e:	7852      	ldrb	r2, [r2, #1]
 800ff50:	2a30      	cmp	r2, #48	@ 0x30
 800ff52:	d0f9      	beq.n	800ff48 <_strtod_l+0x298>
 800ff54:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ff58:	2908      	cmp	r1, #8
 800ff5a:	f63f af78 	bhi.w	800fe4e <_strtod_l+0x19e>
 800ff5e:	3a30      	subs	r2, #48	@ 0x30
 800ff60:	920e      	str	r2, [sp, #56]	@ 0x38
 800ff62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff64:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ff66:	f04f 080a 	mov.w	r8, #10
 800ff6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff6c:	1c56      	adds	r6, r2, #1
 800ff6e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ff70:	7852      	ldrb	r2, [r2, #1]
 800ff72:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ff76:	f1be 0f09 	cmp.w	lr, #9
 800ff7a:	d939      	bls.n	800fff0 <_strtod_l+0x340>
 800ff7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ff7e:	1a76      	subs	r6, r6, r1
 800ff80:	2e08      	cmp	r6, #8
 800ff82:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ff86:	dc03      	bgt.n	800ff90 <_strtod_l+0x2e0>
 800ff88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ff8a:	4588      	cmp	r8, r1
 800ff8c:	bfa8      	it	ge
 800ff8e:	4688      	movge	r8, r1
 800ff90:	f1bc 0f00 	cmp.w	ip, #0
 800ff94:	d001      	beq.n	800ff9a <_strtod_l+0x2ea>
 800ff96:	f1c8 0800 	rsb	r8, r8, #0
 800ff9a:	2d00      	cmp	r5, #0
 800ff9c:	d14e      	bne.n	801003c <_strtod_l+0x38c>
 800ff9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ffa0:	4308      	orrs	r0, r1
 800ffa2:	f47f aebe 	bne.w	800fd22 <_strtod_l+0x72>
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	f47f aed6 	bne.w	800fd58 <_strtod_l+0xa8>
 800ffac:	2a69      	cmp	r2, #105	@ 0x69
 800ffae:	d028      	beq.n	8010002 <_strtod_l+0x352>
 800ffb0:	dc25      	bgt.n	800fffe <_strtod_l+0x34e>
 800ffb2:	2a49      	cmp	r2, #73	@ 0x49
 800ffb4:	d025      	beq.n	8010002 <_strtod_l+0x352>
 800ffb6:	2a4e      	cmp	r2, #78	@ 0x4e
 800ffb8:	f47f aece 	bne.w	800fd58 <_strtod_l+0xa8>
 800ffbc:	499b      	ldr	r1, [pc, #620]	@ (801022c <_strtod_l+0x57c>)
 800ffbe:	a819      	add	r0, sp, #100	@ 0x64
 800ffc0:	f001 f9ee 	bl	80113a0 <__match>
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	f43f aec7 	beq.w	800fd58 <_strtod_l+0xa8>
 800ffca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	2b28      	cmp	r3, #40	@ 0x28
 800ffd0:	d12e      	bne.n	8010030 <_strtod_l+0x380>
 800ffd2:	4997      	ldr	r1, [pc, #604]	@ (8010230 <_strtod_l+0x580>)
 800ffd4:	aa1c      	add	r2, sp, #112	@ 0x70
 800ffd6:	a819      	add	r0, sp, #100	@ 0x64
 800ffd8:	f001 f9f6 	bl	80113c8 <__hexnan>
 800ffdc:	2805      	cmp	r0, #5
 800ffde:	d127      	bne.n	8010030 <_strtod_l+0x380>
 800ffe0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ffe2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ffe6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ffea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ffee:	e698      	b.n	800fd22 <_strtod_l+0x72>
 800fff0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fff2:	fb08 2101 	mla	r1, r8, r1, r2
 800fff6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800fffa:	920e      	str	r2, [sp, #56]	@ 0x38
 800fffc:	e7b5      	b.n	800ff6a <_strtod_l+0x2ba>
 800fffe:	2a6e      	cmp	r2, #110	@ 0x6e
 8010000:	e7da      	b.n	800ffb8 <_strtod_l+0x308>
 8010002:	498c      	ldr	r1, [pc, #560]	@ (8010234 <_strtod_l+0x584>)
 8010004:	a819      	add	r0, sp, #100	@ 0x64
 8010006:	f001 f9cb 	bl	80113a0 <__match>
 801000a:	2800      	cmp	r0, #0
 801000c:	f43f aea4 	beq.w	800fd58 <_strtod_l+0xa8>
 8010010:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010012:	4989      	ldr	r1, [pc, #548]	@ (8010238 <_strtod_l+0x588>)
 8010014:	3b01      	subs	r3, #1
 8010016:	a819      	add	r0, sp, #100	@ 0x64
 8010018:	9319      	str	r3, [sp, #100]	@ 0x64
 801001a:	f001 f9c1 	bl	80113a0 <__match>
 801001e:	b910      	cbnz	r0, 8010026 <_strtod_l+0x376>
 8010020:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010022:	3301      	adds	r3, #1
 8010024:	9319      	str	r3, [sp, #100]	@ 0x64
 8010026:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010248 <_strtod_l+0x598>
 801002a:	f04f 0a00 	mov.w	sl, #0
 801002e:	e678      	b.n	800fd22 <_strtod_l+0x72>
 8010030:	4882      	ldr	r0, [pc, #520]	@ (801023c <_strtod_l+0x58c>)
 8010032:	f000 fef1 	bl	8010e18 <nan>
 8010036:	ec5b ab10 	vmov	sl, fp, d0
 801003a:	e672      	b.n	800fd22 <_strtod_l+0x72>
 801003c:	eba8 0309 	sub.w	r3, r8, r9
 8010040:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010042:	9309      	str	r3, [sp, #36]	@ 0x24
 8010044:	2f00      	cmp	r7, #0
 8010046:	bf08      	it	eq
 8010048:	462f      	moveq	r7, r5
 801004a:	2d10      	cmp	r5, #16
 801004c:	462c      	mov	r4, r5
 801004e:	bfa8      	it	ge
 8010050:	2410      	movge	r4, #16
 8010052:	f7f0 fa7f 	bl	8000554 <__aeabi_ui2d>
 8010056:	2d09      	cmp	r5, #9
 8010058:	4682      	mov	sl, r0
 801005a:	468b      	mov	fp, r1
 801005c:	dc13      	bgt.n	8010086 <_strtod_l+0x3d6>
 801005e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010060:	2b00      	cmp	r3, #0
 8010062:	f43f ae5e 	beq.w	800fd22 <_strtod_l+0x72>
 8010066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010068:	dd78      	ble.n	801015c <_strtod_l+0x4ac>
 801006a:	2b16      	cmp	r3, #22
 801006c:	dc5f      	bgt.n	801012e <_strtod_l+0x47e>
 801006e:	4974      	ldr	r1, [pc, #464]	@ (8010240 <_strtod_l+0x590>)
 8010070:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010074:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010078:	4652      	mov	r2, sl
 801007a:	465b      	mov	r3, fp
 801007c:	f7f0 fae4 	bl	8000648 <__aeabi_dmul>
 8010080:	4682      	mov	sl, r0
 8010082:	468b      	mov	fp, r1
 8010084:	e64d      	b.n	800fd22 <_strtod_l+0x72>
 8010086:	4b6e      	ldr	r3, [pc, #440]	@ (8010240 <_strtod_l+0x590>)
 8010088:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801008c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010090:	f7f0 fada 	bl	8000648 <__aeabi_dmul>
 8010094:	4682      	mov	sl, r0
 8010096:	9808      	ldr	r0, [sp, #32]
 8010098:	468b      	mov	fp, r1
 801009a:	f7f0 fa5b 	bl	8000554 <__aeabi_ui2d>
 801009e:	4602      	mov	r2, r0
 80100a0:	460b      	mov	r3, r1
 80100a2:	4650      	mov	r0, sl
 80100a4:	4659      	mov	r1, fp
 80100a6:	f7f0 f919 	bl	80002dc <__adddf3>
 80100aa:	2d0f      	cmp	r5, #15
 80100ac:	4682      	mov	sl, r0
 80100ae:	468b      	mov	fp, r1
 80100b0:	ddd5      	ble.n	801005e <_strtod_l+0x3ae>
 80100b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100b4:	1b2c      	subs	r4, r5, r4
 80100b6:	441c      	add	r4, r3
 80100b8:	2c00      	cmp	r4, #0
 80100ba:	f340 8096 	ble.w	80101ea <_strtod_l+0x53a>
 80100be:	f014 030f 	ands.w	r3, r4, #15
 80100c2:	d00a      	beq.n	80100da <_strtod_l+0x42a>
 80100c4:	495e      	ldr	r1, [pc, #376]	@ (8010240 <_strtod_l+0x590>)
 80100c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80100ca:	4652      	mov	r2, sl
 80100cc:	465b      	mov	r3, fp
 80100ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100d2:	f7f0 fab9 	bl	8000648 <__aeabi_dmul>
 80100d6:	4682      	mov	sl, r0
 80100d8:	468b      	mov	fp, r1
 80100da:	f034 040f 	bics.w	r4, r4, #15
 80100de:	d073      	beq.n	80101c8 <_strtod_l+0x518>
 80100e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80100e4:	dd48      	ble.n	8010178 <_strtod_l+0x4c8>
 80100e6:	2400      	movs	r4, #0
 80100e8:	46a0      	mov	r8, r4
 80100ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80100ec:	46a1      	mov	r9, r4
 80100ee:	9a05      	ldr	r2, [sp, #20]
 80100f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010248 <_strtod_l+0x598>
 80100f4:	2322      	movs	r3, #34	@ 0x22
 80100f6:	6013      	str	r3, [r2, #0]
 80100f8:	f04f 0a00 	mov.w	sl, #0
 80100fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80100fe:	2b00      	cmp	r3, #0
 8010100:	f43f ae0f 	beq.w	800fd22 <_strtod_l+0x72>
 8010104:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010106:	9805      	ldr	r0, [sp, #20]
 8010108:	f7ff f942 	bl	800f390 <_Bfree>
 801010c:	9805      	ldr	r0, [sp, #20]
 801010e:	4649      	mov	r1, r9
 8010110:	f7ff f93e 	bl	800f390 <_Bfree>
 8010114:	9805      	ldr	r0, [sp, #20]
 8010116:	4641      	mov	r1, r8
 8010118:	f7ff f93a 	bl	800f390 <_Bfree>
 801011c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801011e:	9805      	ldr	r0, [sp, #20]
 8010120:	f7ff f936 	bl	800f390 <_Bfree>
 8010124:	9805      	ldr	r0, [sp, #20]
 8010126:	4621      	mov	r1, r4
 8010128:	f7ff f932 	bl	800f390 <_Bfree>
 801012c:	e5f9      	b.n	800fd22 <_strtod_l+0x72>
 801012e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010130:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010134:	4293      	cmp	r3, r2
 8010136:	dbbc      	blt.n	80100b2 <_strtod_l+0x402>
 8010138:	4c41      	ldr	r4, [pc, #260]	@ (8010240 <_strtod_l+0x590>)
 801013a:	f1c5 050f 	rsb	r5, r5, #15
 801013e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010142:	4652      	mov	r2, sl
 8010144:	465b      	mov	r3, fp
 8010146:	e9d1 0100 	ldrd	r0, r1, [r1]
 801014a:	f7f0 fa7d 	bl	8000648 <__aeabi_dmul>
 801014e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010150:	1b5d      	subs	r5, r3, r5
 8010152:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010156:	e9d4 2300 	ldrd	r2, r3, [r4]
 801015a:	e78f      	b.n	801007c <_strtod_l+0x3cc>
 801015c:	3316      	adds	r3, #22
 801015e:	dba8      	blt.n	80100b2 <_strtod_l+0x402>
 8010160:	4b37      	ldr	r3, [pc, #220]	@ (8010240 <_strtod_l+0x590>)
 8010162:	eba9 0808 	sub.w	r8, r9, r8
 8010166:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801016a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801016e:	4650      	mov	r0, sl
 8010170:	4659      	mov	r1, fp
 8010172:	f7f0 fb93 	bl	800089c <__aeabi_ddiv>
 8010176:	e783      	b.n	8010080 <_strtod_l+0x3d0>
 8010178:	4b32      	ldr	r3, [pc, #200]	@ (8010244 <_strtod_l+0x594>)
 801017a:	9308      	str	r3, [sp, #32]
 801017c:	2300      	movs	r3, #0
 801017e:	1124      	asrs	r4, r4, #4
 8010180:	4650      	mov	r0, sl
 8010182:	4659      	mov	r1, fp
 8010184:	461e      	mov	r6, r3
 8010186:	2c01      	cmp	r4, #1
 8010188:	dc21      	bgt.n	80101ce <_strtod_l+0x51e>
 801018a:	b10b      	cbz	r3, 8010190 <_strtod_l+0x4e0>
 801018c:	4682      	mov	sl, r0
 801018e:	468b      	mov	fp, r1
 8010190:	492c      	ldr	r1, [pc, #176]	@ (8010244 <_strtod_l+0x594>)
 8010192:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010196:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801019a:	4652      	mov	r2, sl
 801019c:	465b      	mov	r3, fp
 801019e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101a2:	f7f0 fa51 	bl	8000648 <__aeabi_dmul>
 80101a6:	4b28      	ldr	r3, [pc, #160]	@ (8010248 <_strtod_l+0x598>)
 80101a8:	460a      	mov	r2, r1
 80101aa:	400b      	ands	r3, r1
 80101ac:	4927      	ldr	r1, [pc, #156]	@ (801024c <_strtod_l+0x59c>)
 80101ae:	428b      	cmp	r3, r1
 80101b0:	4682      	mov	sl, r0
 80101b2:	d898      	bhi.n	80100e6 <_strtod_l+0x436>
 80101b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80101b8:	428b      	cmp	r3, r1
 80101ba:	bf86      	itte	hi
 80101bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010250 <_strtod_l+0x5a0>
 80101c0:	f04f 3aff 	movhi.w	sl, #4294967295
 80101c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80101c8:	2300      	movs	r3, #0
 80101ca:	9308      	str	r3, [sp, #32]
 80101cc:	e07a      	b.n	80102c4 <_strtod_l+0x614>
 80101ce:	07e2      	lsls	r2, r4, #31
 80101d0:	d505      	bpl.n	80101de <_strtod_l+0x52e>
 80101d2:	9b08      	ldr	r3, [sp, #32]
 80101d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d8:	f7f0 fa36 	bl	8000648 <__aeabi_dmul>
 80101dc:	2301      	movs	r3, #1
 80101de:	9a08      	ldr	r2, [sp, #32]
 80101e0:	3208      	adds	r2, #8
 80101e2:	3601      	adds	r6, #1
 80101e4:	1064      	asrs	r4, r4, #1
 80101e6:	9208      	str	r2, [sp, #32]
 80101e8:	e7cd      	b.n	8010186 <_strtod_l+0x4d6>
 80101ea:	d0ed      	beq.n	80101c8 <_strtod_l+0x518>
 80101ec:	4264      	negs	r4, r4
 80101ee:	f014 020f 	ands.w	r2, r4, #15
 80101f2:	d00a      	beq.n	801020a <_strtod_l+0x55a>
 80101f4:	4b12      	ldr	r3, [pc, #72]	@ (8010240 <_strtod_l+0x590>)
 80101f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101fa:	4650      	mov	r0, sl
 80101fc:	4659      	mov	r1, fp
 80101fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010202:	f7f0 fb4b 	bl	800089c <__aeabi_ddiv>
 8010206:	4682      	mov	sl, r0
 8010208:	468b      	mov	fp, r1
 801020a:	1124      	asrs	r4, r4, #4
 801020c:	d0dc      	beq.n	80101c8 <_strtod_l+0x518>
 801020e:	2c1f      	cmp	r4, #31
 8010210:	dd20      	ble.n	8010254 <_strtod_l+0x5a4>
 8010212:	2400      	movs	r4, #0
 8010214:	46a0      	mov	r8, r4
 8010216:	940a      	str	r4, [sp, #40]	@ 0x28
 8010218:	46a1      	mov	r9, r4
 801021a:	9a05      	ldr	r2, [sp, #20]
 801021c:	2322      	movs	r3, #34	@ 0x22
 801021e:	f04f 0a00 	mov.w	sl, #0
 8010222:	f04f 0b00 	mov.w	fp, #0
 8010226:	6013      	str	r3, [r2, #0]
 8010228:	e768      	b.n	80100fc <_strtod_l+0x44c>
 801022a:	bf00      	nop
 801022c:	08011e48 	.word	0x08011e48
 8010230:	0801205c 	.word	0x0801205c
 8010234:	08011e40 	.word	0x08011e40
 8010238:	08011e77 	.word	0x08011e77
 801023c:	08012205 	.word	0x08012205
 8010240:	08011f90 	.word	0x08011f90
 8010244:	08011f68 	.word	0x08011f68
 8010248:	7ff00000 	.word	0x7ff00000
 801024c:	7ca00000 	.word	0x7ca00000
 8010250:	7fefffff 	.word	0x7fefffff
 8010254:	f014 0310 	ands.w	r3, r4, #16
 8010258:	bf18      	it	ne
 801025a:	236a      	movne	r3, #106	@ 0x6a
 801025c:	4ea9      	ldr	r6, [pc, #676]	@ (8010504 <_strtod_l+0x854>)
 801025e:	9308      	str	r3, [sp, #32]
 8010260:	4650      	mov	r0, sl
 8010262:	4659      	mov	r1, fp
 8010264:	2300      	movs	r3, #0
 8010266:	07e2      	lsls	r2, r4, #31
 8010268:	d504      	bpl.n	8010274 <_strtod_l+0x5c4>
 801026a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801026e:	f7f0 f9eb 	bl	8000648 <__aeabi_dmul>
 8010272:	2301      	movs	r3, #1
 8010274:	1064      	asrs	r4, r4, #1
 8010276:	f106 0608 	add.w	r6, r6, #8
 801027a:	d1f4      	bne.n	8010266 <_strtod_l+0x5b6>
 801027c:	b10b      	cbz	r3, 8010282 <_strtod_l+0x5d2>
 801027e:	4682      	mov	sl, r0
 8010280:	468b      	mov	fp, r1
 8010282:	9b08      	ldr	r3, [sp, #32]
 8010284:	b1b3      	cbz	r3, 80102b4 <_strtod_l+0x604>
 8010286:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801028a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801028e:	2b00      	cmp	r3, #0
 8010290:	4659      	mov	r1, fp
 8010292:	dd0f      	ble.n	80102b4 <_strtod_l+0x604>
 8010294:	2b1f      	cmp	r3, #31
 8010296:	dd55      	ble.n	8010344 <_strtod_l+0x694>
 8010298:	2b34      	cmp	r3, #52	@ 0x34
 801029a:	bfde      	ittt	le
 801029c:	f04f 33ff 	movle.w	r3, #4294967295
 80102a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80102a4:	4093      	lslle	r3, r2
 80102a6:	f04f 0a00 	mov.w	sl, #0
 80102aa:	bfcc      	ite	gt
 80102ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80102b0:	ea03 0b01 	andle.w	fp, r3, r1
 80102b4:	2200      	movs	r2, #0
 80102b6:	2300      	movs	r3, #0
 80102b8:	4650      	mov	r0, sl
 80102ba:	4659      	mov	r1, fp
 80102bc:	f7f0 fc2c 	bl	8000b18 <__aeabi_dcmpeq>
 80102c0:	2800      	cmp	r0, #0
 80102c2:	d1a6      	bne.n	8010212 <_strtod_l+0x562>
 80102c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80102ca:	9805      	ldr	r0, [sp, #20]
 80102cc:	462b      	mov	r3, r5
 80102ce:	463a      	mov	r2, r7
 80102d0:	f7ff f8c6 	bl	800f460 <__s2b>
 80102d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80102d6:	2800      	cmp	r0, #0
 80102d8:	f43f af05 	beq.w	80100e6 <_strtod_l+0x436>
 80102dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102de:	2a00      	cmp	r2, #0
 80102e0:	eba9 0308 	sub.w	r3, r9, r8
 80102e4:	bfa8      	it	ge
 80102e6:	2300      	movge	r3, #0
 80102e8:	9312      	str	r3, [sp, #72]	@ 0x48
 80102ea:	2400      	movs	r4, #0
 80102ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80102f0:	9316      	str	r3, [sp, #88]	@ 0x58
 80102f2:	46a0      	mov	r8, r4
 80102f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102f6:	9805      	ldr	r0, [sp, #20]
 80102f8:	6859      	ldr	r1, [r3, #4]
 80102fa:	f7ff f809 	bl	800f310 <_Balloc>
 80102fe:	4681      	mov	r9, r0
 8010300:	2800      	cmp	r0, #0
 8010302:	f43f aef4 	beq.w	80100ee <_strtod_l+0x43e>
 8010306:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010308:	691a      	ldr	r2, [r3, #16]
 801030a:	3202      	adds	r2, #2
 801030c:	f103 010c 	add.w	r1, r3, #12
 8010310:	0092      	lsls	r2, r2, #2
 8010312:	300c      	adds	r0, #12
 8010314:	f000 fd72 	bl	8010dfc <memcpy>
 8010318:	ec4b ab10 	vmov	d0, sl, fp
 801031c:	9805      	ldr	r0, [sp, #20]
 801031e:	aa1c      	add	r2, sp, #112	@ 0x70
 8010320:	a91b      	add	r1, sp, #108	@ 0x6c
 8010322:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010326:	f7ff fbd7 	bl	800fad8 <__d2b>
 801032a:	901a      	str	r0, [sp, #104]	@ 0x68
 801032c:	2800      	cmp	r0, #0
 801032e:	f43f aede 	beq.w	80100ee <_strtod_l+0x43e>
 8010332:	9805      	ldr	r0, [sp, #20]
 8010334:	2101      	movs	r1, #1
 8010336:	f7ff f929 	bl	800f58c <__i2b>
 801033a:	4680      	mov	r8, r0
 801033c:	b948      	cbnz	r0, 8010352 <_strtod_l+0x6a2>
 801033e:	f04f 0800 	mov.w	r8, #0
 8010342:	e6d4      	b.n	80100ee <_strtod_l+0x43e>
 8010344:	f04f 32ff 	mov.w	r2, #4294967295
 8010348:	fa02 f303 	lsl.w	r3, r2, r3
 801034c:	ea03 0a0a 	and.w	sl, r3, sl
 8010350:	e7b0      	b.n	80102b4 <_strtod_l+0x604>
 8010352:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010354:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010356:	2d00      	cmp	r5, #0
 8010358:	bfab      	itete	ge
 801035a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801035c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801035e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010360:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010362:	bfac      	ite	ge
 8010364:	18ef      	addge	r7, r5, r3
 8010366:	1b5e      	sublt	r6, r3, r5
 8010368:	9b08      	ldr	r3, [sp, #32]
 801036a:	1aed      	subs	r5, r5, r3
 801036c:	4415      	add	r5, r2
 801036e:	4b66      	ldr	r3, [pc, #408]	@ (8010508 <_strtod_l+0x858>)
 8010370:	3d01      	subs	r5, #1
 8010372:	429d      	cmp	r5, r3
 8010374:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010378:	da50      	bge.n	801041c <_strtod_l+0x76c>
 801037a:	1b5b      	subs	r3, r3, r5
 801037c:	2b1f      	cmp	r3, #31
 801037e:	eba2 0203 	sub.w	r2, r2, r3
 8010382:	f04f 0101 	mov.w	r1, #1
 8010386:	dc3d      	bgt.n	8010404 <_strtod_l+0x754>
 8010388:	fa01 f303 	lsl.w	r3, r1, r3
 801038c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801038e:	2300      	movs	r3, #0
 8010390:	9310      	str	r3, [sp, #64]	@ 0x40
 8010392:	18bd      	adds	r5, r7, r2
 8010394:	9b08      	ldr	r3, [sp, #32]
 8010396:	42af      	cmp	r7, r5
 8010398:	4416      	add	r6, r2
 801039a:	441e      	add	r6, r3
 801039c:	463b      	mov	r3, r7
 801039e:	bfa8      	it	ge
 80103a0:	462b      	movge	r3, r5
 80103a2:	42b3      	cmp	r3, r6
 80103a4:	bfa8      	it	ge
 80103a6:	4633      	movge	r3, r6
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	bfc2      	ittt	gt
 80103ac:	1aed      	subgt	r5, r5, r3
 80103ae:	1af6      	subgt	r6, r6, r3
 80103b0:	1aff      	subgt	r7, r7, r3
 80103b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	dd16      	ble.n	80103e6 <_strtod_l+0x736>
 80103b8:	4641      	mov	r1, r8
 80103ba:	9805      	ldr	r0, [sp, #20]
 80103bc:	461a      	mov	r2, r3
 80103be:	f7ff f9a5 	bl	800f70c <__pow5mult>
 80103c2:	4680      	mov	r8, r0
 80103c4:	2800      	cmp	r0, #0
 80103c6:	d0ba      	beq.n	801033e <_strtod_l+0x68e>
 80103c8:	4601      	mov	r1, r0
 80103ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80103cc:	9805      	ldr	r0, [sp, #20]
 80103ce:	f7ff f8f3 	bl	800f5b8 <__multiply>
 80103d2:	900e      	str	r0, [sp, #56]	@ 0x38
 80103d4:	2800      	cmp	r0, #0
 80103d6:	f43f ae8a 	beq.w	80100ee <_strtod_l+0x43e>
 80103da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80103dc:	9805      	ldr	r0, [sp, #20]
 80103de:	f7fe ffd7 	bl	800f390 <_Bfree>
 80103e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80103e6:	2d00      	cmp	r5, #0
 80103e8:	dc1d      	bgt.n	8010426 <_strtod_l+0x776>
 80103ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	dd23      	ble.n	8010438 <_strtod_l+0x788>
 80103f0:	4649      	mov	r1, r9
 80103f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80103f4:	9805      	ldr	r0, [sp, #20]
 80103f6:	f7ff f989 	bl	800f70c <__pow5mult>
 80103fa:	4681      	mov	r9, r0
 80103fc:	b9e0      	cbnz	r0, 8010438 <_strtod_l+0x788>
 80103fe:	f04f 0900 	mov.w	r9, #0
 8010402:	e674      	b.n	80100ee <_strtod_l+0x43e>
 8010404:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010408:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801040c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010410:	35e2      	adds	r5, #226	@ 0xe2
 8010412:	fa01 f305 	lsl.w	r3, r1, r5
 8010416:	9310      	str	r3, [sp, #64]	@ 0x40
 8010418:	9113      	str	r1, [sp, #76]	@ 0x4c
 801041a:	e7ba      	b.n	8010392 <_strtod_l+0x6e2>
 801041c:	2300      	movs	r3, #0
 801041e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010420:	2301      	movs	r3, #1
 8010422:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010424:	e7b5      	b.n	8010392 <_strtod_l+0x6e2>
 8010426:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010428:	9805      	ldr	r0, [sp, #20]
 801042a:	462a      	mov	r2, r5
 801042c:	f7ff f9c8 	bl	800f7c0 <__lshift>
 8010430:	901a      	str	r0, [sp, #104]	@ 0x68
 8010432:	2800      	cmp	r0, #0
 8010434:	d1d9      	bne.n	80103ea <_strtod_l+0x73a>
 8010436:	e65a      	b.n	80100ee <_strtod_l+0x43e>
 8010438:	2e00      	cmp	r6, #0
 801043a:	dd07      	ble.n	801044c <_strtod_l+0x79c>
 801043c:	4649      	mov	r1, r9
 801043e:	9805      	ldr	r0, [sp, #20]
 8010440:	4632      	mov	r2, r6
 8010442:	f7ff f9bd 	bl	800f7c0 <__lshift>
 8010446:	4681      	mov	r9, r0
 8010448:	2800      	cmp	r0, #0
 801044a:	d0d8      	beq.n	80103fe <_strtod_l+0x74e>
 801044c:	2f00      	cmp	r7, #0
 801044e:	dd08      	ble.n	8010462 <_strtod_l+0x7b2>
 8010450:	4641      	mov	r1, r8
 8010452:	9805      	ldr	r0, [sp, #20]
 8010454:	463a      	mov	r2, r7
 8010456:	f7ff f9b3 	bl	800f7c0 <__lshift>
 801045a:	4680      	mov	r8, r0
 801045c:	2800      	cmp	r0, #0
 801045e:	f43f ae46 	beq.w	80100ee <_strtod_l+0x43e>
 8010462:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010464:	9805      	ldr	r0, [sp, #20]
 8010466:	464a      	mov	r2, r9
 8010468:	f7ff fa32 	bl	800f8d0 <__mdiff>
 801046c:	4604      	mov	r4, r0
 801046e:	2800      	cmp	r0, #0
 8010470:	f43f ae3d 	beq.w	80100ee <_strtod_l+0x43e>
 8010474:	68c3      	ldr	r3, [r0, #12]
 8010476:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010478:	2300      	movs	r3, #0
 801047a:	60c3      	str	r3, [r0, #12]
 801047c:	4641      	mov	r1, r8
 801047e:	f7ff fa0b 	bl	800f898 <__mcmp>
 8010482:	2800      	cmp	r0, #0
 8010484:	da46      	bge.n	8010514 <_strtod_l+0x864>
 8010486:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010488:	ea53 030a 	orrs.w	r3, r3, sl
 801048c:	d16c      	bne.n	8010568 <_strtod_l+0x8b8>
 801048e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010492:	2b00      	cmp	r3, #0
 8010494:	d168      	bne.n	8010568 <_strtod_l+0x8b8>
 8010496:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801049a:	0d1b      	lsrs	r3, r3, #20
 801049c:	051b      	lsls	r3, r3, #20
 801049e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80104a2:	d961      	bls.n	8010568 <_strtod_l+0x8b8>
 80104a4:	6963      	ldr	r3, [r4, #20]
 80104a6:	b913      	cbnz	r3, 80104ae <_strtod_l+0x7fe>
 80104a8:	6923      	ldr	r3, [r4, #16]
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	dd5c      	ble.n	8010568 <_strtod_l+0x8b8>
 80104ae:	4621      	mov	r1, r4
 80104b0:	2201      	movs	r2, #1
 80104b2:	9805      	ldr	r0, [sp, #20]
 80104b4:	f7ff f984 	bl	800f7c0 <__lshift>
 80104b8:	4641      	mov	r1, r8
 80104ba:	4604      	mov	r4, r0
 80104bc:	f7ff f9ec 	bl	800f898 <__mcmp>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	dd51      	ble.n	8010568 <_strtod_l+0x8b8>
 80104c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80104c8:	9a08      	ldr	r2, [sp, #32]
 80104ca:	0d1b      	lsrs	r3, r3, #20
 80104cc:	051b      	lsls	r3, r3, #20
 80104ce:	2a00      	cmp	r2, #0
 80104d0:	d06b      	beq.n	80105aa <_strtod_l+0x8fa>
 80104d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80104d6:	d868      	bhi.n	80105aa <_strtod_l+0x8fa>
 80104d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80104dc:	f67f ae9d 	bls.w	801021a <_strtod_l+0x56a>
 80104e0:	4b0a      	ldr	r3, [pc, #40]	@ (801050c <_strtod_l+0x85c>)
 80104e2:	4650      	mov	r0, sl
 80104e4:	4659      	mov	r1, fp
 80104e6:	2200      	movs	r2, #0
 80104e8:	f7f0 f8ae 	bl	8000648 <__aeabi_dmul>
 80104ec:	4b08      	ldr	r3, [pc, #32]	@ (8010510 <_strtod_l+0x860>)
 80104ee:	400b      	ands	r3, r1
 80104f0:	4682      	mov	sl, r0
 80104f2:	468b      	mov	fp, r1
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	f47f ae05 	bne.w	8010104 <_strtod_l+0x454>
 80104fa:	9a05      	ldr	r2, [sp, #20]
 80104fc:	2322      	movs	r3, #34	@ 0x22
 80104fe:	6013      	str	r3, [r2, #0]
 8010500:	e600      	b.n	8010104 <_strtod_l+0x454>
 8010502:	bf00      	nop
 8010504:	08012088 	.word	0x08012088
 8010508:	fffffc02 	.word	0xfffffc02
 801050c:	39500000 	.word	0x39500000
 8010510:	7ff00000 	.word	0x7ff00000
 8010514:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010518:	d165      	bne.n	80105e6 <_strtod_l+0x936>
 801051a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801051c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010520:	b35a      	cbz	r2, 801057a <_strtod_l+0x8ca>
 8010522:	4a9f      	ldr	r2, [pc, #636]	@ (80107a0 <_strtod_l+0xaf0>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d12b      	bne.n	8010580 <_strtod_l+0x8d0>
 8010528:	9b08      	ldr	r3, [sp, #32]
 801052a:	4651      	mov	r1, sl
 801052c:	b303      	cbz	r3, 8010570 <_strtod_l+0x8c0>
 801052e:	4b9d      	ldr	r3, [pc, #628]	@ (80107a4 <_strtod_l+0xaf4>)
 8010530:	465a      	mov	r2, fp
 8010532:	4013      	ands	r3, r2
 8010534:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010538:	f04f 32ff 	mov.w	r2, #4294967295
 801053c:	d81b      	bhi.n	8010576 <_strtod_l+0x8c6>
 801053e:	0d1b      	lsrs	r3, r3, #20
 8010540:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010544:	fa02 f303 	lsl.w	r3, r2, r3
 8010548:	4299      	cmp	r1, r3
 801054a:	d119      	bne.n	8010580 <_strtod_l+0x8d0>
 801054c:	4b96      	ldr	r3, [pc, #600]	@ (80107a8 <_strtod_l+0xaf8>)
 801054e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010550:	429a      	cmp	r2, r3
 8010552:	d102      	bne.n	801055a <_strtod_l+0x8aa>
 8010554:	3101      	adds	r1, #1
 8010556:	f43f adca 	beq.w	80100ee <_strtod_l+0x43e>
 801055a:	4b92      	ldr	r3, [pc, #584]	@ (80107a4 <_strtod_l+0xaf4>)
 801055c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801055e:	401a      	ands	r2, r3
 8010560:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010564:	f04f 0a00 	mov.w	sl, #0
 8010568:	9b08      	ldr	r3, [sp, #32]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d1b8      	bne.n	80104e0 <_strtod_l+0x830>
 801056e:	e5c9      	b.n	8010104 <_strtod_l+0x454>
 8010570:	f04f 33ff 	mov.w	r3, #4294967295
 8010574:	e7e8      	b.n	8010548 <_strtod_l+0x898>
 8010576:	4613      	mov	r3, r2
 8010578:	e7e6      	b.n	8010548 <_strtod_l+0x898>
 801057a:	ea53 030a 	orrs.w	r3, r3, sl
 801057e:	d0a1      	beq.n	80104c4 <_strtod_l+0x814>
 8010580:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010582:	b1db      	cbz	r3, 80105bc <_strtod_l+0x90c>
 8010584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010586:	4213      	tst	r3, r2
 8010588:	d0ee      	beq.n	8010568 <_strtod_l+0x8b8>
 801058a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801058c:	9a08      	ldr	r2, [sp, #32]
 801058e:	4650      	mov	r0, sl
 8010590:	4659      	mov	r1, fp
 8010592:	b1bb      	cbz	r3, 80105c4 <_strtod_l+0x914>
 8010594:	f7ff fb6e 	bl	800fc74 <sulp>
 8010598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801059c:	ec53 2b10 	vmov	r2, r3, d0
 80105a0:	f7ef fe9c 	bl	80002dc <__adddf3>
 80105a4:	4682      	mov	sl, r0
 80105a6:	468b      	mov	fp, r1
 80105a8:	e7de      	b.n	8010568 <_strtod_l+0x8b8>
 80105aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80105ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80105b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80105b6:	f04f 3aff 	mov.w	sl, #4294967295
 80105ba:	e7d5      	b.n	8010568 <_strtod_l+0x8b8>
 80105bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80105be:	ea13 0f0a 	tst.w	r3, sl
 80105c2:	e7e1      	b.n	8010588 <_strtod_l+0x8d8>
 80105c4:	f7ff fb56 	bl	800fc74 <sulp>
 80105c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80105cc:	ec53 2b10 	vmov	r2, r3, d0
 80105d0:	f7ef fe82 	bl	80002d8 <__aeabi_dsub>
 80105d4:	2200      	movs	r2, #0
 80105d6:	2300      	movs	r3, #0
 80105d8:	4682      	mov	sl, r0
 80105da:	468b      	mov	fp, r1
 80105dc:	f7f0 fa9c 	bl	8000b18 <__aeabi_dcmpeq>
 80105e0:	2800      	cmp	r0, #0
 80105e2:	d0c1      	beq.n	8010568 <_strtod_l+0x8b8>
 80105e4:	e619      	b.n	801021a <_strtod_l+0x56a>
 80105e6:	4641      	mov	r1, r8
 80105e8:	4620      	mov	r0, r4
 80105ea:	f7ff facd 	bl	800fb88 <__ratio>
 80105ee:	ec57 6b10 	vmov	r6, r7, d0
 80105f2:	2200      	movs	r2, #0
 80105f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80105f8:	4630      	mov	r0, r6
 80105fa:	4639      	mov	r1, r7
 80105fc:	f7f0 faa0 	bl	8000b40 <__aeabi_dcmple>
 8010600:	2800      	cmp	r0, #0
 8010602:	d06f      	beq.n	80106e4 <_strtod_l+0xa34>
 8010604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010606:	2b00      	cmp	r3, #0
 8010608:	d17a      	bne.n	8010700 <_strtod_l+0xa50>
 801060a:	f1ba 0f00 	cmp.w	sl, #0
 801060e:	d158      	bne.n	80106c2 <_strtod_l+0xa12>
 8010610:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010612:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010616:	2b00      	cmp	r3, #0
 8010618:	d15a      	bne.n	80106d0 <_strtod_l+0xa20>
 801061a:	4b64      	ldr	r3, [pc, #400]	@ (80107ac <_strtod_l+0xafc>)
 801061c:	2200      	movs	r2, #0
 801061e:	4630      	mov	r0, r6
 8010620:	4639      	mov	r1, r7
 8010622:	f7f0 fa83 	bl	8000b2c <__aeabi_dcmplt>
 8010626:	2800      	cmp	r0, #0
 8010628:	d159      	bne.n	80106de <_strtod_l+0xa2e>
 801062a:	4630      	mov	r0, r6
 801062c:	4639      	mov	r1, r7
 801062e:	4b60      	ldr	r3, [pc, #384]	@ (80107b0 <_strtod_l+0xb00>)
 8010630:	2200      	movs	r2, #0
 8010632:	f7f0 f809 	bl	8000648 <__aeabi_dmul>
 8010636:	4606      	mov	r6, r0
 8010638:	460f      	mov	r7, r1
 801063a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801063e:	9606      	str	r6, [sp, #24]
 8010640:	9307      	str	r3, [sp, #28]
 8010642:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010646:	4d57      	ldr	r5, [pc, #348]	@ (80107a4 <_strtod_l+0xaf4>)
 8010648:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801064c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801064e:	401d      	ands	r5, r3
 8010650:	4b58      	ldr	r3, [pc, #352]	@ (80107b4 <_strtod_l+0xb04>)
 8010652:	429d      	cmp	r5, r3
 8010654:	f040 80b2 	bne.w	80107bc <_strtod_l+0xb0c>
 8010658:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801065a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801065e:	ec4b ab10 	vmov	d0, sl, fp
 8010662:	f7ff f9c9 	bl	800f9f8 <__ulp>
 8010666:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801066a:	ec51 0b10 	vmov	r0, r1, d0
 801066e:	f7ef ffeb 	bl	8000648 <__aeabi_dmul>
 8010672:	4652      	mov	r2, sl
 8010674:	465b      	mov	r3, fp
 8010676:	f7ef fe31 	bl	80002dc <__adddf3>
 801067a:	460b      	mov	r3, r1
 801067c:	4949      	ldr	r1, [pc, #292]	@ (80107a4 <_strtod_l+0xaf4>)
 801067e:	4a4e      	ldr	r2, [pc, #312]	@ (80107b8 <_strtod_l+0xb08>)
 8010680:	4019      	ands	r1, r3
 8010682:	4291      	cmp	r1, r2
 8010684:	4682      	mov	sl, r0
 8010686:	d942      	bls.n	801070e <_strtod_l+0xa5e>
 8010688:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801068a:	4b47      	ldr	r3, [pc, #284]	@ (80107a8 <_strtod_l+0xaf8>)
 801068c:	429a      	cmp	r2, r3
 801068e:	d103      	bne.n	8010698 <_strtod_l+0x9e8>
 8010690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010692:	3301      	adds	r3, #1
 8010694:	f43f ad2b 	beq.w	80100ee <_strtod_l+0x43e>
 8010698:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80107a8 <_strtod_l+0xaf8>
 801069c:	f04f 3aff 	mov.w	sl, #4294967295
 80106a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80106a2:	9805      	ldr	r0, [sp, #20]
 80106a4:	f7fe fe74 	bl	800f390 <_Bfree>
 80106a8:	9805      	ldr	r0, [sp, #20]
 80106aa:	4649      	mov	r1, r9
 80106ac:	f7fe fe70 	bl	800f390 <_Bfree>
 80106b0:	9805      	ldr	r0, [sp, #20]
 80106b2:	4641      	mov	r1, r8
 80106b4:	f7fe fe6c 	bl	800f390 <_Bfree>
 80106b8:	9805      	ldr	r0, [sp, #20]
 80106ba:	4621      	mov	r1, r4
 80106bc:	f7fe fe68 	bl	800f390 <_Bfree>
 80106c0:	e618      	b.n	80102f4 <_strtod_l+0x644>
 80106c2:	f1ba 0f01 	cmp.w	sl, #1
 80106c6:	d103      	bne.n	80106d0 <_strtod_l+0xa20>
 80106c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	f43f ada5 	beq.w	801021a <_strtod_l+0x56a>
 80106d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010780 <_strtod_l+0xad0>
 80106d4:	4f35      	ldr	r7, [pc, #212]	@ (80107ac <_strtod_l+0xafc>)
 80106d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80106da:	2600      	movs	r6, #0
 80106dc:	e7b1      	b.n	8010642 <_strtod_l+0x992>
 80106de:	4f34      	ldr	r7, [pc, #208]	@ (80107b0 <_strtod_l+0xb00>)
 80106e0:	2600      	movs	r6, #0
 80106e2:	e7aa      	b.n	801063a <_strtod_l+0x98a>
 80106e4:	4b32      	ldr	r3, [pc, #200]	@ (80107b0 <_strtod_l+0xb00>)
 80106e6:	4630      	mov	r0, r6
 80106e8:	4639      	mov	r1, r7
 80106ea:	2200      	movs	r2, #0
 80106ec:	f7ef ffac 	bl	8000648 <__aeabi_dmul>
 80106f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106f2:	4606      	mov	r6, r0
 80106f4:	460f      	mov	r7, r1
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d09f      	beq.n	801063a <_strtod_l+0x98a>
 80106fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80106fe:	e7a0      	b.n	8010642 <_strtod_l+0x992>
 8010700:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010788 <_strtod_l+0xad8>
 8010704:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010708:	ec57 6b17 	vmov	r6, r7, d7
 801070c:	e799      	b.n	8010642 <_strtod_l+0x992>
 801070e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010712:	9b08      	ldr	r3, [sp, #32]
 8010714:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010718:	2b00      	cmp	r3, #0
 801071a:	d1c1      	bne.n	80106a0 <_strtod_l+0x9f0>
 801071c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010720:	0d1b      	lsrs	r3, r3, #20
 8010722:	051b      	lsls	r3, r3, #20
 8010724:	429d      	cmp	r5, r3
 8010726:	d1bb      	bne.n	80106a0 <_strtod_l+0x9f0>
 8010728:	4630      	mov	r0, r6
 801072a:	4639      	mov	r1, r7
 801072c:	f7f0 faec 	bl	8000d08 <__aeabi_d2lz>
 8010730:	f7ef ff5c 	bl	80005ec <__aeabi_l2d>
 8010734:	4602      	mov	r2, r0
 8010736:	460b      	mov	r3, r1
 8010738:	4630      	mov	r0, r6
 801073a:	4639      	mov	r1, r7
 801073c:	f7ef fdcc 	bl	80002d8 <__aeabi_dsub>
 8010740:	460b      	mov	r3, r1
 8010742:	4602      	mov	r2, r0
 8010744:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010748:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801074c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801074e:	ea46 060a 	orr.w	r6, r6, sl
 8010752:	431e      	orrs	r6, r3
 8010754:	d06f      	beq.n	8010836 <_strtod_l+0xb86>
 8010756:	a30e      	add	r3, pc, #56	@ (adr r3, 8010790 <_strtod_l+0xae0>)
 8010758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075c:	f7f0 f9e6 	bl	8000b2c <__aeabi_dcmplt>
 8010760:	2800      	cmp	r0, #0
 8010762:	f47f accf 	bne.w	8010104 <_strtod_l+0x454>
 8010766:	a30c      	add	r3, pc, #48	@ (adr r3, 8010798 <_strtod_l+0xae8>)
 8010768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801076c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010770:	f7f0 f9fa 	bl	8000b68 <__aeabi_dcmpgt>
 8010774:	2800      	cmp	r0, #0
 8010776:	d093      	beq.n	80106a0 <_strtod_l+0x9f0>
 8010778:	e4c4      	b.n	8010104 <_strtod_l+0x454>
 801077a:	bf00      	nop
 801077c:	f3af 8000 	nop.w
 8010780:	00000000 	.word	0x00000000
 8010784:	bff00000 	.word	0xbff00000
 8010788:	00000000 	.word	0x00000000
 801078c:	3ff00000 	.word	0x3ff00000
 8010790:	94a03595 	.word	0x94a03595
 8010794:	3fdfffff 	.word	0x3fdfffff
 8010798:	35afe535 	.word	0x35afe535
 801079c:	3fe00000 	.word	0x3fe00000
 80107a0:	000fffff 	.word	0x000fffff
 80107a4:	7ff00000 	.word	0x7ff00000
 80107a8:	7fefffff 	.word	0x7fefffff
 80107ac:	3ff00000 	.word	0x3ff00000
 80107b0:	3fe00000 	.word	0x3fe00000
 80107b4:	7fe00000 	.word	0x7fe00000
 80107b8:	7c9fffff 	.word	0x7c9fffff
 80107bc:	9b08      	ldr	r3, [sp, #32]
 80107be:	b323      	cbz	r3, 801080a <_strtod_l+0xb5a>
 80107c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80107c4:	d821      	bhi.n	801080a <_strtod_l+0xb5a>
 80107c6:	a328      	add	r3, pc, #160	@ (adr r3, 8010868 <_strtod_l+0xbb8>)
 80107c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107cc:	4630      	mov	r0, r6
 80107ce:	4639      	mov	r1, r7
 80107d0:	f7f0 f9b6 	bl	8000b40 <__aeabi_dcmple>
 80107d4:	b1a0      	cbz	r0, 8010800 <_strtod_l+0xb50>
 80107d6:	4639      	mov	r1, r7
 80107d8:	4630      	mov	r0, r6
 80107da:	f7f0 fa0d 	bl	8000bf8 <__aeabi_d2uiz>
 80107de:	2801      	cmp	r0, #1
 80107e0:	bf38      	it	cc
 80107e2:	2001      	movcc	r0, #1
 80107e4:	f7ef feb6 	bl	8000554 <__aeabi_ui2d>
 80107e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107ea:	4606      	mov	r6, r0
 80107ec:	460f      	mov	r7, r1
 80107ee:	b9fb      	cbnz	r3, 8010830 <_strtod_l+0xb80>
 80107f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80107f4:	9014      	str	r0, [sp, #80]	@ 0x50
 80107f6:	9315      	str	r3, [sp, #84]	@ 0x54
 80107f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80107fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010800:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010802:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010806:	1b5b      	subs	r3, r3, r5
 8010808:	9311      	str	r3, [sp, #68]	@ 0x44
 801080a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801080e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010812:	f7ff f8f1 	bl	800f9f8 <__ulp>
 8010816:	4650      	mov	r0, sl
 8010818:	ec53 2b10 	vmov	r2, r3, d0
 801081c:	4659      	mov	r1, fp
 801081e:	f7ef ff13 	bl	8000648 <__aeabi_dmul>
 8010822:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010826:	f7ef fd59 	bl	80002dc <__adddf3>
 801082a:	4682      	mov	sl, r0
 801082c:	468b      	mov	fp, r1
 801082e:	e770      	b.n	8010712 <_strtod_l+0xa62>
 8010830:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010834:	e7e0      	b.n	80107f8 <_strtod_l+0xb48>
 8010836:	a30e      	add	r3, pc, #56	@ (adr r3, 8010870 <_strtod_l+0xbc0>)
 8010838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083c:	f7f0 f976 	bl	8000b2c <__aeabi_dcmplt>
 8010840:	e798      	b.n	8010774 <_strtod_l+0xac4>
 8010842:	2300      	movs	r3, #0
 8010844:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010846:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010848:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801084a:	6013      	str	r3, [r2, #0]
 801084c:	f7ff ba6d 	b.w	800fd2a <_strtod_l+0x7a>
 8010850:	2a65      	cmp	r2, #101	@ 0x65
 8010852:	f43f ab66 	beq.w	800ff22 <_strtod_l+0x272>
 8010856:	2a45      	cmp	r2, #69	@ 0x45
 8010858:	f43f ab63 	beq.w	800ff22 <_strtod_l+0x272>
 801085c:	2301      	movs	r3, #1
 801085e:	f7ff bb9e 	b.w	800ff9e <_strtod_l+0x2ee>
 8010862:	bf00      	nop
 8010864:	f3af 8000 	nop.w
 8010868:	ffc00000 	.word	0xffc00000
 801086c:	41dfffff 	.word	0x41dfffff
 8010870:	94a03595 	.word	0x94a03595
 8010874:	3fcfffff 	.word	0x3fcfffff

08010878 <_strtod_r>:
 8010878:	4b01      	ldr	r3, [pc, #4]	@ (8010880 <_strtod_r+0x8>)
 801087a:	f7ff ba19 	b.w	800fcb0 <_strtod_l>
 801087e:	bf00      	nop
 8010880:	200000ec 	.word	0x200000ec

08010884 <_strtol_l.constprop.0>:
 8010884:	2b24      	cmp	r3, #36	@ 0x24
 8010886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801088a:	4686      	mov	lr, r0
 801088c:	4690      	mov	r8, r2
 801088e:	d801      	bhi.n	8010894 <_strtol_l.constprop.0+0x10>
 8010890:	2b01      	cmp	r3, #1
 8010892:	d106      	bne.n	80108a2 <_strtol_l.constprop.0+0x1e>
 8010894:	f7fd fdbc 	bl	800e410 <__errno>
 8010898:	2316      	movs	r3, #22
 801089a:	6003      	str	r3, [r0, #0]
 801089c:	2000      	movs	r0, #0
 801089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108a2:	4834      	ldr	r0, [pc, #208]	@ (8010974 <_strtol_l.constprop.0+0xf0>)
 80108a4:	460d      	mov	r5, r1
 80108a6:	462a      	mov	r2, r5
 80108a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80108ac:	5d06      	ldrb	r6, [r0, r4]
 80108ae:	f016 0608 	ands.w	r6, r6, #8
 80108b2:	d1f8      	bne.n	80108a6 <_strtol_l.constprop.0+0x22>
 80108b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80108b6:	d12d      	bne.n	8010914 <_strtol_l.constprop.0+0x90>
 80108b8:	782c      	ldrb	r4, [r5, #0]
 80108ba:	2601      	movs	r6, #1
 80108bc:	1c95      	adds	r5, r2, #2
 80108be:	f033 0210 	bics.w	r2, r3, #16
 80108c2:	d109      	bne.n	80108d8 <_strtol_l.constprop.0+0x54>
 80108c4:	2c30      	cmp	r4, #48	@ 0x30
 80108c6:	d12a      	bne.n	801091e <_strtol_l.constprop.0+0x9a>
 80108c8:	782a      	ldrb	r2, [r5, #0]
 80108ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80108ce:	2a58      	cmp	r2, #88	@ 0x58
 80108d0:	d125      	bne.n	801091e <_strtol_l.constprop.0+0x9a>
 80108d2:	786c      	ldrb	r4, [r5, #1]
 80108d4:	2310      	movs	r3, #16
 80108d6:	3502      	adds	r5, #2
 80108d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80108dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80108e0:	2200      	movs	r2, #0
 80108e2:	fbbc f9f3 	udiv	r9, ip, r3
 80108e6:	4610      	mov	r0, r2
 80108e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80108ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80108f0:	2f09      	cmp	r7, #9
 80108f2:	d81b      	bhi.n	801092c <_strtol_l.constprop.0+0xa8>
 80108f4:	463c      	mov	r4, r7
 80108f6:	42a3      	cmp	r3, r4
 80108f8:	dd27      	ble.n	801094a <_strtol_l.constprop.0+0xc6>
 80108fa:	1c57      	adds	r7, r2, #1
 80108fc:	d007      	beq.n	801090e <_strtol_l.constprop.0+0x8a>
 80108fe:	4581      	cmp	r9, r0
 8010900:	d320      	bcc.n	8010944 <_strtol_l.constprop.0+0xc0>
 8010902:	d101      	bne.n	8010908 <_strtol_l.constprop.0+0x84>
 8010904:	45a2      	cmp	sl, r4
 8010906:	db1d      	blt.n	8010944 <_strtol_l.constprop.0+0xc0>
 8010908:	fb00 4003 	mla	r0, r0, r3, r4
 801090c:	2201      	movs	r2, #1
 801090e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010912:	e7eb      	b.n	80108ec <_strtol_l.constprop.0+0x68>
 8010914:	2c2b      	cmp	r4, #43	@ 0x2b
 8010916:	bf04      	itt	eq
 8010918:	782c      	ldrbeq	r4, [r5, #0]
 801091a:	1c95      	addeq	r5, r2, #2
 801091c:	e7cf      	b.n	80108be <_strtol_l.constprop.0+0x3a>
 801091e:	2b00      	cmp	r3, #0
 8010920:	d1da      	bne.n	80108d8 <_strtol_l.constprop.0+0x54>
 8010922:	2c30      	cmp	r4, #48	@ 0x30
 8010924:	bf0c      	ite	eq
 8010926:	2308      	moveq	r3, #8
 8010928:	230a      	movne	r3, #10
 801092a:	e7d5      	b.n	80108d8 <_strtol_l.constprop.0+0x54>
 801092c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010930:	2f19      	cmp	r7, #25
 8010932:	d801      	bhi.n	8010938 <_strtol_l.constprop.0+0xb4>
 8010934:	3c37      	subs	r4, #55	@ 0x37
 8010936:	e7de      	b.n	80108f6 <_strtol_l.constprop.0+0x72>
 8010938:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801093c:	2f19      	cmp	r7, #25
 801093e:	d804      	bhi.n	801094a <_strtol_l.constprop.0+0xc6>
 8010940:	3c57      	subs	r4, #87	@ 0x57
 8010942:	e7d8      	b.n	80108f6 <_strtol_l.constprop.0+0x72>
 8010944:	f04f 32ff 	mov.w	r2, #4294967295
 8010948:	e7e1      	b.n	801090e <_strtol_l.constprop.0+0x8a>
 801094a:	1c53      	adds	r3, r2, #1
 801094c:	d108      	bne.n	8010960 <_strtol_l.constprop.0+0xdc>
 801094e:	2322      	movs	r3, #34	@ 0x22
 8010950:	f8ce 3000 	str.w	r3, [lr]
 8010954:	4660      	mov	r0, ip
 8010956:	f1b8 0f00 	cmp.w	r8, #0
 801095a:	d0a0      	beq.n	801089e <_strtol_l.constprop.0+0x1a>
 801095c:	1e69      	subs	r1, r5, #1
 801095e:	e006      	b.n	801096e <_strtol_l.constprop.0+0xea>
 8010960:	b106      	cbz	r6, 8010964 <_strtol_l.constprop.0+0xe0>
 8010962:	4240      	negs	r0, r0
 8010964:	f1b8 0f00 	cmp.w	r8, #0
 8010968:	d099      	beq.n	801089e <_strtol_l.constprop.0+0x1a>
 801096a:	2a00      	cmp	r2, #0
 801096c:	d1f6      	bne.n	801095c <_strtol_l.constprop.0+0xd8>
 801096e:	f8c8 1000 	str.w	r1, [r8]
 8010972:	e794      	b.n	801089e <_strtol_l.constprop.0+0x1a>
 8010974:	080120b1 	.word	0x080120b1

08010978 <_strtol_r>:
 8010978:	f7ff bf84 	b.w	8010884 <_strtol_l.constprop.0>

0801097c <__ssputs_r>:
 801097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010980:	688e      	ldr	r6, [r1, #8]
 8010982:	461f      	mov	r7, r3
 8010984:	42be      	cmp	r6, r7
 8010986:	680b      	ldr	r3, [r1, #0]
 8010988:	4682      	mov	sl, r0
 801098a:	460c      	mov	r4, r1
 801098c:	4690      	mov	r8, r2
 801098e:	d82d      	bhi.n	80109ec <__ssputs_r+0x70>
 8010990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010994:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010998:	d026      	beq.n	80109e8 <__ssputs_r+0x6c>
 801099a:	6965      	ldr	r5, [r4, #20]
 801099c:	6909      	ldr	r1, [r1, #16]
 801099e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80109a2:	eba3 0901 	sub.w	r9, r3, r1
 80109a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80109aa:	1c7b      	adds	r3, r7, #1
 80109ac:	444b      	add	r3, r9
 80109ae:	106d      	asrs	r5, r5, #1
 80109b0:	429d      	cmp	r5, r3
 80109b2:	bf38      	it	cc
 80109b4:	461d      	movcc	r5, r3
 80109b6:	0553      	lsls	r3, r2, #21
 80109b8:	d527      	bpl.n	8010a0a <__ssputs_r+0x8e>
 80109ba:	4629      	mov	r1, r5
 80109bc:	f7fe fc1c 	bl	800f1f8 <_malloc_r>
 80109c0:	4606      	mov	r6, r0
 80109c2:	b360      	cbz	r0, 8010a1e <__ssputs_r+0xa2>
 80109c4:	6921      	ldr	r1, [r4, #16]
 80109c6:	464a      	mov	r2, r9
 80109c8:	f000 fa18 	bl	8010dfc <memcpy>
 80109cc:	89a3      	ldrh	r3, [r4, #12]
 80109ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80109d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109d6:	81a3      	strh	r3, [r4, #12]
 80109d8:	6126      	str	r6, [r4, #16]
 80109da:	6165      	str	r5, [r4, #20]
 80109dc:	444e      	add	r6, r9
 80109de:	eba5 0509 	sub.w	r5, r5, r9
 80109e2:	6026      	str	r6, [r4, #0]
 80109e4:	60a5      	str	r5, [r4, #8]
 80109e6:	463e      	mov	r6, r7
 80109e8:	42be      	cmp	r6, r7
 80109ea:	d900      	bls.n	80109ee <__ssputs_r+0x72>
 80109ec:	463e      	mov	r6, r7
 80109ee:	6820      	ldr	r0, [r4, #0]
 80109f0:	4632      	mov	r2, r6
 80109f2:	4641      	mov	r1, r8
 80109f4:	f000 f9c6 	bl	8010d84 <memmove>
 80109f8:	68a3      	ldr	r3, [r4, #8]
 80109fa:	1b9b      	subs	r3, r3, r6
 80109fc:	60a3      	str	r3, [r4, #8]
 80109fe:	6823      	ldr	r3, [r4, #0]
 8010a00:	4433      	add	r3, r6
 8010a02:	6023      	str	r3, [r4, #0]
 8010a04:	2000      	movs	r0, #0
 8010a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a0a:	462a      	mov	r2, r5
 8010a0c:	f000 fd89 	bl	8011522 <_realloc_r>
 8010a10:	4606      	mov	r6, r0
 8010a12:	2800      	cmp	r0, #0
 8010a14:	d1e0      	bne.n	80109d8 <__ssputs_r+0x5c>
 8010a16:	6921      	ldr	r1, [r4, #16]
 8010a18:	4650      	mov	r0, sl
 8010a1a:	f7fe fb79 	bl	800f110 <_free_r>
 8010a1e:	230c      	movs	r3, #12
 8010a20:	f8ca 3000 	str.w	r3, [sl]
 8010a24:	89a3      	ldrh	r3, [r4, #12]
 8010a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a2a:	81a3      	strh	r3, [r4, #12]
 8010a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a30:	e7e9      	b.n	8010a06 <__ssputs_r+0x8a>
	...

08010a34 <_svfiprintf_r>:
 8010a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a38:	4698      	mov	r8, r3
 8010a3a:	898b      	ldrh	r3, [r1, #12]
 8010a3c:	061b      	lsls	r3, r3, #24
 8010a3e:	b09d      	sub	sp, #116	@ 0x74
 8010a40:	4607      	mov	r7, r0
 8010a42:	460d      	mov	r5, r1
 8010a44:	4614      	mov	r4, r2
 8010a46:	d510      	bpl.n	8010a6a <_svfiprintf_r+0x36>
 8010a48:	690b      	ldr	r3, [r1, #16]
 8010a4a:	b973      	cbnz	r3, 8010a6a <_svfiprintf_r+0x36>
 8010a4c:	2140      	movs	r1, #64	@ 0x40
 8010a4e:	f7fe fbd3 	bl	800f1f8 <_malloc_r>
 8010a52:	6028      	str	r0, [r5, #0]
 8010a54:	6128      	str	r0, [r5, #16]
 8010a56:	b930      	cbnz	r0, 8010a66 <_svfiprintf_r+0x32>
 8010a58:	230c      	movs	r3, #12
 8010a5a:	603b      	str	r3, [r7, #0]
 8010a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a60:	b01d      	add	sp, #116	@ 0x74
 8010a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a66:	2340      	movs	r3, #64	@ 0x40
 8010a68:	616b      	str	r3, [r5, #20]
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a6e:	2320      	movs	r3, #32
 8010a70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010a74:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a78:	2330      	movs	r3, #48	@ 0x30
 8010a7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010c18 <_svfiprintf_r+0x1e4>
 8010a7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a82:	f04f 0901 	mov.w	r9, #1
 8010a86:	4623      	mov	r3, r4
 8010a88:	469a      	mov	sl, r3
 8010a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a8e:	b10a      	cbz	r2, 8010a94 <_svfiprintf_r+0x60>
 8010a90:	2a25      	cmp	r2, #37	@ 0x25
 8010a92:	d1f9      	bne.n	8010a88 <_svfiprintf_r+0x54>
 8010a94:	ebba 0b04 	subs.w	fp, sl, r4
 8010a98:	d00b      	beq.n	8010ab2 <_svfiprintf_r+0x7e>
 8010a9a:	465b      	mov	r3, fp
 8010a9c:	4622      	mov	r2, r4
 8010a9e:	4629      	mov	r1, r5
 8010aa0:	4638      	mov	r0, r7
 8010aa2:	f7ff ff6b 	bl	801097c <__ssputs_r>
 8010aa6:	3001      	adds	r0, #1
 8010aa8:	f000 80a7 	beq.w	8010bfa <_svfiprintf_r+0x1c6>
 8010aac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010aae:	445a      	add	r2, fp
 8010ab0:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	f000 809f 	beq.w	8010bfa <_svfiprintf_r+0x1c6>
 8010abc:	2300      	movs	r3, #0
 8010abe:	f04f 32ff 	mov.w	r2, #4294967295
 8010ac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ac6:	f10a 0a01 	add.w	sl, sl, #1
 8010aca:	9304      	str	r3, [sp, #16]
 8010acc:	9307      	str	r3, [sp, #28]
 8010ace:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010ad2:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ad4:	4654      	mov	r4, sl
 8010ad6:	2205      	movs	r2, #5
 8010ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010adc:	484e      	ldr	r0, [pc, #312]	@ (8010c18 <_svfiprintf_r+0x1e4>)
 8010ade:	f7ef fb9f 	bl	8000220 <memchr>
 8010ae2:	9a04      	ldr	r2, [sp, #16]
 8010ae4:	b9d8      	cbnz	r0, 8010b1e <_svfiprintf_r+0xea>
 8010ae6:	06d0      	lsls	r0, r2, #27
 8010ae8:	bf44      	itt	mi
 8010aea:	2320      	movmi	r3, #32
 8010aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010af0:	0711      	lsls	r1, r2, #28
 8010af2:	bf44      	itt	mi
 8010af4:	232b      	movmi	r3, #43	@ 0x2b
 8010af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010afa:	f89a 3000 	ldrb.w	r3, [sl]
 8010afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b00:	d015      	beq.n	8010b2e <_svfiprintf_r+0xfa>
 8010b02:	9a07      	ldr	r2, [sp, #28]
 8010b04:	4654      	mov	r4, sl
 8010b06:	2000      	movs	r0, #0
 8010b08:	f04f 0c0a 	mov.w	ip, #10
 8010b0c:	4621      	mov	r1, r4
 8010b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b12:	3b30      	subs	r3, #48	@ 0x30
 8010b14:	2b09      	cmp	r3, #9
 8010b16:	d94b      	bls.n	8010bb0 <_svfiprintf_r+0x17c>
 8010b18:	b1b0      	cbz	r0, 8010b48 <_svfiprintf_r+0x114>
 8010b1a:	9207      	str	r2, [sp, #28]
 8010b1c:	e014      	b.n	8010b48 <_svfiprintf_r+0x114>
 8010b1e:	eba0 0308 	sub.w	r3, r0, r8
 8010b22:	fa09 f303 	lsl.w	r3, r9, r3
 8010b26:	4313      	orrs	r3, r2
 8010b28:	9304      	str	r3, [sp, #16]
 8010b2a:	46a2      	mov	sl, r4
 8010b2c:	e7d2      	b.n	8010ad4 <_svfiprintf_r+0xa0>
 8010b2e:	9b03      	ldr	r3, [sp, #12]
 8010b30:	1d19      	adds	r1, r3, #4
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	9103      	str	r1, [sp, #12]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	bfbb      	ittet	lt
 8010b3a:	425b      	neglt	r3, r3
 8010b3c:	f042 0202 	orrlt.w	r2, r2, #2
 8010b40:	9307      	strge	r3, [sp, #28]
 8010b42:	9307      	strlt	r3, [sp, #28]
 8010b44:	bfb8      	it	lt
 8010b46:	9204      	strlt	r2, [sp, #16]
 8010b48:	7823      	ldrb	r3, [r4, #0]
 8010b4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b4c:	d10a      	bne.n	8010b64 <_svfiprintf_r+0x130>
 8010b4e:	7863      	ldrb	r3, [r4, #1]
 8010b50:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b52:	d132      	bne.n	8010bba <_svfiprintf_r+0x186>
 8010b54:	9b03      	ldr	r3, [sp, #12]
 8010b56:	1d1a      	adds	r2, r3, #4
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	9203      	str	r2, [sp, #12]
 8010b5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b60:	3402      	adds	r4, #2
 8010b62:	9305      	str	r3, [sp, #20]
 8010b64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010c28 <_svfiprintf_r+0x1f4>
 8010b68:	7821      	ldrb	r1, [r4, #0]
 8010b6a:	2203      	movs	r2, #3
 8010b6c:	4650      	mov	r0, sl
 8010b6e:	f7ef fb57 	bl	8000220 <memchr>
 8010b72:	b138      	cbz	r0, 8010b84 <_svfiprintf_r+0x150>
 8010b74:	9b04      	ldr	r3, [sp, #16]
 8010b76:	eba0 000a 	sub.w	r0, r0, sl
 8010b7a:	2240      	movs	r2, #64	@ 0x40
 8010b7c:	4082      	lsls	r2, r0
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	3401      	adds	r4, #1
 8010b82:	9304      	str	r3, [sp, #16]
 8010b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b88:	4824      	ldr	r0, [pc, #144]	@ (8010c1c <_svfiprintf_r+0x1e8>)
 8010b8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b8e:	2206      	movs	r2, #6
 8010b90:	f7ef fb46 	bl	8000220 <memchr>
 8010b94:	2800      	cmp	r0, #0
 8010b96:	d036      	beq.n	8010c06 <_svfiprintf_r+0x1d2>
 8010b98:	4b21      	ldr	r3, [pc, #132]	@ (8010c20 <_svfiprintf_r+0x1ec>)
 8010b9a:	bb1b      	cbnz	r3, 8010be4 <_svfiprintf_r+0x1b0>
 8010b9c:	9b03      	ldr	r3, [sp, #12]
 8010b9e:	3307      	adds	r3, #7
 8010ba0:	f023 0307 	bic.w	r3, r3, #7
 8010ba4:	3308      	adds	r3, #8
 8010ba6:	9303      	str	r3, [sp, #12]
 8010ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010baa:	4433      	add	r3, r6
 8010bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8010bae:	e76a      	b.n	8010a86 <_svfiprintf_r+0x52>
 8010bb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8010bb4:	460c      	mov	r4, r1
 8010bb6:	2001      	movs	r0, #1
 8010bb8:	e7a8      	b.n	8010b0c <_svfiprintf_r+0xd8>
 8010bba:	2300      	movs	r3, #0
 8010bbc:	3401      	adds	r4, #1
 8010bbe:	9305      	str	r3, [sp, #20]
 8010bc0:	4619      	mov	r1, r3
 8010bc2:	f04f 0c0a 	mov.w	ip, #10
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bcc:	3a30      	subs	r2, #48	@ 0x30
 8010bce:	2a09      	cmp	r2, #9
 8010bd0:	d903      	bls.n	8010bda <_svfiprintf_r+0x1a6>
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d0c6      	beq.n	8010b64 <_svfiprintf_r+0x130>
 8010bd6:	9105      	str	r1, [sp, #20]
 8010bd8:	e7c4      	b.n	8010b64 <_svfiprintf_r+0x130>
 8010bda:	fb0c 2101 	mla	r1, ip, r1, r2
 8010bde:	4604      	mov	r4, r0
 8010be0:	2301      	movs	r3, #1
 8010be2:	e7f0      	b.n	8010bc6 <_svfiprintf_r+0x192>
 8010be4:	ab03      	add	r3, sp, #12
 8010be6:	9300      	str	r3, [sp, #0]
 8010be8:	462a      	mov	r2, r5
 8010bea:	4b0e      	ldr	r3, [pc, #56]	@ (8010c24 <_svfiprintf_r+0x1f0>)
 8010bec:	a904      	add	r1, sp, #16
 8010bee:	4638      	mov	r0, r7
 8010bf0:	f7fc fcaa 	bl	800d548 <_printf_float>
 8010bf4:	1c42      	adds	r2, r0, #1
 8010bf6:	4606      	mov	r6, r0
 8010bf8:	d1d6      	bne.n	8010ba8 <_svfiprintf_r+0x174>
 8010bfa:	89ab      	ldrh	r3, [r5, #12]
 8010bfc:	065b      	lsls	r3, r3, #25
 8010bfe:	f53f af2d 	bmi.w	8010a5c <_svfiprintf_r+0x28>
 8010c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c04:	e72c      	b.n	8010a60 <_svfiprintf_r+0x2c>
 8010c06:	ab03      	add	r3, sp, #12
 8010c08:	9300      	str	r3, [sp, #0]
 8010c0a:	462a      	mov	r2, r5
 8010c0c:	4b05      	ldr	r3, [pc, #20]	@ (8010c24 <_svfiprintf_r+0x1f0>)
 8010c0e:	a904      	add	r1, sp, #16
 8010c10:	4638      	mov	r0, r7
 8010c12:	f7fc ff31 	bl	800da78 <_printf_i>
 8010c16:	e7ed      	b.n	8010bf4 <_svfiprintf_r+0x1c0>
 8010c18:	080121b1 	.word	0x080121b1
 8010c1c:	080121bb 	.word	0x080121bb
 8010c20:	0800d549 	.word	0x0800d549
 8010c24:	0801097d 	.word	0x0801097d
 8010c28:	080121b7 	.word	0x080121b7

08010c2c <__sflush_r>:
 8010c2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c34:	0716      	lsls	r6, r2, #28
 8010c36:	4605      	mov	r5, r0
 8010c38:	460c      	mov	r4, r1
 8010c3a:	d454      	bmi.n	8010ce6 <__sflush_r+0xba>
 8010c3c:	684b      	ldr	r3, [r1, #4]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	dc02      	bgt.n	8010c48 <__sflush_r+0x1c>
 8010c42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	dd48      	ble.n	8010cda <__sflush_r+0xae>
 8010c48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c4a:	2e00      	cmp	r6, #0
 8010c4c:	d045      	beq.n	8010cda <__sflush_r+0xae>
 8010c4e:	2300      	movs	r3, #0
 8010c50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010c54:	682f      	ldr	r7, [r5, #0]
 8010c56:	6a21      	ldr	r1, [r4, #32]
 8010c58:	602b      	str	r3, [r5, #0]
 8010c5a:	d030      	beq.n	8010cbe <__sflush_r+0x92>
 8010c5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010c5e:	89a3      	ldrh	r3, [r4, #12]
 8010c60:	0759      	lsls	r1, r3, #29
 8010c62:	d505      	bpl.n	8010c70 <__sflush_r+0x44>
 8010c64:	6863      	ldr	r3, [r4, #4]
 8010c66:	1ad2      	subs	r2, r2, r3
 8010c68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010c6a:	b10b      	cbz	r3, 8010c70 <__sflush_r+0x44>
 8010c6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010c6e:	1ad2      	subs	r2, r2, r3
 8010c70:	2300      	movs	r3, #0
 8010c72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c74:	6a21      	ldr	r1, [r4, #32]
 8010c76:	4628      	mov	r0, r5
 8010c78:	47b0      	blx	r6
 8010c7a:	1c43      	adds	r3, r0, #1
 8010c7c:	89a3      	ldrh	r3, [r4, #12]
 8010c7e:	d106      	bne.n	8010c8e <__sflush_r+0x62>
 8010c80:	6829      	ldr	r1, [r5, #0]
 8010c82:	291d      	cmp	r1, #29
 8010c84:	d82b      	bhi.n	8010cde <__sflush_r+0xb2>
 8010c86:	4a2a      	ldr	r2, [pc, #168]	@ (8010d30 <__sflush_r+0x104>)
 8010c88:	410a      	asrs	r2, r1
 8010c8a:	07d6      	lsls	r6, r2, #31
 8010c8c:	d427      	bmi.n	8010cde <__sflush_r+0xb2>
 8010c8e:	2200      	movs	r2, #0
 8010c90:	6062      	str	r2, [r4, #4]
 8010c92:	04d9      	lsls	r1, r3, #19
 8010c94:	6922      	ldr	r2, [r4, #16]
 8010c96:	6022      	str	r2, [r4, #0]
 8010c98:	d504      	bpl.n	8010ca4 <__sflush_r+0x78>
 8010c9a:	1c42      	adds	r2, r0, #1
 8010c9c:	d101      	bne.n	8010ca2 <__sflush_r+0x76>
 8010c9e:	682b      	ldr	r3, [r5, #0]
 8010ca0:	b903      	cbnz	r3, 8010ca4 <__sflush_r+0x78>
 8010ca2:	6560      	str	r0, [r4, #84]	@ 0x54
 8010ca4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010ca6:	602f      	str	r7, [r5, #0]
 8010ca8:	b1b9      	cbz	r1, 8010cda <__sflush_r+0xae>
 8010caa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010cae:	4299      	cmp	r1, r3
 8010cb0:	d002      	beq.n	8010cb8 <__sflush_r+0x8c>
 8010cb2:	4628      	mov	r0, r5
 8010cb4:	f7fe fa2c 	bl	800f110 <_free_r>
 8010cb8:	2300      	movs	r3, #0
 8010cba:	6363      	str	r3, [r4, #52]	@ 0x34
 8010cbc:	e00d      	b.n	8010cda <__sflush_r+0xae>
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	47b0      	blx	r6
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	1c50      	adds	r0, r2, #1
 8010cc8:	d1c9      	bne.n	8010c5e <__sflush_r+0x32>
 8010cca:	682b      	ldr	r3, [r5, #0]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d0c6      	beq.n	8010c5e <__sflush_r+0x32>
 8010cd0:	2b1d      	cmp	r3, #29
 8010cd2:	d001      	beq.n	8010cd8 <__sflush_r+0xac>
 8010cd4:	2b16      	cmp	r3, #22
 8010cd6:	d11e      	bne.n	8010d16 <__sflush_r+0xea>
 8010cd8:	602f      	str	r7, [r5, #0]
 8010cda:	2000      	movs	r0, #0
 8010cdc:	e022      	b.n	8010d24 <__sflush_r+0xf8>
 8010cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ce2:	b21b      	sxth	r3, r3
 8010ce4:	e01b      	b.n	8010d1e <__sflush_r+0xf2>
 8010ce6:	690f      	ldr	r7, [r1, #16]
 8010ce8:	2f00      	cmp	r7, #0
 8010cea:	d0f6      	beq.n	8010cda <__sflush_r+0xae>
 8010cec:	0793      	lsls	r3, r2, #30
 8010cee:	680e      	ldr	r6, [r1, #0]
 8010cf0:	bf08      	it	eq
 8010cf2:	694b      	ldreq	r3, [r1, #20]
 8010cf4:	600f      	str	r7, [r1, #0]
 8010cf6:	bf18      	it	ne
 8010cf8:	2300      	movne	r3, #0
 8010cfa:	eba6 0807 	sub.w	r8, r6, r7
 8010cfe:	608b      	str	r3, [r1, #8]
 8010d00:	f1b8 0f00 	cmp.w	r8, #0
 8010d04:	dde9      	ble.n	8010cda <__sflush_r+0xae>
 8010d06:	6a21      	ldr	r1, [r4, #32]
 8010d08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010d0a:	4643      	mov	r3, r8
 8010d0c:	463a      	mov	r2, r7
 8010d0e:	4628      	mov	r0, r5
 8010d10:	47b0      	blx	r6
 8010d12:	2800      	cmp	r0, #0
 8010d14:	dc08      	bgt.n	8010d28 <__sflush_r+0xfc>
 8010d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d1e:	81a3      	strh	r3, [r4, #12]
 8010d20:	f04f 30ff 	mov.w	r0, #4294967295
 8010d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d28:	4407      	add	r7, r0
 8010d2a:	eba8 0800 	sub.w	r8, r8, r0
 8010d2e:	e7e7      	b.n	8010d00 <__sflush_r+0xd4>
 8010d30:	dfbffffe 	.word	0xdfbffffe

08010d34 <_fflush_r>:
 8010d34:	b538      	push	{r3, r4, r5, lr}
 8010d36:	690b      	ldr	r3, [r1, #16]
 8010d38:	4605      	mov	r5, r0
 8010d3a:	460c      	mov	r4, r1
 8010d3c:	b913      	cbnz	r3, 8010d44 <_fflush_r+0x10>
 8010d3e:	2500      	movs	r5, #0
 8010d40:	4628      	mov	r0, r5
 8010d42:	bd38      	pop	{r3, r4, r5, pc}
 8010d44:	b118      	cbz	r0, 8010d4e <_fflush_r+0x1a>
 8010d46:	6a03      	ldr	r3, [r0, #32]
 8010d48:	b90b      	cbnz	r3, 8010d4e <_fflush_r+0x1a>
 8010d4a:	f7fd fa55 	bl	800e1f8 <__sinit>
 8010d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d0f3      	beq.n	8010d3e <_fflush_r+0xa>
 8010d56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010d58:	07d0      	lsls	r0, r2, #31
 8010d5a:	d404      	bmi.n	8010d66 <_fflush_r+0x32>
 8010d5c:	0599      	lsls	r1, r3, #22
 8010d5e:	d402      	bmi.n	8010d66 <_fflush_r+0x32>
 8010d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d62:	f7fd fb80 	bl	800e466 <__retarget_lock_acquire_recursive>
 8010d66:	4628      	mov	r0, r5
 8010d68:	4621      	mov	r1, r4
 8010d6a:	f7ff ff5f 	bl	8010c2c <__sflush_r>
 8010d6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d70:	07da      	lsls	r2, r3, #31
 8010d72:	4605      	mov	r5, r0
 8010d74:	d4e4      	bmi.n	8010d40 <_fflush_r+0xc>
 8010d76:	89a3      	ldrh	r3, [r4, #12]
 8010d78:	059b      	lsls	r3, r3, #22
 8010d7a:	d4e1      	bmi.n	8010d40 <_fflush_r+0xc>
 8010d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d7e:	f7fd fb73 	bl	800e468 <__retarget_lock_release_recursive>
 8010d82:	e7dd      	b.n	8010d40 <_fflush_r+0xc>

08010d84 <memmove>:
 8010d84:	4288      	cmp	r0, r1
 8010d86:	b510      	push	{r4, lr}
 8010d88:	eb01 0402 	add.w	r4, r1, r2
 8010d8c:	d902      	bls.n	8010d94 <memmove+0x10>
 8010d8e:	4284      	cmp	r4, r0
 8010d90:	4623      	mov	r3, r4
 8010d92:	d807      	bhi.n	8010da4 <memmove+0x20>
 8010d94:	1e43      	subs	r3, r0, #1
 8010d96:	42a1      	cmp	r1, r4
 8010d98:	d008      	beq.n	8010dac <memmove+0x28>
 8010d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010da2:	e7f8      	b.n	8010d96 <memmove+0x12>
 8010da4:	4402      	add	r2, r0
 8010da6:	4601      	mov	r1, r0
 8010da8:	428a      	cmp	r2, r1
 8010daa:	d100      	bne.n	8010dae <memmove+0x2a>
 8010dac:	bd10      	pop	{r4, pc}
 8010dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010db2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010db6:	e7f7      	b.n	8010da8 <memmove+0x24>

08010db8 <strncmp>:
 8010db8:	b510      	push	{r4, lr}
 8010dba:	b16a      	cbz	r2, 8010dd8 <strncmp+0x20>
 8010dbc:	3901      	subs	r1, #1
 8010dbe:	1884      	adds	r4, r0, r2
 8010dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dc4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d103      	bne.n	8010dd4 <strncmp+0x1c>
 8010dcc:	42a0      	cmp	r0, r4
 8010dce:	d001      	beq.n	8010dd4 <strncmp+0x1c>
 8010dd0:	2a00      	cmp	r2, #0
 8010dd2:	d1f5      	bne.n	8010dc0 <strncmp+0x8>
 8010dd4:	1ad0      	subs	r0, r2, r3
 8010dd6:	bd10      	pop	{r4, pc}
 8010dd8:	4610      	mov	r0, r2
 8010dda:	e7fc      	b.n	8010dd6 <strncmp+0x1e>

08010ddc <_sbrk_r>:
 8010ddc:	b538      	push	{r3, r4, r5, lr}
 8010dde:	4d06      	ldr	r5, [pc, #24]	@ (8010df8 <_sbrk_r+0x1c>)
 8010de0:	2300      	movs	r3, #0
 8010de2:	4604      	mov	r4, r0
 8010de4:	4608      	mov	r0, r1
 8010de6:	602b      	str	r3, [r5, #0]
 8010de8:	f7f1 f8f2 	bl	8001fd0 <_sbrk>
 8010dec:	1c43      	adds	r3, r0, #1
 8010dee:	d102      	bne.n	8010df6 <_sbrk_r+0x1a>
 8010df0:	682b      	ldr	r3, [r5, #0]
 8010df2:	b103      	cbz	r3, 8010df6 <_sbrk_r+0x1a>
 8010df4:	6023      	str	r3, [r4, #0]
 8010df6:	bd38      	pop	{r3, r4, r5, pc}
 8010df8:	20000a24 	.word	0x20000a24

08010dfc <memcpy>:
 8010dfc:	440a      	add	r2, r1
 8010dfe:	4291      	cmp	r1, r2
 8010e00:	f100 33ff 	add.w	r3, r0, #4294967295
 8010e04:	d100      	bne.n	8010e08 <memcpy+0xc>
 8010e06:	4770      	bx	lr
 8010e08:	b510      	push	{r4, lr}
 8010e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e12:	4291      	cmp	r1, r2
 8010e14:	d1f9      	bne.n	8010e0a <memcpy+0xe>
 8010e16:	bd10      	pop	{r4, pc}

08010e18 <nan>:
 8010e18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010e20 <nan+0x8>
 8010e1c:	4770      	bx	lr
 8010e1e:	bf00      	nop
 8010e20:	00000000 	.word	0x00000000
 8010e24:	7ff80000 	.word	0x7ff80000

08010e28 <__assert_func>:
 8010e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e2a:	4614      	mov	r4, r2
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	4b09      	ldr	r3, [pc, #36]	@ (8010e54 <__assert_func+0x2c>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	4605      	mov	r5, r0
 8010e34:	68d8      	ldr	r0, [r3, #12]
 8010e36:	b954      	cbnz	r4, 8010e4e <__assert_func+0x26>
 8010e38:	4b07      	ldr	r3, [pc, #28]	@ (8010e58 <__assert_func+0x30>)
 8010e3a:	461c      	mov	r4, r3
 8010e3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e40:	9100      	str	r1, [sp, #0]
 8010e42:	462b      	mov	r3, r5
 8010e44:	4905      	ldr	r1, [pc, #20]	@ (8010e5c <__assert_func+0x34>)
 8010e46:	f000 fba7 	bl	8011598 <fiprintf>
 8010e4a:	f000 fbb7 	bl	80115bc <abort>
 8010e4e:	4b04      	ldr	r3, [pc, #16]	@ (8010e60 <__assert_func+0x38>)
 8010e50:	e7f4      	b.n	8010e3c <__assert_func+0x14>
 8010e52:	bf00      	nop
 8010e54:	2000009c 	.word	0x2000009c
 8010e58:	08012205 	.word	0x08012205
 8010e5c:	080121d7 	.word	0x080121d7
 8010e60:	080121ca 	.word	0x080121ca

08010e64 <_calloc_r>:
 8010e64:	b570      	push	{r4, r5, r6, lr}
 8010e66:	fba1 5402 	umull	r5, r4, r1, r2
 8010e6a:	b93c      	cbnz	r4, 8010e7c <_calloc_r+0x18>
 8010e6c:	4629      	mov	r1, r5
 8010e6e:	f7fe f9c3 	bl	800f1f8 <_malloc_r>
 8010e72:	4606      	mov	r6, r0
 8010e74:	b928      	cbnz	r0, 8010e82 <_calloc_r+0x1e>
 8010e76:	2600      	movs	r6, #0
 8010e78:	4630      	mov	r0, r6
 8010e7a:	bd70      	pop	{r4, r5, r6, pc}
 8010e7c:	220c      	movs	r2, #12
 8010e7e:	6002      	str	r2, [r0, #0]
 8010e80:	e7f9      	b.n	8010e76 <_calloc_r+0x12>
 8010e82:	462a      	mov	r2, r5
 8010e84:	4621      	mov	r1, r4
 8010e86:	f7fd fa71 	bl	800e36c <memset>
 8010e8a:	e7f5      	b.n	8010e78 <_calloc_r+0x14>

08010e8c <rshift>:
 8010e8c:	6903      	ldr	r3, [r0, #16]
 8010e8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010e92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e96:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010e9a:	f100 0414 	add.w	r4, r0, #20
 8010e9e:	dd45      	ble.n	8010f2c <rshift+0xa0>
 8010ea0:	f011 011f 	ands.w	r1, r1, #31
 8010ea4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010ea8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010eac:	d10c      	bne.n	8010ec8 <rshift+0x3c>
 8010eae:	f100 0710 	add.w	r7, r0, #16
 8010eb2:	4629      	mov	r1, r5
 8010eb4:	42b1      	cmp	r1, r6
 8010eb6:	d334      	bcc.n	8010f22 <rshift+0x96>
 8010eb8:	1a9b      	subs	r3, r3, r2
 8010eba:	009b      	lsls	r3, r3, #2
 8010ebc:	1eea      	subs	r2, r5, #3
 8010ebe:	4296      	cmp	r6, r2
 8010ec0:	bf38      	it	cc
 8010ec2:	2300      	movcc	r3, #0
 8010ec4:	4423      	add	r3, r4
 8010ec6:	e015      	b.n	8010ef4 <rshift+0x68>
 8010ec8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010ecc:	f1c1 0820 	rsb	r8, r1, #32
 8010ed0:	40cf      	lsrs	r7, r1
 8010ed2:	f105 0e04 	add.w	lr, r5, #4
 8010ed6:	46a1      	mov	r9, r4
 8010ed8:	4576      	cmp	r6, lr
 8010eda:	46f4      	mov	ip, lr
 8010edc:	d815      	bhi.n	8010f0a <rshift+0x7e>
 8010ede:	1a9a      	subs	r2, r3, r2
 8010ee0:	0092      	lsls	r2, r2, #2
 8010ee2:	3a04      	subs	r2, #4
 8010ee4:	3501      	adds	r5, #1
 8010ee6:	42ae      	cmp	r6, r5
 8010ee8:	bf38      	it	cc
 8010eea:	2200      	movcc	r2, #0
 8010eec:	18a3      	adds	r3, r4, r2
 8010eee:	50a7      	str	r7, [r4, r2]
 8010ef0:	b107      	cbz	r7, 8010ef4 <rshift+0x68>
 8010ef2:	3304      	adds	r3, #4
 8010ef4:	1b1a      	subs	r2, r3, r4
 8010ef6:	42a3      	cmp	r3, r4
 8010ef8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010efc:	bf08      	it	eq
 8010efe:	2300      	moveq	r3, #0
 8010f00:	6102      	str	r2, [r0, #16]
 8010f02:	bf08      	it	eq
 8010f04:	6143      	streq	r3, [r0, #20]
 8010f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f0a:	f8dc c000 	ldr.w	ip, [ip]
 8010f0e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010f12:	ea4c 0707 	orr.w	r7, ip, r7
 8010f16:	f849 7b04 	str.w	r7, [r9], #4
 8010f1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010f1e:	40cf      	lsrs	r7, r1
 8010f20:	e7da      	b.n	8010ed8 <rshift+0x4c>
 8010f22:	f851 cb04 	ldr.w	ip, [r1], #4
 8010f26:	f847 cf04 	str.w	ip, [r7, #4]!
 8010f2a:	e7c3      	b.n	8010eb4 <rshift+0x28>
 8010f2c:	4623      	mov	r3, r4
 8010f2e:	e7e1      	b.n	8010ef4 <rshift+0x68>

08010f30 <__hexdig_fun>:
 8010f30:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010f34:	2b09      	cmp	r3, #9
 8010f36:	d802      	bhi.n	8010f3e <__hexdig_fun+0xe>
 8010f38:	3820      	subs	r0, #32
 8010f3a:	b2c0      	uxtb	r0, r0
 8010f3c:	4770      	bx	lr
 8010f3e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010f42:	2b05      	cmp	r3, #5
 8010f44:	d801      	bhi.n	8010f4a <__hexdig_fun+0x1a>
 8010f46:	3847      	subs	r0, #71	@ 0x47
 8010f48:	e7f7      	b.n	8010f3a <__hexdig_fun+0xa>
 8010f4a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010f4e:	2b05      	cmp	r3, #5
 8010f50:	d801      	bhi.n	8010f56 <__hexdig_fun+0x26>
 8010f52:	3827      	subs	r0, #39	@ 0x27
 8010f54:	e7f1      	b.n	8010f3a <__hexdig_fun+0xa>
 8010f56:	2000      	movs	r0, #0
 8010f58:	4770      	bx	lr
	...

08010f5c <__gethex>:
 8010f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f60:	b085      	sub	sp, #20
 8010f62:	468a      	mov	sl, r1
 8010f64:	9302      	str	r3, [sp, #8]
 8010f66:	680b      	ldr	r3, [r1, #0]
 8010f68:	9001      	str	r0, [sp, #4]
 8010f6a:	4690      	mov	r8, r2
 8010f6c:	1c9c      	adds	r4, r3, #2
 8010f6e:	46a1      	mov	r9, r4
 8010f70:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010f74:	2830      	cmp	r0, #48	@ 0x30
 8010f76:	d0fa      	beq.n	8010f6e <__gethex+0x12>
 8010f78:	eba9 0303 	sub.w	r3, r9, r3
 8010f7c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010f80:	f7ff ffd6 	bl	8010f30 <__hexdig_fun>
 8010f84:	4605      	mov	r5, r0
 8010f86:	2800      	cmp	r0, #0
 8010f88:	d168      	bne.n	801105c <__gethex+0x100>
 8010f8a:	49a0      	ldr	r1, [pc, #640]	@ (801120c <__gethex+0x2b0>)
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	4648      	mov	r0, r9
 8010f90:	f7ff ff12 	bl	8010db8 <strncmp>
 8010f94:	4607      	mov	r7, r0
 8010f96:	2800      	cmp	r0, #0
 8010f98:	d167      	bne.n	801106a <__gethex+0x10e>
 8010f9a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010f9e:	4626      	mov	r6, r4
 8010fa0:	f7ff ffc6 	bl	8010f30 <__hexdig_fun>
 8010fa4:	2800      	cmp	r0, #0
 8010fa6:	d062      	beq.n	801106e <__gethex+0x112>
 8010fa8:	4623      	mov	r3, r4
 8010faa:	7818      	ldrb	r0, [r3, #0]
 8010fac:	2830      	cmp	r0, #48	@ 0x30
 8010fae:	4699      	mov	r9, r3
 8010fb0:	f103 0301 	add.w	r3, r3, #1
 8010fb4:	d0f9      	beq.n	8010faa <__gethex+0x4e>
 8010fb6:	f7ff ffbb 	bl	8010f30 <__hexdig_fun>
 8010fba:	fab0 f580 	clz	r5, r0
 8010fbe:	096d      	lsrs	r5, r5, #5
 8010fc0:	f04f 0b01 	mov.w	fp, #1
 8010fc4:	464a      	mov	r2, r9
 8010fc6:	4616      	mov	r6, r2
 8010fc8:	3201      	adds	r2, #1
 8010fca:	7830      	ldrb	r0, [r6, #0]
 8010fcc:	f7ff ffb0 	bl	8010f30 <__hexdig_fun>
 8010fd0:	2800      	cmp	r0, #0
 8010fd2:	d1f8      	bne.n	8010fc6 <__gethex+0x6a>
 8010fd4:	498d      	ldr	r1, [pc, #564]	@ (801120c <__gethex+0x2b0>)
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	4630      	mov	r0, r6
 8010fda:	f7ff feed 	bl	8010db8 <strncmp>
 8010fde:	2800      	cmp	r0, #0
 8010fe0:	d13f      	bne.n	8011062 <__gethex+0x106>
 8010fe2:	b944      	cbnz	r4, 8010ff6 <__gethex+0x9a>
 8010fe4:	1c74      	adds	r4, r6, #1
 8010fe6:	4622      	mov	r2, r4
 8010fe8:	4616      	mov	r6, r2
 8010fea:	3201      	adds	r2, #1
 8010fec:	7830      	ldrb	r0, [r6, #0]
 8010fee:	f7ff ff9f 	bl	8010f30 <__hexdig_fun>
 8010ff2:	2800      	cmp	r0, #0
 8010ff4:	d1f8      	bne.n	8010fe8 <__gethex+0x8c>
 8010ff6:	1ba4      	subs	r4, r4, r6
 8010ff8:	00a7      	lsls	r7, r4, #2
 8010ffa:	7833      	ldrb	r3, [r6, #0]
 8010ffc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011000:	2b50      	cmp	r3, #80	@ 0x50
 8011002:	d13e      	bne.n	8011082 <__gethex+0x126>
 8011004:	7873      	ldrb	r3, [r6, #1]
 8011006:	2b2b      	cmp	r3, #43	@ 0x2b
 8011008:	d033      	beq.n	8011072 <__gethex+0x116>
 801100a:	2b2d      	cmp	r3, #45	@ 0x2d
 801100c:	d034      	beq.n	8011078 <__gethex+0x11c>
 801100e:	1c71      	adds	r1, r6, #1
 8011010:	2400      	movs	r4, #0
 8011012:	7808      	ldrb	r0, [r1, #0]
 8011014:	f7ff ff8c 	bl	8010f30 <__hexdig_fun>
 8011018:	1e43      	subs	r3, r0, #1
 801101a:	b2db      	uxtb	r3, r3
 801101c:	2b18      	cmp	r3, #24
 801101e:	d830      	bhi.n	8011082 <__gethex+0x126>
 8011020:	f1a0 0210 	sub.w	r2, r0, #16
 8011024:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011028:	f7ff ff82 	bl	8010f30 <__hexdig_fun>
 801102c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011030:	fa5f fc8c 	uxtb.w	ip, ip
 8011034:	f1bc 0f18 	cmp.w	ip, #24
 8011038:	f04f 030a 	mov.w	r3, #10
 801103c:	d91e      	bls.n	801107c <__gethex+0x120>
 801103e:	b104      	cbz	r4, 8011042 <__gethex+0xe6>
 8011040:	4252      	negs	r2, r2
 8011042:	4417      	add	r7, r2
 8011044:	f8ca 1000 	str.w	r1, [sl]
 8011048:	b1ed      	cbz	r5, 8011086 <__gethex+0x12a>
 801104a:	f1bb 0f00 	cmp.w	fp, #0
 801104e:	bf0c      	ite	eq
 8011050:	2506      	moveq	r5, #6
 8011052:	2500      	movne	r5, #0
 8011054:	4628      	mov	r0, r5
 8011056:	b005      	add	sp, #20
 8011058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801105c:	2500      	movs	r5, #0
 801105e:	462c      	mov	r4, r5
 8011060:	e7b0      	b.n	8010fc4 <__gethex+0x68>
 8011062:	2c00      	cmp	r4, #0
 8011064:	d1c7      	bne.n	8010ff6 <__gethex+0x9a>
 8011066:	4627      	mov	r7, r4
 8011068:	e7c7      	b.n	8010ffa <__gethex+0x9e>
 801106a:	464e      	mov	r6, r9
 801106c:	462f      	mov	r7, r5
 801106e:	2501      	movs	r5, #1
 8011070:	e7c3      	b.n	8010ffa <__gethex+0x9e>
 8011072:	2400      	movs	r4, #0
 8011074:	1cb1      	adds	r1, r6, #2
 8011076:	e7cc      	b.n	8011012 <__gethex+0xb6>
 8011078:	2401      	movs	r4, #1
 801107a:	e7fb      	b.n	8011074 <__gethex+0x118>
 801107c:	fb03 0002 	mla	r0, r3, r2, r0
 8011080:	e7ce      	b.n	8011020 <__gethex+0xc4>
 8011082:	4631      	mov	r1, r6
 8011084:	e7de      	b.n	8011044 <__gethex+0xe8>
 8011086:	eba6 0309 	sub.w	r3, r6, r9
 801108a:	3b01      	subs	r3, #1
 801108c:	4629      	mov	r1, r5
 801108e:	2b07      	cmp	r3, #7
 8011090:	dc0a      	bgt.n	80110a8 <__gethex+0x14c>
 8011092:	9801      	ldr	r0, [sp, #4]
 8011094:	f7fe f93c 	bl	800f310 <_Balloc>
 8011098:	4604      	mov	r4, r0
 801109a:	b940      	cbnz	r0, 80110ae <__gethex+0x152>
 801109c:	4b5c      	ldr	r3, [pc, #368]	@ (8011210 <__gethex+0x2b4>)
 801109e:	4602      	mov	r2, r0
 80110a0:	21e4      	movs	r1, #228	@ 0xe4
 80110a2:	485c      	ldr	r0, [pc, #368]	@ (8011214 <__gethex+0x2b8>)
 80110a4:	f7ff fec0 	bl	8010e28 <__assert_func>
 80110a8:	3101      	adds	r1, #1
 80110aa:	105b      	asrs	r3, r3, #1
 80110ac:	e7ef      	b.n	801108e <__gethex+0x132>
 80110ae:	f100 0a14 	add.w	sl, r0, #20
 80110b2:	2300      	movs	r3, #0
 80110b4:	4655      	mov	r5, sl
 80110b6:	469b      	mov	fp, r3
 80110b8:	45b1      	cmp	r9, r6
 80110ba:	d337      	bcc.n	801112c <__gethex+0x1d0>
 80110bc:	f845 bb04 	str.w	fp, [r5], #4
 80110c0:	eba5 050a 	sub.w	r5, r5, sl
 80110c4:	10ad      	asrs	r5, r5, #2
 80110c6:	6125      	str	r5, [r4, #16]
 80110c8:	4658      	mov	r0, fp
 80110ca:	f7fe fa13 	bl	800f4f4 <__hi0bits>
 80110ce:	016d      	lsls	r5, r5, #5
 80110d0:	f8d8 6000 	ldr.w	r6, [r8]
 80110d4:	1a2d      	subs	r5, r5, r0
 80110d6:	42b5      	cmp	r5, r6
 80110d8:	dd54      	ble.n	8011184 <__gethex+0x228>
 80110da:	1bad      	subs	r5, r5, r6
 80110dc:	4629      	mov	r1, r5
 80110de:	4620      	mov	r0, r4
 80110e0:	f7fe fda7 	bl	800fc32 <__any_on>
 80110e4:	4681      	mov	r9, r0
 80110e6:	b178      	cbz	r0, 8011108 <__gethex+0x1ac>
 80110e8:	1e6b      	subs	r3, r5, #1
 80110ea:	1159      	asrs	r1, r3, #5
 80110ec:	f003 021f 	and.w	r2, r3, #31
 80110f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80110f4:	f04f 0901 	mov.w	r9, #1
 80110f8:	fa09 f202 	lsl.w	r2, r9, r2
 80110fc:	420a      	tst	r2, r1
 80110fe:	d003      	beq.n	8011108 <__gethex+0x1ac>
 8011100:	454b      	cmp	r3, r9
 8011102:	dc36      	bgt.n	8011172 <__gethex+0x216>
 8011104:	f04f 0902 	mov.w	r9, #2
 8011108:	4629      	mov	r1, r5
 801110a:	4620      	mov	r0, r4
 801110c:	f7ff febe 	bl	8010e8c <rshift>
 8011110:	442f      	add	r7, r5
 8011112:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011116:	42bb      	cmp	r3, r7
 8011118:	da42      	bge.n	80111a0 <__gethex+0x244>
 801111a:	9801      	ldr	r0, [sp, #4]
 801111c:	4621      	mov	r1, r4
 801111e:	f7fe f937 	bl	800f390 <_Bfree>
 8011122:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011124:	2300      	movs	r3, #0
 8011126:	6013      	str	r3, [r2, #0]
 8011128:	25a3      	movs	r5, #163	@ 0xa3
 801112a:	e793      	b.n	8011054 <__gethex+0xf8>
 801112c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011130:	2a2e      	cmp	r2, #46	@ 0x2e
 8011132:	d012      	beq.n	801115a <__gethex+0x1fe>
 8011134:	2b20      	cmp	r3, #32
 8011136:	d104      	bne.n	8011142 <__gethex+0x1e6>
 8011138:	f845 bb04 	str.w	fp, [r5], #4
 801113c:	f04f 0b00 	mov.w	fp, #0
 8011140:	465b      	mov	r3, fp
 8011142:	7830      	ldrb	r0, [r6, #0]
 8011144:	9303      	str	r3, [sp, #12]
 8011146:	f7ff fef3 	bl	8010f30 <__hexdig_fun>
 801114a:	9b03      	ldr	r3, [sp, #12]
 801114c:	f000 000f 	and.w	r0, r0, #15
 8011150:	4098      	lsls	r0, r3
 8011152:	ea4b 0b00 	orr.w	fp, fp, r0
 8011156:	3304      	adds	r3, #4
 8011158:	e7ae      	b.n	80110b8 <__gethex+0x15c>
 801115a:	45b1      	cmp	r9, r6
 801115c:	d8ea      	bhi.n	8011134 <__gethex+0x1d8>
 801115e:	492b      	ldr	r1, [pc, #172]	@ (801120c <__gethex+0x2b0>)
 8011160:	9303      	str	r3, [sp, #12]
 8011162:	2201      	movs	r2, #1
 8011164:	4630      	mov	r0, r6
 8011166:	f7ff fe27 	bl	8010db8 <strncmp>
 801116a:	9b03      	ldr	r3, [sp, #12]
 801116c:	2800      	cmp	r0, #0
 801116e:	d1e1      	bne.n	8011134 <__gethex+0x1d8>
 8011170:	e7a2      	b.n	80110b8 <__gethex+0x15c>
 8011172:	1ea9      	subs	r1, r5, #2
 8011174:	4620      	mov	r0, r4
 8011176:	f7fe fd5c 	bl	800fc32 <__any_on>
 801117a:	2800      	cmp	r0, #0
 801117c:	d0c2      	beq.n	8011104 <__gethex+0x1a8>
 801117e:	f04f 0903 	mov.w	r9, #3
 8011182:	e7c1      	b.n	8011108 <__gethex+0x1ac>
 8011184:	da09      	bge.n	801119a <__gethex+0x23e>
 8011186:	1b75      	subs	r5, r6, r5
 8011188:	4621      	mov	r1, r4
 801118a:	9801      	ldr	r0, [sp, #4]
 801118c:	462a      	mov	r2, r5
 801118e:	f7fe fb17 	bl	800f7c0 <__lshift>
 8011192:	1b7f      	subs	r7, r7, r5
 8011194:	4604      	mov	r4, r0
 8011196:	f100 0a14 	add.w	sl, r0, #20
 801119a:	f04f 0900 	mov.w	r9, #0
 801119e:	e7b8      	b.n	8011112 <__gethex+0x1b6>
 80111a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80111a4:	42bd      	cmp	r5, r7
 80111a6:	dd6f      	ble.n	8011288 <__gethex+0x32c>
 80111a8:	1bed      	subs	r5, r5, r7
 80111aa:	42ae      	cmp	r6, r5
 80111ac:	dc34      	bgt.n	8011218 <__gethex+0x2bc>
 80111ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80111b2:	2b02      	cmp	r3, #2
 80111b4:	d022      	beq.n	80111fc <__gethex+0x2a0>
 80111b6:	2b03      	cmp	r3, #3
 80111b8:	d024      	beq.n	8011204 <__gethex+0x2a8>
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d115      	bne.n	80111ea <__gethex+0x28e>
 80111be:	42ae      	cmp	r6, r5
 80111c0:	d113      	bne.n	80111ea <__gethex+0x28e>
 80111c2:	2e01      	cmp	r6, #1
 80111c4:	d10b      	bne.n	80111de <__gethex+0x282>
 80111c6:	9a02      	ldr	r2, [sp, #8]
 80111c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80111cc:	6013      	str	r3, [r2, #0]
 80111ce:	2301      	movs	r3, #1
 80111d0:	6123      	str	r3, [r4, #16]
 80111d2:	f8ca 3000 	str.w	r3, [sl]
 80111d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80111d8:	2562      	movs	r5, #98	@ 0x62
 80111da:	601c      	str	r4, [r3, #0]
 80111dc:	e73a      	b.n	8011054 <__gethex+0xf8>
 80111de:	1e71      	subs	r1, r6, #1
 80111e0:	4620      	mov	r0, r4
 80111e2:	f7fe fd26 	bl	800fc32 <__any_on>
 80111e6:	2800      	cmp	r0, #0
 80111e8:	d1ed      	bne.n	80111c6 <__gethex+0x26a>
 80111ea:	9801      	ldr	r0, [sp, #4]
 80111ec:	4621      	mov	r1, r4
 80111ee:	f7fe f8cf 	bl	800f390 <_Bfree>
 80111f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80111f4:	2300      	movs	r3, #0
 80111f6:	6013      	str	r3, [r2, #0]
 80111f8:	2550      	movs	r5, #80	@ 0x50
 80111fa:	e72b      	b.n	8011054 <__gethex+0xf8>
 80111fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d1f3      	bne.n	80111ea <__gethex+0x28e>
 8011202:	e7e0      	b.n	80111c6 <__gethex+0x26a>
 8011204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011206:	2b00      	cmp	r3, #0
 8011208:	d1dd      	bne.n	80111c6 <__gethex+0x26a>
 801120a:	e7ee      	b.n	80111ea <__gethex+0x28e>
 801120c:	08012058 	.word	0x08012058
 8011210:	08011ef0 	.word	0x08011ef0
 8011214:	08012206 	.word	0x08012206
 8011218:	1e6f      	subs	r7, r5, #1
 801121a:	f1b9 0f00 	cmp.w	r9, #0
 801121e:	d130      	bne.n	8011282 <__gethex+0x326>
 8011220:	b127      	cbz	r7, 801122c <__gethex+0x2d0>
 8011222:	4639      	mov	r1, r7
 8011224:	4620      	mov	r0, r4
 8011226:	f7fe fd04 	bl	800fc32 <__any_on>
 801122a:	4681      	mov	r9, r0
 801122c:	117a      	asrs	r2, r7, #5
 801122e:	2301      	movs	r3, #1
 8011230:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011234:	f007 071f 	and.w	r7, r7, #31
 8011238:	40bb      	lsls	r3, r7
 801123a:	4213      	tst	r3, r2
 801123c:	4629      	mov	r1, r5
 801123e:	4620      	mov	r0, r4
 8011240:	bf18      	it	ne
 8011242:	f049 0902 	orrne.w	r9, r9, #2
 8011246:	f7ff fe21 	bl	8010e8c <rshift>
 801124a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801124e:	1b76      	subs	r6, r6, r5
 8011250:	2502      	movs	r5, #2
 8011252:	f1b9 0f00 	cmp.w	r9, #0
 8011256:	d047      	beq.n	80112e8 <__gethex+0x38c>
 8011258:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801125c:	2b02      	cmp	r3, #2
 801125e:	d015      	beq.n	801128c <__gethex+0x330>
 8011260:	2b03      	cmp	r3, #3
 8011262:	d017      	beq.n	8011294 <__gethex+0x338>
 8011264:	2b01      	cmp	r3, #1
 8011266:	d109      	bne.n	801127c <__gethex+0x320>
 8011268:	f019 0f02 	tst.w	r9, #2
 801126c:	d006      	beq.n	801127c <__gethex+0x320>
 801126e:	f8da 3000 	ldr.w	r3, [sl]
 8011272:	ea49 0903 	orr.w	r9, r9, r3
 8011276:	f019 0f01 	tst.w	r9, #1
 801127a:	d10e      	bne.n	801129a <__gethex+0x33e>
 801127c:	f045 0510 	orr.w	r5, r5, #16
 8011280:	e032      	b.n	80112e8 <__gethex+0x38c>
 8011282:	f04f 0901 	mov.w	r9, #1
 8011286:	e7d1      	b.n	801122c <__gethex+0x2d0>
 8011288:	2501      	movs	r5, #1
 801128a:	e7e2      	b.n	8011252 <__gethex+0x2f6>
 801128c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801128e:	f1c3 0301 	rsb	r3, r3, #1
 8011292:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011296:	2b00      	cmp	r3, #0
 8011298:	d0f0      	beq.n	801127c <__gethex+0x320>
 801129a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801129e:	f104 0314 	add.w	r3, r4, #20
 80112a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80112a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80112aa:	f04f 0c00 	mov.w	ip, #0
 80112ae:	4618      	mov	r0, r3
 80112b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80112b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80112b8:	d01b      	beq.n	80112f2 <__gethex+0x396>
 80112ba:	3201      	adds	r2, #1
 80112bc:	6002      	str	r2, [r0, #0]
 80112be:	2d02      	cmp	r5, #2
 80112c0:	f104 0314 	add.w	r3, r4, #20
 80112c4:	d13c      	bne.n	8011340 <__gethex+0x3e4>
 80112c6:	f8d8 2000 	ldr.w	r2, [r8]
 80112ca:	3a01      	subs	r2, #1
 80112cc:	42b2      	cmp	r2, r6
 80112ce:	d109      	bne.n	80112e4 <__gethex+0x388>
 80112d0:	1171      	asrs	r1, r6, #5
 80112d2:	2201      	movs	r2, #1
 80112d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80112d8:	f006 061f 	and.w	r6, r6, #31
 80112dc:	fa02 f606 	lsl.w	r6, r2, r6
 80112e0:	421e      	tst	r6, r3
 80112e2:	d13a      	bne.n	801135a <__gethex+0x3fe>
 80112e4:	f045 0520 	orr.w	r5, r5, #32
 80112e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112ea:	601c      	str	r4, [r3, #0]
 80112ec:	9b02      	ldr	r3, [sp, #8]
 80112ee:	601f      	str	r7, [r3, #0]
 80112f0:	e6b0      	b.n	8011054 <__gethex+0xf8>
 80112f2:	4299      	cmp	r1, r3
 80112f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80112f8:	d8d9      	bhi.n	80112ae <__gethex+0x352>
 80112fa:	68a3      	ldr	r3, [r4, #8]
 80112fc:	459b      	cmp	fp, r3
 80112fe:	db17      	blt.n	8011330 <__gethex+0x3d4>
 8011300:	6861      	ldr	r1, [r4, #4]
 8011302:	9801      	ldr	r0, [sp, #4]
 8011304:	3101      	adds	r1, #1
 8011306:	f7fe f803 	bl	800f310 <_Balloc>
 801130a:	4681      	mov	r9, r0
 801130c:	b918      	cbnz	r0, 8011316 <__gethex+0x3ba>
 801130e:	4b1a      	ldr	r3, [pc, #104]	@ (8011378 <__gethex+0x41c>)
 8011310:	4602      	mov	r2, r0
 8011312:	2184      	movs	r1, #132	@ 0x84
 8011314:	e6c5      	b.n	80110a2 <__gethex+0x146>
 8011316:	6922      	ldr	r2, [r4, #16]
 8011318:	3202      	adds	r2, #2
 801131a:	f104 010c 	add.w	r1, r4, #12
 801131e:	0092      	lsls	r2, r2, #2
 8011320:	300c      	adds	r0, #12
 8011322:	f7ff fd6b 	bl	8010dfc <memcpy>
 8011326:	4621      	mov	r1, r4
 8011328:	9801      	ldr	r0, [sp, #4]
 801132a:	f7fe f831 	bl	800f390 <_Bfree>
 801132e:	464c      	mov	r4, r9
 8011330:	6923      	ldr	r3, [r4, #16]
 8011332:	1c5a      	adds	r2, r3, #1
 8011334:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011338:	6122      	str	r2, [r4, #16]
 801133a:	2201      	movs	r2, #1
 801133c:	615a      	str	r2, [r3, #20]
 801133e:	e7be      	b.n	80112be <__gethex+0x362>
 8011340:	6922      	ldr	r2, [r4, #16]
 8011342:	455a      	cmp	r2, fp
 8011344:	dd0b      	ble.n	801135e <__gethex+0x402>
 8011346:	2101      	movs	r1, #1
 8011348:	4620      	mov	r0, r4
 801134a:	f7ff fd9f 	bl	8010e8c <rshift>
 801134e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011352:	3701      	adds	r7, #1
 8011354:	42bb      	cmp	r3, r7
 8011356:	f6ff aee0 	blt.w	801111a <__gethex+0x1be>
 801135a:	2501      	movs	r5, #1
 801135c:	e7c2      	b.n	80112e4 <__gethex+0x388>
 801135e:	f016 061f 	ands.w	r6, r6, #31
 8011362:	d0fa      	beq.n	801135a <__gethex+0x3fe>
 8011364:	4453      	add	r3, sl
 8011366:	f1c6 0620 	rsb	r6, r6, #32
 801136a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801136e:	f7fe f8c1 	bl	800f4f4 <__hi0bits>
 8011372:	42b0      	cmp	r0, r6
 8011374:	dbe7      	blt.n	8011346 <__gethex+0x3ea>
 8011376:	e7f0      	b.n	801135a <__gethex+0x3fe>
 8011378:	08011ef0 	.word	0x08011ef0

0801137c <L_shift>:
 801137c:	f1c2 0208 	rsb	r2, r2, #8
 8011380:	0092      	lsls	r2, r2, #2
 8011382:	b570      	push	{r4, r5, r6, lr}
 8011384:	f1c2 0620 	rsb	r6, r2, #32
 8011388:	6843      	ldr	r3, [r0, #4]
 801138a:	6804      	ldr	r4, [r0, #0]
 801138c:	fa03 f506 	lsl.w	r5, r3, r6
 8011390:	432c      	orrs	r4, r5
 8011392:	40d3      	lsrs	r3, r2
 8011394:	6004      	str	r4, [r0, #0]
 8011396:	f840 3f04 	str.w	r3, [r0, #4]!
 801139a:	4288      	cmp	r0, r1
 801139c:	d3f4      	bcc.n	8011388 <L_shift+0xc>
 801139e:	bd70      	pop	{r4, r5, r6, pc}

080113a0 <__match>:
 80113a0:	b530      	push	{r4, r5, lr}
 80113a2:	6803      	ldr	r3, [r0, #0]
 80113a4:	3301      	adds	r3, #1
 80113a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80113aa:	b914      	cbnz	r4, 80113b2 <__match+0x12>
 80113ac:	6003      	str	r3, [r0, #0]
 80113ae:	2001      	movs	r0, #1
 80113b0:	bd30      	pop	{r4, r5, pc}
 80113b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80113ba:	2d19      	cmp	r5, #25
 80113bc:	bf98      	it	ls
 80113be:	3220      	addls	r2, #32
 80113c0:	42a2      	cmp	r2, r4
 80113c2:	d0f0      	beq.n	80113a6 <__match+0x6>
 80113c4:	2000      	movs	r0, #0
 80113c6:	e7f3      	b.n	80113b0 <__match+0x10>

080113c8 <__hexnan>:
 80113c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113cc:	680b      	ldr	r3, [r1, #0]
 80113ce:	6801      	ldr	r1, [r0, #0]
 80113d0:	115e      	asrs	r6, r3, #5
 80113d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80113d6:	f013 031f 	ands.w	r3, r3, #31
 80113da:	b087      	sub	sp, #28
 80113dc:	bf18      	it	ne
 80113de:	3604      	addne	r6, #4
 80113e0:	2500      	movs	r5, #0
 80113e2:	1f37      	subs	r7, r6, #4
 80113e4:	4682      	mov	sl, r0
 80113e6:	4690      	mov	r8, r2
 80113e8:	9301      	str	r3, [sp, #4]
 80113ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80113ee:	46b9      	mov	r9, r7
 80113f0:	463c      	mov	r4, r7
 80113f2:	9502      	str	r5, [sp, #8]
 80113f4:	46ab      	mov	fp, r5
 80113f6:	784a      	ldrb	r2, [r1, #1]
 80113f8:	1c4b      	adds	r3, r1, #1
 80113fa:	9303      	str	r3, [sp, #12]
 80113fc:	b342      	cbz	r2, 8011450 <__hexnan+0x88>
 80113fe:	4610      	mov	r0, r2
 8011400:	9105      	str	r1, [sp, #20]
 8011402:	9204      	str	r2, [sp, #16]
 8011404:	f7ff fd94 	bl	8010f30 <__hexdig_fun>
 8011408:	2800      	cmp	r0, #0
 801140a:	d151      	bne.n	80114b0 <__hexnan+0xe8>
 801140c:	9a04      	ldr	r2, [sp, #16]
 801140e:	9905      	ldr	r1, [sp, #20]
 8011410:	2a20      	cmp	r2, #32
 8011412:	d818      	bhi.n	8011446 <__hexnan+0x7e>
 8011414:	9b02      	ldr	r3, [sp, #8]
 8011416:	459b      	cmp	fp, r3
 8011418:	dd13      	ble.n	8011442 <__hexnan+0x7a>
 801141a:	454c      	cmp	r4, r9
 801141c:	d206      	bcs.n	801142c <__hexnan+0x64>
 801141e:	2d07      	cmp	r5, #7
 8011420:	dc04      	bgt.n	801142c <__hexnan+0x64>
 8011422:	462a      	mov	r2, r5
 8011424:	4649      	mov	r1, r9
 8011426:	4620      	mov	r0, r4
 8011428:	f7ff ffa8 	bl	801137c <L_shift>
 801142c:	4544      	cmp	r4, r8
 801142e:	d952      	bls.n	80114d6 <__hexnan+0x10e>
 8011430:	2300      	movs	r3, #0
 8011432:	f1a4 0904 	sub.w	r9, r4, #4
 8011436:	f844 3c04 	str.w	r3, [r4, #-4]
 801143a:	f8cd b008 	str.w	fp, [sp, #8]
 801143e:	464c      	mov	r4, r9
 8011440:	461d      	mov	r5, r3
 8011442:	9903      	ldr	r1, [sp, #12]
 8011444:	e7d7      	b.n	80113f6 <__hexnan+0x2e>
 8011446:	2a29      	cmp	r2, #41	@ 0x29
 8011448:	d157      	bne.n	80114fa <__hexnan+0x132>
 801144a:	3102      	adds	r1, #2
 801144c:	f8ca 1000 	str.w	r1, [sl]
 8011450:	f1bb 0f00 	cmp.w	fp, #0
 8011454:	d051      	beq.n	80114fa <__hexnan+0x132>
 8011456:	454c      	cmp	r4, r9
 8011458:	d206      	bcs.n	8011468 <__hexnan+0xa0>
 801145a:	2d07      	cmp	r5, #7
 801145c:	dc04      	bgt.n	8011468 <__hexnan+0xa0>
 801145e:	462a      	mov	r2, r5
 8011460:	4649      	mov	r1, r9
 8011462:	4620      	mov	r0, r4
 8011464:	f7ff ff8a 	bl	801137c <L_shift>
 8011468:	4544      	cmp	r4, r8
 801146a:	d936      	bls.n	80114da <__hexnan+0x112>
 801146c:	f1a8 0204 	sub.w	r2, r8, #4
 8011470:	4623      	mov	r3, r4
 8011472:	f853 1b04 	ldr.w	r1, [r3], #4
 8011476:	f842 1f04 	str.w	r1, [r2, #4]!
 801147a:	429f      	cmp	r7, r3
 801147c:	d2f9      	bcs.n	8011472 <__hexnan+0xaa>
 801147e:	1b3b      	subs	r3, r7, r4
 8011480:	f023 0303 	bic.w	r3, r3, #3
 8011484:	3304      	adds	r3, #4
 8011486:	3401      	adds	r4, #1
 8011488:	3e03      	subs	r6, #3
 801148a:	42b4      	cmp	r4, r6
 801148c:	bf88      	it	hi
 801148e:	2304      	movhi	r3, #4
 8011490:	4443      	add	r3, r8
 8011492:	2200      	movs	r2, #0
 8011494:	f843 2b04 	str.w	r2, [r3], #4
 8011498:	429f      	cmp	r7, r3
 801149a:	d2fb      	bcs.n	8011494 <__hexnan+0xcc>
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	b91b      	cbnz	r3, 80114a8 <__hexnan+0xe0>
 80114a0:	4547      	cmp	r7, r8
 80114a2:	d128      	bne.n	80114f6 <__hexnan+0x12e>
 80114a4:	2301      	movs	r3, #1
 80114a6:	603b      	str	r3, [r7, #0]
 80114a8:	2005      	movs	r0, #5
 80114aa:	b007      	add	sp, #28
 80114ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b0:	3501      	adds	r5, #1
 80114b2:	2d08      	cmp	r5, #8
 80114b4:	f10b 0b01 	add.w	fp, fp, #1
 80114b8:	dd06      	ble.n	80114c8 <__hexnan+0x100>
 80114ba:	4544      	cmp	r4, r8
 80114bc:	d9c1      	bls.n	8011442 <__hexnan+0x7a>
 80114be:	2300      	movs	r3, #0
 80114c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80114c4:	2501      	movs	r5, #1
 80114c6:	3c04      	subs	r4, #4
 80114c8:	6822      	ldr	r2, [r4, #0]
 80114ca:	f000 000f 	and.w	r0, r0, #15
 80114ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80114d2:	6020      	str	r0, [r4, #0]
 80114d4:	e7b5      	b.n	8011442 <__hexnan+0x7a>
 80114d6:	2508      	movs	r5, #8
 80114d8:	e7b3      	b.n	8011442 <__hexnan+0x7a>
 80114da:	9b01      	ldr	r3, [sp, #4]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d0dd      	beq.n	801149c <__hexnan+0xd4>
 80114e0:	f1c3 0320 	rsb	r3, r3, #32
 80114e4:	f04f 32ff 	mov.w	r2, #4294967295
 80114e8:	40da      	lsrs	r2, r3
 80114ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80114ee:	4013      	ands	r3, r2
 80114f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80114f4:	e7d2      	b.n	801149c <__hexnan+0xd4>
 80114f6:	3f04      	subs	r7, #4
 80114f8:	e7d0      	b.n	801149c <__hexnan+0xd4>
 80114fa:	2004      	movs	r0, #4
 80114fc:	e7d5      	b.n	80114aa <__hexnan+0xe2>

080114fe <__ascii_mbtowc>:
 80114fe:	b082      	sub	sp, #8
 8011500:	b901      	cbnz	r1, 8011504 <__ascii_mbtowc+0x6>
 8011502:	a901      	add	r1, sp, #4
 8011504:	b142      	cbz	r2, 8011518 <__ascii_mbtowc+0x1a>
 8011506:	b14b      	cbz	r3, 801151c <__ascii_mbtowc+0x1e>
 8011508:	7813      	ldrb	r3, [r2, #0]
 801150a:	600b      	str	r3, [r1, #0]
 801150c:	7812      	ldrb	r2, [r2, #0]
 801150e:	1e10      	subs	r0, r2, #0
 8011510:	bf18      	it	ne
 8011512:	2001      	movne	r0, #1
 8011514:	b002      	add	sp, #8
 8011516:	4770      	bx	lr
 8011518:	4610      	mov	r0, r2
 801151a:	e7fb      	b.n	8011514 <__ascii_mbtowc+0x16>
 801151c:	f06f 0001 	mvn.w	r0, #1
 8011520:	e7f8      	b.n	8011514 <__ascii_mbtowc+0x16>

08011522 <_realloc_r>:
 8011522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011526:	4680      	mov	r8, r0
 8011528:	4615      	mov	r5, r2
 801152a:	460c      	mov	r4, r1
 801152c:	b921      	cbnz	r1, 8011538 <_realloc_r+0x16>
 801152e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011532:	4611      	mov	r1, r2
 8011534:	f7fd be60 	b.w	800f1f8 <_malloc_r>
 8011538:	b92a      	cbnz	r2, 8011546 <_realloc_r+0x24>
 801153a:	f7fd fde9 	bl	800f110 <_free_r>
 801153e:	2400      	movs	r4, #0
 8011540:	4620      	mov	r0, r4
 8011542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011546:	f000 f840 	bl	80115ca <_malloc_usable_size_r>
 801154a:	4285      	cmp	r5, r0
 801154c:	4606      	mov	r6, r0
 801154e:	d802      	bhi.n	8011556 <_realloc_r+0x34>
 8011550:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011554:	d8f4      	bhi.n	8011540 <_realloc_r+0x1e>
 8011556:	4629      	mov	r1, r5
 8011558:	4640      	mov	r0, r8
 801155a:	f7fd fe4d 	bl	800f1f8 <_malloc_r>
 801155e:	4607      	mov	r7, r0
 8011560:	2800      	cmp	r0, #0
 8011562:	d0ec      	beq.n	801153e <_realloc_r+0x1c>
 8011564:	42b5      	cmp	r5, r6
 8011566:	462a      	mov	r2, r5
 8011568:	4621      	mov	r1, r4
 801156a:	bf28      	it	cs
 801156c:	4632      	movcs	r2, r6
 801156e:	f7ff fc45 	bl	8010dfc <memcpy>
 8011572:	4621      	mov	r1, r4
 8011574:	4640      	mov	r0, r8
 8011576:	f7fd fdcb 	bl	800f110 <_free_r>
 801157a:	463c      	mov	r4, r7
 801157c:	e7e0      	b.n	8011540 <_realloc_r+0x1e>

0801157e <__ascii_wctomb>:
 801157e:	4603      	mov	r3, r0
 8011580:	4608      	mov	r0, r1
 8011582:	b141      	cbz	r1, 8011596 <__ascii_wctomb+0x18>
 8011584:	2aff      	cmp	r2, #255	@ 0xff
 8011586:	d904      	bls.n	8011592 <__ascii_wctomb+0x14>
 8011588:	228a      	movs	r2, #138	@ 0x8a
 801158a:	601a      	str	r2, [r3, #0]
 801158c:	f04f 30ff 	mov.w	r0, #4294967295
 8011590:	4770      	bx	lr
 8011592:	700a      	strb	r2, [r1, #0]
 8011594:	2001      	movs	r0, #1
 8011596:	4770      	bx	lr

08011598 <fiprintf>:
 8011598:	b40e      	push	{r1, r2, r3}
 801159a:	b503      	push	{r0, r1, lr}
 801159c:	4601      	mov	r1, r0
 801159e:	ab03      	add	r3, sp, #12
 80115a0:	4805      	ldr	r0, [pc, #20]	@ (80115b8 <fiprintf+0x20>)
 80115a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80115a6:	6800      	ldr	r0, [r0, #0]
 80115a8:	9301      	str	r3, [sp, #4]
 80115aa:	f000 f83f 	bl	801162c <_vfiprintf_r>
 80115ae:	b002      	add	sp, #8
 80115b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80115b4:	b003      	add	sp, #12
 80115b6:	4770      	bx	lr
 80115b8:	2000009c 	.word	0x2000009c

080115bc <abort>:
 80115bc:	b508      	push	{r3, lr}
 80115be:	2006      	movs	r0, #6
 80115c0:	f000 fa08 	bl	80119d4 <raise>
 80115c4:	2001      	movs	r0, #1
 80115c6:	f7f0 fc8b 	bl	8001ee0 <_exit>

080115ca <_malloc_usable_size_r>:
 80115ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115ce:	1f18      	subs	r0, r3, #4
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	bfbc      	itt	lt
 80115d4:	580b      	ldrlt	r3, [r1, r0]
 80115d6:	18c0      	addlt	r0, r0, r3
 80115d8:	4770      	bx	lr

080115da <__sfputc_r>:
 80115da:	6893      	ldr	r3, [r2, #8]
 80115dc:	3b01      	subs	r3, #1
 80115de:	2b00      	cmp	r3, #0
 80115e0:	b410      	push	{r4}
 80115e2:	6093      	str	r3, [r2, #8]
 80115e4:	da08      	bge.n	80115f8 <__sfputc_r+0x1e>
 80115e6:	6994      	ldr	r4, [r2, #24]
 80115e8:	42a3      	cmp	r3, r4
 80115ea:	db01      	blt.n	80115f0 <__sfputc_r+0x16>
 80115ec:	290a      	cmp	r1, #10
 80115ee:	d103      	bne.n	80115f8 <__sfputc_r+0x1e>
 80115f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115f4:	f000 b932 	b.w	801185c <__swbuf_r>
 80115f8:	6813      	ldr	r3, [r2, #0]
 80115fa:	1c58      	adds	r0, r3, #1
 80115fc:	6010      	str	r0, [r2, #0]
 80115fe:	7019      	strb	r1, [r3, #0]
 8011600:	4608      	mov	r0, r1
 8011602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011606:	4770      	bx	lr

08011608 <__sfputs_r>:
 8011608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801160a:	4606      	mov	r6, r0
 801160c:	460f      	mov	r7, r1
 801160e:	4614      	mov	r4, r2
 8011610:	18d5      	adds	r5, r2, r3
 8011612:	42ac      	cmp	r4, r5
 8011614:	d101      	bne.n	801161a <__sfputs_r+0x12>
 8011616:	2000      	movs	r0, #0
 8011618:	e007      	b.n	801162a <__sfputs_r+0x22>
 801161a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801161e:	463a      	mov	r2, r7
 8011620:	4630      	mov	r0, r6
 8011622:	f7ff ffda 	bl	80115da <__sfputc_r>
 8011626:	1c43      	adds	r3, r0, #1
 8011628:	d1f3      	bne.n	8011612 <__sfputs_r+0xa>
 801162a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801162c <_vfiprintf_r>:
 801162c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011630:	460d      	mov	r5, r1
 8011632:	b09d      	sub	sp, #116	@ 0x74
 8011634:	4614      	mov	r4, r2
 8011636:	4698      	mov	r8, r3
 8011638:	4606      	mov	r6, r0
 801163a:	b118      	cbz	r0, 8011644 <_vfiprintf_r+0x18>
 801163c:	6a03      	ldr	r3, [r0, #32]
 801163e:	b90b      	cbnz	r3, 8011644 <_vfiprintf_r+0x18>
 8011640:	f7fc fdda 	bl	800e1f8 <__sinit>
 8011644:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011646:	07d9      	lsls	r1, r3, #31
 8011648:	d405      	bmi.n	8011656 <_vfiprintf_r+0x2a>
 801164a:	89ab      	ldrh	r3, [r5, #12]
 801164c:	059a      	lsls	r2, r3, #22
 801164e:	d402      	bmi.n	8011656 <_vfiprintf_r+0x2a>
 8011650:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011652:	f7fc ff08 	bl	800e466 <__retarget_lock_acquire_recursive>
 8011656:	89ab      	ldrh	r3, [r5, #12]
 8011658:	071b      	lsls	r3, r3, #28
 801165a:	d501      	bpl.n	8011660 <_vfiprintf_r+0x34>
 801165c:	692b      	ldr	r3, [r5, #16]
 801165e:	b99b      	cbnz	r3, 8011688 <_vfiprintf_r+0x5c>
 8011660:	4629      	mov	r1, r5
 8011662:	4630      	mov	r0, r6
 8011664:	f000 f938 	bl	80118d8 <__swsetup_r>
 8011668:	b170      	cbz	r0, 8011688 <_vfiprintf_r+0x5c>
 801166a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801166c:	07dc      	lsls	r4, r3, #31
 801166e:	d504      	bpl.n	801167a <_vfiprintf_r+0x4e>
 8011670:	f04f 30ff 	mov.w	r0, #4294967295
 8011674:	b01d      	add	sp, #116	@ 0x74
 8011676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801167a:	89ab      	ldrh	r3, [r5, #12]
 801167c:	0598      	lsls	r0, r3, #22
 801167e:	d4f7      	bmi.n	8011670 <_vfiprintf_r+0x44>
 8011680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011682:	f7fc fef1 	bl	800e468 <__retarget_lock_release_recursive>
 8011686:	e7f3      	b.n	8011670 <_vfiprintf_r+0x44>
 8011688:	2300      	movs	r3, #0
 801168a:	9309      	str	r3, [sp, #36]	@ 0x24
 801168c:	2320      	movs	r3, #32
 801168e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011692:	f8cd 800c 	str.w	r8, [sp, #12]
 8011696:	2330      	movs	r3, #48	@ 0x30
 8011698:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011848 <_vfiprintf_r+0x21c>
 801169c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80116a0:	f04f 0901 	mov.w	r9, #1
 80116a4:	4623      	mov	r3, r4
 80116a6:	469a      	mov	sl, r3
 80116a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116ac:	b10a      	cbz	r2, 80116b2 <_vfiprintf_r+0x86>
 80116ae:	2a25      	cmp	r2, #37	@ 0x25
 80116b0:	d1f9      	bne.n	80116a6 <_vfiprintf_r+0x7a>
 80116b2:	ebba 0b04 	subs.w	fp, sl, r4
 80116b6:	d00b      	beq.n	80116d0 <_vfiprintf_r+0xa4>
 80116b8:	465b      	mov	r3, fp
 80116ba:	4622      	mov	r2, r4
 80116bc:	4629      	mov	r1, r5
 80116be:	4630      	mov	r0, r6
 80116c0:	f7ff ffa2 	bl	8011608 <__sfputs_r>
 80116c4:	3001      	adds	r0, #1
 80116c6:	f000 80a7 	beq.w	8011818 <_vfiprintf_r+0x1ec>
 80116ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80116cc:	445a      	add	r2, fp
 80116ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80116d0:	f89a 3000 	ldrb.w	r3, [sl]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	f000 809f 	beq.w	8011818 <_vfiprintf_r+0x1ec>
 80116da:	2300      	movs	r3, #0
 80116dc:	f04f 32ff 	mov.w	r2, #4294967295
 80116e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116e4:	f10a 0a01 	add.w	sl, sl, #1
 80116e8:	9304      	str	r3, [sp, #16]
 80116ea:	9307      	str	r3, [sp, #28]
 80116ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80116f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80116f2:	4654      	mov	r4, sl
 80116f4:	2205      	movs	r2, #5
 80116f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116fa:	4853      	ldr	r0, [pc, #332]	@ (8011848 <_vfiprintf_r+0x21c>)
 80116fc:	f7ee fd90 	bl	8000220 <memchr>
 8011700:	9a04      	ldr	r2, [sp, #16]
 8011702:	b9d8      	cbnz	r0, 801173c <_vfiprintf_r+0x110>
 8011704:	06d1      	lsls	r1, r2, #27
 8011706:	bf44      	itt	mi
 8011708:	2320      	movmi	r3, #32
 801170a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801170e:	0713      	lsls	r3, r2, #28
 8011710:	bf44      	itt	mi
 8011712:	232b      	movmi	r3, #43	@ 0x2b
 8011714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011718:	f89a 3000 	ldrb.w	r3, [sl]
 801171c:	2b2a      	cmp	r3, #42	@ 0x2a
 801171e:	d015      	beq.n	801174c <_vfiprintf_r+0x120>
 8011720:	9a07      	ldr	r2, [sp, #28]
 8011722:	4654      	mov	r4, sl
 8011724:	2000      	movs	r0, #0
 8011726:	f04f 0c0a 	mov.w	ip, #10
 801172a:	4621      	mov	r1, r4
 801172c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011730:	3b30      	subs	r3, #48	@ 0x30
 8011732:	2b09      	cmp	r3, #9
 8011734:	d94b      	bls.n	80117ce <_vfiprintf_r+0x1a2>
 8011736:	b1b0      	cbz	r0, 8011766 <_vfiprintf_r+0x13a>
 8011738:	9207      	str	r2, [sp, #28]
 801173a:	e014      	b.n	8011766 <_vfiprintf_r+0x13a>
 801173c:	eba0 0308 	sub.w	r3, r0, r8
 8011740:	fa09 f303 	lsl.w	r3, r9, r3
 8011744:	4313      	orrs	r3, r2
 8011746:	9304      	str	r3, [sp, #16]
 8011748:	46a2      	mov	sl, r4
 801174a:	e7d2      	b.n	80116f2 <_vfiprintf_r+0xc6>
 801174c:	9b03      	ldr	r3, [sp, #12]
 801174e:	1d19      	adds	r1, r3, #4
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	9103      	str	r1, [sp, #12]
 8011754:	2b00      	cmp	r3, #0
 8011756:	bfbb      	ittet	lt
 8011758:	425b      	neglt	r3, r3
 801175a:	f042 0202 	orrlt.w	r2, r2, #2
 801175e:	9307      	strge	r3, [sp, #28]
 8011760:	9307      	strlt	r3, [sp, #28]
 8011762:	bfb8      	it	lt
 8011764:	9204      	strlt	r2, [sp, #16]
 8011766:	7823      	ldrb	r3, [r4, #0]
 8011768:	2b2e      	cmp	r3, #46	@ 0x2e
 801176a:	d10a      	bne.n	8011782 <_vfiprintf_r+0x156>
 801176c:	7863      	ldrb	r3, [r4, #1]
 801176e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011770:	d132      	bne.n	80117d8 <_vfiprintf_r+0x1ac>
 8011772:	9b03      	ldr	r3, [sp, #12]
 8011774:	1d1a      	adds	r2, r3, #4
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	9203      	str	r2, [sp, #12]
 801177a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801177e:	3402      	adds	r4, #2
 8011780:	9305      	str	r3, [sp, #20]
 8011782:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011858 <_vfiprintf_r+0x22c>
 8011786:	7821      	ldrb	r1, [r4, #0]
 8011788:	2203      	movs	r2, #3
 801178a:	4650      	mov	r0, sl
 801178c:	f7ee fd48 	bl	8000220 <memchr>
 8011790:	b138      	cbz	r0, 80117a2 <_vfiprintf_r+0x176>
 8011792:	9b04      	ldr	r3, [sp, #16]
 8011794:	eba0 000a 	sub.w	r0, r0, sl
 8011798:	2240      	movs	r2, #64	@ 0x40
 801179a:	4082      	lsls	r2, r0
 801179c:	4313      	orrs	r3, r2
 801179e:	3401      	adds	r4, #1
 80117a0:	9304      	str	r3, [sp, #16]
 80117a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117a6:	4829      	ldr	r0, [pc, #164]	@ (801184c <_vfiprintf_r+0x220>)
 80117a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80117ac:	2206      	movs	r2, #6
 80117ae:	f7ee fd37 	bl	8000220 <memchr>
 80117b2:	2800      	cmp	r0, #0
 80117b4:	d03f      	beq.n	8011836 <_vfiprintf_r+0x20a>
 80117b6:	4b26      	ldr	r3, [pc, #152]	@ (8011850 <_vfiprintf_r+0x224>)
 80117b8:	bb1b      	cbnz	r3, 8011802 <_vfiprintf_r+0x1d6>
 80117ba:	9b03      	ldr	r3, [sp, #12]
 80117bc:	3307      	adds	r3, #7
 80117be:	f023 0307 	bic.w	r3, r3, #7
 80117c2:	3308      	adds	r3, #8
 80117c4:	9303      	str	r3, [sp, #12]
 80117c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117c8:	443b      	add	r3, r7
 80117ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80117cc:	e76a      	b.n	80116a4 <_vfiprintf_r+0x78>
 80117ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80117d2:	460c      	mov	r4, r1
 80117d4:	2001      	movs	r0, #1
 80117d6:	e7a8      	b.n	801172a <_vfiprintf_r+0xfe>
 80117d8:	2300      	movs	r3, #0
 80117da:	3401      	adds	r4, #1
 80117dc:	9305      	str	r3, [sp, #20]
 80117de:	4619      	mov	r1, r3
 80117e0:	f04f 0c0a 	mov.w	ip, #10
 80117e4:	4620      	mov	r0, r4
 80117e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117ea:	3a30      	subs	r2, #48	@ 0x30
 80117ec:	2a09      	cmp	r2, #9
 80117ee:	d903      	bls.n	80117f8 <_vfiprintf_r+0x1cc>
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d0c6      	beq.n	8011782 <_vfiprintf_r+0x156>
 80117f4:	9105      	str	r1, [sp, #20]
 80117f6:	e7c4      	b.n	8011782 <_vfiprintf_r+0x156>
 80117f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80117fc:	4604      	mov	r4, r0
 80117fe:	2301      	movs	r3, #1
 8011800:	e7f0      	b.n	80117e4 <_vfiprintf_r+0x1b8>
 8011802:	ab03      	add	r3, sp, #12
 8011804:	9300      	str	r3, [sp, #0]
 8011806:	462a      	mov	r2, r5
 8011808:	4b12      	ldr	r3, [pc, #72]	@ (8011854 <_vfiprintf_r+0x228>)
 801180a:	a904      	add	r1, sp, #16
 801180c:	4630      	mov	r0, r6
 801180e:	f7fb fe9b 	bl	800d548 <_printf_float>
 8011812:	4607      	mov	r7, r0
 8011814:	1c78      	adds	r0, r7, #1
 8011816:	d1d6      	bne.n	80117c6 <_vfiprintf_r+0x19a>
 8011818:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801181a:	07d9      	lsls	r1, r3, #31
 801181c:	d405      	bmi.n	801182a <_vfiprintf_r+0x1fe>
 801181e:	89ab      	ldrh	r3, [r5, #12]
 8011820:	059a      	lsls	r2, r3, #22
 8011822:	d402      	bmi.n	801182a <_vfiprintf_r+0x1fe>
 8011824:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011826:	f7fc fe1f 	bl	800e468 <__retarget_lock_release_recursive>
 801182a:	89ab      	ldrh	r3, [r5, #12]
 801182c:	065b      	lsls	r3, r3, #25
 801182e:	f53f af1f 	bmi.w	8011670 <_vfiprintf_r+0x44>
 8011832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011834:	e71e      	b.n	8011674 <_vfiprintf_r+0x48>
 8011836:	ab03      	add	r3, sp, #12
 8011838:	9300      	str	r3, [sp, #0]
 801183a:	462a      	mov	r2, r5
 801183c:	4b05      	ldr	r3, [pc, #20]	@ (8011854 <_vfiprintf_r+0x228>)
 801183e:	a904      	add	r1, sp, #16
 8011840:	4630      	mov	r0, r6
 8011842:	f7fc f919 	bl	800da78 <_printf_i>
 8011846:	e7e4      	b.n	8011812 <_vfiprintf_r+0x1e6>
 8011848:	080121b1 	.word	0x080121b1
 801184c:	080121bb 	.word	0x080121bb
 8011850:	0800d549 	.word	0x0800d549
 8011854:	08011609 	.word	0x08011609
 8011858:	080121b7 	.word	0x080121b7

0801185c <__swbuf_r>:
 801185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801185e:	460e      	mov	r6, r1
 8011860:	4614      	mov	r4, r2
 8011862:	4605      	mov	r5, r0
 8011864:	b118      	cbz	r0, 801186e <__swbuf_r+0x12>
 8011866:	6a03      	ldr	r3, [r0, #32]
 8011868:	b90b      	cbnz	r3, 801186e <__swbuf_r+0x12>
 801186a:	f7fc fcc5 	bl	800e1f8 <__sinit>
 801186e:	69a3      	ldr	r3, [r4, #24]
 8011870:	60a3      	str	r3, [r4, #8]
 8011872:	89a3      	ldrh	r3, [r4, #12]
 8011874:	071a      	lsls	r2, r3, #28
 8011876:	d501      	bpl.n	801187c <__swbuf_r+0x20>
 8011878:	6923      	ldr	r3, [r4, #16]
 801187a:	b943      	cbnz	r3, 801188e <__swbuf_r+0x32>
 801187c:	4621      	mov	r1, r4
 801187e:	4628      	mov	r0, r5
 8011880:	f000 f82a 	bl	80118d8 <__swsetup_r>
 8011884:	b118      	cbz	r0, 801188e <__swbuf_r+0x32>
 8011886:	f04f 37ff 	mov.w	r7, #4294967295
 801188a:	4638      	mov	r0, r7
 801188c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801188e:	6823      	ldr	r3, [r4, #0]
 8011890:	6922      	ldr	r2, [r4, #16]
 8011892:	1a98      	subs	r0, r3, r2
 8011894:	6963      	ldr	r3, [r4, #20]
 8011896:	b2f6      	uxtb	r6, r6
 8011898:	4283      	cmp	r3, r0
 801189a:	4637      	mov	r7, r6
 801189c:	dc05      	bgt.n	80118aa <__swbuf_r+0x4e>
 801189e:	4621      	mov	r1, r4
 80118a0:	4628      	mov	r0, r5
 80118a2:	f7ff fa47 	bl	8010d34 <_fflush_r>
 80118a6:	2800      	cmp	r0, #0
 80118a8:	d1ed      	bne.n	8011886 <__swbuf_r+0x2a>
 80118aa:	68a3      	ldr	r3, [r4, #8]
 80118ac:	3b01      	subs	r3, #1
 80118ae:	60a3      	str	r3, [r4, #8]
 80118b0:	6823      	ldr	r3, [r4, #0]
 80118b2:	1c5a      	adds	r2, r3, #1
 80118b4:	6022      	str	r2, [r4, #0]
 80118b6:	701e      	strb	r6, [r3, #0]
 80118b8:	6962      	ldr	r2, [r4, #20]
 80118ba:	1c43      	adds	r3, r0, #1
 80118bc:	429a      	cmp	r2, r3
 80118be:	d004      	beq.n	80118ca <__swbuf_r+0x6e>
 80118c0:	89a3      	ldrh	r3, [r4, #12]
 80118c2:	07db      	lsls	r3, r3, #31
 80118c4:	d5e1      	bpl.n	801188a <__swbuf_r+0x2e>
 80118c6:	2e0a      	cmp	r6, #10
 80118c8:	d1df      	bne.n	801188a <__swbuf_r+0x2e>
 80118ca:	4621      	mov	r1, r4
 80118cc:	4628      	mov	r0, r5
 80118ce:	f7ff fa31 	bl	8010d34 <_fflush_r>
 80118d2:	2800      	cmp	r0, #0
 80118d4:	d0d9      	beq.n	801188a <__swbuf_r+0x2e>
 80118d6:	e7d6      	b.n	8011886 <__swbuf_r+0x2a>

080118d8 <__swsetup_r>:
 80118d8:	b538      	push	{r3, r4, r5, lr}
 80118da:	4b29      	ldr	r3, [pc, #164]	@ (8011980 <__swsetup_r+0xa8>)
 80118dc:	4605      	mov	r5, r0
 80118de:	6818      	ldr	r0, [r3, #0]
 80118e0:	460c      	mov	r4, r1
 80118e2:	b118      	cbz	r0, 80118ec <__swsetup_r+0x14>
 80118e4:	6a03      	ldr	r3, [r0, #32]
 80118e6:	b90b      	cbnz	r3, 80118ec <__swsetup_r+0x14>
 80118e8:	f7fc fc86 	bl	800e1f8 <__sinit>
 80118ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118f0:	0719      	lsls	r1, r3, #28
 80118f2:	d422      	bmi.n	801193a <__swsetup_r+0x62>
 80118f4:	06da      	lsls	r2, r3, #27
 80118f6:	d407      	bmi.n	8011908 <__swsetup_r+0x30>
 80118f8:	2209      	movs	r2, #9
 80118fa:	602a      	str	r2, [r5, #0]
 80118fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011900:	81a3      	strh	r3, [r4, #12]
 8011902:	f04f 30ff 	mov.w	r0, #4294967295
 8011906:	e033      	b.n	8011970 <__swsetup_r+0x98>
 8011908:	0758      	lsls	r0, r3, #29
 801190a:	d512      	bpl.n	8011932 <__swsetup_r+0x5a>
 801190c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801190e:	b141      	cbz	r1, 8011922 <__swsetup_r+0x4a>
 8011910:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011914:	4299      	cmp	r1, r3
 8011916:	d002      	beq.n	801191e <__swsetup_r+0x46>
 8011918:	4628      	mov	r0, r5
 801191a:	f7fd fbf9 	bl	800f110 <_free_r>
 801191e:	2300      	movs	r3, #0
 8011920:	6363      	str	r3, [r4, #52]	@ 0x34
 8011922:	89a3      	ldrh	r3, [r4, #12]
 8011924:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011928:	81a3      	strh	r3, [r4, #12]
 801192a:	2300      	movs	r3, #0
 801192c:	6063      	str	r3, [r4, #4]
 801192e:	6923      	ldr	r3, [r4, #16]
 8011930:	6023      	str	r3, [r4, #0]
 8011932:	89a3      	ldrh	r3, [r4, #12]
 8011934:	f043 0308 	orr.w	r3, r3, #8
 8011938:	81a3      	strh	r3, [r4, #12]
 801193a:	6923      	ldr	r3, [r4, #16]
 801193c:	b94b      	cbnz	r3, 8011952 <__swsetup_r+0x7a>
 801193e:	89a3      	ldrh	r3, [r4, #12]
 8011940:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011948:	d003      	beq.n	8011952 <__swsetup_r+0x7a>
 801194a:	4621      	mov	r1, r4
 801194c:	4628      	mov	r0, r5
 801194e:	f000 f883 	bl	8011a58 <__smakebuf_r>
 8011952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011956:	f013 0201 	ands.w	r2, r3, #1
 801195a:	d00a      	beq.n	8011972 <__swsetup_r+0x9a>
 801195c:	2200      	movs	r2, #0
 801195e:	60a2      	str	r2, [r4, #8]
 8011960:	6962      	ldr	r2, [r4, #20]
 8011962:	4252      	negs	r2, r2
 8011964:	61a2      	str	r2, [r4, #24]
 8011966:	6922      	ldr	r2, [r4, #16]
 8011968:	b942      	cbnz	r2, 801197c <__swsetup_r+0xa4>
 801196a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801196e:	d1c5      	bne.n	80118fc <__swsetup_r+0x24>
 8011970:	bd38      	pop	{r3, r4, r5, pc}
 8011972:	0799      	lsls	r1, r3, #30
 8011974:	bf58      	it	pl
 8011976:	6962      	ldrpl	r2, [r4, #20]
 8011978:	60a2      	str	r2, [r4, #8]
 801197a:	e7f4      	b.n	8011966 <__swsetup_r+0x8e>
 801197c:	2000      	movs	r0, #0
 801197e:	e7f7      	b.n	8011970 <__swsetup_r+0x98>
 8011980:	2000009c 	.word	0x2000009c

08011984 <_raise_r>:
 8011984:	291f      	cmp	r1, #31
 8011986:	b538      	push	{r3, r4, r5, lr}
 8011988:	4605      	mov	r5, r0
 801198a:	460c      	mov	r4, r1
 801198c:	d904      	bls.n	8011998 <_raise_r+0x14>
 801198e:	2316      	movs	r3, #22
 8011990:	6003      	str	r3, [r0, #0]
 8011992:	f04f 30ff 	mov.w	r0, #4294967295
 8011996:	bd38      	pop	{r3, r4, r5, pc}
 8011998:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801199a:	b112      	cbz	r2, 80119a2 <_raise_r+0x1e>
 801199c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80119a0:	b94b      	cbnz	r3, 80119b6 <_raise_r+0x32>
 80119a2:	4628      	mov	r0, r5
 80119a4:	f000 f830 	bl	8011a08 <_getpid_r>
 80119a8:	4622      	mov	r2, r4
 80119aa:	4601      	mov	r1, r0
 80119ac:	4628      	mov	r0, r5
 80119ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119b2:	f000 b817 	b.w	80119e4 <_kill_r>
 80119b6:	2b01      	cmp	r3, #1
 80119b8:	d00a      	beq.n	80119d0 <_raise_r+0x4c>
 80119ba:	1c59      	adds	r1, r3, #1
 80119bc:	d103      	bne.n	80119c6 <_raise_r+0x42>
 80119be:	2316      	movs	r3, #22
 80119c0:	6003      	str	r3, [r0, #0]
 80119c2:	2001      	movs	r0, #1
 80119c4:	e7e7      	b.n	8011996 <_raise_r+0x12>
 80119c6:	2100      	movs	r1, #0
 80119c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80119cc:	4620      	mov	r0, r4
 80119ce:	4798      	blx	r3
 80119d0:	2000      	movs	r0, #0
 80119d2:	e7e0      	b.n	8011996 <_raise_r+0x12>

080119d4 <raise>:
 80119d4:	4b02      	ldr	r3, [pc, #8]	@ (80119e0 <raise+0xc>)
 80119d6:	4601      	mov	r1, r0
 80119d8:	6818      	ldr	r0, [r3, #0]
 80119da:	f7ff bfd3 	b.w	8011984 <_raise_r>
 80119de:	bf00      	nop
 80119e0:	2000009c 	.word	0x2000009c

080119e4 <_kill_r>:
 80119e4:	b538      	push	{r3, r4, r5, lr}
 80119e6:	4d07      	ldr	r5, [pc, #28]	@ (8011a04 <_kill_r+0x20>)
 80119e8:	2300      	movs	r3, #0
 80119ea:	4604      	mov	r4, r0
 80119ec:	4608      	mov	r0, r1
 80119ee:	4611      	mov	r1, r2
 80119f0:	602b      	str	r3, [r5, #0]
 80119f2:	f7f0 fa65 	bl	8001ec0 <_kill>
 80119f6:	1c43      	adds	r3, r0, #1
 80119f8:	d102      	bne.n	8011a00 <_kill_r+0x1c>
 80119fa:	682b      	ldr	r3, [r5, #0]
 80119fc:	b103      	cbz	r3, 8011a00 <_kill_r+0x1c>
 80119fe:	6023      	str	r3, [r4, #0]
 8011a00:	bd38      	pop	{r3, r4, r5, pc}
 8011a02:	bf00      	nop
 8011a04:	20000a24 	.word	0x20000a24

08011a08 <_getpid_r>:
 8011a08:	f7f0 ba52 	b.w	8001eb0 <_getpid>

08011a0c <__swhatbuf_r>:
 8011a0c:	b570      	push	{r4, r5, r6, lr}
 8011a0e:	460c      	mov	r4, r1
 8011a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a14:	2900      	cmp	r1, #0
 8011a16:	b096      	sub	sp, #88	@ 0x58
 8011a18:	4615      	mov	r5, r2
 8011a1a:	461e      	mov	r6, r3
 8011a1c:	da0d      	bge.n	8011a3a <__swhatbuf_r+0x2e>
 8011a1e:	89a3      	ldrh	r3, [r4, #12]
 8011a20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011a24:	f04f 0100 	mov.w	r1, #0
 8011a28:	bf14      	ite	ne
 8011a2a:	2340      	movne	r3, #64	@ 0x40
 8011a2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011a30:	2000      	movs	r0, #0
 8011a32:	6031      	str	r1, [r6, #0]
 8011a34:	602b      	str	r3, [r5, #0]
 8011a36:	b016      	add	sp, #88	@ 0x58
 8011a38:	bd70      	pop	{r4, r5, r6, pc}
 8011a3a:	466a      	mov	r2, sp
 8011a3c:	f000 f848 	bl	8011ad0 <_fstat_r>
 8011a40:	2800      	cmp	r0, #0
 8011a42:	dbec      	blt.n	8011a1e <__swhatbuf_r+0x12>
 8011a44:	9901      	ldr	r1, [sp, #4]
 8011a46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011a4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011a4e:	4259      	negs	r1, r3
 8011a50:	4159      	adcs	r1, r3
 8011a52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011a56:	e7eb      	b.n	8011a30 <__swhatbuf_r+0x24>

08011a58 <__smakebuf_r>:
 8011a58:	898b      	ldrh	r3, [r1, #12]
 8011a5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011a5c:	079d      	lsls	r5, r3, #30
 8011a5e:	4606      	mov	r6, r0
 8011a60:	460c      	mov	r4, r1
 8011a62:	d507      	bpl.n	8011a74 <__smakebuf_r+0x1c>
 8011a64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011a68:	6023      	str	r3, [r4, #0]
 8011a6a:	6123      	str	r3, [r4, #16]
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	6163      	str	r3, [r4, #20]
 8011a70:	b003      	add	sp, #12
 8011a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a74:	ab01      	add	r3, sp, #4
 8011a76:	466a      	mov	r2, sp
 8011a78:	f7ff ffc8 	bl	8011a0c <__swhatbuf_r>
 8011a7c:	9f00      	ldr	r7, [sp, #0]
 8011a7e:	4605      	mov	r5, r0
 8011a80:	4639      	mov	r1, r7
 8011a82:	4630      	mov	r0, r6
 8011a84:	f7fd fbb8 	bl	800f1f8 <_malloc_r>
 8011a88:	b948      	cbnz	r0, 8011a9e <__smakebuf_r+0x46>
 8011a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a8e:	059a      	lsls	r2, r3, #22
 8011a90:	d4ee      	bmi.n	8011a70 <__smakebuf_r+0x18>
 8011a92:	f023 0303 	bic.w	r3, r3, #3
 8011a96:	f043 0302 	orr.w	r3, r3, #2
 8011a9a:	81a3      	strh	r3, [r4, #12]
 8011a9c:	e7e2      	b.n	8011a64 <__smakebuf_r+0xc>
 8011a9e:	89a3      	ldrh	r3, [r4, #12]
 8011aa0:	6020      	str	r0, [r4, #0]
 8011aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011aa6:	81a3      	strh	r3, [r4, #12]
 8011aa8:	9b01      	ldr	r3, [sp, #4]
 8011aaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011aae:	b15b      	cbz	r3, 8011ac8 <__smakebuf_r+0x70>
 8011ab0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ab4:	4630      	mov	r0, r6
 8011ab6:	f000 f81d 	bl	8011af4 <_isatty_r>
 8011aba:	b128      	cbz	r0, 8011ac8 <__smakebuf_r+0x70>
 8011abc:	89a3      	ldrh	r3, [r4, #12]
 8011abe:	f023 0303 	bic.w	r3, r3, #3
 8011ac2:	f043 0301 	orr.w	r3, r3, #1
 8011ac6:	81a3      	strh	r3, [r4, #12]
 8011ac8:	89a3      	ldrh	r3, [r4, #12]
 8011aca:	431d      	orrs	r5, r3
 8011acc:	81a5      	strh	r5, [r4, #12]
 8011ace:	e7cf      	b.n	8011a70 <__smakebuf_r+0x18>

08011ad0 <_fstat_r>:
 8011ad0:	b538      	push	{r3, r4, r5, lr}
 8011ad2:	4d07      	ldr	r5, [pc, #28]	@ (8011af0 <_fstat_r+0x20>)
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	4604      	mov	r4, r0
 8011ad8:	4608      	mov	r0, r1
 8011ada:	4611      	mov	r1, r2
 8011adc:	602b      	str	r3, [r5, #0]
 8011ade:	f7f0 fa4f 	bl	8001f80 <_fstat>
 8011ae2:	1c43      	adds	r3, r0, #1
 8011ae4:	d102      	bne.n	8011aec <_fstat_r+0x1c>
 8011ae6:	682b      	ldr	r3, [r5, #0]
 8011ae8:	b103      	cbz	r3, 8011aec <_fstat_r+0x1c>
 8011aea:	6023      	str	r3, [r4, #0]
 8011aec:	bd38      	pop	{r3, r4, r5, pc}
 8011aee:	bf00      	nop
 8011af0:	20000a24 	.word	0x20000a24

08011af4 <_isatty_r>:
 8011af4:	b538      	push	{r3, r4, r5, lr}
 8011af6:	4d06      	ldr	r5, [pc, #24]	@ (8011b10 <_isatty_r+0x1c>)
 8011af8:	2300      	movs	r3, #0
 8011afa:	4604      	mov	r4, r0
 8011afc:	4608      	mov	r0, r1
 8011afe:	602b      	str	r3, [r5, #0]
 8011b00:	f7f0 fa4e 	bl	8001fa0 <_isatty>
 8011b04:	1c43      	adds	r3, r0, #1
 8011b06:	d102      	bne.n	8011b0e <_isatty_r+0x1a>
 8011b08:	682b      	ldr	r3, [r5, #0]
 8011b0a:	b103      	cbz	r3, 8011b0e <_isatty_r+0x1a>
 8011b0c:	6023      	str	r3, [r4, #0]
 8011b0e:	bd38      	pop	{r3, r4, r5, pc}
 8011b10:	20000a24 	.word	0x20000a24

08011b14 <fmod>:
 8011b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b16:	ed2d 8b02 	vpush	{d8}
 8011b1a:	ec57 6b10 	vmov	r6, r7, d0
 8011b1e:	ec55 4b11 	vmov	r4, r5, d1
 8011b22:	f000 f825 	bl	8011b70 <__ieee754_fmod>
 8011b26:	4622      	mov	r2, r4
 8011b28:	462b      	mov	r3, r5
 8011b2a:	4630      	mov	r0, r6
 8011b2c:	4639      	mov	r1, r7
 8011b2e:	eeb0 8a40 	vmov.f32	s16, s0
 8011b32:	eef0 8a60 	vmov.f32	s17, s1
 8011b36:	f7ef f821 	bl	8000b7c <__aeabi_dcmpun>
 8011b3a:	b990      	cbnz	r0, 8011b62 <fmod+0x4e>
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	2300      	movs	r3, #0
 8011b40:	4620      	mov	r0, r4
 8011b42:	4629      	mov	r1, r5
 8011b44:	f7ee ffe8 	bl	8000b18 <__aeabi_dcmpeq>
 8011b48:	b158      	cbz	r0, 8011b62 <fmod+0x4e>
 8011b4a:	f7fc fc61 	bl	800e410 <__errno>
 8011b4e:	2321      	movs	r3, #33	@ 0x21
 8011b50:	6003      	str	r3, [r0, #0]
 8011b52:	2200      	movs	r2, #0
 8011b54:	2300      	movs	r3, #0
 8011b56:	4610      	mov	r0, r2
 8011b58:	4619      	mov	r1, r3
 8011b5a:	f7ee fe9f 	bl	800089c <__aeabi_ddiv>
 8011b5e:	ec41 0b18 	vmov	d8, r0, r1
 8011b62:	eeb0 0a48 	vmov.f32	s0, s16
 8011b66:	eef0 0a68 	vmov.f32	s1, s17
 8011b6a:	ecbd 8b02 	vpop	{d8}
 8011b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011b70 <__ieee754_fmod>:
 8011b70:	ec53 2b11 	vmov	r2, r3, d1
 8011b74:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8011b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b7c:	ea52 040c 	orrs.w	r4, r2, ip
 8011b80:	ec51 0b10 	vmov	r0, r1, d0
 8011b84:	461e      	mov	r6, r3
 8011b86:	4617      	mov	r7, r2
 8011b88:	4696      	mov	lr, r2
 8011b8a:	d00c      	beq.n	8011ba6 <__ieee754_fmod+0x36>
 8011b8c:	4c77      	ldr	r4, [pc, #476]	@ (8011d6c <__ieee754_fmod+0x1fc>)
 8011b8e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8011b92:	45a0      	cmp	r8, r4
 8011b94:	4689      	mov	r9, r1
 8011b96:	d806      	bhi.n	8011ba6 <__ieee754_fmod+0x36>
 8011b98:	4254      	negs	r4, r2
 8011b9a:	4d75      	ldr	r5, [pc, #468]	@ (8011d70 <__ieee754_fmod+0x200>)
 8011b9c:	4314      	orrs	r4, r2
 8011b9e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8011ba2:	42ac      	cmp	r4, r5
 8011ba4:	d909      	bls.n	8011bba <__ieee754_fmod+0x4a>
 8011ba6:	f7ee fd4f 	bl	8000648 <__aeabi_dmul>
 8011baa:	4602      	mov	r2, r0
 8011bac:	460b      	mov	r3, r1
 8011bae:	f7ee fe75 	bl	800089c <__aeabi_ddiv>
 8011bb2:	ec41 0b10 	vmov	d0, r0, r1
 8011bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bba:	45e0      	cmp	r8, ip
 8011bbc:	4682      	mov	sl, r0
 8011bbe:	4604      	mov	r4, r0
 8011bc0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8011bc4:	dc09      	bgt.n	8011bda <__ieee754_fmod+0x6a>
 8011bc6:	dbf4      	blt.n	8011bb2 <__ieee754_fmod+0x42>
 8011bc8:	4282      	cmp	r2, r0
 8011bca:	d8f2      	bhi.n	8011bb2 <__ieee754_fmod+0x42>
 8011bcc:	d105      	bne.n	8011bda <__ieee754_fmod+0x6a>
 8011bce:	4b69      	ldr	r3, [pc, #420]	@ (8011d74 <__ieee754_fmod+0x204>)
 8011bd0:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8011bd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011bd8:	e7eb      	b.n	8011bb2 <__ieee754_fmod+0x42>
 8011bda:	4a65      	ldr	r2, [pc, #404]	@ (8011d70 <__ieee754_fmod+0x200>)
 8011bdc:	ea19 0f02 	tst.w	r9, r2
 8011be0:	d148      	bne.n	8011c74 <__ieee754_fmod+0x104>
 8011be2:	f1b8 0f00 	cmp.w	r8, #0
 8011be6:	d13d      	bne.n	8011c64 <__ieee754_fmod+0xf4>
 8011be8:	4963      	ldr	r1, [pc, #396]	@ (8011d78 <__ieee754_fmod+0x208>)
 8011bea:	4653      	mov	r3, sl
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	dc36      	bgt.n	8011c5e <__ieee754_fmod+0xee>
 8011bf0:	4216      	tst	r6, r2
 8011bf2:	d14f      	bne.n	8011c94 <__ieee754_fmod+0x124>
 8011bf4:	f1bc 0f00 	cmp.w	ip, #0
 8011bf8:	d144      	bne.n	8011c84 <__ieee754_fmod+0x114>
 8011bfa:	4a5f      	ldr	r2, [pc, #380]	@ (8011d78 <__ieee754_fmod+0x208>)
 8011bfc:	463b      	mov	r3, r7
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	dc3d      	bgt.n	8011c7e <__ieee754_fmod+0x10e>
 8011c02:	485e      	ldr	r0, [pc, #376]	@ (8011d7c <__ieee754_fmod+0x20c>)
 8011c04:	4281      	cmp	r1, r0
 8011c06:	db4a      	blt.n	8011c9e <__ieee754_fmod+0x12e>
 8011c08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c10:	485a      	ldr	r0, [pc, #360]	@ (8011d7c <__ieee754_fmod+0x20c>)
 8011c12:	4282      	cmp	r2, r0
 8011c14:	db57      	blt.n	8011cc6 <__ieee754_fmod+0x156>
 8011c16:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8011c1a:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8011c1e:	1a89      	subs	r1, r1, r2
 8011c20:	1b98      	subs	r0, r3, r6
 8011c22:	eba4 070e 	sub.w	r7, r4, lr
 8011c26:	2900      	cmp	r1, #0
 8011c28:	d162      	bne.n	8011cf0 <__ieee754_fmod+0x180>
 8011c2a:	4574      	cmp	r4, lr
 8011c2c:	bf38      	it	cc
 8011c2e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8011c32:	2800      	cmp	r0, #0
 8011c34:	bfa4      	itt	ge
 8011c36:	463c      	movge	r4, r7
 8011c38:	4603      	movge	r3, r0
 8011c3a:	ea53 0104 	orrs.w	r1, r3, r4
 8011c3e:	d0c6      	beq.n	8011bce <__ieee754_fmod+0x5e>
 8011c40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011c44:	db69      	blt.n	8011d1a <__ieee754_fmod+0x1aa>
 8011c46:	494d      	ldr	r1, [pc, #308]	@ (8011d7c <__ieee754_fmod+0x20c>)
 8011c48:	428a      	cmp	r2, r1
 8011c4a:	db6c      	blt.n	8011d26 <__ieee754_fmod+0x1b6>
 8011c4c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011c50:	432b      	orrs	r3, r5
 8011c52:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8011c56:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011c5a:	4620      	mov	r0, r4
 8011c5c:	e7a9      	b.n	8011bb2 <__ieee754_fmod+0x42>
 8011c5e:	3901      	subs	r1, #1
 8011c60:	005b      	lsls	r3, r3, #1
 8011c62:	e7c3      	b.n	8011bec <__ieee754_fmod+0x7c>
 8011c64:	4945      	ldr	r1, [pc, #276]	@ (8011d7c <__ieee754_fmod+0x20c>)
 8011c66:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	ddc0      	ble.n	8011bf0 <__ieee754_fmod+0x80>
 8011c6e:	3901      	subs	r1, #1
 8011c70:	005b      	lsls	r3, r3, #1
 8011c72:	e7fa      	b.n	8011c6a <__ieee754_fmod+0xfa>
 8011c74:	ea4f 5128 	mov.w	r1, r8, asr #20
 8011c78:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8011c7c:	e7b8      	b.n	8011bf0 <__ieee754_fmod+0x80>
 8011c7e:	3a01      	subs	r2, #1
 8011c80:	005b      	lsls	r3, r3, #1
 8011c82:	e7bc      	b.n	8011bfe <__ieee754_fmod+0x8e>
 8011c84:	4a3d      	ldr	r2, [pc, #244]	@ (8011d7c <__ieee754_fmod+0x20c>)
 8011c86:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	ddb9      	ble.n	8011c02 <__ieee754_fmod+0x92>
 8011c8e:	3a01      	subs	r2, #1
 8011c90:	005b      	lsls	r3, r3, #1
 8011c92:	e7fa      	b.n	8011c8a <__ieee754_fmod+0x11a>
 8011c94:	ea4f 522c 	mov.w	r2, ip, asr #20
 8011c98:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8011c9c:	e7b1      	b.n	8011c02 <__ieee754_fmod+0x92>
 8011c9e:	1a40      	subs	r0, r0, r1
 8011ca0:	281f      	cmp	r0, #31
 8011ca2:	dc0a      	bgt.n	8011cba <__ieee754_fmod+0x14a>
 8011ca4:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8011ca8:	fa08 f800 	lsl.w	r8, r8, r0
 8011cac:	fa2a f303 	lsr.w	r3, sl, r3
 8011cb0:	ea43 0308 	orr.w	r3, r3, r8
 8011cb4:	fa0a f400 	lsl.w	r4, sl, r0
 8011cb8:	e7aa      	b.n	8011c10 <__ieee754_fmod+0xa0>
 8011cba:	4b31      	ldr	r3, [pc, #196]	@ (8011d80 <__ieee754_fmod+0x210>)
 8011cbc:	1a5b      	subs	r3, r3, r1
 8011cbe:	fa0a f303 	lsl.w	r3, sl, r3
 8011cc2:	2400      	movs	r4, #0
 8011cc4:	e7a4      	b.n	8011c10 <__ieee754_fmod+0xa0>
 8011cc6:	1a80      	subs	r0, r0, r2
 8011cc8:	281f      	cmp	r0, #31
 8011cca:	dc0a      	bgt.n	8011ce2 <__ieee754_fmod+0x172>
 8011ccc:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8011cd0:	fa0c fc00 	lsl.w	ip, ip, r0
 8011cd4:	fa27 f606 	lsr.w	r6, r7, r6
 8011cd8:	ea46 060c 	orr.w	r6, r6, ip
 8011cdc:	fa07 fe00 	lsl.w	lr, r7, r0
 8011ce0:	e79d      	b.n	8011c1e <__ieee754_fmod+0xae>
 8011ce2:	4e27      	ldr	r6, [pc, #156]	@ (8011d80 <__ieee754_fmod+0x210>)
 8011ce4:	1ab6      	subs	r6, r6, r2
 8011ce6:	fa07 f606 	lsl.w	r6, r7, r6
 8011cea:	f04f 0e00 	mov.w	lr, #0
 8011cee:	e796      	b.n	8011c1e <__ieee754_fmod+0xae>
 8011cf0:	4574      	cmp	r4, lr
 8011cf2:	bf38      	it	cc
 8011cf4:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8011cf8:	2800      	cmp	r0, #0
 8011cfa:	da05      	bge.n	8011d08 <__ieee754_fmod+0x198>
 8011cfc:	0fe0      	lsrs	r0, r4, #31
 8011cfe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011d02:	0064      	lsls	r4, r4, #1
 8011d04:	3901      	subs	r1, #1
 8011d06:	e78b      	b.n	8011c20 <__ieee754_fmod+0xb0>
 8011d08:	ea50 0307 	orrs.w	r3, r0, r7
 8011d0c:	f43f af5f 	beq.w	8011bce <__ieee754_fmod+0x5e>
 8011d10:	0ffb      	lsrs	r3, r7, #31
 8011d12:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8011d16:	007c      	lsls	r4, r7, #1
 8011d18:	e7f4      	b.n	8011d04 <__ieee754_fmod+0x194>
 8011d1a:	0fe1      	lsrs	r1, r4, #31
 8011d1c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8011d20:	0064      	lsls	r4, r4, #1
 8011d22:	3a01      	subs	r2, #1
 8011d24:	e78c      	b.n	8011c40 <__ieee754_fmod+0xd0>
 8011d26:	1a89      	subs	r1, r1, r2
 8011d28:	2914      	cmp	r1, #20
 8011d2a:	dc0a      	bgt.n	8011d42 <__ieee754_fmod+0x1d2>
 8011d2c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8011d30:	fa03 f202 	lsl.w	r2, r3, r2
 8011d34:	40cc      	lsrs	r4, r1
 8011d36:	4322      	orrs	r2, r4
 8011d38:	410b      	asrs	r3, r1
 8011d3a:	ea43 0105 	orr.w	r1, r3, r5
 8011d3e:	4610      	mov	r0, r2
 8011d40:	e737      	b.n	8011bb2 <__ieee754_fmod+0x42>
 8011d42:	291f      	cmp	r1, #31
 8011d44:	dc07      	bgt.n	8011d56 <__ieee754_fmod+0x1e6>
 8011d46:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8011d4a:	40cc      	lsrs	r4, r1
 8011d4c:	fa03 f202 	lsl.w	r2, r3, r2
 8011d50:	4322      	orrs	r2, r4
 8011d52:	462b      	mov	r3, r5
 8011d54:	e7f1      	b.n	8011d3a <__ieee754_fmod+0x1ca>
 8011d56:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8011d5a:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8011d5e:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8011d62:	32e2      	adds	r2, #226	@ 0xe2
 8011d64:	fa43 f202 	asr.w	r2, r3, r2
 8011d68:	e7f3      	b.n	8011d52 <__ieee754_fmod+0x1e2>
 8011d6a:	bf00      	nop
 8011d6c:	7fefffff 	.word	0x7fefffff
 8011d70:	7ff00000 	.word	0x7ff00000
 8011d74:	08012268 	.word	0x08012268
 8011d78:	fffffbed 	.word	0xfffffbed
 8011d7c:	fffffc02 	.word	0xfffffc02
 8011d80:	fffffbe2 	.word	0xfffffbe2

08011d84 <_init>:
 8011d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d86:	bf00      	nop
 8011d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d8a:	bc08      	pop	{r3}
 8011d8c:	469e      	mov	lr, r3
 8011d8e:	4770      	bx	lr

08011d90 <_fini>:
 8011d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d92:	bf00      	nop
 8011d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d96:	bc08      	pop	{r3}
 8011d98:	469e      	mov	lr, r3
 8011d9a:	4770      	bx	lr
