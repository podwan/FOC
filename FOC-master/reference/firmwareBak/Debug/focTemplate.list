
focTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001225c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08012440  08012440  00013440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080128f0  080128f0  00014270  2**0
                  CONTENTS
  4 .ARM          00000008  080128f0  080128f0  000138f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080128f8  080128f8  00014270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080128f8  080128f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080128fc  080128fc  000138fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  08012900  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  20000270  08012b70  00014270  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a8c  08012b70  00014a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028059  00000000  00000000  000142a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b6c  00000000  00000000  0003c2f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f78  00000000  00000000  00041e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017ff  00000000  00000000  00043de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f72  00000000  00000000  000455df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bf7e  00000000  00000000  0006d551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eed48  00000000  00000000  000994cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00188217  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097e0  00000000  00000000  0018825c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00191a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000270 	.word	0x20000270
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012424 	.word	0x08012424

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000274 	.word	0x20000274
 800021c:	08012424 	.word	0x08012424

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00d fcd7 	bl	800ea02 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00d fcd1 	bl	800ea02 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <MX_ADC1_Init+0x164>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <MX_ADC1_Init+0x164>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <MX_ADC1_Init+0x164>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <MX_ADC1_Init+0x164>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010cc:	f001 fdd4 	bl	8002c78 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fcb2 	bl	8001a3e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010e6:	f003 fefd 	bl	8004ee4 <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fca5 	bl	8001a3e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_ADC1_Init+0x168>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4821      	ldr	r0, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001114:	f002 f96c 	bl	80033f0 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fc8e 	bl	8001a3e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC1_Init+0x16c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001150:	2384      	movs	r3, #132	@ 0x84
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001164:	f003 f9de 	bl	8004524 <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fc66 	bl	8001a3e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_ADC1_Init+0x170>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001182:	f003 f9cf 	bl	8004524 <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fc57 	bl	8001a3e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000028c 	.word	0x2000028c
 800119c:	2e300800 	.word	0x2e300800
 80011a0:	0c900008 	.word	0x0c900008
 80011a4:	32601000 	.word	0x32601000

080011a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b098      	sub	sp, #96	@ 0x60
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b2:	223c      	movs	r2, #60	@ 0x3c
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f00d fc23 	bl	800ea02 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2220      	movs	r2, #32
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00d fc1d 	bl	800ea02 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011c8:	4b3f      	ldr	r3, [pc, #252]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011ca:	4a40      	ldr	r2, [pc, #256]	@ (80012cc <MX_ADC2_Init+0x124>)
 80011cc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011ce:	4b3e      	ldr	r3, [pc, #248]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011d6:	4b3c      	ldr	r3, [pc, #240]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011dc:	4b3a      	ldr	r3, [pc, #232]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011e2:	4b39      	ldr	r3, [pc, #228]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e8:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ee:	4b36      	ldr	r3, [pc, #216]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011f0:	2204      	movs	r2, #4
 80011f2:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011f4:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011fa:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001200:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001202:	2201      	movs	r2, #1
 8001204:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001206:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120e:	4b2e      	ldr	r3, [pc, #184]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001210:	2200      	movs	r2, #0
 8001212:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001214:	4b2c      	ldr	r3, [pc, #176]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001216:	2200      	movs	r2, #0
 8001218:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800121a:	4b2b      	ldr	r3, [pc, #172]	@ (80012c8 <MX_ADC2_Init+0x120>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001222:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001224:	2200      	movs	r2, #0
 8001226:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001228:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <MX_ADC2_Init+0x120>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001230:	4825      	ldr	r0, [pc, #148]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001232:	f001 fd21 	bl	8002c78 <HAL_ADC_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC2_Init+0x98>
  {
    Error_Handler();
 800123c:	f000 fbff 	bl	8001a3e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001240:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <MX_ADC2_Init+0x128>)
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001244:	2309      	movs	r3, #9
 8001246:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001248:	2301      	movs	r3, #1
 800124a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800124c:	237f      	movs	r3, #127	@ 0x7f
 800124e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001250:	2304      	movs	r3, #4
 8001252:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigInjected.InjectedOffset = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 800126e:	2384      	movs	r3, #132	@ 0x84
 8001270:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001272:	2380      	movs	r3, #128	@ 0x80
 8001274:	653b      	str	r3, [r7, #80]	@ 0x50
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800127c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001280:	4619      	mov	r1, r3
 8001282:	4811      	ldr	r0, [pc, #68]	@ (80012c8 <MX_ADC2_Init+0x120>)
 8001284:	f003 f94e 	bl	8004524 <HAL_ADCEx_InjectedConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 800128e:	f000 fbd6 	bl	8001a3e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <MX_ADC2_Init+0x12c>)
 8001294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001296:	2306      	movs	r3, #6
 8001298:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800129e:	237f      	movs	r3, #127	@ 0x7f
 80012a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a2:	2304      	movs	r3, #4
 80012a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4806      	ldr	r0, [pc, #24]	@ (80012c8 <MX_ADC2_Init+0x120>)
 80012b0:	f002 f89e 	bl	80033f0 <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC2_Init+0x116>
  {
    Error_Handler();
 80012ba:	f000 fbc0 	bl	8001a3e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	3760      	adds	r7, #96	@ 0x60
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200002f8 	.word	0x200002f8
 80012cc:	50000100 	.word	0x50000100
 80012d0:	0c900008 	.word	0x0c900008
 80012d4:	04300002 	.word	0x04300002

080012d8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b09e      	sub	sp, #120	@ 0x78
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	2244      	movs	r2, #68	@ 0x44
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f00d fb82 	bl	800ea02 <memset>
  if(adcHandle->Instance==ADC1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001306:	d15f      	bne.n	80013c8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001308:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800130c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800130e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001312:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	4618      	mov	r0, r3
 800131a:	f006 fc4d 	bl	8007bb8 <HAL_RCCEx_PeriphCLKConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001324:	f000 fb8b 	bl	8001a3e <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001328:	4b4f      	ldr	r3, [pc, #316]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	4a4e      	ldr	r2, [pc, #312]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 8001330:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001332:	4b4d      	ldr	r3, [pc, #308]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10b      	bne.n	8001352 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800133a:	4b4c      	ldr	r3, [pc, #304]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a4b      	ldr	r2, [pc, #300]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001340:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b49      	ldr	r3, [pc, #292]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b46      	ldr	r3, [pc, #280]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4a45      	ldr	r2, [pc, #276]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135e:	4b43      	ldr	r3, [pc, #268]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4b40      	ldr	r3, [pc, #256]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a3f      	ldr	r2, [pc, #252]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b3d      	ldr	r3, [pc, #244]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001382:	2304      	movs	r3, #4
 8001384:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	2303      	movs	r3, #3
 8001388:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001398:	f005 fb78 	bl	8006a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 800139c:	f241 0302 	movw	r3, #4098	@ 0x1002
 80013a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013ae:	4619      	mov	r1, r3
 80013b0:	482f      	ldr	r0, [pc, #188]	@ (8001470 <HAL_ADC_MspInit+0x198>)
 80013b2:	f005 fb6b 	bl	8006a8c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2012      	movs	r0, #18
 80013bc:	f004 f939 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013c0:	2012      	movs	r0, #18
 80013c2:	f004 f950 	bl	8005666 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80013c6:	e04a      	b.n	800145e <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a29      	ldr	r2, [pc, #164]	@ (8001474 <HAL_ADC_MspInit+0x19c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d145      	bne.n	800145e <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013d8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	4618      	mov	r0, r3
 80013e4:	f006 fbe8 	bl	8007bb8 <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80013ee:	f000 fb26 	bl	8001a3e <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <HAL_ADC_MspInit+0x190>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d10b      	bne.n	800141c <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001408:	4a18      	ldr	r2, [pc, #96]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800140a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800140e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001410:	4b16      	ldr	r3, [pc, #88]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001414:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001420:	4a12      	ldr	r2, [pc, #72]	@ (800146c <HAL_ADC_MspInit+0x194>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001428:	4b10      	ldr	r3, [pc, #64]	@ (800146c <HAL_ADC_MspInit+0x194>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8001434:	2341      	movs	r3, #65	@ 0x41
 8001436:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001438:	2303      	movs	r3, #3
 800143a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144a:	f005 fb1f 	bl	8006a8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2012      	movs	r0, #18
 8001454:	f004 f8ed 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001458:	2012      	movs	r0, #18
 800145a:	f004 f904 	bl	8005666 <HAL_NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3778      	adds	r7, #120	@ 0x78
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000364 	.word	0x20000364
 800146c:	40021000 	.word	0x40021000
 8001470:	48000400 	.word	0x48000400
 8001474:	50000100 	.word	0x50000100

08001478 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_COMP1_Init+0x44>)
 800147e:	4a10      	ldr	r2, [pc, #64]	@ (80014c0 <MX_COMP1_Init+0x48>)
 8001480:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001488:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_COMP1_Init+0x44>)
 800148c:	2240      	movs	r2, #64	@ 0x40
 800148e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001490:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_COMP1_Init+0x44>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <MX_COMP1_Init+0x44>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_COMP1_Init+0x44>)
 80014a4:	2211      	movs	r2, #17
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_COMP1_Init+0x44>)
 80014aa:	f003 fe7d 	bl	80051a8 <HAL_COMP_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 80014b4:	f000 fac3 	bl	8001a3e <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000368 	.word	0x20000368
 80014c0:	40010200 	.word	0x40010200

080014c4 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a13      	ldr	r2, [pc, #76]	@ (8001530 <HAL_COMP_MspInit+0x6c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d11f      	bne.n	8001526 <HAL_COMP_MspInit+0x62>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <HAL_COMP_MspInit+0x70>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014fe:	2302      	movs	r3, #2
 8001500:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001502:	2303      	movs	r3, #3
 8001504:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	4619      	mov	r1, r3
 8001510:	4809      	ldr	r0, [pc, #36]	@ (8001538 <HAL_COMP_MspInit+0x74>)
 8001512:	f005 fabb 	bl	8006a8c <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2040      	movs	r0, #64	@ 0x40
 800151c:	f004 f889 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8001520:	2040      	movs	r0, #64	@ 0x40
 8001522:	f004 f8a0 	bl	8005666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40010200 	.word	0x40010200
 8001534:	40021000 	.word	0x40021000
 8001538:	48000400 	.word	0x48000400

0800153c <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2230      	movs	r2, #48	@ 0x30
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f00d fa5a 	bl	800ea02 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800154e:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001550:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <MX_DAC3_Init+0x70>)
 8001552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001554:	4814      	ldr	r0, [pc, #80]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001556:	f004 f8a0 	bl	800569a <HAL_DAC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001560:	f000 fa6d 	bl	8001a3e <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001564:	2302      	movs	r3, #2
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800157c:	2302      	movs	r3, #2
 800157e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <MX_DAC3_Init+0x6c>)
 8001590:	f004 f940 	bl	8005814 <HAL_DAC_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800159a:	f000 fa50 	bl	8001a3e <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3730      	adds	r7, #48	@ 0x30
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000038c 	.word	0x2000038c
 80015ac:	50001000 	.word	0x50001000

080015b0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <HAL_DAC_MspInit+0x38>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10b      	bne.n	80015da <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <HAL_DAC_MspInit+0x3c>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	50001000 	.word	0x50001000
 80015ec:	40021000 	.word	0x40021000

080015f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015f6:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <MX_DMA_Init+0x50>)
 80015f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fa:	4a11      	ldr	r2, [pc, #68]	@ (8001640 <MX_DMA_Init+0x50>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6493      	str	r3, [r2, #72]	@ 0x48
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <MX_DMA_Init+0x50>)
 8001604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800160e:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <MX_DMA_Init+0x50>)
 8001610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001612:	4a0b      	ldr	r2, [pc, #44]	@ (8001640 <MX_DMA_Init+0x50>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6493      	str	r3, [r2, #72]	@ 0x48
 800161a:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <MX_DMA_Init+0x50>)
 800161c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	200b      	movs	r0, #11
 800162c:	f004 f801 	bl	8005632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001630:	200b      	movs	r0, #11
 8001632:	f004 f818 	bl	8005666 <HAL_NVIC_EnableIRQ>

}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000

08001644 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001648:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800164a:	4a20      	ldr	r2, [pc, #128]	@ (80016cc <MX_FDCAN1_Init+0x88>)
 800164c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800164e:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001650:	2200      	movs	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001654:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800165a:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001660:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001662:	2200      	movs	r2, #0
 8001664:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001666:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001668:	2200      	movs	r2, #0
 800166a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800166c:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800166e:	2200      	movs	r2, #0
 8001670:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001674:	2214      	movs	r2, #20
 8001676:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800167a:	2201      	movs	r2, #1
 800167c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 800167e:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001680:	220a      	movs	r2, #10
 8001682:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8001684:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001686:	2205      	movs	r2, #5
 8001688:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800168c:	2214      	movs	r2, #20
 800168e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001690:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001692:	2201      	movs	r2, #1
 8001694:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 8001698:	220a      	movs	r2, #10
 800169a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 800169e:	2205      	movs	r2, #5
 80016a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 80016a8:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80016b4:	4804      	ldr	r0, [pc, #16]	@ (80016c8 <MX_FDCAN1_Init+0x84>)
 80016b6:	f004 fd97 	bl	80061e8 <HAL_FDCAN_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80016c0:	f000 f9bd 	bl	8001a3e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200003a0 	.word	0x200003a0
 80016cc:	40006400 	.word	0x40006400

080016d0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b09a      	sub	sp, #104	@ 0x68
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	2244      	movs	r2, #68	@ 0x44
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f00d f986 	bl	800ea02 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a24      	ldr	r2, [pc, #144]	@ (800178c <HAL_FDCAN_MspInit+0xbc>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d141      	bne.n	8001784 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001704:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001706:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800170a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4618      	mov	r0, r3
 8001712:	f006 fa51 	bl	8007bb8 <HAL_RCCEx_PeriphCLKConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800171c:	f000 f98f 	bl	8001a3e <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001724:	4a1a      	ldr	r2, [pc, #104]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 8001726:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800172a:	6593      	str	r3, [r2, #88]	@ 0x58
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173c:	4a14      	ldr	r2, [pc, #80]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_FDCAN_MspInit+0xc0>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001750:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001754:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001762:	2309      	movs	r3, #9
 8001764:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800176a:	4619      	mov	r1, r3
 800176c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001770:	f005 f98c 	bl	8006a8c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	2015      	movs	r0, #21
 800177a:	f003 ff5a 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800177e:	2015      	movs	r0, #21
 8001780:	f003 ff71 	bl	8005666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001784:	bf00      	nop
 8001786:	3768      	adds	r7, #104	@ 0x68
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40006400 	.word	0x40006400
 8001790:	40021000 	.word	0x40021000

08001794 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	4b39      	ldr	r3, [pc, #228]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	4a38      	ldr	r2, [pc, #224]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b6:	4b36      	ldr	r3, [pc, #216]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c2:	4b33      	ldr	r3, [pc, #204]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	4a32      	ldr	r2, [pc, #200]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017c8:	f043 0320 	orr.w	r3, r3, #32
 80017cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ce:	4b30      	ldr	r3, [pc, #192]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b2d      	ldr	r3, [pc, #180]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	4a2c      	ldr	r2, [pc, #176]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	4b27      	ldr	r3, [pc, #156]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	4a26      	ldr	r2, [pc, #152]	@ (8001890 <MX_GPIO_Init+0xfc>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fe:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <MX_GPIO_Init+0xfc>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	2110      	movs	r1, #16
 800180e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001812:	f005 fabd 	bl	8006d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2150      	movs	r1, #80	@ 0x50
 800181a:	481e      	ldr	r0, [pc, #120]	@ (8001894 <MX_GPIO_Init+0x100>)
 800181c:	f005 fab8 	bl	8006d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001820:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001826:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800182a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	4817      	ldr	r0, [pc, #92]	@ (8001894 <MX_GPIO_Init+0x100>)
 8001838:	f005 f928 	bl	8006a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800183c:	2310      	movs	r3, #16
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001856:	f005 f919 	bl	8006a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 800185a:	2350      	movs	r3, #80	@ 0x50
 800185c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	4808      	ldr	r0, [pc, #32]	@ (8001894 <MX_GPIO_Init+0x100>)
 8001872:	f005 f90b 	bl	8006a8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	2028      	movs	r0, #40	@ 0x28
 800187c:	f003 fed9 	bl	8005632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001880:	2028      	movs	r0, #40	@ 0x28
 8001882:	f003 fef0 	bl	8005666 <HAL_NVIC_EnableIRQ>

}
 8001886:	bf00      	nop
 8001888:	3728      	adds	r7, #40	@ 0x28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	48000800 	.word	0x48000800

08001898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800189c:	f000 ff29 	bl	80026f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a0:	f000 f884 	bl	80019ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a4:	f7ff ff76 	bl	8001794 <MX_GPIO_Init>
  MX_DMA_Init();
 80018a8:	f7ff fea2 	bl	80015f0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80018ac:	f000 fe1e 	bl	80024ec <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80018b0:	f7ff fbc0 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 80018b4:	f7ff fc78 	bl	80011a8 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 80018b8:	f000 f8c8 	bl	8001a4c <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 80018bc:	f000 f8ee 	bl	8001a9c <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 80018c0:	f000 f914 	bl	8001aec <MX_OPAMP3_Init>
  MX_TIM1_Init();
 80018c4:	f000 fbd6 	bl	8002074 <MX_TIM1_Init>
  MX_COMP1_Init();
 80018c8:	f7ff fdd6 	bl	8001478 <MX_COMP1_Init>
  MX_DAC3_Init();
 80018cc:	f7ff fe36 	bl	800153c <MX_DAC3_Init>
  MX_FDCAN1_Init();
 80018d0:	f7ff feb8 	bl	8001644 <MX_FDCAN1_Init>
  MX_TIM4_Init();
 80018d4:	f000 fcc2 	bl	800225c <MX_TIM4_Init>
  MX_SPI1_Init();
 80018d8:	f000 f9a6 	bl	8001c28 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_OPAMP_Start(&hopamp1);
 80018dc:	4827      	ldr	r0, [pc, #156]	@ (800197c <main+0xe4>)
 80018de:	f005 fb57 	bl	8006f90 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 80018e2:	4827      	ldr	r0, [pc, #156]	@ (8001980 <main+0xe8>)
 80018e4:	f005 fb54 	bl	8006f90 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 80018e8:	4826      	ldr	r0, [pc, #152]	@ (8001984 <main+0xec>)
 80018ea:	f005 fb51 	bl	8006f90 <HAL_OPAMP_Start>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&aRxBuffer, 1);
 80018ee:	2201      	movs	r2, #1
 80018f0:	4925      	ldr	r1, [pc, #148]	@ (8001988 <main+0xf0>)
 80018f2:	4826      	ldr	r0, [pc, #152]	@ (800198c <main+0xf4>)
 80018f4:	f008 ff80 	bl	800a7f8 <HAL_UART_Receive_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80018f8:	217f      	movs	r1, #127	@ 0x7f
 80018fa:	4825      	ldr	r0, [pc, #148]	@ (8001990 <main+0xf8>)
 80018fc:	f002 fbf2 	bl	80040e4 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001900:	217f      	movs	r1, #127	@ 0x7f
 8001902:	4824      	ldr	r0, [pc, #144]	@ (8001994 <main+0xfc>)
 8001904:	f002 fbee 	bl	80040e4 <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 8001908:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <main+0xf8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2220      	movs	r2, #32
 800190e:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 8001910:	4b1f      	ldr	r3, [pc, #124]	@ (8001990 <main+0xf8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2204      	movs	r2, #4
 8001916:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 8001918:	4b1e      	ldr	r3, [pc, #120]	@ (8001994 <main+0xfc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2220      	movs	r2, #32
 800191e:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001920:	481b      	ldr	r0, [pc, #108]	@ (8001990 <main+0xf8>)
 8001922:	f002 fcf1 	bl	8004308 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 8001926:	481b      	ldr	r0, [pc, #108]	@ (8001994 <main+0xfc>)
 8001928:	f002 fc3e 	bl	80041a8 <HAL_ADCEx_InjectedStart>
  TIM1->ARR = 8000 - 1;
 800192c:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <main+0x100>)
 800192e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001932:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->CCR4 = 8000 - 2;
 8001934:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <main+0x100>)
 8001936:	f641 723e 	movw	r2, #7998	@ 0x1f3e
 800193a:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_Base_Start(&htim1);
 800193c:	4817      	ldr	r0, [pc, #92]	@ (800199c <main+0x104>)
 800193e:	f006 ffc3 	bl	80088c8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001942:	210c      	movs	r1, #12
 8001944:	4815      	ldr	r0, [pc, #84]	@ (800199c <main+0x104>)
 8001946:	f007 f883 	bl	8008a50 <HAL_TIM_PWM_Start>
  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 3000);
 800194a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	4813      	ldr	r0, [pc, #76]	@ (80019a0 <main+0x108>)
 8001954:	f003 ff30 	bl	80057b8 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
 8001958:	2100      	movs	r1, #0
 800195a:	4811      	ldr	r0, [pc, #68]	@ (80019a0 <main+0x108>)
 800195c:	f003 fec0 	bl	80056e0 <HAL_DAC_Start>
  //  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
  HAL_COMP_Start(&hcomp1);
 8001960:	4810      	ldr	r0, [pc, #64]	@ (80019a4 <main+0x10c>)
 8001962:	f003 fcfd 	bl	8005360 <HAL_COMP_Start>
  HAL_TIMEx_HallSensor_Start_IT(&htim4);
 8001966:	4810      	ldr	r0, [pc, #64]	@ (80019a8 <main+0x110>)
 8001968:	f008 fb02 	bl	8009f70 <HAL_TIMEx_HallSensor_Start_IT>
  FDCAN_Config();
 800196c:	f00b fd7a 	bl	800d464 <FDCAN_Config>
  appInit();
 8001970:	f00b f8c6 	bl	800cb00 <appInit>
    //    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
    //    HAL_Delay(10);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 8001974:	f00b fbee 	bl	800d154 <userMain>
 8001978:	e7fc      	b.n	8001974 <main+0xdc>
 800197a:	bf00      	nop
 800197c:	20000404 	.word	0x20000404
 8001980:	20000440 	.word	0x20000440
 8001984:	2000047c 	.word	0x2000047c
 8001988:	2000087b 	.word	0x2000087b
 800198c:	200005b8 	.word	0x200005b8
 8001990:	2000028c 	.word	0x2000028c
 8001994:	200002f8 	.word	0x200002f8
 8001998:	40012c00 	.word	0x40012c00
 800199c:	20000520 	.word	0x20000520
 80019a0:	2000038c 	.word	0x2000038c
 80019a4:	20000368 	.word	0x20000368
 80019a8:	2000056c 	.word	0x2000056c

080019ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b094      	sub	sp, #80	@ 0x50
 80019b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b2:	f107 0318 	add.w	r3, r7, #24
 80019b6:	2238      	movs	r2, #56	@ 0x38
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00d f821 	bl	800ea02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80019ce:	2000      	movs	r0, #0
 80019d0:	f005 fb10 	bl	8006ff4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019d4:	2301      	movs	r3, #1
 80019d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019dc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019de:	2302      	movs	r3, #2
 80019e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019e2:	2303      	movs	r3, #3
 80019e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80019e6:	2303      	movs	r3, #3
 80019e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80019ea:	2328      	movs	r3, #40	@ 0x28
 80019ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019ee:	2302      	movs	r3, #2
 80019f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019f2:	2302      	movs	r3, #2
 80019f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019f6:	2302      	movs	r3, #2
 80019f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019fa:	f107 0318 	add.w	r3, r7, #24
 80019fe:	4618      	mov	r0, r3
 8001a00:	f005 fbac 	bl	800715c <HAL_RCC_OscConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001a0a:	f000 f818 	bl	8001a3e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0e:	230f      	movs	r3, #15
 8001a10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a12:	2303      	movs	r3, #3
 8001a14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2104      	movs	r1, #4
 8001a26:	4618      	mov	r0, r3
 8001a28:	f005 feaa 	bl	8007780 <HAL_RCC_ClockConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001a32:	f000 f804 	bl	8001a3e <Error_Handler>
  }
}
 8001a36:	bf00      	nop
 8001a38:	3750      	adds	r7, #80	@ 0x50
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a42:	b672      	cpsid	i
}
 8001a44:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a46:	bf00      	nop
 8001a48:	e7fd      	b.n	8001a46 <Error_Handler+0x8>
	...

08001a4c <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001a50:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <MX_OPAMP1_Init+0x48>)
 8001a52:	4a11      	ldr	r2, [pc, #68]	@ (8001a98 <MX_OPAMP1_Init+0x4c>)
 8001a54:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001a56:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <MX_OPAMP1_Init+0x48>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <MX_OPAMP1_Init+0x48>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001a62:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <MX_OPAMP1_Init+0x48>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001a68:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <MX_OPAMP1_Init+0x48>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <MX_OPAMP1_Init+0x48>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001a74:	4b07      	ldr	r3, [pc, #28]	@ (8001a94 <MX_OPAMP1_Init+0x48>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <MX_OPAMP1_Init+0x48>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001a80:	4804      	ldr	r0, [pc, #16]	@ (8001a94 <MX_OPAMP1_Init+0x48>)
 8001a82:	f005 f9b5 	bl	8006df0 <HAL_OPAMP_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_OPAMP1_Init+0x44>
  {
    Error_Handler();
 8001a8c:	f7ff ffd7 	bl	8001a3e <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000404 	.word	0x20000404
 8001a98:	40010300 	.word	0x40010300

08001a9c <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001aa0:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <MX_OPAMP2_Init+0x48>)
 8001aa2:	4a11      	ldr	r2, [pc, #68]	@ (8001ae8 <MX_OPAMP2_Init+0x4c>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae4 <MX_OPAMP2_Init+0x48>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_STANDALONE_MODE;
 8001aac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <MX_OPAMP2_Init+0x48>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <MX_OPAMP2_Init+0x48>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <MX_OPAMP2_Init+0x48>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <MX_OPAMP2_Init+0x48>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <MX_OPAMP2_Init+0x48>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <MX_OPAMP2_Init+0x48>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001ad0:	4804      	ldr	r0, [pc, #16]	@ (8001ae4 <MX_OPAMP2_Init+0x48>)
 8001ad2:	f005 f98d 	bl	8006df0 <HAL_OPAMP_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_OPAMP2_Init+0x44>
  {
    Error_Handler();
 8001adc:	f7ff ffaf 	bl	8001a3e <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000440 	.word	0x20000440
 8001ae8:	40010304 	.word	0x40010304

08001aec <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001af0:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <MX_OPAMP3_Init+0x48>)
 8001af2:	4a11      	ldr	r2, [pc, #68]	@ (8001b38 <MX_OPAMP3_Init+0x4c>)
 8001af4:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001af6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <MX_OPAMP3_Init+0x48>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_STANDALONE_MODE;
 8001afc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <MX_OPAMP3_Init+0x48>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  hopamp3.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <MX_OPAMP3_Init+0x48>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <MX_OPAMP3_Init+0x48>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <MX_OPAMP3_Init+0x48>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001b14:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <MX_OPAMP3_Init+0x48>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <MX_OPAMP3_Init+0x48>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001b20:	4804      	ldr	r0, [pc, #16]	@ (8001b34 <MX_OPAMP3_Init+0x48>)
 8001b22:	f005 f965 	bl	8006df0 <HAL_OPAMP_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_OPAMP3_Init+0x44>
  {
    Error_Handler();
 8001b2c:	f7ff ff87 	bl	8001a3e <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	2000047c 	.word	0x2000047c
 8001b38:	40010308 	.word	0x40010308

08001b3c <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	@ 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a2e      	ldr	r2, [pc, #184]	@ (8001c14 <HAL_OPAMP_MspInit+0xd8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d119      	bne.n	8001b92 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c18 <HAL_OPAMP_MspInit+0xdc>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b62:	4a2d      	ldr	r2, [pc, #180]	@ (8001c18 <HAL_OPAMP_MspInit+0xdc>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c18 <HAL_OPAMP_MspInit+0xdc>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b76:	230e      	movs	r3, #14
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b8c:	f004 ff7e 	bl	8006a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8001b90:	e03b      	b.n	8001c0a <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a21      	ldr	r2, [pc, #132]	@ (8001c1c <HAL_OPAMP_MspInit+0xe0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d119      	bne.n	8001bd0 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c18 <HAL_OPAMP_MspInit+0xdc>)
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c18 <HAL_OPAMP_MspInit+0xdc>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <HAL_OPAMP_MspInit+0xdc>)
 8001baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bb4:	23e0      	movs	r3, #224	@ 0xe0
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bca:	f004 ff5f 	bl	8006a8c <HAL_GPIO_Init>
}
 8001bce:	e01c      	b.n	8001c0a <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <HAL_OPAMP_MspInit+0xe4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d117      	bne.n	8001c0a <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	4b0f      	ldr	r3, [pc, #60]	@ (8001c18 <HAL_OPAMP_MspInit+0xdc>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	4a0e      	ldr	r2, [pc, #56]	@ (8001c18 <HAL_OPAMP_MspInit+0xdc>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c18 <HAL_OPAMP_MspInit+0xdc>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001bf2:	2307      	movs	r3, #7
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	4807      	ldr	r0, [pc, #28]	@ (8001c24 <HAL_OPAMP_MspInit+0xe8>)
 8001c06:	f004 ff41 	bl	8006a8c <HAL_GPIO_Init>
}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	@ 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40010300 	.word	0x40010300
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010304 	.word	0x40010304
 8001c20:	40010308 	.word	0x40010308
 8001c24:	48000400 	.word	0x48000400

08001c28 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <MX_SPI1_Init+0x74>)
 8001c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca0 <MX_SPI1_Init+0x78>)
 8001c30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <MX_SPI1_Init+0x74>)
 8001c34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c3a:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <MX_SPI1_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001c40:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <MX_SPI1_Init+0x74>)
 8001c42:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001c46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c48:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <MX_SPI1_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c4e:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <MX_SPI1_Init+0x74>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c54:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <MX_SPI1_Init+0x74>)
 8001c56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <MX_SPI1_Init+0x74>)
 8001c5e:	2218      	movs	r2, #24
 8001c60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <MX_SPI1_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <MX_SPI1_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <MX_SPI1_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c74:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <MX_SPI1_Init+0x74>)
 8001c76:	2207      	movs	r2, #7
 8001c78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <MX_SPI1_Init+0x74>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c80:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <MX_SPI1_Init+0x74>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c86:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <MX_SPI1_Init+0x74>)
 8001c88:	f006 f986 	bl	8007f98 <HAL_SPI_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c92:	f7ff fed4 	bl	8001a3e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200004b8 	.word	0x200004b8
 8001ca0:	40013000 	.word	0x40013000

08001ca4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	@ 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a17      	ldr	r2, [pc, #92]	@ (8001d20 <HAL_SPI_MspInit+0x7c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d127      	bne.n	8001d16 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cc6:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <HAL_SPI_MspInit+0x80>)
 8001cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cca:	4a16      	ldr	r2, [pc, #88]	@ (8001d24 <HAL_SPI_MspInit+0x80>)
 8001ccc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cd2:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <HAL_SPI_MspInit+0x80>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <HAL_SPI_MspInit+0x80>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce2:	4a10      	ldr	r2, [pc, #64]	@ (8001d24 <HAL_SPI_MspInit+0x80>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cea:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <HAL_SPI_MspInit+0x80>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001cf6:	2338      	movs	r3, #56	@ 0x38
 8001cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d06:	2305      	movs	r3, #5
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <HAL_SPI_MspInit+0x84>)
 8001d12:	f004 febb 	bl	8006a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d16:	bf00      	nop
 8001d18:	3728      	adds	r7, #40	@ 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40013000 	.word	0x40013000
 8001d24:	40021000 	.word	0x40021000
 8001d28:	48000400 	.word	0x48000400

08001d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d36:	4a0e      	ldr	r2, [pc, #56]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4e:	4a08      	ldr	r2, [pc, #32]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d54:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d62:	f005 f9eb 	bl	800713c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000

08001d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <NMI_Handler+0x4>

08001d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <HardFault_Handler+0x4>

08001d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <MemManage_Handler+0x4>

08001d8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d90:	bf00      	nop
 8001d92:	e7fd      	b.n	8001d90 <BusFault_Handler+0x4>

08001d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <UsageFault_Handler+0x4>

08001d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dca:	f000 fce5 	bl	8002798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001dd8:	4802      	ldr	r0, [pc, #8]	@ (8001de4 <DMA1_Channel1_IRQHandler+0x10>)
 8001dda:	f004 f8b6 	bl	8005f4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000064c 	.word	0x2000064c

08001de8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001dec:	4803      	ldr	r0, [pc, #12]	@ (8001dfc <ADC1_2_IRQHandler+0x14>)
 8001dee:	f001 f8c7 	bl	8002f80 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001df2:	4803      	ldr	r0, [pc, #12]	@ (8001e00 <ADC1_2_IRQHandler+0x18>)
 8001df4:	f001 f8c4 	bl	8002f80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	2000028c 	.word	0x2000028c
 8001e00:	200002f8 	.word	0x200002f8

08001e04 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001e08:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <FDCAN1_IT0_IRQHandler+0x1c>)
 8001e0a:	f004 fc4f 	bl	80066ac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
	HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,RxData);
 8001e0e:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <FDCAN1_IT0_IRQHandler+0x20>)
 8001e10:	4a05      	ldr	r2, [pc, #20]	@ (8001e28 <FDCAN1_IT0_IRQHandler+0x24>)
 8001e12:	2140      	movs	r1, #64	@ 0x40
 8001e14:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <FDCAN1_IT0_IRQHandler+0x1c>)
 8001e16:	f004 fb41 	bl	800649c <HAL_FDCAN_GetRxMessage>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200003a0 	.word	0x200003a0
 8001e24:	20000914 	.word	0x20000914
 8001e28:	200008ec 	.word	0x200008ec

08001e2c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e30:	4802      	ldr	r0, [pc, #8]	@ (8001e3c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001e32:	f006 ffa3 	bl	8008d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000520 	.word	0x20000520

08001e40 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e44:	4802      	ldr	r0, [pc, #8]	@ (8001e50 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e46:	f006 ff99 	bl	8008d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000520 	.word	0x20000520

08001e54 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <TIM1_CC_IRQHandler+0x10>)
 8001e5a:	f006 ff8f 	bl	8008d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000520 	.word	0x20000520

08001e68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e6c:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <TIM4_IRQHandler+0x10>)
 8001e6e:	f006 ff85 	bl	8008d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000056c 	.word	0x2000056c

08001e7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e80:	4802      	ldr	r0, [pc, #8]	@ (8001e8c <USART3_IRQHandler+0x10>)
 8001e82:	f008 fd85 	bl	800a990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200005b8 	.word	0x200005b8

08001e90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8001e94:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001e98:	f004 ff92 	bl	8006dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
 8001e9c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001ea0:	f004 ff8e 	bl	8006dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button3_Pin);
 8001ea4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ea8:	f004 ff8a 	bl	8006dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <COMP1_2_3_IRQHandler+0x10>)
 8001eb6:	f003 fa9b 	bl	80053f0 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000368 	.word	0x20000368

08001ec4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return 1;
 8001ec8:	2301      	movs	r3, #1
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_kill>:

int _kill(int pid, int sig)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ede:	f00c fde3 	bl	800eaa8 <__errno>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2216      	movs	r2, #22
 8001ee6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <_exit>:

void _exit (int status)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ffe7 	bl	8001ed4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f06:	bf00      	nop
 8001f08:	e7fd      	b.n	8001f06 <_exit+0x12>

08001f0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e00a      	b.n	8001f32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f1c:	f3af 8000 	nop.w
 8001f20:	4601      	mov	r1, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	60ba      	str	r2, [r7, #8]
 8001f28:	b2ca      	uxtb	r2, r1
 8001f2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	dbf0      	blt.n	8001f1c <_read+0x12>
  }

  return len;
 8001f3a:	687b      	ldr	r3, [r7, #4]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	e009      	b.n	8001f6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	60ba      	str	r2, [r7, #8]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3301      	adds	r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	dbf1      	blt.n	8001f56 <_write+0x12>
  }
  return len;
 8001f72:	687b      	ldr	r3, [r7, #4]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <_close>:

int _close(int file)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa4:	605a      	str	r2, [r3, #4]
  return 0;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_isatty>:

int _isatty(int file)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fbc:	2301      	movs	r3, #1
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fec:	4a14      	ldr	r2, [pc, #80]	@ (8002040 <_sbrk+0x5c>)
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <_sbrk+0x60>)
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff8:	4b13      	ldr	r3, [pc, #76]	@ (8002048 <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002000:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <_sbrk+0x64>)
 8002002:	4a12      	ldr	r2, [pc, #72]	@ (800204c <_sbrk+0x68>)
 8002004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002006:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <_sbrk+0x64>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	429a      	cmp	r2, r3
 8002012:	d207      	bcs.n	8002024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002014:	f00c fd48 	bl	800eaa8 <__errno>
 8002018:	4603      	mov	r3, r0
 800201a:	220c      	movs	r2, #12
 800201c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	e009      	b.n	8002038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800202a:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <_sbrk+0x64>)
 8002034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002036:	68fb      	ldr	r3, [r7, #12]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20008000 	.word	0x20008000
 8002044:	00000400 	.word	0x00000400
 8002048:	2000051c 	.word	0x2000051c
 800204c:	20000a90 	.word	0x20000a90

08002050 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <SystemInit+0x20>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205a:	4a05      	ldr	r2, [pc, #20]	@ (8002070 <SystemInit+0x20>)
 800205c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b09e      	sub	sp, #120	@ 0x78
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800207a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002088:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002094:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
 80020b0:	615a      	str	r2, [r3, #20]
 80020b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020b4:	463b      	mov	r3, r7
 80020b6:	2234      	movs	r2, #52	@ 0x34
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f00c fca1 	bl	800ea02 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020c0:	4b64      	ldr	r3, [pc, #400]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 80020c2:	4a65      	ldr	r2, [pc, #404]	@ (8002258 <MX_TIM1_Init+0x1e4>)
 80020c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 80020c6:	4b63      	ldr	r3, [pc, #396]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80020cc:	4b61      	ldr	r3, [pc, #388]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 80020ce:	2220      	movs	r2, #32
 80020d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 80020d2:	4b60      	ldr	r3, [pc, #384]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 80020d4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80020d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80020da:	4b5e      	ldr	r3, [pc, #376]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 80020dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80020e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020ee:	4859      	ldr	r0, [pc, #356]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 80020f0:	f006 fb92 	bl	8008818 <HAL_TIM_Base_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80020fa:	f7ff fca0 	bl	8001a3e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002102:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002104:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002108:	4619      	mov	r1, r3
 800210a:	4852      	ldr	r0, [pc, #328]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 800210c:	f007 f89a 	bl	8009244 <HAL_TIM_ConfigClockSource>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002116:	f7ff fc92 	bl	8001a3e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800211a:	484e      	ldr	r0, [pc, #312]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 800211c:	f006 fc36 	bl	800898c <HAL_TIM_PWM_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8002126:	f7ff fc8a 	bl	8001a3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800212a:	2370      	movs	r3, #112	@ 0x70
 800212c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002136:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800213a:	4619      	mov	r1, r3
 800213c:	4845      	ldr	r0, [pc, #276]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 800213e:	f008 f8b9 	bl	800a2b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8002148:	f7ff fc79 	bl	8001a3e <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 800214c:	2302      	movs	r3, #2
 800214e:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8002150:	2301      	movs	r3, #1
 8002152:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002154:	2300      	movs	r3, #0
 8002156:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002158:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800215c:	461a      	mov	r2, r3
 800215e:	2101      	movs	r1, #1
 8002160:	483c      	ldr	r0, [pc, #240]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 8002162:	f008 f9b5 	bl	800a4d0 <HAL_TIMEx_ConfigBreakInput>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800216c:	f7ff fc67 	bl	8001a3e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002170:	2360      	movs	r3, #96	@ 0x60
 8002172:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002178:	2300      	movs	r3, #0
 800217a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800217c:	2300      	movs	r3, #0
 800217e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800218c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002190:	2200      	movs	r2, #0
 8002192:	4619      	mov	r1, r3
 8002194:	482f      	ldr	r0, [pc, #188]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 8002196:	f006 ff41 	bl	800901c <HAL_TIM_PWM_ConfigChannel>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80021a0:	f7ff fc4d 	bl	8001a3e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021a8:	2204      	movs	r2, #4
 80021aa:	4619      	mov	r1, r3
 80021ac:	4829      	ldr	r0, [pc, #164]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 80021ae:	f006 ff35 	bl	800901c <HAL_TIM_PWM_ConfigChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80021b8:	f7ff fc41 	bl	8001a3e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021c0:	2208      	movs	r2, #8
 80021c2:	4619      	mov	r1, r3
 80021c4:	4823      	ldr	r0, [pc, #140]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 80021c6:	f006 ff29 	bl	800901c <HAL_TIM_PWM_ConfigChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 80021d0:	f7ff fc35 	bl	8001a3e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80021d4:	2370      	movs	r3, #112	@ 0x70
 80021d6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 7998;
 80021d8:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 80021dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021e2:	220c      	movs	r2, #12
 80021e4:	4619      	mov	r1, r3
 80021e6:	481b      	ldr	r0, [pc, #108]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 80021e8:	f006 ff18 	bl	800901c <HAL_TIM_PWM_ConfigChannel>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 80021f2:	f7ff fc24 	bl	8001a3e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 120;
 8002202:	2378      	movs	r3, #120	@ 0x78
 8002204:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800220a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800220c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002210:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 2;
 8002212:	2302      	movs	r3, #2
 8002214:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800221e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800222c:	2300      	movs	r3, #0
 800222e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002230:	463b      	mov	r3, r7
 8002232:	4619      	mov	r1, r3
 8002234:	4807      	ldr	r0, [pc, #28]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 8002236:	f008 f8bf 	bl	800a3b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM1_Init+0x1d0>
  {
    Error_Handler();
 8002240:	f7ff fbfd 	bl	8001a3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002244:	4803      	ldr	r0, [pc, #12]	@ (8002254 <MX_TIM1_Init+0x1e0>)
 8002246:	f000 f8e9 	bl	800241c <HAL_TIM_MspPostInit>

}
 800224a:	bf00      	nop
 800224c:	3778      	adds	r7, #120	@ 0x78
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000520 	.word	0x20000520
 8002258:	40012c00 	.word	0x40012c00

0800225c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08c      	sub	sp, #48	@ 0x30
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002262:	f107 0320 	add.w	r3, r7, #32
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002288:	4b26      	ldr	r3, [pc, #152]	@ (8002324 <MX_TIM4_Init+0xc8>)
 800228a:	4a27      	ldr	r2, [pc, #156]	@ (8002328 <MX_TIM4_Init+0xcc>)
 800228c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800228e:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <MX_TIM4_Init+0xc8>)
 8002290:	220f      	movs	r2, #15
 8002292:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002294:	4b23      	ldr	r3, [pc, #140]	@ (8002324 <MX_TIM4_Init+0xc8>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800229a:	4b22      	ldr	r3, [pc, #136]	@ (8002324 <MX_TIM4_Init+0xc8>)
 800229c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a2:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <MX_TIM4_Init+0xc8>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002324 <MX_TIM4_Init+0xc8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022ae:	481d      	ldr	r0, [pc, #116]	@ (8002324 <MX_TIM4_Init+0xc8>)
 80022b0:	f006 fab2 	bl	8008818 <HAL_TIM_Base_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80022ba:	f7ff fbc0 	bl	8001a3e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022c4:	f107 0320 	add.w	r3, r7, #32
 80022c8:	4619      	mov	r1, r3
 80022ca:	4816      	ldr	r0, [pc, #88]	@ (8002324 <MX_TIM4_Init+0xc8>)
 80022cc:	f006 ffba 	bl	8009244 <HAL_TIM_ConfigClockSource>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80022d6:	f7ff fbb2 	bl	8001a3e <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 10;
 80022e2:	230a      	movs	r3, #10
 80022e4:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 5;
 80022e6:	2305      	movs	r3, #5
 80022e8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 80022ea:	f107 0310 	add.w	r3, r7, #16
 80022ee:	4619      	mov	r1, r3
 80022f0:	480c      	ldr	r0, [pc, #48]	@ (8002324 <MX_TIM4_Init+0xc8>)
 80022f2:	f007 fd84 	bl	8009dfe <HAL_TIMEx_HallSensor_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 80022fc:	f7ff fb9f 	bl	8001a3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8002300:	2350      	movs	r3, #80	@ 0x50
 8002302:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	4619      	mov	r1, r3
 800230c:	4805      	ldr	r0, [pc, #20]	@ (8002324 <MX_TIM4_Init+0xc8>)
 800230e:	f007 ffd1 	bl	800a2b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8002318:	f7ff fb91 	bl	8001a3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800231c:	bf00      	nop
 800231e:	3730      	adds	r7, #48	@ 0x30
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	2000056c 	.word	0x2000056c
 8002328:	40000800 	.word	0x40000800

0800232c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	@ 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a30      	ldr	r2, [pc, #192]	@ (800240c <HAL_TIM_Base_MspInit+0xe0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d124      	bne.n	8002398 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800234e:	4b30      	ldr	r3, [pc, #192]	@ (8002410 <HAL_TIM_Base_MspInit+0xe4>)
 8002350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002352:	4a2f      	ldr	r2, [pc, #188]	@ (8002410 <HAL_TIM_Base_MspInit+0xe4>)
 8002354:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002358:	6613      	str	r3, [r2, #96]	@ 0x60
 800235a:	4b2d      	ldr	r3, [pc, #180]	@ (8002410 <HAL_TIM_Base_MspInit+0xe4>)
 800235c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	2018      	movs	r0, #24
 800236c:	f003 f961 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002370:	2018      	movs	r0, #24
 8002372:	f003 f978 	bl	8005666 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	2019      	movs	r0, #25
 800237c:	f003 f959 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002380:	2019      	movs	r0, #25
 8002382:	f003 f970 	bl	8005666 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	201b      	movs	r0, #27
 800238c:	f003 f951 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002390:	201b      	movs	r0, #27
 8002392:	f003 f968 	bl	8005666 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002396:	e035      	b.n	8002404 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM4)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1d      	ldr	r2, [pc, #116]	@ (8002414 <HAL_TIM_Base_MspInit+0xe8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d130      	bne.n	8002404 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002410 <HAL_TIM_Base_MspInit+0xe4>)
 80023a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002410 <HAL_TIM_Base_MspInit+0xe4>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ae:	4b18      	ldr	r3, [pc, #96]	@ (8002410 <HAL_TIM_Base_MspInit+0xe4>)
 80023b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ba:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <HAL_TIM_Base_MspInit+0xe4>)
 80023bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023be:	4a14      	ldr	r2, [pc, #80]	@ (8002410 <HAL_TIM_Base_MspInit+0xe4>)
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c6:	4b12      	ldr	r3, [pc, #72]	@ (8002410 <HAL_TIM_Base_MspInit+0xe4>)
 80023c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80023d2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80023d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023e4:	2302      	movs	r3, #2
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	480a      	ldr	r0, [pc, #40]	@ (8002418 <HAL_TIM_Base_MspInit+0xec>)
 80023f0:	f004 fb4c 	bl	8006a8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	201e      	movs	r0, #30
 80023fa:	f003 f91a 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023fe:	201e      	movs	r0, #30
 8002400:	f003 f931 	bl	8005666 <HAL_NVIC_EnableIRQ>
}
 8002404:	bf00      	nop
 8002406:	3728      	adds	r7, #40	@ 0x28
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40012c00 	.word	0x40012c00
 8002410:	40021000 	.word	0x40021000
 8002414:	40000800 	.word	0x40000800
 8002418:	48000400 	.word	0x48000400

0800241c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	@ 0x28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a29      	ldr	r2, [pc, #164]	@ (80024e0 <HAL_TIM_MspPostInit+0xc4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d14b      	bne.n	80024d6 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243e:	4b29      	ldr	r3, [pc, #164]	@ (80024e4 <HAL_TIM_MspPostInit+0xc8>)
 8002440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002442:	4a28      	ldr	r2, [pc, #160]	@ (80024e4 <HAL_TIM_MspPostInit+0xc8>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800244a:	4b26      	ldr	r3, [pc, #152]	@ (80024e4 <HAL_TIM_MspPostInit+0xc8>)
 800244c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	4b23      	ldr	r3, [pc, #140]	@ (80024e4 <HAL_TIM_MspPostInit+0xc8>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245a:	4a22      	ldr	r2, [pc, #136]	@ (80024e4 <HAL_TIM_MspPostInit+0xc8>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002462:	4b20      	ldr	r3, [pc, #128]	@ (80024e4 <HAL_TIM_MspPostInit+0xc8>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800246e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	2300      	movs	r3, #0
 800247e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002480:	2306      	movs	r3, #6
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	4619      	mov	r1, r3
 800248a:	4817      	ldr	r0, [pc, #92]	@ (80024e8 <HAL_TIM_MspPostInit+0xcc>)
 800248c:	f004 fafe 	bl	8006a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002490:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80024a2:	2304      	movs	r3, #4
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	4619      	mov	r1, r3
 80024ac:	480e      	ldr	r0, [pc, #56]	@ (80024e8 <HAL_TIM_MspPostInit+0xcc>)
 80024ae:	f004 faed 	bl	8006a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80024b2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80024b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	2300      	movs	r3, #0
 80024c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80024c4:	2306      	movs	r3, #6
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4619      	mov	r1, r3
 80024ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024d2:	f004 fadb 	bl	8006a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024d6:	bf00      	nop
 80024d8:	3728      	adds	r7, #40	@ 0x28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40012c00 	.word	0x40012c00
 80024e4:	40021000 	.word	0x40021000
 80024e8:	48000400 	.word	0x48000400

080024ec <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024f0:	4b22      	ldr	r3, [pc, #136]	@ (800257c <MX_USART3_UART_Init+0x90>)
 80024f2:	4a23      	ldr	r2, [pc, #140]	@ (8002580 <MX_USART3_UART_Init+0x94>)
 80024f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80024f6:	4b21      	ldr	r3, [pc, #132]	@ (800257c <MX_USART3_UART_Init+0x90>)
 80024f8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80024fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024fe:	4b1f      	ldr	r3, [pc, #124]	@ (800257c <MX_USART3_UART_Init+0x90>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002504:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <MX_USART3_UART_Init+0x90>)
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800250a:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <MX_USART3_UART_Init+0x90>)
 800250c:	2200      	movs	r2, #0
 800250e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002510:	4b1a      	ldr	r3, [pc, #104]	@ (800257c <MX_USART3_UART_Init+0x90>)
 8002512:	220c      	movs	r2, #12
 8002514:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002516:	4b19      	ldr	r3, [pc, #100]	@ (800257c <MX_USART3_UART_Init+0x90>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800251c:	4b17      	ldr	r3, [pc, #92]	@ (800257c <MX_USART3_UART_Init+0x90>)
 800251e:	2200      	movs	r2, #0
 8002520:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002522:	4b16      	ldr	r3, [pc, #88]	@ (800257c <MX_USART3_UART_Init+0x90>)
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002528:	4b14      	ldr	r3, [pc, #80]	@ (800257c <MX_USART3_UART_Init+0x90>)
 800252a:	2200      	movs	r2, #0
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800252e:	4b13      	ldr	r3, [pc, #76]	@ (800257c <MX_USART3_UART_Init+0x90>)
 8002530:	2200      	movs	r2, #0
 8002532:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002534:	4811      	ldr	r0, [pc, #68]	@ (800257c <MX_USART3_UART_Init+0x90>)
 8002536:	f008 f90e 	bl	800a756 <HAL_UART_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002540:	f7ff fa7d 	bl	8001a3e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002544:	2100      	movs	r1, #0
 8002546:	480d      	ldr	r0, [pc, #52]	@ (800257c <MX_USART3_UART_Init+0x90>)
 8002548:	f00a fa0f 	bl	800c96a <HAL_UARTEx_SetTxFifoThreshold>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002552:	f7ff fa74 	bl	8001a3e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002556:	2100      	movs	r1, #0
 8002558:	4808      	ldr	r0, [pc, #32]	@ (800257c <MX_USART3_UART_Init+0x90>)
 800255a:	f00a fa44 	bl	800c9e6 <HAL_UARTEx_SetRxFifoThreshold>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002564:	f7ff fa6b 	bl	8001a3e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002568:	4804      	ldr	r0, [pc, #16]	@ (800257c <MX_USART3_UART_Init+0x90>)
 800256a:	f00a f9c5 	bl	800c8f8 <HAL_UARTEx_DisableFifoMode>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002574:	f7ff fa63 	bl	8001a3e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	200005b8 	.word	0x200005b8
 8002580:	40004800 	.word	0x40004800

08002584 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b09a      	sub	sp, #104	@ 0x68
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	2244      	movs	r2, #68	@ 0x44
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f00c fa2c 	bl	800ea02 <memset>
  if(uartHandle->Instance==USART3)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a37      	ldr	r2, [pc, #220]	@ (800268c <HAL_UART_MspInit+0x108>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d167      	bne.n	8002684 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025b4:	2304      	movs	r3, #4
 80025b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025bc:	f107 0310 	add.w	r3, r7, #16
 80025c0:	4618      	mov	r0, r3
 80025c2:	f005 faf9 	bl	8007bb8 <HAL_RCCEx_PeriphCLKConfig>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025cc:	f7ff fa37 	bl	8001a3e <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002690 <HAL_UART_MspInit+0x10c>)
 80025d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002690 <HAL_UART_MspInit+0x10c>)
 80025d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025da:	6593      	str	r3, [r2, #88]	@ 0x58
 80025dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002690 <HAL_UART_MspInit+0x10c>)
 80025de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e8:	4b29      	ldr	r3, [pc, #164]	@ (8002690 <HAL_UART_MspInit+0x10c>)
 80025ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ec:	4a28      	ldr	r2, [pc, #160]	@ (8002690 <HAL_UART_MspInit+0x10c>)
 80025ee:	f043 0302 	orr.w	r3, r3, #2
 80025f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025f4:	4b26      	ldr	r3, [pc, #152]	@ (8002690 <HAL_UART_MspInit+0x10c>)
 80025f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002600:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002604:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002612:	2307      	movs	r3, #7
 8002614:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002616:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800261a:	4619      	mov	r1, r3
 800261c:	481d      	ldr	r0, [pc, #116]	@ (8002694 <HAL_UART_MspInit+0x110>)
 800261e:	f004 fa35 	bl	8006a8c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel1;
 8002622:	4b1d      	ldr	r3, [pc, #116]	@ (8002698 <HAL_UART_MspInit+0x114>)
 8002624:	4a1d      	ldr	r2, [pc, #116]	@ (800269c <HAL_UART_MspInit+0x118>)
 8002626:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002628:	4b1b      	ldr	r3, [pc, #108]	@ (8002698 <HAL_UART_MspInit+0x114>)
 800262a:	221d      	movs	r2, #29
 800262c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800262e:	4b1a      	ldr	r3, [pc, #104]	@ (8002698 <HAL_UART_MspInit+0x114>)
 8002630:	2210      	movs	r2, #16
 8002632:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002634:	4b18      	ldr	r3, [pc, #96]	@ (8002698 <HAL_UART_MspInit+0x114>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800263a:	4b17      	ldr	r3, [pc, #92]	@ (8002698 <HAL_UART_MspInit+0x114>)
 800263c:	2280      	movs	r2, #128	@ 0x80
 800263e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002640:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <HAL_UART_MspInit+0x114>)
 8002642:	2200      	movs	r2, #0
 8002644:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002646:	4b14      	ldr	r3, [pc, #80]	@ (8002698 <HAL_UART_MspInit+0x114>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800264c:	4b12      	ldr	r3, [pc, #72]	@ (8002698 <HAL_UART_MspInit+0x114>)
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002652:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <HAL_UART_MspInit+0x114>)
 8002654:	2200      	movs	r2, #0
 8002656:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002658:	480f      	ldr	r0, [pc, #60]	@ (8002698 <HAL_UART_MspInit+0x114>)
 800265a:	f003 fa93 	bl	8005b84 <HAL_DMA_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8002664:	f7ff f9eb 	bl	8001a3e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a0b      	ldr	r2, [pc, #44]	@ (8002698 <HAL_UART_MspInit+0x114>)
 800266c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800266e:	4a0a      	ldr	r2, [pc, #40]	@ (8002698 <HAL_UART_MspInit+0x114>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002674:	2200      	movs	r2, #0
 8002676:	2100      	movs	r1, #0
 8002678:	2027      	movs	r0, #39	@ 0x27
 800267a:	f002 ffda 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800267e:	2027      	movs	r0, #39	@ 0x27
 8002680:	f002 fff1 	bl	8005666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002684:	bf00      	nop
 8002686:	3768      	adds	r7, #104	@ 0x68
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40004800 	.word	0x40004800
 8002690:	40021000 	.word	0x40021000
 8002694:	48000400 	.word	0x48000400
 8002698:	2000064c 	.word	0x2000064c
 800269c:	40020008 	.word	0x40020008

080026a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026a0:	480d      	ldr	r0, [pc, #52]	@ (80026d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80026a4:	f7ff fcd4 	bl	8002050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a8:	480c      	ldr	r0, [pc, #48]	@ (80026dc <LoopForever+0x6>)
  ldr r1, =_edata
 80026aa:	490d      	ldr	r1, [pc, #52]	@ (80026e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026ac:	4a0d      	ldr	r2, [pc, #52]	@ (80026e4 <LoopForever+0xe>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026c0:	4c0a      	ldr	r4, [pc, #40]	@ (80026ec <LoopForever+0x16>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80026ce:	f00c f9f1 	bl	800eab4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026d2:	f7ff f8e1 	bl	8001898 <main>

080026d6 <LoopForever>:

LoopForever:
    b LoopForever
 80026d6:	e7fe      	b.n	80026d6 <LoopForever>
  ldr   r0, =_estack
 80026d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80026dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e0:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 80026e4:	08012900 	.word	0x08012900
  ldr r2, =_sbss
 80026e8:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 80026ec:	20000a8c 	.word	0x20000a8c

080026f0 <COMP4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026f0:	e7fe      	b.n	80026f0 <COMP4_IRQHandler>

080026f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026fc:	2003      	movs	r0, #3
 80026fe:	f002 ff8d 	bl	800561c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002702:	200f      	movs	r0, #15
 8002704:	f000 f80e 	bl	8002724 <HAL_InitTick>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	71fb      	strb	r3, [r7, #7]
 8002712:	e001      	b.n	8002718 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002714:	f7ff fb0a 	bl	8001d2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002718:	79fb      	ldrb	r3, [r7, #7]

}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002730:	4b16      	ldr	r3, [pc, #88]	@ (800278c <HAL_InitTick+0x68>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d022      	beq.n	800277e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002738:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <HAL_InitTick+0x6c>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b13      	ldr	r3, [pc, #76]	@ (800278c <HAL_InitTick+0x68>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002744:	fbb1 f3f3 	udiv	r3, r1, r3
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	4618      	mov	r0, r3
 800274e:	f002 ff98 	bl	8005682 <HAL_SYSTICK_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10f      	bne.n	8002778 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b0f      	cmp	r3, #15
 800275c:	d809      	bhi.n	8002772 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800275e:	2200      	movs	r2, #0
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	f04f 30ff 	mov.w	r0, #4294967295
 8002766:	f002 ff64 	bl	8005632 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800276a:	4a0a      	ldr	r2, [pc, #40]	@ (8002794 <HAL_InitTick+0x70>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	e007      	b.n	8002782 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
 8002776:	e004      	b.n	8002782 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
 800277c:	e001      	b.n	8002782 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002782:	7bfb      	ldrb	r3, [r7, #15]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000008 	.word	0x20000008
 8002790:	20000000 	.word	0x20000000
 8002794:	20000004 	.word	0x20000004

08002798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800279c:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <HAL_IncTick+0x1c>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b05      	ldr	r3, [pc, #20]	@ (80027b8 <HAL_IncTick+0x20>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4413      	add	r3, r2
 80027a6:	4a03      	ldr	r2, [pc, #12]	@ (80027b4 <HAL_IncTick+0x1c>)
 80027a8:	6013      	str	r3, [r2, #0]
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	200006ac 	.word	0x200006ac
 80027b8:	20000008 	.word	0x20000008

080027bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return uwTick;
 80027c0:	4b03      	ldr	r3, [pc, #12]	@ (80027d0 <HAL_GetTick+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	200006ac 	.word	0x200006ac

080027d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	609a      	str	r2, [r3, #8]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	609a      	str	r2, [r3, #8]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3360      	adds	r3, #96	@ 0x60
 800284e:	461a      	mov	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b08      	ldr	r3, [pc, #32]	@ (8002880 <LL_ADC_SetOffset+0x44>)
 800285e:	4013      	ands	r3, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	4313      	orrs	r3, r2
 800286c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002874:	bf00      	nop
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	03fff000 	.word	0x03fff000

08002884 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3360      	adds	r3, #96	@ 0x60
 8002892:	461a      	mov	r2, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3360      	adds	r3, #96	@ 0x60
 80028c0:	461a      	mov	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	431a      	orrs	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b087      	sub	sp, #28
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	3360      	adds	r3, #96	@ 0x60
 80028f6:	461a      	mov	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	431a      	orrs	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002910:	bf00      	nop
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3360      	adds	r3, #96	@ 0x60
 800292c:	461a      	mov	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	431a      	orrs	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002946:	bf00      	nop
 8002948:	371c      	adds	r7, #28
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	615a      	str	r2, [r3, #20]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800299e:	b480      	push	{r7}
 80029a0:	b087      	sub	sp, #28
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3330      	adds	r3, #48	@ 0x30
 80029ae:	461a      	mov	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	0a1b      	lsrs	r3, r3, #8
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	4413      	add	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	211f      	movs	r1, #31
 80029ca:	fa01 f303 	lsl.w	r3, r1, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	401a      	ands	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	0e9b      	lsrs	r3, r3, #26
 80029d6:	f003 011f 	and.w	r1, r3, #31
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	431a      	orrs	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029ea:	bf00      	nop
 80029ec:	371c      	adds	r7, #28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a02:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3314      	adds	r3, #20
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	0e5b      	lsrs	r3, r3, #25
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	4413      	add	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	0d1b      	lsrs	r3, r3, #20
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	2107      	movs	r1, #7
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	401a      	ands	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	0d1b      	lsrs	r3, r3, #20
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a60:	431a      	orrs	r2, r3
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	401a      	ands	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0318 	and.w	r3, r3, #24
 8002a96:	4908      	ldr	r1, [pc, #32]	@ (8002ab8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a98:	40d9      	lsrs	r1, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	400b      	ands	r3, r1
 8002a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	0007ffff 	.word	0x0007ffff

08002abc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 031f 	and.w	r3, r3, #31
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002b04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6093      	str	r3, [r2, #8]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b2c:	d101      	bne.n	8002b32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b7c:	d101      	bne.n	8002b82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ba0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ba4:	f043 0201 	orr.w	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bcc:	f043 0202 	orr.w	r2, r3, #2
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <LL_ADC_IsEnabled+0x18>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <LL_ADC_IsEnabled+0x1a>
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d101      	bne.n	8002c1e <LL_ADC_IsDisableOngoing+0x18>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <LL_ADC_IsDisableOngoing+0x1a>
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d101      	bne.n	8002c44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d101      	bne.n	8002c6a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b089      	sub	sp, #36	@ 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e167      	b.n	8002f62 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d109      	bne.n	8002cb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7fe fb19 	bl	80012d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff2d 	bl	8002b18 <LL_ADC_IsDeepPowerDownEnabled>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d004      	beq.n	8002cce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff13 	bl	8002af4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff ff48 	bl	8002b68 <LL_ADC_IsInternalRegulatorEnabled>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d115      	bne.n	8002d0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ff2c 	bl	8002b40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ce8:	4ba0      	ldr	r3, [pc, #640]	@ (8002f6c <HAL_ADC_Init+0x2f4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	099b      	lsrs	r3, r3, #6
 8002cee:	4aa0      	ldr	r2, [pc, #640]	@ (8002f70 <HAL_ADC_Init+0x2f8>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cfc:	e002      	b.n	8002d04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f9      	bne.n	8002cfe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff2a 	bl	8002b68 <LL_ADC_IsInternalRegulatorEnabled>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10d      	bne.n	8002d36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1e:	f043 0210 	orr.w	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ff76 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 8002d40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f040 8100 	bne.w	8002f50 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f040 80fc 	bne.w	8002f50 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d60:	f043 0202 	orr.w	r2, r3, #2
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff37 	bl	8002be0 <LL_ADC_IsEnabled>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d111      	bne.n	8002d9c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d78:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d7c:	f7ff ff30 	bl	8002be0 <LL_ADC_IsEnabled>
 8002d80:	4604      	mov	r4, r0
 8002d82:	487c      	ldr	r0, [pc, #496]	@ (8002f74 <HAL_ADC_Init+0x2fc>)
 8002d84:	f7ff ff2c 	bl	8002be0 <LL_ADC_IsEnabled>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4323      	orrs	r3, r4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4619      	mov	r1, r3
 8002d96:	4878      	ldr	r0, [pc, #480]	@ (8002f78 <HAL_ADC_Init+0x300>)
 8002d98:	f7ff fd1c 	bl	80027d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7f5b      	ldrb	r3, [r3, #29]
 8002da0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002da6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002dac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002db2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d106      	bne.n	8002dd8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	045b      	lsls	r3, r3, #17
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	4b60      	ldr	r3, [pc, #384]	@ (8002f7c <HAL_ADC_Init+0x304>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	69b9      	ldr	r1, [r7, #24]
 8002e04:	430b      	orrs	r3, r1
 8002e06:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ff15 	bl	8002c52 <LL_ADC_INJ_IsConversionOngoing>
 8002e28:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d16d      	bne.n	8002f0c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d16a      	bne.n	8002f0c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e3a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e42:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e52:	f023 0302 	bic.w	r3, r3, #2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	69b9      	ldr	r1, [r7, #24]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d017      	beq.n	8002e98 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e80:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6911      	ldr	r1, [r2, #16]
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002e96:	e013      	b.n	8002ec0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ea6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002eb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ebc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d118      	bne.n	8002efc <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ed4:	f023 0304 	bic.w	r3, r3, #4
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ee0:	4311      	orrs	r1, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ee6:	4311      	orrs	r1, r2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002eec:	430a      	orrs	r2, r1
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	611a      	str	r2, [r3, #16]
 8002efa:	e007      	b.n	8002f0c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d10c      	bne.n	8002f2e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	f023 010f 	bic.w	r1, r3, #15
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	1e5a      	subs	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f2c:	e007      	b.n	8002f3e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 020f 	bic.w	r2, r2, #15
 8002f3c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f42:	f023 0303 	bic.w	r3, r3, #3
 8002f46:	f043 0201 	orr.w	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f4e:	e007      	b.n	8002f60 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f54:	f043 0210 	orr.w	r2, r3, #16
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f60:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3724      	adds	r7, #36	@ 0x24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd90      	pop	{r4, r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	053e2d63 	.word	0x053e2d63
 8002f74:	50000100 	.word	0x50000100
 8002f78:	50000300 	.word	0x50000300
 8002f7c:	fff04007 	.word	0xfff04007

08002f80 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	@ 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002f88:	2300      	movs	r3, #0
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f9c:	4883      	ldr	r0, [pc, #524]	@ (80031ac <HAL_ADC_IRQHandler+0x22c>)
 8002f9e:	f7ff fd8d 	bl	8002abc <LL_ADC_GetMultimode>
 8002fa2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d017      	beq.n	8002fde <HAL_ADC_IRQHandler+0x5e>
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d012      	beq.n	8002fde <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d105      	bne.n	8002fd0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f001 fa9d 	bl	8004510 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d004      	beq.n	8002ff2 <HAL_ADC_IRQHandler+0x72>
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8085 	beq.w	8003108 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d07f      	beq.n	8003108 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003018:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fca7 	bl	8002978 <LL_ADC_REG_IsTriggerSourceSWStart>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d064      	beq.n	80030fa <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a5e      	ldr	r2, [pc, #376]	@ (80031b0 <HAL_ADC_IRQHandler+0x230>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d002      	beq.n	8003040 <HAL_ADC_IRQHandler+0xc0>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	e001      	b.n	8003044 <HAL_ADC_IRQHandler+0xc4>
 8003040:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	4293      	cmp	r3, r2
 800304a:	d008      	beq.n	800305e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b05      	cmp	r3, #5
 8003056:	d002      	beq.n	800305e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b09      	cmp	r3, #9
 800305c:	d104      	bne.n	8003068 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	623b      	str	r3, [r7, #32]
 8003066:	e00d      	b.n	8003084 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a50      	ldr	r2, [pc, #320]	@ (80031b0 <HAL_ADC_IRQHandler+0x230>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d002      	beq.n	8003078 <HAL_ADC_IRQHandler+0xf8>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	e001      	b.n	800307c <HAL_ADC_IRQHandler+0xfc>
 8003078:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800307c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d135      	bne.n	80030fa <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b08      	cmp	r3, #8
 800309a:	d12e      	bne.n	80030fa <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fdc3 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d11a      	bne.n	80030e2 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 020c 	bic.w	r2, r2, #12
 80030ba:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d112      	bne.n	80030fa <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d8:	f043 0201 	orr.w	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030e0:	e00b      	b.n	80030fa <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e6:	f043 0210 	orr.w	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f2:	f043 0201 	orr.w	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f95a 	bl	80033b4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	220c      	movs	r2, #12
 8003106:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <HAL_ADC_IRQHandler+0x19c>
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10b      	bne.n	8003134 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 809e 	beq.w	8003264 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8098 	beq.w	8003264 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003144:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fc50 	bl	80029f6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003156:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fc0b 	bl	8002978 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003162:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a11      	ldr	r2, [pc, #68]	@ (80031b0 <HAL_ADC_IRQHandler+0x230>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d002      	beq.n	8003174 <HAL_ADC_IRQHandler+0x1f4>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	e001      	b.n	8003178 <HAL_ADC_IRQHandler+0x1f8>
 8003174:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	4293      	cmp	r3, r2
 800317e:	d008      	beq.n	8003192 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2b06      	cmp	r3, #6
 800318a:	d002      	beq.n	8003192 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b07      	cmp	r3, #7
 8003190:	d104      	bne.n	800319c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	623b      	str	r3, [r7, #32]
 800319a:	e011      	b.n	80031c0 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a03      	ldr	r2, [pc, #12]	@ (80031b0 <HAL_ADC_IRQHandler+0x230>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d006      	beq.n	80031b4 <HAL_ADC_IRQHandler+0x234>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	e005      	b.n	80031b8 <HAL_ADC_IRQHandler+0x238>
 80031ac:	50000300 	.word	0x50000300
 80031b0:	50000100 	.word	0x50000100
 80031b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031b8:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d047      	beq.n	8003256 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <HAL_ADC_IRQHandler+0x260>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d03f      	beq.n	8003256 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d13a      	bne.n	8003256 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ea:	2b40      	cmp	r3, #64	@ 0x40
 80031ec:	d133      	bne.n	8003256 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d12e      	bne.n	8003256 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fd28 	bl	8002c52 <LL_ADC_INJ_IsConversionOngoing>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d11a      	bne.n	800323e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003216:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d112      	bne.n	8003256 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800323c:	e00b      	b.n	8003256 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003242:	f043 0210 	orr.w	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324e:	f043 0201 	orr.w	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f009 ffda 	bl	800d210 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2260      	movs	r2, #96	@ 0x60
 8003262:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800326a:	2b00      	cmp	r3, #0
 800326c:	d011      	beq.n	8003292 <HAL_ADC_IRQHandler+0x312>
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00c      	beq.n	8003292 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f89f 	bl	80033c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2280      	movs	r2, #128	@ 0x80
 8003290:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d012      	beq.n	80032c2 <HAL_ADC_IRQHandler+0x342>
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00d      	beq.n	80032c2 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f001 f918 	bl	80044e8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d012      	beq.n	80032f2 <HAL_ADC_IRQHandler+0x372>
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f001 f90a 	bl	80044fc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d036      	beq.n	800336a <HAL_ADC_IRQHandler+0x3ea>
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b00      	cmp	r3, #0
 8003304:	d031      	beq.n	800336a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800330e:	2301      	movs	r3, #1
 8003310:	627b      	str	r3, [r7, #36]	@ 0x24
 8003312:	e014      	b.n	800333e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800331a:	4825      	ldr	r0, [pc, #148]	@ (80033b0 <HAL_ADC_IRQHandler+0x430>)
 800331c:	f7ff fbdc 	bl	8002ad8 <LL_ADC_GetMultiDMATransfer>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003326:	2301      	movs	r3, #1
 8003328:	627b      	str	r3, [r7, #36]	@ 0x24
 800332a:	e008      	b.n	800333e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800333a:	2301      	movs	r3, #1
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003340:	2b01      	cmp	r3, #1
 8003342:	d10e      	bne.n	8003362 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003348:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003354:	f043 0202 	orr.w	r2, r3, #2
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f83d 	bl	80033dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2210      	movs	r2, #16
 8003368:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003370:	2b00      	cmp	r3, #0
 8003372:	d018      	beq.n	80033a6 <HAL_ADC_IRQHandler+0x426>
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800337a:	2b00      	cmp	r3, #0
 800337c:	d013      	beq.n	80033a6 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003382:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338e:	f043 0208 	orr.w	r2, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800339e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f001 f897 	bl	80044d4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80033a6:	bf00      	nop
 80033a8:	3728      	adds	r7, #40	@ 0x28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	50000300 	.word	0x50000300

080033b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b0b6      	sub	sp, #216	@ 0xd8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x22>
 800340e:	2302      	movs	r3, #2
 8003410:	e3c8      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x7b4>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fc04 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	f040 83ad 	bne.w	8003b86 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	6859      	ldr	r1, [r3, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	f7ff fab0 	bl	800299e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fbf2 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 8003448:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fbfe 	bl	8002c52 <LL_ADC_INJ_IsConversionOngoing>
 8003456:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800345a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800345e:	2b00      	cmp	r3, #0
 8003460:	f040 81d9 	bne.w	8003816 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003464:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003468:	2b00      	cmp	r3, #0
 800346a:	f040 81d4 	bne.w	8003816 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003476:	d10f      	bne.n	8003498 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2200      	movs	r2, #0
 8003482:	4619      	mov	r1, r3
 8003484:	f7ff faca 	bl	8002a1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fa5e 	bl	8002952 <LL_ADC_SetSamplingTimeCommonConfig>
 8003496:	e00e      	b.n	80034b6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	461a      	mov	r2, r3
 80034a6:	f7ff fab9 	bl	8002a1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fa4e 	bl	8002952 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	08db      	lsrs	r3, r3, #3
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d022      	beq.n	800351e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	6919      	ldr	r1, [r3, #16]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034e8:	f7ff f9a8 	bl	800283c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6919      	ldr	r1, [r3, #16]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	461a      	mov	r2, r3
 80034fa:	f7ff f9f4 	bl	80028e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800350a:	2b01      	cmp	r3, #1
 800350c:	d102      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x124>
 800350e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003512:	e000      	b.n	8003516 <HAL_ADC_ConfigChannel+0x126>
 8003514:	2300      	movs	r3, #0
 8003516:	461a      	mov	r2, r3
 8003518:	f7ff fa00 	bl	800291c <LL_ADC_SetOffsetSaturation>
 800351c:	e17b      	b.n	8003816 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff f9ad 	bl	8002884 <LL_ADC_GetOffsetChannel>
 800352a:	4603      	mov	r3, r0
 800352c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10a      	bne.n	800354a <HAL_ADC_ConfigChannel+0x15a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff f9a2 	bl	8002884 <LL_ADC_GetOffsetChannel>
 8003540:	4603      	mov	r3, r0
 8003542:	0e9b      	lsrs	r3, r3, #26
 8003544:	f003 021f 	and.w	r2, r3, #31
 8003548:	e01e      	b.n	8003588 <HAL_ADC_ConfigChannel+0x198>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff f997 	bl	8002884 <LL_ADC_GetOffsetChannel>
 8003556:	4603      	mov	r3, r0
 8003558:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003568:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800356c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003570:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003578:	2320      	movs	r3, #32
 800357a:	e004      	b.n	8003586 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800357c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003580:	fab3 f383 	clz	r3, r3
 8003584:	b2db      	uxtb	r3, r3
 8003586:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003590:	2b00      	cmp	r3, #0
 8003592:	d105      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x1b0>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	0e9b      	lsrs	r3, r3, #26
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	e018      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x1e2>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80035b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80035bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80035c4:	2320      	movs	r3, #32
 80035c6:	e004      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80035c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80035cc:	fab3 f383 	clz	r3, r3
 80035d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d106      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2200      	movs	r2, #0
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff f966 	bl	80028b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2101      	movs	r1, #1
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff f94a 	bl	8002884 <LL_ADC_GetOffsetChannel>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10a      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x220>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2101      	movs	r1, #1
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff f93f 	bl	8002884 <LL_ADC_GetOffsetChannel>
 8003606:	4603      	mov	r3, r0
 8003608:	0e9b      	lsrs	r3, r3, #26
 800360a:	f003 021f 	and.w	r2, r3, #31
 800360e:	e01e      	b.n	800364e <HAL_ADC_ConfigChannel+0x25e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2101      	movs	r1, #1
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff f934 	bl	8002884 <LL_ADC_GetOffsetChannel>
 800361c:	4603      	mov	r3, r0
 800361e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800362e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003632:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003636:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800363e:	2320      	movs	r3, #32
 8003640:	e004      	b.n	800364c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003656:	2b00      	cmp	r3, #0
 8003658:	d105      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x276>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	e018      	b.n	8003698 <HAL_ADC_ConfigChannel+0x2a8>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800367a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800367e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003682:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800368a:	2320      	movs	r3, #32
 800368c:	e004      	b.n	8003698 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800368e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003698:	429a      	cmp	r2, r3
 800369a:	d106      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2200      	movs	r2, #0
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff f903 	bl	80028b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2102      	movs	r1, #2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff f8e7 	bl	8002884 <LL_ADC_GetOffsetChannel>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x2e6>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2102      	movs	r1, #2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff f8dc 	bl	8002884 <LL_ADC_GetOffsetChannel>
 80036cc:	4603      	mov	r3, r0
 80036ce:	0e9b      	lsrs	r3, r3, #26
 80036d0:	f003 021f 	and.w	r2, r3, #31
 80036d4:	e01e      	b.n	8003714 <HAL_ADC_ConfigChannel+0x324>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2102      	movs	r1, #2
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff f8d1 	bl	8002884 <LL_ADC_GetOffsetChannel>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ec:	fa93 f3a3 	rbit	r3, r3
 80036f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80036f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80036fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003704:	2320      	movs	r3, #32
 8003706:	e004      	b.n	8003712 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003708:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800370c:	fab3 f383 	clz	r3, r3
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371c:	2b00      	cmp	r3, #0
 800371e:	d105      	bne.n	800372c <HAL_ADC_ConfigChannel+0x33c>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	0e9b      	lsrs	r3, r3, #26
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	e016      	b.n	800375a <HAL_ADC_ConfigChannel+0x36a>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003738:	fa93 f3a3 	rbit	r3, r3
 800373c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800373e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003740:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003744:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800374c:	2320      	movs	r3, #32
 800374e:	e004      	b.n	800375a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003750:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800375a:	429a      	cmp	r2, r3
 800375c:	d106      	bne.n	800376c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2200      	movs	r2, #0
 8003764:	2102      	movs	r1, #2
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff f8a2 	bl	80028b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2103      	movs	r1, #3
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff f886 	bl	8002884 <LL_ADC_GetOffsetChannel>
 8003778:	4603      	mov	r3, r0
 800377a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x3a8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2103      	movs	r1, #3
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff f87b 	bl	8002884 <LL_ADC_GetOffsetChannel>
 800378e:	4603      	mov	r3, r0
 8003790:	0e9b      	lsrs	r3, r3, #26
 8003792:	f003 021f 	and.w	r2, r3, #31
 8003796:	e017      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x3d8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2103      	movs	r1, #3
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff f870 	bl	8002884 <LL_ADC_GetOffsetChannel>
 80037a4:	4603      	mov	r3, r0
 80037a6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80037b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037b2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80037b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80037ba:	2320      	movs	r3, #32
 80037bc:	e003      	b.n	80037c6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80037be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037c0:	fab3 f383 	clz	r3, r3
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d105      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x3f0>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	0e9b      	lsrs	r3, r3, #26
 80037da:	f003 031f 	and.w	r3, r3, #31
 80037de:	e011      	b.n	8003804 <HAL_ADC_ConfigChannel+0x414>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80037ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80037f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80037f8:	2320      	movs	r3, #32
 80037fa:	e003      	b.n	8003804 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80037fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037fe:	fab3 f383 	clz	r3, r3
 8003802:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003804:	429a      	cmp	r2, r3
 8003806:	d106      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2200      	movs	r2, #0
 800380e:	2103      	movs	r1, #3
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff f84d 	bl	80028b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff f9e0 	bl	8002be0 <LL_ADC_IsEnabled>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	f040 8140 	bne.w	8003aa8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	6819      	ldr	r1, [r3, #0]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	461a      	mov	r2, r3
 8003836:	f7ff f91d 	bl	8002a74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	4a8f      	ldr	r2, [pc, #572]	@ (8003a7c <HAL_ADC_ConfigChannel+0x68c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	f040 8131 	bne.w	8003aa8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10b      	bne.n	800386e <HAL_ADC_ConfigChannel+0x47e>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	0e9b      	lsrs	r3, r3, #26
 800385c:	3301      	adds	r3, #1
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	2b09      	cmp	r3, #9
 8003864:	bf94      	ite	ls
 8003866:	2301      	movls	r3, #1
 8003868:	2300      	movhi	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	e019      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x4b2>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003876:	fa93 f3a3 	rbit	r3, r3
 800387a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800387c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800387e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003880:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003886:	2320      	movs	r3, #32
 8003888:	e003      	b.n	8003892 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800388a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	3301      	adds	r3, #1
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	2b09      	cmp	r3, #9
 800389a:	bf94      	ite	ls
 800389c:	2301      	movls	r3, #1
 800389e:	2300      	movhi	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d079      	beq.n	800399a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d107      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x4d2>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	0e9b      	lsrs	r3, r3, #26
 80038b8:	3301      	adds	r3, #1
 80038ba:	069b      	lsls	r3, r3, #26
 80038bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038c0:	e015      	b.n	80038ee <HAL_ADC_ConfigChannel+0x4fe>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80038d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038d2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80038d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80038da:	2320      	movs	r3, #32
 80038dc:	e003      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80038de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e0:	fab3 f383 	clz	r3, r3
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	3301      	adds	r3, #1
 80038e8:	069b      	lsls	r3, r3, #26
 80038ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d109      	bne.n	800390e <HAL_ADC_ConfigChannel+0x51e>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	0e9b      	lsrs	r3, r3, #26
 8003900:	3301      	adds	r3, #1
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	2101      	movs	r1, #1
 8003908:	fa01 f303 	lsl.w	r3, r1, r3
 800390c:	e017      	b.n	800393e <HAL_ADC_ConfigChannel+0x54e>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800391c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800391e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003920:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003926:	2320      	movs	r3, #32
 8003928:	e003      	b.n	8003932 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800392a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800392c:	fab3 f383 	clz	r3, r3
 8003930:	b2db      	uxtb	r3, r3
 8003932:	3301      	adds	r3, #1
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	2101      	movs	r1, #1
 800393a:	fa01 f303 	lsl.w	r3, r1, r3
 800393e:	ea42 0103 	orr.w	r1, r2, r3
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10a      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x574>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	0e9b      	lsrs	r3, r3, #26
 8003954:	3301      	adds	r3, #1
 8003956:	f003 021f 	and.w	r2, r3, #31
 800395a:	4613      	mov	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4413      	add	r3, r2
 8003960:	051b      	lsls	r3, r3, #20
 8003962:	e018      	b.n	8003996 <HAL_ADC_ConfigChannel+0x5a6>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003974:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800397c:	2320      	movs	r3, #32
 800397e:	e003      	b.n	8003988 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	3301      	adds	r3, #1
 800398a:	f003 021f 	and.w	r2, r3, #31
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003996:	430b      	orrs	r3, r1
 8003998:	e081      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d107      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x5c6>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	0e9b      	lsrs	r3, r3, #26
 80039ac:	3301      	adds	r3, #1
 80039ae:	069b      	lsls	r3, r3, #26
 80039b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039b4:	e015      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x5f2>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80039c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80039c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80039ce:	2320      	movs	r3, #32
 80039d0:	e003      	b.n	80039da <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80039d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d4:	fab3 f383 	clz	r3, r3
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	3301      	adds	r3, #1
 80039dc:	069b      	lsls	r3, r3, #26
 80039de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x612>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	0e9b      	lsrs	r3, r3, #26
 80039f4:	3301      	adds	r3, #1
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2101      	movs	r1, #1
 80039fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003a00:	e017      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x642>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	61fb      	str	r3, [r7, #28]
  return result;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003a1a:	2320      	movs	r3, #32
 8003a1c:	e003      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	3301      	adds	r3, #1
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	ea42 0103 	orr.w	r1, r2, r3
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10d      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x66e>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	0e9b      	lsrs	r3, r3, #26
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f003 021f 	and.w	r2, r3, #31
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	3b1e      	subs	r3, #30
 8003a56:	051b      	lsls	r3, r3, #20
 8003a58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a5c:	e01e      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x6ac>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	fa93 f3a3 	rbit	r3, r3
 8003a6a:	613b      	str	r3, [r7, #16]
  return result;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d104      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003a76:	2320      	movs	r3, #32
 8003a78:	e006      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x698>
 8003a7a:	bf00      	nop
 8003a7c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	3301      	adds	r3, #1
 8003a8a:	f003 021f 	and.w	r2, r3, #31
 8003a8e:	4613      	mov	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	4413      	add	r3, r2
 8003a94:	3b1e      	subs	r3, #30
 8003a96:	051b      	lsls	r3, r3, #20
 8003a98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a9c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f7fe ffba 	bl	8002a1c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4b3f      	ldr	r3, [pc, #252]	@ (8003bac <HAL_ADC_ConfigChannel+0x7bc>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d071      	beq.n	8003b98 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ab4:	483e      	ldr	r0, [pc, #248]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ab6:	f7fe feb3 	bl	8002820 <LL_ADC_GetCommonPathInternalCh>
 8003aba:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a3c      	ldr	r2, [pc, #240]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_ADC_ConfigChannel+0x6e2>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a3a      	ldr	r2, [pc, #232]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d127      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ad2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ad6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d121      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ae6:	d157      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ae8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003aec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003af0:	4619      	mov	r1, r3
 8003af2:	482f      	ldr	r0, [pc, #188]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003af4:	f7fe fe81 	bl	80027fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003af8:	4b30      	ldr	r3, [pc, #192]	@ (8003bbc <HAL_ADC_ConfigChannel+0x7cc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	099b      	lsrs	r3, r3, #6
 8003afe:	4a30      	ldr	r2, [pc, #192]	@ (8003bc0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003b00:	fba2 2303 	umull	r2, r3, r2, r3
 8003b04:	099b      	lsrs	r3, r3, #6
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	4613      	mov	r3, r2
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b12:	e002      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f9      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b20:	e03a      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a27      	ldr	r2, [pc, #156]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d113      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10d      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a22      	ldr	r2, [pc, #136]	@ (8003bc8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d02a      	beq.n	8003b98 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4818      	ldr	r0, [pc, #96]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003b4e:	f7fe fe54 	bl	80027fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b52:	e021      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a1c      	ldr	r2, [pc, #112]	@ (8003bcc <HAL_ADC_ConfigChannel+0x7dc>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d11c      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d116      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a16      	ldr	r2, [pc, #88]	@ (8003bc8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d011      	beq.n	8003b98 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	480c      	ldr	r0, [pc, #48]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003b80:	f7fe fe3b 	bl	80027fa <LL_ADC_SetCommonPathInternalCh>
 8003b84:	e008      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8a:	f043 0220 	orr.w	r2, r3, #32
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ba0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	37d8      	adds	r7, #216	@ 0xd8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	80080000 	.word	0x80080000
 8003bb0:	50000300 	.word	0x50000300
 8003bb4:	c3210000 	.word	0xc3210000
 8003bb8:	90c00010 	.word	0x90c00010
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	053e2d63 	.word	0x053e2d63
 8003bc4:	c7520000 	.word	0xc7520000
 8003bc8:	50000100 	.word	0x50000100
 8003bcc:	cb840000 	.word	0xcb840000

08003bd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe fffd 	bl	8002be0 <LL_ADC_IsEnabled>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d169      	bne.n	8003cc0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	4b36      	ldr	r3, [pc, #216]	@ (8003ccc <ADC_Enable+0xfc>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00d      	beq.n	8003c16 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfe:	f043 0210 	orr.w	r2, r3, #16
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c0a:	f043 0201 	orr.w	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e055      	b.n	8003cc2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe ffb8 	bl	8002b90 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c20:	482b      	ldr	r0, [pc, #172]	@ (8003cd0 <ADC_Enable+0x100>)
 8003c22:	f7fe fdfd 	bl	8002820 <LL_ADC_GetCommonPathInternalCh>
 8003c26:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003c28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d013      	beq.n	8003c58 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c30:	4b28      	ldr	r3, [pc, #160]	@ (8003cd4 <ADC_Enable+0x104>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	099b      	lsrs	r3, r3, #6
 8003c36:	4a28      	ldr	r2, [pc, #160]	@ (8003cd8 <ADC_Enable+0x108>)
 8003c38:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3c:	099b      	lsrs	r3, r3, #6
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	4613      	mov	r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c4a:	e002      	b.n	8003c52 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f9      	bne.n	8003c4c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c58:	f7fe fdb0 	bl	80027bc <HAL_GetTick>
 8003c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c5e:	e028      	b.n	8003cb2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe ffbb 	bl	8002be0 <LL_ADC_IsEnabled>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d104      	bne.n	8003c7a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe ff8b 	bl	8002b90 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c7a:	f7fe fd9f 	bl	80027bc <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d914      	bls.n	8003cb2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d00d      	beq.n	8003cb2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9a:	f043 0210 	orr.w	r2, r3, #16
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca6:	f043 0201 	orr.w	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e007      	b.n	8003cc2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d1cf      	bne.n	8003c60 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	8000003f 	.word	0x8000003f
 8003cd0:	50000300 	.word	0x50000300
 8003cd4:	20000000 	.word	0x20000000
 8003cd8:	053e2d63 	.word	0x053e2d63

08003cdc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe ff8c 	bl	8002c06 <LL_ADC_IsDisableOngoing>
 8003cee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe ff73 	bl	8002be0 <LL_ADC_IsEnabled>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d047      	beq.n	8003d90 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d144      	bne.n	8003d90 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 030d 	and.w	r3, r3, #13
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d10c      	bne.n	8003d2e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fe ff4d 	bl	8002bb8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2203      	movs	r2, #3
 8003d24:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d26:	f7fe fd49 	bl	80027bc <HAL_GetTick>
 8003d2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d2c:	e029      	b.n	8003d82 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d32:	f043 0210 	orr.w	r2, r3, #16
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d3e:	f043 0201 	orr.w	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e023      	b.n	8003d92 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d4a:	f7fe fd37 	bl	80027bc <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d914      	bls.n	8003d82 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00d      	beq.n	8003d82 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6a:	f043 0210 	orr.w	r2, r3, #16
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d76:	f043 0201 	orr.w	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e007      	b.n	8003d92 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1dc      	bne.n	8003d4a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <LL_ADC_SetCommonPathInternalCh>:
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	609a      	str	r2, [r3, #8]
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <LL_ADC_GetCommonPathInternalCh>:
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_ADC_SetOffset>:
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3360      	adds	r3, #96	@ 0x60
 8003dee:	461a      	mov	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4b08      	ldr	r3, [pc, #32]	@ (8003e20 <LL_ADC_SetOffset+0x44>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	601a      	str	r2, [r3, #0]
}
 8003e14:	bf00      	nop
 8003e16:	371c      	adds	r7, #28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	03fff000 	.word	0x03fff000

08003e24 <LL_ADC_GetOffsetChannel>:
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3360      	adds	r3, #96	@ 0x60
 8003e32:	461a      	mov	r2, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <LL_ADC_SetOffsetState>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3360      	adds	r3, #96	@ 0x60
 8003e60:	461a      	mov	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	601a      	str	r2, [r3, #0]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <LL_ADC_SetOffsetSign>:
{
 8003e86:	b480      	push	{r7}
 8003e88:	b087      	sub	sp, #28
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3360      	adds	r3, #96	@ 0x60
 8003e96:	461a      	mov	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	601a      	str	r2, [r3, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_ADC_SetOffsetSaturation>:
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3360      	adds	r3, #96	@ 0x60
 8003ecc:	461a      	mov	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	601a      	str	r2, [r3, #0]
}
 8003ee6:	bf00      	nop
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	615a      	str	r2, [r3, #20]
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <LL_ADC_INJ_GetTrigAuto>:
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <LL_ADC_SetChannelSamplingTime>:
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	3314      	adds	r3, #20
 8003f44:	461a      	mov	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	0e5b      	lsrs	r3, r3, #25
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	4413      	add	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	0d1b      	lsrs	r3, r3, #20
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2107      	movs	r1, #7
 8003f62:	fa01 f303 	lsl.w	r3, r1, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	401a      	ands	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	0d1b      	lsrs	r3, r3, #20
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	fa01 f303 	lsl.w	r3, r1, r3
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	601a      	str	r2, [r3, #0]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <LL_ADC_SetChannelSingleDiff>:
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	401a      	ands	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f003 0318 	and.w	r3, r3, #24
 8003fae:	4908      	ldr	r1, [pc, #32]	@ (8003fd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003fb0:	40d9      	lsrs	r1, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	400b      	ands	r3, r1
 8003fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	0007ffff 	.word	0x0007ffff

08003fd4 <LL_ADC_GetMultimode>:
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 031f 	and.w	r3, r3, #31
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <LL_ADC_IsEnabled>:
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <LL_ADC_IsEnabled+0x18>
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <LL_ADC_IsEnabled+0x1a>
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <LL_ADC_StartCalibration>:
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004028:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004032:	4313      	orrs	r3, r2
 8004034:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	609a      	str	r2, [r3, #8]
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <LL_ADC_IsCalibrationOnGoing>:
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800405c:	d101      	bne.n	8004062 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <LL_ADC_REG_IsConversionOngoing>:
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b04      	cmp	r3, #4
 8004082:	d101      	bne.n	8004088 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <LL_ADC_INJ_StartConversion>:
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80040aa:	f043 0208 	orr.w	r2, r3, #8
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	609a      	str	r2, [r3, #8]
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <LL_ADC_INJ_IsConversionOngoing>:
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d101      	bne.n	80040d6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_ADCEx_Calibration_Start+0x1c>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e04d      	b.n	800419c <HAL_ADCEx_Calibration_Start+0xb8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff fde7 	bl	8003cdc <ADC_Disable>
 800410e:	4603      	mov	r3, r0
 8004110:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d136      	bne.n	8004186 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004120:	f023 0302 	bic.w	r3, r3, #2
 8004124:	f043 0202 	orr.w	r2, r3, #2
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6839      	ldr	r1, [r7, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff ff6f 	bl	8004016 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004138:	e014      	b.n	8004164 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	3301      	adds	r3, #1
 800413e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4a18      	ldr	r2, [pc, #96]	@ (80041a4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d90d      	bls.n	8004164 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414c:	f023 0312 	bic.w	r3, r3, #18
 8004150:	f043 0210 	orr.w	r2, r3, #16
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e01b      	b.n	800419c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff ff6d 	bl	8004048 <LL_ADC_IsCalibrationOnGoing>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e2      	bne.n	800413a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004178:	f023 0303 	bic.w	r3, r3, #3
 800417c:	f043 0201 	orr.w	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004184:	e005      	b.n	8004192 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418a:	f043 0210 	orr.w	r2, r3, #16
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800419a:	7bfb      	ldrb	r3, [r7, #15]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	0004de01 	.word	0x0004de01

080041a8 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041b0:	4853      	ldr	r0, [pc, #332]	@ (8004300 <HAL_ADCEx_InjectedStart+0x158>)
 80041b2:	f7ff ff0f 	bl	8003fd4 <LL_ADC_GetMultimode>
 80041b6:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff ff7e 	bl	80040be <LL_ADC_INJ_IsConversionOngoing>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 80041c8:	2302      	movs	r3, #2
 80041ca:	e094      	b.n	80042f6 <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041d6:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041de:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d107      	bne.n	80041fc <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f0:	f043 0220 	orr.w	r2, r3, #32
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e07c      	b.n	80042f6 <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_ADCEx_InjectedStart+0x62>
 8004206:	2302      	movs	r3, #2
 8004208:	e075      	b.n	80042f6 <HAL_ADCEx_InjectedStart+0x14e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff fcdc 	bl	8003bd0 <ADC_Enable>
 8004218:	4603      	mov	r3, r0
 800421a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d164      	bne.n	80042ec <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d006      	beq.n	800423c <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004232:	f023 0208 	bic.w	r2, r3, #8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	661a      	str	r2, [r3, #96]	@ 0x60
 800423a:	e002      	b.n	8004242 <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004246:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2a      	ldr	r2, [pc, #168]	@ (8004304 <HAL_ADCEx_InjectedStart+0x15c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d002      	beq.n	8004266 <HAL_ADCEx_InjectedStart+0xbe>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	e001      	b.n	800426a <HAL_ADCEx_InjectedStart+0xc2>
 8004266:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	4293      	cmp	r3, r2
 8004270:	d002      	beq.n	8004278 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d105      	bne.n	8004284 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800427c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2260      	movs	r2, #96	@ 0x60
 800428a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1a      	ldr	r2, [pc, #104]	@ (8004304 <HAL_ADCEx_InjectedStart+0x15c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d002      	beq.n	80042a4 <HAL_ADCEx_InjectedStart+0xfc>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	e001      	b.n	80042a8 <HAL_ADCEx_InjectedStart+0x100>
 80042a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d008      	beq.n	80042c2 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b06      	cmp	r3, #6
 80042ba:	d002      	beq.n	80042c2 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b07      	cmp	r3, #7
 80042c0:	d10d      	bne.n	80042de <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff fe26 	bl	8003f18 <LL_ADC_INJ_GetTrigAuto>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d110      	bne.n	80042f4 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fedd 	bl	8004096 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80042dc:	e00a      	b.n	80042f4 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042ea:	e003      	b.n	80042f4 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	50000300 	.word	0x50000300
 8004304:	50000100 	.word	0x50000100

08004308 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004310:	486e      	ldr	r0, [pc, #440]	@ (80044cc <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8004312:	f7ff fe5f 	bl	8003fd4 <LL_ADC_GetMultimode>
 8004316:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff fece 	bl	80040be <LL_ADC_INJ_IsConversionOngoing>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
 800432a:	e0ca      	b.n	80044c2 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004336:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d107      	bne.n	800435c <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004350:	f043 0220 	orr.w	r2, r3, #32
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0b2      	b.n	80044c2 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_ADCEx_InjectedStart_IT+0x62>
 8004366:	2302      	movs	r3, #2
 8004368:	e0ab      	b.n	80044c2 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff fc2c 	bl	8003bd0 <ADC_Enable>
 8004378:	4603      	mov	r3, r0
 800437a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f040 809a 	bne.w	80044b8 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d006      	beq.n	800439e <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004394:	f023 0208 	bic.w	r2, r3, #8
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	661a      	str	r2, [r3, #96]	@ 0x60
 800439c:	e002      	b.n	80043a4 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a44      	ldr	r2, [pc, #272]	@ (80044d0 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d002      	beq.n	80043c8 <HAL_ADCEx_InjectedStart_IT+0xc0>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	e001      	b.n	80043cc <HAL_ADCEx_InjectedStart_IT+0xc4>
 80043c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d002      	beq.n	80043da <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d105      	bne.n	80043e6 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043de:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2260      	movs	r2, #96	@ 0x60
 80043ec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004412:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	2b08      	cmp	r3, #8
 800441a:	d110      	bne.n	800443e <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0220 	bic.w	r2, r2, #32
 800442a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800443a:	605a      	str	r2, [r3, #4]
          break;
 800443c:	e010      	b.n	8004460 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800444c:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0220 	orr.w	r2, r2, #32
 800445c:	605a      	str	r2, [r3, #4]
          break;
 800445e:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1a      	ldr	r2, [pc, #104]	@ (80044d0 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d002      	beq.n	8004470 <HAL_ADCEx_InjectedStart_IT+0x168>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	e001      	b.n	8004474 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8004470:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	4293      	cmp	r3, r2
 800447a:	d008      	beq.n	800448e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b06      	cmp	r3, #6
 8004486:	d002      	beq.n	800448e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2b07      	cmp	r3, #7
 800448c:	d10d      	bne.n	80044aa <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fd40 	bl	8003f18 <LL_ADC_INJ_GetTrigAuto>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d110      	bne.n	80044c0 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fdf7 	bl	8004096 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80044a8:	e00a      	b.n	80044c0 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044b6:	e003      	b.n	80044c0 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	50000300 	.word	0x50000300
 80044d0:	50000100 	.word	0x50000100

080044d4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b0b6      	sub	sp, #216	@ 0xd8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004544:	2b01      	cmp	r3, #1
 8004546:	d102      	bne.n	800454e <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004548:	2302      	movs	r3, #2
 800454a:	f000 bcb5 	b.w	8004eb8 <HAL_ADCEx_InjectedConfigChannel+0x994>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004562:	2b01      	cmp	r3, #1
 8004564:	d130      	bne.n	80045c8 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b09      	cmp	r3, #9
 800456c:	d179      	bne.n	8004662 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004572:	2b00      	cmp	r3, #0
 8004574:	d010      	beq.n	8004598 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	0e9b      	lsrs	r3, r3, #26
 800457c:	025b      	lsls	r3, r3, #9
 800457e:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004586:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800458a:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004596:	e007      	b.n	80045a8 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	0e9b      	lsrs	r3, r3, #26
 800459e:	025b      	lsls	r3, r3, #9
 80045a0:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80045a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045ae:	4b84      	ldr	r3, [pc, #528]	@ (80047c0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80045ba:	430b      	orrs	r3, r1
 80045bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80045c4:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80045c6:	e04c      	b.n	8004662 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d11d      	bne.n	800460c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	6a1a      	ldr	r2, [r3, #32]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00d      	beq.n	8004602 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f0:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80045f4:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004600:	e004      	b.n	800460c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	3b01      	subs	r3, #1
 8004608:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	0e9b      	lsrs	r3, r3, #26
 8004612:	f003 021f 	and.w	r2, r3, #31
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004630:	1e5a      	subs	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800463a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004652:	4b5b      	ldr	r3, [pc, #364]	@ (80047c0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	430b      	orrs	r3, r1
 8004660:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff fd29 	bl	80040be <LL_ADC_INJ_IsConversionOngoing>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d124      	bne.n	80046bc <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004678:	2b00      	cmp	r3, #0
 800467a:	d112      	bne.n	80046a2 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800468c:	055a      	lsls	r2, r3, #21
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004694:	051b      	lsls	r3, r3, #20
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	60da      	str	r2, [r3, #12]
 80046a0:	e00c      	b.n	80046bc <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80046b2:	055a      	lsls	r2, r3, #21
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fcd5 	bl	8004070 <LL_ADC_REG_IsConversionOngoing>
 80046c6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff fcf5 	bl	80040be <LL_ADC_INJ_IsConversionOngoing>
 80046d4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f040 822e 	bne.w	8004b3e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f040 8229 	bne.w	8004b3e <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d116      	bne.n	800472a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004702:	2b01      	cmp	r3, #1
 8004704:	d108      	bne.n	8004718 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8004714:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004716:	e01f      	b.n	8004758 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004726:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004728:	e016      	b.n	8004758 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004730:	2b01      	cmp	r3, #1
 8004732:	d109      	bne.n	8004748 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004738:	f043 0220 	orr.w	r2, r3, #32
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004746:	e007      	b.n	8004758 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004756:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800475e:	2b01      	cmp	r3, #1
 8004760:	d110      	bne.n	8004784 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004774:	430b      	orrs	r3, r1
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0202 	orr.w	r2, r2, #2
 8004780:	611a      	str	r2, [r3, #16]
 8004782:	e007      	b.n	8004794 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0202 	bic.w	r2, r2, #2
 8004792:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800479c:	d112      	bne.n	80047c4 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2200      	movs	r2, #0
 80047a8:	4619      	mov	r1, r3
 80047aa:	f7ff fbc3 	bl	8003f34 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff fb9b 	bl	8003ef2 <LL_ADC_SetSamplingTimeCommonConfig>
 80047bc:	e011      	b.n	80047e2 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80047be:	bf00      	nop
 80047c0:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80047d0:	461a      	mov	r2, r3
 80047d2:	f7ff fbaf 	bl	8003f34 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2100      	movs	r1, #0
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff fb88 	bl	8003ef2 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	08db      	lsrs	r3, r3, #3
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b04      	cmp	r3, #4
 8004802:	d022      	beq.n	800484a <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6919      	ldr	r1, [r3, #16]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004814:	f7ff fae2 	bl	8003ddc <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	6919      	ldr	r1, [r3, #16]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	461a      	mov	r2, r3
 8004826:	f7ff fb2e 	bl	8003e86 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004836:	2b01      	cmp	r3, #1
 8004838:	d102      	bne.n	8004840 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 800483a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800483e:	e000      	b.n	8004842 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004840:	2300      	movs	r3, #0
 8004842:	461a      	mov	r2, r3
 8004844:	f7ff fb3a 	bl	8003ebc <LL_ADC_SetOffsetSaturation>
 8004848:	e179      	b.n	8004b3e <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff fae7 	bl	8003e24 <LL_ADC_GetOffsetChannel>
 8004856:	4603      	mov	r3, r0
 8004858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2100      	movs	r1, #0
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff fadc 	bl	8003e24 <LL_ADC_GetOffsetChannel>
 800486c:	4603      	mov	r3, r0
 800486e:	0e9b      	lsrs	r3, r3, #26
 8004870:	f003 021f 	and.w	r2, r3, #31
 8004874:	e01e      	b.n	80048b4 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2100      	movs	r1, #0
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff fad1 	bl	8003e24 <LL_ADC_GetOffsetChannel>
 8004882:	4603      	mov	r3, r0
 8004884:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800488c:	fa93 f3a3 	rbit	r3, r3
 8004890:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004894:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004898:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800489c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 80048a4:	2320      	movs	r3, #32
 80048a6:	e004      	b.n	80048b2 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 80048a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048ac:	fab3 f383 	clz	r3, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d105      	bne.n	80048cc <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	0e9b      	lsrs	r3, r3, #26
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	e018      	b.n	80048fe <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80048e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80048e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80048f0:	2320      	movs	r3, #32
 80048f2:	e004      	b.n	80048fe <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80048f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048f8:	fab3 f383 	clz	r3, r3
 80048fc:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048fe:	429a      	cmp	r2, r3
 8004900:	d106      	bne.n	8004910 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2200      	movs	r2, #0
 8004908:	2100      	movs	r1, #0
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff faa0 	bl	8003e50 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2101      	movs	r1, #1
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fa84 	bl	8003e24 <LL_ADC_GetOffsetChannel>
 800491c:	4603      	mov	r3, r0
 800491e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10a      	bne.n	800493c <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2101      	movs	r1, #1
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fa79 	bl	8003e24 <LL_ADC_GetOffsetChannel>
 8004932:	4603      	mov	r3, r0
 8004934:	0e9b      	lsrs	r3, r3, #26
 8004936:	f003 021f 	and.w	r2, r3, #31
 800493a:	e01e      	b.n	800497a <HAL_ADCEx_InjectedConfigChannel+0x456>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2101      	movs	r1, #1
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fa6e 	bl	8003e24 <LL_ADC_GetOffsetChannel>
 8004948:	4603      	mov	r3, r0
 800494a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800495a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800495e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004962:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 800496a:	2320      	movs	r3, #32
 800496c:	e004      	b.n	8004978 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 800496e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004982:	2b00      	cmp	r3, #0
 8004984:	d105      	bne.n	8004992 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	0e9b      	lsrs	r3, r3, #26
 800498c:	f003 031f 	and.w	r3, r3, #31
 8004990:	e018      	b.n	80049c4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800499e:	fa93 f3a3 	rbit	r3, r3
 80049a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80049a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80049aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80049ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80049b6:	2320      	movs	r3, #32
 80049b8:	e004      	b.n	80049c4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80049ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049be:	fab3 f383 	clz	r3, r3
 80049c2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d106      	bne.n	80049d6 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2200      	movs	r2, #0
 80049ce:	2101      	movs	r1, #1
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fa3d 	bl	8003e50 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2102      	movs	r1, #2
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff fa21 	bl	8003e24 <LL_ADC_GetOffsetChannel>
 80049e2:	4603      	mov	r3, r0
 80049e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2102      	movs	r1, #2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fa16 	bl	8003e24 <LL_ADC_GetOffsetChannel>
 80049f8:	4603      	mov	r3, r0
 80049fa:	0e9b      	lsrs	r3, r3, #26
 80049fc:	f003 021f 	and.w	r2, r3, #31
 8004a00:	e01e      	b.n	8004a40 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2102      	movs	r1, #2
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff fa0b 	bl	8003e24 <LL_ADC_GetOffsetChannel>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a18:	fa93 f3a3 	rbit	r3, r3
 8004a1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004a30:	2320      	movs	r3, #32
 8004a32:	e004      	b.n	8004a3e <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004a34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a38:	fab3 f383 	clz	r3, r3
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d105      	bne.n	8004a58 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	0e9b      	lsrs	r3, r3, #26
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	e014      	b.n	8004a82 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004a66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004a74:	2320      	movs	r3, #32
 8004a76:	e004      	b.n	8004a82 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004a78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a7c:	fab3 f383 	clz	r3, r3
 8004a80:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d106      	bne.n	8004a94 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2102      	movs	r1, #2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff f9de 	bl	8003e50 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2103      	movs	r1, #3
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff f9c2 	bl	8003e24 <LL_ADC_GetOffsetChannel>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10a      	bne.n	8004ac0 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2103      	movs	r1, #3
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff f9b7 	bl	8003e24 <LL_ADC_GetOffsetChannel>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	0e9b      	lsrs	r3, r3, #26
 8004aba:	f003 021f 	and.w	r2, r3, #31
 8004abe:	e017      	b.n	8004af0 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2103      	movs	r1, #3
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff f9ac 	bl	8003e24 <LL_ADC_GetOffsetChannel>
 8004acc:	4603      	mov	r3, r0
 8004ace:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ad2:	fa93 f3a3 	rbit	r3, r3
 8004ad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ada:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004adc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004ae2:	2320      	movs	r3, #32
 8004ae4:	e003      	b.n	8004aee <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004ae6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ae8:	fab3 f383 	clz	r3, r3
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d105      	bne.n	8004b08 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	0e9b      	lsrs	r3, r3, #26
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	e011      	b.n	8004b2c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b10:	fa93 f3a3 	rbit	r3, r3
 8004b14:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004b16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b18:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004b1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004b20:	2320      	movs	r3, #32
 8004b22:	e003      	b.n	8004b2c <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004b24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b26:	fab3 f383 	clz	r3, r3
 8004b2a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d106      	bne.n	8004b3e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2200      	movs	r2, #0
 8004b36:	2103      	movs	r1, #3
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff f989 	bl	8003e50 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff fa54 	bl	8003ff0 <LL_ADC_IsEnabled>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f040 8140 	bne.w	8004dd0 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	6819      	ldr	r1, [r3, #0]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f7ff fa15 	bl	8003f8c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	4a8f      	ldr	r2, [pc, #572]	@ (8004da4 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	f040 8131 	bne.w	8004dd0 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10b      	bne.n	8004b96 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	0e9b      	lsrs	r3, r3, #26
 8004b84:	3301      	adds	r3, #1
 8004b86:	f003 031f 	and.w	r3, r3, #31
 8004b8a:	2b09      	cmp	r3, #9
 8004b8c:	bf94      	ite	ls
 8004b8e:	2301      	movls	r3, #1
 8004b90:	2300      	movhi	r3, #0
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	e019      	b.n	8004bca <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b9e:	fa93 f3a3 	rbit	r3, r3
 8004ba2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004ba8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004bae:	2320      	movs	r3, #32
 8004bb0:	e003      	b.n	8004bba <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004bb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bb4:	fab3 f383 	clz	r3, r3
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	3301      	adds	r3, #1
 8004bbc:	f003 031f 	and.w	r3, r3, #31
 8004bc0:	2b09      	cmp	r3, #9
 8004bc2:	bf94      	ite	ls
 8004bc4:	2301      	movls	r3, #1
 8004bc6:	2300      	movhi	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d079      	beq.n	8004cc2 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d107      	bne.n	8004bea <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	0e9b      	lsrs	r3, r3, #26
 8004be0:	3301      	adds	r3, #1
 8004be2:	069b      	lsls	r3, r3, #26
 8004be4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004be8:	e015      	b.n	8004c16 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bf2:	fa93 f3a3 	rbit	r3, r3
 8004bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bfa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004c02:	2320      	movs	r3, #32
 8004c04:	e003      	b.n	8004c0e <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004c06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c08:	fab3 f383 	clz	r3, r3
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	069b      	lsls	r3, r3, #26
 8004c12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d109      	bne.n	8004c36 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	0e9b      	lsrs	r3, r3, #26
 8004c28:	3301      	adds	r3, #1
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	2101      	movs	r1, #1
 8004c30:	fa01 f303 	lsl.w	r3, r1, r3
 8004c34:	e017      	b.n	8004c66 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c3e:	fa93 f3a3 	rbit	r3, r3
 8004c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c46:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004c4e:	2320      	movs	r3, #32
 8004c50:	e003      	b.n	8004c5a <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004c52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c54:	fab3 f383 	clz	r3, r3
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	2101      	movs	r1, #1
 8004c62:	fa01 f303 	lsl.w	r3, r1, r3
 8004c66:	ea42 0103 	orr.w	r1, r2, r3
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10a      	bne.n	8004c8c <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	0e9b      	lsrs	r3, r3, #26
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	f003 021f 	and.w	r2, r3, #31
 8004c82:	4613      	mov	r3, r2
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	4413      	add	r3, r2
 8004c88:	051b      	lsls	r3, r3, #20
 8004c8a:	e018      	b.n	8004cbe <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c94:	fa93 f3a3 	rbit	r3, r3
 8004c98:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004ca4:	2320      	movs	r3, #32
 8004ca6:	e003      	b.n	8004cb0 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004caa:	fab3 f383 	clz	r3, r3
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	f003 021f 	and.w	r2, r3, #31
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	4413      	add	r3, r2
 8004cbc:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	e081      	b.n	8004dc6 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d107      	bne.n	8004cde <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	0e9b      	lsrs	r3, r3, #26
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	069b      	lsls	r3, r3, #26
 8004cd8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cdc:	e015      	b.n	8004d0a <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce6:	fa93 f3a3 	rbit	r3, r3
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004cf6:	2320      	movs	r3, #32
 8004cf8:	e003      	b.n	8004d02 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cfc:	fab3 f383 	clz	r3, r3
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	3301      	adds	r3, #1
 8004d04:	069b      	lsls	r3, r3, #26
 8004d06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	0e9b      	lsrs	r3, r3, #26
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	2101      	movs	r1, #1
 8004d24:	fa01 f303 	lsl.w	r3, r1, r3
 8004d28:	e017      	b.n	8004d5a <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	fa93 f3a3 	rbit	r3, r3
 8004d36:	61bb      	str	r3, [r7, #24]
  return result;
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004d42:	2320      	movs	r3, #32
 8004d44:	e003      	b.n	8004d4e <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	fab3 f383 	clz	r3, r3
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	3301      	adds	r3, #1
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	2101      	movs	r1, #1
 8004d56:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5a:	ea42 0103 	orr.w	r1, r2, r3
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10d      	bne.n	8004d86 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	0e9b      	lsrs	r3, r3, #26
 8004d70:	3301      	adds	r3, #1
 8004d72:	f003 021f 	and.w	r2, r3, #31
 8004d76:	4613      	mov	r3, r2
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3b1e      	subs	r3, #30
 8004d7e:	051b      	lsls	r3, r3, #20
 8004d80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d84:	e01e      	b.n	8004dc4 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	fa93 f3a3 	rbit	r3, r3
 8004d92:	60fb      	str	r3, [r7, #12]
  return result;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d104      	bne.n	8004da8 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004d9e:	2320      	movs	r3, #32
 8004da0:	e006      	b.n	8004db0 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004da2:	bf00      	nop
 8004da4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	fab3 f383 	clz	r3, r3
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	3301      	adds	r3, #1
 8004db2:	f003 021f 	and.w	r2, r3, #31
 8004db6:	4613      	mov	r3, r2
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	4413      	add	r3, r2
 8004dbc:	3b1e      	subs	r3, #30
 8004dbe:	051b      	lsls	r3, r3, #20
 8004dc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dc4:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f7ff f8b2 	bl	8003f34 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8004ec0 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d067      	beq.n	8004eac <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ddc:	4839      	ldr	r0, [pc, #228]	@ (8004ec4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004dde:	f7fe ffef 	bl	8003dc0 <LL_ADC_GetCommonPathInternalCh>
 8004de2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a37      	ldr	r2, [pc, #220]	@ (8004ec8 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d004      	beq.n	8004dfa <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a35      	ldr	r2, [pc, #212]	@ (8004ecc <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d127      	bne.n	8004e4a <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004dfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004dfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d121      	bne.n	8004e4a <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e0e:	d14d      	bne.n	8004eac <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e18:	4619      	mov	r1, r3
 8004e1a:	482a      	ldr	r0, [pc, #168]	@ (8004ec4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004e1c:	f7fe ffbd 	bl	8003d9a <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004e20:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed0 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	099b      	lsrs	r3, r3, #6
 8004e26:	4a2b      	ldr	r2, [pc, #172]	@ (8004ed4 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004e28:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2c:	099a      	lsrs	r2, r3, #6
 8004e2e:	4613      	mov	r3, r2
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004e38:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004e3a:	e002      	b.n	8004e42 <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1f9      	bne.n	8004e3c <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e48:	e030      	b.n	8004eac <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a22      	ldr	r2, [pc, #136]	@ (8004ed8 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d113      	bne.n	8004e7c <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10d      	bne.n	8004e7c <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1d      	ldr	r2, [pc, #116]	@ (8004edc <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d020      	beq.n	8004eac <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e72:	4619      	mov	r1, r3
 8004e74:	4813      	ldr	r0, [pc, #76]	@ (8004ec4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004e76:	f7fe ff90 	bl	8003d9a <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e7a:	e017      	b.n	8004eac <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a17      	ldr	r2, [pc, #92]	@ (8004ee0 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d112      	bne.n	8004eac <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10c      	bne.n	8004eac <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a11      	ldr	r2, [pc, #68]	@ (8004edc <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d007      	beq.n	8004eac <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ea0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4807      	ldr	r0, [pc, #28]	@ (8004ec4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004ea8:	f7fe ff77 	bl	8003d9a <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004eb4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	37d8      	adds	r7, #216	@ 0xd8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	80080000 	.word	0x80080000
 8004ec4:	50000300 	.word	0x50000300
 8004ec8:	c3210000 	.word	0xc3210000
 8004ecc:	90c00010 	.word	0x90c00010
 8004ed0:	20000000 	.word	0x20000000
 8004ed4:	053e2d63 	.word	0x053e2d63
 8004ed8:	c7520000 	.word	0xc7520000
 8004edc:	50000100 	.word	0x50000100
 8004ee0:	cb840000 	.word	0xcb840000

08004ee4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004ee4:	b590      	push	{r4, r7, lr}
 8004ee6:	b0a1      	sub	sp, #132	@ 0x84
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e08b      	b.n	800501a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004f0e:	2300      	movs	r3, #0
 8004f10:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f1a:	d102      	bne.n	8004f22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f1c:	4b41      	ldr	r3, [pc, #260]	@ (8005024 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	e001      	b.n	8004f26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f22:	2300      	movs	r3, #0
 8004f24:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10b      	bne.n	8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f30:	f043 0220 	orr.w	r2, r3, #32
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e06a      	b.n	800501a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff f892 	bl	8004070 <LL_ADC_REG_IsConversionOngoing>
 8004f4c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff f88c 	bl	8004070 <LL_ADC_REG_IsConversionOngoing>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d14c      	bne.n	8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004f5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d149      	bne.n	8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f64:	4b30      	ldr	r3, [pc, #192]	@ (8005028 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004f66:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d028      	beq.n	8004fc2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	6859      	ldr	r1, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f82:	035b      	lsls	r3, r3, #13
 8004f84:	430b      	orrs	r3, r1
 8004f86:	431a      	orrs	r2, r3
 8004f88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f8c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004f90:	f7ff f82e 	bl	8003ff0 <LL_ADC_IsEnabled>
 8004f94:	4604      	mov	r4, r0
 8004f96:	4823      	ldr	r0, [pc, #140]	@ (8005024 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f98:	f7ff f82a 	bl	8003ff0 <LL_ADC_IsEnabled>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	4323      	orrs	r3, r4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d133      	bne.n	800500c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fa4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004fac:	f023 030f 	bic.w	r3, r3, #15
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	6811      	ldr	r1, [r2, #0]
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	6892      	ldr	r2, [r2, #8]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fbe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fc0:	e024      	b.n	800500c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004fc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fcc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fce:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004fd2:	f7ff f80d 	bl	8003ff0 <LL_ADC_IsEnabled>
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	4812      	ldr	r0, [pc, #72]	@ (8005024 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004fda:	f7ff f809 	bl	8003ff0 <LL_ADC_IsEnabled>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	4323      	orrs	r3, r4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d112      	bne.n	800500c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004fe6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004fee:	f023 030f 	bic.w	r3, r3, #15
 8004ff2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004ff4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ff6:	e009      	b.n	800500c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ffc:	f043 0220 	orr.w	r2, r3, #32
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800500a:	e000      	b.n	800500e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800500c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005016:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800501a:	4618      	mov	r0, r3
 800501c:	3784      	adds	r7, #132	@ 0x84
 800501e:	46bd      	mov	sp, r7
 8005020:	bd90      	pop	{r4, r7, pc}
 8005022:	bf00      	nop
 8005024:	50000100 	.word	0x50000100
 8005028:	50000300 	.word	0x50000300

0800502c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005034:	4b05      	ldr	r3, [pc, #20]	@ (800504c <LL_EXTI_EnableIT_0_31+0x20>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	4904      	ldr	r1, [pc, #16]	@ (800504c <LL_EXTI_EnableIT_0_31+0x20>)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4313      	orrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40010400 	.word	0x40010400

08005050 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005058:	4b06      	ldr	r3, [pc, #24]	@ (8005074 <LL_EXTI_DisableIT_0_31+0x24>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	43db      	mvns	r3, r3
 8005060:	4904      	ldr	r1, [pc, #16]	@ (8005074 <LL_EXTI_DisableIT_0_31+0x24>)
 8005062:	4013      	ands	r3, r2
 8005064:	600b      	str	r3, [r1, #0]
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40010400 	.word	0x40010400

08005078 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005080:	4b05      	ldr	r3, [pc, #20]	@ (8005098 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	4904      	ldr	r1, [pc, #16]	@ (8005098 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4313      	orrs	r3, r2
 800508a:	604b      	str	r3, [r1, #4]

}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	40010400 	.word	0x40010400

0800509c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80050a4:	4b06      	ldr	r3, [pc, #24]	@ (80050c0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	43db      	mvns	r3, r3
 80050ac:	4904      	ldr	r1, [pc, #16]	@ (80050c0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	604b      	str	r3, [r1, #4]
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40010400 	.word	0x40010400

080050c4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80050cc:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	4904      	ldr	r1, [pc, #16]	@ (80050e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	608b      	str	r3, [r1, #8]

}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	40010400 	.word	0x40010400

080050e8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80050f0:	4b06      	ldr	r3, [pc, #24]	@ (800510c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	43db      	mvns	r3, r3
 80050f8:	4904      	ldr	r1, [pc, #16]	@ (800510c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80050fa:	4013      	ands	r3, r2
 80050fc:	608b      	str	r3, [r1, #8]

}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40010400 	.word	0x40010400

08005110 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005118:	4b05      	ldr	r3, [pc, #20]	@ (8005130 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	4904      	ldr	r1, [pc, #16]	@ (8005130 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4313      	orrs	r3, r2
 8005122:	60cb      	str	r3, [r1, #12]
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	40010400 	.word	0x40010400

08005134 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800513c:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	43db      	mvns	r3, r3
 8005144:	4904      	ldr	r1, [pc, #16]	@ (8005158 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005146:	4013      	ands	r3, r2
 8005148:	60cb      	str	r3, [r1, #12]
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40010400 	.word	0x40010400

0800515c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8005164:	4b07      	ldr	r3, [pc, #28]	@ (8005184 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4013      	ands	r3, r2
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	429a      	cmp	r2, r3
 8005170:	d101      	bne.n	8005176 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40010400 	.word	0x40010400

08005188 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005190:	4a04      	ldr	r2, [pc, #16]	@ (80051a4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6153      	str	r3, [r2, #20]
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40010400 	.word	0x40010400

080051a8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d102      	bne.n	80051c4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	77fb      	strb	r3, [r7, #31]
 80051c2:	e0bc      	b.n	800533e <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051d2:	d102      	bne.n	80051da <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	77fb      	strb	r3, [r7, #31]
 80051d8:	e0b1      	b.n	800533e <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	7f5b      	ldrb	r3, [r3, #29]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d108      	bne.n	80051f6 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7fc f967 	bl	80014c4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005200:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	4b48      	ldr	r3, [pc, #288]	@ (8005348 <HAL_COMP_Init+0x1a0>)
 8005228:	4013      	ands	r3, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	6979      	ldr	r1, [r7, #20]
 8005230:	430b      	orrs	r3, r1
 8005232:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d016      	beq.n	8005270 <HAL_COMP_Init+0xc8>
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d113      	bne.n	8005270 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005248:	4b40      	ldr	r3, [pc, #256]	@ (800534c <HAL_COMP_Init+0x1a4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	099b      	lsrs	r3, r3, #6
 800524e:	4a40      	ldr	r2, [pc, #256]	@ (8005350 <HAL_COMP_Init+0x1a8>)
 8005250:	fba2 2303 	umull	r2, r3, r2, r3
 8005254:	099b      	lsrs	r3, r3, #6
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005262:	e002      	b.n	800526a <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3b01      	subs	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f9      	bne.n	8005264 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a37      	ldr	r2, [pc, #220]	@ (8005354 <HAL_COMP_Init+0x1ac>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d012      	beq.n	80052a0 <HAL_COMP_Init+0xf8>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a36      	ldr	r2, [pc, #216]	@ (8005358 <HAL_COMP_Init+0x1b0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00a      	beq.n	800529a <HAL_COMP_Init+0xf2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a34      	ldr	r2, [pc, #208]	@ (800535c <HAL_COMP_Init+0x1b4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d102      	bne.n	8005294 <HAL_COMP_Init+0xec>
 800528e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005292:	e007      	b.n	80052a4 <HAL_COMP_Init+0xfc>
 8005294:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005298:	e004      	b.n	80052a4 <HAL_COMP_Init+0xfc>
 800529a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800529e:	e001      	b.n	80052a4 <HAL_COMP_Init+0xfc>
 80052a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80052a4:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d037      	beq.n	8005322 <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80052be:	6938      	ldr	r0, [r7, #16]
 80052c0:	f7ff ff00 	bl	80050c4 <LL_EXTI_EnableRisingTrig_0_31>
 80052c4:	e002      	b.n	80052cc <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80052c6:	6938      	ldr	r0, [r7, #16]
 80052c8:	f7ff ff0e 	bl	80050e8 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80052d8:	6938      	ldr	r0, [r7, #16]
 80052da:	f7ff ff19 	bl	8005110 <LL_EXTI_EnableFallingTrig_0_31>
 80052de:	e002      	b.n	80052e6 <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80052e0:	6938      	ldr	r0, [r7, #16]
 80052e2:	f7ff ff27 	bl	8005134 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 80052e6:	6938      	ldr	r0, [r7, #16]
 80052e8:	f7ff ff4e 	bl	8005188 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 80052f8:	6938      	ldr	r0, [r7, #16]
 80052fa:	f7ff febd 	bl	8005078 <LL_EXTI_EnableEvent_0_31>
 80052fe:	e002      	b.n	8005306 <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005300:	6938      	ldr	r0, [r7, #16]
 8005302:	f7ff fecb 	bl	800509c <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 8005312:	6938      	ldr	r0, [r7, #16]
 8005314:	f7ff fe8a 	bl	800502c <LL_EXTI_EnableIT_0_31>
 8005318:	e009      	b.n	800532e <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 800531a:	6938      	ldr	r0, [r7, #16]
 800531c:	f7ff fe98 	bl	8005050 <LL_EXTI_DisableIT_0_31>
 8005320:	e005      	b.n	800532e <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 8005322:	6938      	ldr	r0, [r7, #16]
 8005324:	f7ff feba 	bl	800509c <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8005328:	6938      	ldr	r0, [r7, #16]
 800532a:	f7ff fe91 	bl	8005050 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	7f5b      	ldrb	r3, [r3, #29]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d102      	bne.n	800533e <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800533e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3720      	adds	r7, #32
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	ff007e0f 	.word	0xff007e0f
 800534c:	20000000 	.word	0x20000000
 8005350:	053e2d63 	.word	0x053e2d63
 8005354:	40010200 	.word	0x40010200
 8005358:	40010204 	.word	0x40010204
 800535c:	40010208 	.word	0x40010208

08005360 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005368:	2300      	movs	r3, #0
 800536a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	73fb      	strb	r3, [r7, #15]
 800537a:	e02e      	b.n	80053da <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005386:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800538a:	d102      	bne.n	8005392 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	73fb      	strb	r3, [r7, #15]
 8005390:	e023      	b.n	80053da <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	7f5b      	ldrb	r3, [r3, #29]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	d11c      	bne.n	80053d6 <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 80053b2:	4b0d      	ldr	r3, [pc, #52]	@ (80053e8 <HAL_COMP_Start+0x88>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a0d      	ldr	r2, [pc, #52]	@ (80053ec <HAL_COMP_Start+0x8c>)
 80053b8:	fba2 2303 	umull	r2, r3, r2, r3
 80053bc:	0cda      	lsrs	r2, r3, #19
 80053be:	4613      	mov	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80053c6:	e002      	b.n	80053ce <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f9      	bne.n	80053c8 <HAL_COMP_Start+0x68>
 80053d4:	e001      	b.n	80053da <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80053da:	7bfb      	ldrb	r3, [r7, #15]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	20000000 	.word	0x20000000
 80053ec:	431bde83 	.word	0x431bde83

080053f0 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a17      	ldr	r2, [pc, #92]	@ (800545c <HAL_COMP_IRQHandler+0x6c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d012      	beq.n	8005428 <HAL_COMP_IRQHandler+0x38>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a16      	ldr	r2, [pc, #88]	@ (8005460 <HAL_COMP_IRQHandler+0x70>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00a      	beq.n	8005422 <HAL_COMP_IRQHandler+0x32>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a14      	ldr	r2, [pc, #80]	@ (8005464 <HAL_COMP_IRQHandler+0x74>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d102      	bne.n	800541c <HAL_COMP_IRQHandler+0x2c>
 8005416:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800541a:	e007      	b.n	800542c <HAL_COMP_IRQHandler+0x3c>
 800541c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005420:	e004      	b.n	800542c <HAL_COMP_IRQHandler+0x3c>
 8005422:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005426:	e001      	b.n	800542c <HAL_COMP_IRQHandler+0x3c>
 8005428:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800542c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8005432:	68b8      	ldr	r0, [r7, #8]
 8005434:	f7ff fe92 	bl	800515c <LL_EXTI_IsActiveFlag_0_31>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 800543e:	2301      	movs	r3, #1
 8005440:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <HAL_COMP_IRQHandler+0x64>
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
    }
#else
    LL_EXTI_ClearFlag_0_31(exti_line);
 8005448:	68b8      	ldr	r0, [r7, #8]
 800544a:	f7ff fe9d 	bl	8005188 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f80a 	bl	8005468 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8005454:	bf00      	nop
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40010200 	.word	0x40010200
 8005460:	40010204 	.word	0x40010204
 8005464:	40010208 	.word	0x40010208

08005468 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800548c:	4b0c      	ldr	r3, [pc, #48]	@ (80054c0 <__NVIC_SetPriorityGrouping+0x44>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005498:	4013      	ands	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80054a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054ae:	4a04      	ldr	r2, [pc, #16]	@ (80054c0 <__NVIC_SetPriorityGrouping+0x44>)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	60d3      	str	r3, [r2, #12]
}
 80054b4:	bf00      	nop
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	e000ed00 	.word	0xe000ed00

080054c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054c8:	4b04      	ldr	r3, [pc, #16]	@ (80054dc <__NVIC_GetPriorityGrouping+0x18>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	0a1b      	lsrs	r3, r3, #8
 80054ce:	f003 0307 	and.w	r3, r3, #7
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	e000ed00 	.word	0xe000ed00

080054e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	db0b      	blt.n	800550a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	f003 021f 	and.w	r2, r3, #31
 80054f8:	4907      	ldr	r1, [pc, #28]	@ (8005518 <__NVIC_EnableIRQ+0x38>)
 80054fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	2001      	movs	r0, #1
 8005502:	fa00 f202 	lsl.w	r2, r0, r2
 8005506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	e000e100 	.word	0xe000e100

0800551c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	6039      	str	r1, [r7, #0]
 8005526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552c:	2b00      	cmp	r3, #0
 800552e:	db0a      	blt.n	8005546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	b2da      	uxtb	r2, r3
 8005534:	490c      	ldr	r1, [pc, #48]	@ (8005568 <__NVIC_SetPriority+0x4c>)
 8005536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553a:	0112      	lsls	r2, r2, #4
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	440b      	add	r3, r1
 8005540:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005544:	e00a      	b.n	800555c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	b2da      	uxtb	r2, r3
 800554a:	4908      	ldr	r1, [pc, #32]	@ (800556c <__NVIC_SetPriority+0x50>)
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	3b04      	subs	r3, #4
 8005554:	0112      	lsls	r2, r2, #4
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	440b      	add	r3, r1
 800555a:	761a      	strb	r2, [r3, #24]
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	e000e100 	.word	0xe000e100
 800556c:	e000ed00 	.word	0xe000ed00

08005570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005570:	b480      	push	{r7}
 8005572:	b089      	sub	sp, #36	@ 0x24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f1c3 0307 	rsb	r3, r3, #7
 800558a:	2b04      	cmp	r3, #4
 800558c:	bf28      	it	cs
 800558e:	2304      	movcs	r3, #4
 8005590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3304      	adds	r3, #4
 8005596:	2b06      	cmp	r3, #6
 8005598:	d902      	bls.n	80055a0 <NVIC_EncodePriority+0x30>
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	3b03      	subs	r3, #3
 800559e:	e000      	b.n	80055a2 <NVIC_EncodePriority+0x32>
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a4:	f04f 32ff 	mov.w	r2, #4294967295
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	43da      	mvns	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	401a      	ands	r2, r3
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055b8:	f04f 31ff 	mov.w	r1, #4294967295
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	fa01 f303 	lsl.w	r3, r1, r3
 80055c2:	43d9      	mvns	r1, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055c8:	4313      	orrs	r3, r2
         );
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3724      	adds	r7, #36	@ 0x24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
	...

080055d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055e8:	d301      	bcc.n	80055ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055ea:	2301      	movs	r3, #1
 80055ec:	e00f      	b.n	800560e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005618 <SysTick_Config+0x40>)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055f6:	210f      	movs	r1, #15
 80055f8:	f04f 30ff 	mov.w	r0, #4294967295
 80055fc:	f7ff ff8e 	bl	800551c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005600:	4b05      	ldr	r3, [pc, #20]	@ (8005618 <SysTick_Config+0x40>)
 8005602:	2200      	movs	r2, #0
 8005604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005606:	4b04      	ldr	r3, [pc, #16]	@ (8005618 <SysTick_Config+0x40>)
 8005608:	2207      	movs	r2, #7
 800560a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	e000e010 	.word	0xe000e010

0800561c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff ff29 	bl	800547c <__NVIC_SetPriorityGrouping>
}
 800562a:	bf00      	nop
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b086      	sub	sp, #24
 8005636:	af00      	add	r7, sp, #0
 8005638:	4603      	mov	r3, r0
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	607a      	str	r2, [r7, #4]
 800563e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005640:	f7ff ff40 	bl	80054c4 <__NVIC_GetPriorityGrouping>
 8005644:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	6978      	ldr	r0, [r7, #20]
 800564c:	f7ff ff90 	bl	8005570 <NVIC_EncodePriority>
 8005650:	4602      	mov	r2, r0
 8005652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005656:	4611      	mov	r1, r2
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff ff5f 	bl	800551c <__NVIC_SetPriority>
}
 800565e:	bf00      	nop
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	4603      	mov	r3, r0
 800566e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff ff33 	bl	80054e0 <__NVIC_EnableIRQ>
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b082      	sub	sp, #8
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff ffa4 	bl	80055d8 <SysTick_Config>
 8005690:	4603      	mov	r3, r0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e014      	b.n	80056d6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	791b      	ldrb	r3, [r3, #4]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d105      	bne.n	80056c2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7fb ff77 	bl	80015b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2202      	movs	r2, #2
 80056c6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e056      	b.n	80057a2 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	795b      	ldrb	r3, [r3, #5]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_DAC_Start+0x20>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e050      	b.n	80057a2 <HAL_DAC_Start+0xc2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2202      	movs	r2, #2
 800570a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6819      	ldr	r1, [r3, #0]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2201      	movs	r2, #1
 800571a:	409a      	lsls	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005724:	4b22      	ldr	r3, [pc, #136]	@ (80057b0 <HAL_DAC_Start+0xd0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	099b      	lsrs	r3, r3, #6
 800572a:	4a22      	ldr	r2, [pc, #136]	@ (80057b4 <HAL_DAC_Start+0xd4>)
 800572c:	fba2 2303 	umull	r2, r3, r2, r3
 8005730:	099b      	lsrs	r3, r3, #6
 8005732:	3301      	adds	r3, #1
 8005734:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005736:	e002      	b.n	800573e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3b01      	subs	r3, #1
 800573c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f9      	bne.n	8005738 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10f      	bne.n	800576a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005754:	2b02      	cmp	r3, #2
 8005756:	d11d      	bne.n	8005794 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	605a      	str	r2, [r3, #4]
 8005768:	e014      	b.n	8005794 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	2102      	movs	r1, #2
 800577c:	fa01 f303 	lsl.w	r3, r1, r3
 8005780:	429a      	cmp	r2, r3
 8005782:	d107      	bne.n	8005794 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0202 	orr.w	r2, r2, #2
 8005792:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000000 	.word	0x20000000
 80057b4:	053e2d63 	.word	0x053e2d63

080057b8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e018      	b.n	8005806 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d105      	bne.n	80057f2 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4413      	add	r3, r2
 80057ec:	3308      	adds	r3, #8
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	e004      	b.n	80057fc <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4413      	add	r3, r2
 80057f8:	3314      	adds	r3, #20
 80057fa:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	461a      	mov	r2, r3
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08a      	sub	sp, #40	@ 0x28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <HAL_DAC_ConfigChannel+0x1c>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e19e      	b.n	8005b72 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	795b      	ldrb	r3, [r3, #5]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_DAC_ConfigChannel+0x2c>
 800583c:	2302      	movs	r3, #2
 800583e:	e198      	b.n	8005b72 <HAL_DAC_ConfigChannel+0x35e>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2202      	movs	r2, #2
 800584a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2b04      	cmp	r3, #4
 8005852:	d17a      	bne.n	800594a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005854:	f7fc ffb2 	bl	80027bc <HAL_GetTick>
 8005858:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d13d      	bne.n	80058dc <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005860:	e018      	b.n	8005894 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005862:	f7fc ffab 	bl	80027bc <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	d911      	bls.n	8005894 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005876:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f043 0208 	orr.w	r2, r3, #8
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2203      	movs	r2, #3
 800588e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e16e      	b.n	8005b72 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800589a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1df      	bne.n	8005862 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80058ac:	e020      	b.n	80058f0 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80058ae:	f7fc ff85 	bl	80027bc <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d90f      	bls.n	80058dc <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	da0a      	bge.n	80058dc <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f043 0208 	orr.w	r2, r3, #8
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2203      	movs	r2, #3
 80058d6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e14a      	b.n	8005b72 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	dbe3      	blt.n	80058ae <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058ee:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005900:	fa01 f303 	lsl.w	r3, r1, r3
 8005904:	43db      	mvns	r3, r3
 8005906:	ea02 0103 	and.w	r1, r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	409a      	lsls	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f003 0310 	and.w	r3, r3, #16
 800592a:	21ff      	movs	r1, #255	@ 0xff
 800592c:	fa01 f303 	lsl.w	r3, r1, r3
 8005930:	43db      	mvns	r3, r3
 8005932:	ea02 0103 	and.w	r1, r2, r3
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	409a      	lsls	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d11d      	bne.n	800598e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005958:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f003 0310 	and.w	r3, r3, #16
 8005960:	221f      	movs	r2, #31
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	43db      	mvns	r3, r3
 8005968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800596a:	4013      	ands	r3, r2
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f003 0310 	and.w	r3, r3, #16
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005982:	4313      	orrs	r3, r2
 8005984:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800598c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005994:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f003 0310 	and.w	r3, r3, #16
 800599c:	2207      	movs	r2, #7
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	43db      	mvns	r3, r3
 80059a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059a6:	4013      	ands	r3, r2
 80059a8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d102      	bne.n	80059b8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80059b2:	2300      	movs	r3, #0
 80059b4:	623b      	str	r3, [r7, #32]
 80059b6:	e00f      	b.n	80059d8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d102      	bne.n	80059c6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80059c0:	2301      	movs	r3, #1
 80059c2:	623b      	str	r3, [r7, #32]
 80059c4:	e008      	b.n	80059d8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d102      	bne.n	80059d4 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80059ce:	2301      	movs	r3, #1
 80059d0:	623b      	str	r3, [r7, #32]
 80059d2:	e001      	b.n	80059d8 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80059d4:	2300      	movs	r3, #0
 80059d6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	6a3a      	ldr	r2, [r7, #32]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	43db      	mvns	r3, r3
 80059f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059fa:	4013      	ands	r3, r2
 80059fc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	791b      	ldrb	r3, [r3, #4]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d102      	bne.n	8005a0c <HAL_DAC_ConfigChannel+0x1f8>
 8005a06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a0a:	e000      	b.n	8005a0e <HAL_DAC_ConfigChannel+0x1fa>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f003 0310 	and.w	r3, r3, #16
 8005a1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	43db      	mvns	r3, r3
 8005a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a26:	4013      	ands	r3, r2
 8005a28:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	795b      	ldrb	r3, [r3, #5]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d102      	bne.n	8005a38 <HAL_DAC_ConfigChannel+0x224>
 8005a32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a36:	e000      	b.n	8005a3a <HAL_DAC_ConfigChannel+0x226>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a42:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005a46:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d114      	bne.n	8005a7a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005a50:	f002 f834 	bl	8007abc <HAL_RCC_GetHCLKFreq>
 8005a54:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4a48      	ldr	r2, [pc, #288]	@ (8005b7c <HAL_DAC_ConfigChannel+0x368>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d904      	bls.n	8005a68 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a66:	e00f      	b.n	8005a88 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	4a45      	ldr	r2, [pc, #276]	@ (8005b80 <HAL_DAC_ConfigChannel+0x36c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d90a      	bls.n	8005a86 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a78:	e006      	b.n	8005a88 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a80:	4313      	orrs	r3, r2
 8005a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a84:	e000      	b.n	8005a88 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005a86:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a96:	4313      	orrs	r3, r2
 8005a98:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aa0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6819      	ldr	r1, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f003 0310 	and.w	r3, r3, #16
 8005aae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	43da      	mvns	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	400a      	ands	r2, r1
 8005abe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f003 0310 	and.w	r3, r3, #16
 8005ace:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	43db      	mvns	r3, r3
 8005ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ada:	4013      	ands	r3, r2
 8005adc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f003 0310 	and.w	r3, r3, #16
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af2:	4313      	orrs	r3, r2
 8005af4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005afc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6819      	ldr	r1, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f003 0310 	and.w	r3, r3, #16
 8005b0a:	22c0      	movs	r2, #192	@ 0xc0
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	43da      	mvns	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	400a      	ands	r2, r1
 8005b18:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	089b      	lsrs	r3, r3, #2
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	089b      	lsrs	r3, r3, #2
 8005b2c:	021b      	lsls	r3, r3, #8
 8005b2e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005b48:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4c:	43db      	mvns	r3, r3
 8005b4e:	ea02 0103 	and.w	r1, r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	409a      	lsls	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2201      	movs	r2, #1
 8005b68:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005b70:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3728      	adds	r7, #40	@ 0x28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	09896800 	.word	0x09896800
 8005b80:	04c4b400 	.word	0x04c4b400

08005b84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e08d      	b.n	8005cb2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	4b47      	ldr	r3, [pc, #284]	@ (8005cbc <HAL_DMA_Init+0x138>)
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d80f      	bhi.n	8005bc2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4b45      	ldr	r3, [pc, #276]	@ (8005cc0 <HAL_DMA_Init+0x13c>)
 8005baa:	4413      	add	r3, r2
 8005bac:	4a45      	ldr	r2, [pc, #276]	@ (8005cc4 <HAL_DMA_Init+0x140>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	009a      	lsls	r2, r3, #2
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a42      	ldr	r2, [pc, #264]	@ (8005cc8 <HAL_DMA_Init+0x144>)
 8005bbe:	641a      	str	r2, [r3, #64]	@ 0x40
 8005bc0:	e00e      	b.n	8005be0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	4b40      	ldr	r3, [pc, #256]	@ (8005ccc <HAL_DMA_Init+0x148>)
 8005bca:	4413      	add	r3, r2
 8005bcc:	4a3d      	ldr	r2, [pc, #244]	@ (8005cc4 <HAL_DMA_Init+0x140>)
 8005bce:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd2:	091b      	lsrs	r3, r3, #4
 8005bd4:	009a      	lsls	r2, r3, #2
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a3c      	ldr	r2, [pc, #240]	@ (8005cd0 <HAL_DMA_Init+0x14c>)
 8005bde:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bfa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fa76 	bl	8006124 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c40:	d102      	bne.n	8005c48 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c5c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d010      	beq.n	8005c88 <HAL_DMA_Init+0x104>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d80c      	bhi.n	8005c88 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa96 	bl	80061a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c84:	605a      	str	r2, [r3, #4]
 8005c86:	e008      	b.n	8005c9a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	40020407 	.word	0x40020407
 8005cc0:	bffdfff8 	.word	0xbffdfff8
 8005cc4:	cccccccd 	.word	0xcccccccd
 8005cc8:	40020000 	.word	0x40020000
 8005ccc:	bffdfbf8 	.word	0xbffdfbf8
 8005cd0:	40020400 	.word	0x40020400

08005cd4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_DMA_Start_IT+0x20>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e066      	b.n	8005dc2 <HAL_DMA_Start_IT+0xee>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d155      	bne.n	8005db4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0201 	bic.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	68b9      	ldr	r1, [r7, #8]
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f9bb 	bl	80060a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d008      	beq.n	8005d4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f042 020e 	orr.w	r2, r2, #14
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	e00f      	b.n	8005d6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0204 	bic.w	r2, r2, #4
 8005d5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 020a 	orr.w	r2, r2, #10
 8005d6a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d007      	beq.n	8005d8a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d88:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005da0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0201 	orr.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	e005      	b.n	8005dc0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d005      	beq.n	8005dee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2204      	movs	r2, #4
 8005de6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	73fb      	strb	r3, [r7, #15]
 8005dec:	e037      	b.n	8005e5e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 020e 	bic.w	r2, r2, #14
 8005dfc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e0c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0201 	bic.w	r2, r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e22:	f003 021f 	and.w	r2, r3, #31
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e30:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e3a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00c      	beq.n	8005e5e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e52:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e5c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d00d      	beq.n	8005eb0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2204      	movs	r2, #4
 8005e98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	73fb      	strb	r3, [r7, #15]
 8005eae:	e047      	b.n	8005f40 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 020e 	bic.w	r2, r2, #14
 8005ebe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0201 	bic.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ede:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee4:	f003 021f 	and.w	r2, r3, #31
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eec:	2101      	movs	r1, #1
 8005eee:	fa01 f202 	lsl.w	r2, r1, r2
 8005ef2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005efc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00c      	beq.n	8005f20 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f1e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
    }
  }
  return status;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f66:	f003 031f 	and.w	r3, r3, #31
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	409a      	lsls	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4013      	ands	r3, r2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d026      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x7a>
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d021      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d107      	bne.n	8005f9e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0204 	bic.w	r2, r2, #4
 8005f9c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa2:	f003 021f 	and.w	r2, r3, #31
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005faa:	2104      	movs	r1, #4
 8005fac:	fa01 f202 	lsl.w	r2, r1, r2
 8005fb0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d071      	beq.n	800609e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005fc2:	e06c      	b.n	800609e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	2202      	movs	r2, #2
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d02e      	beq.n	8006036 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d029      	beq.n	8006036 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0320 	and.w	r3, r3, #32
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10b      	bne.n	8006008 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 020a 	bic.w	r2, r2, #10
 8005ffe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800600c:	f003 021f 	and.w	r2, r3, #31
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006014:	2102      	movs	r1, #2
 8006016:	fa01 f202 	lsl.w	r2, r1, r2
 800601a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d038      	beq.n	800609e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006034:	e033      	b.n	800609e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603a:	f003 031f 	and.w	r3, r3, #31
 800603e:	2208      	movs	r2, #8
 8006040:	409a      	lsls	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4013      	ands	r3, r2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d02a      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b00      	cmp	r3, #0
 8006052:	d025      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 020e 	bic.w	r2, r2, #14
 8006062:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006068:	f003 021f 	and.w	r2, r3, #31
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006070:	2101      	movs	r1, #1
 8006072:	fa01 f202 	lsl.w	r2, r1, r2
 8006076:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006092:	2b00      	cmp	r3, #0
 8006094:	d004      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800609e:	bf00      	nop
 80060a0:	bf00      	nop
}
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80060be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d004      	beq.n	80060d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80060d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d6:	f003 021f 	and.w	r2, r3, #31
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	2101      	movs	r1, #1
 80060e0:	fa01 f202 	lsl.w	r2, r1, r2
 80060e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b10      	cmp	r3, #16
 80060f4:	d108      	bne.n	8006108 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006106:	e007      	b.n	8006118 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	60da      	str	r2, [r3, #12]
}
 8006118:	bf00      	nop
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	4b16      	ldr	r3, [pc, #88]	@ (800618c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006134:	429a      	cmp	r2, r3
 8006136:	d802      	bhi.n	800613e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006138:	4b15      	ldr	r3, [pc, #84]	@ (8006190 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	e001      	b.n	8006142 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800613e:	4b15      	ldr	r3, [pc, #84]	@ (8006194 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006140:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	3b08      	subs	r3, #8
 800614e:	4a12      	ldr	r2, [pc, #72]	@ (8006198 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006150:	fba2 2303 	umull	r2, r3, r2, r3
 8006154:	091b      	lsrs	r3, r3, #4
 8006156:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615c:	089b      	lsrs	r3, r3, #2
 800615e:	009a      	lsls	r2, r3, #2
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	4413      	add	r3, r2
 8006164:	461a      	mov	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a0b      	ldr	r2, [pc, #44]	@ (800619c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800616e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	2201      	movs	r2, #1
 8006178:	409a      	lsls	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40020407 	.word	0x40020407
 8006190:	40020800 	.word	0x40020800
 8006194:	40020820 	.word	0x40020820
 8006198:	cccccccd 	.word	0xcccccccd
 800619c:	40020880 	.word	0x40020880

080061a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4b0b      	ldr	r3, [pc, #44]	@ (80061e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	461a      	mov	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a08      	ldr	r2, [pc, #32]	@ (80061e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80061c2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	2201      	movs	r2, #1
 80061ce:	409a      	lsls	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80061d4:	bf00      	nop
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	1000823f 	.word	0x1000823f
 80061e4:	40020940 	.word	0x40020940

080061e8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e147      	b.n	800648a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fb fa5e 	bl	80016d0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0210 	bic.w	r2, r2, #16
 8006222:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006224:	f7fc faca 	bl	80027bc <HAL_GetTick>
 8006228:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800622a:	e012      	b.n	8006252 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800622c:	f7fc fac6 	bl	80027bc <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b0a      	cmp	r3, #10
 8006238:	d90b      	bls.n	8006252 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800623e:	f043 0201 	orr.w	r2, r3, #1
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2203      	movs	r2, #3
 800624a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e11b      	b.n	800648a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b08      	cmp	r3, #8
 800625e:	d0e5      	beq.n	800622c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006270:	f7fc faa4 	bl	80027bc <HAL_GetTick>
 8006274:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006276:	e012      	b.n	800629e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006278:	f7fc faa0 	bl	80027bc <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b0a      	cmp	r3, #10
 8006284:	d90b      	bls.n	800629e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800628a:	f043 0201 	orr.w	r2, r3, #1
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2203      	movs	r2, #3
 8006296:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e0f5      	b.n	800648a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d0e5      	beq.n	8006278 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0202 	orr.w	r2, r2, #2
 80062ba:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a74      	ldr	r2, [pc, #464]	@ (8006494 <HAL_FDCAN_Init+0x2ac>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d103      	bne.n	80062ce <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80062c6:	4a74      	ldr	r2, [pc, #464]	@ (8006498 <HAL_FDCAN_Init+0x2b0>)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	7c1b      	ldrb	r3, [r3, #16]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d108      	bne.n	80062e8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	699a      	ldr	r2, [r3, #24]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062e4:	619a      	str	r2, [r3, #24]
 80062e6:	e007      	b.n	80062f8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	7c5b      	ldrb	r3, [r3, #17]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d108      	bne.n	8006312 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699a      	ldr	r2, [r3, #24]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800630e:	619a      	str	r2, [r3, #24]
 8006310:	e007      	b.n	8006322 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699a      	ldr	r2, [r3, #24]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006320:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	7c9b      	ldrb	r3, [r3, #18]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d108      	bne.n	800633c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699a      	ldr	r2, [r3, #24]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006338:	619a      	str	r2, [r3, #24]
 800633a:	e007      	b.n	800634c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800634a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699a      	ldr	r2, [r3, #24]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006370:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0210 	bic.w	r2, r2, #16
 8006380:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d108      	bne.n	800639c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699a      	ldr	r2, [r3, #24]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0204 	orr.w	r2, r2, #4
 8006398:	619a      	str	r2, [r3, #24]
 800639a:	e02c      	b.n	80063f6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d028      	beq.n	80063f6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d01c      	beq.n	80063e6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699a      	ldr	r2, [r3, #24]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80063ba:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0210 	orr.w	r2, r2, #16
 80063ca:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d110      	bne.n	80063f6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0220 	orr.w	r2, r2, #32
 80063e2:	619a      	str	r2, [r3, #24]
 80063e4:	e007      	b.n	80063f6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699a      	ldr	r2, [r3, #24]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0220 	orr.w	r2, r2, #32
 80063f4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	3b01      	subs	r3, #1
 8006404:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006406:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800640e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	3b01      	subs	r3, #1
 8006418:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800641e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006420:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800642a:	d115      	bne.n	8006458 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006430:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006436:	3b01      	subs	r3, #1
 8006438:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800643a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006440:	3b01      	subs	r3, #1
 8006442:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006444:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644c:	3b01      	subs	r3, #1
 800644e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006454:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006456:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fab6 	bl	80069e0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	40006400 	.word	0x40006400
 8006498:	40006500 	.word	0x40006500

0800649c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800649c:	b480      	push	{r7}
 800649e:	b08b      	sub	sp, #44	@ 0x2c
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80064aa:	2300      	movs	r3, #0
 80064ac:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80064b4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80064b6:	7efb      	ldrb	r3, [r7, #27]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	f040 80e8 	bne.w	800668e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2b40      	cmp	r3, #64	@ 0x40
 80064c2:	d137      	bne.n	8006534 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d107      	bne.n	80064e4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0db      	b.n	800669c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ec:	0e1b      	lsrs	r3, r3, #24
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d10a      	bne.n	800650c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064fe:	0a5b      	lsrs	r3, r3, #9
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006508:	2301      	movs	r3, #1
 800650a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006514:	0a1b      	lsrs	r3, r3, #8
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	4413      	add	r3, r2
 800651e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8006524:	69fa      	ldr	r2, [r7, #28]
 8006526:	4613      	mov	r3, r2
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	4413      	add	r3, r2
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	440b      	add	r3, r1
 8006530:	627b      	str	r3, [r7, #36]	@ 0x24
 8006532:	e036      	b.n	80065a2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800653c:	f003 030f 	and.w	r3, r3, #15
 8006540:	2b00      	cmp	r3, #0
 8006542:	d107      	bne.n	8006554 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006548:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e0a3      	b.n	800669c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800655c:	0e1b      	lsrs	r3, r3, #24
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b01      	cmp	r3, #1
 8006564:	d10a      	bne.n	800657c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800656e:	0a1b      	lsrs	r3, r3, #8
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006578:	2301      	movs	r3, #1
 800657a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006584:	0a1b      	lsrs	r3, r3, #8
 8006586:	f003 0303 	and.w	r3, r3, #3
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	4413      	add	r3, r2
 800658e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	4613      	mov	r3, r2
 8006598:	00db      	lsls	r3, r3, #3
 800659a:	4413      	add	r3, r2
 800659c:	00db      	lsls	r3, r3, #3
 800659e:	440b      	add	r3, r1
 80065a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d107      	bne.n	80065c6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	0c9b      	lsrs	r3, r3, #18
 80065bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	e005      	b.n	80065d2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80065c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80065d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80065de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	3304      	adds	r3, #4
 80065ee:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80065f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80065fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	0c1b      	lsrs	r3, r3, #16
 8006600:	f003 020f 	and.w	r2, r3, #15
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	0e1b      	lsrs	r3, r3, #24
 8006626:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800662e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	0fda      	lsrs	r2, r3, #31
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663a:	3304      	adds	r3, #4
 800663c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006642:	2300      	movs	r3, #0
 8006644:	623b      	str	r3, [r7, #32]
 8006646:	e00a      	b.n	800665e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	441a      	add	r2, r3
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	440b      	add	r3, r1
 8006654:	7812      	ldrb	r2, [r2, #0]
 8006656:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	3301      	adds	r3, #1
 800665c:	623b      	str	r3, [r7, #32]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	4a11      	ldr	r2, [pc, #68]	@ (80066a8 <HAL_FDCAN_GetRxMessage+0x20c>)
 8006664:	5cd3      	ldrb	r3, [r2, r3]
 8006666:	461a      	mov	r2, r3
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	4293      	cmp	r3, r2
 800666c:	d3ec      	bcc.n	8006648 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	2b40      	cmp	r3, #64	@ 0x40
 8006672:	d105      	bne.n	8006680 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	69fa      	ldr	r2, [r7, #28]
 800667a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800667e:	e004      	b.n	800668a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	69fa      	ldr	r2, [r7, #28]
 8006686:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	e006      	b.n	800669c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006692:	f043 0208 	orr.w	r2, r3, #8
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
  }
}
 800669c:	4618      	mov	r0, r3
 800669e:	372c      	adds	r7, #44	@ 0x2c
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	08012474 	.word	0x08012474

080066ac <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	@ 0x30
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ba:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80066be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066c8:	4013      	ands	r3, r2
 80066ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066e0:	4013      	ands	r3, r2
 80066e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f8:	4013      	ands	r3, r2
 80066fa:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006702:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8006706:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670e:	6a3a      	ldr	r2, [r7, #32]
 8006710:	4013      	ands	r3, r2
 8006712:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800671a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800671e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	4013      	ands	r3, r2
 800672a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006732:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800673a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00b      	beq.n	800675e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	d006      	beq.n	800675e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2240      	movs	r2, #64	@ 0x40
 8006756:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f921 	bl	80069a0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006764:	2b00      	cmp	r3, #0
 8006766:	d019      	beq.n	800679c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800676e:	2b00      	cmp	r3, #0
 8006770:	d014      	beq.n	800679c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800677a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4013      	ands	r3, r2
 8006788:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006792:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006794:	6939      	ldr	r1, [r7, #16]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f8e3 	bl	8006962 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800679c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d007      	beq.n	80067b2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067a8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80067aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f8a2 	bl	80068f6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80067b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d007      	beq.n	80067c8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067be:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80067c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f8a2 	bl	800690c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d007      	beq.n	80067de <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80067d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f8a2 	bl	8006922 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00c      	beq.n	8006802 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d007      	beq.n	8006802 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067fa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f89b 	bl	8006938 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006808:	2b00      	cmp	r3, #0
 800680a:	d018      	beq.n	800683e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006812:	2b00      	cmp	r3, #0
 8006814:	d013      	beq.n	800683e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800681e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	4013      	ands	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2280      	movs	r2, #128	@ 0x80
 8006834:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006836:	68f9      	ldr	r1, [r7, #12]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f887 	bl	800694c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00c      	beq.n	8006862 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d007      	beq.n	8006862 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800685a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f88b 	bl	8006978 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00c      	beq.n	8006886 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d007      	beq.n	8006886 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800687e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f883 	bl	800698c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00f      	beq.n	80068b0 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80068a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d007      	beq.n	80068c6 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80068be:	69f9      	ldr	r1, [r7, #28]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f881 	bl	80069c8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d009      	beq.n	80068e0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6a3a      	ldr	r2, [r7, #32]
 80068d2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f863 	bl	80069b4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80068ee:	bf00      	nop
 80068f0:	3730      	adds	r7, #48	@ 0x30
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
	...

080069e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80069e8:	4b27      	ldr	r3, [pc, #156]	@ (8006a88 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80069ea:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069fa:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a02:	041a      	lsls	r2, r3, #16
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a20:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a28:	061a      	lsls	r2, r3, #24
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	e005      	b.n	8006a6e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	60fb      	str	r3, [r7, #12]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d3f3      	bcc.n	8006a62 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8006a7a:	bf00      	nop
 8006a7c:	bf00      	nop
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	4000a400 	.word	0x4000a400

08006a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006a9a:	e15a      	b.n	8006d52 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 814c 	beq.w	8006d4c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f003 0303 	and.w	r3, r3, #3
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d005      	beq.n	8006acc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d130      	bne.n	8006b2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	2203      	movs	r2, #3
 8006ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8006adc:	43db      	mvns	r3, r3
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	fa02 f303 	lsl.w	r3, r2, r3
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b02:	2201      	movs	r2, #1
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	43db      	mvns	r3, r3
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	091b      	lsrs	r3, r3, #4
 8006b18:	f003 0201 	and.w	r2, r3, #1
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d017      	beq.n	8006b6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	2203      	movs	r2, #3
 8006b46:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4a:	43db      	mvns	r3, r3
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	689a      	ldr	r2, [r3, #8]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d123      	bne.n	8006bbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	08da      	lsrs	r2, r3, #3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3208      	adds	r2, #8
 8006b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	220f      	movs	r2, #15
 8006b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b92:	43db      	mvns	r3, r3
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4013      	ands	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	08da      	lsrs	r2, r3, #3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3208      	adds	r2, #8
 8006bb8:	6939      	ldr	r1, [r7, #16]
 8006bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	2203      	movs	r2, #3
 8006bca:	fa02 f303 	lsl.w	r3, r2, r3
 8006bce:	43db      	mvns	r3, r3
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f003 0203 	and.w	r2, r3, #3
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	fa02 f303 	lsl.w	r3, r2, r3
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 80a6 	beq.w	8006d4c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c00:	4b5b      	ldr	r3, [pc, #364]	@ (8006d70 <HAL_GPIO_Init+0x2e4>)
 8006c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c04:	4a5a      	ldr	r2, [pc, #360]	@ (8006d70 <HAL_GPIO_Init+0x2e4>)
 8006c06:	f043 0301 	orr.w	r3, r3, #1
 8006c0a:	6613      	str	r3, [r2, #96]	@ 0x60
 8006c0c:	4b58      	ldr	r3, [pc, #352]	@ (8006d70 <HAL_GPIO_Init+0x2e4>)
 8006c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	60bb      	str	r3, [r7, #8]
 8006c16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c18:	4a56      	ldr	r2, [pc, #344]	@ (8006d74 <HAL_GPIO_Init+0x2e8>)
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	089b      	lsrs	r3, r3, #2
 8006c1e:	3302      	adds	r3, #2
 8006c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f003 0303 	and.w	r3, r3, #3
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	220f      	movs	r2, #15
 8006c30:	fa02 f303 	lsl.w	r3, r2, r3
 8006c34:	43db      	mvns	r3, r3
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006c42:	d01f      	beq.n	8006c84 <HAL_GPIO_Init+0x1f8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a4c      	ldr	r2, [pc, #304]	@ (8006d78 <HAL_GPIO_Init+0x2ec>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d019      	beq.n	8006c80 <HAL_GPIO_Init+0x1f4>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a4b      	ldr	r2, [pc, #300]	@ (8006d7c <HAL_GPIO_Init+0x2f0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d013      	beq.n	8006c7c <HAL_GPIO_Init+0x1f0>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a4a      	ldr	r2, [pc, #296]	@ (8006d80 <HAL_GPIO_Init+0x2f4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d00d      	beq.n	8006c78 <HAL_GPIO_Init+0x1ec>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a49      	ldr	r2, [pc, #292]	@ (8006d84 <HAL_GPIO_Init+0x2f8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d007      	beq.n	8006c74 <HAL_GPIO_Init+0x1e8>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a48      	ldr	r2, [pc, #288]	@ (8006d88 <HAL_GPIO_Init+0x2fc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d101      	bne.n	8006c70 <HAL_GPIO_Init+0x1e4>
 8006c6c:	2305      	movs	r3, #5
 8006c6e:	e00a      	b.n	8006c86 <HAL_GPIO_Init+0x1fa>
 8006c70:	2306      	movs	r3, #6
 8006c72:	e008      	b.n	8006c86 <HAL_GPIO_Init+0x1fa>
 8006c74:	2304      	movs	r3, #4
 8006c76:	e006      	b.n	8006c86 <HAL_GPIO_Init+0x1fa>
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e004      	b.n	8006c86 <HAL_GPIO_Init+0x1fa>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e002      	b.n	8006c86 <HAL_GPIO_Init+0x1fa>
 8006c80:	2301      	movs	r3, #1
 8006c82:	e000      	b.n	8006c86 <HAL_GPIO_Init+0x1fa>
 8006c84:	2300      	movs	r3, #0
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	f002 0203 	and.w	r2, r2, #3
 8006c8c:	0092      	lsls	r2, r2, #2
 8006c8e:	4093      	lsls	r3, r2
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c96:	4937      	ldr	r1, [pc, #220]	@ (8006d74 <HAL_GPIO_Init+0x2e8>)
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	089b      	lsrs	r3, r3, #2
 8006c9c:	3302      	adds	r3, #2
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ca4:	4b39      	ldr	r3, [pc, #228]	@ (8006d8c <HAL_GPIO_Init+0x300>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	43db      	mvns	r3, r3
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006cc8:	4a30      	ldr	r2, [pc, #192]	@ (8006d8c <HAL_GPIO_Init+0x300>)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006cce:	4b2f      	ldr	r3, [pc, #188]	@ (8006d8c <HAL_GPIO_Init+0x300>)
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	43db      	mvns	r3, r3
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006cf2:	4a26      	ldr	r2, [pc, #152]	@ (8006d8c <HAL_GPIO_Init+0x300>)
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006cf8:	4b24      	ldr	r3, [pc, #144]	@ (8006d8c <HAL_GPIO_Init+0x300>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	43db      	mvns	r3, r3
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4013      	ands	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8006d8c <HAL_GPIO_Init+0x300>)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006d22:	4b1a      	ldr	r3, [pc, #104]	@ (8006d8c <HAL_GPIO_Init+0x300>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	43db      	mvns	r3, r3
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006d46:	4a11      	ldr	r2, [pc, #68]	@ (8006d8c <HAL_GPIO_Init+0x300>)
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f47f ae9d 	bne.w	8006a9c <HAL_GPIO_Init+0x10>
  }
}
 8006d62:	bf00      	nop
 8006d64:	bf00      	nop
 8006d66:	371c      	adds	r7, #28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	40021000 	.word	0x40021000
 8006d74:	40010000 	.word	0x40010000
 8006d78:	48000400 	.word	0x48000400
 8006d7c:	48000800 	.word	0x48000800
 8006d80:	48000c00 	.word	0x48000c00
 8006d84:	48001000 	.word	0x48001000
 8006d88:	48001400 	.word	0x48001400
 8006d8c:	40010400 	.word	0x40010400

08006d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	460b      	mov	r3, r1
 8006d9a:	807b      	strh	r3, [r7, #2]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006da0:	787b      	ldrb	r3, [r7, #1]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006da6:	887a      	ldrh	r2, [r7, #2]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006dac:	e002      	b.n	8006db4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006dae:	887a      	ldrh	r2, [r7, #2]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006dca:	4b08      	ldr	r3, [pc, #32]	@ (8006dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006dcc:	695a      	ldr	r2, [r3, #20]
 8006dce:	88fb      	ldrh	r3, [r7, #6]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d006      	beq.n	8006de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006dd6:	4a05      	ldr	r2, [pc, #20]	@ (8006dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006dd8:	88fb      	ldrh	r3, [r7, #6]
 8006dda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ddc:	88fb      	ldrh	r3, [r7, #6]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f006 f9ca 	bl	800d178 <HAL_GPIO_EXTI_Callback>
  }
}
 8006de4:	bf00      	nop
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	40010400 	.word	0x40010400

08006df0 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e0bb      	b.n	8006f7e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b05      	cmp	r3, #5
 8006e10:	d101      	bne.n	8006e16 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e0b3      	b.n	8006f7e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d101      	bne.n	8006e26 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e0ab      	b.n	8006f7e <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e26:	4b58      	ldr	r3, [pc, #352]	@ (8006f88 <HAL_OPAMP_Init+0x198>)
 8006e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e2a:	4a57      	ldr	r2, [pc, #348]	@ (8006f88 <HAL_OPAMP_Init+0x198>)
 8006e2c:	f043 0301 	orr.w	r3, r3, #1
 8006e30:	6613      	str	r3, [r2, #96]	@ 0x60
 8006e32:	4b55      	ldr	r3, [pc, #340]	@ (8006f88 <HAL_OPAMP_Init+0x198>)
 8006e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	60bb      	str	r3, [r7, #8]
 8006e3c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d103      	bne.n	8006e52 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fa fe72 	bl	8001b3c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	2b40      	cmp	r3, #64	@ 0x40
 8006e5e:	d003      	beq.n	8006e68 <HAL_OPAMP_Init+0x78>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	2b60      	cmp	r3, #96	@ 0x60
 8006e66:	d133      	bne.n	8006ed0 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f023 0110 	bic.w	r1, r3, #16
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	4b41      	ldr	r3, [pc, #260]	@ (8006f8c <HAL_OPAMP_Init+0x19c>)
 8006e86:	4013      	ands	r3, r2
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6851      	ldr	r1, [r2, #4]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6892      	ldr	r2, [r2, #8]
 8006e90:	4311      	orrs	r1, r2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6912      	ldr	r2, [r2, #16]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	7d09      	ldrb	r1, [r1, #20]
 8006e9c:	2901      	cmp	r1, #1
 8006e9e:	d102      	bne.n	8006ea6 <HAL_OPAMP_Init+0xb6>
 8006ea0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006ea4:	e000      	b.n	8006ea8 <HAL_OPAMP_Init+0xb8>
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	4311      	orrs	r1, r2
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006eae:	4311      	orrs	r1, r2
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006eb4:	4311      	orrs	r1, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006eba:	04d2      	lsls	r2, r2, #19
 8006ebc:	4311      	orrs	r1, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006ec2:	0612      	lsls	r2, r2, #24
 8006ec4:	4311      	orrs	r1, r2
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	6812      	ldr	r2, [r2, #0]
 8006eca:	430b      	orrs	r3, r1
 8006ecc:	6013      	str	r3, [r2, #0]
 8006ece:	e035      	b.n	8006f3c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f023 0110 	bic.w	r1, r3, #16
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	4b27      	ldr	r3, [pc, #156]	@ (8006f8c <HAL_OPAMP_Init+0x19c>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6851      	ldr	r1, [r2, #4]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6892      	ldr	r2, [r2, #8]
 8006ef8:	4311      	orrs	r1, r2
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	68d2      	ldr	r2, [r2, #12]
 8006efe:	4311      	orrs	r1, r2
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6912      	ldr	r2, [r2, #16]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	7d09      	ldrb	r1, [r1, #20]
 8006f0a:	2901      	cmp	r1, #1
 8006f0c:	d102      	bne.n	8006f14 <HAL_OPAMP_Init+0x124>
 8006f0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006f12:	e000      	b.n	8006f16 <HAL_OPAMP_Init+0x126>
 8006f14:	2100      	movs	r1, #0
 8006f16:	4311      	orrs	r1, r2
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f1c:	4311      	orrs	r1, r2
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006f22:	4311      	orrs	r1, r2
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006f28:	04d2      	lsls	r2, r2, #19
 8006f2a:	4311      	orrs	r1, r2
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006f30:	0612      	lsls	r2, r2, #24
 8006f32:	4311      	orrs	r1, r2
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	6812      	ldr	r2, [r2, #0]
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	db10      	blt.n	8006f68 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699a      	ldr	r2, [r3, #24]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d103      	bne.n	8006f7c <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40021000 	.word	0x40021000
 8006f8c:	e0003e11 	.word	0xe0003e11

08006f90 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d102      	bne.n	8006fa8 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	73fb      	strb	r3, [r7, #15]
 8006fa6:	e01d      	b.n	8006fe4 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b05      	cmp	r3, #5
 8006fb2:	d102      	bne.n	8006fba <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	73fb      	strb	r3, [r7, #15]
 8006fb8:	e014      	b.n	8006fe4 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d10c      	bne.n	8006fe0 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f042 0201 	orr.w	r2, r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2204      	movs	r2, #4
 8006fda:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8006fde:	e001      	b.n	8006fe4 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
	...

08006ff4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d141      	bne.n	8007086 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007002:	4b4b      	ldr	r3, [pc, #300]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800700a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800700e:	d131      	bne.n	8007074 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007010:	4b47      	ldr	r3, [pc, #284]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007016:	4a46      	ldr	r2, [pc, #280]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800701c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007020:	4b43      	ldr	r3, [pc, #268]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007028:	4a41      	ldr	r2, [pc, #260]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800702a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800702e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007030:	4b40      	ldr	r3, [pc, #256]	@ (8007134 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2232      	movs	r2, #50	@ 0x32
 8007036:	fb02 f303 	mul.w	r3, r2, r3
 800703a:	4a3f      	ldr	r2, [pc, #252]	@ (8007138 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800703c:	fba2 2303 	umull	r2, r3, r2, r3
 8007040:	0c9b      	lsrs	r3, r3, #18
 8007042:	3301      	adds	r3, #1
 8007044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007046:	e002      	b.n	800704e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3b01      	subs	r3, #1
 800704c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800704e:	4b38      	ldr	r3, [pc, #224]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800705a:	d102      	bne.n	8007062 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1f2      	bne.n	8007048 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007062:	4b33      	ldr	r3, [pc, #204]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800706a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800706e:	d158      	bne.n	8007122 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e057      	b.n	8007124 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007074:	4b2e      	ldr	r3, [pc, #184]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800707a:	4a2d      	ldr	r2, [pc, #180]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800707c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007080:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007084:	e04d      	b.n	8007122 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800708c:	d141      	bne.n	8007112 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800708e:	4b28      	ldr	r3, [pc, #160]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800709a:	d131      	bne.n	8007100 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800709c:	4b24      	ldr	r3, [pc, #144]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800709e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070a2:	4a23      	ldr	r2, [pc, #140]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80070ac:	4b20      	ldr	r3, [pc, #128]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80070b4:	4a1e      	ldr	r2, [pc, #120]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80070ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80070bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007134 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2232      	movs	r2, #50	@ 0x32
 80070c2:	fb02 f303 	mul.w	r3, r2, r3
 80070c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007138 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80070c8:	fba2 2303 	umull	r2, r3, r2, r3
 80070cc:	0c9b      	lsrs	r3, r3, #18
 80070ce:	3301      	adds	r3, #1
 80070d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070d2:	e002      	b.n	80070da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070da:	4b15      	ldr	r3, [pc, #84]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070e6:	d102      	bne.n	80070ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1f2      	bne.n	80070d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80070ee:	4b10      	ldr	r3, [pc, #64]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070fa:	d112      	bne.n	8007122 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e011      	b.n	8007124 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007100:	4b0b      	ldr	r3, [pc, #44]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007106:	4a0a      	ldr	r2, [pc, #40]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800710c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007110:	e007      	b.n	8007122 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007112:	4b07      	ldr	r3, [pc, #28]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800711a:	4a05      	ldr	r2, [pc, #20]	@ (8007130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800711c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007120:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	40007000 	.word	0x40007000
 8007134:	20000000 	.word	0x20000000
 8007138:	431bde83 	.word	0x431bde83

0800713c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007140:	4b05      	ldr	r3, [pc, #20]	@ (8007158 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	4a04      	ldr	r2, [pc, #16]	@ (8007158 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007146:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800714a:	6093      	str	r3, [r2, #8]
}
 800714c:	bf00      	nop
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40007000 	.word	0x40007000

0800715c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e2fe      	b.n	800776c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d075      	beq.n	8007266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800717a:	4b97      	ldr	r3, [pc, #604]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f003 030c 	and.w	r3, r3, #12
 8007182:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007184:	4b94      	ldr	r3, [pc, #592]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f003 0303 	and.w	r3, r3, #3
 800718c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	2b0c      	cmp	r3, #12
 8007192:	d102      	bne.n	800719a <HAL_RCC_OscConfig+0x3e>
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2b03      	cmp	r3, #3
 8007198:	d002      	beq.n	80071a0 <HAL_RCC_OscConfig+0x44>
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b08      	cmp	r3, #8
 800719e:	d10b      	bne.n	80071b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071a0:	4b8d      	ldr	r3, [pc, #564]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d05b      	beq.n	8007264 <HAL_RCC_OscConfig+0x108>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d157      	bne.n	8007264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e2d9      	b.n	800776c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071c0:	d106      	bne.n	80071d0 <HAL_RCC_OscConfig+0x74>
 80071c2:	4b85      	ldr	r3, [pc, #532]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a84      	ldr	r2, [pc, #528]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 80071c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	e01d      	b.n	800720c <HAL_RCC_OscConfig+0xb0>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071d8:	d10c      	bne.n	80071f4 <HAL_RCC_OscConfig+0x98>
 80071da:	4b7f      	ldr	r3, [pc, #508]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a7e      	ldr	r2, [pc, #504]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 80071e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	4b7c      	ldr	r3, [pc, #496]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a7b      	ldr	r2, [pc, #492]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 80071ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	e00b      	b.n	800720c <HAL_RCC_OscConfig+0xb0>
 80071f4:	4b78      	ldr	r3, [pc, #480]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a77      	ldr	r2, [pc, #476]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 80071fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	4b75      	ldr	r3, [pc, #468]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a74      	ldr	r2, [pc, #464]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 8007206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800720a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d013      	beq.n	800723c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007214:	f7fb fad2 	bl	80027bc <HAL_GetTick>
 8007218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800721a:	e008      	b.n	800722e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800721c:	f7fb face 	bl	80027bc <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b64      	cmp	r3, #100	@ 0x64
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e29e      	b.n	800776c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800722e:	4b6a      	ldr	r3, [pc, #424]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0f0      	beq.n	800721c <HAL_RCC_OscConfig+0xc0>
 800723a:	e014      	b.n	8007266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800723c:	f7fb fabe 	bl	80027bc <HAL_GetTick>
 8007240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007242:	e008      	b.n	8007256 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007244:	f7fb faba 	bl	80027bc <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b64      	cmp	r3, #100	@ 0x64
 8007250:	d901      	bls.n	8007256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e28a      	b.n	800776c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007256:	4b60      	ldr	r3, [pc, #384]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f0      	bne.n	8007244 <HAL_RCC_OscConfig+0xe8>
 8007262:	e000      	b.n	8007266 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d075      	beq.n	800735e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007272:	4b59      	ldr	r3, [pc, #356]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f003 030c 	and.w	r3, r3, #12
 800727a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800727c:	4b56      	ldr	r3, [pc, #344]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	f003 0303 	and.w	r3, r3, #3
 8007284:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2b0c      	cmp	r3, #12
 800728a:	d102      	bne.n	8007292 <HAL_RCC_OscConfig+0x136>
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2b02      	cmp	r3, #2
 8007290:	d002      	beq.n	8007298 <HAL_RCC_OscConfig+0x13c>
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	2b04      	cmp	r3, #4
 8007296:	d11f      	bne.n	80072d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007298:	4b4f      	ldr	r3, [pc, #316]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <HAL_RCC_OscConfig+0x154>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e25d      	b.n	800776c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072b0:	4b49      	ldr	r3, [pc, #292]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	061b      	lsls	r3, r3, #24
 80072be:	4946      	ldr	r1, [pc, #280]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80072c4:	4b45      	ldr	r3, [pc, #276]	@ (80073dc <HAL_RCC_OscConfig+0x280>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fb fa2b 	bl	8002724 <HAL_InitTick>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d043      	beq.n	800735c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e249      	b.n	800776c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d023      	beq.n	8007328 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072e0:	4b3d      	ldr	r3, [pc, #244]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a3c      	ldr	r2, [pc, #240]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 80072e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ec:	f7fb fa66 	bl	80027bc <HAL_GetTick>
 80072f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072f4:	f7fb fa62 	bl	80027bc <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e232      	b.n	800776c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007306:	4b34      	ldr	r3, [pc, #208]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0f0      	beq.n	80072f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007312:	4b31      	ldr	r3, [pc, #196]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	061b      	lsls	r3, r3, #24
 8007320:	492d      	ldr	r1, [pc, #180]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 8007322:	4313      	orrs	r3, r2
 8007324:	604b      	str	r3, [r1, #4]
 8007326:	e01a      	b.n	800735e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007328:	4b2b      	ldr	r3, [pc, #172]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a2a      	ldr	r2, [pc, #168]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 800732e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007334:	f7fb fa42 	bl	80027bc <HAL_GetTick>
 8007338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800733a:	e008      	b.n	800734e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800733c:	f7fb fa3e 	bl	80027bc <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e20e      	b.n	800776c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800734e:	4b22      	ldr	r3, [pc, #136]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1f0      	bne.n	800733c <HAL_RCC_OscConfig+0x1e0>
 800735a:	e000      	b.n	800735e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800735c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0308 	and.w	r3, r3, #8
 8007366:	2b00      	cmp	r3, #0
 8007368:	d041      	beq.n	80073ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d01c      	beq.n	80073ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007372:	4b19      	ldr	r3, [pc, #100]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 8007374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007378:	4a17      	ldr	r2, [pc, #92]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 800737a:	f043 0301 	orr.w	r3, r3, #1
 800737e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007382:	f7fb fa1b 	bl	80027bc <HAL_GetTick>
 8007386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007388:	e008      	b.n	800739c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800738a:	f7fb fa17 	bl	80027bc <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d901      	bls.n	800739c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e1e7      	b.n	800776c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800739c:	4b0e      	ldr	r3, [pc, #56]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 800739e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0ef      	beq.n	800738a <HAL_RCC_OscConfig+0x22e>
 80073aa:	e020      	b.n	80073ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073ac:	4b0a      	ldr	r3, [pc, #40]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 80073ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073b2:	4a09      	ldr	r2, [pc, #36]	@ (80073d8 <HAL_RCC_OscConfig+0x27c>)
 80073b4:	f023 0301 	bic.w	r3, r3, #1
 80073b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073bc:	f7fb f9fe 	bl	80027bc <HAL_GetTick>
 80073c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073c2:	e00d      	b.n	80073e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073c4:	f7fb f9fa 	bl	80027bc <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d906      	bls.n	80073e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e1ca      	b.n	800776c <HAL_RCC_OscConfig+0x610>
 80073d6:	bf00      	nop
 80073d8:	40021000 	.word	0x40021000
 80073dc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073e0:	4b8c      	ldr	r3, [pc, #560]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 80073e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1ea      	bne.n	80073c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0304 	and.w	r3, r3, #4
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 80a6 	beq.w	8007548 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073fc:	2300      	movs	r3, #0
 80073fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007400:	4b84      	ldr	r3, [pc, #528]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 8007402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_RCC_OscConfig+0x2b4>
 800740c:	2301      	movs	r3, #1
 800740e:	e000      	b.n	8007412 <HAL_RCC_OscConfig+0x2b6>
 8007410:	2300      	movs	r3, #0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00d      	beq.n	8007432 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007416:	4b7f      	ldr	r3, [pc, #508]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 8007418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800741a:	4a7e      	ldr	r2, [pc, #504]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 800741c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007420:	6593      	str	r3, [r2, #88]	@ 0x58
 8007422:	4b7c      	ldr	r3, [pc, #496]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 8007424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800742e:	2301      	movs	r3, #1
 8007430:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007432:	4b79      	ldr	r3, [pc, #484]	@ (8007618 <HAL_RCC_OscConfig+0x4bc>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800743a:	2b00      	cmp	r3, #0
 800743c:	d118      	bne.n	8007470 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800743e:	4b76      	ldr	r3, [pc, #472]	@ (8007618 <HAL_RCC_OscConfig+0x4bc>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a75      	ldr	r2, [pc, #468]	@ (8007618 <HAL_RCC_OscConfig+0x4bc>)
 8007444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800744a:	f7fb f9b7 	bl	80027bc <HAL_GetTick>
 800744e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007450:	e008      	b.n	8007464 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007452:	f7fb f9b3 	bl	80027bc <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b02      	cmp	r3, #2
 800745e:	d901      	bls.n	8007464 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e183      	b.n	800776c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007464:	4b6c      	ldr	r3, [pc, #432]	@ (8007618 <HAL_RCC_OscConfig+0x4bc>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0f0      	beq.n	8007452 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d108      	bne.n	800748a <HAL_RCC_OscConfig+0x32e>
 8007478:	4b66      	ldr	r3, [pc, #408]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 800747a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800747e:	4a65      	ldr	r2, [pc, #404]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 8007480:	f043 0301 	orr.w	r3, r3, #1
 8007484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007488:	e024      	b.n	80074d4 <HAL_RCC_OscConfig+0x378>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	2b05      	cmp	r3, #5
 8007490:	d110      	bne.n	80074b4 <HAL_RCC_OscConfig+0x358>
 8007492:	4b60      	ldr	r3, [pc, #384]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 8007494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007498:	4a5e      	ldr	r2, [pc, #376]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 800749a:	f043 0304 	orr.w	r3, r3, #4
 800749e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80074a2:	4b5c      	ldr	r3, [pc, #368]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 80074a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a8:	4a5a      	ldr	r2, [pc, #360]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 80074aa:	f043 0301 	orr.w	r3, r3, #1
 80074ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80074b2:	e00f      	b.n	80074d4 <HAL_RCC_OscConfig+0x378>
 80074b4:	4b57      	ldr	r3, [pc, #348]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 80074b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ba:	4a56      	ldr	r2, [pc, #344]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 80074bc:	f023 0301 	bic.w	r3, r3, #1
 80074c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80074c4:	4b53      	ldr	r3, [pc, #332]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 80074c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ca:	4a52      	ldr	r2, [pc, #328]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 80074cc:	f023 0304 	bic.w	r3, r3, #4
 80074d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d016      	beq.n	800750a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074dc:	f7fb f96e 	bl	80027bc <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074e2:	e00a      	b.n	80074fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e4:	f7fb f96a 	bl	80027bc <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e138      	b.n	800776c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074fa:	4b46      	ldr	r3, [pc, #280]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 80074fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d0ed      	beq.n	80074e4 <HAL_RCC_OscConfig+0x388>
 8007508:	e015      	b.n	8007536 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800750a:	f7fb f957 	bl	80027bc <HAL_GetTick>
 800750e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007510:	e00a      	b.n	8007528 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007512:	f7fb f953 	bl	80027bc <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007520:	4293      	cmp	r3, r2
 8007522:	d901      	bls.n	8007528 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e121      	b.n	800776c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007528:	4b3a      	ldr	r3, [pc, #232]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 800752a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1ed      	bne.n	8007512 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007536:	7ffb      	ldrb	r3, [r7, #31]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d105      	bne.n	8007548 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800753c:	4b35      	ldr	r3, [pc, #212]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 800753e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007540:	4a34      	ldr	r2, [pc, #208]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 8007542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007546:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b00      	cmp	r3, #0
 8007552:	d03c      	beq.n	80075ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d01c      	beq.n	8007596 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800755c:	4b2d      	ldr	r3, [pc, #180]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 800755e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007562:	4a2c      	ldr	r2, [pc, #176]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 8007564:	f043 0301 	orr.w	r3, r3, #1
 8007568:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800756c:	f7fb f926 	bl	80027bc <HAL_GetTick>
 8007570:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007572:	e008      	b.n	8007586 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007574:	f7fb f922 	bl	80027bc <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b02      	cmp	r3, #2
 8007580:	d901      	bls.n	8007586 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e0f2      	b.n	800776c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007586:	4b23      	ldr	r3, [pc, #140]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 8007588:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b00      	cmp	r3, #0
 8007592:	d0ef      	beq.n	8007574 <HAL_RCC_OscConfig+0x418>
 8007594:	e01b      	b.n	80075ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007596:	4b1f      	ldr	r3, [pc, #124]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 8007598:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800759c:	4a1d      	ldr	r2, [pc, #116]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 800759e:	f023 0301 	bic.w	r3, r3, #1
 80075a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075a6:	f7fb f909 	bl	80027bc <HAL_GetTick>
 80075aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80075ac:	e008      	b.n	80075c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075ae:	f7fb f905 	bl	80027bc <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d901      	bls.n	80075c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e0d5      	b.n	800776c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80075c0:	4b14      	ldr	r3, [pc, #80]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 80075c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1ef      	bne.n	80075ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 80c9 	beq.w	800776a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f003 030c 	and.w	r3, r3, #12
 80075e0:	2b0c      	cmp	r3, #12
 80075e2:	f000 8083 	beq.w	80076ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d15e      	bne.n	80076ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ee:	4b09      	ldr	r3, [pc, #36]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a08      	ldr	r2, [pc, #32]	@ (8007614 <HAL_RCC_OscConfig+0x4b8>)
 80075f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075fa:	f7fb f8df 	bl	80027bc <HAL_GetTick>
 80075fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007600:	e00c      	b.n	800761c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007602:	f7fb f8db 	bl	80027bc <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	2b02      	cmp	r3, #2
 800760e:	d905      	bls.n	800761c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e0ab      	b.n	800776c <HAL_RCC_OscConfig+0x610>
 8007614:	40021000 	.word	0x40021000
 8007618:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800761c:	4b55      	ldr	r3, [pc, #340]	@ (8007774 <HAL_RCC_OscConfig+0x618>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1ec      	bne.n	8007602 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007628:	4b52      	ldr	r3, [pc, #328]	@ (8007774 <HAL_RCC_OscConfig+0x618>)
 800762a:	68da      	ldr	r2, [r3, #12]
 800762c:	4b52      	ldr	r3, [pc, #328]	@ (8007778 <HAL_RCC_OscConfig+0x61c>)
 800762e:	4013      	ands	r3, r2
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6a11      	ldr	r1, [r2, #32]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007638:	3a01      	subs	r2, #1
 800763a:	0112      	lsls	r2, r2, #4
 800763c:	4311      	orrs	r1, r2
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007642:	0212      	lsls	r2, r2, #8
 8007644:	4311      	orrs	r1, r2
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800764a:	0852      	lsrs	r2, r2, #1
 800764c:	3a01      	subs	r2, #1
 800764e:	0552      	lsls	r2, r2, #21
 8007650:	4311      	orrs	r1, r2
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007656:	0852      	lsrs	r2, r2, #1
 8007658:	3a01      	subs	r2, #1
 800765a:	0652      	lsls	r2, r2, #25
 800765c:	4311      	orrs	r1, r2
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007662:	06d2      	lsls	r2, r2, #27
 8007664:	430a      	orrs	r2, r1
 8007666:	4943      	ldr	r1, [pc, #268]	@ (8007774 <HAL_RCC_OscConfig+0x618>)
 8007668:	4313      	orrs	r3, r2
 800766a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800766c:	4b41      	ldr	r3, [pc, #260]	@ (8007774 <HAL_RCC_OscConfig+0x618>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a40      	ldr	r2, [pc, #256]	@ (8007774 <HAL_RCC_OscConfig+0x618>)
 8007672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007676:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007678:	4b3e      	ldr	r3, [pc, #248]	@ (8007774 <HAL_RCC_OscConfig+0x618>)
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	4a3d      	ldr	r2, [pc, #244]	@ (8007774 <HAL_RCC_OscConfig+0x618>)
 800767e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007682:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007684:	f7fb f89a 	bl	80027bc <HAL_GetTick>
 8007688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800768a:	e008      	b.n	800769e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800768c:	f7fb f896 	bl	80027bc <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b02      	cmp	r3, #2
 8007698:	d901      	bls.n	800769e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e066      	b.n	800776c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800769e:	4b35      	ldr	r3, [pc, #212]	@ (8007774 <HAL_RCC_OscConfig+0x618>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0f0      	beq.n	800768c <HAL_RCC_OscConfig+0x530>
 80076aa:	e05e      	b.n	800776a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076ac:	4b31      	ldr	r3, [pc, #196]	@ (8007774 <HAL_RCC_OscConfig+0x618>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a30      	ldr	r2, [pc, #192]	@ (8007774 <HAL_RCC_OscConfig+0x618>)
 80076b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b8:	f7fb f880 	bl	80027bc <HAL_GetTick>
 80076bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076be:	e008      	b.n	80076d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076c0:	f7fb f87c 	bl	80027bc <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e04c      	b.n	800776c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076d2:	4b28      	ldr	r3, [pc, #160]	@ (8007774 <HAL_RCC_OscConfig+0x618>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1f0      	bne.n	80076c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80076de:	4b25      	ldr	r3, [pc, #148]	@ (8007774 <HAL_RCC_OscConfig+0x618>)
 80076e0:	68da      	ldr	r2, [r3, #12]
 80076e2:	4924      	ldr	r1, [pc, #144]	@ (8007774 <HAL_RCC_OscConfig+0x618>)
 80076e4:	4b25      	ldr	r3, [pc, #148]	@ (800777c <HAL_RCC_OscConfig+0x620>)
 80076e6:	4013      	ands	r3, r2
 80076e8:	60cb      	str	r3, [r1, #12]
 80076ea:	e03e      	b.n	800776a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e039      	b.n	800776c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80076f8:	4b1e      	ldr	r3, [pc, #120]	@ (8007774 <HAL_RCC_OscConfig+0x618>)
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f003 0203 	and.w	r2, r3, #3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	429a      	cmp	r2, r3
 800770a:	d12c      	bne.n	8007766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007716:	3b01      	subs	r3, #1
 8007718:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800771a:	429a      	cmp	r2, r3
 800771c:	d123      	bne.n	8007766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007728:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800772a:	429a      	cmp	r2, r3
 800772c:	d11b      	bne.n	8007766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007738:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800773a:	429a      	cmp	r2, r3
 800773c:	d113      	bne.n	8007766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007748:	085b      	lsrs	r3, r3, #1
 800774a:	3b01      	subs	r3, #1
 800774c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800774e:	429a      	cmp	r2, r3
 8007750:	d109      	bne.n	8007766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800775c:	085b      	lsrs	r3, r3, #1
 800775e:	3b01      	subs	r3, #1
 8007760:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007762:	429a      	cmp	r2, r3
 8007764:	d001      	beq.n	800776a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e000      	b.n	800776c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3720      	adds	r7, #32
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	40021000 	.word	0x40021000
 8007778:	019f800c 	.word	0x019f800c
 800777c:	feeefffc 	.word	0xfeeefffc

08007780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800778a:	2300      	movs	r3, #0
 800778c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e11e      	b.n	80079d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007798:	4b91      	ldr	r3, [pc, #580]	@ (80079e0 <HAL_RCC_ClockConfig+0x260>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 030f 	and.w	r3, r3, #15
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d910      	bls.n	80077c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077a6:	4b8e      	ldr	r3, [pc, #568]	@ (80079e0 <HAL_RCC_ClockConfig+0x260>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f023 020f 	bic.w	r2, r3, #15
 80077ae:	498c      	ldr	r1, [pc, #560]	@ (80079e0 <HAL_RCC_ClockConfig+0x260>)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077b6:	4b8a      	ldr	r3, [pc, #552]	@ (80079e0 <HAL_RCC_ClockConfig+0x260>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 030f 	and.w	r3, r3, #15
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d001      	beq.n	80077c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e106      	b.n	80079d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d073      	beq.n	80078bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d129      	bne.n	8007830 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077dc:	4b81      	ldr	r3, [pc, #516]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e0f4      	b.n	80079d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80077ec:	f000 f99e 	bl	8007b2c <RCC_GetSysClockFreqFromPLLSource>
 80077f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	4a7c      	ldr	r2, [pc, #496]	@ (80079e8 <HAL_RCC_ClockConfig+0x268>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d93f      	bls.n	800787a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80077fa:	4b7a      	ldr	r3, [pc, #488]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d009      	beq.n	800781a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800780e:	2b00      	cmp	r3, #0
 8007810:	d033      	beq.n	800787a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007816:	2b00      	cmp	r3, #0
 8007818:	d12f      	bne.n	800787a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800781a:	4b72      	ldr	r3, [pc, #456]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007822:	4a70      	ldr	r2, [pc, #448]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 8007824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007828:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800782a:	2380      	movs	r3, #128	@ 0x80
 800782c:	617b      	str	r3, [r7, #20]
 800782e:	e024      	b.n	800787a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b02      	cmp	r3, #2
 8007836:	d107      	bne.n	8007848 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007838:	4b6a      	ldr	r3, [pc, #424]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d109      	bne.n	8007858 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e0c6      	b.n	80079d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007848:	4b66      	ldr	r3, [pc, #408]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e0be      	b.n	80079d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007858:	f000 f8ce 	bl	80079f8 <HAL_RCC_GetSysClockFreq>
 800785c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	4a61      	ldr	r2, [pc, #388]	@ (80079e8 <HAL_RCC_ClockConfig+0x268>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d909      	bls.n	800787a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007866:	4b5f      	ldr	r3, [pc, #380]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800786e:	4a5d      	ldr	r2, [pc, #372]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 8007870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007874:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007876:	2380      	movs	r3, #128	@ 0x80
 8007878:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800787a:	4b5a      	ldr	r3, [pc, #360]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f023 0203 	bic.w	r2, r3, #3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	4957      	ldr	r1, [pc, #348]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 8007888:	4313      	orrs	r3, r2
 800788a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800788c:	f7fa ff96 	bl	80027bc <HAL_GetTick>
 8007890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007892:	e00a      	b.n	80078aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007894:	f7fa ff92 	bl	80027bc <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e095      	b.n	80079d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078aa:	4b4e      	ldr	r3, [pc, #312]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f003 020c 	and.w	r2, r3, #12
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d1eb      	bne.n	8007894 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d023      	beq.n	8007910 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078d4:	4b43      	ldr	r3, [pc, #268]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	4a42      	ldr	r2, [pc, #264]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 80078da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80078de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0308 	and.w	r3, r3, #8
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d007      	beq.n	80078fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80078ec:	4b3d      	ldr	r3, [pc, #244]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80078f4:	4a3b      	ldr	r2, [pc, #236]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 80078f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80078fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078fc:	4b39      	ldr	r3, [pc, #228]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	4936      	ldr	r1, [pc, #216]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 800790a:	4313      	orrs	r3, r2
 800790c:	608b      	str	r3, [r1, #8]
 800790e:	e008      	b.n	8007922 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	2b80      	cmp	r3, #128	@ 0x80
 8007914:	d105      	bne.n	8007922 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007916:	4b33      	ldr	r3, [pc, #204]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	4a32      	ldr	r2, [pc, #200]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 800791c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007920:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007922:	4b2f      	ldr	r3, [pc, #188]	@ (80079e0 <HAL_RCC_ClockConfig+0x260>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 030f 	and.w	r3, r3, #15
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	429a      	cmp	r2, r3
 800792e:	d21d      	bcs.n	800796c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007930:	4b2b      	ldr	r3, [pc, #172]	@ (80079e0 <HAL_RCC_ClockConfig+0x260>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f023 020f 	bic.w	r2, r3, #15
 8007938:	4929      	ldr	r1, [pc, #164]	@ (80079e0 <HAL_RCC_ClockConfig+0x260>)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	4313      	orrs	r3, r2
 800793e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007940:	f7fa ff3c 	bl	80027bc <HAL_GetTick>
 8007944:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007946:	e00a      	b.n	800795e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007948:	f7fa ff38 	bl	80027bc <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007956:	4293      	cmp	r3, r2
 8007958:	d901      	bls.n	800795e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e03b      	b.n	80079d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800795e:	4b20      	ldr	r3, [pc, #128]	@ (80079e0 <HAL_RCC_ClockConfig+0x260>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	429a      	cmp	r2, r3
 800796a:	d1ed      	bne.n	8007948 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0304 	and.w	r3, r3, #4
 8007974:	2b00      	cmp	r3, #0
 8007976:	d008      	beq.n	800798a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007978:	4b1a      	ldr	r3, [pc, #104]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	4917      	ldr	r1, [pc, #92]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 8007986:	4313      	orrs	r3, r2
 8007988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0308 	and.w	r3, r3, #8
 8007992:	2b00      	cmp	r3, #0
 8007994:	d009      	beq.n	80079aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007996:	4b13      	ldr	r3, [pc, #76]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	490f      	ldr	r1, [pc, #60]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80079aa:	f000 f825 	bl	80079f8 <HAL_RCC_GetSysClockFreq>
 80079ae:	4602      	mov	r2, r0
 80079b0:	4b0c      	ldr	r3, [pc, #48]	@ (80079e4 <HAL_RCC_ClockConfig+0x264>)
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	091b      	lsrs	r3, r3, #4
 80079b6:	f003 030f 	and.w	r3, r3, #15
 80079ba:	490c      	ldr	r1, [pc, #48]	@ (80079ec <HAL_RCC_ClockConfig+0x26c>)
 80079bc:	5ccb      	ldrb	r3, [r1, r3]
 80079be:	f003 031f 	and.w	r3, r3, #31
 80079c2:	fa22 f303 	lsr.w	r3, r2, r3
 80079c6:	4a0a      	ldr	r2, [pc, #40]	@ (80079f0 <HAL_RCC_ClockConfig+0x270>)
 80079c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80079ca:	4b0a      	ldr	r3, [pc, #40]	@ (80079f4 <HAL_RCC_ClockConfig+0x274>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fa fea8 	bl	8002724 <HAL_InitTick>
 80079d4:	4603      	mov	r3, r0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	40022000 	.word	0x40022000
 80079e4:	40021000 	.word	0x40021000
 80079e8:	04c4b400 	.word	0x04c4b400
 80079ec:	0801245c 	.word	0x0801245c
 80079f0:	20000000 	.word	0x20000000
 80079f4:	20000004 	.word	0x20000004

080079f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b087      	sub	sp, #28
 80079fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80079fe:	4b2c      	ldr	r3, [pc, #176]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f003 030c 	and.w	r3, r3, #12
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d102      	bne.n	8007a10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8007ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007a0c:	613b      	str	r3, [r7, #16]
 8007a0e:	e047      	b.n	8007aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007a10:	4b27      	ldr	r3, [pc, #156]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f003 030c 	and.w	r3, r3, #12
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	d102      	bne.n	8007a22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007a1c:	4b26      	ldr	r3, [pc, #152]	@ (8007ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007a1e:	613b      	str	r3, [r7, #16]
 8007a20:	e03e      	b.n	8007aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007a22:	4b23      	ldr	r3, [pc, #140]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f003 030c 	and.w	r3, r3, #12
 8007a2a:	2b0c      	cmp	r3, #12
 8007a2c:	d136      	bne.n	8007a9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a2e:	4b20      	ldr	r3, [pc, #128]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a38:	4b1d      	ldr	r3, [pc, #116]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	091b      	lsrs	r3, r3, #4
 8007a3e:	f003 030f 	and.w	r3, r3, #15
 8007a42:	3301      	adds	r3, #1
 8007a44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d10c      	bne.n	8007a66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8007ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a54:	4a16      	ldr	r2, [pc, #88]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a56:	68d2      	ldr	r2, [r2, #12]
 8007a58:	0a12      	lsrs	r2, r2, #8
 8007a5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007a5e:	fb02 f303 	mul.w	r3, r2, r3
 8007a62:	617b      	str	r3, [r7, #20]
      break;
 8007a64:	e00c      	b.n	8007a80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a66:	4a13      	ldr	r2, [pc, #76]	@ (8007ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6e:	4a10      	ldr	r2, [pc, #64]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a70:	68d2      	ldr	r2, [r2, #12]
 8007a72:	0a12      	lsrs	r2, r2, #8
 8007a74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007a78:	fb02 f303 	mul.w	r3, r2, r3
 8007a7c:	617b      	str	r3, [r7, #20]
      break;
 8007a7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a80:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	0e5b      	lsrs	r3, r3, #25
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a98:	613b      	str	r3, [r7, #16]
 8007a9a:	e001      	b.n	8007aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007aa0:	693b      	ldr	r3, [r7, #16]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	371c      	adds	r7, #28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	40021000 	.word	0x40021000
 8007ab4:	00f42400 	.word	0x00f42400
 8007ab8:	016e3600 	.word	0x016e3600

08007abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ac0:	4b03      	ldr	r3, [pc, #12]	@ (8007ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	20000000 	.word	0x20000000

08007ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007ad8:	f7ff fff0 	bl	8007abc <HAL_RCC_GetHCLKFreq>
 8007adc:	4602      	mov	r2, r0
 8007ade:	4b06      	ldr	r3, [pc, #24]	@ (8007af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	0a1b      	lsrs	r3, r3, #8
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	4904      	ldr	r1, [pc, #16]	@ (8007afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8007aea:	5ccb      	ldrb	r3, [r1, r3]
 8007aec:	f003 031f 	and.w	r3, r3, #31
 8007af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	40021000 	.word	0x40021000
 8007afc:	0801246c 	.word	0x0801246c

08007b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007b04:	f7ff ffda 	bl	8007abc <HAL_RCC_GetHCLKFreq>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	4b06      	ldr	r3, [pc, #24]	@ (8007b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	0adb      	lsrs	r3, r3, #11
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	4904      	ldr	r1, [pc, #16]	@ (8007b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007b16:	5ccb      	ldrb	r3, [r1, r3]
 8007b18:	f003 031f 	and.w	r3, r3, #31
 8007b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	40021000 	.word	0x40021000
 8007b28:	0801246c 	.word	0x0801246c

08007b2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b087      	sub	sp, #28
 8007b30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b32:	4b1e      	ldr	r3, [pc, #120]	@ (8007bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	f003 0303 	and.w	r3, r3, #3
 8007b3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8007bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	091b      	lsrs	r3, r3, #4
 8007b42:	f003 030f 	and.w	r3, r3, #15
 8007b46:	3301      	adds	r3, #1
 8007b48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d10c      	bne.n	8007b6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b50:	4a17      	ldr	r2, [pc, #92]	@ (8007bb0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b58:	4a14      	ldr	r2, [pc, #80]	@ (8007bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b5a:	68d2      	ldr	r2, [r2, #12]
 8007b5c:	0a12      	lsrs	r2, r2, #8
 8007b5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007b62:	fb02 f303 	mul.w	r3, r2, r3
 8007b66:	617b      	str	r3, [r7, #20]
    break;
 8007b68:	e00c      	b.n	8007b84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b6a:	4a12      	ldr	r2, [pc, #72]	@ (8007bb4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b72:	4a0e      	ldr	r2, [pc, #56]	@ (8007bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b74:	68d2      	ldr	r2, [r2, #12]
 8007b76:	0a12      	lsrs	r2, r2, #8
 8007b78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007b7c:	fb02 f303 	mul.w	r3, r2, r3
 8007b80:	617b      	str	r3, [r7, #20]
    break;
 8007b82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b84:	4b09      	ldr	r3, [pc, #36]	@ (8007bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	0e5b      	lsrs	r3, r3, #25
 8007b8a:	f003 0303 	and.w	r3, r3, #3
 8007b8e:	3301      	adds	r3, #1
 8007b90:	005b      	lsls	r3, r3, #1
 8007b92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007b9e:	687b      	ldr	r3, [r7, #4]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	371c      	adds	r7, #28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	40021000 	.word	0x40021000
 8007bb0:	016e3600 	.word	0x016e3600
 8007bb4:	00f42400 	.word	0x00f42400

08007bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 8098 	beq.w	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bda:	4b43      	ldr	r3, [pc, #268]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10d      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007be6:	4b40      	ldr	r3, [pc, #256]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bea:	4a3f      	ldr	r2, [pc, #252]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bfa:	60bb      	str	r3, [r7, #8]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c02:	4b3a      	ldr	r3, [pc, #232]	@ (8007cec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a39      	ldr	r2, [pc, #228]	@ (8007cec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c0e:	f7fa fdd5 	bl	80027bc <HAL_GetTick>
 8007c12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c14:	e009      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c16:	f7fa fdd1 	bl	80027bc <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d902      	bls.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	74fb      	strb	r3, [r7, #19]
        break;
 8007c28:	e005      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c2a:	4b30      	ldr	r3, [pc, #192]	@ (8007cec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0ef      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007c36:	7cfb      	ldrb	r3, [r7, #19]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d159      	bne.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d01e      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d019      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c58:	4b23      	ldr	r3, [pc, #140]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c64:	4b20      	ldr	r3, [pc, #128]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c74:	4b1c      	ldr	r3, [pc, #112]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c84:	4a18      	ldr	r2, [pc, #96]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d016      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c96:	f7fa fd91 	bl	80027bc <HAL_GetTick>
 8007c9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c9c:	e00b      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c9e:	f7fa fd8d 	bl	80027bc <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d902      	bls.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	74fb      	strb	r3, [r7, #19]
            break;
 8007cb4:	e006      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cbc:	f003 0302 	and.w	r3, r3, #2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d0ec      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007cc4:	7cfb      	ldrb	r3, [r7, #19]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10b      	bne.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cca:	4b07      	ldr	r3, [pc, #28]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd8:	4903      	ldr	r1, [pc, #12]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007ce0:	e008      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ce2:	7cfb      	ldrb	r3, [r7, #19]
 8007ce4:	74bb      	strb	r3, [r7, #18]
 8007ce6:	e005      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007ce8:	40021000 	.word	0x40021000
 8007cec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf0:	7cfb      	ldrb	r3, [r7, #19]
 8007cf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cf4:	7c7b      	ldrb	r3, [r7, #17]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d105      	bne.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cfa:	4ba6      	ldr	r3, [pc, #664]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cfe:	4aa5      	ldr	r2, [pc, #660]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d12:	4ba0      	ldr	r3, [pc, #640]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d18:	f023 0203 	bic.w	r2, r3, #3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	499c      	ldr	r1, [pc, #624]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00a      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d34:	4b97      	ldr	r3, [pc, #604]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d3a:	f023 020c 	bic.w	r2, r3, #12
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	4994      	ldr	r1, [pc, #592]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0304 	and.w	r3, r3, #4
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d56:	4b8f      	ldr	r3, [pc, #572]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	498b      	ldr	r1, [pc, #556]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0308 	and.w	r3, r3, #8
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00a      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d78:	4b86      	ldr	r3, [pc, #536]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	4983      	ldr	r1, [pc, #524]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0320 	and.w	r3, r3, #32
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d9a:	4b7e      	ldr	r3, [pc, #504]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	497a      	ldr	r1, [pc, #488]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007dbc:	4b75      	ldr	r3, [pc, #468]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dc2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	4972      	ldr	r1, [pc, #456]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007dde:	4b6d      	ldr	r3, [pc, #436]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007de4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	4969      	ldr	r1, [pc, #420]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e00:	4b64      	ldr	r3, [pc, #400]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	4961      	ldr	r1, [pc, #388]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e22:	4b5c      	ldr	r3, [pc, #368]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e30:	4958      	ldr	r1, [pc, #352]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d015      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e44:	4b53      	ldr	r3, [pc, #332]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e52:	4950      	ldr	r1, [pc, #320]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e62:	d105      	bne.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e64:	4b4b      	ldr	r3, [pc, #300]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	4a4a      	ldr	r2, [pc, #296]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d015      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e7c:	4b45      	ldr	r3, [pc, #276]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e8a:	4942      	ldr	r1, [pc, #264]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e9a:	d105      	bne.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e9c:	4b3d      	ldr	r3, [pc, #244]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	4a3c      	ldr	r2, [pc, #240]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ea6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d015      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007eb4:	4b37      	ldr	r3, [pc, #220]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ec2:	4934      	ldr	r1, [pc, #208]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ece:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ed2:	d105      	bne.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ed4:	4b2f      	ldr	r3, [pc, #188]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	4a2e      	ldr	r2, [pc, #184]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007eda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ede:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d015      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007eec:	4b29      	ldr	r3, [pc, #164]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ef2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007efa:	4926      	ldr	r1, [pc, #152]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f0a:	d105      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f0c:	4b21      	ldr	r3, [pc, #132]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	4a20      	ldr	r2, [pc, #128]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d015      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f24:	4b1b      	ldr	r3, [pc, #108]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f32:	4918      	ldr	r1, [pc, #96]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f34:	4313      	orrs	r3, r2
 8007f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f42:	d105      	bne.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f44:	4b13      	ldr	r3, [pc, #76]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	4a12      	ldr	r2, [pc, #72]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d015      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f62:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f6a:	490a      	ldr	r1, [pc, #40]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f7a:	d105      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f7c:	4b05      	ldr	r3, [pc, #20]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	4a04      	ldr	r2, [pc, #16]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007f88:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3718      	adds	r7, #24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	40021000 	.word	0x40021000

08007f98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e09d      	b.n	80080e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d108      	bne.n	8007fc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fba:	d009      	beq.n	8007fd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	61da      	str	r2, [r3, #28]
 8007fc2:	e005      	b.n	8007fd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d106      	bne.n	8007ff0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7f9 fe5a 	bl	8001ca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008006:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008010:	d902      	bls.n	8008018 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
 8008016:	e002      	b.n	800801e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008018:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800801c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008026:	d007      	beq.n	8008038 <HAL_SPI_Init+0xa0>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008030:	d002      	beq.n	8008038 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008048:	431a      	orrs	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	431a      	orrs	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	431a      	orrs	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008066:	431a      	orrs	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008070:	431a      	orrs	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800807a:	ea42 0103 	orr.w	r1, r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008082:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	0c1b      	lsrs	r3, r3, #16
 8008094:	f003 0204 	and.w	r2, r3, #4
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800809c:	f003 0310 	and.w	r3, r3, #16
 80080a0:	431a      	orrs	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080a6:	f003 0308 	and.w	r3, r3, #8
 80080aa:	431a      	orrs	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80080b4:	ea42 0103 	orr.w	r1, r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	69da      	ldr	r2, [r3, #28]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80080d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b08a      	sub	sp, #40	@ 0x28
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	60b9      	str	r1, [r7, #8]
 80080f8:	607a      	str	r2, [r7, #4]
 80080fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80080fc:	2301      	movs	r3, #1
 80080fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800810c:	2b01      	cmp	r3, #1
 800810e:	d101      	bne.n	8008114 <HAL_SPI_TransmitReceive+0x26>
 8008110:	2302      	movs	r3, #2
 8008112:	e20a      	b.n	800852a <HAL_SPI_TransmitReceive+0x43c>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800811c:	f7fa fb4e 	bl	80027bc <HAL_GetTick>
 8008120:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008128:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008130:	887b      	ldrh	r3, [r7, #2]
 8008132:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008134:	887b      	ldrh	r3, [r7, #2]
 8008136:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008138:	7efb      	ldrb	r3, [r7, #27]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d00e      	beq.n	800815c <HAL_SPI_TransmitReceive+0x6e>
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008144:	d106      	bne.n	8008154 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d102      	bne.n	8008154 <HAL_SPI_TransmitReceive+0x66>
 800814e:	7efb      	ldrb	r3, [r7, #27]
 8008150:	2b04      	cmp	r3, #4
 8008152:	d003      	beq.n	800815c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008154:	2302      	movs	r3, #2
 8008156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800815a:	e1e0      	b.n	800851e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <HAL_SPI_TransmitReceive+0x80>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <HAL_SPI_TransmitReceive+0x80>
 8008168:	887b      	ldrh	r3, [r7, #2]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d103      	bne.n	8008176 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008174:	e1d3      	b.n	800851e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b04      	cmp	r3, #4
 8008180:	d003      	beq.n	800818a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2205      	movs	r2, #5
 8008186:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	887a      	ldrh	r2, [r7, #2]
 800819a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	887a      	ldrh	r2, [r7, #2]
 80081a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	887a      	ldrh	r2, [r7, #2]
 80081b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	887a      	ldrh	r2, [r7, #2]
 80081b6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80081cc:	d802      	bhi.n	80081d4 <HAL_SPI_TransmitReceive+0xe6>
 80081ce:	8a3b      	ldrh	r3, [r7, #16]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d908      	bls.n	80081e6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80081e2:	605a      	str	r2, [r3, #4]
 80081e4:	e007      	b.n	80081f6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80081f4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008200:	2b40      	cmp	r3, #64	@ 0x40
 8008202:	d007      	beq.n	8008214 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008212:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800821c:	f240 8081 	bls.w	8008322 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <HAL_SPI_TransmitReceive+0x140>
 8008228:	8a7b      	ldrh	r3, [r7, #18]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d16d      	bne.n	800830a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008232:	881a      	ldrh	r2, [r3, #0]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800823e:	1c9a      	adds	r2, r3, #2
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008248:	b29b      	uxth	r3, r3
 800824a:	3b01      	subs	r3, #1
 800824c:	b29a      	uxth	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008252:	e05a      	b.n	800830a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f003 0302 	and.w	r3, r3, #2
 800825e:	2b02      	cmp	r3, #2
 8008260:	d11b      	bne.n	800829a <HAL_SPI_TransmitReceive+0x1ac>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008266:	b29b      	uxth	r3, r3
 8008268:	2b00      	cmp	r3, #0
 800826a:	d016      	beq.n	800829a <HAL_SPI_TransmitReceive+0x1ac>
 800826c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826e:	2b01      	cmp	r3, #1
 8008270:	d113      	bne.n	800829a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008276:	881a      	ldrh	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008282:	1c9a      	adds	r2, r3, #2
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800828c:	b29b      	uxth	r3, r3
 800828e:	3b01      	subs	r3, #1
 8008290:	b29a      	uxth	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008296:	2300      	movs	r3, #0
 8008298:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f003 0301 	and.w	r3, r3, #1
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d11c      	bne.n	80082e2 <HAL_SPI_TransmitReceive+0x1f4>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d016      	beq.n	80082e2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68da      	ldr	r2, [r3, #12]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082be:	b292      	uxth	r2, r2
 80082c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c6:	1c9a      	adds	r2, r3, #2
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	3b01      	subs	r3, #1
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082de:	2301      	movs	r3, #1
 80082e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80082e2:	f7fa fa6b 	bl	80027bc <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d80b      	bhi.n	800830a <HAL_SPI_TransmitReceive+0x21c>
 80082f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f8:	d007      	beq.n	800830a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008308:	e109      	b.n	800851e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800830e:	b29b      	uxth	r3, r3
 8008310:	2b00      	cmp	r3, #0
 8008312:	d19f      	bne.n	8008254 <HAL_SPI_TransmitReceive+0x166>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800831a:	b29b      	uxth	r3, r3
 800831c:	2b00      	cmp	r3, #0
 800831e:	d199      	bne.n	8008254 <HAL_SPI_TransmitReceive+0x166>
 8008320:	e0e3      	b.n	80084ea <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <HAL_SPI_TransmitReceive+0x244>
 800832a:	8a7b      	ldrh	r3, [r7, #18]
 800832c:	2b01      	cmp	r3, #1
 800832e:	f040 80cf 	bne.w	80084d0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008336:	b29b      	uxth	r3, r3
 8008338:	2b01      	cmp	r3, #1
 800833a:	d912      	bls.n	8008362 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008340:	881a      	ldrh	r2, [r3, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800834c:	1c9a      	adds	r2, r3, #2
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008356:	b29b      	uxth	r3, r3
 8008358:	3b02      	subs	r3, #2
 800835a:	b29a      	uxth	r2, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008360:	e0b6      	b.n	80084d0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	330c      	adds	r3, #12
 800836c:	7812      	ldrb	r2, [r2, #0]
 800836e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800837e:	b29b      	uxth	r3, r3
 8008380:	3b01      	subs	r3, #1
 8008382:	b29a      	uxth	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008388:	e0a2      	b.n	80084d0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f003 0302 	and.w	r3, r3, #2
 8008394:	2b02      	cmp	r3, #2
 8008396:	d134      	bne.n	8008402 <HAL_SPI_TransmitReceive+0x314>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800839c:	b29b      	uxth	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d02f      	beq.n	8008402 <HAL_SPI_TransmitReceive+0x314>
 80083a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d12c      	bne.n	8008402 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d912      	bls.n	80083d8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b6:	881a      	ldrh	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c2:	1c9a      	adds	r2, r3, #2
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	3b02      	subs	r3, #2
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80083d6:	e012      	b.n	80083fe <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	330c      	adds	r3, #12
 80083e2:	7812      	ldrb	r2, [r2, #0]
 80083e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	3b01      	subs	r3, #1
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b01      	cmp	r3, #1
 800840e:	d148      	bne.n	80084a2 <HAL_SPI_TransmitReceive+0x3b4>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008416:	b29b      	uxth	r3, r3
 8008418:	2b00      	cmp	r3, #0
 800841a:	d042      	beq.n	80084a2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008422:	b29b      	uxth	r3, r3
 8008424:	2b01      	cmp	r3, #1
 8008426:	d923      	bls.n	8008470 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008432:	b292      	uxth	r2, r2
 8008434:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800843a:	1c9a      	adds	r2, r3, #2
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008446:	b29b      	uxth	r3, r3
 8008448:	3b02      	subs	r3, #2
 800844a:	b29a      	uxth	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008458:	b29b      	uxth	r3, r3
 800845a:	2b01      	cmp	r3, #1
 800845c:	d81f      	bhi.n	800849e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800846c:	605a      	str	r2, [r3, #4]
 800846e:	e016      	b.n	800849e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f103 020c 	add.w	r2, r3, #12
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800847c:	7812      	ldrb	r2, [r2, #0]
 800847e:	b2d2      	uxtb	r2, r2
 8008480:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008492:	b29b      	uxth	r3, r3
 8008494:	3b01      	subs	r3, #1
 8008496:	b29a      	uxth	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800849e:	2301      	movs	r3, #1
 80084a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80084a2:	f7fa f98b 	bl	80027bc <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d803      	bhi.n	80084ba <HAL_SPI_TransmitReceive+0x3cc>
 80084b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b8:	d102      	bne.n	80084c0 <HAL_SPI_TransmitReceive+0x3d2>
 80084ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d107      	bne.n	80084d0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80084ce:	e026      	b.n	800851e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f47f af57 	bne.w	800838a <HAL_SPI_TransmitReceive+0x29c>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f47f af50 	bne.w	800838a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084ea:	69fa      	ldr	r2, [r7, #28]
 80084ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 f94c 	bl	800878c <SPI_EndRxTxTransaction>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d005      	beq.n	8008506 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2220      	movs	r2, #32
 8008504:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008514:	e003      	b.n	800851e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008526:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800852a:	4618      	mov	r0, r3
 800852c:	3728      	adds	r7, #40	@ 0x28
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008532:	b480      	push	{r7}
 8008534:	b083      	sub	sp, #12
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008540:	b2db      	uxtb	r3, r3
}
 8008542:	4618      	mov	r0, r3
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
	...

08008550 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b088      	sub	sp, #32
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	603b      	str	r3, [r7, #0]
 800855c:	4613      	mov	r3, r2
 800855e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008560:	f7fa f92c 	bl	80027bc <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008568:	1a9b      	subs	r3, r3, r2
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	4413      	add	r3, r2
 800856e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008570:	f7fa f924 	bl	80027bc <HAL_GetTick>
 8008574:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008576:	4b39      	ldr	r3, [pc, #228]	@ (800865c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	015b      	lsls	r3, r3, #5
 800857c:	0d1b      	lsrs	r3, r3, #20
 800857e:	69fa      	ldr	r2, [r7, #28]
 8008580:	fb02 f303 	mul.w	r3, r2, r3
 8008584:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008586:	e054      	b.n	8008632 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858e:	d050      	beq.n	8008632 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008590:	f7fa f914 	bl	80027bc <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	69fa      	ldr	r2, [r7, #28]
 800859c:	429a      	cmp	r2, r3
 800859e:	d902      	bls.n	80085a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d13d      	bne.n	8008622 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80085b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085be:	d111      	bne.n	80085e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085c8:	d004      	beq.n	80085d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085d2:	d107      	bne.n	80085e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085ec:	d10f      	bne.n	800860e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800860c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e017      	b.n	8008652 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d101      	bne.n	800862c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008628:	2300      	movs	r3, #0
 800862a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	3b01      	subs	r3, #1
 8008630:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	4013      	ands	r3, r2
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	429a      	cmp	r2, r3
 8008640:	bf0c      	ite	eq
 8008642:	2301      	moveq	r3, #1
 8008644:	2300      	movne	r3, #0
 8008646:	b2db      	uxtb	r3, r3
 8008648:	461a      	mov	r2, r3
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	429a      	cmp	r2, r3
 800864e:	d19b      	bne.n	8008588 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3720      	adds	r7, #32
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20000000 	.word	0x20000000

08008660 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08a      	sub	sp, #40	@ 0x28
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
 800866c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008672:	f7fa f8a3 	bl	80027bc <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867a:	1a9b      	subs	r3, r3, r2
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	4413      	add	r3, r2
 8008680:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008682:	f7fa f89b 	bl	80027bc <HAL_GetTick>
 8008686:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	330c      	adds	r3, #12
 800868e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008690:	4b3d      	ldr	r3, [pc, #244]	@ (8008788 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	00da      	lsls	r2, r3, #3
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	0d1b      	lsrs	r3, r3, #20
 80086a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086a2:	fb02 f303 	mul.w	r3, r2, r3
 80086a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80086a8:	e060      	b.n	800876c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80086b0:	d107      	bne.n	80086c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d104      	bne.n	80086c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c8:	d050      	beq.n	800876c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086ca:	f7fa f877 	bl	80027bc <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d902      	bls.n	80086e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80086da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d13d      	bne.n	800875c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80086ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086f8:	d111      	bne.n	800871e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008702:	d004      	beq.n	800870e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800870c:	d107      	bne.n	800871e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800871c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008726:	d10f      	bne.n	8008748 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008746:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e010      	b.n	800877e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d101      	bne.n	8008766 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	3b01      	subs	r3, #1
 800876a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	689a      	ldr	r2, [r3, #8]
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	4013      	ands	r3, r2
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	429a      	cmp	r2, r3
 800877a:	d196      	bne.n	80086aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3728      	adds	r7, #40	@ 0x28
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	20000000 	.word	0x20000000

0800878c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af02      	add	r7, sp, #8
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	2200      	movs	r2, #0
 80087a0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f7ff ff5b 	bl	8008660 <SPI_WaitFifoStateUntilTimeout>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d007      	beq.n	80087c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087b4:	f043 0220 	orr.w	r2, r3, #32
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e027      	b.n	8008810 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	2200      	movs	r2, #0
 80087c8:	2180      	movs	r1, #128	@ 0x80
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f7ff fec0 	bl	8008550 <SPI_WaitFlagStateUntilTimeout>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d007      	beq.n	80087e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087da:	f043 0220 	orr.w	r2, r3, #32
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e014      	b.n	8008810 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f7ff ff34 	bl	8008660 <SPI_WaitFifoStateUntilTimeout>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d007      	beq.n	800880e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008802:	f043 0220 	orr.w	r2, r3, #32
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e000      	b.n	8008810 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e049      	b.n	80088be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d106      	bne.n	8008844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7f9 fd74 	bl	800232c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	3304      	adds	r3, #4
 8008854:	4619      	mov	r1, r3
 8008856:	4610      	mov	r0, r2
 8008858:	f000 fe16 	bl	8009488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d001      	beq.n	80088e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e042      	b.n	8008966 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2202      	movs	r2, #2
 80088e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a21      	ldr	r2, [pc, #132]	@ (8008974 <HAL_TIM_Base_Start+0xac>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d018      	beq.n	8008924 <HAL_TIM_Base_Start+0x5c>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088fa:	d013      	beq.n	8008924 <HAL_TIM_Base_Start+0x5c>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a1d      	ldr	r2, [pc, #116]	@ (8008978 <HAL_TIM_Base_Start+0xb0>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d00e      	beq.n	8008924 <HAL_TIM_Base_Start+0x5c>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a1c      	ldr	r2, [pc, #112]	@ (800897c <HAL_TIM_Base_Start+0xb4>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d009      	beq.n	8008924 <HAL_TIM_Base_Start+0x5c>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a1a      	ldr	r2, [pc, #104]	@ (8008980 <HAL_TIM_Base_Start+0xb8>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d004      	beq.n	8008924 <HAL_TIM_Base_Start+0x5c>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a19      	ldr	r2, [pc, #100]	@ (8008984 <HAL_TIM_Base_Start+0xbc>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d115      	bne.n	8008950 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	689a      	ldr	r2, [r3, #8]
 800892a:	4b17      	ldr	r3, [pc, #92]	@ (8008988 <HAL_TIM_Base_Start+0xc0>)
 800892c:	4013      	ands	r3, r2
 800892e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b06      	cmp	r3, #6
 8008934:	d015      	beq.n	8008962 <HAL_TIM_Base_Start+0x9a>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800893c:	d011      	beq.n	8008962 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f042 0201 	orr.w	r2, r2, #1
 800894c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800894e:	e008      	b.n	8008962 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f042 0201 	orr.w	r2, r2, #1
 800895e:	601a      	str	r2, [r3, #0]
 8008960:	e000      	b.n	8008964 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008962:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	40012c00 	.word	0x40012c00
 8008978:	40000400 	.word	0x40000400
 800897c:	40000800 	.word	0x40000800
 8008980:	40013400 	.word	0x40013400
 8008984:	40014000 	.word	0x40014000
 8008988:	00010007 	.word	0x00010007

0800898c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e049      	b.n	8008a32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d106      	bne.n	80089b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f841 	bl	8008a3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2202      	movs	r2, #2
 80089bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	3304      	adds	r3, #4
 80089c8:	4619      	mov	r1, r3
 80089ca:	4610      	mov	r0, r2
 80089cc:	f000 fd5c 	bl	8009488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008a42:	bf00      	nop
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
	...

08008a50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d109      	bne.n	8008a74 <HAL_TIM_PWM_Start+0x24>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	bf14      	ite	ne
 8008a6c:	2301      	movne	r3, #1
 8008a6e:	2300      	moveq	r3, #0
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	e03c      	b.n	8008aee <HAL_TIM_PWM_Start+0x9e>
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d109      	bne.n	8008a8e <HAL_TIM_PWM_Start+0x3e>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	bf14      	ite	ne
 8008a86:	2301      	movne	r3, #1
 8008a88:	2300      	moveq	r3, #0
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	e02f      	b.n	8008aee <HAL_TIM_PWM_Start+0x9e>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d109      	bne.n	8008aa8 <HAL_TIM_PWM_Start+0x58>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	bf14      	ite	ne
 8008aa0:	2301      	movne	r3, #1
 8008aa2:	2300      	moveq	r3, #0
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	e022      	b.n	8008aee <HAL_TIM_PWM_Start+0x9e>
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	2b0c      	cmp	r3, #12
 8008aac:	d109      	bne.n	8008ac2 <HAL_TIM_PWM_Start+0x72>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	bf14      	ite	ne
 8008aba:	2301      	movne	r3, #1
 8008abc:	2300      	moveq	r3, #0
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	e015      	b.n	8008aee <HAL_TIM_PWM_Start+0x9e>
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2b10      	cmp	r3, #16
 8008ac6:	d109      	bne.n	8008adc <HAL_TIM_PWM_Start+0x8c>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	bf14      	ite	ne
 8008ad4:	2301      	movne	r3, #1
 8008ad6:	2300      	moveq	r3, #0
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	e008      	b.n	8008aee <HAL_TIM_PWM_Start+0x9e>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	bf14      	ite	ne
 8008ae8:	2301      	movne	r3, #1
 8008aea:	2300      	moveq	r3, #0
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e097      	b.n	8008c26 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d104      	bne.n	8008b06 <HAL_TIM_PWM_Start+0xb6>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b04:	e023      	b.n	8008b4e <HAL_TIM_PWM_Start+0xfe>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	d104      	bne.n	8008b16 <HAL_TIM_PWM_Start+0xc6>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b14:	e01b      	b.n	8008b4e <HAL_TIM_PWM_Start+0xfe>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	2b08      	cmp	r3, #8
 8008b1a:	d104      	bne.n	8008b26 <HAL_TIM_PWM_Start+0xd6>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b24:	e013      	b.n	8008b4e <HAL_TIM_PWM_Start+0xfe>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	2b0c      	cmp	r3, #12
 8008b2a:	d104      	bne.n	8008b36 <HAL_TIM_PWM_Start+0xe6>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b34:	e00b      	b.n	8008b4e <HAL_TIM_PWM_Start+0xfe>
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2b10      	cmp	r3, #16
 8008b3a:	d104      	bne.n	8008b46 <HAL_TIM_PWM_Start+0xf6>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b44:	e003      	b.n	8008b4e <HAL_TIM_PWM_Start+0xfe>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2202      	movs	r2, #2
 8008b4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2201      	movs	r2, #1
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f001 f92c 	bl	8009db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a33      	ldr	r2, [pc, #204]	@ (8008c30 <HAL_TIM_PWM_Start+0x1e0>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d013      	beq.n	8008b8e <HAL_TIM_PWM_Start+0x13e>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a32      	ldr	r2, [pc, #200]	@ (8008c34 <HAL_TIM_PWM_Start+0x1e4>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d00e      	beq.n	8008b8e <HAL_TIM_PWM_Start+0x13e>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a30      	ldr	r2, [pc, #192]	@ (8008c38 <HAL_TIM_PWM_Start+0x1e8>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d009      	beq.n	8008b8e <HAL_TIM_PWM_Start+0x13e>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8008c3c <HAL_TIM_PWM_Start+0x1ec>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d004      	beq.n	8008b8e <HAL_TIM_PWM_Start+0x13e>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a2d      	ldr	r2, [pc, #180]	@ (8008c40 <HAL_TIM_PWM_Start+0x1f0>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d101      	bne.n	8008b92 <HAL_TIM_PWM_Start+0x142>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e000      	b.n	8008b94 <HAL_TIM_PWM_Start+0x144>
 8008b92:	2300      	movs	r3, #0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d007      	beq.n	8008ba8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ba6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a20      	ldr	r2, [pc, #128]	@ (8008c30 <HAL_TIM_PWM_Start+0x1e0>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d018      	beq.n	8008be4 <HAL_TIM_PWM_Start+0x194>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bba:	d013      	beq.n	8008be4 <HAL_TIM_PWM_Start+0x194>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a20      	ldr	r2, [pc, #128]	@ (8008c44 <HAL_TIM_PWM_Start+0x1f4>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d00e      	beq.n	8008be4 <HAL_TIM_PWM_Start+0x194>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a1f      	ldr	r2, [pc, #124]	@ (8008c48 <HAL_TIM_PWM_Start+0x1f8>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d009      	beq.n	8008be4 <HAL_TIM_PWM_Start+0x194>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a17      	ldr	r2, [pc, #92]	@ (8008c34 <HAL_TIM_PWM_Start+0x1e4>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d004      	beq.n	8008be4 <HAL_TIM_PWM_Start+0x194>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a16      	ldr	r2, [pc, #88]	@ (8008c38 <HAL_TIM_PWM_Start+0x1e8>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d115      	bne.n	8008c10 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689a      	ldr	r2, [r3, #8]
 8008bea:	4b18      	ldr	r3, [pc, #96]	@ (8008c4c <HAL_TIM_PWM_Start+0x1fc>)
 8008bec:	4013      	ands	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b06      	cmp	r3, #6
 8008bf4:	d015      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x1d2>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bfc:	d011      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f042 0201 	orr.w	r2, r2, #1
 8008c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c0e:	e008      	b.n	8008c22 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f042 0201 	orr.w	r2, r2, #1
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	e000      	b.n	8008c24 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	40012c00 	.word	0x40012c00
 8008c34:	40013400 	.word	0x40013400
 8008c38:	40014000 	.word	0x40014000
 8008c3c:	40014400 	.word	0x40014400
 8008c40:	40014800 	.word	0x40014800
 8008c44:	40000400 	.word	0x40000400
 8008c48:	40000800 	.word	0x40000800
 8008c4c:	00010007 	.word	0x00010007

08008c50 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f001 f8a6 	bl	8009db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a3e      	ldr	r2, [pc, #248]	@ (8008d68 <HAL_TIM_PWM_Stop+0x118>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d013      	beq.n	8008c9a <HAL_TIM_PWM_Stop+0x4a>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a3d      	ldr	r2, [pc, #244]	@ (8008d6c <HAL_TIM_PWM_Stop+0x11c>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d00e      	beq.n	8008c9a <HAL_TIM_PWM_Stop+0x4a>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a3b      	ldr	r2, [pc, #236]	@ (8008d70 <HAL_TIM_PWM_Stop+0x120>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d009      	beq.n	8008c9a <HAL_TIM_PWM_Stop+0x4a>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a3a      	ldr	r2, [pc, #232]	@ (8008d74 <HAL_TIM_PWM_Stop+0x124>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d004      	beq.n	8008c9a <HAL_TIM_PWM_Stop+0x4a>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a38      	ldr	r2, [pc, #224]	@ (8008d78 <HAL_TIM_PWM_Stop+0x128>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d101      	bne.n	8008c9e <HAL_TIM_PWM_Stop+0x4e>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e000      	b.n	8008ca0 <HAL_TIM_PWM_Stop+0x50>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d017      	beq.n	8008cd4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6a1a      	ldr	r2, [r3, #32]
 8008caa:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008cae:	4013      	ands	r3, r2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10f      	bne.n	8008cd4 <HAL_TIM_PWM_Stop+0x84>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6a1a      	ldr	r2, [r3, #32]
 8008cba:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d107      	bne.n	8008cd4 <HAL_TIM_PWM_Stop+0x84>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008cd2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6a1a      	ldr	r2, [r3, #32]
 8008cda:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008cde:	4013      	ands	r3, r2
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10f      	bne.n	8008d04 <HAL_TIM_PWM_Stop+0xb4>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6a1a      	ldr	r2, [r3, #32]
 8008cea:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008cee:	4013      	ands	r3, r2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d107      	bne.n	8008d04 <HAL_TIM_PWM_Stop+0xb4>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f022 0201 	bic.w	r2, r2, #1
 8008d02:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d104      	bne.n	8008d14 <HAL_TIM_PWM_Stop+0xc4>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d12:	e023      	b.n	8008d5c <HAL_TIM_PWM_Stop+0x10c>
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	2b04      	cmp	r3, #4
 8008d18:	d104      	bne.n	8008d24 <HAL_TIM_PWM_Stop+0xd4>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d22:	e01b      	b.n	8008d5c <HAL_TIM_PWM_Stop+0x10c>
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2b08      	cmp	r3, #8
 8008d28:	d104      	bne.n	8008d34 <HAL_TIM_PWM_Stop+0xe4>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d32:	e013      	b.n	8008d5c <HAL_TIM_PWM_Stop+0x10c>
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2b0c      	cmp	r3, #12
 8008d38:	d104      	bne.n	8008d44 <HAL_TIM_PWM_Stop+0xf4>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d42:	e00b      	b.n	8008d5c <HAL_TIM_PWM_Stop+0x10c>
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	2b10      	cmp	r3, #16
 8008d48:	d104      	bne.n	8008d54 <HAL_TIM_PWM_Stop+0x104>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d52:	e003      	b.n	8008d5c <HAL_TIM_PWM_Stop+0x10c>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	40012c00 	.word	0x40012c00
 8008d6c:	40013400 	.word	0x40013400
 8008d70:	40014000 	.word	0x40014000
 8008d74:	40014400 	.word	0x40014400
 8008d78:	40014800 	.word	0x40014800

08008d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d020      	beq.n	8008de0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f003 0302 	and.w	r3, r3, #2
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d01b      	beq.n	8008de0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f06f 0202 	mvn.w	r2, #2
 8008db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	f003 0303 	and.w	r3, r3, #3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f004 fb42 	bl	800d450 <HAL_TIM_IC_CaptureCallback>
 8008dcc:	e005      	b.n	8008dda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fb3c 	bl	800944c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fb43 	bl	8009460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f003 0304 	and.w	r3, r3, #4
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d020      	beq.n	8008e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f003 0304 	and.w	r3, r3, #4
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d01b      	beq.n	8008e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f06f 0204 	mvn.w	r2, #4
 8008dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2202      	movs	r2, #2
 8008e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f004 fb1c 	bl	800d450 <HAL_TIM_IC_CaptureCallback>
 8008e18:	e005      	b.n	8008e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fb16 	bl	800944c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fb1d 	bl	8009460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f003 0308 	and.w	r3, r3, #8
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d020      	beq.n	8008e78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f003 0308 	and.w	r3, r3, #8
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d01b      	beq.n	8008e78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f06f 0208 	mvn.w	r2, #8
 8008e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2204      	movs	r2, #4
 8008e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d003      	beq.n	8008e66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f004 faf6 	bl	800d450 <HAL_TIM_IC_CaptureCallback>
 8008e64:	e005      	b.n	8008e72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 faf0 	bl	800944c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 faf7 	bl	8009460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	f003 0310 	and.w	r3, r3, #16
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d020      	beq.n	8008ec4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f003 0310 	and.w	r3, r3, #16
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d01b      	beq.n	8008ec4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f06f 0210 	mvn.w	r2, #16
 8008e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2208      	movs	r2, #8
 8008e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d003      	beq.n	8008eb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f004 fad0 	bl	800d450 <HAL_TIM_IC_CaptureCallback>
 8008eb0:	e005      	b.n	8008ebe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 faca 	bl	800944c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fad1 	bl	8009460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00c      	beq.n	8008ee8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f003 0301 	and.w	r3, r3, #1
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d007      	beq.n	8008ee8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f06f 0201 	mvn.w	r2, #1
 8008ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 faa8 	bl	8009438 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d104      	bne.n	8008efc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00c      	beq.n	8008f16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d007      	beq.n	8008f16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f001 fbbf 	bl	800a694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00c      	beq.n	8008f3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d007      	beq.n	8008f3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 fbb7 	bl	800a6a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00c      	beq.n	8008f5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d007      	beq.n	8008f5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fa8b 	bl	8009474 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f003 0320 	and.w	r3, r3, #32
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00c      	beq.n	8008f82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f003 0320 	and.w	r3, r3, #32
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d007      	beq.n	8008f82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f06f 0220 	mvn.w	r2, #32
 8008f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 fb7f 	bl	800a680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00c      	beq.n	8008fa6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d007      	beq.n	8008fa6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f001 fb8b 	bl	800a6bc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00c      	beq.n	8008fca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d007      	beq.n	8008fca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f001 fb83 	bl	800a6d0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00c      	beq.n	8008fee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d007      	beq.n	8008fee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f001 fb7b 	bl	800a6e4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00c      	beq.n	8009012 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d007      	beq.n	8009012 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800900a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f001 fb73 	bl	800a6f8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009012:	bf00      	nop
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
	...

0800901c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009032:	2b01      	cmp	r3, #1
 8009034:	d101      	bne.n	800903a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009036:	2302      	movs	r3, #2
 8009038:	e0ff      	b.n	800923a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b14      	cmp	r3, #20
 8009046:	f200 80f0 	bhi.w	800922a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800904a:	a201      	add	r2, pc, #4	@ (adr r2, 8009050 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800904c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009050:	080090a5 	.word	0x080090a5
 8009054:	0800922b 	.word	0x0800922b
 8009058:	0800922b 	.word	0x0800922b
 800905c:	0800922b 	.word	0x0800922b
 8009060:	080090e5 	.word	0x080090e5
 8009064:	0800922b 	.word	0x0800922b
 8009068:	0800922b 	.word	0x0800922b
 800906c:	0800922b 	.word	0x0800922b
 8009070:	08009127 	.word	0x08009127
 8009074:	0800922b 	.word	0x0800922b
 8009078:	0800922b 	.word	0x0800922b
 800907c:	0800922b 	.word	0x0800922b
 8009080:	08009167 	.word	0x08009167
 8009084:	0800922b 	.word	0x0800922b
 8009088:	0800922b 	.word	0x0800922b
 800908c:	0800922b 	.word	0x0800922b
 8009090:	080091a9 	.word	0x080091a9
 8009094:	0800922b 	.word	0x0800922b
 8009098:	0800922b 	.word	0x0800922b
 800909c:	0800922b 	.word	0x0800922b
 80090a0:	080091e9 	.word	0x080091e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68b9      	ldr	r1, [r7, #8]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 fa88 	bl	80095c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	699a      	ldr	r2, [r3, #24]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f042 0208 	orr.w	r2, r2, #8
 80090be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	699a      	ldr	r2, [r3, #24]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f022 0204 	bic.w	r2, r2, #4
 80090ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6999      	ldr	r1, [r3, #24]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	691a      	ldr	r2, [r3, #16]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	430a      	orrs	r2, r1
 80090e0:	619a      	str	r2, [r3, #24]
      break;
 80090e2:	e0a5      	b.n	8009230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68b9      	ldr	r1, [r7, #8]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 faf8 	bl	80096e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	699a      	ldr	r2, [r3, #24]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	699a      	ldr	r2, [r3, #24]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800910e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6999      	ldr	r1, [r3, #24]
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	021a      	lsls	r2, r3, #8
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	430a      	orrs	r2, r1
 8009122:	619a      	str	r2, [r3, #24]
      break;
 8009124:	e084      	b.n	8009230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68b9      	ldr	r1, [r7, #8]
 800912c:	4618      	mov	r0, r3
 800912e:	f000 fb61 	bl	80097f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69da      	ldr	r2, [r3, #28]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f042 0208 	orr.w	r2, r2, #8
 8009140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	69da      	ldr	r2, [r3, #28]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f022 0204 	bic.w	r2, r2, #4
 8009150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69d9      	ldr	r1, [r3, #28]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	691a      	ldr	r2, [r3, #16]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	430a      	orrs	r2, r1
 8009162:	61da      	str	r2, [r3, #28]
      break;
 8009164:	e064      	b.n	8009230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	4618      	mov	r0, r3
 800916e:	f000 fbc9 	bl	8009904 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	69da      	ldr	r2, [r3, #28]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	69da      	ldr	r2, [r3, #28]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	69d9      	ldr	r1, [r3, #28]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	021a      	lsls	r2, r3, #8
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	430a      	orrs	r2, r1
 80091a4:	61da      	str	r2, [r3, #28]
      break;
 80091a6:	e043      	b.n	8009230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68b9      	ldr	r1, [r7, #8]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 fc32 	bl	8009a18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f042 0208 	orr.w	r2, r2, #8
 80091c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f022 0204 	bic.w	r2, r2, #4
 80091d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	691a      	ldr	r2, [r3, #16]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	430a      	orrs	r2, r1
 80091e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80091e6:	e023      	b.n	8009230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68b9      	ldr	r1, [r7, #8]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 fc76 	bl	8009ae0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009202:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009212:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	021a      	lsls	r2, r3, #8
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	430a      	orrs	r2, r1
 8009226:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009228:	e002      	b.n	8009230 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	75fb      	strb	r3, [r7, #23]
      break;
 800922e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009238:	7dfb      	ldrb	r3, [r7, #23]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop

08009244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800924e:	2300      	movs	r3, #0
 8009250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009258:	2b01      	cmp	r3, #1
 800925a:	d101      	bne.n	8009260 <HAL_TIM_ConfigClockSource+0x1c>
 800925c:	2302      	movs	r3, #2
 800925e:	e0de      	b.n	800941e <HAL_TIM_ConfigClockSource+0x1da>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2202      	movs	r2, #2
 800926c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800927e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800928a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a63      	ldr	r2, [pc, #396]	@ (8009428 <HAL_TIM_ConfigClockSource+0x1e4>)
 800929a:	4293      	cmp	r3, r2
 800929c:	f000 80a9 	beq.w	80093f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80092a0:	4a61      	ldr	r2, [pc, #388]	@ (8009428 <HAL_TIM_ConfigClockSource+0x1e4>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	f200 80ae 	bhi.w	8009404 <HAL_TIM_ConfigClockSource+0x1c0>
 80092a8:	4a60      	ldr	r2, [pc, #384]	@ (800942c <HAL_TIM_ConfigClockSource+0x1e8>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	f000 80a1 	beq.w	80093f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80092b0:	4a5e      	ldr	r2, [pc, #376]	@ (800942c <HAL_TIM_ConfigClockSource+0x1e8>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	f200 80a6 	bhi.w	8009404 <HAL_TIM_ConfigClockSource+0x1c0>
 80092b8:	4a5d      	ldr	r2, [pc, #372]	@ (8009430 <HAL_TIM_ConfigClockSource+0x1ec>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	f000 8099 	beq.w	80093f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80092c0:	4a5b      	ldr	r2, [pc, #364]	@ (8009430 <HAL_TIM_ConfigClockSource+0x1ec>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	f200 809e 	bhi.w	8009404 <HAL_TIM_ConfigClockSource+0x1c0>
 80092c8:	4a5a      	ldr	r2, [pc, #360]	@ (8009434 <HAL_TIM_ConfigClockSource+0x1f0>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	f000 8091 	beq.w	80093f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80092d0:	4a58      	ldr	r2, [pc, #352]	@ (8009434 <HAL_TIM_ConfigClockSource+0x1f0>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	f200 8096 	bhi.w	8009404 <HAL_TIM_ConfigClockSource+0x1c0>
 80092d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092dc:	f000 8089 	beq.w	80093f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80092e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092e4:	f200 808e 	bhi.w	8009404 <HAL_TIM_ConfigClockSource+0x1c0>
 80092e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092ec:	d03e      	beq.n	800936c <HAL_TIM_ConfigClockSource+0x128>
 80092ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092f2:	f200 8087 	bhi.w	8009404 <HAL_TIM_ConfigClockSource+0x1c0>
 80092f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092fa:	f000 8086 	beq.w	800940a <HAL_TIM_ConfigClockSource+0x1c6>
 80092fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009302:	d87f      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x1c0>
 8009304:	2b70      	cmp	r3, #112	@ 0x70
 8009306:	d01a      	beq.n	800933e <HAL_TIM_ConfigClockSource+0xfa>
 8009308:	2b70      	cmp	r3, #112	@ 0x70
 800930a:	d87b      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x1c0>
 800930c:	2b60      	cmp	r3, #96	@ 0x60
 800930e:	d050      	beq.n	80093b2 <HAL_TIM_ConfigClockSource+0x16e>
 8009310:	2b60      	cmp	r3, #96	@ 0x60
 8009312:	d877      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x1c0>
 8009314:	2b50      	cmp	r3, #80	@ 0x50
 8009316:	d03c      	beq.n	8009392 <HAL_TIM_ConfigClockSource+0x14e>
 8009318:	2b50      	cmp	r3, #80	@ 0x50
 800931a:	d873      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x1c0>
 800931c:	2b40      	cmp	r3, #64	@ 0x40
 800931e:	d058      	beq.n	80093d2 <HAL_TIM_ConfigClockSource+0x18e>
 8009320:	2b40      	cmp	r3, #64	@ 0x40
 8009322:	d86f      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x1c0>
 8009324:	2b30      	cmp	r3, #48	@ 0x30
 8009326:	d064      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009328:	2b30      	cmp	r3, #48	@ 0x30
 800932a:	d86b      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x1c0>
 800932c:	2b20      	cmp	r3, #32
 800932e:	d060      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009330:	2b20      	cmp	r3, #32
 8009332:	d867      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x1c0>
 8009334:	2b00      	cmp	r3, #0
 8009336:	d05c      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009338:	2b10      	cmp	r3, #16
 800933a:	d05a      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x1ae>
 800933c:	e062      	b.n	8009404 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800934e:	f000 fd11 	bl	8009d74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	609a      	str	r2, [r3, #8]
      break;
 800936a:	e04f      	b.n	800940c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800937c:	f000 fcfa 	bl	8009d74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689a      	ldr	r2, [r3, #8]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800938e:	609a      	str	r2, [r3, #8]
      break;
 8009390:	e03c      	b.n	800940c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800939e:	461a      	mov	r2, r3
 80093a0:	f000 fc6c 	bl	8009c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2150      	movs	r1, #80	@ 0x50
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 fcc5 	bl	8009d3a <TIM_ITRx_SetConfig>
      break;
 80093b0:	e02c      	b.n	800940c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093be:	461a      	mov	r2, r3
 80093c0:	f000 fc8b 	bl	8009cda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2160      	movs	r1, #96	@ 0x60
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 fcb5 	bl	8009d3a <TIM_ITRx_SetConfig>
      break;
 80093d0:	e01c      	b.n	800940c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093de:	461a      	mov	r2, r3
 80093e0:	f000 fc4c 	bl	8009c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2140      	movs	r1, #64	@ 0x40
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 fca5 	bl	8009d3a <TIM_ITRx_SetConfig>
      break;
 80093f0:	e00c      	b.n	800940c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4619      	mov	r1, r3
 80093fc:	4610      	mov	r0, r2
 80093fe:	f000 fc9c 	bl	8009d3a <TIM_ITRx_SetConfig>
      break;
 8009402:	e003      	b.n	800940c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	73fb      	strb	r3, [r7, #15]
      break;
 8009408:	e000      	b.n	800940c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800940a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800941c:	7bfb      	ldrb	r3, [r7, #15]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	00100070 	.word	0x00100070
 800942c:	00100040 	.word	0x00100040
 8009430:	00100030 	.word	0x00100030
 8009434:	00100020 	.word	0x00100020

08009438 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a42      	ldr	r2, [pc, #264]	@ (80095a4 <TIM_Base_SetConfig+0x11c>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d00f      	beq.n	80094c0 <TIM_Base_SetConfig+0x38>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094a6:	d00b      	beq.n	80094c0 <TIM_Base_SetConfig+0x38>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a3f      	ldr	r2, [pc, #252]	@ (80095a8 <TIM_Base_SetConfig+0x120>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d007      	beq.n	80094c0 <TIM_Base_SetConfig+0x38>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a3e      	ldr	r2, [pc, #248]	@ (80095ac <TIM_Base_SetConfig+0x124>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d003      	beq.n	80094c0 <TIM_Base_SetConfig+0x38>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a3d      	ldr	r2, [pc, #244]	@ (80095b0 <TIM_Base_SetConfig+0x128>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d108      	bne.n	80094d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a33      	ldr	r2, [pc, #204]	@ (80095a4 <TIM_Base_SetConfig+0x11c>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d01b      	beq.n	8009512 <TIM_Base_SetConfig+0x8a>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094e0:	d017      	beq.n	8009512 <TIM_Base_SetConfig+0x8a>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a30      	ldr	r2, [pc, #192]	@ (80095a8 <TIM_Base_SetConfig+0x120>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d013      	beq.n	8009512 <TIM_Base_SetConfig+0x8a>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a2f      	ldr	r2, [pc, #188]	@ (80095ac <TIM_Base_SetConfig+0x124>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d00f      	beq.n	8009512 <TIM_Base_SetConfig+0x8a>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a2e      	ldr	r2, [pc, #184]	@ (80095b0 <TIM_Base_SetConfig+0x128>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d00b      	beq.n	8009512 <TIM_Base_SetConfig+0x8a>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a2d      	ldr	r2, [pc, #180]	@ (80095b4 <TIM_Base_SetConfig+0x12c>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d007      	beq.n	8009512 <TIM_Base_SetConfig+0x8a>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a2c      	ldr	r2, [pc, #176]	@ (80095b8 <TIM_Base_SetConfig+0x130>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d003      	beq.n	8009512 <TIM_Base_SetConfig+0x8a>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a2b      	ldr	r2, [pc, #172]	@ (80095bc <TIM_Base_SetConfig+0x134>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d108      	bne.n	8009524 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	4313      	orrs	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	4313      	orrs	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	689a      	ldr	r2, [r3, #8]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a16      	ldr	r2, [pc, #88]	@ (80095a4 <TIM_Base_SetConfig+0x11c>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d00f      	beq.n	8009570 <TIM_Base_SetConfig+0xe8>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a17      	ldr	r2, [pc, #92]	@ (80095b0 <TIM_Base_SetConfig+0x128>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d00b      	beq.n	8009570 <TIM_Base_SetConfig+0xe8>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a16      	ldr	r2, [pc, #88]	@ (80095b4 <TIM_Base_SetConfig+0x12c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d007      	beq.n	8009570 <TIM_Base_SetConfig+0xe8>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a15      	ldr	r2, [pc, #84]	@ (80095b8 <TIM_Base_SetConfig+0x130>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d003      	beq.n	8009570 <TIM_Base_SetConfig+0xe8>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a14      	ldr	r2, [pc, #80]	@ (80095bc <TIM_Base_SetConfig+0x134>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d103      	bne.n	8009578 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	691a      	ldr	r2, [r3, #16]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	2b01      	cmp	r3, #1
 8009588:	d105      	bne.n	8009596 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	f023 0201 	bic.w	r2, r3, #1
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	611a      	str	r2, [r3, #16]
  }
}
 8009596:	bf00      	nop
 8009598:	3714      	adds	r7, #20
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	40012c00 	.word	0x40012c00
 80095a8:	40000400 	.word	0x40000400
 80095ac:	40000800 	.word	0x40000800
 80095b0:	40013400 	.word	0x40013400
 80095b4:	40014000 	.word	0x40014000
 80095b8:	40014400 	.word	0x40014400
 80095bc:	40014800 	.word	0x40014800

080095c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a1b      	ldr	r3, [r3, #32]
 80095d4:	f023 0201 	bic.w	r2, r3, #1
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f023 0303 	bic.w	r3, r3, #3
 80095fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	4313      	orrs	r3, r2
 8009604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f023 0302 	bic.w	r3, r3, #2
 800960c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	4313      	orrs	r3, r2
 8009616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a2c      	ldr	r2, [pc, #176]	@ (80096cc <TIM_OC1_SetConfig+0x10c>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d00f      	beq.n	8009640 <TIM_OC1_SetConfig+0x80>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a2b      	ldr	r2, [pc, #172]	@ (80096d0 <TIM_OC1_SetConfig+0x110>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d00b      	beq.n	8009640 <TIM_OC1_SetConfig+0x80>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a2a      	ldr	r2, [pc, #168]	@ (80096d4 <TIM_OC1_SetConfig+0x114>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d007      	beq.n	8009640 <TIM_OC1_SetConfig+0x80>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a29      	ldr	r2, [pc, #164]	@ (80096d8 <TIM_OC1_SetConfig+0x118>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d003      	beq.n	8009640 <TIM_OC1_SetConfig+0x80>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a28      	ldr	r2, [pc, #160]	@ (80096dc <TIM_OC1_SetConfig+0x11c>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d10c      	bne.n	800965a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	f023 0308 	bic.w	r3, r3, #8
 8009646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	4313      	orrs	r3, r2
 8009650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f023 0304 	bic.w	r3, r3, #4
 8009658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a1b      	ldr	r2, [pc, #108]	@ (80096cc <TIM_OC1_SetConfig+0x10c>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d00f      	beq.n	8009682 <TIM_OC1_SetConfig+0xc2>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a1a      	ldr	r2, [pc, #104]	@ (80096d0 <TIM_OC1_SetConfig+0x110>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d00b      	beq.n	8009682 <TIM_OC1_SetConfig+0xc2>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a19      	ldr	r2, [pc, #100]	@ (80096d4 <TIM_OC1_SetConfig+0x114>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d007      	beq.n	8009682 <TIM_OC1_SetConfig+0xc2>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a18      	ldr	r2, [pc, #96]	@ (80096d8 <TIM_OC1_SetConfig+0x118>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d003      	beq.n	8009682 <TIM_OC1_SetConfig+0xc2>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a17      	ldr	r2, [pc, #92]	@ (80096dc <TIM_OC1_SetConfig+0x11c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d111      	bne.n	80096a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	4313      	orrs	r3, r2
 800969a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	685a      	ldr	r2, [r3, #4]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	697a      	ldr	r2, [r7, #20]
 80096be:	621a      	str	r2, [r3, #32]
}
 80096c0:	bf00      	nop
 80096c2:	371c      	adds	r7, #28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	40012c00 	.word	0x40012c00
 80096d0:	40013400 	.word	0x40013400
 80096d4:	40014000 	.word	0x40014000
 80096d8:	40014400 	.word	0x40014400
 80096dc:	40014800 	.word	0x40014800

080096e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	f023 0210 	bic.w	r2, r3, #16
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800970e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800971a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	021b      	lsls	r3, r3, #8
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	4313      	orrs	r3, r2
 8009726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f023 0320 	bic.w	r3, r3, #32
 800972e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	011b      	lsls	r3, r3, #4
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	4313      	orrs	r3, r2
 800973a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a28      	ldr	r2, [pc, #160]	@ (80097e0 <TIM_OC2_SetConfig+0x100>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d003      	beq.n	800974c <TIM_OC2_SetConfig+0x6c>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a27      	ldr	r2, [pc, #156]	@ (80097e4 <TIM_OC2_SetConfig+0x104>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d10d      	bne.n	8009768 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	011b      	lsls	r3, r3, #4
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	4313      	orrs	r3, r2
 800975e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009766:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a1d      	ldr	r2, [pc, #116]	@ (80097e0 <TIM_OC2_SetConfig+0x100>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d00f      	beq.n	8009790 <TIM_OC2_SetConfig+0xb0>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a1c      	ldr	r2, [pc, #112]	@ (80097e4 <TIM_OC2_SetConfig+0x104>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d00b      	beq.n	8009790 <TIM_OC2_SetConfig+0xb0>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a1b      	ldr	r2, [pc, #108]	@ (80097e8 <TIM_OC2_SetConfig+0x108>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d007      	beq.n	8009790 <TIM_OC2_SetConfig+0xb0>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a1a      	ldr	r2, [pc, #104]	@ (80097ec <TIM_OC2_SetConfig+0x10c>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d003      	beq.n	8009790 <TIM_OC2_SetConfig+0xb0>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a19      	ldr	r2, [pc, #100]	@ (80097f0 <TIM_OC2_SetConfig+0x110>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d113      	bne.n	80097b8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009796:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800979e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	695b      	ldr	r3, [r3, #20]
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	685a      	ldr	r2, [r3, #4]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	621a      	str	r2, [r3, #32]
}
 80097d2:	bf00      	nop
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	40012c00 	.word	0x40012c00
 80097e4:	40013400 	.word	0x40013400
 80097e8:	40014000 	.word	0x40014000
 80097ec:	40014400 	.word	0x40014400
 80097f0:	40014800 	.word	0x40014800

080097f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	69db      	ldr	r3, [r3, #28]
 800981a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f023 0303 	bic.w	r3, r3, #3
 800982e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	4313      	orrs	r3, r2
 8009838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	021b      	lsls	r3, r3, #8
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	4313      	orrs	r3, r2
 800984c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a27      	ldr	r2, [pc, #156]	@ (80098f0 <TIM_OC3_SetConfig+0xfc>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d003      	beq.n	800985e <TIM_OC3_SetConfig+0x6a>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a26      	ldr	r2, [pc, #152]	@ (80098f4 <TIM_OC3_SetConfig+0x100>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d10d      	bne.n	800987a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009864:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	021b      	lsls	r3, r3, #8
 800986c:	697a      	ldr	r2, [r7, #20]
 800986e:	4313      	orrs	r3, r2
 8009870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a1c      	ldr	r2, [pc, #112]	@ (80098f0 <TIM_OC3_SetConfig+0xfc>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d00f      	beq.n	80098a2 <TIM_OC3_SetConfig+0xae>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a1b      	ldr	r2, [pc, #108]	@ (80098f4 <TIM_OC3_SetConfig+0x100>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d00b      	beq.n	80098a2 <TIM_OC3_SetConfig+0xae>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a1a      	ldr	r2, [pc, #104]	@ (80098f8 <TIM_OC3_SetConfig+0x104>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d007      	beq.n	80098a2 <TIM_OC3_SetConfig+0xae>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a19      	ldr	r2, [pc, #100]	@ (80098fc <TIM_OC3_SetConfig+0x108>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d003      	beq.n	80098a2 <TIM_OC3_SetConfig+0xae>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a18      	ldr	r2, [pc, #96]	@ (8009900 <TIM_OC3_SetConfig+0x10c>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d113      	bne.n	80098ca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80098b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	011b      	lsls	r3, r3, #4
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	011b      	lsls	r3, r3, #4
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	621a      	str	r2, [r3, #32]
}
 80098e4:	bf00      	nop
 80098e6:	371c      	adds	r7, #28
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr
 80098f0:	40012c00 	.word	0x40012c00
 80098f4:	40013400 	.word	0x40013400
 80098f8:	40014000 	.word	0x40014000
 80098fc:	40014400 	.word	0x40014400
 8009900:	40014800 	.word	0x40014800

08009904 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009904:	b480      	push	{r7}
 8009906:	b087      	sub	sp, #28
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a1b      	ldr	r3, [r3, #32]
 8009918:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800993e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	021b      	lsls	r3, r3, #8
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	4313      	orrs	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	031b      	lsls	r3, r3, #12
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	4313      	orrs	r3, r2
 800995e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a28      	ldr	r2, [pc, #160]	@ (8009a04 <TIM_OC4_SetConfig+0x100>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d003      	beq.n	8009970 <TIM_OC4_SetConfig+0x6c>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a27      	ldr	r2, [pc, #156]	@ (8009a08 <TIM_OC4_SetConfig+0x104>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d10d      	bne.n	800998c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	031b      	lsls	r3, r3, #12
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	4313      	orrs	r3, r2
 8009982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800998a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4a1d      	ldr	r2, [pc, #116]	@ (8009a04 <TIM_OC4_SetConfig+0x100>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d00f      	beq.n	80099b4 <TIM_OC4_SetConfig+0xb0>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a1c      	ldr	r2, [pc, #112]	@ (8009a08 <TIM_OC4_SetConfig+0x104>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d00b      	beq.n	80099b4 <TIM_OC4_SetConfig+0xb0>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a1b      	ldr	r2, [pc, #108]	@ (8009a0c <TIM_OC4_SetConfig+0x108>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d007      	beq.n	80099b4 <TIM_OC4_SetConfig+0xb0>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a1a      	ldr	r2, [pc, #104]	@ (8009a10 <TIM_OC4_SetConfig+0x10c>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d003      	beq.n	80099b4 <TIM_OC4_SetConfig+0xb0>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a19      	ldr	r2, [pc, #100]	@ (8009a14 <TIM_OC4_SetConfig+0x110>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d113      	bne.n	80099dc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099ba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80099c2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	695b      	ldr	r3, [r3, #20]
 80099c8:	019b      	lsls	r3, r3, #6
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	019b      	lsls	r3, r3, #6
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	4313      	orrs	r3, r2
 80099da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	693a      	ldr	r2, [r7, #16]
 80099e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	621a      	str	r2, [r3, #32]
}
 80099f6:	bf00      	nop
 80099f8:	371c      	adds	r7, #28
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	40012c00 	.word	0x40012c00
 8009a08:	40013400 	.word	0x40013400
 8009a0c:	40014000 	.word	0x40014000
 8009a10:	40014400 	.word	0x40014400
 8009a14:	40014800 	.word	0x40014800

08009a18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a1b      	ldr	r3, [r3, #32]
 8009a2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009a5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	041b      	lsls	r3, r3, #16
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a17      	ldr	r2, [pc, #92]	@ (8009acc <TIM_OC5_SetConfig+0xb4>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d00f      	beq.n	8009a92 <TIM_OC5_SetConfig+0x7a>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a16      	ldr	r2, [pc, #88]	@ (8009ad0 <TIM_OC5_SetConfig+0xb8>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d00b      	beq.n	8009a92 <TIM_OC5_SetConfig+0x7a>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a15      	ldr	r2, [pc, #84]	@ (8009ad4 <TIM_OC5_SetConfig+0xbc>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d007      	beq.n	8009a92 <TIM_OC5_SetConfig+0x7a>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a14      	ldr	r2, [pc, #80]	@ (8009ad8 <TIM_OC5_SetConfig+0xc0>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d003      	beq.n	8009a92 <TIM_OC5_SetConfig+0x7a>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a13      	ldr	r2, [pc, #76]	@ (8009adc <TIM_OC5_SetConfig+0xc4>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d109      	bne.n	8009aa6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	021b      	lsls	r3, r3, #8
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	621a      	str	r2, [r3, #32]
}
 8009ac0:	bf00      	nop
 8009ac2:	371c      	adds	r7, #28
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	40012c00 	.word	0x40012c00
 8009ad0:	40013400 	.word	0x40013400
 8009ad4:	40014000 	.word	0x40014000
 8009ad8:	40014400 	.word	0x40014400
 8009adc:	40014800 	.word	0x40014800

08009ae0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b087      	sub	sp, #28
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a1b      	ldr	r3, [r3, #32]
 8009af4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	021b      	lsls	r3, r3, #8
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	051b      	lsls	r3, r3, #20
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a18      	ldr	r2, [pc, #96]	@ (8009b98 <TIM_OC6_SetConfig+0xb8>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d00f      	beq.n	8009b5c <TIM_OC6_SetConfig+0x7c>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a17      	ldr	r2, [pc, #92]	@ (8009b9c <TIM_OC6_SetConfig+0xbc>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d00b      	beq.n	8009b5c <TIM_OC6_SetConfig+0x7c>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a16      	ldr	r2, [pc, #88]	@ (8009ba0 <TIM_OC6_SetConfig+0xc0>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d007      	beq.n	8009b5c <TIM_OC6_SetConfig+0x7c>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a15      	ldr	r2, [pc, #84]	@ (8009ba4 <TIM_OC6_SetConfig+0xc4>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d003      	beq.n	8009b5c <TIM_OC6_SetConfig+0x7c>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a14      	ldr	r2, [pc, #80]	@ (8009ba8 <TIM_OC6_SetConfig+0xc8>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d109      	bne.n	8009b70 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	695b      	ldr	r3, [r3, #20]
 8009b68:	029b      	lsls	r3, r3, #10
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	621a      	str	r2, [r3, #32]
}
 8009b8a:	bf00      	nop
 8009b8c:	371c      	adds	r7, #28
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	40012c00 	.word	0x40012c00
 8009b9c:	40013400 	.word	0x40013400
 8009ba0:	40014000 	.word	0x40014000
 8009ba4:	40014400 	.word	0x40014400
 8009ba8:	40014800 	.word	0x40014800

08009bac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b087      	sub	sp, #28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6a1b      	ldr	r3, [r3, #32]
 8009bc4:	f023 0201 	bic.w	r2, r3, #1
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	4a24      	ldr	r2, [pc, #144]	@ (8009c68 <TIM_TI1_SetConfig+0xbc>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d013      	beq.n	8009c02 <TIM_TI1_SetConfig+0x56>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009be0:	d00f      	beq.n	8009c02 <TIM_TI1_SetConfig+0x56>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4a21      	ldr	r2, [pc, #132]	@ (8009c6c <TIM_TI1_SetConfig+0xc0>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d00b      	beq.n	8009c02 <TIM_TI1_SetConfig+0x56>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	4a20      	ldr	r2, [pc, #128]	@ (8009c70 <TIM_TI1_SetConfig+0xc4>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d007      	beq.n	8009c02 <TIM_TI1_SetConfig+0x56>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8009c74 <TIM_TI1_SetConfig+0xc8>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d003      	beq.n	8009c02 <TIM_TI1_SetConfig+0x56>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8009c78 <TIM_TI1_SetConfig+0xcc>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d101      	bne.n	8009c06 <TIM_TI1_SetConfig+0x5a>
 8009c02:	2301      	movs	r3, #1
 8009c04:	e000      	b.n	8009c08 <TIM_TI1_SetConfig+0x5c>
 8009c06:	2300      	movs	r3, #0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d008      	beq.n	8009c1e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	f023 0303 	bic.w	r3, r3, #3
 8009c12:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	617b      	str	r3, [r7, #20]
 8009c1c:	e003      	b.n	8009c26 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f043 0301 	orr.w	r3, r3, #1
 8009c24:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	011b      	lsls	r3, r3, #4
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	f023 030a 	bic.w	r3, r3, #10
 8009c40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	f003 030a 	and.w	r3, r3, #10
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	621a      	str	r2, [r3, #32]
}
 8009c5a:	bf00      	nop
 8009c5c:	371c      	adds	r7, #28
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	40012c00 	.word	0x40012c00
 8009c6c:	40000400 	.word	0x40000400
 8009c70:	40000800 	.word	0x40000800
 8009c74:	40013400 	.word	0x40013400
 8009c78:	40014000 	.word	0x40014000

08009c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b087      	sub	sp, #28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
 8009c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	f023 0201 	bic.w	r2, r3, #1
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	011b      	lsls	r3, r3, #4
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	f023 030a 	bic.w	r3, r3, #10
 8009cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	621a      	str	r2, [r3, #32]
}
 8009cce:	bf00      	nop
 8009cd0:	371c      	adds	r7, #28
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b087      	sub	sp, #28
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	60b9      	str	r1, [r7, #8]
 8009ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6a1b      	ldr	r3, [r3, #32]
 8009cf0:	f023 0210 	bic.w	r2, r3, #16
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009d04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	031b      	lsls	r3, r3, #12
 8009d0a:	693a      	ldr	r2, [r7, #16]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009d16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	011b      	lsls	r3, r3, #4
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	697a      	ldr	r2, [r7, #20]
 8009d2c:	621a      	str	r2, [r3, #32]
}
 8009d2e:	bf00      	nop
 8009d30:	371c      	adds	r7, #28
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b085      	sub	sp, #20
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	f043 0307 	orr.w	r3, r3, #7
 8009d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	609a      	str	r2, [r3, #8]
}
 8009d68:	bf00      	nop
 8009d6a:	3714      	adds	r7, #20
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b087      	sub	sp, #28
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
 8009d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	021a      	lsls	r2, r3, #8
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	431a      	orrs	r2, r3
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	697a      	ldr	r2, [r7, #20]
 8009da6:	609a      	str	r2, [r3, #8]
}
 8009da8:	bf00      	nop
 8009daa:	371c      	adds	r7, #28
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	f003 031f 	and.w	r3, r3, #31
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6a1a      	ldr	r2, [r3, #32]
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	43db      	mvns	r3, r3
 8009dd6:	401a      	ands	r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6a1a      	ldr	r2, [r3, #32]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	f003 031f 	and.w	r3, r3, #31
 8009de6:	6879      	ldr	r1, [r7, #4]
 8009de8:	fa01 f303 	lsl.w	r3, r1, r3
 8009dec:	431a      	orrs	r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	621a      	str	r2, [r3, #32]
}
 8009df2:	bf00      	nop
 8009df4:	371c      	adds	r7, #28
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b08a      	sub	sp, #40	@ 0x28
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
 8009e06:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e0a0      	b.n	8009f54 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d106      	bne.n	8009e2c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f898 	bl	8009f5c <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	4610      	mov	r0, r2
 8009e40:	f7ff fb22 	bl	8009488 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6818      	ldr	r0, [r3, #0]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	6819      	ldr	r1, [r3, #0]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	2203      	movs	r2, #3
 8009e52:	f7ff feab 	bl	8009bac <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	699a      	ldr	r2, [r3, #24]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f022 020c 	bic.w	r2, r2, #12
 8009e64:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6999      	ldr	r1, [r3, #24]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	685a      	ldr	r2, [r3, #4]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	430a      	orrs	r2, r1
 8009e76:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009e86:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	6812      	ldr	r2, [r2, #0]
 8009e92:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e9a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	689a      	ldr	r2, [r3, #8]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009eaa:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	6812      	ldr	r2, [r2, #0]
 8009eb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009eba:	f023 0307 	bic.w	r3, r3, #7
 8009ebe:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	689a      	ldr	r2, [r3, #8]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f042 0204 	orr.w	r2, r2, #4
 8009ece:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8009ed8:	2370      	movs	r3, #112	@ 0x70
 8009eda:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009edc:	2300      	movs	r3, #0
 8009ede:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f107 020c 	add.w	r2, r7, #12
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7ff fbf1 	bl	80096e0 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	6812      	ldr	r2, [r2, #0]
 8009f08:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f10:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8009f20:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3728      	adds	r7, #40	@ 0x28
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009f7e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009f86:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f8e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f96:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d108      	bne.n	8009fb0 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f9e:	7bbb      	ldrb	r3, [r7, #14]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d105      	bne.n	8009fb0 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fa4:	7b7b      	ldrb	r3, [r7, #13]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d102      	bne.n	8009fb0 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009faa:	7b3b      	ldrb	r3, [r7, #12]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d001      	beq.n	8009fb4 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e05d      	b.n	800a070 <HAL_TIMEx_HallSensor_Start_IT+0x100>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2202      	movs	r2, #2
 8009fd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68da      	ldr	r2, [r3, #12]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f042 0202 	orr.w	r2, r2, #2
 8009fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	2100      	movs	r1, #0
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7ff fee1 	bl	8009db4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a20      	ldr	r2, [pc, #128]	@ (800a078 <HAL_TIMEx_HallSensor_Start_IT+0x108>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d018      	beq.n	800a02e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a004:	d013      	beq.n	800a02e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a1c      	ldr	r2, [pc, #112]	@ (800a07c <HAL_TIMEx_HallSensor_Start_IT+0x10c>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d00e      	beq.n	800a02e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a1a      	ldr	r2, [pc, #104]	@ (800a080 <HAL_TIMEx_HallSensor_Start_IT+0x110>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d009      	beq.n	800a02e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a19      	ldr	r2, [pc, #100]	@ (800a084 <HAL_TIMEx_HallSensor_Start_IT+0x114>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d004      	beq.n	800a02e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a17      	ldr	r2, [pc, #92]	@ (800a088 <HAL_TIMEx_HallSensor_Start_IT+0x118>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d115      	bne.n	800a05a <HAL_TIMEx_HallSensor_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	689a      	ldr	r2, [r3, #8]
 800a034:	4b15      	ldr	r3, [pc, #84]	@ (800a08c <HAL_TIMEx_HallSensor_Start_IT+0x11c>)
 800a036:	4013      	ands	r3, r2
 800a038:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2b06      	cmp	r3, #6
 800a03e:	d015      	beq.n	800a06c <HAL_TIMEx_HallSensor_Start_IT+0xfc>
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a046:	d011      	beq.n	800a06c <HAL_TIMEx_HallSensor_Start_IT+0xfc>
    {
      __HAL_TIM_ENABLE(htim);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f042 0201 	orr.w	r2, r2, #1
 800a056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a058:	e008      	b.n	800a06c <HAL_TIMEx_HallSensor_Start_IT+0xfc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f042 0201 	orr.w	r2, r2, #1
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	e000      	b.n	800a06e <HAL_TIMEx_HallSensor_Start_IT+0xfe>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a06c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	40012c00 	.word	0x40012c00
 800a07c:	40000400 	.word	0x40000400
 800a080:	40000800 	.word	0x40000800
 800a084:	40013400 	.word	0x40013400
 800a088:	40014000 	.word	0x40014000
 800a08c:	00010007 	.word	0x00010007

0800a090 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d109      	bne.n	800a0b4 <HAL_TIMEx_PWMN_Start+0x24>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	bf14      	ite	ne
 800a0ac:	2301      	movne	r3, #1
 800a0ae:	2300      	moveq	r3, #0
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	e022      	b.n	800a0fa <HAL_TIMEx_PWMN_Start+0x6a>
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	2b04      	cmp	r3, #4
 800a0b8:	d109      	bne.n	800a0ce <HAL_TIMEx_PWMN_Start+0x3e>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	bf14      	ite	ne
 800a0c6:	2301      	movne	r3, #1
 800a0c8:	2300      	moveq	r3, #0
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	e015      	b.n	800a0fa <HAL_TIMEx_PWMN_Start+0x6a>
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	2b08      	cmp	r3, #8
 800a0d2:	d109      	bne.n	800a0e8 <HAL_TIMEx_PWMN_Start+0x58>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	bf14      	ite	ne
 800a0e0:	2301      	movne	r3, #1
 800a0e2:	2300      	moveq	r3, #0
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	e008      	b.n	800a0fa <HAL_TIMEx_PWMN_Start+0x6a>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	bf14      	ite	ne
 800a0f4:	2301      	movne	r3, #1
 800a0f6:	2300      	moveq	r3, #0
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d001      	beq.n	800a102 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e069      	b.n	800a1d6 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d104      	bne.n	800a112 <HAL_TIMEx_PWMN_Start+0x82>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2202      	movs	r2, #2
 800a10c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a110:	e013      	b.n	800a13a <HAL_TIMEx_PWMN_Start+0xaa>
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	2b04      	cmp	r3, #4
 800a116:	d104      	bne.n	800a122 <HAL_TIMEx_PWMN_Start+0x92>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a120:	e00b      	b.n	800a13a <HAL_TIMEx_PWMN_Start+0xaa>
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	2b08      	cmp	r3, #8
 800a126:	d104      	bne.n	800a132 <HAL_TIMEx_PWMN_Start+0xa2>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a130:	e003      	b.n	800a13a <HAL_TIMEx_PWMN_Start+0xaa>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2202      	movs	r2, #2
 800a136:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2204      	movs	r2, #4
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	4618      	mov	r0, r3
 800a144:	f000 fae2 	bl	800a70c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a156:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a20      	ldr	r2, [pc, #128]	@ (800a1e0 <HAL_TIMEx_PWMN_Start+0x150>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d018      	beq.n	800a194 <HAL_TIMEx_PWMN_Start+0x104>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a16a:	d013      	beq.n	800a194 <HAL_TIMEx_PWMN_Start+0x104>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a1c      	ldr	r2, [pc, #112]	@ (800a1e4 <HAL_TIMEx_PWMN_Start+0x154>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d00e      	beq.n	800a194 <HAL_TIMEx_PWMN_Start+0x104>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a1b      	ldr	r2, [pc, #108]	@ (800a1e8 <HAL_TIMEx_PWMN_Start+0x158>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d009      	beq.n	800a194 <HAL_TIMEx_PWMN_Start+0x104>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a19      	ldr	r2, [pc, #100]	@ (800a1ec <HAL_TIMEx_PWMN_Start+0x15c>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d004      	beq.n	800a194 <HAL_TIMEx_PWMN_Start+0x104>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a18      	ldr	r2, [pc, #96]	@ (800a1f0 <HAL_TIMEx_PWMN_Start+0x160>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d115      	bne.n	800a1c0 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	689a      	ldr	r2, [r3, #8]
 800a19a:	4b16      	ldr	r3, [pc, #88]	@ (800a1f4 <HAL_TIMEx_PWMN_Start+0x164>)
 800a19c:	4013      	ands	r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2b06      	cmp	r3, #6
 800a1a4:	d015      	beq.n	800a1d2 <HAL_TIMEx_PWMN_Start+0x142>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1ac:	d011      	beq.n	800a1d2 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f042 0201 	orr.w	r2, r2, #1
 800a1bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1be:	e008      	b.n	800a1d2 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f042 0201 	orr.w	r2, r2, #1
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	e000      	b.n	800a1d4 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	40012c00 	.word	0x40012c00
 800a1e4:	40000400 	.word	0x40000400
 800a1e8:	40000800 	.word	0x40000800
 800a1ec:	40013400 	.word	0x40013400
 800a1f0:	40014000 	.word	0x40014000
 800a1f4:	00010007 	.word	0x00010007

0800a1f8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2200      	movs	r2, #0
 800a208:	6839      	ldr	r1, [r7, #0]
 800a20a:	4618      	mov	r0, r3
 800a20c:	f000 fa7e 	bl	800a70c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	6a1a      	ldr	r2, [r3, #32]
 800a216:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a21a:	4013      	ands	r3, r2
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10f      	bne.n	800a240 <HAL_TIMEx_PWMN_Stop+0x48>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6a1a      	ldr	r2, [r3, #32]
 800a226:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a22a:	4013      	ands	r3, r2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d107      	bne.n	800a240 <HAL_TIMEx_PWMN_Stop+0x48>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a23e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	6a1a      	ldr	r2, [r3, #32]
 800a246:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a24a:	4013      	ands	r3, r2
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10f      	bne.n	800a270 <HAL_TIMEx_PWMN_Stop+0x78>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6a1a      	ldr	r2, [r3, #32]
 800a256:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a25a:	4013      	ands	r3, r2
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d107      	bne.n	800a270 <HAL_TIMEx_PWMN_Stop+0x78>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f022 0201 	bic.w	r2, r2, #1
 800a26e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d104      	bne.n	800a280 <HAL_TIMEx_PWMN_Stop+0x88>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a27e:	e013      	b.n	800a2a8 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	2b04      	cmp	r3, #4
 800a284:	d104      	bne.n	800a290 <HAL_TIMEx_PWMN_Stop+0x98>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a28e:	e00b      	b.n	800a2a8 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	2b08      	cmp	r3, #8
 800a294:	d104      	bne.n	800a2a0 <HAL_TIMEx_PWMN_Stop+0xa8>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a29e:	e003      	b.n	800a2a8 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d101      	bne.n	800a2cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2c8:	2302      	movs	r3, #2
 800a2ca:	e065      	b.n	800a398 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2202      	movs	r2, #2
 800a2d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a2c      	ldr	r2, [pc, #176]	@ (800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d004      	beq.n	800a300 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a2b      	ldr	r2, [pc, #172]	@ (800a3a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d108      	bne.n	800a312 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a306:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	4313      	orrs	r3, r2
 800a310:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a31c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	4313      	orrs	r3, r2
 800a326:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a1b      	ldr	r2, [pc, #108]	@ (800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d018      	beq.n	800a36c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a342:	d013      	beq.n	800a36c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a18      	ldr	r2, [pc, #96]	@ (800a3ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d00e      	beq.n	800a36c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a17      	ldr	r2, [pc, #92]	@ (800a3b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d009      	beq.n	800a36c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a12      	ldr	r2, [pc, #72]	@ (800a3a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d004      	beq.n	800a36c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a13      	ldr	r2, [pc, #76]	@ (800a3b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d10c      	bne.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a372:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	40012c00 	.word	0x40012c00
 800a3a8:	40013400 	.word	0x40013400
 800a3ac:	40000400 	.word	0x40000400
 800a3b0:	40000800 	.word	0x40000800
 800a3b4:	40014000 	.word	0x40014000

0800a3b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d101      	bne.n	800a3d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	e073      	b.n	800a4bc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	4313      	orrs	r3, r2
 800a404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4313      	orrs	r3, r2
 800a412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	4313      	orrs	r3, r2
 800a420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a43a:	4313      	orrs	r3, r2
 800a43c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	699b      	ldr	r3, [r3, #24]
 800a448:	041b      	lsls	r3, r3, #16
 800a44a:	4313      	orrs	r3, r2
 800a44c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	69db      	ldr	r3, [r3, #28]
 800a458:	4313      	orrs	r3, r2
 800a45a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a19      	ldr	r2, [pc, #100]	@ (800a4c8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d004      	beq.n	800a470 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a18      	ldr	r2, [pc, #96]	@ (800a4cc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d11c      	bne.n	800a4aa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a47a:	051b      	lsls	r3, r3, #20
 800a47c:	4313      	orrs	r3, r2
 800a47e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	6a1b      	ldr	r3, [r3, #32]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a498:	4313      	orrs	r3, r2
 800a49a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	40012c00 	.word	0x40012c00
 800a4cc:	40013400 	.word	0x40013400

0800a4d0 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b08b      	sub	sp, #44	@ 0x2c
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d101      	bne.n	800a4f0 <HAL_TIMEx_ConfigBreakInput+0x20>
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	e0c1      	b.n	800a674 <HAL_TIMEx_ConfigBreakInput+0x1a4>
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	2b0f      	cmp	r3, #15
 800a500:	d854      	bhi.n	800a5ac <HAL_TIMEx_ConfigBreakInput+0xdc>
 800a502:	a201      	add	r2, pc, #4	@ (adr r2, 800a508 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800a504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a508:	0800a549 	.word	0x0800a549
 800a50c:	0800a55d 	.word	0x0800a55d
 800a510:	0800a5ad 	.word	0x0800a5ad
 800a514:	0800a571 	.word	0x0800a571
 800a518:	0800a5ad 	.word	0x0800a5ad
 800a51c:	0800a5ad 	.word	0x0800a5ad
 800a520:	0800a5ad 	.word	0x0800a5ad
 800a524:	0800a585 	.word	0x0800a585
 800a528:	0800a5ad 	.word	0x0800a5ad
 800a52c:	0800a5ad 	.word	0x0800a5ad
 800a530:	0800a5ad 	.word	0x0800a5ad
 800a534:	0800a5ad 	.word	0x0800a5ad
 800a538:	0800a5ad 	.word	0x0800a5ad
 800a53c:	0800a5ad 	.word	0x0800a5ad
 800a540:	0800a5ad 	.word	0x0800a5ad
 800a544:	0800a599 	.word	0x0800a599
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800a548:	2301      	movs	r3, #1
 800a54a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800a54c:	2300      	movs	r3, #0
 800a54e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800a550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a554:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800a556:	2309      	movs	r3, #9
 800a558:	617b      	str	r3, [r7, #20]
      break;
 800a55a:	e030      	b.n	800a5be <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800a55c:	2302      	movs	r3, #2
 800a55e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800a560:	2301      	movs	r3, #1
 800a562:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800a564:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a568:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800a56a:	230a      	movs	r3, #10
 800a56c:	617b      	str	r3, [r7, #20]
      break;
 800a56e:	e026      	b.n	800a5be <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800a570:	2304      	movs	r3, #4
 800a572:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800a574:	2302      	movs	r3, #2
 800a576:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800a578:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a57c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800a57e:	230b      	movs	r3, #11
 800a580:	617b      	str	r3, [r7, #20]
      break;
 800a582:	e01c      	b.n	800a5be <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800a584:	2308      	movs	r3, #8
 800a586:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800a588:	2303      	movs	r3, #3
 800a58a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800a58c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a590:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800a592:	230c      	movs	r3, #12
 800a594:	617b      	str	r3, [r7, #20]
      break;
 800a596:	e012      	b.n	800a5be <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800a598:	2310      	movs	r3, #16
 800a59a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800a59c:	2304      	movs	r3, #4
 800a59e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800a5a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a5a4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800a5a6:	230d      	movs	r3, #13
 800a5a8:	617b      	str	r3, [r7, #20]
      break;
 800a5aa:	e008      	b.n	800a5be <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	617b      	str	r3, [r7, #20]
      break;
 800a5bc:	bf00      	nop
    }
  }

  switch (BreakInput)
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d003      	beq.n	800a5cc <HAL_TIMEx_ConfigBreakInput+0xfc>
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d025      	beq.n	800a616 <HAL_TIMEx_ConfigBreakInput+0x146>
 800a5ca:	e049      	b.n	800a660 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5d2:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800a5d4:	6a3b      	ldr	r3, [r7, #32]
 800a5d6:	43db      	mvns	r3, r3
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	4013      	ands	r3, r2
 800a5dc:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	685a      	ldr	r2, [r3, #4]
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	409a      	lsls	r2, r3
 800a5e6:	6a3b      	ldr	r3, [r7, #32]
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	43db      	mvns	r3, r3
 800a5f4:	693a      	ldr	r2, [r7, #16]
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	689a      	ldr	r2, [r3, #8]
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	409a      	lsls	r2, r3
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	4013      	ands	r3, r2
 800a606:	693a      	ldr	r2, [r7, #16]
 800a608:	4313      	orrs	r3, r2
 800a60a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800a614:	e028      	b.n	800a668 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a61c:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	43db      	mvns	r3, r3
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	4013      	ands	r3, r2
 800a626:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	409a      	lsls	r2, r3
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	4013      	ands	r3, r2
 800a634:	693a      	ldr	r2, [r7, #16]
 800a636:	4313      	orrs	r3, r2
 800a638:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	43db      	mvns	r3, r3
 800a63e:	693a      	ldr	r2, [r7, #16]
 800a640:	4013      	ands	r3, r2
 800a642:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689a      	ldr	r2, [r3, #8]
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	409a      	lsls	r2, r3
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	4013      	ands	r3, r2
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	4313      	orrs	r3, r2
 800a654:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800a65e:	e003      	b.n	800a668 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800a666:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a670:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a674:	4618      	mov	r0, r3
 800a676:	372c      	adds	r7, #44	@ 0x2c
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a6d8:	bf00      	nop
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a6ec:	bf00      	nop
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b087      	sub	sp, #28
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	f003 030f 	and.w	r3, r3, #15
 800a71e:	2204      	movs	r2, #4
 800a720:	fa02 f303 	lsl.w	r3, r2, r3
 800a724:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6a1a      	ldr	r2, [r3, #32]
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	43db      	mvns	r3, r3
 800a72e:	401a      	ands	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6a1a      	ldr	r2, [r3, #32]
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	f003 030f 	and.w	r3, r3, #15
 800a73e:	6879      	ldr	r1, [r7, #4]
 800a740:	fa01 f303 	lsl.w	r3, r1, r3
 800a744:	431a      	orrs	r2, r3
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	621a      	str	r2, [r3, #32]
}
 800a74a:	bf00      	nop
 800a74c:	371c      	adds	r7, #28
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b082      	sub	sp, #8
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	e042      	b.n	800a7ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d106      	bne.n	800a780 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f7f7 ff02 	bl	8002584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2224      	movs	r2, #36	@ 0x24
 800a784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f022 0201 	bic.w	r2, r2, #1
 800a796:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d002      	beq.n	800a7a6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 ff0f 	bl	800b5c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fc40 	bl	800b02c <UART_SetConfig>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d101      	bne.n	800a7b6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e01b      	b.n	800a7ee <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a7c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	689a      	ldr	r2, [r3, #8]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a7d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f042 0201 	orr.w	r2, r2, #1
 800a7e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 ff8e 	bl	800b708 <UART_CheckIdleState>
 800a7ec:	4603      	mov	r3, r0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3708      	adds	r7, #8
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
	...

0800a7f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b08a      	sub	sp, #40	@ 0x28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	4613      	mov	r3, r2
 800a804:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a80c:	2b20      	cmp	r3, #32
 800a80e:	d137      	bne.n	800a880 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d002      	beq.n	800a81c <HAL_UART_Receive_IT+0x24>
 800a816:	88fb      	ldrh	r3, [r7, #6]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d101      	bne.n	800a820 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	e030      	b.n	800a882 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a18      	ldr	r2, [pc, #96]	@ (800a88c <HAL_UART_Receive_IT+0x94>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d01f      	beq.n	800a870 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d018      	beq.n	800a870 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	e853 3f00 	ldrex	r3, [r3]
 800a84a:	613b      	str	r3, [r7, #16]
   return(result);
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a852:	627b      	str	r3, [r7, #36]	@ 0x24
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	461a      	mov	r2, r3
 800a85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85c:	623b      	str	r3, [r7, #32]
 800a85e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a860:	69f9      	ldr	r1, [r7, #28]
 800a862:	6a3a      	ldr	r2, [r7, #32]
 800a864:	e841 2300 	strex	r3, r2, [r1]
 800a868:	61bb      	str	r3, [r7, #24]
   return(result);
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e6      	bne.n	800a83e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a870:	88fb      	ldrh	r3, [r7, #6]
 800a872:	461a      	mov	r2, r3
 800a874:	68b9      	ldr	r1, [r7, #8]
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f001 f85e 	bl	800b938 <UART_Start_Receive_IT>
 800a87c:	4603      	mov	r3, r0
 800a87e:	e000      	b.n	800a882 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a880:	2302      	movs	r3, #2
  }
}
 800a882:	4618      	mov	r0, r3
 800a884:	3728      	adds	r7, #40	@ 0x28
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	40008000 	.word	0x40008000

0800a890 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b08a      	sub	sp, #40	@ 0x28
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	4613      	mov	r3, r2
 800a89c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8a4:	2b20      	cmp	r3, #32
 800a8a6:	d167      	bne.n	800a978 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d002      	beq.n	800a8b4 <HAL_UART_Transmit_DMA+0x24>
 800a8ae:	88fb      	ldrh	r3, [r7, #6]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d101      	bne.n	800a8b8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e060      	b.n	800a97a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	88fa      	ldrh	r2, [r7, #6]
 800a8c2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	88fa      	ldrh	r2, [r7, #6]
 800a8ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2221      	movs	r2, #33	@ 0x21
 800a8da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d028      	beq.n	800a938 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8ea:	4a26      	ldr	r2, [pc, #152]	@ (800a984 <HAL_UART_Transmit_DMA+0xf4>)
 800a8ec:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8f2:	4a25      	ldr	r2, [pc, #148]	@ (800a988 <HAL_UART_Transmit_DMA+0xf8>)
 800a8f4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8fa:	4a24      	ldr	r2, [pc, #144]	@ (800a98c <HAL_UART_Transmit_DMA+0xfc>)
 800a8fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a902:	2200      	movs	r2, #0
 800a904:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a90e:	4619      	mov	r1, r3
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3328      	adds	r3, #40	@ 0x28
 800a916:	461a      	mov	r2, r3
 800a918:	88fb      	ldrh	r3, [r7, #6]
 800a91a:	f7fb f9db 	bl	8005cd4 <HAL_DMA_Start_IT>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d009      	beq.n	800a938 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2210      	movs	r2, #16
 800a928:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2220      	movs	r2, #32
 800a930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	e020      	b.n	800a97a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2240      	movs	r2, #64	@ 0x40
 800a93e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3308      	adds	r3, #8
 800a946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	e853 3f00 	ldrex	r3, [r3]
 800a94e:	613b      	str	r3, [r7, #16]
   return(result);
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a956:	627b      	str	r3, [r7, #36]	@ 0x24
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3308      	adds	r3, #8
 800a95e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a960:	623a      	str	r2, [r7, #32]
 800a962:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a964:	69f9      	ldr	r1, [r7, #28]
 800a966:	6a3a      	ldr	r2, [r7, #32]
 800a968:	e841 2300 	strex	r3, r2, [r1]
 800a96c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1e5      	bne.n	800a940 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	e000      	b.n	800a97a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a978:	2302      	movs	r3, #2
  }
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3728      	adds	r7, #40	@ 0x28
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	0800bccb 	.word	0x0800bccb
 800a988:	0800bd65 	.word	0x0800bd65
 800a98c:	0800bd81 	.word	0x0800bd81

0800a990 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b0ba      	sub	sp, #232	@ 0xe8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	69db      	ldr	r3, [r3, #28]
 800a99e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a9b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a9ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a9be:	4013      	ands	r3, r2
 800a9c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a9c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d11b      	bne.n	800aa04 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a9cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9d0:	f003 0320 	and.w	r3, r3, #32
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d015      	beq.n	800aa04 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a9d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9dc:	f003 0320 	and.w	r3, r3, #32
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d105      	bne.n	800a9f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a9e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d009      	beq.n	800aa04 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 82e3 	beq.w	800afc0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	4798      	blx	r3
      }
      return;
 800aa02:	e2dd      	b.n	800afc0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 8123 	beq.w	800ac54 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aa0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aa12:	4b8d      	ldr	r3, [pc, #564]	@ (800ac48 <HAL_UART_IRQHandler+0x2b8>)
 800aa14:	4013      	ands	r3, r2
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d106      	bne.n	800aa28 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aa1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aa1e:	4b8b      	ldr	r3, [pc, #556]	@ (800ac4c <HAL_UART_IRQHandler+0x2bc>)
 800aa20:	4013      	ands	r3, r2
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f000 8116 	beq.w	800ac54 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa2c:	f003 0301 	and.w	r3, r3, #1
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d011      	beq.n	800aa58 <HAL_UART_IRQHandler+0xc8>
 800aa34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00b      	beq.n	800aa58 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2201      	movs	r2, #1
 800aa46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa4e:	f043 0201 	orr.w	r2, r3, #1
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa5c:	f003 0302 	and.w	r3, r3, #2
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d011      	beq.n	800aa88 <HAL_UART_IRQHandler+0xf8>
 800aa64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa68:	f003 0301 	and.w	r3, r3, #1
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00b      	beq.n	800aa88 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2202      	movs	r2, #2
 800aa76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa7e:	f043 0204 	orr.w	r2, r3, #4
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa8c:	f003 0304 	and.w	r3, r3, #4
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d011      	beq.n	800aab8 <HAL_UART_IRQHandler+0x128>
 800aa94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa98:	f003 0301 	and.w	r3, r3, #1
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00b      	beq.n	800aab8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2204      	movs	r2, #4
 800aaa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaae:	f043 0202 	orr.w	r2, r3, #2
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aabc:	f003 0308 	and.w	r3, r3, #8
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d017      	beq.n	800aaf4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aac8:	f003 0320 	and.w	r3, r3, #32
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d105      	bne.n	800aadc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aad0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aad4:	4b5c      	ldr	r3, [pc, #368]	@ (800ac48 <HAL_UART_IRQHandler+0x2b8>)
 800aad6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00b      	beq.n	800aaf4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2208      	movs	r2, #8
 800aae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaea:	f043 0208 	orr.w	r2, r3, #8
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aaf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d012      	beq.n	800ab26 <HAL_UART_IRQHandler+0x196>
 800ab00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00c      	beq.n	800ab26 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab1c:	f043 0220 	orr.w	r2, r3, #32
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f000 8249 	beq.w	800afc4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ab32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab36:	f003 0320 	and.w	r3, r3, #32
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d013      	beq.n	800ab66 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ab3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab42:	f003 0320 	and.w	r3, r3, #32
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d105      	bne.n	800ab56 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ab4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d007      	beq.n	800ab66 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab7a:	2b40      	cmp	r3, #64	@ 0x40
 800ab7c:	d005      	beq.n	800ab8a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ab82:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d054      	beq.n	800ac34 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f001 f837 	bl	800bbfe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab9a:	2b40      	cmp	r3, #64	@ 0x40
 800ab9c:	d146      	bne.n	800ac2c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	3308      	adds	r3, #8
 800aba4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800abac:	e853 3f00 	ldrex	r3, [r3]
 800abb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800abb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800abb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	3308      	adds	r3, #8
 800abc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800abca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800abce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800abd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800abda:	e841 2300 	strex	r3, r2, [r1]
 800abde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800abe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1d9      	bne.n	800ab9e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d017      	beq.n	800ac24 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abfa:	4a15      	ldr	r2, [pc, #84]	@ (800ac50 <HAL_UART_IRQHandler+0x2c0>)
 800abfc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7fb f939 	bl	8005e7c <HAL_DMA_Abort_IT>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d019      	beq.n	800ac44 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ac1e:	4610      	mov	r0, r2
 800ac20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac22:	e00f      	b.n	800ac44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 f9eb 	bl	800b000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac2a:	e00b      	b.n	800ac44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f9e7 	bl	800b000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac32:	e007      	b.n	800ac44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 f9e3 	bl	800b000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ac42:	e1bf      	b.n	800afc4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac44:	bf00      	nop
    return;
 800ac46:	e1bd      	b.n	800afc4 <HAL_UART_IRQHandler+0x634>
 800ac48:	10000001 	.word	0x10000001
 800ac4c:	04000120 	.word	0x04000120
 800ac50:	0800be01 	.word	0x0800be01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	f040 8153 	bne.w	800af04 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ac5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac62:	f003 0310 	and.w	r3, r3, #16
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f000 814c 	beq.w	800af04 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac70:	f003 0310 	and.w	r3, r3, #16
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f000 8145 	beq.w	800af04 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2210      	movs	r2, #16
 800ac80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac8c:	2b40      	cmp	r3, #64	@ 0x40
 800ac8e:	f040 80bb 	bne.w	800ae08 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aca0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f000 818f 	beq.w	800afc8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800acb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800acb4:	429a      	cmp	r2, r3
 800acb6:	f080 8187 	bcs.w	800afc8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800acc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f003 0320 	and.w	r3, r3, #32
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f040 8087 	bne.w	800ade6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ace4:	e853 3f00 	ldrex	r3, [r3]
 800ace8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800acec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800acf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	461a      	mov	r2, r3
 800acfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ad06:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ad0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ad12:	e841 2300 	strex	r3, r2, [r1]
 800ad16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ad1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1da      	bne.n	800acd8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3308      	adds	r3, #8
 800ad28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad2c:	e853 3f00 	ldrex	r3, [r3]
 800ad30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ad32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad34:	f023 0301 	bic.w	r3, r3, #1
 800ad38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3308      	adds	r3, #8
 800ad42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ad46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ad4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ad4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ad52:	e841 2300 	strex	r3, r2, [r1]
 800ad56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ad58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1e1      	bne.n	800ad22 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	3308      	adds	r3, #8
 800ad64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad68:	e853 3f00 	ldrex	r3, [r3]
 800ad6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ad6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	3308      	adds	r3, #8
 800ad7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ad82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ad84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ad88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ad8a:	e841 2300 	strex	r3, r2, [r1]
 800ad8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ad90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1e3      	bne.n	800ad5e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2220      	movs	r2, #32
 800ad9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adac:	e853 3f00 	ldrex	r3, [r3]
 800adb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800adb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adb4:	f023 0310 	bic.w	r3, r3, #16
 800adb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	461a      	mov	r2, r3
 800adc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800adc8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800adcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800adce:	e841 2300 	strex	r3, r2, [r1]
 800add2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800add4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1e4      	bne.n	800ada4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fa fff2 	bl	8005dca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2202      	movs	r2, #2
 800adea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	4619      	mov	r1, r3
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f907 	bl	800b014 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae06:	e0df      	b.n	800afc8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	1ad3      	subs	r3, r2, r3
 800ae18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 80d1 	beq.w	800afcc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800ae2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f000 80cc 	beq.w	800afcc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3c:	e853 3f00 	ldrex	r3, [r3]
 800ae40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	461a      	mov	r2, r3
 800ae52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae56:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae58:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae5e:	e841 2300 	strex	r3, r2, [r1]
 800ae62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1e4      	bne.n	800ae34 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	3308      	adds	r3, #8
 800ae70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae74:	e853 3f00 	ldrex	r3, [r3]
 800ae78:	623b      	str	r3, [r7, #32]
   return(result);
 800ae7a:	6a3b      	ldr	r3, [r7, #32]
 800ae7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae80:	f023 0301 	bic.w	r3, r3, #1
 800ae84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	3308      	adds	r3, #8
 800ae8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ae92:	633a      	str	r2, [r7, #48]	@ 0x30
 800ae94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae9a:	e841 2300 	strex	r3, r2, [r1]
 800ae9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1e1      	bne.n	800ae6a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2220      	movs	r2, #32
 800aeaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	e853 3f00 	ldrex	r3, [r3]
 800aec6:	60fb      	str	r3, [r7, #12]
   return(result);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f023 0310 	bic.w	r3, r3, #16
 800aece:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	461a      	mov	r2, r3
 800aed8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aedc:	61fb      	str	r3, [r7, #28]
 800aede:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee0:	69b9      	ldr	r1, [r7, #24]
 800aee2:	69fa      	ldr	r2, [r7, #28]
 800aee4:	e841 2300 	strex	r3, r2, [r1]
 800aee8:	617b      	str	r3, [r7, #20]
   return(result);
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d1e4      	bne.n	800aeba <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2202      	movs	r2, #2
 800aef4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aef6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 f889 	bl	800b014 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af02:	e063      	b.n	800afcc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800af04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00e      	beq.n	800af2e <HAL_UART_IRQHandler+0x59e>
 800af10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d008      	beq.n	800af2e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800af24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f001 fcc8 	bl	800c8bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af2c:	e051      	b.n	800afd2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800af2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af36:	2b00      	cmp	r3, #0
 800af38:	d014      	beq.n	800af64 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800af3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af42:	2b00      	cmp	r3, #0
 800af44:	d105      	bne.n	800af52 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800af46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d008      	beq.n	800af64 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af56:	2b00      	cmp	r3, #0
 800af58:	d03a      	beq.n	800afd0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	4798      	blx	r3
    }
    return;
 800af62:	e035      	b.n	800afd0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800af64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d009      	beq.n	800af84 <HAL_UART_IRQHandler+0x5f4>
 800af70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d003      	beq.n	800af84 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 ff55 	bl	800be2c <UART_EndTransmit_IT>
    return;
 800af82:	e026      	b.n	800afd2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800af84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d009      	beq.n	800afa4 <HAL_UART_IRQHandler+0x614>
 800af90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af94:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d003      	beq.n	800afa4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f001 fca1 	bl	800c8e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800afa2:	e016      	b.n	800afd2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800afa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800afac:	2b00      	cmp	r3, #0
 800afae:	d010      	beq.n	800afd2 <HAL_UART_IRQHandler+0x642>
 800afb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	da0c      	bge.n	800afd2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f001 fc89 	bl	800c8d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800afbe:	e008      	b.n	800afd2 <HAL_UART_IRQHandler+0x642>
      return;
 800afc0:	bf00      	nop
 800afc2:	e006      	b.n	800afd2 <HAL_UART_IRQHandler+0x642>
    return;
 800afc4:	bf00      	nop
 800afc6:	e004      	b.n	800afd2 <HAL_UART_IRQHandler+0x642>
      return;
 800afc8:	bf00      	nop
 800afca:	e002      	b.n	800afd2 <HAL_UART_IRQHandler+0x642>
      return;
 800afcc:	bf00      	nop
 800afce:	e000      	b.n	800afd2 <HAL_UART_IRQHandler+0x642>
    return;
 800afd0:	bf00      	nop
  }
}
 800afd2:	37e8      	adds	r7, #232	@ 0xe8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800aff4:	bf00      	nop
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	460b      	mov	r3, r1
 800b01e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b020:	bf00      	nop
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b02c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b030:	b08c      	sub	sp, #48	@ 0x30
 800b032:	af00      	add	r7, sp, #0
 800b034:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b036:	2300      	movs	r3, #0
 800b038:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	689a      	ldr	r2, [r3, #8]
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	431a      	orrs	r2, r3
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	695b      	ldr	r3, [r3, #20]
 800b04a:	431a      	orrs	r2, r3
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	69db      	ldr	r3, [r3, #28]
 800b050:	4313      	orrs	r3, r2
 800b052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	4bab      	ldr	r3, [pc, #684]	@ (800b308 <UART_SetConfig+0x2dc>)
 800b05c:	4013      	ands	r3, r2
 800b05e:	697a      	ldr	r2, [r7, #20]
 800b060:	6812      	ldr	r2, [r2, #0]
 800b062:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b064:	430b      	orrs	r3, r1
 800b066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	68da      	ldr	r2, [r3, #12]
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	430a      	orrs	r2, r1
 800b07c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4aa0      	ldr	r2, [pc, #640]	@ (800b30c <UART_SetConfig+0x2e0>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d004      	beq.n	800b098 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	6a1b      	ldr	r3, [r3, #32]
 800b092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b094:	4313      	orrs	r3, r2
 800b096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b0a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	6812      	ldr	r2, [r2, #0]
 800b0aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0ac:	430b      	orrs	r3, r1
 800b0ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b6:	f023 010f 	bic.w	r1, r3, #15
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	430a      	orrs	r2, r1
 800b0c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a91      	ldr	r2, [pc, #580]	@ (800b310 <UART_SetConfig+0x2e4>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d125      	bne.n	800b11c <UART_SetConfig+0xf0>
 800b0d0:	4b90      	ldr	r3, [pc, #576]	@ (800b314 <UART_SetConfig+0x2e8>)
 800b0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0d6:	f003 0303 	and.w	r3, r3, #3
 800b0da:	2b03      	cmp	r3, #3
 800b0dc:	d81a      	bhi.n	800b114 <UART_SetConfig+0xe8>
 800b0de:	a201      	add	r2, pc, #4	@ (adr r2, 800b0e4 <UART_SetConfig+0xb8>)
 800b0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e4:	0800b0f5 	.word	0x0800b0f5
 800b0e8:	0800b105 	.word	0x0800b105
 800b0ec:	0800b0fd 	.word	0x0800b0fd
 800b0f0:	0800b10d 	.word	0x0800b10d
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0fa:	e0d6      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b0fc:	2302      	movs	r3, #2
 800b0fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b102:	e0d2      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b104:	2304      	movs	r3, #4
 800b106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b10a:	e0ce      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b10c:	2308      	movs	r3, #8
 800b10e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b112:	e0ca      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b114:	2310      	movs	r3, #16
 800b116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b11a:	e0c6      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a7d      	ldr	r2, [pc, #500]	@ (800b318 <UART_SetConfig+0x2ec>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d138      	bne.n	800b198 <UART_SetConfig+0x16c>
 800b126:	4b7b      	ldr	r3, [pc, #492]	@ (800b314 <UART_SetConfig+0x2e8>)
 800b128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b12c:	f003 030c 	and.w	r3, r3, #12
 800b130:	2b0c      	cmp	r3, #12
 800b132:	d82d      	bhi.n	800b190 <UART_SetConfig+0x164>
 800b134:	a201      	add	r2, pc, #4	@ (adr r2, 800b13c <UART_SetConfig+0x110>)
 800b136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b13a:	bf00      	nop
 800b13c:	0800b171 	.word	0x0800b171
 800b140:	0800b191 	.word	0x0800b191
 800b144:	0800b191 	.word	0x0800b191
 800b148:	0800b191 	.word	0x0800b191
 800b14c:	0800b181 	.word	0x0800b181
 800b150:	0800b191 	.word	0x0800b191
 800b154:	0800b191 	.word	0x0800b191
 800b158:	0800b191 	.word	0x0800b191
 800b15c:	0800b179 	.word	0x0800b179
 800b160:	0800b191 	.word	0x0800b191
 800b164:	0800b191 	.word	0x0800b191
 800b168:	0800b191 	.word	0x0800b191
 800b16c:	0800b189 	.word	0x0800b189
 800b170:	2300      	movs	r3, #0
 800b172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b176:	e098      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b178:	2302      	movs	r3, #2
 800b17a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b17e:	e094      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b180:	2304      	movs	r3, #4
 800b182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b186:	e090      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b188:	2308      	movs	r3, #8
 800b18a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b18e:	e08c      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b190:	2310      	movs	r3, #16
 800b192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b196:	e088      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a5f      	ldr	r2, [pc, #380]	@ (800b31c <UART_SetConfig+0x2f0>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d125      	bne.n	800b1ee <UART_SetConfig+0x1c2>
 800b1a2:	4b5c      	ldr	r3, [pc, #368]	@ (800b314 <UART_SetConfig+0x2e8>)
 800b1a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b1ac:	2b30      	cmp	r3, #48	@ 0x30
 800b1ae:	d016      	beq.n	800b1de <UART_SetConfig+0x1b2>
 800b1b0:	2b30      	cmp	r3, #48	@ 0x30
 800b1b2:	d818      	bhi.n	800b1e6 <UART_SetConfig+0x1ba>
 800b1b4:	2b20      	cmp	r3, #32
 800b1b6:	d00a      	beq.n	800b1ce <UART_SetConfig+0x1a2>
 800b1b8:	2b20      	cmp	r3, #32
 800b1ba:	d814      	bhi.n	800b1e6 <UART_SetConfig+0x1ba>
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <UART_SetConfig+0x19a>
 800b1c0:	2b10      	cmp	r3, #16
 800b1c2:	d008      	beq.n	800b1d6 <UART_SetConfig+0x1aa>
 800b1c4:	e00f      	b.n	800b1e6 <UART_SetConfig+0x1ba>
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1cc:	e06d      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b1ce:	2302      	movs	r3, #2
 800b1d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1d4:	e069      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b1d6:	2304      	movs	r3, #4
 800b1d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1dc:	e065      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b1de:	2308      	movs	r3, #8
 800b1e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1e4:	e061      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b1e6:	2310      	movs	r3, #16
 800b1e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1ec:	e05d      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a4b      	ldr	r2, [pc, #300]	@ (800b320 <UART_SetConfig+0x2f4>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d125      	bne.n	800b244 <UART_SetConfig+0x218>
 800b1f8:	4b46      	ldr	r3, [pc, #280]	@ (800b314 <UART_SetConfig+0x2e8>)
 800b1fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b202:	2bc0      	cmp	r3, #192	@ 0xc0
 800b204:	d016      	beq.n	800b234 <UART_SetConfig+0x208>
 800b206:	2bc0      	cmp	r3, #192	@ 0xc0
 800b208:	d818      	bhi.n	800b23c <UART_SetConfig+0x210>
 800b20a:	2b80      	cmp	r3, #128	@ 0x80
 800b20c:	d00a      	beq.n	800b224 <UART_SetConfig+0x1f8>
 800b20e:	2b80      	cmp	r3, #128	@ 0x80
 800b210:	d814      	bhi.n	800b23c <UART_SetConfig+0x210>
 800b212:	2b00      	cmp	r3, #0
 800b214:	d002      	beq.n	800b21c <UART_SetConfig+0x1f0>
 800b216:	2b40      	cmp	r3, #64	@ 0x40
 800b218:	d008      	beq.n	800b22c <UART_SetConfig+0x200>
 800b21a:	e00f      	b.n	800b23c <UART_SetConfig+0x210>
 800b21c:	2300      	movs	r3, #0
 800b21e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b222:	e042      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b224:	2302      	movs	r3, #2
 800b226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b22a:	e03e      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b22c:	2304      	movs	r3, #4
 800b22e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b232:	e03a      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b234:	2308      	movs	r3, #8
 800b236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b23a:	e036      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b23c:	2310      	movs	r3, #16
 800b23e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b242:	e032      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a30      	ldr	r2, [pc, #192]	@ (800b30c <UART_SetConfig+0x2e0>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d12a      	bne.n	800b2a4 <UART_SetConfig+0x278>
 800b24e:	4b31      	ldr	r3, [pc, #196]	@ (800b314 <UART_SetConfig+0x2e8>)
 800b250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b254:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b258:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b25c:	d01a      	beq.n	800b294 <UART_SetConfig+0x268>
 800b25e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b262:	d81b      	bhi.n	800b29c <UART_SetConfig+0x270>
 800b264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b268:	d00c      	beq.n	800b284 <UART_SetConfig+0x258>
 800b26a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b26e:	d815      	bhi.n	800b29c <UART_SetConfig+0x270>
 800b270:	2b00      	cmp	r3, #0
 800b272:	d003      	beq.n	800b27c <UART_SetConfig+0x250>
 800b274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b278:	d008      	beq.n	800b28c <UART_SetConfig+0x260>
 800b27a:	e00f      	b.n	800b29c <UART_SetConfig+0x270>
 800b27c:	2300      	movs	r3, #0
 800b27e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b282:	e012      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b284:	2302      	movs	r3, #2
 800b286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b28a:	e00e      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b28c:	2304      	movs	r3, #4
 800b28e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b292:	e00a      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b294:	2308      	movs	r3, #8
 800b296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b29a:	e006      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b29c:	2310      	movs	r3, #16
 800b29e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2a2:	e002      	b.n	800b2aa <UART_SetConfig+0x27e>
 800b2a4:	2310      	movs	r3, #16
 800b2a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a17      	ldr	r2, [pc, #92]	@ (800b30c <UART_SetConfig+0x2e0>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	f040 80a8 	bne.w	800b406 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b2b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b2ba:	2b08      	cmp	r3, #8
 800b2bc:	d834      	bhi.n	800b328 <UART_SetConfig+0x2fc>
 800b2be:	a201      	add	r2, pc, #4	@ (adr r2, 800b2c4 <UART_SetConfig+0x298>)
 800b2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c4:	0800b2e9 	.word	0x0800b2e9
 800b2c8:	0800b329 	.word	0x0800b329
 800b2cc:	0800b2f1 	.word	0x0800b2f1
 800b2d0:	0800b329 	.word	0x0800b329
 800b2d4:	0800b2f7 	.word	0x0800b2f7
 800b2d8:	0800b329 	.word	0x0800b329
 800b2dc:	0800b329 	.word	0x0800b329
 800b2e0:	0800b329 	.word	0x0800b329
 800b2e4:	0800b2ff 	.word	0x0800b2ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2e8:	f7fc fbf4 	bl	8007ad4 <HAL_RCC_GetPCLK1Freq>
 800b2ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2ee:	e021      	b.n	800b334 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b2f0:	4b0c      	ldr	r3, [pc, #48]	@ (800b324 <UART_SetConfig+0x2f8>)
 800b2f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b2f4:	e01e      	b.n	800b334 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2f6:	f7fc fb7f 	bl	80079f8 <HAL_RCC_GetSysClockFreq>
 800b2fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2fc:	e01a      	b.n	800b334 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b302:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b304:	e016      	b.n	800b334 <UART_SetConfig+0x308>
 800b306:	bf00      	nop
 800b308:	cfff69f3 	.word	0xcfff69f3
 800b30c:	40008000 	.word	0x40008000
 800b310:	40013800 	.word	0x40013800
 800b314:	40021000 	.word	0x40021000
 800b318:	40004400 	.word	0x40004400
 800b31c:	40004800 	.word	0x40004800
 800b320:	40004c00 	.word	0x40004c00
 800b324:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b328:	2300      	movs	r3, #0
 800b32a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b332:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b336:	2b00      	cmp	r3, #0
 800b338:	f000 812a 	beq.w	800b590 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b340:	4a9e      	ldr	r2, [pc, #632]	@ (800b5bc <UART_SetConfig+0x590>)
 800b342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b346:	461a      	mov	r2, r3
 800b348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b34e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	685a      	ldr	r2, [r3, #4]
 800b354:	4613      	mov	r3, r2
 800b356:	005b      	lsls	r3, r3, #1
 800b358:	4413      	add	r3, r2
 800b35a:	69ba      	ldr	r2, [r7, #24]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d305      	bcc.n	800b36c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b366:	69ba      	ldr	r2, [r7, #24]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d903      	bls.n	800b374 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b372:	e10d      	b.n	800b590 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b376:	2200      	movs	r2, #0
 800b378:	60bb      	str	r3, [r7, #8]
 800b37a:	60fa      	str	r2, [r7, #12]
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b380:	4a8e      	ldr	r2, [pc, #568]	@ (800b5bc <UART_SetConfig+0x590>)
 800b382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b386:	b29b      	uxth	r3, r3
 800b388:	2200      	movs	r2, #0
 800b38a:	603b      	str	r3, [r7, #0]
 800b38c:	607a      	str	r2, [r7, #4]
 800b38e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b392:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b396:	f7f5 fc9f 	bl	8000cd8 <__aeabi_uldivmod>
 800b39a:	4602      	mov	r2, r0
 800b39c:	460b      	mov	r3, r1
 800b39e:	4610      	mov	r0, r2
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	f04f 0200 	mov.w	r2, #0
 800b3a6:	f04f 0300 	mov.w	r3, #0
 800b3aa:	020b      	lsls	r3, r1, #8
 800b3ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b3b0:	0202      	lsls	r2, r0, #8
 800b3b2:	6979      	ldr	r1, [r7, #20]
 800b3b4:	6849      	ldr	r1, [r1, #4]
 800b3b6:	0849      	lsrs	r1, r1, #1
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	4605      	mov	r5, r0
 800b3be:	eb12 0804 	adds.w	r8, r2, r4
 800b3c2:	eb43 0905 	adc.w	r9, r3, r5
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	469a      	mov	sl, r3
 800b3ce:	4693      	mov	fp, r2
 800b3d0:	4652      	mov	r2, sl
 800b3d2:	465b      	mov	r3, fp
 800b3d4:	4640      	mov	r0, r8
 800b3d6:	4649      	mov	r1, r9
 800b3d8:	f7f5 fc7e 	bl	8000cd8 <__aeabi_uldivmod>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	460b      	mov	r3, r1
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b3e4:	6a3b      	ldr	r3, [r7, #32]
 800b3e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b3ea:	d308      	bcc.n	800b3fe <UART_SetConfig+0x3d2>
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3f2:	d204      	bcs.n	800b3fe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	6a3a      	ldr	r2, [r7, #32]
 800b3fa:	60da      	str	r2, [r3, #12]
 800b3fc:	e0c8      	b.n	800b590 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b404:	e0c4      	b.n	800b590 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	69db      	ldr	r3, [r3, #28]
 800b40a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b40e:	d167      	bne.n	800b4e0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b410:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b414:	2b08      	cmp	r3, #8
 800b416:	d828      	bhi.n	800b46a <UART_SetConfig+0x43e>
 800b418:	a201      	add	r2, pc, #4	@ (adr r2, 800b420 <UART_SetConfig+0x3f4>)
 800b41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b41e:	bf00      	nop
 800b420:	0800b445 	.word	0x0800b445
 800b424:	0800b44d 	.word	0x0800b44d
 800b428:	0800b455 	.word	0x0800b455
 800b42c:	0800b46b 	.word	0x0800b46b
 800b430:	0800b45b 	.word	0x0800b45b
 800b434:	0800b46b 	.word	0x0800b46b
 800b438:	0800b46b 	.word	0x0800b46b
 800b43c:	0800b46b 	.word	0x0800b46b
 800b440:	0800b463 	.word	0x0800b463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b444:	f7fc fb46 	bl	8007ad4 <HAL_RCC_GetPCLK1Freq>
 800b448:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b44a:	e014      	b.n	800b476 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b44c:	f7fc fb58 	bl	8007b00 <HAL_RCC_GetPCLK2Freq>
 800b450:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b452:	e010      	b.n	800b476 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b454:	4b5a      	ldr	r3, [pc, #360]	@ (800b5c0 <UART_SetConfig+0x594>)
 800b456:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b458:	e00d      	b.n	800b476 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b45a:	f7fc facd 	bl	80079f8 <HAL_RCC_GetSysClockFreq>
 800b45e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b460:	e009      	b.n	800b476 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b468:	e005      	b.n	800b476 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b46a:	2300      	movs	r3, #0
 800b46c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b474:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f000 8089 	beq.w	800b590 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b482:	4a4e      	ldr	r2, [pc, #312]	@ (800b5bc <UART_SetConfig+0x590>)
 800b484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b488:	461a      	mov	r2, r3
 800b48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b490:	005a      	lsls	r2, r3, #1
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	085b      	lsrs	r3, r3, #1
 800b498:	441a      	add	r2, r3
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4a4:	6a3b      	ldr	r3, [r7, #32]
 800b4a6:	2b0f      	cmp	r3, #15
 800b4a8:	d916      	bls.n	800b4d8 <UART_SetConfig+0x4ac>
 800b4aa:	6a3b      	ldr	r3, [r7, #32]
 800b4ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4b0:	d212      	bcs.n	800b4d8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4b2:	6a3b      	ldr	r3, [r7, #32]
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	f023 030f 	bic.w	r3, r3, #15
 800b4ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b4bc:	6a3b      	ldr	r3, [r7, #32]
 800b4be:	085b      	lsrs	r3, r3, #1
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	f003 0307 	and.w	r3, r3, #7
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	8bfb      	ldrh	r3, [r7, #30]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	8bfa      	ldrh	r2, [r7, #30]
 800b4d4:	60da      	str	r2, [r3, #12]
 800b4d6:	e05b      	b.n	800b590 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b4de:	e057      	b.n	800b590 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b4e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b4e4:	2b08      	cmp	r3, #8
 800b4e6:	d828      	bhi.n	800b53a <UART_SetConfig+0x50e>
 800b4e8:	a201      	add	r2, pc, #4	@ (adr r2, 800b4f0 <UART_SetConfig+0x4c4>)
 800b4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ee:	bf00      	nop
 800b4f0:	0800b515 	.word	0x0800b515
 800b4f4:	0800b51d 	.word	0x0800b51d
 800b4f8:	0800b525 	.word	0x0800b525
 800b4fc:	0800b53b 	.word	0x0800b53b
 800b500:	0800b52b 	.word	0x0800b52b
 800b504:	0800b53b 	.word	0x0800b53b
 800b508:	0800b53b 	.word	0x0800b53b
 800b50c:	0800b53b 	.word	0x0800b53b
 800b510:	0800b533 	.word	0x0800b533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b514:	f7fc fade 	bl	8007ad4 <HAL_RCC_GetPCLK1Freq>
 800b518:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b51a:	e014      	b.n	800b546 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b51c:	f7fc faf0 	bl	8007b00 <HAL_RCC_GetPCLK2Freq>
 800b520:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b522:	e010      	b.n	800b546 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b524:	4b26      	ldr	r3, [pc, #152]	@ (800b5c0 <UART_SetConfig+0x594>)
 800b526:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b528:	e00d      	b.n	800b546 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b52a:	f7fc fa65 	bl	80079f8 <HAL_RCC_GetSysClockFreq>
 800b52e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b530:	e009      	b.n	800b546 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b536:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b538:	e005      	b.n	800b546 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b53a:	2300      	movs	r3, #0
 800b53c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b544:	bf00      	nop
    }

    if (pclk != 0U)
 800b546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d021      	beq.n	800b590 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b550:	4a1a      	ldr	r2, [pc, #104]	@ (800b5bc <UART_SetConfig+0x590>)
 800b552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b556:	461a      	mov	r2, r3
 800b558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	085b      	lsrs	r3, r3, #1
 800b564:	441a      	add	r2, r3
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b56e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b570:	6a3b      	ldr	r3, [r7, #32]
 800b572:	2b0f      	cmp	r3, #15
 800b574:	d909      	bls.n	800b58a <UART_SetConfig+0x55e>
 800b576:	6a3b      	ldr	r3, [r7, #32]
 800b578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b57c:	d205      	bcs.n	800b58a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b57e:	6a3b      	ldr	r3, [r7, #32]
 800b580:	b29a      	uxth	r2, r3
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	60da      	str	r2, [r3, #12]
 800b588:	e002      	b.n	800b590 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	2201      	movs	r2, #1
 800b594:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b5ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3730      	adds	r7, #48	@ 0x30
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5ba:	bf00      	nop
 800b5bc:	08012484 	.word	0x08012484
 800b5c0:	00f42400 	.word	0x00f42400

0800b5c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5d0:	f003 0308 	and.w	r3, r3, #8
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d00a      	beq.n	800b5ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	430a      	orrs	r2, r1
 800b5ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5f2:	f003 0301 	and.w	r3, r3, #1
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00a      	beq.n	800b610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	430a      	orrs	r2, r1
 800b60e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b614:	f003 0302 	and.w	r3, r3, #2
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00a      	beq.n	800b632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	430a      	orrs	r2, r1
 800b630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b636:	f003 0304 	and.w	r3, r3, #4
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00a      	beq.n	800b654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	430a      	orrs	r2, r1
 800b652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b658:	f003 0310 	and.w	r3, r3, #16
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d00a      	beq.n	800b676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	430a      	orrs	r2, r1
 800b674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b67a:	f003 0320 	and.w	r3, r3, #32
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00a      	beq.n	800b698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	430a      	orrs	r2, r1
 800b696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b69c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d01a      	beq.n	800b6da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	430a      	orrs	r2, r1
 800b6b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6c2:	d10a      	bne.n	800b6da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	430a      	orrs	r2, r1
 800b6d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00a      	beq.n	800b6fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	430a      	orrs	r2, r1
 800b6fa:	605a      	str	r2, [r3, #4]
  }
}
 800b6fc:	bf00      	nop
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b098      	sub	sp, #96	@ 0x60
 800b70c:	af02      	add	r7, sp, #8
 800b70e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b718:	f7f7 f850 	bl	80027bc <HAL_GetTick>
 800b71c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f003 0308 	and.w	r3, r3, #8
 800b728:	2b08      	cmp	r3, #8
 800b72a:	d12f      	bne.n	800b78c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b72c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b730:	9300      	str	r3, [sp, #0]
 800b732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b734:	2200      	movs	r2, #0
 800b736:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f88e 	bl	800b85c <UART_WaitOnFlagUntilTimeout>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d022      	beq.n	800b78c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b74e:	e853 3f00 	ldrex	r3, [r3]
 800b752:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b756:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b75a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	461a      	mov	r2, r3
 800b762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b764:	647b      	str	r3, [r7, #68]	@ 0x44
 800b766:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b768:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b76a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b76c:	e841 2300 	strex	r3, r2, [r1]
 800b770:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1e6      	bne.n	800b746 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2220      	movs	r2, #32
 800b77c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b788:	2303      	movs	r3, #3
 800b78a:	e063      	b.n	800b854 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f003 0304 	and.w	r3, r3, #4
 800b796:	2b04      	cmp	r3, #4
 800b798:	d149      	bne.n	800b82e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b79a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f857 	bl	800b85c <UART_WaitOnFlagUntilTimeout>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d03c      	beq.n	800b82e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7bc:	e853 3f00 	ldrex	r3, [r3]
 800b7c0:	623b      	str	r3, [r7, #32]
   return(result);
 800b7c2:	6a3b      	ldr	r3, [r7, #32]
 800b7c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b7c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7da:	e841 2300 	strex	r3, r2, [r1]
 800b7de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1e6      	bne.n	800b7b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	3308      	adds	r3, #8
 800b7ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	e853 3f00 	ldrex	r3, [r3]
 800b7f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f023 0301 	bic.w	r3, r3, #1
 800b7fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	3308      	adds	r3, #8
 800b804:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b806:	61fa      	str	r2, [r7, #28]
 800b808:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80a:	69b9      	ldr	r1, [r7, #24]
 800b80c:	69fa      	ldr	r2, [r7, #28]
 800b80e:	e841 2300 	strex	r3, r2, [r1]
 800b812:	617b      	str	r3, [r7, #20]
   return(result);
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1e5      	bne.n	800b7e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2220      	movs	r2, #32
 800b81e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b82a:	2303      	movs	r3, #3
 800b82c:	e012      	b.n	800b854 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2220      	movs	r2, #32
 800b832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2220      	movs	r2, #32
 800b83a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3758      	adds	r7, #88	@ 0x58
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	603b      	str	r3, [r7, #0]
 800b868:	4613      	mov	r3, r2
 800b86a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b86c:	e04f      	b.n	800b90e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b874:	d04b      	beq.n	800b90e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b876:	f7f6 ffa1 	bl	80027bc <HAL_GetTick>
 800b87a:	4602      	mov	r2, r0
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	1ad3      	subs	r3, r2, r3
 800b880:	69ba      	ldr	r2, [r7, #24]
 800b882:	429a      	cmp	r2, r3
 800b884:	d302      	bcc.n	800b88c <UART_WaitOnFlagUntilTimeout+0x30>
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d101      	bne.n	800b890 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b88c:	2303      	movs	r3, #3
 800b88e:	e04e      	b.n	800b92e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f003 0304 	and.w	r3, r3, #4
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d037      	beq.n	800b90e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	2b80      	cmp	r3, #128	@ 0x80
 800b8a2:	d034      	beq.n	800b90e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	2b40      	cmp	r3, #64	@ 0x40
 800b8a8:	d031      	beq.n	800b90e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	69db      	ldr	r3, [r3, #28]
 800b8b0:	f003 0308 	and.w	r3, r3, #8
 800b8b4:	2b08      	cmp	r3, #8
 800b8b6:	d110      	bne.n	800b8da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2208      	movs	r2, #8
 800b8be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f000 f99c 	bl	800bbfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2208      	movs	r2, #8
 800b8ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e029      	b.n	800b92e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	69db      	ldr	r3, [r3, #28]
 800b8e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b8e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8e8:	d111      	bne.n	800b90e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b8f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f000 f982 	bl	800bbfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2220      	movs	r2, #32
 800b8fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2200      	movs	r2, #0
 800b906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b90a:	2303      	movs	r3, #3
 800b90c:	e00f      	b.n	800b92e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	69da      	ldr	r2, [r3, #28]
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	4013      	ands	r3, r2
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	bf0c      	ite	eq
 800b91e:	2301      	moveq	r3, #1
 800b920:	2300      	movne	r3, #0
 800b922:	b2db      	uxtb	r3, r3
 800b924:	461a      	mov	r2, r3
 800b926:	79fb      	ldrb	r3, [r7, #7]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d0a0      	beq.n	800b86e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b92c:	2300      	movs	r3, #0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
	...

0800b938 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b938:	b480      	push	{r7}
 800b93a:	b0a3      	sub	sp, #140	@ 0x8c
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	4613      	mov	r3, r2
 800b944:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	88fa      	ldrh	r2, [r7, #6]
 800b950:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	88fa      	ldrh	r2, [r7, #6]
 800b958:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2200      	movs	r2, #0
 800b960:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b96a:	d10e      	bne.n	800b98a <UART_Start_Receive_IT+0x52>
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d105      	bne.n	800b980 <UART_Start_Receive_IT+0x48>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b97a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b97e:	e02d      	b.n	800b9dc <UART_Start_Receive_IT+0xa4>
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	22ff      	movs	r2, #255	@ 0xff
 800b984:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b988:	e028      	b.n	800b9dc <UART_Start_Receive_IT+0xa4>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d10d      	bne.n	800b9ae <UART_Start_Receive_IT+0x76>
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d104      	bne.n	800b9a4 <UART_Start_Receive_IT+0x6c>
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	22ff      	movs	r2, #255	@ 0xff
 800b99e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9a2:	e01b      	b.n	800b9dc <UART_Start_Receive_IT+0xa4>
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	227f      	movs	r2, #127	@ 0x7f
 800b9a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9ac:	e016      	b.n	800b9dc <UART_Start_Receive_IT+0xa4>
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9b6:	d10d      	bne.n	800b9d4 <UART_Start_Receive_IT+0x9c>
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	691b      	ldr	r3, [r3, #16]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d104      	bne.n	800b9ca <UART_Start_Receive_IT+0x92>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	227f      	movs	r2, #127	@ 0x7f
 800b9c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9c8:	e008      	b.n	800b9dc <UART_Start_Receive_IT+0xa4>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	223f      	movs	r2, #63	@ 0x3f
 800b9ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9d2:	e003      	b.n	800b9dc <UART_Start_Receive_IT+0xa4>
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2222      	movs	r2, #34	@ 0x22
 800b9e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	3308      	adds	r3, #8
 800b9f2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9f6:	e853 3f00 	ldrex	r3, [r3]
 800b9fa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b9fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9fe:	f043 0301 	orr.w	r3, r3, #1
 800ba02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	3308      	adds	r3, #8
 800ba0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ba10:	673a      	str	r2, [r7, #112]	@ 0x70
 800ba12:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba14:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ba16:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ba18:	e841 2300 	strex	r3, r2, [r1]
 800ba1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ba1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1e3      	bne.n	800b9ec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba2c:	d14f      	bne.n	800bace <UART_Start_Receive_IT+0x196>
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ba34:	88fa      	ldrh	r2, [r7, #6]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d349      	bcc.n	800bace <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba42:	d107      	bne.n	800ba54 <UART_Start_Receive_IT+0x11c>
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d103      	bne.n	800ba54 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	4a47      	ldr	r2, [pc, #284]	@ (800bb6c <UART_Start_Receive_IT+0x234>)
 800ba50:	675a      	str	r2, [r3, #116]	@ 0x74
 800ba52:	e002      	b.n	800ba5a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	4a46      	ldr	r2, [pc, #280]	@ (800bb70 <UART_Start_Receive_IT+0x238>)
 800ba58:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	691b      	ldr	r3, [r3, #16]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d01a      	beq.n	800ba98 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba6a:	e853 3f00 	ldrex	r3, [r3]
 800ba6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ba70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ba84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba86:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba88:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ba8a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ba8c:	e841 2300 	strex	r3, r2, [r1]
 800ba90:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ba92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1e4      	bne.n	800ba62 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	3308      	adds	r3, #8
 800ba9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baa2:	e853 3f00 	ldrex	r3, [r3]
 800baa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800baa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800baae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	3308      	adds	r3, #8
 800bab6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800bab8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800baba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800babc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800babe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bac0:	e841 2300 	strex	r3, r2, [r1]
 800bac4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1e5      	bne.n	800ba98 <UART_Start_Receive_IT+0x160>
 800bacc:	e046      	b.n	800bb5c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bad6:	d107      	bne.n	800bae8 <UART_Start_Receive_IT+0x1b0>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d103      	bne.n	800bae8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	4a24      	ldr	r2, [pc, #144]	@ (800bb74 <UART_Start_Receive_IT+0x23c>)
 800bae4:	675a      	str	r2, [r3, #116]	@ 0x74
 800bae6:	e002      	b.n	800baee <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	4a23      	ldr	r2, [pc, #140]	@ (800bb78 <UART_Start_Receive_IT+0x240>)
 800baec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d019      	beq.n	800bb2a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bafe:	e853 3f00 	ldrex	r3, [r3]
 800bb02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb06:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800bb0a:	677b      	str	r3, [r7, #116]	@ 0x74
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	461a      	mov	r2, r3
 800bb12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb14:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb16:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bb1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb1c:	e841 2300 	strex	r3, r2, [r1]
 800bb20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bb22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d1e6      	bne.n	800baf6 <UART_Start_Receive_IT+0x1be>
 800bb28:	e018      	b.n	800bb5c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	e853 3f00 	ldrex	r3, [r3]
 800bb36:	613b      	str	r3, [r7, #16]
   return(result);
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	f043 0320 	orr.w	r3, r3, #32
 800bb3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	461a      	mov	r2, r3
 800bb46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb48:	623b      	str	r3, [r7, #32]
 800bb4a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4c:	69f9      	ldr	r1, [r7, #28]
 800bb4e:	6a3a      	ldr	r2, [r7, #32]
 800bb50:	e841 2300 	strex	r3, r2, [r1]
 800bb54:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1e6      	bne.n	800bb2a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	378c      	adds	r7, #140	@ 0x8c
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr
 800bb6a:	bf00      	nop
 800bb6c:	0800c555 	.word	0x0800c555
 800bb70:	0800c1f5 	.word	0x0800c1f5
 800bb74:	0800c03d 	.word	0x0800c03d
 800bb78:	0800be85 	.word	0x0800be85

0800bb7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b08f      	sub	sp, #60	@ 0x3c
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb8a:	6a3b      	ldr	r3, [r7, #32]
 800bb8c:	e853 3f00 	ldrex	r3, [r3]
 800bb90:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bb98:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bba4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbaa:	e841 2300 	strex	r3, r2, [r1]
 800bbae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1e6      	bne.n	800bb84 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3308      	adds	r3, #8
 800bbbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	e853 3f00 	ldrex	r3, [r3]
 800bbc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bbcc:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	3308      	adds	r3, #8
 800bbd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbd6:	61ba      	str	r2, [r7, #24]
 800bbd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbda:	6979      	ldr	r1, [r7, #20]
 800bbdc:	69ba      	ldr	r2, [r7, #24]
 800bbde:	e841 2300 	strex	r3, r2, [r1]
 800bbe2:	613b      	str	r3, [r7, #16]
   return(result);
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1e5      	bne.n	800bbb6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2220      	movs	r2, #32
 800bbee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800bbf2:	bf00      	nop
 800bbf4:	373c      	adds	r7, #60	@ 0x3c
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbfe:	b480      	push	{r7}
 800bc00:	b095      	sub	sp, #84	@ 0x54
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc0e:	e853 3f00 	ldrex	r3, [r3]
 800bc12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	461a      	mov	r2, r3
 800bc22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc24:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc26:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bc2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc2c:	e841 2300 	strex	r3, r2, [r1]
 800bc30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d1e6      	bne.n	800bc06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	3308      	adds	r3, #8
 800bc3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc40:	6a3b      	ldr	r3, [r7, #32]
 800bc42:	e853 3f00 	ldrex	r3, [r3]
 800bc46:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc4e:	f023 0301 	bic.w	r3, r3, #1
 800bc52:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	3308      	adds	r3, #8
 800bc5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bc5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc64:	e841 2300 	strex	r3, r2, [r1]
 800bc68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d1e3      	bne.n	800bc38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d118      	bne.n	800bcaa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	e853 3f00 	ldrex	r3, [r3]
 800bc84:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	f023 0310 	bic.w	r3, r3, #16
 800bc8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	461a      	mov	r2, r3
 800bc94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc96:	61bb      	str	r3, [r7, #24]
 800bc98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc9a:	6979      	ldr	r1, [r7, #20]
 800bc9c:	69ba      	ldr	r2, [r7, #24]
 800bc9e:	e841 2300 	strex	r3, r2, [r1]
 800bca2:	613b      	str	r3, [r7, #16]
   return(result);
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1e6      	bne.n	800bc78 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2220      	movs	r2, #32
 800bcae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bcbe:	bf00      	nop
 800bcc0:	3754      	adds	r7, #84	@ 0x54
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b090      	sub	sp, #64	@ 0x40
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f003 0320 	and.w	r3, r3, #32
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d137      	bne.n	800bd56 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bce8:	2200      	movs	r2, #0
 800bcea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bcee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	3308      	adds	r3, #8
 800bcf4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf8:	e853 3f00 	ldrex	r3, [r3]
 800bcfc:	623b      	str	r3, [r7, #32]
   return(result);
 800bcfe:	6a3b      	ldr	r3, [r7, #32]
 800bd00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd04:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	3308      	adds	r3, #8
 800bd0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd0e:	633a      	str	r2, [r7, #48]	@ 0x30
 800bd10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd16:	e841 2300 	strex	r3, r2, [r1]
 800bd1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d1e5      	bne.n	800bcee <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	e853 3f00 	ldrex	r3, [r3]
 800bd2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd36:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd40:	61fb      	str	r3, [r7, #28]
 800bd42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd44:	69b9      	ldr	r1, [r7, #24]
 800bd46:	69fa      	ldr	r2, [r7, #28]
 800bd48:	e841 2300 	strex	r3, r2, [r1]
 800bd4c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1e6      	bne.n	800bd22 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bd54:	e002      	b.n	800bd5c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bd56:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bd58:	f7ff f93e 	bl	800afd8 <HAL_UART_TxCpltCallback>
}
 800bd5c:	bf00      	nop
 800bd5e:	3740      	adds	r7, #64	@ 0x40
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd70:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f7ff f93a 	bl	800afec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd78:	bf00      	nop
 800bd7a:	3710      	adds	r7, #16
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd8c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd94:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd9c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bda8:	2b80      	cmp	r3, #128	@ 0x80
 800bdaa:	d109      	bne.n	800bdc0 <UART_DMAError+0x40>
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	2b21      	cmp	r3, #33	@ 0x21
 800bdb0:	d106      	bne.n	800bdc0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bdba:	6978      	ldr	r0, [r7, #20]
 800bdbc:	f7ff fede 	bl	800bb7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdca:	2b40      	cmp	r3, #64	@ 0x40
 800bdcc:	d109      	bne.n	800bde2 <UART_DMAError+0x62>
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2b22      	cmp	r3, #34	@ 0x22
 800bdd2:	d106      	bne.n	800bde2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bddc:	6978      	ldr	r0, [r7, #20]
 800bdde:	f7ff ff0e 	bl	800bbfe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bde8:	f043 0210 	orr.w	r2, r3, #16
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bdf2:	6978      	ldr	r0, [r7, #20]
 800bdf4:	f7ff f904 	bl	800b000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdf8:	bf00      	nop
 800bdfa:	3718      	adds	r7, #24
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2200      	movs	r2, #0
 800be12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be1e:	68f8      	ldr	r0, [r7, #12]
 800be20:	f7ff f8ee 	bl	800b000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be24:	bf00      	nop
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b088      	sub	sp, #32
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	e853 3f00 	ldrex	r3, [r3]
 800be40:	60bb      	str	r3, [r7, #8]
   return(result);
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be48:	61fb      	str	r3, [r7, #28]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	461a      	mov	r2, r3
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	61bb      	str	r3, [r7, #24]
 800be54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be56:	6979      	ldr	r1, [r7, #20]
 800be58:	69ba      	ldr	r2, [r7, #24]
 800be5a:	e841 2300 	strex	r3, r2, [r1]
 800be5e:	613b      	str	r3, [r7, #16]
   return(result);
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d1e6      	bne.n	800be34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2220      	movs	r2, #32
 800be6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2200      	movs	r2, #0
 800be72:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f7ff f8af 	bl	800afd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be7a:	bf00      	nop
 800be7c:	3720      	adds	r7, #32
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
	...

0800be84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b09c      	sub	sp, #112	@ 0x70
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800be92:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be9c:	2b22      	cmp	r3, #34	@ 0x22
 800be9e:	f040 80be 	bne.w	800c01e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bea8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800beac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800beb0:	b2d9      	uxtb	r1, r3
 800beb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bebc:	400a      	ands	r2, r1
 800bebe:	b2d2      	uxtb	r2, r2
 800bec0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bec6:	1c5a      	adds	r2, r3, #1
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	3b01      	subs	r3, #1
 800bed6:	b29a      	uxth	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f040 80a1 	bne.w	800c02e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bef4:	e853 3f00 	ldrex	r3, [r3]
 800bef8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800befa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800befc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf00:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	461a      	mov	r2, r3
 800bf08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bf10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf12:	e841 2300 	strex	r3, r2, [r1]
 800bf16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bf18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1e6      	bne.n	800beec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	3308      	adds	r3, #8
 800bf24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf28:	e853 3f00 	ldrex	r3, [r3]
 800bf2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bf2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf30:	f023 0301 	bic.w	r3, r3, #1
 800bf34:	667b      	str	r3, [r7, #100]	@ 0x64
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	3308      	adds	r3, #8
 800bf3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bf3e:	647a      	str	r2, [r7, #68]	@ 0x44
 800bf40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf46:	e841 2300 	strex	r3, r2, [r1]
 800bf4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1e5      	bne.n	800bf1e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2220      	movs	r2, #32
 800bf56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a33      	ldr	r2, [pc, #204]	@ (800c038 <UART_RxISR_8BIT+0x1b4>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d01f      	beq.n	800bfb0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d018      	beq.n	800bfb0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf86:	e853 3f00 	ldrex	r3, [r3]
 800bf8a:	623b      	str	r3, [r7, #32]
   return(result);
 800bf8c:	6a3b      	ldr	r3, [r7, #32]
 800bf8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bf92:	663b      	str	r3, [r7, #96]	@ 0x60
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	461a      	mov	r2, r3
 800bf9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf9c:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bfa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfa4:	e841 2300 	strex	r3, r2, [r1]
 800bfa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bfaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1e6      	bne.n	800bf7e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d12e      	bne.n	800c016 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	e853 3f00 	ldrex	r3, [r3]
 800bfca:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f023 0310 	bic.w	r3, r3, #16
 800bfd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	461a      	mov	r2, r3
 800bfda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bfdc:	61fb      	str	r3, [r7, #28]
 800bfde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe0:	69b9      	ldr	r1, [r7, #24]
 800bfe2:	69fa      	ldr	r2, [r7, #28]
 800bfe4:	e841 2300 	strex	r3, r2, [r1]
 800bfe8:	617b      	str	r3, [r7, #20]
   return(result);
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1e6      	bne.n	800bfbe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	69db      	ldr	r3, [r3, #28]
 800bff6:	f003 0310 	and.w	r3, r3, #16
 800bffa:	2b10      	cmp	r3, #16
 800bffc:	d103      	bne.n	800c006 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2210      	movs	r2, #16
 800c004:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c00c:	4619      	mov	r1, r3
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7ff f800 	bl	800b014 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c014:	e00b      	b.n	800c02e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fe22 	bl	800cc60 <HAL_UART_RxCpltCallback>
}
 800c01c:	e007      	b.n	800c02e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	699a      	ldr	r2, [r3, #24]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f042 0208 	orr.w	r2, r2, #8
 800c02c:	619a      	str	r2, [r3, #24]
}
 800c02e:	bf00      	nop
 800c030:	3770      	adds	r7, #112	@ 0x70
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	40008000 	.word	0x40008000

0800c03c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b09c      	sub	sp, #112	@ 0x70
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c04a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c054:	2b22      	cmp	r3, #34	@ 0x22
 800c056:	f040 80be 	bne.w	800c1d6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c060:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c068:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c06a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c06e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c072:	4013      	ands	r3, r2
 800c074:	b29a      	uxth	r2, r3
 800c076:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c078:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c07e:	1c9a      	adds	r2, r3, #2
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	3b01      	subs	r3, #1
 800c08e:	b29a      	uxth	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f040 80a1 	bne.w	800c1e6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0ac:	e853 3f00 	ldrex	r3, [r3]
 800c0b0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c0b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0b8:	667b      	str	r3, [r7, #100]	@ 0x64
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	461a      	mov	r2, r3
 800c0c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0c2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c0c4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c0c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c0ca:	e841 2300 	strex	r3, r2, [r1]
 800c0ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c0d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1e6      	bne.n	800c0a4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	3308      	adds	r3, #8
 800c0dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0e0:	e853 3f00 	ldrex	r3, [r3]
 800c0e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e8:	f023 0301 	bic.w	r3, r3, #1
 800c0ec:	663b      	str	r3, [r7, #96]	@ 0x60
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3308      	adds	r3, #8
 800c0f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c0f6:	643a      	str	r2, [r7, #64]	@ 0x40
 800c0f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c0fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c0fe:	e841 2300 	strex	r3, r2, [r1]
 800c102:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e5      	bne.n	800c0d6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2220      	movs	r2, #32
 800c10e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a33      	ldr	r2, [pc, #204]	@ (800c1f0 <UART_RxISR_16BIT+0x1b4>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d01f      	beq.n	800c168 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c132:	2b00      	cmp	r3, #0
 800c134:	d018      	beq.n	800c168 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13c:	6a3b      	ldr	r3, [r7, #32]
 800c13e:	e853 3f00 	ldrex	r3, [r3]
 800c142:	61fb      	str	r3, [r7, #28]
   return(result);
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c14a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	461a      	mov	r2, r3
 800c152:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c156:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c15a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c15c:	e841 2300 	strex	r3, r2, [r1]
 800c160:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1e6      	bne.n	800c136 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d12e      	bne.n	800c1ce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	e853 3f00 	ldrex	r3, [r3]
 800c182:	60bb      	str	r3, [r7, #8]
   return(result);
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	f023 0310 	bic.w	r3, r3, #16
 800c18a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	461a      	mov	r2, r3
 800c192:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c194:	61bb      	str	r3, [r7, #24]
 800c196:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c198:	6979      	ldr	r1, [r7, #20]
 800c19a:	69ba      	ldr	r2, [r7, #24]
 800c19c:	e841 2300 	strex	r3, r2, [r1]
 800c1a0:	613b      	str	r3, [r7, #16]
   return(result);
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d1e6      	bne.n	800c176 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	69db      	ldr	r3, [r3, #28]
 800c1ae:	f003 0310 	and.w	r3, r3, #16
 800c1b2:	2b10      	cmp	r3, #16
 800c1b4:	d103      	bne.n	800c1be <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2210      	movs	r2, #16
 800c1bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7fe ff24 	bl	800b014 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1cc:	e00b      	b.n	800c1e6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 fd46 	bl	800cc60 <HAL_UART_RxCpltCallback>
}
 800c1d4:	e007      	b.n	800c1e6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	699a      	ldr	r2, [r3, #24]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f042 0208 	orr.w	r2, r2, #8
 800c1e4:	619a      	str	r2, [r3, #24]
}
 800c1e6:	bf00      	nop
 800c1e8:	3770      	adds	r7, #112	@ 0x70
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	40008000 	.word	0x40008000

0800c1f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b0ac      	sub	sp, #176	@ 0xb0
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c202:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	69db      	ldr	r3, [r3, #28]
 800c20c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c22a:	2b22      	cmp	r3, #34	@ 0x22
 800c22c:	f040 8182 	bne.w	800c534 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c236:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c23a:	e125      	b.n	800c488 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c242:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c246:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c24a:	b2d9      	uxtb	r1, r3
 800c24c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c250:	b2da      	uxtb	r2, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c256:	400a      	ands	r2, r1
 800c258:	b2d2      	uxtb	r2, r2
 800c25a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c260:	1c5a      	adds	r2, r3, #1
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	3b01      	subs	r3, #1
 800c270:	b29a      	uxth	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	69db      	ldr	r3, [r3, #28]
 800c27e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c286:	f003 0307 	and.w	r3, r3, #7
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d053      	beq.n	800c336 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c28e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	2b00      	cmp	r3, #0
 800c298:	d011      	beq.n	800c2be <UART_RxISR_8BIT_FIFOEN+0xca>
 800c29a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c29e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00b      	beq.n	800c2be <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2b4:	f043 0201 	orr.w	r2, r3, #1
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2c2:	f003 0302 	and.w	r3, r3, #2
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d011      	beq.n	800c2ee <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c2ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c2ce:	f003 0301 	and.w	r3, r3, #1
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00b      	beq.n	800c2ee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2202      	movs	r2, #2
 800c2dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2e4:	f043 0204 	orr.w	r2, r3, #4
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2f2:	f003 0304 	and.w	r3, r3, #4
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d011      	beq.n	800c31e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c2fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c2fe:	f003 0301 	and.w	r3, r3, #1
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00b      	beq.n	800c31e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2204      	movs	r2, #4
 800c30c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c314:	f043 0202 	orr.w	r2, r3, #2
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c324:	2b00      	cmp	r3, #0
 800c326:	d006      	beq.n	800c336 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f7fe fe69 	bl	800b000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2200      	movs	r2, #0
 800c332:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f040 80a2 	bne.w	800c488 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c34a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c34c:	e853 3f00 	ldrex	r3, [r3]
 800c350:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	461a      	mov	r2, r3
 800c362:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c366:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c368:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c36c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c36e:	e841 2300 	strex	r3, r2, [r1]
 800c372:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c374:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c376:	2b00      	cmp	r3, #0
 800c378:	d1e4      	bne.n	800c344 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	3308      	adds	r3, #8
 800c380:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c382:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c384:	e853 3f00 	ldrex	r3, [r3]
 800c388:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c38a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c38c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c390:	f023 0301 	bic.w	r3, r3, #1
 800c394:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	3308      	adds	r3, #8
 800c39e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c3a2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c3a4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c3a8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c3aa:	e841 2300 	strex	r3, r2, [r1]
 800c3ae:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c3b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d1e1      	bne.n	800c37a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2220      	movs	r2, #32
 800c3ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a5f      	ldr	r2, [pc, #380]	@ (800c54c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d021      	beq.n	800c418 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d01a      	beq.n	800c418 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3ea:	e853 3f00 	ldrex	r3, [r3]
 800c3ee:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c3f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c3f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	461a      	mov	r2, r3
 800c400:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c404:	657b      	str	r3, [r7, #84]	@ 0x54
 800c406:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c408:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c40a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c40c:	e841 2300 	strex	r3, r2, [r1]
 800c410:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c414:	2b00      	cmp	r3, #0
 800c416:	d1e4      	bne.n	800c3e2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d130      	bne.n	800c482 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c42e:	e853 3f00 	ldrex	r3, [r3]
 800c432:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c436:	f023 0310 	bic.w	r3, r3, #16
 800c43a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	461a      	mov	r2, r3
 800c444:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c448:	643b      	str	r3, [r7, #64]	@ 0x40
 800c44a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c44e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c450:	e841 2300 	strex	r3, r2, [r1]
 800c454:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1e4      	bne.n	800c426 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	69db      	ldr	r3, [r3, #28]
 800c462:	f003 0310 	and.w	r3, r3, #16
 800c466:	2b10      	cmp	r3, #16
 800c468:	d103      	bne.n	800c472 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2210      	movs	r2, #16
 800c470:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c478:	4619      	mov	r1, r3
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f7fe fdca 	bl	800b014 <HAL_UARTEx_RxEventCallback>
 800c480:	e002      	b.n	800c488 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fbec 	bl	800cc60 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c488:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d006      	beq.n	800c49e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800c490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c494:	f003 0320 	and.w	r3, r3, #32
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f47f aecf 	bne.w	800c23c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c4a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c4a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d049      	beq.n	800c544 <UART_RxISR_8BIT_FIFOEN+0x350>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c4b6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d242      	bcs.n	800c544 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	3308      	adds	r3, #8
 800c4c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c6:	6a3b      	ldr	r3, [r7, #32]
 800c4c8:	e853 3f00 	ldrex	r3, [r3]
 800c4cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4ce:	69fb      	ldr	r3, [r7, #28]
 800c4d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c4d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	3308      	adds	r3, #8
 800c4de:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c4e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c4e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c4e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4ea:	e841 2300 	strex	r3, r2, [r1]
 800c4ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1e3      	bne.n	800c4be <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4a15      	ldr	r2, [pc, #84]	@ (800c550 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c4fa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	e853 3f00 	ldrex	r3, [r3]
 800c508:	60bb      	str	r3, [r7, #8]
   return(result);
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	f043 0320 	orr.w	r3, r3, #32
 800c510:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	461a      	mov	r2, r3
 800c51a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c51e:	61bb      	str	r3, [r7, #24]
 800c520:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c522:	6979      	ldr	r1, [r7, #20]
 800c524:	69ba      	ldr	r2, [r7, #24]
 800c526:	e841 2300 	strex	r3, r2, [r1]
 800c52a:	613b      	str	r3, [r7, #16]
   return(result);
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1e4      	bne.n	800c4fc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c532:	e007      	b.n	800c544 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	699a      	ldr	r2, [r3, #24]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f042 0208 	orr.w	r2, r2, #8
 800c542:	619a      	str	r2, [r3, #24]
}
 800c544:	bf00      	nop
 800c546:	37b0      	adds	r7, #176	@ 0xb0
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	40008000 	.word	0x40008000
 800c550:	0800be85 	.word	0x0800be85

0800c554 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b0ae      	sub	sp, #184	@ 0xb8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c562:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	69db      	ldr	r3, [r3, #28]
 800c56c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c58a:	2b22      	cmp	r3, #34	@ 0x22
 800c58c:	f040 8186 	bne.w	800c89c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c596:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c59a:	e129      	b.n	800c7f0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5a2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c5ae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c5b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c5b6:	4013      	ands	r3, r2
 800c5b8:	b29a      	uxth	r2, r3
 800c5ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c5be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5c4:	1c9a      	adds	r2, r3, #2
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	3b01      	subs	r3, #1
 800c5d4:	b29a      	uxth	r2, r3
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	69db      	ldr	r3, [r3, #28]
 800c5e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c5e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c5ea:	f003 0307 	and.w	r3, r3, #7
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d053      	beq.n	800c69a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c5f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c5f6:	f003 0301 	and.w	r3, r3, #1
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d011      	beq.n	800c622 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c5fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00b      	beq.n	800c622 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2201      	movs	r2, #1
 800c610:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c618:	f043 0201 	orr.w	r2, r3, #1
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c622:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c626:	f003 0302 	and.w	r3, r3, #2
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d011      	beq.n	800c652 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c62e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c632:	f003 0301 	and.w	r3, r3, #1
 800c636:	2b00      	cmp	r3, #0
 800c638:	d00b      	beq.n	800c652 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2202      	movs	r2, #2
 800c640:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c648:	f043 0204 	orr.w	r2, r3, #4
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c652:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c656:	f003 0304 	and.w	r3, r3, #4
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d011      	beq.n	800c682 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c65e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c662:	f003 0301 	and.w	r3, r3, #1
 800c666:	2b00      	cmp	r3, #0
 800c668:	d00b      	beq.n	800c682 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2204      	movs	r2, #4
 800c670:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c678:	f043 0202 	orr.w	r2, r3, #2
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d006      	beq.n	800c69a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7fe fcb7 	bl	800b000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f040 80a4 	bne.w	800c7f0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c6b0:	e853 3f00 	ldrex	r3, [r3]
 800c6b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c6b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c6b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c6bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c6ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c6ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c6d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c6d6:	e841 2300 	strex	r3, r2, [r1]
 800c6da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c6dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1e2      	bne.n	800c6a8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	3308      	adds	r3, #8
 800c6e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c6ec:	e853 3f00 	ldrex	r3, [r3]
 800c6f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c6f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c6f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c6f8:	f023 0301 	bic.w	r3, r3, #1
 800c6fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	3308      	adds	r3, #8
 800c706:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c70a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c70c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c70e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c710:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c712:	e841 2300 	strex	r3, r2, [r1]
 800c716:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d1e1      	bne.n	800c6e2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2220      	movs	r2, #32
 800c722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a5f      	ldr	r2, [pc, #380]	@ (800c8b4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d021      	beq.n	800c780 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c746:	2b00      	cmp	r3, #0
 800c748:	d01a      	beq.n	800c780 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c752:	e853 3f00 	ldrex	r3, [r3]
 800c756:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c758:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c75a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c75e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	461a      	mov	r2, r3
 800c768:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c76c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c76e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c770:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c772:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c774:	e841 2300 	strex	r3, r2, [r1]
 800c778:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c77a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1e4      	bne.n	800c74a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c784:	2b01      	cmp	r3, #1
 800c786:	d130      	bne.n	800c7ea <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c796:	e853 3f00 	ldrex	r3, [r3]
 800c79a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c79c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c79e:	f023 0310 	bic.w	r3, r3, #16
 800c7a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c7b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c7b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7b8:	e841 2300 	strex	r3, r2, [r1]
 800c7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d1e4      	bne.n	800c78e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	69db      	ldr	r3, [r3, #28]
 800c7ca:	f003 0310 	and.w	r3, r3, #16
 800c7ce:	2b10      	cmp	r3, #16
 800c7d0:	d103      	bne.n	800c7da <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2210      	movs	r2, #16
 800c7d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f7fe fc16 	bl	800b014 <HAL_UARTEx_RxEventCallback>
 800c7e8:	e002      	b.n	800c7f0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fa38 	bl	800cc60 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c7f0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d006      	beq.n	800c806 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800c7f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c7fc:	f003 0320 	and.w	r3, r3, #32
 800c800:	2b00      	cmp	r3, #0
 800c802:	f47f aecb 	bne.w	800c59c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c80c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c810:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c814:	2b00      	cmp	r3, #0
 800c816:	d049      	beq.n	800c8ac <UART_RxISR_16BIT_FIFOEN+0x358>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c81e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c822:	429a      	cmp	r2, r3
 800c824:	d242      	bcs.n	800c8ac <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	3308      	adds	r3, #8
 800c82c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c830:	e853 3f00 	ldrex	r3, [r3]
 800c834:	623b      	str	r3, [r7, #32]
   return(result);
 800c836:	6a3b      	ldr	r3, [r7, #32]
 800c838:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c83c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	3308      	adds	r3, #8
 800c846:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c84a:	633a      	str	r2, [r7, #48]	@ 0x30
 800c84c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c84e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c852:	e841 2300 	strex	r3, r2, [r1]
 800c856:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1e3      	bne.n	800c826 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	4a15      	ldr	r2, [pc, #84]	@ (800c8b8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c862:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	e853 3f00 	ldrex	r3, [r3]
 800c870:	60fb      	str	r3, [r7, #12]
   return(result);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f043 0320 	orr.w	r3, r3, #32
 800c878:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	461a      	mov	r2, r3
 800c882:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c886:	61fb      	str	r3, [r7, #28]
 800c888:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88a:	69b9      	ldr	r1, [r7, #24]
 800c88c:	69fa      	ldr	r2, [r7, #28]
 800c88e:	e841 2300 	strex	r3, r2, [r1]
 800c892:	617b      	str	r3, [r7, #20]
   return(result);
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d1e4      	bne.n	800c864 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c89a:	e007      	b.n	800c8ac <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	699a      	ldr	r2, [r3, #24]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f042 0208 	orr.w	r2, r2, #8
 800c8aa:	619a      	str	r2, [r3, #24]
}
 800c8ac:	bf00      	nop
 800c8ae:	37b8      	adds	r7, #184	@ 0xb8
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	40008000 	.word	0x40008000
 800c8b8:	0800c03d 	.word	0x0800c03d

0800c8bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b083      	sub	sp, #12
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c8c4:	bf00      	nop
 800c8c6:	370c      	adds	r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c8d8:	bf00      	nop
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c8ec:	bf00      	nop
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c906:	2b01      	cmp	r3, #1
 800c908:	d101      	bne.n	800c90e <HAL_UARTEx_DisableFifoMode+0x16>
 800c90a:	2302      	movs	r3, #2
 800c90c:	e027      	b.n	800c95e <HAL_UARTEx_DisableFifoMode+0x66>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2201      	movs	r2, #1
 800c912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2224      	movs	r2, #36	@ 0x24
 800c91a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f022 0201 	bic.w	r2, r2, #1
 800c934:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c93c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2220      	movs	r2, #32
 800c950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2200      	movs	r2, #0
 800c958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3714      	adds	r7, #20
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr

0800c96a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b084      	sub	sp, #16
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d101      	bne.n	800c982 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c97e:	2302      	movs	r3, #2
 800c980:	e02d      	b.n	800c9de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2201      	movs	r2, #1
 800c986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2224      	movs	r2, #36	@ 0x24
 800c98e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f022 0201 	bic.w	r2, r2, #1
 800c9a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	683a      	ldr	r2, [r7, #0]
 800c9ba:	430a      	orrs	r2, r1
 800c9bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f000 f850 	bl	800ca64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2220      	movs	r2, #32
 800c9d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}

0800c9e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b084      	sub	sp, #16
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
 800c9ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d101      	bne.n	800c9fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c9fa:	2302      	movs	r3, #2
 800c9fc:	e02d      	b.n	800ca5a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2201      	movs	r2, #1
 800ca02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2224      	movs	r2, #36	@ 0x24
 800ca0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f022 0201 	bic.w	r2, r2, #1
 800ca24:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	683a      	ldr	r2, [r7, #0]
 800ca36:	430a      	orrs	r2, r1
 800ca38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 f812 	bl	800ca64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	68fa      	ldr	r2, [r7, #12]
 800ca46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2220      	movs	r2, #32
 800ca4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2200      	movs	r2, #0
 800ca54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3710      	adds	r7, #16
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
	...

0800ca64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d108      	bne.n	800ca86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ca84:	e031      	b.n	800caea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ca86:	2308      	movs	r3, #8
 800ca88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ca8a:	2308      	movs	r3, #8
 800ca8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	0e5b      	lsrs	r3, r3, #25
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	f003 0307 	and.w	r3, r3, #7
 800ca9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	0f5b      	lsrs	r3, r3, #29
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	f003 0307 	and.w	r3, r3, #7
 800caac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800caae:	7bbb      	ldrb	r3, [r7, #14]
 800cab0:	7b3a      	ldrb	r2, [r7, #12]
 800cab2:	4911      	ldr	r1, [pc, #68]	@ (800caf8 <UARTEx_SetNbDataToProcess+0x94>)
 800cab4:	5c8a      	ldrb	r2, [r1, r2]
 800cab6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800caba:	7b3a      	ldrb	r2, [r7, #12]
 800cabc:	490f      	ldr	r1, [pc, #60]	@ (800cafc <UARTEx_SetNbDataToProcess+0x98>)
 800cabe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cac0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cac4:	b29a      	uxth	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cacc:	7bfb      	ldrb	r3, [r7, #15]
 800cace:	7b7a      	ldrb	r2, [r7, #13]
 800cad0:	4909      	ldr	r1, [pc, #36]	@ (800caf8 <UARTEx_SetNbDataToProcess+0x94>)
 800cad2:	5c8a      	ldrb	r2, [r1, r2]
 800cad4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cad8:	7b7a      	ldrb	r2, [r7, #13]
 800cada:	4908      	ldr	r1, [pc, #32]	@ (800cafc <UARTEx_SetNbDataToProcess+0x98>)
 800cadc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cade:	fb93 f3f2 	sdiv	r3, r3, r2
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800caea:	bf00      	nop
 800caec:	3714      	adds	r7, #20
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr
 800caf6:	bf00      	nop
 800caf8:	0801249c 	.word	0x0801249c
 800cafc:	080124a4 	.word	0x080124a4

0800cb00 <appInit>:

static void standingBy();
static void working(void);

void appInit()
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	af00      	add	r7, sp, #0
    motorInit();
 800cb04:	f000 f84e 	bl	800cba4 <motorInit>
}
 800cb08:	bf00      	nop
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <appRunning>:

void appRunning()
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	af00      	add	r7, sp, #0

    getKeyState(&keyState);
 800cb10:	480d      	ldr	r0, [pc, #52]	@ (800cb48 <appRunning+0x3c>)
 800cb12:	f000 fa0f 	bl	800cf34 <getKeyState>

    if (++flashCnt >= 10)
 800cb16:	4b0d      	ldr	r3, [pc, #52]	@ (800cb4c <appRunning+0x40>)
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	b2da      	uxtb	r2, r3
 800cb1e:	4b0b      	ldr	r3, [pc, #44]	@ (800cb4c <appRunning+0x40>)
 800cb20:	701a      	strb	r2, [r3, #0]
 800cb22:	4b0a      	ldr	r3, [pc, #40]	@ (800cb4c <appRunning+0x40>)
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	2b09      	cmp	r3, #9
 800cb28:	d902      	bls.n	800cb30 <appRunning+0x24>
        flashCnt = 0;
 800cb2a:	4b08      	ldr	r3, [pc, #32]	@ (800cb4c <appRunning+0x40>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	701a      	strb	r2, [r3, #0]

    led1On = 0;
 800cb30:	4b07      	ldr	r3, [pc, #28]	@ (800cb50 <appRunning+0x44>)
 800cb32:	2200      	movs	r2, #0
 800cb34:	701a      	strb	r2, [r3, #0]
    led2On = 0;
 800cb36:	4b07      	ldr	r3, [pc, #28]	@ (800cb54 <appRunning+0x48>)
 800cb38:	2200      	movs	r2, #0
 800cb3a:	701a      	strb	r2, [r3, #0]
    // case WORK:
    //     working();
    //     break;
    // }

    txDataProcess();
 800cb3c:	f000 f80c 	bl	800cb58 <txDataProcess>

    LED_drive();
 800cb40:	f000 fa36 	bl	800cfb0 <LED_drive>
}
 800cb44:	bf00      	nop
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	200006b0 	.word	0x200006b0
 800cb4c:	200006b1 	.word	0x200006b1
 800cb50:	200008c0 	.word	0x200008c0
 800cb54:	200008c1 	.word	0x200008c1

0800cb58 <txDataProcess>:
        // }
    }
}
#include "mt6701.h"
static void txDataProcess()
{
 800cb58:	b5b0      	push	{r4, r5, r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af02      	add	r7, sp, #8
    // sprintf(txBuffer, "hello\n");
    // sprintf(txBuffer, "%d\n", encoder.GetRawData());
    //  sprintf(txBuffer, "%d,%f\n", GetRawData(), getRawAngle());
    // uint16_t rawData = MT6701_GetRawData();
    // sprintf(txBuffer, "rawData: %u\n", rawData);
    float rawAngle = MT6701_GetRawAngle();
 800cb5e:	f000 fa8b 	bl	800d078 <MT6701_GetRawAngle>
 800cb62:	ed87 0a01 	vstr	s0, [r7, #4]
    float fullAngle = MT6701_GetFullAngle();
 800cb66:	f000 faa5 	bl	800d0b4 <MT6701_GetFullAngle>
 800cb6a:	ed87 0a00 	vstr	s0, [r7]
    sprintf(txBuffer, "rawAnle: %f, fullAngle: %f\n", rawAngle, fullAngle);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f7f3 fd12 	bl	8000598 <__aeabi_f2d>
 800cb74:	4604      	mov	r4, r0
 800cb76:	460d      	mov	r5, r1
 800cb78:	6838      	ldr	r0, [r7, #0]
 800cb7a:	f7f3 fd0d 	bl	8000598 <__aeabi_f2d>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	460b      	mov	r3, r1
 800cb82:	e9cd 2300 	strd	r2, r3, [sp]
 800cb86:	4622      	mov	r2, r4
 800cb88:	462b      	mov	r3, r5
 800cb8a:	4904      	ldr	r1, [pc, #16]	@ (800cb9c <txDataProcess+0x44>)
 800cb8c:	4804      	ldr	r0, [pc, #16]	@ (800cba0 <txDataProcess+0x48>)
 800cb8e:	f001 fed5 	bl	800e93c <siprintf>
    // sprintf(txBuffer, "rawAnle: %f, fullAngle: %f\n", MT6701_GetRawAngle(), MT6701_GetFullAngle());
    // sprintf(txBuffer, "hello\n");
    // sprintf(txBuffer, "txA: %f, txB: %f, txC: %f\n", txA, txB, txC);

    // sprintf(txBuffer, "velocity: %f\n", encoder.GetLapAngle());
}
 800cb92:	bf00      	nop
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bdb0      	pop	{r4, r5, r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	08012440 	.word	0x08012440
 800cba0:	20000764 	.word	0x20000764

0800cba4 <motorInit>:

static void setPwm1(unsigned short int a, unsigned short int b, unsigned short int c);
static float getElecAngle1(FocParameters *fp);

void motorInit()
{
 800cba4:	b480      	push	{r7}
 800cba6:	af00      	add	r7, sp, #0
    fp1.pole_pairs = 7;
 800cba8:	4b09      	ldr	r3, [pc, #36]	@ (800cbd0 <motorInit+0x2c>)
 800cbaa:	2207      	movs	r2, #7
 800cbac:	721a      	strb	r2, [r3, #8]
    fp1.setPwm = setPwm1;
 800cbae:	4b08      	ldr	r3, [pc, #32]	@ (800cbd0 <motorInit+0x2c>)
 800cbb0:	4a08      	ldr	r2, [pc, #32]	@ (800cbd4 <motorInit+0x30>)
 800cbb2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    fp1.getElecAngle = getElecAngle1;
 800cbb6:	4b06      	ldr	r3, [pc, #24]	@ (800cbd0 <motorInit+0x2c>)
 800cbb8:	4a07      	ldr	r2, [pc, #28]	@ (800cbd8 <motorInit+0x34>)
 800cbba:	611a      	str	r2, [r3, #16]
    fp1.zeroElectricAngleOffSet = 0;
 800cbbc:	4b04      	ldr	r3, [pc, #16]	@ (800cbd0 <motorInit+0x2c>)
 800cbbe:	f04f 0200 	mov.w	r2, #0
 800cbc2:	605a      	str	r2, [r3, #4]
}
 800cbc4:	bf00      	nop
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop
 800cbd0:	200006b4 	.word	0x200006b4
 800cbd4:	0800cbdd 	.word	0x0800cbdd
 800cbd8:	0800cc11 	.word	0x0800cc11

0800cbdc <setPwm1>:

static void setPwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	80fb      	strh	r3, [r7, #6]
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	80bb      	strh	r3, [r7, #4]
 800cbea:	4613      	mov	r3, r2
 800cbec:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = a;
 800cbee:	4a07      	ldr	r2, [pc, #28]	@ (800cc0c <setPwm1+0x30>)
 800cbf0:	88fb      	ldrh	r3, [r7, #6]
 800cbf2:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800cbf4:	4a05      	ldr	r2, [pc, #20]	@ (800cc0c <setPwm1+0x30>)
 800cbf6:	88bb      	ldrh	r3, [r7, #4]
 800cbf8:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = c;
 800cbfa:	4a04      	ldr	r2, [pc, #16]	@ (800cc0c <setPwm1+0x30>)
 800cbfc:	887b      	ldrh	r3, [r7, #2]
 800cbfe:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800cc00:	bf00      	nop
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr
 800cc0c:	40012c00 	.word	0x40012c00

0800cc10 <getElecAngle1>:

static float getElecAngle1(FocParameters *fp)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	ed2d 8b02 	vpush	{d8}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
    fp->angle_el = _normalizeAngle(fp->pole_pairs * MT6701_GetRawAngle() - fp->zeroElectricAngleOffSet);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	7a1b      	ldrb	r3, [r3, #8]
 800cc20:	ee07 3a90 	vmov	s15, r3
 800cc24:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800cc28:	f000 fa26 	bl	800d078 <MT6701_GetRawAngle>
 800cc2c:	eef0 7a40 	vmov.f32	s15, s0
 800cc30:	ee28 7a27 	vmul.f32	s14, s16, s15
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	edd3 7a01 	vldr	s15, [r3, #4]
 800cc3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc3e:	eeb0 0a67 	vmov.f32	s0, s15
 800cc42:	f000 f941 	bl	800cec8 <_normalizeAngle>
 800cc46:	eef0 7a40 	vmov.f32	s15, s0
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800cc50:	bf00      	nop
 800cc52:	eeb0 0a67 	vmov.f32	s0, s15
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	ecbd 8b02 	vpop	{d8}
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <HAL_UART_RxCpltCallback>:
float comm1, comm2, comm3, comm4, comm5, comm6, comm7, comm8, comm9, comm10, comm11;
float load_data[5];
uint8_t tempData[24] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x7F};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a08      	ldr	r2, [pc, #32]	@ (800cc90 <HAL_UART_RxCpltCallback+0x30>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d109      	bne.n	800cc86 <HAL_UART_RxCpltCallback+0x26>
  {
    uartRcv(aRxBuffer);
 800cc72:	4b08      	ldr	r3, [pc, #32]	@ (800cc94 <HAL_UART_RxCpltCallback+0x34>)
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f000 f818 	bl	800ccac <uartRcv>

    HAL_UART_Receive_IT(&huart3, (uint8_t *)&aRxBuffer, 1);
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	4905      	ldr	r1, [pc, #20]	@ (800cc94 <HAL_UART_RxCpltCallback+0x34>)
 800cc80:	4805      	ldr	r0, [pc, #20]	@ (800cc98 <HAL_UART_RxCpltCallback+0x38>)
 800cc82:	f7fd fdb9 	bl	800a7f8 <HAL_UART_Receive_IT>
  }
}
 800cc86:	bf00      	nop
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	40004800 	.word	0x40004800
 800cc94:	2000087b 	.word	0x2000087b
 800cc98:	200005b8 	.word	0x200005b8

0800cc9c <printLog>:
  }
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
}

void printLog()
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	af00      	add	r7, sp, #0
#elif SHOW_WAVE == 0
  HAL_UART_Transmit(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer), 1000);
  // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
  memset(txBuffer, '\0', sizeof(txBuffer));
#endif
}
 800cca0:	bf00      	nop
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
	...

0800ccac <uartRcv>:

/*接收中断调用*/
void uartRcv(const char buf)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	71fb      	strb	r3, [r7, #7]
  if (rxUart.toProcessData == 0)
 800ccb6:	4b1a      	ldr	r3, [pc, #104]	@ (800cd20 <uartRcv+0x74>)
 800ccb8:	7d9b      	ldrb	r3, [r3, #22]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d12c      	bne.n	800cd18 <uartRcv+0x6c>
  {
    if (rxUart.index < MAX_LEN)
 800ccbe:	4b18      	ldr	r3, [pc, #96]	@ (800cd20 <uartRcv+0x74>)
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	2b13      	cmp	r3, #19
 800ccc4:	d81d      	bhi.n	800cd02 <uartRcv+0x56>
    {
      if (buf == '\n') // || buf == '\r')
 800ccc6:	79fb      	ldrb	r3, [r7, #7]
 800ccc8:	2b0a      	cmp	r3, #10
 800ccca:	d106      	bne.n	800ccda <uartRcv+0x2e>
      {
        rxUart.toProcessData = 1;
 800cccc:	4b14      	ldr	r3, [pc, #80]	@ (800cd20 <uartRcv+0x74>)
 800ccce:	2201      	movs	r2, #1
 800ccd0:	759a      	strb	r2, [r3, #22]
        rxUart.index = 0;
 800ccd2:	4b13      	ldr	r3, [pc, #76]	@ (800cd20 <uartRcv+0x74>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	701a      	strb	r2, [r3, #0]
      memset(rxUart.buf, '\0', MAX_LEN);
      rxUart.index = 0;
      rxUart.len = 0;
    }
  }
}
 800ccd8:	e01e      	b.n	800cd18 <uartRcv+0x6c>
        rxUart.buf[rxUart.index] = buf;
 800ccda:	4b11      	ldr	r3, [pc, #68]	@ (800cd20 <uartRcv+0x74>)
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	461a      	mov	r2, r3
 800cce0:	4b0f      	ldr	r3, [pc, #60]	@ (800cd20 <uartRcv+0x74>)
 800cce2:	4413      	add	r3, r2
 800cce4:	79fa      	ldrb	r2, [r7, #7]
 800cce6:	705a      	strb	r2, [r3, #1]
        rxUart.index++;
 800cce8:	4b0d      	ldr	r3, [pc, #52]	@ (800cd20 <uartRcv+0x74>)
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	3301      	adds	r3, #1
 800ccee:	b2da      	uxtb	r2, r3
 800ccf0:	4b0b      	ldr	r3, [pc, #44]	@ (800cd20 <uartRcv+0x74>)
 800ccf2:	701a      	strb	r2, [r3, #0]
        rxUart.len++;
 800ccf4:	4b0a      	ldr	r3, [pc, #40]	@ (800cd20 <uartRcv+0x74>)
 800ccf6:	7d5b      	ldrb	r3, [r3, #21]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	b2da      	uxtb	r2, r3
 800ccfc:	4b08      	ldr	r3, [pc, #32]	@ (800cd20 <uartRcv+0x74>)
 800ccfe:	755a      	strb	r2, [r3, #21]
}
 800cd00:	e00a      	b.n	800cd18 <uartRcv+0x6c>
      memset(rxUart.buf, '\0', MAX_LEN);
 800cd02:	2214      	movs	r2, #20
 800cd04:	2100      	movs	r1, #0
 800cd06:	4807      	ldr	r0, [pc, #28]	@ (800cd24 <uartRcv+0x78>)
 800cd08:	f001 fe7b 	bl	800ea02 <memset>
      rxUart.index = 0;
 800cd0c:	4b04      	ldr	r3, [pc, #16]	@ (800cd20 <uartRcv+0x74>)
 800cd0e:	2200      	movs	r2, #0
 800cd10:	701a      	strb	r2, [r3, #0]
      rxUart.len = 0;
 800cd12:	4b03      	ldr	r3, [pc, #12]	@ (800cd20 <uartRcv+0x74>)
 800cd14:	2200      	movs	r2, #0
 800cd16:	755a      	strb	r2, [r3, #21]
}
 800cd18:	bf00      	nop
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	20000864 	.word	0x20000864
 800cd24:	20000865 	.word	0x20000865

0800cd28 <_sin>:

// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7f3 fc30 	bl	8000598 <__aeabi_f2d>
 800cd38:	a339      	add	r3, pc, #228	@ (adr r3, 800ce20 <_sin+0xf8>)
 800cd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3e:	f7f3 fc83 	bl	8000648 <__aeabi_dmul>
 800cd42:	4602      	mov	r2, r0
 800cd44:	460b      	mov	r3, r1
 800cd46:	4610      	mov	r0, r2
 800cd48:	4619      	mov	r1, r3
 800cd4a:	f7f3 ff55 	bl	8000bf8 <__aeabi_d2uiz>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	0a1b      	lsrs	r3, r3, #8
 800cd5c:	b2db      	uxtb	r3, r3
 800cd5e:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2b3f      	cmp	r3, #63	@ 0x3f
 800cd64:	d80b      	bhi.n	800cd7e <_sin+0x56>
  {
    t1 = sine_array[i];
 800cd66:	4a2c      	ldr	r2, [pc, #176]	@ (800ce18 <_sin+0xf0>)
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd6e:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	3301      	adds	r3, #1
 800cd74:	4a28      	ldr	r2, [pc, #160]	@ (800ce18 <_sin+0xf0>)
 800cd76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd7a:	613b      	str	r3, [r7, #16]
 800cd7c:	e033      	b.n	800cde6 <_sin+0xbe>
  }
  else if (i < 128)
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd82:	d80e      	bhi.n	800cda2 <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800cd8a:	4a23      	ldr	r2, [pc, #140]	@ (800ce18 <_sin+0xf0>)
 800cd8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd90:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800cd98:	4a1f      	ldr	r2, [pc, #124]	@ (800ce18 <_sin+0xf0>)
 800cd9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd9e:	613b      	str	r3, [r7, #16]
 800cda0:	e021      	b.n	800cde6 <_sin+0xbe>
  }
  else if (i < 192)
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2bbf      	cmp	r3, #191	@ 0xbf
 800cda6:	d80e      	bhi.n	800cdc6 <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	3b80      	subs	r3, #128	@ 0x80
 800cdac:	4a1a      	ldr	r2, [pc, #104]	@ (800ce18 <_sin+0xf0>)
 800cdae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdb2:	425b      	negs	r3, r3
 800cdb4:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	3b7f      	subs	r3, #127	@ 0x7f
 800cdba:	4a17      	ldr	r2, [pc, #92]	@ (800ce18 <_sin+0xf0>)
 800cdbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdc0:	425b      	negs	r3, r3
 800cdc2:	613b      	str	r3, [r7, #16]
 800cdc4:	e00f      	b.n	800cde6 <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800cdcc:	4a12      	ldr	r2, [pc, #72]	@ (800ce18 <_sin+0xf0>)
 800cdce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdd2:	425b      	negs	r3, r3
 800cdd4:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800cddc:	4a0e      	ldr	r2, [pc, #56]	@ (800ce18 <_sin+0xf0>)
 800cdde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cde2:	425b      	negs	r3, r3
 800cde4:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800cde6:	693a      	ldr	r2, [r7, #16]
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	1ad3      	subs	r3, r2, r3
 800cdec:	68ba      	ldr	r2, [r7, #8]
 800cdee:	fb02 f303 	mul.w	r3, r2, r3
 800cdf2:	121a      	asrs	r2, r3, #8
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	ee07 3a90 	vmov	s15, r3
 800cdfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce00:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800ce1c <_sin+0xf4>
 800ce04:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800ce08:	eeb0 0a67 	vmov.f32	s0, s15
 800ce0c:	3718      	adds	r7, #24
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	f3af 8000 	nop.w
 800ce18:	20000024 	.word	0x20000024
 800ce1c:	38000000 	.word	0x38000000
 800ce20:	6446f9b4 	.word	0x6446f9b4
 800ce24:	40c45f30 	.word	0x40c45f30

0800ce28 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800ce32:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce36:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800ce80 <_cos+0x58>
 800ce3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce3e:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800ce42:	edd7 7a03 	vldr	s15, [r7, #12]
 800ce46:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800ce84 <_cos+0x5c>
 800ce4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce52:	dd06      	ble.n	800ce62 <_cos+0x3a>
 800ce54:	edd7 7a03 	vldr	s15, [r7, #12]
 800ce58:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800ce84 <_cos+0x5c>
 800ce5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce60:	e001      	b.n	800ce66 <_cos+0x3e>
 800ce62:	edd7 7a03 	vldr	s15, [r7, #12]
 800ce66:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800ce6a:	ed97 0a03 	vldr	s0, [r7, #12]
 800ce6e:	f7ff ff5b 	bl	800cd28 <_sin>
 800ce72:	eef0 7a40 	vmov.f32	s15, s0
}
 800ce76:	eeb0 0a67 	vmov.f32	s0, s15
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	3fc90fdb 	.word	0x3fc90fdb
 800ce84:	40c90fdb 	.word	0x40c90fdb

0800ce88 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b084      	sub	sp, #16
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	ed87 0a03 	vstr	s0, [r7, #12]
 800ce92:	60b8      	str	r0, [r7, #8]
 800ce94:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800ce96:	ed97 0a03 	vldr	s0, [r7, #12]
 800ce9a:	f7ff ff45 	bl	800cd28 <_sin>
 800ce9e:	eef0 7a40 	vmov.f32	s15, s0
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800cea8:	ed97 0a03 	vldr	s0, [r7, #12]
 800ceac:	f7ff ffbc 	bl	800ce28 <_cos>
 800ceb0:	eef0 7a40 	vmov.f32	s15, s0
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	edc3 7a00 	vstr	s15, [r3]
}
 800ceba:	bf00      	nop
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	0000      	movs	r0, r0
 800cec4:	0000      	movs	r0, r0
	...

0800cec8 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f7f3 fb60 	bl	8000598 <__aeabi_f2d>
 800ced8:	4602      	mov	r2, r0
 800ceda:	460b      	mov	r3, r1
 800cedc:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800cf28 <_normalizeAngle+0x60>
 800cee0:	ec43 2b10 	vmov	d0, r2, r3
 800cee4:	f005 f966 	bl	80121b4 <fmod>
 800cee8:	ec53 2b10 	vmov	r2, r3, d0
 800ceec:	4610      	mov	r0, r2
 800ceee:	4619      	mov	r1, r3
 800cef0:	f7f3 fea2 	bl	8000c38 <__aeabi_d2f>
 800cef4:	4603      	mov	r3, r0
 800cef6:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800cef8:	edd7 7a03 	vldr	s15, [r7, #12]
 800cefc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf04:	db02      	blt.n	800cf0c <_normalizeAngle+0x44>
 800cf06:	edd7 7a03 	vldr	s15, [r7, #12]
 800cf0a:	e005      	b.n	800cf18 <_normalizeAngle+0x50>
 800cf0c:	edd7 7a03 	vldr	s15, [r7, #12]
 800cf10:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800cf30 <_normalizeAngle+0x68>
 800cf14:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800cf18:	eeb0 0a67 	vmov.f32	s0, s15
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	f3af 8000 	nop.w
 800cf28:	60000000 	.word	0x60000000
 800cf2c:	401921fb 	.word	0x401921fb
 800cf30:	40c90fdb 	.word	0x40c90fdb

0800cf34 <getKeyState>:

/*
将物理按键转化为逻辑按键
 */
void getKeyState(KeyState *keyState)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
    uchar i;

    if (keyStruct[1].trigType == TRIG_SHORT)
 800cf3c:	4b1b      	ldr	r3, [pc, #108]	@ (800cfac <getKeyState+0x78>)
 800cf3e:	7d1b      	ldrb	r3, [r3, #20]
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d103      	bne.n	800cf4c <getKeyState+0x18>
        *keyState = USER1_SHORT;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2201      	movs	r2, #1
 800cf48:	701a      	strb	r2, [r3, #0]
 800cf4a:	e014      	b.n	800cf76 <getKeyState+0x42>
    else if (keyStruct[2].trigType == TRIG_SHORT)
 800cf4c:	4b17      	ldr	r3, [pc, #92]	@ (800cfac <getKeyState+0x78>)
 800cf4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cf52:	2b01      	cmp	r3, #1
 800cf54:	d103      	bne.n	800cf5e <getKeyState+0x2a>
        *keyState = USER2_SHORT;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2202      	movs	r2, #2
 800cf5a:	701a      	strb	r2, [r3, #0]
 800cf5c:	e00b      	b.n	800cf76 <getKeyState+0x42>
    else if (keyStruct[3].trigType == TRIG_SHORT)
 800cf5e:	4b13      	ldr	r3, [pc, #76]	@ (800cfac <getKeyState+0x78>)
 800cf60:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d103      	bne.n	800cf70 <getKeyState+0x3c>
        *keyState = USER3_SHORT;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2203      	movs	r2, #3
 800cf6c:	701a      	strb	r2, [r3, #0]
 800cf6e:	e002      	b.n	800cf76 <getKeyState+0x42>
    else
        *keyState = NONE_KEY;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < KEY_NUM; i++)
 800cf76:	2300      	movs	r3, #0
 800cf78:	73fb      	strb	r3, [r7, #15]
 800cf7a:	e00c      	b.n	800cf96 <getKeyState+0x62>
    {
        keyStruct[i].trigType = NO_TRIG;
 800cf7c:	7bfa      	ldrb	r2, [r7, #15]
 800cf7e:	490b      	ldr	r1, [pc, #44]	@ (800cfac <getKeyState+0x78>)
 800cf80:	4613      	mov	r3, r2
 800cf82:	005b      	lsls	r3, r3, #1
 800cf84:	4413      	add	r3, r2
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	440b      	add	r3, r1
 800cf8a:	3308      	adds	r3, #8
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < KEY_NUM; i++)
 800cf90:	7bfb      	ldrb	r3, [r7, #15]
 800cf92:	3301      	adds	r3, #1
 800cf94:	73fb      	strb	r3, [r7, #15]
 800cf96:	7bfb      	ldrb	r3, [r7, #15]
 800cf98:	2b03      	cmp	r3, #3
 800cf9a:	d9ef      	bls.n	800cf7c <getKeyState+0x48>
    }
}
 800cf9c:	bf00      	nop
 800cf9e:	bf00      	nop
 800cfa0:	3714      	adds	r7, #20
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop
 800cfac:	20000890 	.word	0x20000890

0800cfb0 <LED_drive>:
#include "led.h"

bool led1On, led2On;

void LED_drive()
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	af00      	add	r7, sp, #0
    if (led1On)
 800cfb4:	4b0f      	ldr	r3, [pc, #60]	@ (800cff4 <LED_drive+0x44>)
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d005      	beq.n	800cfc8 <LED_drive+0x18>
        LED1_ON;
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	2140      	movs	r1, #64	@ 0x40
 800cfc0:	480d      	ldr	r0, [pc, #52]	@ (800cff8 <LED_drive+0x48>)
 800cfc2:	f7f9 fee5 	bl	8006d90 <HAL_GPIO_WritePin>
 800cfc6:	e004      	b.n	800cfd2 <LED_drive+0x22>
    else
        LED1_OFF;
 800cfc8:	2201      	movs	r2, #1
 800cfca:	2140      	movs	r1, #64	@ 0x40
 800cfcc:	480a      	ldr	r0, [pc, #40]	@ (800cff8 <LED_drive+0x48>)
 800cfce:	f7f9 fedf 	bl	8006d90 <HAL_GPIO_WritePin>

    if (led2On)
 800cfd2:	4b0a      	ldr	r3, [pc, #40]	@ (800cffc <LED_drive+0x4c>)
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d005      	beq.n	800cfe6 <LED_drive+0x36>
        LED2_ON;
 800cfda:	2200      	movs	r2, #0
 800cfdc:	2110      	movs	r1, #16
 800cfde:	4806      	ldr	r0, [pc, #24]	@ (800cff8 <LED_drive+0x48>)
 800cfe0:	f7f9 fed6 	bl	8006d90 <HAL_GPIO_WritePin>
    else
        LED2_OFF;
}
 800cfe4:	e004      	b.n	800cff0 <LED_drive+0x40>
        LED2_OFF;
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	2110      	movs	r1, #16
 800cfea:	4803      	ldr	r0, [pc, #12]	@ (800cff8 <LED_drive+0x48>)
 800cfec:	f7f9 fed0 	bl	8006d90 <HAL_GPIO_WritePin>
}
 800cff0:	bf00      	nop
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	200008c0 	.word	0x200008c0
 800cff8:	48000800 	.word	0x48000800
 800cffc:	200008c1 	.word	0x200008c1

0800d000 <MT6701_GetRawData>:
#include "foc_utils.h"

static unsigned int rotationCount, rotationCount_Last;

uint16_t MT6701_GetRawData(void)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800d006:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d00a:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800d00c:	23c8      	movs	r3, #200	@ 0xc8
 800d00e:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 800d010:	e006      	b.n	800d020 <MT6701_GetRawData+0x20>
    {
        if (timeOut-- == 0)
 800d012:	88fb      	ldrh	r3, [r7, #6]
 800d014:	1e5a      	subs	r2, r3, #1
 800d016:	80fa      	strh	r2, [r7, #6]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d101      	bne.n	800d020 <MT6701_GetRawData+0x20>
        {
            //   FOC_log("SPI state error!\r\n");
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800d01c:	2300      	movs	r3, #0
 800d01e:	e025      	b.n	800d06c <MT6701_GetRawData+0x6c>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 800d020:	4814      	ldr	r0, [pc, #80]	@ (800d074 <MT6701_GetRawData+0x74>)
 800d022:	f7fb fa86 	bl	8008532 <HAL_SPI_GetState>
 800d026:	4603      	mov	r3, r0
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d1f2      	bne.n	800d012 <MT6701_GetRawData+0x12>
        }
    }

    MT6701_CS_Enable;
 800d02c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d030:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d034:	619a      	str	r2, [r3, #24]

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800d036:	1cba      	adds	r2, r7, #2
 800d038:	4639      	mov	r1, r7
 800d03a:	f04f 33ff 	mov.w	r3, #4294967295
 800d03e:	9300      	str	r3, [sp, #0]
 800d040:	2301      	movs	r3, #1
 800d042:	480c      	ldr	r0, [pc, #48]	@ (800d074 <MT6701_GetRawData+0x74>)
 800d044:	f7fb f853 	bl	80080ee <HAL_SPI_TransmitReceive>
 800d048:	4603      	mov	r3, r0
 800d04a:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800d04c:	797b      	ldrb	r3, [r7, #5]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d005      	beq.n	800d05e <MT6701_GetRawData+0x5e>
    {
        MT6701_CS_Disable;
 800d052:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d056:	2210      	movs	r2, #16
 800d058:	619a      	str	r2, [r3, #24]
        //  FOC_log("MT6701 read data error!\r\n");
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800d05a:	2300      	movs	r3, #0
 800d05c:	e006      	b.n	800d06c <MT6701_GetRawData+0x6c>
    }

    MT6701_CS_Disable;
 800d05e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d062:	2210      	movs	r2, #16
 800d064:	619a      	str	r2, [r3, #24]

    return rawData >> 2; // 取高14位的角度数据
 800d066:	887b      	ldrh	r3, [r7, #2]
 800d068:	089b      	lsrs	r3, r3, #2
 800d06a:	b29b      	uxth	r3, r3
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	200004b8 	.word	0x200004b8

0800d078 <MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float MT6701_GetRawAngle(void)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
    uint16_t rawData = MT6701_GetRawData();
 800d07e:	f7ff ffbf 	bl	800d000 <MT6701_GetRawData>
 800d082:	4603      	mov	r3, r0
 800d084:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800d086:	88fb      	ldrh	r3, [r7, #6]
 800d088:	ee07 3a90 	vmov	s15, r3
 800d08c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d090:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800d0ac <MT6701_GetRawAngle+0x34>
 800d094:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d098:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800d0b0 <MT6701_GetRawAngle+0x38>
 800d09c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800d0a0:	eeb0 0a67 	vmov.f32	s0, s15
 800d0a4:	3708      	adds	r7, #8
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	46800000 	.word	0x46800000
 800d0b0:	40c90fdb 	.word	0x40c90fdb

0800d0b4 <MT6701_GetFullAngle>:

// 获得转过的总角度，有圈数累加
float MT6701_GetFullAngle(void)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
    static float angle_Last = 0.0f;     // 上次的轴角度，范围0~6.28
    float angle = MT6701_GetRawAngle(); // 当前角度，范围0~6.28
 800d0ba:	f7ff ffdd 	bl	800d078 <MT6701_GetRawAngle>
 800d0be:	ed87 0a01 	vstr	s0, [r7, #4]
    float deltaAngle = angle - angle_Last;
 800d0c2:	4b1f      	ldr	r3, [pc, #124]	@ (800d140 <MT6701_GetFullAngle+0x8c>)
 800d0c4:	edd3 7a00 	vldr	s15, [r3]
 800d0c8:	ed97 7a01 	vldr	s14, [r7, #4]
 800d0cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0d0:	edc7 7a00 	vstr	s15, [r7]

    // 计算旋转的总圈数
    // 通过判断角度变化是否大于80%的一圈(0.8f*6.28318530718f)来判断是否发生了溢出，如果发生了，则将full_rotations增加1（如果d_angle小于0）或减少1（如果d_angle大于0）。

    if (fabsf(deltaAngle) > (0.8f * 6.28318530718f))
 800d0d4:	edd7 7a00 	vldr	s15, [r7]
 800d0d8:	eef0 7ae7 	vabs.f32	s15, s15
 800d0dc:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800d144 <MT6701_GetFullAngle+0x90>
 800d0e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e8:	dd13      	ble.n	800d112 <MT6701_GetFullAngle+0x5e>
    {
        rotationCount += (deltaAngle > 0) ? -1 : 1; // 圈数计算
 800d0ea:	edd7 7a00 	vldr	s15, [r7]
 800d0ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0f6:	dd02      	ble.n	800d0fe <MT6701_GetFullAngle+0x4a>
 800d0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0fc:	e000      	b.n	800d100 <MT6701_GetFullAngle+0x4c>
 800d0fe:	2201      	movs	r2, #1
 800d100:	4b11      	ldr	r3, [pc, #68]	@ (800d148 <MT6701_GetFullAngle+0x94>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4413      	add	r3, r2
 800d106:	4a10      	ldr	r2, [pc, #64]	@ (800d148 <MT6701_GetFullAngle+0x94>)
 800d108:	6013      	str	r3, [r2, #0]
        rotationCount_Last = rotationCount;
 800d10a:	4b0f      	ldr	r3, [pc, #60]	@ (800d148 <MT6701_GetFullAngle+0x94>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4a0f      	ldr	r2, [pc, #60]	@ (800d14c <MT6701_GetFullAngle+0x98>)
 800d110:	6013      	str	r3, [r2, #0]
    }

    angle_Last = angle;
 800d112:	4a0b      	ldr	r2, [pc, #44]	@ (800d140 <MT6701_GetFullAngle+0x8c>)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6013      	str	r3, [r2, #0]
    return rotationCount * 6.28318530718f + angle_Last; // 转过的圈数 * 2pi + 未转满一圈的角度值
 800d118:	4b0b      	ldr	r3, [pc, #44]	@ (800d148 <MT6701_GetFullAngle+0x94>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	ee07 3a90 	vmov	s15, r3
 800d120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d124:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800d150 <MT6701_GetFullAngle+0x9c>
 800d128:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d12c:	4b04      	ldr	r3, [pc, #16]	@ (800d140 <MT6701_GetFullAngle+0x8c>)
 800d12e:	edd3 7a00 	vldr	s15, [r3]
 800d132:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800d136:	eeb0 0a67 	vmov.f32	s0, s15
 800d13a:	3708      	adds	r7, #8
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	200008cc 	.word	0x200008cc
 800d144:	40a0d97c 	.word	0x40a0d97c
 800d148:	200008c4 	.word	0x200008c4
 800d14c:	200008c8 	.word	0x200008c8
 800d150:	40c90fdb 	.word	0x40c90fdb

0800d154 <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
static bool powerLost;
void userMain(void)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	af00      	add	r7, sp, #0
	// {
	// 	_30ms = 0;
	// 	sensoring();
	// }

	if (get100MsFlag())
 800d158:	f000 fa48 	bl	800d5ec <get100MsFlag>
 800d15c:	4603      	mov	r3, r0
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d001      	beq.n	800d166 <userMain+0x12>
	{
		appRunning();
 800d162:	f7ff fcd3 	bl	800cb0c <appRunning>
	}

	if (get500MsFlag())
 800d166:	f000 fa55 	bl	800d614 <get500MsFlag>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d001      	beq.n	800d174 <userMain+0x20>
	{
		printLog();
 800d170:	f7ff fd94 	bl	800cc9c <printLog>
	}
}
 800d174:	bf00      	nop
 800d176:	bd80      	pop	{r7, pc}

0800d178 <HAL_GPIO_EXTI_Callback>:
void setPowerLost()
{
	powerLost = 1;
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	4603      	mov	r3, r0
 800d180:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	if (Button3_Pin == GPIO_Pin)
 800d182:	88fb      	ldrh	r3, [r7, #6]
 800d184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d188:	d13a      	bne.n	800d200 <HAL_GPIO_EXTI_Callback+0x88>
	{
		Motor_state = ~Motor_state;
 800d18a:	4b1f      	ldr	r3, [pc, #124]	@ (800d208 <HAL_GPIO_EXTI_Callback+0x90>)
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	43db      	mvns	r3, r3
 800d190:	b2da      	uxtb	r2, r3
 800d192:	4b1d      	ldr	r3, [pc, #116]	@ (800d208 <HAL_GPIO_EXTI_Callback+0x90>)
 800d194:	701a      	strb	r2, [r3, #0]
		if (0 == Motor_state)
 800d196:	4b1c      	ldr	r3, [pc, #112]	@ (800d208 <HAL_GPIO_EXTI_Callback+0x90>)
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d118      	bne.n	800d1d0 <HAL_GPIO_EXTI_Callback+0x58>
		{
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800d19e:	2100      	movs	r1, #0
 800d1a0:	481a      	ldr	r0, [pc, #104]	@ (800d20c <HAL_GPIO_EXTI_Callback+0x94>)
 800d1a2:	f7fb fd55 	bl	8008c50 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800d1a6:	2104      	movs	r1, #4
 800d1a8:	4818      	ldr	r0, [pc, #96]	@ (800d20c <HAL_GPIO_EXTI_Callback+0x94>)
 800d1aa:	f7fb fd51 	bl	8008c50 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800d1ae:	2108      	movs	r1, #8
 800d1b0:	4816      	ldr	r0, [pc, #88]	@ (800d20c <HAL_GPIO_EXTI_Callback+0x94>)
 800d1b2:	f7fb fd4d 	bl	8008c50 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	4814      	ldr	r0, [pc, #80]	@ (800d20c <HAL_GPIO_EXTI_Callback+0x94>)
 800d1ba:	f7fd f81d 	bl	800a1f8 <HAL_TIMEx_PWMN_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800d1be:	2104      	movs	r1, #4
 800d1c0:	4812      	ldr	r0, [pc, #72]	@ (800d20c <HAL_GPIO_EXTI_Callback+0x94>)
 800d1c2:	f7fd f819 	bl	800a1f8 <HAL_TIMEx_PWMN_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800d1c6:	2108      	movs	r1, #8
 800d1c8:	4810      	ldr	r0, [pc, #64]	@ (800d20c <HAL_GPIO_EXTI_Callback+0x94>)
 800d1ca:	f7fd f815 	bl	800a1f8 <HAL_TIMEx_PWMN_Stop>
		}
	}
	/* NOTE: This function should not be modified, when the callback is needed,
			 the HAL_GPIO_EXTI_Callback could be implemented in the user file
	 */
}
 800d1ce:	e017      	b.n	800d200 <HAL_GPIO_EXTI_Callback+0x88>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800d1d0:	2100      	movs	r1, #0
 800d1d2:	480e      	ldr	r0, [pc, #56]	@ (800d20c <HAL_GPIO_EXTI_Callback+0x94>)
 800d1d4:	f7fb fc3c 	bl	8008a50 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800d1d8:	2104      	movs	r1, #4
 800d1da:	480c      	ldr	r0, [pc, #48]	@ (800d20c <HAL_GPIO_EXTI_Callback+0x94>)
 800d1dc:	f7fb fc38 	bl	8008a50 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800d1e0:	2108      	movs	r1, #8
 800d1e2:	480a      	ldr	r0, [pc, #40]	@ (800d20c <HAL_GPIO_EXTI_Callback+0x94>)
 800d1e4:	f7fb fc34 	bl	8008a50 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800d1e8:	2100      	movs	r1, #0
 800d1ea:	4808      	ldr	r0, [pc, #32]	@ (800d20c <HAL_GPIO_EXTI_Callback+0x94>)
 800d1ec:	f7fc ff50 	bl	800a090 <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800d1f0:	2104      	movs	r1, #4
 800d1f2:	4806      	ldr	r0, [pc, #24]	@ (800d20c <HAL_GPIO_EXTI_Callback+0x94>)
 800d1f4:	f7fc ff4c 	bl	800a090 <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800d1f8:	2108      	movs	r1, #8
 800d1fa:	4804      	ldr	r0, [pc, #16]	@ (800d20c <HAL_GPIO_EXTI_Callback+0x94>)
 800d1fc:	f7fc ff48 	bl	800a090 <HAL_TIMEx_PWMN_Start>
}
 800d200:	bf00      	nop
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	200008dc 	.word	0x200008dc
 800d20c:	20000520 	.word	0x20000520

0800d210 <HAL_ADCEx_InjectedConvCpltCallback>:
	USART3->TDR = (uint8_t)ch;
	return ch;
}

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
	static uint8_t cnt;
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hadc);
	if (hadc == &hadc1)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	4a79      	ldr	r2, [pc, #484]	@ (800d400 <HAL_ADCEx_InjectedConvCpltCallback+0x1f0>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	f040 80e5 	bne.w	800d3ec <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>
	{
		// foc(&fp1);
		if (ADC_offset == 0)
 800d222:	4b78      	ldr	r3, [pc, #480]	@ (800d404 <HAL_ADCEx_InjectedConvCpltCallback+0x1f4>)
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d156      	bne.n	800d2d8 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>
		{
			cnt++;
 800d22a:	4b77      	ldr	r3, [pc, #476]	@ (800d408 <HAL_ADCEx_InjectedConvCpltCallback+0x1f8>)
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	3301      	adds	r3, #1
 800d230:	b2da      	uxtb	r2, r3
 800d232:	4b75      	ldr	r3, [pc, #468]	@ (800d408 <HAL_ADCEx_InjectedConvCpltCallback+0x1f8>)
 800d234:	701a      	strb	r2, [r3, #0]
			adc1_in1 = hadc1.Instance->JDR1;
 800d236:	4b72      	ldr	r3, [pc, #456]	@ (800d400 <HAL_ADCEx_InjectedConvCpltCallback+0x1f0>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d23e:	b29a      	uxth	r2, r3
 800d240:	4b72      	ldr	r3, [pc, #456]	@ (800d40c <HAL_ADCEx_InjectedConvCpltCallback+0x1fc>)
 800d242:	801a      	strh	r2, [r3, #0]
			adc1_in2 = hadc2.Instance->JDR1;
 800d244:	4b72      	ldr	r3, [pc, #456]	@ (800d410 <HAL_ADCEx_InjectedConvCpltCallback+0x200>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d24c:	b29a      	uxth	r2, r3
 800d24e:	4b71      	ldr	r3, [pc, #452]	@ (800d414 <HAL_ADCEx_InjectedConvCpltCallback+0x204>)
 800d250:	801a      	strh	r2, [r3, #0]
			adc1_in3 = hadc1.Instance->JDR2;
 800d252:	4b6b      	ldr	r3, [pc, #428]	@ (800d400 <HAL_ADCEx_InjectedConvCpltCallback+0x1f0>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	4b6e      	ldr	r3, [pc, #440]	@ (800d418 <HAL_ADCEx_InjectedConvCpltCallback+0x208>)
 800d25e:	801a      	strh	r2, [r3, #0]
			IA_Offset += adc1_in1;
 800d260:	4b6e      	ldr	r3, [pc, #440]	@ (800d41c <HAL_ADCEx_InjectedConvCpltCallback+0x20c>)
 800d262:	881a      	ldrh	r2, [r3, #0]
 800d264:	4b69      	ldr	r3, [pc, #420]	@ (800d40c <HAL_ADCEx_InjectedConvCpltCallback+0x1fc>)
 800d266:	881b      	ldrh	r3, [r3, #0]
 800d268:	4413      	add	r3, r2
 800d26a:	b29a      	uxth	r2, r3
 800d26c:	4b6b      	ldr	r3, [pc, #428]	@ (800d41c <HAL_ADCEx_InjectedConvCpltCallback+0x20c>)
 800d26e:	801a      	strh	r2, [r3, #0]
			IB_Offset += adc1_in2;
 800d270:	4b6b      	ldr	r3, [pc, #428]	@ (800d420 <HAL_ADCEx_InjectedConvCpltCallback+0x210>)
 800d272:	881a      	ldrh	r2, [r3, #0]
 800d274:	4b67      	ldr	r3, [pc, #412]	@ (800d414 <HAL_ADCEx_InjectedConvCpltCallback+0x204>)
 800d276:	881b      	ldrh	r3, [r3, #0]
 800d278:	4413      	add	r3, r2
 800d27a:	b29a      	uxth	r2, r3
 800d27c:	4b68      	ldr	r3, [pc, #416]	@ (800d420 <HAL_ADCEx_InjectedConvCpltCallback+0x210>)
 800d27e:	801a      	strh	r2, [r3, #0]
			IC_Offset += adc1_in3;
 800d280:	4b68      	ldr	r3, [pc, #416]	@ (800d424 <HAL_ADCEx_InjectedConvCpltCallback+0x214>)
 800d282:	881a      	ldrh	r2, [r3, #0]
 800d284:	4b64      	ldr	r3, [pc, #400]	@ (800d418 <HAL_ADCEx_InjectedConvCpltCallback+0x208>)
 800d286:	881b      	ldrh	r3, [r3, #0]
 800d288:	4413      	add	r3, r2
 800d28a:	b29a      	uxth	r2, r3
 800d28c:	4b65      	ldr	r3, [pc, #404]	@ (800d424 <HAL_ADCEx_InjectedConvCpltCallback+0x214>)
 800d28e:	801a      	strh	r2, [r3, #0]
			if (cnt >= 10)
 800d290:	4b5d      	ldr	r3, [pc, #372]	@ (800d408 <HAL_ADCEx_InjectedConvCpltCallback+0x1f8>)
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	2b09      	cmp	r3, #9
 800d296:	f240 80a9 	bls.w	800d3ec <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>
			{
				ADC_offset = 1;
 800d29a:	4b5a      	ldr	r3, [pc, #360]	@ (800d404 <HAL_ADCEx_InjectedConvCpltCallback+0x1f4>)
 800d29c:	2201      	movs	r2, #1
 800d29e:	701a      	strb	r2, [r3, #0]
				IA_Offset = IA_Offset / 10;
 800d2a0:	4b5e      	ldr	r3, [pc, #376]	@ (800d41c <HAL_ADCEx_InjectedConvCpltCallback+0x20c>)
 800d2a2:	881b      	ldrh	r3, [r3, #0]
 800d2a4:	4a60      	ldr	r2, [pc, #384]	@ (800d428 <HAL_ADCEx_InjectedConvCpltCallback+0x218>)
 800d2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2aa:	08db      	lsrs	r3, r3, #3
 800d2ac:	b29a      	uxth	r2, r3
 800d2ae:	4b5b      	ldr	r3, [pc, #364]	@ (800d41c <HAL_ADCEx_InjectedConvCpltCallback+0x20c>)
 800d2b0:	801a      	strh	r2, [r3, #0]
				IB_Offset = IB_Offset / 10;
 800d2b2:	4b5b      	ldr	r3, [pc, #364]	@ (800d420 <HAL_ADCEx_InjectedConvCpltCallback+0x210>)
 800d2b4:	881b      	ldrh	r3, [r3, #0]
 800d2b6:	4a5c      	ldr	r2, [pc, #368]	@ (800d428 <HAL_ADCEx_InjectedConvCpltCallback+0x218>)
 800d2b8:	fba2 2303 	umull	r2, r3, r2, r3
 800d2bc:	08db      	lsrs	r3, r3, #3
 800d2be:	b29a      	uxth	r2, r3
 800d2c0:	4b57      	ldr	r3, [pc, #348]	@ (800d420 <HAL_ADCEx_InjectedConvCpltCallback+0x210>)
 800d2c2:	801a      	strh	r2, [r3, #0]
				IC_Offset = IC_Offset / 10;
 800d2c4:	4b57      	ldr	r3, [pc, #348]	@ (800d424 <HAL_ADCEx_InjectedConvCpltCallback+0x214>)
 800d2c6:	881b      	ldrh	r3, [r3, #0]
 800d2c8:	4a57      	ldr	r2, [pc, #348]	@ (800d428 <HAL_ADCEx_InjectedConvCpltCallback+0x218>)
 800d2ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ce:	08db      	lsrs	r3, r3, #3
 800d2d0:	b29a      	uxth	r2, r3
 800d2d2:	4b54      	ldr	r3, [pc, #336]	@ (800d424 <HAL_ADCEx_InjectedConvCpltCallback+0x214>)
 800d2d4:	801a      	strh	r2, [r3, #0]
	}

	/* NOTE : This function should not be modified. When the callback is needed,
			  function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
	*/
}
 800d2d6:	e089      	b.n	800d3ec <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>
			adc1_in1 = hadc1.Instance->JDR1;
 800d2d8:	4b49      	ldr	r3, [pc, #292]	@ (800d400 <HAL_ADCEx_InjectedConvCpltCallback+0x1f0>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	4b4a      	ldr	r3, [pc, #296]	@ (800d40c <HAL_ADCEx_InjectedConvCpltCallback+0x1fc>)
 800d2e4:	801a      	strh	r2, [r3, #0]
			adc1_in3 = hadc1.Instance->JDR2;
 800d2e6:	4b46      	ldr	r3, [pc, #280]	@ (800d400 <HAL_ADCEx_InjectedConvCpltCallback+0x1f0>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d2ee:	b29a      	uxth	r2, r3
 800d2f0:	4b49      	ldr	r3, [pc, #292]	@ (800d418 <HAL_ADCEx_InjectedConvCpltCallback+0x208>)
 800d2f2:	801a      	strh	r2, [r3, #0]
			adc1_in2 = hadc2.Instance->JDR1;
 800d2f4:	4b46      	ldr	r3, [pc, #280]	@ (800d410 <HAL_ADCEx_InjectedConvCpltCallback+0x200>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	4b45      	ldr	r3, [pc, #276]	@ (800d414 <HAL_ADCEx_InjectedConvCpltCallback+0x204>)
 800d300:	801a      	strh	r2, [r3, #0]
			Ia = (adc1_in1 - IA_Offset) * 0.02197f;
 800d302:	4b42      	ldr	r3, [pc, #264]	@ (800d40c <HAL_ADCEx_InjectedConvCpltCallback+0x1fc>)
 800d304:	881b      	ldrh	r3, [r3, #0]
 800d306:	461a      	mov	r2, r3
 800d308:	4b44      	ldr	r3, [pc, #272]	@ (800d41c <HAL_ADCEx_InjectedConvCpltCallback+0x20c>)
 800d30a:	881b      	ldrh	r3, [r3, #0]
 800d30c:	1ad3      	subs	r3, r2, r3
 800d30e:	ee07 3a90 	vmov	s15, r3
 800d312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d316:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800d42c <HAL_ADCEx_InjectedConvCpltCallback+0x21c>
 800d31a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d31e:	4b44      	ldr	r3, [pc, #272]	@ (800d430 <HAL_ADCEx_InjectedConvCpltCallback+0x220>)
 800d320:	edc3 7a00 	vstr	s15, [r3]
			Ib = (adc1_in2 - IB_Offset) * 0.02197f;
 800d324:	4b3b      	ldr	r3, [pc, #236]	@ (800d414 <HAL_ADCEx_InjectedConvCpltCallback+0x204>)
 800d326:	881b      	ldrh	r3, [r3, #0]
 800d328:	461a      	mov	r2, r3
 800d32a:	4b3d      	ldr	r3, [pc, #244]	@ (800d420 <HAL_ADCEx_InjectedConvCpltCallback+0x210>)
 800d32c:	881b      	ldrh	r3, [r3, #0]
 800d32e:	1ad3      	subs	r3, r2, r3
 800d330:	ee07 3a90 	vmov	s15, r3
 800d334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d338:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800d42c <HAL_ADCEx_InjectedConvCpltCallback+0x21c>
 800d33c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d340:	4b3c      	ldr	r3, [pc, #240]	@ (800d434 <HAL_ADCEx_InjectedConvCpltCallback+0x224>)
 800d342:	edc3 7a00 	vstr	s15, [r3]
			Ic = (adc1_in3 - IC_Offset) * 0.02197f;
 800d346:	4b34      	ldr	r3, [pc, #208]	@ (800d418 <HAL_ADCEx_InjectedConvCpltCallback+0x208>)
 800d348:	881b      	ldrh	r3, [r3, #0]
 800d34a:	461a      	mov	r2, r3
 800d34c:	4b35      	ldr	r3, [pc, #212]	@ (800d424 <HAL_ADCEx_InjectedConvCpltCallback+0x214>)
 800d34e:	881b      	ldrh	r3, [r3, #0]
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	ee07 3a90 	vmov	s15, r3
 800d356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d35a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d42c <HAL_ADCEx_InjectedConvCpltCallback+0x21c>
 800d35e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d362:	4b35      	ldr	r3, [pc, #212]	@ (800d438 <HAL_ADCEx_InjectedConvCpltCallback+0x228>)
 800d364:	edc3 7a00 	vstr	s15, [r3]
			elecAngle += 0.01;
 800d368:	4b34      	ldr	r3, [pc, #208]	@ (800d43c <HAL_ADCEx_InjectedConvCpltCallback+0x22c>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7f3 f913 	bl	8000598 <__aeabi_f2d>
 800d372:	a321      	add	r3, pc, #132	@ (adr r3, 800d3f8 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 800d374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d378:	f7f2 ffb0 	bl	80002dc <__adddf3>
 800d37c:	4602      	mov	r2, r0
 800d37e:	460b      	mov	r3, r1
 800d380:	4610      	mov	r0, r2
 800d382:	4619      	mov	r1, r3
 800d384:	f7f3 fc58 	bl	8000c38 <__aeabi_d2f>
 800d388:	4603      	mov	r3, r0
 800d38a:	4a2c      	ldr	r2, [pc, #176]	@ (800d43c <HAL_ADCEx_InjectedConvCpltCallback+0x22c>)
 800d38c:	6013      	str	r3, [r2, #0]
			if (elecAngle >= _2PI)
 800d38e:	4b2b      	ldr	r3, [pc, #172]	@ (800d43c <HAL_ADCEx_InjectedConvCpltCallback+0x22c>)
 800d390:	edd3 7a00 	vldr	s15, [r3]
 800d394:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800d440 <HAL_ADCEx_InjectedConvCpltCallback+0x230>
 800d398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3a0:	db03      	blt.n	800d3aa <HAL_ADCEx_InjectedConvCpltCallback+0x19a>
				elecAngle = 0;
 800d3a2:	4b26      	ldr	r3, [pc, #152]	@ (800d43c <HAL_ADCEx_InjectedConvCpltCallback+0x22c>)
 800d3a4:	f04f 0200 	mov.w	r2, #0
 800d3a8:	601a      	str	r2, [r3, #0]
			setPhaseVoltage1(2, 0, elecAngle);
 800d3aa:	4b24      	ldr	r3, [pc, #144]	@ (800d43c <HAL_ADCEx_InjectedConvCpltCallback+0x22c>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7f3 f8f2 	bl	8000598 <__aeabi_f2d>
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	ec43 2b10 	vmov	d0, r2, r3
 800d3bc:	2100      	movs	r1, #0
 800d3be:	2002      	movs	r0, #2
 800d3c0:	f000 f93c 	bl	800d63c <setPhaseVoltage1>
			dealPer100us();
 800d3c4:	f000 f856 	bl	800d474 <dealPer100us>
			load_data[3] = 0;
 800d3c8:	4b1e      	ldr	r3, [pc, #120]	@ (800d444 <HAL_ADCEx_InjectedConvCpltCallback+0x234>)
 800d3ca:	f04f 0200 	mov.w	r2, #0
 800d3ce:	60da      	str	r2, [r3, #12]
			load_data[4] = 0;
 800d3d0:	4b1c      	ldr	r3, [pc, #112]	@ (800d444 <HAL_ADCEx_InjectedConvCpltCallback+0x234>)
 800d3d2:	f04f 0200 	mov.w	r2, #0
 800d3d6:	611a      	str	r2, [r3, #16]
			memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
 800d3d8:	2214      	movs	r2, #20
 800d3da:	491a      	ldr	r1, [pc, #104]	@ (800d444 <HAL_ADCEx_InjectedConvCpltCallback+0x234>)
 800d3dc:	481a      	ldr	r0, [pc, #104]	@ (800d448 <HAL_ADCEx_InjectedConvCpltCallback+0x238>)
 800d3de:	f001 fb90 	bl	800eb02 <memcpy>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, 6 * 4);
 800d3e2:	2218      	movs	r2, #24
 800d3e4:	4918      	ldr	r1, [pc, #96]	@ (800d448 <HAL_ADCEx_InjectedConvCpltCallback+0x238>)
 800d3e6:	4819      	ldr	r0, [pc, #100]	@ (800d44c <HAL_ADCEx_InjectedConvCpltCallback+0x23c>)
 800d3e8:	f7fd fa52 	bl	800a890 <HAL_UART_Transmit_DMA>
}
 800d3ec:	bf00      	nop
 800d3ee:	3708      	adds	r7, #8
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	f3af 8000 	nop.w
 800d3f8:	47ae147b 	.word	0x47ae147b
 800d3fc:	3f847ae1 	.word	0x3f847ae1
 800d400:	2000028c 	.word	0x2000028c
 800d404:	200008ea 	.word	0x200008ea
 800d408:	2000091c 	.word	0x2000091c
 800d40c:	200008e4 	.word	0x200008e4
 800d410:	200002f8 	.word	0x200002f8
 800d414:	200008e6 	.word	0x200008e6
 800d418:	200008e8 	.word	0x200008e8
 800d41c:	200008de 	.word	0x200008de
 800d420:	200008e0 	.word	0x200008e0
 800d424:	200008e2 	.word	0x200008e2
 800d428:	cccccccd 	.word	0xcccccccd
 800d42c:	3cb3fa6e 	.word	0x3cb3fa6e
 800d430:	200008d0 	.word	0x200008d0
 800d434:	200008d4 	.word	0x200008d4
 800d438:	200008d8 	.word	0x200008d8
 800d43c:	20000920 	.word	0x20000920
 800d440:	40c90fdb 	.word	0x40c90fdb
 800d444:	2000087c 	.word	0x2000087c
 800d448:	2000000c 	.word	0x2000000c
 800d44c:	200005b8 	.word	0x200005b8

0800d450 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
	// }

	/* NOTE : This function should not be modified, when the callback is needed,
			  the HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 800d458:	bf00      	nop
 800d45a:	370c      	adds	r7, #12
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr

0800d464 <FDCAN_Config>:

void FDCAN_Config(void)
{
 800d464:	b480      	push	{r7}
 800d466:	af00      	add	r7, sp, #0
	// TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	// TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	// TxHeader.MessageMarker = 0x52;

	// HAL_FDCAN_Start(&hfdcan1);
}
 800d468:	bf00      	nop
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr
	...

0800d474 <dealPer100us>:
static uchar withoutZeroCnt, powerOnCnt;

static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag;

void dealPer100us()
{
 800d474:	b580      	push	{r7, lr}
 800d476:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800d478:	4b08      	ldr	r3, [pc, #32]	@ (800d49c <dealPer100us+0x28>)
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	3301      	adds	r3, #1
 800d47e:	b2da      	uxtb	r2, r3
 800d480:	4b06      	ldr	r3, [pc, #24]	@ (800d49c <dealPer100us+0x28>)
 800d482:	701a      	strb	r2, [r3, #0]
 800d484:	4b05      	ldr	r3, [pc, #20]	@ (800d49c <dealPer100us+0x28>)
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	2b09      	cmp	r3, #9
 800d48a:	d904      	bls.n	800d496 <dealPer100us+0x22>
    {
        cnt = 0;
 800d48c:	4b03      	ldr	r3, [pc, #12]	@ (800d49c <dealPer100us+0x28>)
 800d48e:	2200      	movs	r2, #0
 800d490:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800d492:	f000 f805 	bl	800d4a0 <dealPerMs>
    }

#if ZERO_POLL
    zeroPolling();
#endif
}
 800d496:	bf00      	nop
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	20000934 	.word	0x20000934

0800d4a0 <dealPerMs>:

// 定时器中断调用
 void dealPerMs()
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt;
    if (++_5msCnt >= 5)
 800d4a4:	4b40      	ldr	r3, [pc, #256]	@ (800d5a8 <dealPerMs+0x108>)
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	b2da      	uxtb	r2, r3
 800d4ac:	4b3e      	ldr	r3, [pc, #248]	@ (800d5a8 <dealPerMs+0x108>)
 800d4ae:	701a      	strb	r2, [r3, #0]
 800d4b0:	4b3d      	ldr	r3, [pc, #244]	@ (800d5a8 <dealPerMs+0x108>)
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	2b04      	cmp	r3, #4
 800d4b6:	d905      	bls.n	800d4c4 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800d4b8:	4b3b      	ldr	r3, [pc, #236]	@ (800d5a8 <dealPerMs+0x108>)
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800d4be:	4b3b      	ldr	r3, [pc, #236]	@ (800d5ac <dealPerMs+0x10c>)
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800d4c4:	4b3a      	ldr	r3, [pc, #232]	@ (800d5b0 <dealPerMs+0x110>)
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	b2da      	uxtb	r2, r3
 800d4cc:	4b38      	ldr	r3, [pc, #224]	@ (800d5b0 <dealPerMs+0x110>)
 800d4ce:	701a      	strb	r2, [r3, #0]
 800d4d0:	4b37      	ldr	r3, [pc, #220]	@ (800d5b0 <dealPerMs+0x110>)
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	2b09      	cmp	r3, #9
 800d4d6:	d905      	bls.n	800d4e4 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800d4d8:	4b35      	ldr	r3, [pc, #212]	@ (800d5b0 <dealPerMs+0x110>)
 800d4da:	2200      	movs	r2, #0
 800d4dc:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800d4de:	4b35      	ldr	r3, [pc, #212]	@ (800d5b4 <dealPerMs+0x114>)
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800d4e4:	4b34      	ldr	r3, [pc, #208]	@ (800d5b8 <dealPerMs+0x118>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	b2da      	uxtb	r2, r3
 800d4ec:	4b32      	ldr	r3, [pc, #200]	@ (800d5b8 <dealPerMs+0x118>)
 800d4ee:	701a      	strb	r2, [r3, #0]
 800d4f0:	4b31      	ldr	r3, [pc, #196]	@ (800d5b8 <dealPerMs+0x118>)
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	2b13      	cmp	r3, #19
 800d4f6:	d905      	bls.n	800d504 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800d4f8:	4b2f      	ldr	r3, [pc, #188]	@ (800d5b8 <dealPerMs+0x118>)
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800d4fe:	4b2f      	ldr	r3, [pc, #188]	@ (800d5bc <dealPerMs+0x11c>)
 800d500:	2201      	movs	r2, #1
 800d502:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800d504:	4b2e      	ldr	r3, [pc, #184]	@ (800d5c0 <dealPerMs+0x120>)
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	3301      	adds	r3, #1
 800d50a:	b2da      	uxtb	r2, r3
 800d50c:	4b2c      	ldr	r3, [pc, #176]	@ (800d5c0 <dealPerMs+0x120>)
 800d50e:	701a      	strb	r2, [r3, #0]
 800d510:	4b2b      	ldr	r3, [pc, #172]	@ (800d5c0 <dealPerMs+0x120>)
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	2b1d      	cmp	r3, #29
 800d516:	d905      	bls.n	800d524 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800d518:	4b29      	ldr	r3, [pc, #164]	@ (800d5c0 <dealPerMs+0x120>)
 800d51a:	2200      	movs	r2, #0
 800d51c:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800d51e:	4b29      	ldr	r3, [pc, #164]	@ (800d5c4 <dealPerMs+0x124>)
 800d520:	2201      	movs	r2, #1
 800d522:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800d524:	4b28      	ldr	r3, [pc, #160]	@ (800d5c8 <dealPerMs+0x128>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	3301      	adds	r3, #1
 800d52a:	b2da      	uxtb	r2, r3
 800d52c:	4b26      	ldr	r3, [pc, #152]	@ (800d5c8 <dealPerMs+0x128>)
 800d52e:	701a      	strb	r2, [r3, #0]
 800d530:	4b25      	ldr	r3, [pc, #148]	@ (800d5c8 <dealPerMs+0x128>)
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	2b63      	cmp	r3, #99	@ 0x63
 800d536:	d905      	bls.n	800d544 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800d538:	4b23      	ldr	r3, [pc, #140]	@ (800d5c8 <dealPerMs+0x128>)
 800d53a:	2200      	movs	r2, #0
 800d53c:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800d53e:	4b23      	ldr	r3, [pc, #140]	@ (800d5cc <dealPerMs+0x12c>)
 800d540:	2201      	movs	r2, #1
 800d542:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800d544:	4b22      	ldr	r3, [pc, #136]	@ (800d5d0 <dealPerMs+0x130>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	3301      	adds	r3, #1
 800d54a:	4a21      	ldr	r2, [pc, #132]	@ (800d5d0 <dealPerMs+0x130>)
 800d54c:	6013      	str	r3, [r2, #0]
 800d54e:	4b20      	ldr	r3, [pc, #128]	@ (800d5d0 <dealPerMs+0x130>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800d556:	d305      	bcc.n	800d564 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800d558:	4b1d      	ldr	r3, [pc, #116]	@ (800d5d0 <dealPerMs+0x130>)
 800d55a:	2200      	movs	r2, #0
 800d55c:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800d55e:	4b1d      	ldr	r3, [pc, #116]	@ (800d5d4 <dealPerMs+0x134>)
 800d560:	2201      	movs	r2, #1
 800d562:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800d564:	4b1c      	ldr	r3, [pc, #112]	@ (800d5d8 <dealPerMs+0x138>)
 800d566:	2232      	movs	r2, #50	@ 0x32
 800d568:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800d56a:	4b1c      	ldr	r3, [pc, #112]	@ (800d5dc <dealPerMs+0x13c>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	3301      	adds	r3, #1
 800d570:	4a1a      	ldr	r2, [pc, #104]	@ (800d5dc <dealPerMs+0x13c>)
 800d572:	6013      	str	r3, [r2, #0]
 800d574:	4b19      	ldr	r3, [pc, #100]	@ (800d5dc <dealPerMs+0x13c>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d57c:	d305      	bcc.n	800d58a <dealPerMs+0xea>
    {
        _1msCnt = 0;
 800d57e:	4b17      	ldr	r3, [pc, #92]	@ (800d5dc <dealPerMs+0x13c>)
 800d580:	2200      	movs	r2, #0
 800d582:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800d584:	4b16      	ldr	r3, [pc, #88]	@ (800d5e0 <dealPerMs+0x140>)
 800d586:	2201      	movs	r2, #1
 800d588:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800d58a:	4b16      	ldr	r3, [pc, #88]	@ (800d5e4 <dealPerMs+0x144>)
 800d58c:	2201      	movs	r2, #1
 800d58e:	701a      	strb	r2, [r3, #0]
        memorize();
        // beepOnce();
    }
#else
    if (withoutZeroCnt < ZERO_ERR_TIME)
        withoutZeroCnt++;
 800d590:	4b15      	ldr	r3, [pc, #84]	@ (800d5e8 <dealPerMs+0x148>)
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	3301      	adds	r3, #1
 800d596:	b2da      	uxtb	r2, r3
 800d598:	4b13      	ldr	r3, [pc, #76]	@ (800d5e8 <dealPerMs+0x148>)
 800d59a:	701a      	strb	r2, [r3, #0]
    //             }
    //         }
    //         //	else
    //     }
    // #endif
}
 800d59c:	bf00      	nop
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	20000935 	.word	0x20000935
 800d5ac:	2000092e 	.word	0x2000092e
 800d5b0:	20000936 	.word	0x20000936
 800d5b4:	2000092f 	.word	0x2000092f
 800d5b8:	20000937 	.word	0x20000937
 800d5bc:	20000930 	.word	0x20000930
 800d5c0:	20000938 	.word	0x20000938
 800d5c4:	20000931 	.word	0x20000931
 800d5c8:	20000939 	.word	0x20000939
 800d5cc:	20000932 	.word	0x20000932
 800d5d0:	2000093c 	.word	0x2000093c
 800d5d4:	20000933 	.word	0x20000933
 800d5d8:	2000092c 	.word	0x2000092c
 800d5dc:	20000928 	.word	0x20000928
 800d5e0:	20000924 	.word	0x20000924
 800d5e4:	20000925 	.word	0x20000925
 800d5e8:	2000092d 	.word	0x2000092d

0800d5ec <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800d5f0:	4b07      	ldr	r3, [pc, #28]	@ (800d610 <get100MsFlag+0x24>)
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d004      	beq.n	800d602 <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800d5f8:	4b05      	ldr	r3, [pc, #20]	@ (800d610 <get100MsFlag+0x24>)
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	701a      	strb	r2, [r3, #0]
        return 1;
 800d5fe:	2301      	movs	r3, #1
 800d600:	e000      	b.n	800d604 <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800d602:	2300      	movs	r3, #0
    }
}
 800d604:	4618      	mov	r0, r3
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	20000932 	.word	0x20000932

0800d614 <get500MsFlag>:

bool get500MsFlag()
{
 800d614:	b480      	push	{r7}
 800d616:	af00      	add	r7, sp, #0
    if (_500msFlag)
 800d618:	4b07      	ldr	r3, [pc, #28]	@ (800d638 <get500MsFlag+0x24>)
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d004      	beq.n	800d62a <get500MsFlag+0x16>
    {
        _500msFlag = 0;
 800d620:	4b05      	ldr	r3, [pc, #20]	@ (800d638 <get500MsFlag+0x24>)
 800d622:	2200      	movs	r2, #0
 800d624:	701a      	strb	r2, [r3, #0]
        return 1;
 800d626:	2301      	movs	r3, #1
 800d628:	e000      	b.n	800d62c <get500MsFlag+0x18>
    }
    else
    {
        return 0;
 800d62a:	2300      	movs	r3, #0
    }
 800d62c:	4618      	mov	r0, r3
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr
 800d636:	bf00      	nop
 800d638:	20000933 	.word	0x20000933

0800d63c <setPhaseVoltage1>:
    PWM_GENERATE(d1, d2, d3);
}
#else

void setPhaseVoltage1(float Uq, float Ud, float angle_el)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b092      	sub	sp, #72	@ 0x48
 800d640:	af00      	add	r7, sp, #0
 800d642:	ed87 0a03 	vstr	s0, [r7, #12]
 800d646:	edc7 0a02 	vstr	s1, [r7, #8]
 800d64a:	ed87 1a01 	vstr	s2, [r7, #4]

    Uq = _constrain(Uq, -UqMAX, UqMAX);
 800d64e:	edd7 7a03 	vldr	s15, [r7, #12]
 800d652:	ed9f 7acd 	vldr	s14, [pc, #820]	@ 800d988 <setPhaseVoltage1+0x34c>
 800d656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d65e:	d501      	bpl.n	800d664 <setPhaseVoltage1+0x28>
 800d660:	4bca      	ldr	r3, [pc, #808]	@ (800d98c <setPhaseVoltage1+0x350>)
 800d662:	e00b      	b.n	800d67c <setPhaseVoltage1+0x40>
 800d664:	edd7 7a03 	vldr	s15, [r7, #12]
 800d668:	ed9f 7ac9 	vldr	s14, [pc, #804]	@ 800d990 <setPhaseVoltage1+0x354>
 800d66c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d674:	dd01      	ble.n	800d67a <setPhaseVoltage1+0x3e>
 800d676:	4bc7      	ldr	r3, [pc, #796]	@ (800d994 <setPhaseVoltage1+0x358>)
 800d678:	e000      	b.n	800d67c <setPhaseVoltage1+0x40>
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	60fb      	str	r3, [r7, #12]

    float ct;
    float st;
    _sincos(angle_el, &st, &ct);
 800d67e:	f107 0214 	add.w	r2, r7, #20
 800d682:	f107 0310 	add.w	r3, r7, #16
 800d686:	4611      	mov	r1, r2
 800d688:	4618      	mov	r0, r3
 800d68a:	ed97 0a01 	vldr	s0, [r7, #4]
 800d68e:	f7ff fbfb 	bl	800ce88 <_sincos>
    // Park逆变换
    float Ualpha = -Uq * st + Ud * ct;
 800d692:	edd7 7a03 	vldr	s15, [r7, #12]
 800d696:	eeb1 7a67 	vneg.f32	s14, s15
 800d69a:	edd7 7a04 	vldr	s15, [r7, #16]
 800d69e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6a2:	edd7 6a05 	vldr	s13, [r7, #20]
 800d6a6:	edd7 7a02 	vldr	s15, [r7, #8]
 800d6aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6b2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float Ubeta = Uq * ct + Ud * st;
 800d6b6:	ed97 7a05 	vldr	s14, [r7, #20]
 800d6ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800d6be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6c2:	edd7 6a04 	vldr	s13, [r7, #16]
 800d6c6:	edd7 7a02 	vldr	s15, [r7, #8]
 800d6ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6d2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    uint32_t d1, d2, d3;
    float tFirst = 0, tSecond = 0;
 800d6d6:	f04f 0300 	mov.w	r3, #0
 800d6da:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6dc:	f04f 0300 	mov.w	r3, #0
 800d6e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float K = _SQRT3 * HALP_PWM_PERIOD / U_DC;
 800d6e2:	4bad      	ldr	r3, [pc, #692]	@ (800d998 <setPhaseVoltage1+0x35c>)
 800d6e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    float X = K * Ubeta;
 800d6e6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d6ea:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6f2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float Y = K * (_SQRT3 * Ualpha / 2.0f - Ubeta / 2.0f);
 800d6f6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d6fa:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 800d99c <setPhaseVoltage1+0x360>
 800d6fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d702:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d706:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d70a:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800d70e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800d712:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d71a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d71e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d722:	edc7 7a08 	vstr	s15, [r7, #32]
    float Z = K * (-_SQRT3 * Ualpha / 2.0f - Ubeta / 2.0f);
 800d726:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d72a:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 800d9a0 <setPhaseVoltage1+0x364>
 800d72e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d732:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d736:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d73a:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800d73e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800d742:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d74a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d74e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d752:	edc7 7a07 	vstr	s15, [r7, #28]

    uint8_t sector = sectorRemap[(X > 0.0f) + ((Y > 0.0f) << 1) + ((Z > 0.0f) << 2)]; // sector = A + 2B + 4C
 800d756:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d75a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d762:	bfcc      	ite	gt
 800d764:	2301      	movgt	r3, #1
 800d766:	2300      	movle	r3, #0
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	461a      	mov	r2, r3
 800d76c:	edd7 7a08 	vldr	s15, [r7, #32]
 800d770:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d778:	dd01      	ble.n	800d77e <setPhaseVoltage1+0x142>
 800d77a:	2302      	movs	r3, #2
 800d77c:	e000      	b.n	800d780 <setPhaseVoltage1+0x144>
 800d77e:	2300      	movs	r3, #0
 800d780:	4413      	add	r3, r2
 800d782:	edd7 7a07 	vldr	s15, [r7, #28]
 800d786:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d78e:	dd01      	ble.n	800d794 <setPhaseVoltage1+0x158>
 800d790:	2204      	movs	r2, #4
 800d792:	e000      	b.n	800d796 <setPhaseVoltage1+0x15a>
 800d794:	2200      	movs	r2, #0
 800d796:	4413      	add	r3, r2
 800d798:	4a82      	ldr	r2, [pc, #520]	@ (800d9a4 <setPhaseVoltage1+0x368>)
 800d79a:	5cd3      	ldrb	r3, [r2, r3]
 800d79c:	76fb      	strb	r3, [r7, #27]

    switch (sector)
 800d79e:	7efb      	ldrb	r3, [r7, #27]
 800d7a0:	3b01      	subs	r3, #1
 800d7a2:	2b05      	cmp	r3, #5
 800d7a4:	f200 8172 	bhi.w	800da8c <setPhaseVoltage1+0x450>
 800d7a8:	a201      	add	r2, pc, #4	@ (adr r2, 800d7b0 <setPhaseVoltage1+0x174>)
 800d7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ae:	bf00      	nop
 800d7b0:	0800d7c9 	.word	0x0800d7c9
 800d7b4:	0800d831 	.word	0x0800d831
 800d7b8:	0800d8a9 	.word	0x0800d8a9
 800d7bc:	0800d911 	.word	0x0800d911
 800d7c0:	0800d9ad 	.word	0x0800d9ad
 800d7c4:	0800da15 	.word	0x0800da15
    {
    case 1:
        tFirst = Y;
 800d7c8:	6a3b      	ldr	r3, [r7, #32]
 800d7ca:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = X;
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d1 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800d7d0:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800d9a8 <setPhaseVoltage1+0x36c>
 800d7d4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d7d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d7dc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d7e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d7e4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d7e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d7ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7f0:	ee17 3a90 	vmov	r3, s15
 800d7f4:	647b      	str	r3, [r7, #68]	@ 0x44
        d2 = d1 + tFirst;
 800d7f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7f8:	ee07 3a90 	vmov	s15, r3
 800d7fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d800:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d804:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d80c:	ee17 3a90 	vmov	r3, s15
 800d810:	643b      	str	r3, [r7, #64]	@ 0x40
        d3 = d2 + tSecond;
 800d812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d814:	ee07 3a90 	vmov	s15, r3
 800d818:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d81c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d820:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d828:	ee17 3a90 	vmov	r3, s15
 800d82c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        break;
 800d82e:	e12d      	b.n	800da8c <setPhaseVoltage1+0x450>
    case 2:
        tFirst = -Y;
 800d830:	edd7 7a08 	vldr	s15, [r7, #32]
 800d834:	eef1 7a67 	vneg.f32	s15, s15
 800d838:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -Z;
 800d83c:	edd7 7a07 	vldr	s15, [r7, #28]
 800d840:	eef1 7a67 	vneg.f32	s15, s15
 800d844:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d2 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800d848:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 800d9a8 <setPhaseVoltage1+0x36c>
 800d84c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d850:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d854:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d858:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d85c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d860:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d868:	ee17 3a90 	vmov	r3, s15
 800d86c:	643b      	str	r3, [r7, #64]	@ 0x40
        d1 = d2 + tFirst;
 800d86e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d870:	ee07 3a90 	vmov	s15, r3
 800d874:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d878:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d87c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d884:	ee17 3a90 	vmov	r3, s15
 800d888:	647b      	str	r3, [r7, #68]	@ 0x44
        d3 = d1 + tSecond;
 800d88a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d88c:	ee07 3a90 	vmov	s15, r3
 800d890:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d894:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d89c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8a0:	ee17 3a90 	vmov	r3, s15
 800d8a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

        break;
 800d8a6:	e0f1      	b.n	800da8c <setPhaseVoltage1+0x450>
    case 3:
        tFirst = X;
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8aa:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = Z;
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d2 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800d8b0:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800d9a8 <setPhaseVoltage1+0x36c>
 800d8b4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d8b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d8bc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d8c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d8c4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d8c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d8cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8d0:	ee17 3a90 	vmov	r3, s15
 800d8d4:	643b      	str	r3, [r7, #64]	@ 0x40
        d3 = d2 + tFirst;
 800d8d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8d8:	ee07 3a90 	vmov	s15, r3
 800d8dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d8e0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d8e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8ec:	ee17 3a90 	vmov	r3, s15
 800d8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d1 = d3 + tSecond;
 800d8f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8f4:	ee07 3a90 	vmov	s15, r3
 800d8f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d8fc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d900:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d908:	ee17 3a90 	vmov	r3, s15
 800d90c:	647b      	str	r3, [r7, #68]	@ 0x44

        break;
 800d90e:	e0bd      	b.n	800da8c <setPhaseVoltage1+0x450>
    case 4:
        tFirst = -X;
 800d910:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d914:	eef1 7a67 	vneg.f32	s15, s15
 800d918:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -Y;
 800d91c:	edd7 7a08 	vldr	s15, [r7, #32]
 800d920:	eef1 7a67 	vneg.f32	s15, s15
 800d924:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d3 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800d928:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800d9a8 <setPhaseVoltage1+0x36c>
 800d92c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d930:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d934:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d938:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d93c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d940:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d948:	ee17 3a90 	vmov	r3, s15
 800d94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d2 = d3 + tFirst;
 800d94e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d950:	ee07 3a90 	vmov	s15, r3
 800d954:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d958:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d95c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d964:	ee17 3a90 	vmov	r3, s15
 800d968:	643b      	str	r3, [r7, #64]	@ 0x40
        d1 = d2 + tSecond;
 800d96a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d96c:	ee07 3a90 	vmov	s15, r3
 800d970:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d974:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d97c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d980:	ee17 3a90 	vmov	r3, s15
 800d984:	647b      	str	r3, [r7, #68]	@ 0x44

        break;
 800d986:	e081      	b.n	800da8c <setPhaseVoltage1+0x450>
 800d988:	c0ddb3d7 	.word	0xc0ddb3d7
 800d98c:	c0ddb3d7 	.word	0xc0ddb3d7
 800d990:	40ddb3d7 	.word	0x40ddb3d7
 800d994:	40ddb3d7 	.word	0x40ddb3d7
 800d998:	4490566b 	.word	0x4490566b
 800d99c:	3fddb3d7 	.word	0x3fddb3d7
 800d9a0:	bfddb3d7 	.word	0xbfddb3d7
 800d9a4:	080124ac 	.word	0x080124ac
 800d9a8:	45fa0000 	.word	0x45fa0000

    case 5:
        tFirst = Z;
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	633b      	str	r3, [r7, #48]	@ 0x30
        tSecond = Y;
 800d9b0:	6a3b      	ldr	r3, [r7, #32]
 800d9b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        d3 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800d9b4:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 800d9a8 <setPhaseVoltage1+0x36c>
 800d9b8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d9bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d9c0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d9c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d9c8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d9cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d9d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9d4:	ee17 3a90 	vmov	r3, s15
 800d9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d1 = d3 + tFirst;
 800d9da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9dc:	ee07 3a90 	vmov	s15, r3
 800d9e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d9e4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d9e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9f0:	ee17 3a90 	vmov	r3, s15
 800d9f4:	647b      	str	r3, [r7, #68]	@ 0x44
        d2 = d1 + tSecond;
 800d9f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9f8:	ee07 3a90 	vmov	s15, r3
 800d9fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800da00:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800da04:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da0c:	ee17 3a90 	vmov	r3, s15
 800da10:	643b      	str	r3, [r7, #64]	@ 0x40

        break;
 800da12:	e03b      	b.n	800da8c <setPhaseVoltage1+0x450>

    case 6:
        tFirst = -Z;
 800da14:	edd7 7a07 	vldr	s15, [r7, #28]
 800da18:	eef1 7a67 	vneg.f32	s15, s15
 800da1c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        tSecond = -X;
 800da20:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800da24:	eef1 7a67 	vneg.f32	s15, s15
 800da28:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        d1 = (HALP_PWM_PERIOD - tFirst - tSecond) / 2.0f;
 800da2c:	ed1f 7a22 	vldr	s14, [pc, #-136]	@ 800d9a8 <setPhaseVoltage1+0x36c>
 800da30:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800da34:	ee37 7a67 	vsub.f32	s14, s14, s15
 800da38:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800da3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800da40:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800da44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da4c:	ee17 3a90 	vmov	r3, s15
 800da50:	647b      	str	r3, [r7, #68]	@ 0x44
        d3 = d1 + tFirst;
 800da52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da54:	ee07 3a90 	vmov	s15, r3
 800da58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800da5c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800da60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da68:	ee17 3a90 	vmov	r3, s15
 800da6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        d2 = d3 + tSecond;
 800da6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da70:	ee07 3a90 	vmov	s15, r3
 800da74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800da78:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800da7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da84:	ee17 3a90 	vmov	r3, s15
 800da88:	643b      	str	r3, [r7, #64]	@ 0x40

        break;
 800da8a:	bf00      	nop
    }

    load_data[0] = d1;
 800da8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da8e:	ee07 3a90 	vmov	s15, r3
 800da92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da96:	4b10      	ldr	r3, [pc, #64]	@ (800dad8 <setPhaseVoltage1+0x49c>)
 800da98:	edc3 7a00 	vstr	s15, [r3]
    load_data[1] = d2;
 800da9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da9e:	ee07 3a90 	vmov	s15, r3
 800daa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daa6:	4b0c      	ldr	r3, [pc, #48]	@ (800dad8 <setPhaseVoltage1+0x49c>)
 800daa8:	edc3 7a01 	vstr	s15, [r3, #4]
    load_data[2] = d3;
 800daac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daae:	ee07 3a90 	vmov	s15, r3
 800dab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dab6:	4b08      	ldr	r3, [pc, #32]	@ (800dad8 <setPhaseVoltage1+0x49c>)
 800dab8:	edc3 7a02 	vstr	s15, [r3, #8]
//    load_data[3] = Uq;

    PWM_GENERATE(d1, d2, d3);
 800dabc:	4a07      	ldr	r2, [pc, #28]	@ (800dadc <setPhaseVoltage1+0x4a0>)
 800dabe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dac0:	6353      	str	r3, [r2, #52]	@ 0x34
 800dac2:	4a06      	ldr	r2, [pc, #24]	@ (800dadc <setPhaseVoltage1+0x4a0>)
 800dac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dac6:	6393      	str	r3, [r2, #56]	@ 0x38
 800dac8:	4a04      	ldr	r2, [pc, #16]	@ (800dadc <setPhaseVoltage1+0x4a0>)
 800daca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dacc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800dace:	bf00      	nop
 800dad0:	3748      	adds	r7, #72	@ 0x48
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	2000087c 	.word	0x2000087c
 800dadc:	40012c00 	.word	0x40012c00

0800dae0 <__cvt>:
 800dae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dae4:	ec57 6b10 	vmov	r6, r7, d0
 800dae8:	2f00      	cmp	r7, #0
 800daea:	460c      	mov	r4, r1
 800daec:	4619      	mov	r1, r3
 800daee:	463b      	mov	r3, r7
 800daf0:	bfbb      	ittet	lt
 800daf2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800daf6:	461f      	movlt	r7, r3
 800daf8:	2300      	movge	r3, #0
 800dafa:	232d      	movlt	r3, #45	@ 0x2d
 800dafc:	700b      	strb	r3, [r1, #0]
 800dafe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db00:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800db04:	4691      	mov	r9, r2
 800db06:	f023 0820 	bic.w	r8, r3, #32
 800db0a:	bfbc      	itt	lt
 800db0c:	4632      	movlt	r2, r6
 800db0e:	4616      	movlt	r6, r2
 800db10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800db14:	d005      	beq.n	800db22 <__cvt+0x42>
 800db16:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800db1a:	d100      	bne.n	800db1e <__cvt+0x3e>
 800db1c:	3401      	adds	r4, #1
 800db1e:	2102      	movs	r1, #2
 800db20:	e000      	b.n	800db24 <__cvt+0x44>
 800db22:	2103      	movs	r1, #3
 800db24:	ab03      	add	r3, sp, #12
 800db26:	9301      	str	r3, [sp, #4]
 800db28:	ab02      	add	r3, sp, #8
 800db2a:	9300      	str	r3, [sp, #0]
 800db2c:	ec47 6b10 	vmov	d0, r6, r7
 800db30:	4653      	mov	r3, sl
 800db32:	4622      	mov	r2, r4
 800db34:	f001 f884 	bl	800ec40 <_dtoa_r>
 800db38:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800db3c:	4605      	mov	r5, r0
 800db3e:	d119      	bne.n	800db74 <__cvt+0x94>
 800db40:	f019 0f01 	tst.w	r9, #1
 800db44:	d00e      	beq.n	800db64 <__cvt+0x84>
 800db46:	eb00 0904 	add.w	r9, r0, r4
 800db4a:	2200      	movs	r2, #0
 800db4c:	2300      	movs	r3, #0
 800db4e:	4630      	mov	r0, r6
 800db50:	4639      	mov	r1, r7
 800db52:	f7f2 ffe1 	bl	8000b18 <__aeabi_dcmpeq>
 800db56:	b108      	cbz	r0, 800db5c <__cvt+0x7c>
 800db58:	f8cd 900c 	str.w	r9, [sp, #12]
 800db5c:	2230      	movs	r2, #48	@ 0x30
 800db5e:	9b03      	ldr	r3, [sp, #12]
 800db60:	454b      	cmp	r3, r9
 800db62:	d31e      	bcc.n	800dba2 <__cvt+0xc2>
 800db64:	9b03      	ldr	r3, [sp, #12]
 800db66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db68:	1b5b      	subs	r3, r3, r5
 800db6a:	4628      	mov	r0, r5
 800db6c:	6013      	str	r3, [r2, #0]
 800db6e:	b004      	add	sp, #16
 800db70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800db78:	eb00 0904 	add.w	r9, r0, r4
 800db7c:	d1e5      	bne.n	800db4a <__cvt+0x6a>
 800db7e:	7803      	ldrb	r3, [r0, #0]
 800db80:	2b30      	cmp	r3, #48	@ 0x30
 800db82:	d10a      	bne.n	800db9a <__cvt+0xba>
 800db84:	2200      	movs	r2, #0
 800db86:	2300      	movs	r3, #0
 800db88:	4630      	mov	r0, r6
 800db8a:	4639      	mov	r1, r7
 800db8c:	f7f2 ffc4 	bl	8000b18 <__aeabi_dcmpeq>
 800db90:	b918      	cbnz	r0, 800db9a <__cvt+0xba>
 800db92:	f1c4 0401 	rsb	r4, r4, #1
 800db96:	f8ca 4000 	str.w	r4, [sl]
 800db9a:	f8da 3000 	ldr.w	r3, [sl]
 800db9e:	4499      	add	r9, r3
 800dba0:	e7d3      	b.n	800db4a <__cvt+0x6a>
 800dba2:	1c59      	adds	r1, r3, #1
 800dba4:	9103      	str	r1, [sp, #12]
 800dba6:	701a      	strb	r2, [r3, #0]
 800dba8:	e7d9      	b.n	800db5e <__cvt+0x7e>

0800dbaa <__exponent>:
 800dbaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbac:	2900      	cmp	r1, #0
 800dbae:	bfba      	itte	lt
 800dbb0:	4249      	neglt	r1, r1
 800dbb2:	232d      	movlt	r3, #45	@ 0x2d
 800dbb4:	232b      	movge	r3, #43	@ 0x2b
 800dbb6:	2909      	cmp	r1, #9
 800dbb8:	7002      	strb	r2, [r0, #0]
 800dbba:	7043      	strb	r3, [r0, #1]
 800dbbc:	dd29      	ble.n	800dc12 <__exponent+0x68>
 800dbbe:	f10d 0307 	add.w	r3, sp, #7
 800dbc2:	461d      	mov	r5, r3
 800dbc4:	270a      	movs	r7, #10
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	fbb1 f6f7 	udiv	r6, r1, r7
 800dbcc:	fb07 1416 	mls	r4, r7, r6, r1
 800dbd0:	3430      	adds	r4, #48	@ 0x30
 800dbd2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800dbd6:	460c      	mov	r4, r1
 800dbd8:	2c63      	cmp	r4, #99	@ 0x63
 800dbda:	f103 33ff 	add.w	r3, r3, #4294967295
 800dbde:	4631      	mov	r1, r6
 800dbe0:	dcf1      	bgt.n	800dbc6 <__exponent+0x1c>
 800dbe2:	3130      	adds	r1, #48	@ 0x30
 800dbe4:	1e94      	subs	r4, r2, #2
 800dbe6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dbea:	1c41      	adds	r1, r0, #1
 800dbec:	4623      	mov	r3, r4
 800dbee:	42ab      	cmp	r3, r5
 800dbf0:	d30a      	bcc.n	800dc08 <__exponent+0x5e>
 800dbf2:	f10d 0309 	add.w	r3, sp, #9
 800dbf6:	1a9b      	subs	r3, r3, r2
 800dbf8:	42ac      	cmp	r4, r5
 800dbfa:	bf88      	it	hi
 800dbfc:	2300      	movhi	r3, #0
 800dbfe:	3302      	adds	r3, #2
 800dc00:	4403      	add	r3, r0
 800dc02:	1a18      	subs	r0, r3, r0
 800dc04:	b003      	add	sp, #12
 800dc06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc08:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dc0c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dc10:	e7ed      	b.n	800dbee <__exponent+0x44>
 800dc12:	2330      	movs	r3, #48	@ 0x30
 800dc14:	3130      	adds	r1, #48	@ 0x30
 800dc16:	7083      	strb	r3, [r0, #2]
 800dc18:	70c1      	strb	r1, [r0, #3]
 800dc1a:	1d03      	adds	r3, r0, #4
 800dc1c:	e7f1      	b.n	800dc02 <__exponent+0x58>
	...

0800dc20 <_printf_float>:
 800dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc24:	b08d      	sub	sp, #52	@ 0x34
 800dc26:	460c      	mov	r4, r1
 800dc28:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dc2c:	4616      	mov	r6, r2
 800dc2e:	461f      	mov	r7, r3
 800dc30:	4605      	mov	r5, r0
 800dc32:	f000 feef 	bl	800ea14 <_localeconv_r>
 800dc36:	6803      	ldr	r3, [r0, #0]
 800dc38:	9304      	str	r3, [sp, #16]
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7f2 fb40 	bl	80002c0 <strlen>
 800dc40:	2300      	movs	r3, #0
 800dc42:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc44:	f8d8 3000 	ldr.w	r3, [r8]
 800dc48:	9005      	str	r0, [sp, #20]
 800dc4a:	3307      	adds	r3, #7
 800dc4c:	f023 0307 	bic.w	r3, r3, #7
 800dc50:	f103 0208 	add.w	r2, r3, #8
 800dc54:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dc58:	f8d4 b000 	ldr.w	fp, [r4]
 800dc5c:	f8c8 2000 	str.w	r2, [r8]
 800dc60:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc64:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800dc68:	9307      	str	r3, [sp, #28]
 800dc6a:	f8cd 8018 	str.w	r8, [sp, #24]
 800dc6e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800dc72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc76:	4b9c      	ldr	r3, [pc, #624]	@ (800dee8 <_printf_float+0x2c8>)
 800dc78:	f04f 32ff 	mov.w	r2, #4294967295
 800dc7c:	f7f2 ff7e 	bl	8000b7c <__aeabi_dcmpun>
 800dc80:	bb70      	cbnz	r0, 800dce0 <_printf_float+0xc0>
 800dc82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc86:	4b98      	ldr	r3, [pc, #608]	@ (800dee8 <_printf_float+0x2c8>)
 800dc88:	f04f 32ff 	mov.w	r2, #4294967295
 800dc8c:	f7f2 ff58 	bl	8000b40 <__aeabi_dcmple>
 800dc90:	bb30      	cbnz	r0, 800dce0 <_printf_float+0xc0>
 800dc92:	2200      	movs	r2, #0
 800dc94:	2300      	movs	r3, #0
 800dc96:	4640      	mov	r0, r8
 800dc98:	4649      	mov	r1, r9
 800dc9a:	f7f2 ff47 	bl	8000b2c <__aeabi_dcmplt>
 800dc9e:	b110      	cbz	r0, 800dca6 <_printf_float+0x86>
 800dca0:	232d      	movs	r3, #45	@ 0x2d
 800dca2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dca6:	4a91      	ldr	r2, [pc, #580]	@ (800deec <_printf_float+0x2cc>)
 800dca8:	4b91      	ldr	r3, [pc, #580]	@ (800def0 <_printf_float+0x2d0>)
 800dcaa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dcae:	bf94      	ite	ls
 800dcb0:	4690      	movls	r8, r2
 800dcb2:	4698      	movhi	r8, r3
 800dcb4:	2303      	movs	r3, #3
 800dcb6:	6123      	str	r3, [r4, #16]
 800dcb8:	f02b 0304 	bic.w	r3, fp, #4
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	f04f 0900 	mov.w	r9, #0
 800dcc2:	9700      	str	r7, [sp, #0]
 800dcc4:	4633      	mov	r3, r6
 800dcc6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800dcc8:	4621      	mov	r1, r4
 800dcca:	4628      	mov	r0, r5
 800dccc:	f000 f9d2 	bl	800e074 <_printf_common>
 800dcd0:	3001      	adds	r0, #1
 800dcd2:	f040 808d 	bne.w	800ddf0 <_printf_float+0x1d0>
 800dcd6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcda:	b00d      	add	sp, #52	@ 0x34
 800dcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce0:	4642      	mov	r2, r8
 800dce2:	464b      	mov	r3, r9
 800dce4:	4640      	mov	r0, r8
 800dce6:	4649      	mov	r1, r9
 800dce8:	f7f2 ff48 	bl	8000b7c <__aeabi_dcmpun>
 800dcec:	b140      	cbz	r0, 800dd00 <_printf_float+0xe0>
 800dcee:	464b      	mov	r3, r9
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	bfbc      	itt	lt
 800dcf4:	232d      	movlt	r3, #45	@ 0x2d
 800dcf6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800dcfa:	4a7e      	ldr	r2, [pc, #504]	@ (800def4 <_printf_float+0x2d4>)
 800dcfc:	4b7e      	ldr	r3, [pc, #504]	@ (800def8 <_printf_float+0x2d8>)
 800dcfe:	e7d4      	b.n	800dcaa <_printf_float+0x8a>
 800dd00:	6863      	ldr	r3, [r4, #4]
 800dd02:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800dd06:	9206      	str	r2, [sp, #24]
 800dd08:	1c5a      	adds	r2, r3, #1
 800dd0a:	d13b      	bne.n	800dd84 <_printf_float+0x164>
 800dd0c:	2306      	movs	r3, #6
 800dd0e:	6063      	str	r3, [r4, #4]
 800dd10:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800dd14:	2300      	movs	r3, #0
 800dd16:	6022      	str	r2, [r4, #0]
 800dd18:	9303      	str	r3, [sp, #12]
 800dd1a:	ab0a      	add	r3, sp, #40	@ 0x28
 800dd1c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800dd20:	ab09      	add	r3, sp, #36	@ 0x24
 800dd22:	9300      	str	r3, [sp, #0]
 800dd24:	6861      	ldr	r1, [r4, #4]
 800dd26:	ec49 8b10 	vmov	d0, r8, r9
 800dd2a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dd2e:	4628      	mov	r0, r5
 800dd30:	f7ff fed6 	bl	800dae0 <__cvt>
 800dd34:	9b06      	ldr	r3, [sp, #24]
 800dd36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd38:	2b47      	cmp	r3, #71	@ 0x47
 800dd3a:	4680      	mov	r8, r0
 800dd3c:	d129      	bne.n	800dd92 <_printf_float+0x172>
 800dd3e:	1cc8      	adds	r0, r1, #3
 800dd40:	db02      	blt.n	800dd48 <_printf_float+0x128>
 800dd42:	6863      	ldr	r3, [r4, #4]
 800dd44:	4299      	cmp	r1, r3
 800dd46:	dd41      	ble.n	800ddcc <_printf_float+0x1ac>
 800dd48:	f1aa 0a02 	sub.w	sl, sl, #2
 800dd4c:	fa5f fa8a 	uxtb.w	sl, sl
 800dd50:	3901      	subs	r1, #1
 800dd52:	4652      	mov	r2, sl
 800dd54:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dd58:	9109      	str	r1, [sp, #36]	@ 0x24
 800dd5a:	f7ff ff26 	bl	800dbaa <__exponent>
 800dd5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd60:	1813      	adds	r3, r2, r0
 800dd62:	2a01      	cmp	r2, #1
 800dd64:	4681      	mov	r9, r0
 800dd66:	6123      	str	r3, [r4, #16]
 800dd68:	dc02      	bgt.n	800dd70 <_printf_float+0x150>
 800dd6a:	6822      	ldr	r2, [r4, #0]
 800dd6c:	07d2      	lsls	r2, r2, #31
 800dd6e:	d501      	bpl.n	800dd74 <_printf_float+0x154>
 800dd70:	3301      	adds	r3, #1
 800dd72:	6123      	str	r3, [r4, #16]
 800dd74:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d0a2      	beq.n	800dcc2 <_printf_float+0xa2>
 800dd7c:	232d      	movs	r3, #45	@ 0x2d
 800dd7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd82:	e79e      	b.n	800dcc2 <_printf_float+0xa2>
 800dd84:	9a06      	ldr	r2, [sp, #24]
 800dd86:	2a47      	cmp	r2, #71	@ 0x47
 800dd88:	d1c2      	bne.n	800dd10 <_printf_float+0xf0>
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d1c0      	bne.n	800dd10 <_printf_float+0xf0>
 800dd8e:	2301      	movs	r3, #1
 800dd90:	e7bd      	b.n	800dd0e <_printf_float+0xee>
 800dd92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dd96:	d9db      	bls.n	800dd50 <_printf_float+0x130>
 800dd98:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dd9c:	d118      	bne.n	800ddd0 <_printf_float+0x1b0>
 800dd9e:	2900      	cmp	r1, #0
 800dda0:	6863      	ldr	r3, [r4, #4]
 800dda2:	dd0b      	ble.n	800ddbc <_printf_float+0x19c>
 800dda4:	6121      	str	r1, [r4, #16]
 800dda6:	b913      	cbnz	r3, 800ddae <_printf_float+0x18e>
 800dda8:	6822      	ldr	r2, [r4, #0]
 800ddaa:	07d0      	lsls	r0, r2, #31
 800ddac:	d502      	bpl.n	800ddb4 <_printf_float+0x194>
 800ddae:	3301      	adds	r3, #1
 800ddb0:	440b      	add	r3, r1
 800ddb2:	6123      	str	r3, [r4, #16]
 800ddb4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ddb6:	f04f 0900 	mov.w	r9, #0
 800ddba:	e7db      	b.n	800dd74 <_printf_float+0x154>
 800ddbc:	b913      	cbnz	r3, 800ddc4 <_printf_float+0x1a4>
 800ddbe:	6822      	ldr	r2, [r4, #0]
 800ddc0:	07d2      	lsls	r2, r2, #31
 800ddc2:	d501      	bpl.n	800ddc8 <_printf_float+0x1a8>
 800ddc4:	3302      	adds	r3, #2
 800ddc6:	e7f4      	b.n	800ddb2 <_printf_float+0x192>
 800ddc8:	2301      	movs	r3, #1
 800ddca:	e7f2      	b.n	800ddb2 <_printf_float+0x192>
 800ddcc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ddd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddd2:	4299      	cmp	r1, r3
 800ddd4:	db05      	blt.n	800dde2 <_printf_float+0x1c2>
 800ddd6:	6823      	ldr	r3, [r4, #0]
 800ddd8:	6121      	str	r1, [r4, #16]
 800ddda:	07d8      	lsls	r0, r3, #31
 800dddc:	d5ea      	bpl.n	800ddb4 <_printf_float+0x194>
 800ddde:	1c4b      	adds	r3, r1, #1
 800dde0:	e7e7      	b.n	800ddb2 <_printf_float+0x192>
 800dde2:	2900      	cmp	r1, #0
 800dde4:	bfd4      	ite	le
 800dde6:	f1c1 0202 	rsble	r2, r1, #2
 800ddea:	2201      	movgt	r2, #1
 800ddec:	4413      	add	r3, r2
 800ddee:	e7e0      	b.n	800ddb2 <_printf_float+0x192>
 800ddf0:	6823      	ldr	r3, [r4, #0]
 800ddf2:	055a      	lsls	r2, r3, #21
 800ddf4:	d407      	bmi.n	800de06 <_printf_float+0x1e6>
 800ddf6:	6923      	ldr	r3, [r4, #16]
 800ddf8:	4642      	mov	r2, r8
 800ddfa:	4631      	mov	r1, r6
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	47b8      	blx	r7
 800de00:	3001      	adds	r0, #1
 800de02:	d12b      	bne.n	800de5c <_printf_float+0x23c>
 800de04:	e767      	b.n	800dcd6 <_printf_float+0xb6>
 800de06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800de0a:	f240 80dd 	bls.w	800dfc8 <_printf_float+0x3a8>
 800de0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800de12:	2200      	movs	r2, #0
 800de14:	2300      	movs	r3, #0
 800de16:	f7f2 fe7f 	bl	8000b18 <__aeabi_dcmpeq>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	d033      	beq.n	800de86 <_printf_float+0x266>
 800de1e:	4a37      	ldr	r2, [pc, #220]	@ (800defc <_printf_float+0x2dc>)
 800de20:	2301      	movs	r3, #1
 800de22:	4631      	mov	r1, r6
 800de24:	4628      	mov	r0, r5
 800de26:	47b8      	blx	r7
 800de28:	3001      	adds	r0, #1
 800de2a:	f43f af54 	beq.w	800dcd6 <_printf_float+0xb6>
 800de2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800de32:	4543      	cmp	r3, r8
 800de34:	db02      	blt.n	800de3c <_printf_float+0x21c>
 800de36:	6823      	ldr	r3, [r4, #0]
 800de38:	07d8      	lsls	r0, r3, #31
 800de3a:	d50f      	bpl.n	800de5c <_printf_float+0x23c>
 800de3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de40:	4631      	mov	r1, r6
 800de42:	4628      	mov	r0, r5
 800de44:	47b8      	blx	r7
 800de46:	3001      	adds	r0, #1
 800de48:	f43f af45 	beq.w	800dcd6 <_printf_float+0xb6>
 800de4c:	f04f 0900 	mov.w	r9, #0
 800de50:	f108 38ff 	add.w	r8, r8, #4294967295
 800de54:	f104 0a1a 	add.w	sl, r4, #26
 800de58:	45c8      	cmp	r8, r9
 800de5a:	dc09      	bgt.n	800de70 <_printf_float+0x250>
 800de5c:	6823      	ldr	r3, [r4, #0]
 800de5e:	079b      	lsls	r3, r3, #30
 800de60:	f100 8103 	bmi.w	800e06a <_printf_float+0x44a>
 800de64:	68e0      	ldr	r0, [r4, #12]
 800de66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de68:	4298      	cmp	r0, r3
 800de6a:	bfb8      	it	lt
 800de6c:	4618      	movlt	r0, r3
 800de6e:	e734      	b.n	800dcda <_printf_float+0xba>
 800de70:	2301      	movs	r3, #1
 800de72:	4652      	mov	r2, sl
 800de74:	4631      	mov	r1, r6
 800de76:	4628      	mov	r0, r5
 800de78:	47b8      	blx	r7
 800de7a:	3001      	adds	r0, #1
 800de7c:	f43f af2b 	beq.w	800dcd6 <_printf_float+0xb6>
 800de80:	f109 0901 	add.w	r9, r9, #1
 800de84:	e7e8      	b.n	800de58 <_printf_float+0x238>
 800de86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de88:	2b00      	cmp	r3, #0
 800de8a:	dc39      	bgt.n	800df00 <_printf_float+0x2e0>
 800de8c:	4a1b      	ldr	r2, [pc, #108]	@ (800defc <_printf_float+0x2dc>)
 800de8e:	2301      	movs	r3, #1
 800de90:	4631      	mov	r1, r6
 800de92:	4628      	mov	r0, r5
 800de94:	47b8      	blx	r7
 800de96:	3001      	adds	r0, #1
 800de98:	f43f af1d 	beq.w	800dcd6 <_printf_float+0xb6>
 800de9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dea0:	ea59 0303 	orrs.w	r3, r9, r3
 800dea4:	d102      	bne.n	800deac <_printf_float+0x28c>
 800dea6:	6823      	ldr	r3, [r4, #0]
 800dea8:	07d9      	lsls	r1, r3, #31
 800deaa:	d5d7      	bpl.n	800de5c <_printf_float+0x23c>
 800deac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800deb0:	4631      	mov	r1, r6
 800deb2:	4628      	mov	r0, r5
 800deb4:	47b8      	blx	r7
 800deb6:	3001      	adds	r0, #1
 800deb8:	f43f af0d 	beq.w	800dcd6 <_printf_float+0xb6>
 800debc:	f04f 0a00 	mov.w	sl, #0
 800dec0:	f104 0b1a 	add.w	fp, r4, #26
 800dec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dec6:	425b      	negs	r3, r3
 800dec8:	4553      	cmp	r3, sl
 800deca:	dc01      	bgt.n	800ded0 <_printf_float+0x2b0>
 800decc:	464b      	mov	r3, r9
 800dece:	e793      	b.n	800ddf8 <_printf_float+0x1d8>
 800ded0:	2301      	movs	r3, #1
 800ded2:	465a      	mov	r2, fp
 800ded4:	4631      	mov	r1, r6
 800ded6:	4628      	mov	r0, r5
 800ded8:	47b8      	blx	r7
 800deda:	3001      	adds	r0, #1
 800dedc:	f43f aefb 	beq.w	800dcd6 <_printf_float+0xb6>
 800dee0:	f10a 0a01 	add.w	sl, sl, #1
 800dee4:	e7ee      	b.n	800dec4 <_printf_float+0x2a4>
 800dee6:	bf00      	nop
 800dee8:	7fefffff 	.word	0x7fefffff
 800deec:	080124b3 	.word	0x080124b3
 800def0:	080124b7 	.word	0x080124b7
 800def4:	080124bb 	.word	0x080124bb
 800def8:	080124bf 	.word	0x080124bf
 800defc:	080124c3 	.word	0x080124c3
 800df00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800df02:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800df06:	4553      	cmp	r3, sl
 800df08:	bfa8      	it	ge
 800df0a:	4653      	movge	r3, sl
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	4699      	mov	r9, r3
 800df10:	dc36      	bgt.n	800df80 <_printf_float+0x360>
 800df12:	f04f 0b00 	mov.w	fp, #0
 800df16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df1a:	f104 021a 	add.w	r2, r4, #26
 800df1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800df20:	9306      	str	r3, [sp, #24]
 800df22:	eba3 0309 	sub.w	r3, r3, r9
 800df26:	455b      	cmp	r3, fp
 800df28:	dc31      	bgt.n	800df8e <_printf_float+0x36e>
 800df2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df2c:	459a      	cmp	sl, r3
 800df2e:	dc3a      	bgt.n	800dfa6 <_printf_float+0x386>
 800df30:	6823      	ldr	r3, [r4, #0]
 800df32:	07da      	lsls	r2, r3, #31
 800df34:	d437      	bmi.n	800dfa6 <_printf_float+0x386>
 800df36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df38:	ebaa 0903 	sub.w	r9, sl, r3
 800df3c:	9b06      	ldr	r3, [sp, #24]
 800df3e:	ebaa 0303 	sub.w	r3, sl, r3
 800df42:	4599      	cmp	r9, r3
 800df44:	bfa8      	it	ge
 800df46:	4699      	movge	r9, r3
 800df48:	f1b9 0f00 	cmp.w	r9, #0
 800df4c:	dc33      	bgt.n	800dfb6 <_printf_float+0x396>
 800df4e:	f04f 0800 	mov.w	r8, #0
 800df52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df56:	f104 0b1a 	add.w	fp, r4, #26
 800df5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df5c:	ebaa 0303 	sub.w	r3, sl, r3
 800df60:	eba3 0309 	sub.w	r3, r3, r9
 800df64:	4543      	cmp	r3, r8
 800df66:	f77f af79 	ble.w	800de5c <_printf_float+0x23c>
 800df6a:	2301      	movs	r3, #1
 800df6c:	465a      	mov	r2, fp
 800df6e:	4631      	mov	r1, r6
 800df70:	4628      	mov	r0, r5
 800df72:	47b8      	blx	r7
 800df74:	3001      	adds	r0, #1
 800df76:	f43f aeae 	beq.w	800dcd6 <_printf_float+0xb6>
 800df7a:	f108 0801 	add.w	r8, r8, #1
 800df7e:	e7ec      	b.n	800df5a <_printf_float+0x33a>
 800df80:	4642      	mov	r2, r8
 800df82:	4631      	mov	r1, r6
 800df84:	4628      	mov	r0, r5
 800df86:	47b8      	blx	r7
 800df88:	3001      	adds	r0, #1
 800df8a:	d1c2      	bne.n	800df12 <_printf_float+0x2f2>
 800df8c:	e6a3      	b.n	800dcd6 <_printf_float+0xb6>
 800df8e:	2301      	movs	r3, #1
 800df90:	4631      	mov	r1, r6
 800df92:	4628      	mov	r0, r5
 800df94:	9206      	str	r2, [sp, #24]
 800df96:	47b8      	blx	r7
 800df98:	3001      	adds	r0, #1
 800df9a:	f43f ae9c 	beq.w	800dcd6 <_printf_float+0xb6>
 800df9e:	9a06      	ldr	r2, [sp, #24]
 800dfa0:	f10b 0b01 	add.w	fp, fp, #1
 800dfa4:	e7bb      	b.n	800df1e <_printf_float+0x2fe>
 800dfa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfaa:	4631      	mov	r1, r6
 800dfac:	4628      	mov	r0, r5
 800dfae:	47b8      	blx	r7
 800dfb0:	3001      	adds	r0, #1
 800dfb2:	d1c0      	bne.n	800df36 <_printf_float+0x316>
 800dfb4:	e68f      	b.n	800dcd6 <_printf_float+0xb6>
 800dfb6:	9a06      	ldr	r2, [sp, #24]
 800dfb8:	464b      	mov	r3, r9
 800dfba:	4442      	add	r2, r8
 800dfbc:	4631      	mov	r1, r6
 800dfbe:	4628      	mov	r0, r5
 800dfc0:	47b8      	blx	r7
 800dfc2:	3001      	adds	r0, #1
 800dfc4:	d1c3      	bne.n	800df4e <_printf_float+0x32e>
 800dfc6:	e686      	b.n	800dcd6 <_printf_float+0xb6>
 800dfc8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dfcc:	f1ba 0f01 	cmp.w	sl, #1
 800dfd0:	dc01      	bgt.n	800dfd6 <_printf_float+0x3b6>
 800dfd2:	07db      	lsls	r3, r3, #31
 800dfd4:	d536      	bpl.n	800e044 <_printf_float+0x424>
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	4642      	mov	r2, r8
 800dfda:	4631      	mov	r1, r6
 800dfdc:	4628      	mov	r0, r5
 800dfde:	47b8      	blx	r7
 800dfe0:	3001      	adds	r0, #1
 800dfe2:	f43f ae78 	beq.w	800dcd6 <_printf_float+0xb6>
 800dfe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfea:	4631      	mov	r1, r6
 800dfec:	4628      	mov	r0, r5
 800dfee:	47b8      	blx	r7
 800dff0:	3001      	adds	r0, #1
 800dff2:	f43f ae70 	beq.w	800dcd6 <_printf_float+0xb6>
 800dff6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dffa:	2200      	movs	r2, #0
 800dffc:	2300      	movs	r3, #0
 800dffe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e002:	f7f2 fd89 	bl	8000b18 <__aeabi_dcmpeq>
 800e006:	b9c0      	cbnz	r0, 800e03a <_printf_float+0x41a>
 800e008:	4653      	mov	r3, sl
 800e00a:	f108 0201 	add.w	r2, r8, #1
 800e00e:	4631      	mov	r1, r6
 800e010:	4628      	mov	r0, r5
 800e012:	47b8      	blx	r7
 800e014:	3001      	adds	r0, #1
 800e016:	d10c      	bne.n	800e032 <_printf_float+0x412>
 800e018:	e65d      	b.n	800dcd6 <_printf_float+0xb6>
 800e01a:	2301      	movs	r3, #1
 800e01c:	465a      	mov	r2, fp
 800e01e:	4631      	mov	r1, r6
 800e020:	4628      	mov	r0, r5
 800e022:	47b8      	blx	r7
 800e024:	3001      	adds	r0, #1
 800e026:	f43f ae56 	beq.w	800dcd6 <_printf_float+0xb6>
 800e02a:	f108 0801 	add.w	r8, r8, #1
 800e02e:	45d0      	cmp	r8, sl
 800e030:	dbf3      	blt.n	800e01a <_printf_float+0x3fa>
 800e032:	464b      	mov	r3, r9
 800e034:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e038:	e6df      	b.n	800ddfa <_printf_float+0x1da>
 800e03a:	f04f 0800 	mov.w	r8, #0
 800e03e:	f104 0b1a 	add.w	fp, r4, #26
 800e042:	e7f4      	b.n	800e02e <_printf_float+0x40e>
 800e044:	2301      	movs	r3, #1
 800e046:	4642      	mov	r2, r8
 800e048:	e7e1      	b.n	800e00e <_printf_float+0x3ee>
 800e04a:	2301      	movs	r3, #1
 800e04c:	464a      	mov	r2, r9
 800e04e:	4631      	mov	r1, r6
 800e050:	4628      	mov	r0, r5
 800e052:	47b8      	blx	r7
 800e054:	3001      	adds	r0, #1
 800e056:	f43f ae3e 	beq.w	800dcd6 <_printf_float+0xb6>
 800e05a:	f108 0801 	add.w	r8, r8, #1
 800e05e:	68e3      	ldr	r3, [r4, #12]
 800e060:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e062:	1a5b      	subs	r3, r3, r1
 800e064:	4543      	cmp	r3, r8
 800e066:	dcf0      	bgt.n	800e04a <_printf_float+0x42a>
 800e068:	e6fc      	b.n	800de64 <_printf_float+0x244>
 800e06a:	f04f 0800 	mov.w	r8, #0
 800e06e:	f104 0919 	add.w	r9, r4, #25
 800e072:	e7f4      	b.n	800e05e <_printf_float+0x43e>

0800e074 <_printf_common>:
 800e074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e078:	4616      	mov	r6, r2
 800e07a:	4698      	mov	r8, r3
 800e07c:	688a      	ldr	r2, [r1, #8]
 800e07e:	690b      	ldr	r3, [r1, #16]
 800e080:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e084:	4293      	cmp	r3, r2
 800e086:	bfb8      	it	lt
 800e088:	4613      	movlt	r3, r2
 800e08a:	6033      	str	r3, [r6, #0]
 800e08c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e090:	4607      	mov	r7, r0
 800e092:	460c      	mov	r4, r1
 800e094:	b10a      	cbz	r2, 800e09a <_printf_common+0x26>
 800e096:	3301      	adds	r3, #1
 800e098:	6033      	str	r3, [r6, #0]
 800e09a:	6823      	ldr	r3, [r4, #0]
 800e09c:	0699      	lsls	r1, r3, #26
 800e09e:	bf42      	ittt	mi
 800e0a0:	6833      	ldrmi	r3, [r6, #0]
 800e0a2:	3302      	addmi	r3, #2
 800e0a4:	6033      	strmi	r3, [r6, #0]
 800e0a6:	6825      	ldr	r5, [r4, #0]
 800e0a8:	f015 0506 	ands.w	r5, r5, #6
 800e0ac:	d106      	bne.n	800e0bc <_printf_common+0x48>
 800e0ae:	f104 0a19 	add.w	sl, r4, #25
 800e0b2:	68e3      	ldr	r3, [r4, #12]
 800e0b4:	6832      	ldr	r2, [r6, #0]
 800e0b6:	1a9b      	subs	r3, r3, r2
 800e0b8:	42ab      	cmp	r3, r5
 800e0ba:	dc26      	bgt.n	800e10a <_printf_common+0x96>
 800e0bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e0c0:	6822      	ldr	r2, [r4, #0]
 800e0c2:	3b00      	subs	r3, #0
 800e0c4:	bf18      	it	ne
 800e0c6:	2301      	movne	r3, #1
 800e0c8:	0692      	lsls	r2, r2, #26
 800e0ca:	d42b      	bmi.n	800e124 <_printf_common+0xb0>
 800e0cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e0d0:	4641      	mov	r1, r8
 800e0d2:	4638      	mov	r0, r7
 800e0d4:	47c8      	blx	r9
 800e0d6:	3001      	adds	r0, #1
 800e0d8:	d01e      	beq.n	800e118 <_printf_common+0xa4>
 800e0da:	6823      	ldr	r3, [r4, #0]
 800e0dc:	6922      	ldr	r2, [r4, #16]
 800e0de:	f003 0306 	and.w	r3, r3, #6
 800e0e2:	2b04      	cmp	r3, #4
 800e0e4:	bf02      	ittt	eq
 800e0e6:	68e5      	ldreq	r5, [r4, #12]
 800e0e8:	6833      	ldreq	r3, [r6, #0]
 800e0ea:	1aed      	subeq	r5, r5, r3
 800e0ec:	68a3      	ldr	r3, [r4, #8]
 800e0ee:	bf0c      	ite	eq
 800e0f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e0f4:	2500      	movne	r5, #0
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	bfc4      	itt	gt
 800e0fa:	1a9b      	subgt	r3, r3, r2
 800e0fc:	18ed      	addgt	r5, r5, r3
 800e0fe:	2600      	movs	r6, #0
 800e100:	341a      	adds	r4, #26
 800e102:	42b5      	cmp	r5, r6
 800e104:	d11a      	bne.n	800e13c <_printf_common+0xc8>
 800e106:	2000      	movs	r0, #0
 800e108:	e008      	b.n	800e11c <_printf_common+0xa8>
 800e10a:	2301      	movs	r3, #1
 800e10c:	4652      	mov	r2, sl
 800e10e:	4641      	mov	r1, r8
 800e110:	4638      	mov	r0, r7
 800e112:	47c8      	blx	r9
 800e114:	3001      	adds	r0, #1
 800e116:	d103      	bne.n	800e120 <_printf_common+0xac>
 800e118:	f04f 30ff 	mov.w	r0, #4294967295
 800e11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e120:	3501      	adds	r5, #1
 800e122:	e7c6      	b.n	800e0b2 <_printf_common+0x3e>
 800e124:	18e1      	adds	r1, r4, r3
 800e126:	1c5a      	adds	r2, r3, #1
 800e128:	2030      	movs	r0, #48	@ 0x30
 800e12a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e12e:	4422      	add	r2, r4
 800e130:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e134:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e138:	3302      	adds	r3, #2
 800e13a:	e7c7      	b.n	800e0cc <_printf_common+0x58>
 800e13c:	2301      	movs	r3, #1
 800e13e:	4622      	mov	r2, r4
 800e140:	4641      	mov	r1, r8
 800e142:	4638      	mov	r0, r7
 800e144:	47c8      	blx	r9
 800e146:	3001      	adds	r0, #1
 800e148:	d0e6      	beq.n	800e118 <_printf_common+0xa4>
 800e14a:	3601      	adds	r6, #1
 800e14c:	e7d9      	b.n	800e102 <_printf_common+0x8e>
	...

0800e150 <_printf_i>:
 800e150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e154:	7e0f      	ldrb	r7, [r1, #24]
 800e156:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e158:	2f78      	cmp	r7, #120	@ 0x78
 800e15a:	4691      	mov	r9, r2
 800e15c:	4680      	mov	r8, r0
 800e15e:	460c      	mov	r4, r1
 800e160:	469a      	mov	sl, r3
 800e162:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e166:	d807      	bhi.n	800e178 <_printf_i+0x28>
 800e168:	2f62      	cmp	r7, #98	@ 0x62
 800e16a:	d80a      	bhi.n	800e182 <_printf_i+0x32>
 800e16c:	2f00      	cmp	r7, #0
 800e16e:	f000 80d2 	beq.w	800e316 <_printf_i+0x1c6>
 800e172:	2f58      	cmp	r7, #88	@ 0x58
 800e174:	f000 80b9 	beq.w	800e2ea <_printf_i+0x19a>
 800e178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e17c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e180:	e03a      	b.n	800e1f8 <_printf_i+0xa8>
 800e182:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e186:	2b15      	cmp	r3, #21
 800e188:	d8f6      	bhi.n	800e178 <_printf_i+0x28>
 800e18a:	a101      	add	r1, pc, #4	@ (adr r1, 800e190 <_printf_i+0x40>)
 800e18c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e190:	0800e1e9 	.word	0x0800e1e9
 800e194:	0800e1fd 	.word	0x0800e1fd
 800e198:	0800e179 	.word	0x0800e179
 800e19c:	0800e179 	.word	0x0800e179
 800e1a0:	0800e179 	.word	0x0800e179
 800e1a4:	0800e179 	.word	0x0800e179
 800e1a8:	0800e1fd 	.word	0x0800e1fd
 800e1ac:	0800e179 	.word	0x0800e179
 800e1b0:	0800e179 	.word	0x0800e179
 800e1b4:	0800e179 	.word	0x0800e179
 800e1b8:	0800e179 	.word	0x0800e179
 800e1bc:	0800e2fd 	.word	0x0800e2fd
 800e1c0:	0800e227 	.word	0x0800e227
 800e1c4:	0800e2b7 	.word	0x0800e2b7
 800e1c8:	0800e179 	.word	0x0800e179
 800e1cc:	0800e179 	.word	0x0800e179
 800e1d0:	0800e31f 	.word	0x0800e31f
 800e1d4:	0800e179 	.word	0x0800e179
 800e1d8:	0800e227 	.word	0x0800e227
 800e1dc:	0800e179 	.word	0x0800e179
 800e1e0:	0800e179 	.word	0x0800e179
 800e1e4:	0800e2bf 	.word	0x0800e2bf
 800e1e8:	6833      	ldr	r3, [r6, #0]
 800e1ea:	1d1a      	adds	r2, r3, #4
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	6032      	str	r2, [r6, #0]
 800e1f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e1f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	e09d      	b.n	800e338 <_printf_i+0x1e8>
 800e1fc:	6833      	ldr	r3, [r6, #0]
 800e1fe:	6820      	ldr	r0, [r4, #0]
 800e200:	1d19      	adds	r1, r3, #4
 800e202:	6031      	str	r1, [r6, #0]
 800e204:	0606      	lsls	r6, r0, #24
 800e206:	d501      	bpl.n	800e20c <_printf_i+0xbc>
 800e208:	681d      	ldr	r5, [r3, #0]
 800e20a:	e003      	b.n	800e214 <_printf_i+0xc4>
 800e20c:	0645      	lsls	r5, r0, #25
 800e20e:	d5fb      	bpl.n	800e208 <_printf_i+0xb8>
 800e210:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e214:	2d00      	cmp	r5, #0
 800e216:	da03      	bge.n	800e220 <_printf_i+0xd0>
 800e218:	232d      	movs	r3, #45	@ 0x2d
 800e21a:	426d      	negs	r5, r5
 800e21c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e220:	4859      	ldr	r0, [pc, #356]	@ (800e388 <_printf_i+0x238>)
 800e222:	230a      	movs	r3, #10
 800e224:	e011      	b.n	800e24a <_printf_i+0xfa>
 800e226:	6821      	ldr	r1, [r4, #0]
 800e228:	6833      	ldr	r3, [r6, #0]
 800e22a:	0608      	lsls	r0, r1, #24
 800e22c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e230:	d402      	bmi.n	800e238 <_printf_i+0xe8>
 800e232:	0649      	lsls	r1, r1, #25
 800e234:	bf48      	it	mi
 800e236:	b2ad      	uxthmi	r5, r5
 800e238:	2f6f      	cmp	r7, #111	@ 0x6f
 800e23a:	4853      	ldr	r0, [pc, #332]	@ (800e388 <_printf_i+0x238>)
 800e23c:	6033      	str	r3, [r6, #0]
 800e23e:	bf14      	ite	ne
 800e240:	230a      	movne	r3, #10
 800e242:	2308      	moveq	r3, #8
 800e244:	2100      	movs	r1, #0
 800e246:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e24a:	6866      	ldr	r6, [r4, #4]
 800e24c:	60a6      	str	r6, [r4, #8]
 800e24e:	2e00      	cmp	r6, #0
 800e250:	bfa2      	ittt	ge
 800e252:	6821      	ldrge	r1, [r4, #0]
 800e254:	f021 0104 	bicge.w	r1, r1, #4
 800e258:	6021      	strge	r1, [r4, #0]
 800e25a:	b90d      	cbnz	r5, 800e260 <_printf_i+0x110>
 800e25c:	2e00      	cmp	r6, #0
 800e25e:	d04b      	beq.n	800e2f8 <_printf_i+0x1a8>
 800e260:	4616      	mov	r6, r2
 800e262:	fbb5 f1f3 	udiv	r1, r5, r3
 800e266:	fb03 5711 	mls	r7, r3, r1, r5
 800e26a:	5dc7      	ldrb	r7, [r0, r7]
 800e26c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e270:	462f      	mov	r7, r5
 800e272:	42bb      	cmp	r3, r7
 800e274:	460d      	mov	r5, r1
 800e276:	d9f4      	bls.n	800e262 <_printf_i+0x112>
 800e278:	2b08      	cmp	r3, #8
 800e27a:	d10b      	bne.n	800e294 <_printf_i+0x144>
 800e27c:	6823      	ldr	r3, [r4, #0]
 800e27e:	07df      	lsls	r7, r3, #31
 800e280:	d508      	bpl.n	800e294 <_printf_i+0x144>
 800e282:	6923      	ldr	r3, [r4, #16]
 800e284:	6861      	ldr	r1, [r4, #4]
 800e286:	4299      	cmp	r1, r3
 800e288:	bfde      	ittt	le
 800e28a:	2330      	movle	r3, #48	@ 0x30
 800e28c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e290:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e294:	1b92      	subs	r2, r2, r6
 800e296:	6122      	str	r2, [r4, #16]
 800e298:	f8cd a000 	str.w	sl, [sp]
 800e29c:	464b      	mov	r3, r9
 800e29e:	aa03      	add	r2, sp, #12
 800e2a0:	4621      	mov	r1, r4
 800e2a2:	4640      	mov	r0, r8
 800e2a4:	f7ff fee6 	bl	800e074 <_printf_common>
 800e2a8:	3001      	adds	r0, #1
 800e2aa:	d14a      	bne.n	800e342 <_printf_i+0x1f2>
 800e2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b0:	b004      	add	sp, #16
 800e2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2b6:	6823      	ldr	r3, [r4, #0]
 800e2b8:	f043 0320 	orr.w	r3, r3, #32
 800e2bc:	6023      	str	r3, [r4, #0]
 800e2be:	4833      	ldr	r0, [pc, #204]	@ (800e38c <_printf_i+0x23c>)
 800e2c0:	2778      	movs	r7, #120	@ 0x78
 800e2c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e2c6:	6823      	ldr	r3, [r4, #0]
 800e2c8:	6831      	ldr	r1, [r6, #0]
 800e2ca:	061f      	lsls	r7, r3, #24
 800e2cc:	f851 5b04 	ldr.w	r5, [r1], #4
 800e2d0:	d402      	bmi.n	800e2d8 <_printf_i+0x188>
 800e2d2:	065f      	lsls	r7, r3, #25
 800e2d4:	bf48      	it	mi
 800e2d6:	b2ad      	uxthmi	r5, r5
 800e2d8:	6031      	str	r1, [r6, #0]
 800e2da:	07d9      	lsls	r1, r3, #31
 800e2dc:	bf44      	itt	mi
 800e2de:	f043 0320 	orrmi.w	r3, r3, #32
 800e2e2:	6023      	strmi	r3, [r4, #0]
 800e2e4:	b11d      	cbz	r5, 800e2ee <_printf_i+0x19e>
 800e2e6:	2310      	movs	r3, #16
 800e2e8:	e7ac      	b.n	800e244 <_printf_i+0xf4>
 800e2ea:	4827      	ldr	r0, [pc, #156]	@ (800e388 <_printf_i+0x238>)
 800e2ec:	e7e9      	b.n	800e2c2 <_printf_i+0x172>
 800e2ee:	6823      	ldr	r3, [r4, #0]
 800e2f0:	f023 0320 	bic.w	r3, r3, #32
 800e2f4:	6023      	str	r3, [r4, #0]
 800e2f6:	e7f6      	b.n	800e2e6 <_printf_i+0x196>
 800e2f8:	4616      	mov	r6, r2
 800e2fa:	e7bd      	b.n	800e278 <_printf_i+0x128>
 800e2fc:	6833      	ldr	r3, [r6, #0]
 800e2fe:	6825      	ldr	r5, [r4, #0]
 800e300:	6961      	ldr	r1, [r4, #20]
 800e302:	1d18      	adds	r0, r3, #4
 800e304:	6030      	str	r0, [r6, #0]
 800e306:	062e      	lsls	r6, r5, #24
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	d501      	bpl.n	800e310 <_printf_i+0x1c0>
 800e30c:	6019      	str	r1, [r3, #0]
 800e30e:	e002      	b.n	800e316 <_printf_i+0x1c6>
 800e310:	0668      	lsls	r0, r5, #25
 800e312:	d5fb      	bpl.n	800e30c <_printf_i+0x1bc>
 800e314:	8019      	strh	r1, [r3, #0]
 800e316:	2300      	movs	r3, #0
 800e318:	6123      	str	r3, [r4, #16]
 800e31a:	4616      	mov	r6, r2
 800e31c:	e7bc      	b.n	800e298 <_printf_i+0x148>
 800e31e:	6833      	ldr	r3, [r6, #0]
 800e320:	1d1a      	adds	r2, r3, #4
 800e322:	6032      	str	r2, [r6, #0]
 800e324:	681e      	ldr	r6, [r3, #0]
 800e326:	6862      	ldr	r2, [r4, #4]
 800e328:	2100      	movs	r1, #0
 800e32a:	4630      	mov	r0, r6
 800e32c:	f7f1 ff78 	bl	8000220 <memchr>
 800e330:	b108      	cbz	r0, 800e336 <_printf_i+0x1e6>
 800e332:	1b80      	subs	r0, r0, r6
 800e334:	6060      	str	r0, [r4, #4]
 800e336:	6863      	ldr	r3, [r4, #4]
 800e338:	6123      	str	r3, [r4, #16]
 800e33a:	2300      	movs	r3, #0
 800e33c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e340:	e7aa      	b.n	800e298 <_printf_i+0x148>
 800e342:	6923      	ldr	r3, [r4, #16]
 800e344:	4632      	mov	r2, r6
 800e346:	4649      	mov	r1, r9
 800e348:	4640      	mov	r0, r8
 800e34a:	47d0      	blx	sl
 800e34c:	3001      	adds	r0, #1
 800e34e:	d0ad      	beq.n	800e2ac <_printf_i+0x15c>
 800e350:	6823      	ldr	r3, [r4, #0]
 800e352:	079b      	lsls	r3, r3, #30
 800e354:	d413      	bmi.n	800e37e <_printf_i+0x22e>
 800e356:	68e0      	ldr	r0, [r4, #12]
 800e358:	9b03      	ldr	r3, [sp, #12]
 800e35a:	4298      	cmp	r0, r3
 800e35c:	bfb8      	it	lt
 800e35e:	4618      	movlt	r0, r3
 800e360:	e7a6      	b.n	800e2b0 <_printf_i+0x160>
 800e362:	2301      	movs	r3, #1
 800e364:	4632      	mov	r2, r6
 800e366:	4649      	mov	r1, r9
 800e368:	4640      	mov	r0, r8
 800e36a:	47d0      	blx	sl
 800e36c:	3001      	adds	r0, #1
 800e36e:	d09d      	beq.n	800e2ac <_printf_i+0x15c>
 800e370:	3501      	adds	r5, #1
 800e372:	68e3      	ldr	r3, [r4, #12]
 800e374:	9903      	ldr	r1, [sp, #12]
 800e376:	1a5b      	subs	r3, r3, r1
 800e378:	42ab      	cmp	r3, r5
 800e37a:	dcf2      	bgt.n	800e362 <_printf_i+0x212>
 800e37c:	e7eb      	b.n	800e356 <_printf_i+0x206>
 800e37e:	2500      	movs	r5, #0
 800e380:	f104 0619 	add.w	r6, r4, #25
 800e384:	e7f5      	b.n	800e372 <_printf_i+0x222>
 800e386:	bf00      	nop
 800e388:	080124c5 	.word	0x080124c5
 800e38c:	080124d6 	.word	0x080124d6

0800e390 <_scanf_float>:
 800e390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e394:	b087      	sub	sp, #28
 800e396:	4617      	mov	r7, r2
 800e398:	9303      	str	r3, [sp, #12]
 800e39a:	688b      	ldr	r3, [r1, #8]
 800e39c:	1e5a      	subs	r2, r3, #1
 800e39e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e3a2:	bf81      	itttt	hi
 800e3a4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e3a8:	eb03 0b05 	addhi.w	fp, r3, r5
 800e3ac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e3b0:	608b      	strhi	r3, [r1, #8]
 800e3b2:	680b      	ldr	r3, [r1, #0]
 800e3b4:	460a      	mov	r2, r1
 800e3b6:	f04f 0500 	mov.w	r5, #0
 800e3ba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e3be:	f842 3b1c 	str.w	r3, [r2], #28
 800e3c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e3c6:	4680      	mov	r8, r0
 800e3c8:	460c      	mov	r4, r1
 800e3ca:	bf98      	it	ls
 800e3cc:	f04f 0b00 	movls.w	fp, #0
 800e3d0:	9201      	str	r2, [sp, #4]
 800e3d2:	4616      	mov	r6, r2
 800e3d4:	46aa      	mov	sl, r5
 800e3d6:	46a9      	mov	r9, r5
 800e3d8:	9502      	str	r5, [sp, #8]
 800e3da:	68a2      	ldr	r2, [r4, #8]
 800e3dc:	b152      	cbz	r2, 800e3f4 <_scanf_float+0x64>
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	2b4e      	cmp	r3, #78	@ 0x4e
 800e3e4:	d864      	bhi.n	800e4b0 <_scanf_float+0x120>
 800e3e6:	2b40      	cmp	r3, #64	@ 0x40
 800e3e8:	d83c      	bhi.n	800e464 <_scanf_float+0xd4>
 800e3ea:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e3ee:	b2c8      	uxtb	r0, r1
 800e3f0:	280e      	cmp	r0, #14
 800e3f2:	d93a      	bls.n	800e46a <_scanf_float+0xda>
 800e3f4:	f1b9 0f00 	cmp.w	r9, #0
 800e3f8:	d003      	beq.n	800e402 <_scanf_float+0x72>
 800e3fa:	6823      	ldr	r3, [r4, #0]
 800e3fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e400:	6023      	str	r3, [r4, #0]
 800e402:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e406:	f1ba 0f01 	cmp.w	sl, #1
 800e40a:	f200 8117 	bhi.w	800e63c <_scanf_float+0x2ac>
 800e40e:	9b01      	ldr	r3, [sp, #4]
 800e410:	429e      	cmp	r6, r3
 800e412:	f200 8108 	bhi.w	800e626 <_scanf_float+0x296>
 800e416:	2001      	movs	r0, #1
 800e418:	b007      	add	sp, #28
 800e41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e41e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e422:	2a0d      	cmp	r2, #13
 800e424:	d8e6      	bhi.n	800e3f4 <_scanf_float+0x64>
 800e426:	a101      	add	r1, pc, #4	@ (adr r1, 800e42c <_scanf_float+0x9c>)
 800e428:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e42c:	0800e573 	.word	0x0800e573
 800e430:	0800e3f5 	.word	0x0800e3f5
 800e434:	0800e3f5 	.word	0x0800e3f5
 800e438:	0800e3f5 	.word	0x0800e3f5
 800e43c:	0800e5d3 	.word	0x0800e5d3
 800e440:	0800e5ab 	.word	0x0800e5ab
 800e444:	0800e3f5 	.word	0x0800e3f5
 800e448:	0800e3f5 	.word	0x0800e3f5
 800e44c:	0800e581 	.word	0x0800e581
 800e450:	0800e3f5 	.word	0x0800e3f5
 800e454:	0800e3f5 	.word	0x0800e3f5
 800e458:	0800e3f5 	.word	0x0800e3f5
 800e45c:	0800e3f5 	.word	0x0800e3f5
 800e460:	0800e539 	.word	0x0800e539
 800e464:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e468:	e7db      	b.n	800e422 <_scanf_float+0x92>
 800e46a:	290e      	cmp	r1, #14
 800e46c:	d8c2      	bhi.n	800e3f4 <_scanf_float+0x64>
 800e46e:	a001      	add	r0, pc, #4	@ (adr r0, 800e474 <_scanf_float+0xe4>)
 800e470:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e474:	0800e529 	.word	0x0800e529
 800e478:	0800e3f5 	.word	0x0800e3f5
 800e47c:	0800e529 	.word	0x0800e529
 800e480:	0800e5bf 	.word	0x0800e5bf
 800e484:	0800e3f5 	.word	0x0800e3f5
 800e488:	0800e4d1 	.word	0x0800e4d1
 800e48c:	0800e50f 	.word	0x0800e50f
 800e490:	0800e50f 	.word	0x0800e50f
 800e494:	0800e50f 	.word	0x0800e50f
 800e498:	0800e50f 	.word	0x0800e50f
 800e49c:	0800e50f 	.word	0x0800e50f
 800e4a0:	0800e50f 	.word	0x0800e50f
 800e4a4:	0800e50f 	.word	0x0800e50f
 800e4a8:	0800e50f 	.word	0x0800e50f
 800e4ac:	0800e50f 	.word	0x0800e50f
 800e4b0:	2b6e      	cmp	r3, #110	@ 0x6e
 800e4b2:	d809      	bhi.n	800e4c8 <_scanf_float+0x138>
 800e4b4:	2b60      	cmp	r3, #96	@ 0x60
 800e4b6:	d8b2      	bhi.n	800e41e <_scanf_float+0x8e>
 800e4b8:	2b54      	cmp	r3, #84	@ 0x54
 800e4ba:	d07b      	beq.n	800e5b4 <_scanf_float+0x224>
 800e4bc:	2b59      	cmp	r3, #89	@ 0x59
 800e4be:	d199      	bne.n	800e3f4 <_scanf_float+0x64>
 800e4c0:	2d07      	cmp	r5, #7
 800e4c2:	d197      	bne.n	800e3f4 <_scanf_float+0x64>
 800e4c4:	2508      	movs	r5, #8
 800e4c6:	e02c      	b.n	800e522 <_scanf_float+0x192>
 800e4c8:	2b74      	cmp	r3, #116	@ 0x74
 800e4ca:	d073      	beq.n	800e5b4 <_scanf_float+0x224>
 800e4cc:	2b79      	cmp	r3, #121	@ 0x79
 800e4ce:	e7f6      	b.n	800e4be <_scanf_float+0x12e>
 800e4d0:	6821      	ldr	r1, [r4, #0]
 800e4d2:	05c8      	lsls	r0, r1, #23
 800e4d4:	d51b      	bpl.n	800e50e <_scanf_float+0x17e>
 800e4d6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e4da:	6021      	str	r1, [r4, #0]
 800e4dc:	f109 0901 	add.w	r9, r9, #1
 800e4e0:	f1bb 0f00 	cmp.w	fp, #0
 800e4e4:	d003      	beq.n	800e4ee <_scanf_float+0x15e>
 800e4e6:	3201      	adds	r2, #1
 800e4e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e4ec:	60a2      	str	r2, [r4, #8]
 800e4ee:	68a3      	ldr	r3, [r4, #8]
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	60a3      	str	r3, [r4, #8]
 800e4f4:	6923      	ldr	r3, [r4, #16]
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	6123      	str	r3, [r4, #16]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	3b01      	subs	r3, #1
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	607b      	str	r3, [r7, #4]
 800e502:	f340 8087 	ble.w	800e614 <_scanf_float+0x284>
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	3301      	adds	r3, #1
 800e50a:	603b      	str	r3, [r7, #0]
 800e50c:	e765      	b.n	800e3da <_scanf_float+0x4a>
 800e50e:	eb1a 0105 	adds.w	r1, sl, r5
 800e512:	f47f af6f 	bne.w	800e3f4 <_scanf_float+0x64>
 800e516:	6822      	ldr	r2, [r4, #0]
 800e518:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e51c:	6022      	str	r2, [r4, #0]
 800e51e:	460d      	mov	r5, r1
 800e520:	468a      	mov	sl, r1
 800e522:	f806 3b01 	strb.w	r3, [r6], #1
 800e526:	e7e2      	b.n	800e4ee <_scanf_float+0x15e>
 800e528:	6822      	ldr	r2, [r4, #0]
 800e52a:	0610      	lsls	r0, r2, #24
 800e52c:	f57f af62 	bpl.w	800e3f4 <_scanf_float+0x64>
 800e530:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e534:	6022      	str	r2, [r4, #0]
 800e536:	e7f4      	b.n	800e522 <_scanf_float+0x192>
 800e538:	f1ba 0f00 	cmp.w	sl, #0
 800e53c:	d10e      	bne.n	800e55c <_scanf_float+0x1cc>
 800e53e:	f1b9 0f00 	cmp.w	r9, #0
 800e542:	d10e      	bne.n	800e562 <_scanf_float+0x1d2>
 800e544:	6822      	ldr	r2, [r4, #0]
 800e546:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e54a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e54e:	d108      	bne.n	800e562 <_scanf_float+0x1d2>
 800e550:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e554:	6022      	str	r2, [r4, #0]
 800e556:	f04f 0a01 	mov.w	sl, #1
 800e55a:	e7e2      	b.n	800e522 <_scanf_float+0x192>
 800e55c:	f1ba 0f02 	cmp.w	sl, #2
 800e560:	d055      	beq.n	800e60e <_scanf_float+0x27e>
 800e562:	2d01      	cmp	r5, #1
 800e564:	d002      	beq.n	800e56c <_scanf_float+0x1dc>
 800e566:	2d04      	cmp	r5, #4
 800e568:	f47f af44 	bne.w	800e3f4 <_scanf_float+0x64>
 800e56c:	3501      	adds	r5, #1
 800e56e:	b2ed      	uxtb	r5, r5
 800e570:	e7d7      	b.n	800e522 <_scanf_float+0x192>
 800e572:	f1ba 0f01 	cmp.w	sl, #1
 800e576:	f47f af3d 	bne.w	800e3f4 <_scanf_float+0x64>
 800e57a:	f04f 0a02 	mov.w	sl, #2
 800e57e:	e7d0      	b.n	800e522 <_scanf_float+0x192>
 800e580:	b97d      	cbnz	r5, 800e5a2 <_scanf_float+0x212>
 800e582:	f1b9 0f00 	cmp.w	r9, #0
 800e586:	f47f af38 	bne.w	800e3fa <_scanf_float+0x6a>
 800e58a:	6822      	ldr	r2, [r4, #0]
 800e58c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e590:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e594:	f040 8108 	bne.w	800e7a8 <_scanf_float+0x418>
 800e598:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e59c:	6022      	str	r2, [r4, #0]
 800e59e:	2501      	movs	r5, #1
 800e5a0:	e7bf      	b.n	800e522 <_scanf_float+0x192>
 800e5a2:	2d03      	cmp	r5, #3
 800e5a4:	d0e2      	beq.n	800e56c <_scanf_float+0x1dc>
 800e5a6:	2d05      	cmp	r5, #5
 800e5a8:	e7de      	b.n	800e568 <_scanf_float+0x1d8>
 800e5aa:	2d02      	cmp	r5, #2
 800e5ac:	f47f af22 	bne.w	800e3f4 <_scanf_float+0x64>
 800e5b0:	2503      	movs	r5, #3
 800e5b2:	e7b6      	b.n	800e522 <_scanf_float+0x192>
 800e5b4:	2d06      	cmp	r5, #6
 800e5b6:	f47f af1d 	bne.w	800e3f4 <_scanf_float+0x64>
 800e5ba:	2507      	movs	r5, #7
 800e5bc:	e7b1      	b.n	800e522 <_scanf_float+0x192>
 800e5be:	6822      	ldr	r2, [r4, #0]
 800e5c0:	0591      	lsls	r1, r2, #22
 800e5c2:	f57f af17 	bpl.w	800e3f4 <_scanf_float+0x64>
 800e5c6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e5ca:	6022      	str	r2, [r4, #0]
 800e5cc:	f8cd 9008 	str.w	r9, [sp, #8]
 800e5d0:	e7a7      	b.n	800e522 <_scanf_float+0x192>
 800e5d2:	6822      	ldr	r2, [r4, #0]
 800e5d4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e5d8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e5dc:	d006      	beq.n	800e5ec <_scanf_float+0x25c>
 800e5de:	0550      	lsls	r0, r2, #21
 800e5e0:	f57f af08 	bpl.w	800e3f4 <_scanf_float+0x64>
 800e5e4:	f1b9 0f00 	cmp.w	r9, #0
 800e5e8:	f000 80de 	beq.w	800e7a8 <_scanf_float+0x418>
 800e5ec:	0591      	lsls	r1, r2, #22
 800e5ee:	bf58      	it	pl
 800e5f0:	9902      	ldrpl	r1, [sp, #8]
 800e5f2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e5f6:	bf58      	it	pl
 800e5f8:	eba9 0101 	subpl.w	r1, r9, r1
 800e5fc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e600:	bf58      	it	pl
 800e602:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e606:	6022      	str	r2, [r4, #0]
 800e608:	f04f 0900 	mov.w	r9, #0
 800e60c:	e789      	b.n	800e522 <_scanf_float+0x192>
 800e60e:	f04f 0a03 	mov.w	sl, #3
 800e612:	e786      	b.n	800e522 <_scanf_float+0x192>
 800e614:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e618:	4639      	mov	r1, r7
 800e61a:	4640      	mov	r0, r8
 800e61c:	4798      	blx	r3
 800e61e:	2800      	cmp	r0, #0
 800e620:	f43f aedb 	beq.w	800e3da <_scanf_float+0x4a>
 800e624:	e6e6      	b.n	800e3f4 <_scanf_float+0x64>
 800e626:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e62a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e62e:	463a      	mov	r2, r7
 800e630:	4640      	mov	r0, r8
 800e632:	4798      	blx	r3
 800e634:	6923      	ldr	r3, [r4, #16]
 800e636:	3b01      	subs	r3, #1
 800e638:	6123      	str	r3, [r4, #16]
 800e63a:	e6e8      	b.n	800e40e <_scanf_float+0x7e>
 800e63c:	1e6b      	subs	r3, r5, #1
 800e63e:	2b06      	cmp	r3, #6
 800e640:	d824      	bhi.n	800e68c <_scanf_float+0x2fc>
 800e642:	2d02      	cmp	r5, #2
 800e644:	d836      	bhi.n	800e6b4 <_scanf_float+0x324>
 800e646:	9b01      	ldr	r3, [sp, #4]
 800e648:	429e      	cmp	r6, r3
 800e64a:	f67f aee4 	bls.w	800e416 <_scanf_float+0x86>
 800e64e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e652:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e656:	463a      	mov	r2, r7
 800e658:	4640      	mov	r0, r8
 800e65a:	4798      	blx	r3
 800e65c:	6923      	ldr	r3, [r4, #16]
 800e65e:	3b01      	subs	r3, #1
 800e660:	6123      	str	r3, [r4, #16]
 800e662:	e7f0      	b.n	800e646 <_scanf_float+0x2b6>
 800e664:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e668:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e66c:	463a      	mov	r2, r7
 800e66e:	4640      	mov	r0, r8
 800e670:	4798      	blx	r3
 800e672:	6923      	ldr	r3, [r4, #16]
 800e674:	3b01      	subs	r3, #1
 800e676:	6123      	str	r3, [r4, #16]
 800e678:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e67c:	fa5f fa8a 	uxtb.w	sl, sl
 800e680:	f1ba 0f02 	cmp.w	sl, #2
 800e684:	d1ee      	bne.n	800e664 <_scanf_float+0x2d4>
 800e686:	3d03      	subs	r5, #3
 800e688:	b2ed      	uxtb	r5, r5
 800e68a:	1b76      	subs	r6, r6, r5
 800e68c:	6823      	ldr	r3, [r4, #0]
 800e68e:	05da      	lsls	r2, r3, #23
 800e690:	d530      	bpl.n	800e6f4 <_scanf_float+0x364>
 800e692:	055b      	lsls	r3, r3, #21
 800e694:	d511      	bpl.n	800e6ba <_scanf_float+0x32a>
 800e696:	9b01      	ldr	r3, [sp, #4]
 800e698:	429e      	cmp	r6, r3
 800e69a:	f67f aebc 	bls.w	800e416 <_scanf_float+0x86>
 800e69e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e6a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e6a6:	463a      	mov	r2, r7
 800e6a8:	4640      	mov	r0, r8
 800e6aa:	4798      	blx	r3
 800e6ac:	6923      	ldr	r3, [r4, #16]
 800e6ae:	3b01      	subs	r3, #1
 800e6b0:	6123      	str	r3, [r4, #16]
 800e6b2:	e7f0      	b.n	800e696 <_scanf_float+0x306>
 800e6b4:	46aa      	mov	sl, r5
 800e6b6:	46b3      	mov	fp, r6
 800e6b8:	e7de      	b.n	800e678 <_scanf_float+0x2e8>
 800e6ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e6be:	6923      	ldr	r3, [r4, #16]
 800e6c0:	2965      	cmp	r1, #101	@ 0x65
 800e6c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e6c6:	f106 35ff 	add.w	r5, r6, #4294967295
 800e6ca:	6123      	str	r3, [r4, #16]
 800e6cc:	d00c      	beq.n	800e6e8 <_scanf_float+0x358>
 800e6ce:	2945      	cmp	r1, #69	@ 0x45
 800e6d0:	d00a      	beq.n	800e6e8 <_scanf_float+0x358>
 800e6d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e6d6:	463a      	mov	r2, r7
 800e6d8:	4640      	mov	r0, r8
 800e6da:	4798      	blx	r3
 800e6dc:	6923      	ldr	r3, [r4, #16]
 800e6de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e6e2:	3b01      	subs	r3, #1
 800e6e4:	1eb5      	subs	r5, r6, #2
 800e6e6:	6123      	str	r3, [r4, #16]
 800e6e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e6ec:	463a      	mov	r2, r7
 800e6ee:	4640      	mov	r0, r8
 800e6f0:	4798      	blx	r3
 800e6f2:	462e      	mov	r6, r5
 800e6f4:	6822      	ldr	r2, [r4, #0]
 800e6f6:	f012 0210 	ands.w	r2, r2, #16
 800e6fa:	d001      	beq.n	800e700 <_scanf_float+0x370>
 800e6fc:	2000      	movs	r0, #0
 800e6fe:	e68b      	b.n	800e418 <_scanf_float+0x88>
 800e700:	7032      	strb	r2, [r6, #0]
 800e702:	6823      	ldr	r3, [r4, #0]
 800e704:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e70c:	d11c      	bne.n	800e748 <_scanf_float+0x3b8>
 800e70e:	9b02      	ldr	r3, [sp, #8]
 800e710:	454b      	cmp	r3, r9
 800e712:	eba3 0209 	sub.w	r2, r3, r9
 800e716:	d123      	bne.n	800e760 <_scanf_float+0x3d0>
 800e718:	9901      	ldr	r1, [sp, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	4640      	mov	r0, r8
 800e71e:	f002 fc07 	bl	8010f30 <_strtod_r>
 800e722:	9b03      	ldr	r3, [sp, #12]
 800e724:	6821      	ldr	r1, [r4, #0]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f011 0f02 	tst.w	r1, #2
 800e72c:	ec57 6b10 	vmov	r6, r7, d0
 800e730:	f103 0204 	add.w	r2, r3, #4
 800e734:	d01f      	beq.n	800e776 <_scanf_float+0x3e6>
 800e736:	9903      	ldr	r1, [sp, #12]
 800e738:	600a      	str	r2, [r1, #0]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	e9c3 6700 	strd	r6, r7, [r3]
 800e740:	68e3      	ldr	r3, [r4, #12]
 800e742:	3301      	adds	r3, #1
 800e744:	60e3      	str	r3, [r4, #12]
 800e746:	e7d9      	b.n	800e6fc <_scanf_float+0x36c>
 800e748:	9b04      	ldr	r3, [sp, #16]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d0e4      	beq.n	800e718 <_scanf_float+0x388>
 800e74e:	9905      	ldr	r1, [sp, #20]
 800e750:	230a      	movs	r3, #10
 800e752:	3101      	adds	r1, #1
 800e754:	4640      	mov	r0, r8
 800e756:	f002 fc6b 	bl	8011030 <_strtol_r>
 800e75a:	9b04      	ldr	r3, [sp, #16]
 800e75c:	9e05      	ldr	r6, [sp, #20]
 800e75e:	1ac2      	subs	r2, r0, r3
 800e760:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e764:	429e      	cmp	r6, r3
 800e766:	bf28      	it	cs
 800e768:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e76c:	4910      	ldr	r1, [pc, #64]	@ (800e7b0 <_scanf_float+0x420>)
 800e76e:	4630      	mov	r0, r6
 800e770:	f000 f8e4 	bl	800e93c <siprintf>
 800e774:	e7d0      	b.n	800e718 <_scanf_float+0x388>
 800e776:	f011 0f04 	tst.w	r1, #4
 800e77a:	9903      	ldr	r1, [sp, #12]
 800e77c:	600a      	str	r2, [r1, #0]
 800e77e:	d1dc      	bne.n	800e73a <_scanf_float+0x3aa>
 800e780:	681d      	ldr	r5, [r3, #0]
 800e782:	4632      	mov	r2, r6
 800e784:	463b      	mov	r3, r7
 800e786:	4630      	mov	r0, r6
 800e788:	4639      	mov	r1, r7
 800e78a:	f7f2 f9f7 	bl	8000b7c <__aeabi_dcmpun>
 800e78e:	b128      	cbz	r0, 800e79c <_scanf_float+0x40c>
 800e790:	4808      	ldr	r0, [pc, #32]	@ (800e7b4 <_scanf_float+0x424>)
 800e792:	f000 f9c5 	bl	800eb20 <nanf>
 800e796:	ed85 0a00 	vstr	s0, [r5]
 800e79a:	e7d1      	b.n	800e740 <_scanf_float+0x3b0>
 800e79c:	4630      	mov	r0, r6
 800e79e:	4639      	mov	r1, r7
 800e7a0:	f7f2 fa4a 	bl	8000c38 <__aeabi_d2f>
 800e7a4:	6028      	str	r0, [r5, #0]
 800e7a6:	e7cb      	b.n	800e740 <_scanf_float+0x3b0>
 800e7a8:	f04f 0900 	mov.w	r9, #0
 800e7ac:	e629      	b.n	800e402 <_scanf_float+0x72>
 800e7ae:	bf00      	nop
 800e7b0:	080124e7 	.word	0x080124e7
 800e7b4:	0801287d 	.word	0x0801287d

0800e7b8 <std>:
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	b510      	push	{r4, lr}
 800e7bc:	4604      	mov	r4, r0
 800e7be:	e9c0 3300 	strd	r3, r3, [r0]
 800e7c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e7c6:	6083      	str	r3, [r0, #8]
 800e7c8:	8181      	strh	r1, [r0, #12]
 800e7ca:	6643      	str	r3, [r0, #100]	@ 0x64
 800e7cc:	81c2      	strh	r2, [r0, #14]
 800e7ce:	6183      	str	r3, [r0, #24]
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	2208      	movs	r2, #8
 800e7d4:	305c      	adds	r0, #92	@ 0x5c
 800e7d6:	f000 f914 	bl	800ea02 <memset>
 800e7da:	4b0d      	ldr	r3, [pc, #52]	@ (800e810 <std+0x58>)
 800e7dc:	6263      	str	r3, [r4, #36]	@ 0x24
 800e7de:	4b0d      	ldr	r3, [pc, #52]	@ (800e814 <std+0x5c>)
 800e7e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e7e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e818 <std+0x60>)
 800e7e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e7e6:	4b0d      	ldr	r3, [pc, #52]	@ (800e81c <std+0x64>)
 800e7e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800e7ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e820 <std+0x68>)
 800e7ec:	6224      	str	r4, [r4, #32]
 800e7ee:	429c      	cmp	r4, r3
 800e7f0:	d006      	beq.n	800e800 <std+0x48>
 800e7f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e7f6:	4294      	cmp	r4, r2
 800e7f8:	d002      	beq.n	800e800 <std+0x48>
 800e7fa:	33d0      	adds	r3, #208	@ 0xd0
 800e7fc:	429c      	cmp	r4, r3
 800e7fe:	d105      	bne.n	800e80c <std+0x54>
 800e800:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e808:	f000 b978 	b.w	800eafc <__retarget_lock_init_recursive>
 800e80c:	bd10      	pop	{r4, pc}
 800e80e:	bf00      	nop
 800e810:	0800e97d 	.word	0x0800e97d
 800e814:	0800e99f 	.word	0x0800e99f
 800e818:	0800e9d7 	.word	0x0800e9d7
 800e81c:	0800e9fb 	.word	0x0800e9fb
 800e820:	20000940 	.word	0x20000940

0800e824 <stdio_exit_handler>:
 800e824:	4a02      	ldr	r2, [pc, #8]	@ (800e830 <stdio_exit_handler+0xc>)
 800e826:	4903      	ldr	r1, [pc, #12]	@ (800e834 <stdio_exit_handler+0x10>)
 800e828:	4803      	ldr	r0, [pc, #12]	@ (800e838 <stdio_exit_handler+0x14>)
 800e82a:	f000 b869 	b.w	800e900 <_fwalk_sglue>
 800e82e:	bf00      	nop
 800e830:	200000a8 	.word	0x200000a8
 800e834:	080113ed 	.word	0x080113ed
 800e838:	200000b8 	.word	0x200000b8

0800e83c <cleanup_stdio>:
 800e83c:	6841      	ldr	r1, [r0, #4]
 800e83e:	4b0c      	ldr	r3, [pc, #48]	@ (800e870 <cleanup_stdio+0x34>)
 800e840:	4299      	cmp	r1, r3
 800e842:	b510      	push	{r4, lr}
 800e844:	4604      	mov	r4, r0
 800e846:	d001      	beq.n	800e84c <cleanup_stdio+0x10>
 800e848:	f002 fdd0 	bl	80113ec <_fflush_r>
 800e84c:	68a1      	ldr	r1, [r4, #8]
 800e84e:	4b09      	ldr	r3, [pc, #36]	@ (800e874 <cleanup_stdio+0x38>)
 800e850:	4299      	cmp	r1, r3
 800e852:	d002      	beq.n	800e85a <cleanup_stdio+0x1e>
 800e854:	4620      	mov	r0, r4
 800e856:	f002 fdc9 	bl	80113ec <_fflush_r>
 800e85a:	68e1      	ldr	r1, [r4, #12]
 800e85c:	4b06      	ldr	r3, [pc, #24]	@ (800e878 <cleanup_stdio+0x3c>)
 800e85e:	4299      	cmp	r1, r3
 800e860:	d004      	beq.n	800e86c <cleanup_stdio+0x30>
 800e862:	4620      	mov	r0, r4
 800e864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e868:	f002 bdc0 	b.w	80113ec <_fflush_r>
 800e86c:	bd10      	pop	{r4, pc}
 800e86e:	bf00      	nop
 800e870:	20000940 	.word	0x20000940
 800e874:	200009a8 	.word	0x200009a8
 800e878:	20000a10 	.word	0x20000a10

0800e87c <global_stdio_init.part.0>:
 800e87c:	b510      	push	{r4, lr}
 800e87e:	4b0b      	ldr	r3, [pc, #44]	@ (800e8ac <global_stdio_init.part.0+0x30>)
 800e880:	4c0b      	ldr	r4, [pc, #44]	@ (800e8b0 <global_stdio_init.part.0+0x34>)
 800e882:	4a0c      	ldr	r2, [pc, #48]	@ (800e8b4 <global_stdio_init.part.0+0x38>)
 800e884:	601a      	str	r2, [r3, #0]
 800e886:	4620      	mov	r0, r4
 800e888:	2200      	movs	r2, #0
 800e88a:	2104      	movs	r1, #4
 800e88c:	f7ff ff94 	bl	800e7b8 <std>
 800e890:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e894:	2201      	movs	r2, #1
 800e896:	2109      	movs	r1, #9
 800e898:	f7ff ff8e 	bl	800e7b8 <std>
 800e89c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e8a0:	2202      	movs	r2, #2
 800e8a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8a6:	2112      	movs	r1, #18
 800e8a8:	f7ff bf86 	b.w	800e7b8 <std>
 800e8ac:	20000a78 	.word	0x20000a78
 800e8b0:	20000940 	.word	0x20000940
 800e8b4:	0800e825 	.word	0x0800e825

0800e8b8 <__sfp_lock_acquire>:
 800e8b8:	4801      	ldr	r0, [pc, #4]	@ (800e8c0 <__sfp_lock_acquire+0x8>)
 800e8ba:	f000 b920 	b.w	800eafe <__retarget_lock_acquire_recursive>
 800e8be:	bf00      	nop
 800e8c0:	20000a81 	.word	0x20000a81

0800e8c4 <__sfp_lock_release>:
 800e8c4:	4801      	ldr	r0, [pc, #4]	@ (800e8cc <__sfp_lock_release+0x8>)
 800e8c6:	f000 b91b 	b.w	800eb00 <__retarget_lock_release_recursive>
 800e8ca:	bf00      	nop
 800e8cc:	20000a81 	.word	0x20000a81

0800e8d0 <__sinit>:
 800e8d0:	b510      	push	{r4, lr}
 800e8d2:	4604      	mov	r4, r0
 800e8d4:	f7ff fff0 	bl	800e8b8 <__sfp_lock_acquire>
 800e8d8:	6a23      	ldr	r3, [r4, #32]
 800e8da:	b11b      	cbz	r3, 800e8e4 <__sinit+0x14>
 800e8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8e0:	f7ff bff0 	b.w	800e8c4 <__sfp_lock_release>
 800e8e4:	4b04      	ldr	r3, [pc, #16]	@ (800e8f8 <__sinit+0x28>)
 800e8e6:	6223      	str	r3, [r4, #32]
 800e8e8:	4b04      	ldr	r3, [pc, #16]	@ (800e8fc <__sinit+0x2c>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d1f5      	bne.n	800e8dc <__sinit+0xc>
 800e8f0:	f7ff ffc4 	bl	800e87c <global_stdio_init.part.0>
 800e8f4:	e7f2      	b.n	800e8dc <__sinit+0xc>
 800e8f6:	bf00      	nop
 800e8f8:	0800e83d 	.word	0x0800e83d
 800e8fc:	20000a78 	.word	0x20000a78

0800e900 <_fwalk_sglue>:
 800e900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e904:	4607      	mov	r7, r0
 800e906:	4688      	mov	r8, r1
 800e908:	4614      	mov	r4, r2
 800e90a:	2600      	movs	r6, #0
 800e90c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e910:	f1b9 0901 	subs.w	r9, r9, #1
 800e914:	d505      	bpl.n	800e922 <_fwalk_sglue+0x22>
 800e916:	6824      	ldr	r4, [r4, #0]
 800e918:	2c00      	cmp	r4, #0
 800e91a:	d1f7      	bne.n	800e90c <_fwalk_sglue+0xc>
 800e91c:	4630      	mov	r0, r6
 800e91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e922:	89ab      	ldrh	r3, [r5, #12]
 800e924:	2b01      	cmp	r3, #1
 800e926:	d907      	bls.n	800e938 <_fwalk_sglue+0x38>
 800e928:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e92c:	3301      	adds	r3, #1
 800e92e:	d003      	beq.n	800e938 <_fwalk_sglue+0x38>
 800e930:	4629      	mov	r1, r5
 800e932:	4638      	mov	r0, r7
 800e934:	47c0      	blx	r8
 800e936:	4306      	orrs	r6, r0
 800e938:	3568      	adds	r5, #104	@ 0x68
 800e93a:	e7e9      	b.n	800e910 <_fwalk_sglue+0x10>

0800e93c <siprintf>:
 800e93c:	b40e      	push	{r1, r2, r3}
 800e93e:	b500      	push	{lr}
 800e940:	b09c      	sub	sp, #112	@ 0x70
 800e942:	ab1d      	add	r3, sp, #116	@ 0x74
 800e944:	9002      	str	r0, [sp, #8]
 800e946:	9006      	str	r0, [sp, #24]
 800e948:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e94c:	4809      	ldr	r0, [pc, #36]	@ (800e974 <siprintf+0x38>)
 800e94e:	9107      	str	r1, [sp, #28]
 800e950:	9104      	str	r1, [sp, #16]
 800e952:	4909      	ldr	r1, [pc, #36]	@ (800e978 <siprintf+0x3c>)
 800e954:	f853 2b04 	ldr.w	r2, [r3], #4
 800e958:	9105      	str	r1, [sp, #20]
 800e95a:	6800      	ldr	r0, [r0, #0]
 800e95c:	9301      	str	r3, [sp, #4]
 800e95e:	a902      	add	r1, sp, #8
 800e960:	f002 fbc4 	bl	80110ec <_svfiprintf_r>
 800e964:	9b02      	ldr	r3, [sp, #8]
 800e966:	2200      	movs	r2, #0
 800e968:	701a      	strb	r2, [r3, #0]
 800e96a:	b01c      	add	sp, #112	@ 0x70
 800e96c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e970:	b003      	add	sp, #12
 800e972:	4770      	bx	lr
 800e974:	200000b4 	.word	0x200000b4
 800e978:	ffff0208 	.word	0xffff0208

0800e97c <__sread>:
 800e97c:	b510      	push	{r4, lr}
 800e97e:	460c      	mov	r4, r1
 800e980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e984:	f000 f86c 	bl	800ea60 <_read_r>
 800e988:	2800      	cmp	r0, #0
 800e98a:	bfab      	itete	ge
 800e98c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e98e:	89a3      	ldrhlt	r3, [r4, #12]
 800e990:	181b      	addge	r3, r3, r0
 800e992:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e996:	bfac      	ite	ge
 800e998:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e99a:	81a3      	strhlt	r3, [r4, #12]
 800e99c:	bd10      	pop	{r4, pc}

0800e99e <__swrite>:
 800e99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a2:	461f      	mov	r7, r3
 800e9a4:	898b      	ldrh	r3, [r1, #12]
 800e9a6:	05db      	lsls	r3, r3, #23
 800e9a8:	4605      	mov	r5, r0
 800e9aa:	460c      	mov	r4, r1
 800e9ac:	4616      	mov	r6, r2
 800e9ae:	d505      	bpl.n	800e9bc <__swrite+0x1e>
 800e9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9b4:	2302      	movs	r3, #2
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	f000 f840 	bl	800ea3c <_lseek_r>
 800e9bc:	89a3      	ldrh	r3, [r4, #12]
 800e9be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e9c6:	81a3      	strh	r3, [r4, #12]
 800e9c8:	4632      	mov	r2, r6
 800e9ca:	463b      	mov	r3, r7
 800e9cc:	4628      	mov	r0, r5
 800e9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d2:	f000 b857 	b.w	800ea84 <_write_r>

0800e9d6 <__sseek>:
 800e9d6:	b510      	push	{r4, lr}
 800e9d8:	460c      	mov	r4, r1
 800e9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9de:	f000 f82d 	bl	800ea3c <_lseek_r>
 800e9e2:	1c43      	adds	r3, r0, #1
 800e9e4:	89a3      	ldrh	r3, [r4, #12]
 800e9e6:	bf15      	itete	ne
 800e9e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e9ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e9ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e9f2:	81a3      	strheq	r3, [r4, #12]
 800e9f4:	bf18      	it	ne
 800e9f6:	81a3      	strhne	r3, [r4, #12]
 800e9f8:	bd10      	pop	{r4, pc}

0800e9fa <__sclose>:
 800e9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9fe:	f000 b80d 	b.w	800ea1c <_close_r>

0800ea02 <memset>:
 800ea02:	4402      	add	r2, r0
 800ea04:	4603      	mov	r3, r0
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d100      	bne.n	800ea0c <memset+0xa>
 800ea0a:	4770      	bx	lr
 800ea0c:	f803 1b01 	strb.w	r1, [r3], #1
 800ea10:	e7f9      	b.n	800ea06 <memset+0x4>
	...

0800ea14 <_localeconv_r>:
 800ea14:	4800      	ldr	r0, [pc, #0]	@ (800ea18 <_localeconv_r+0x4>)
 800ea16:	4770      	bx	lr
 800ea18:	200001f4 	.word	0x200001f4

0800ea1c <_close_r>:
 800ea1c:	b538      	push	{r3, r4, r5, lr}
 800ea1e:	4d06      	ldr	r5, [pc, #24]	@ (800ea38 <_close_r+0x1c>)
 800ea20:	2300      	movs	r3, #0
 800ea22:	4604      	mov	r4, r0
 800ea24:	4608      	mov	r0, r1
 800ea26:	602b      	str	r3, [r5, #0]
 800ea28:	f7f3 faa8 	bl	8001f7c <_close>
 800ea2c:	1c43      	adds	r3, r0, #1
 800ea2e:	d102      	bne.n	800ea36 <_close_r+0x1a>
 800ea30:	682b      	ldr	r3, [r5, #0]
 800ea32:	b103      	cbz	r3, 800ea36 <_close_r+0x1a>
 800ea34:	6023      	str	r3, [r4, #0]
 800ea36:	bd38      	pop	{r3, r4, r5, pc}
 800ea38:	20000a7c 	.word	0x20000a7c

0800ea3c <_lseek_r>:
 800ea3c:	b538      	push	{r3, r4, r5, lr}
 800ea3e:	4d07      	ldr	r5, [pc, #28]	@ (800ea5c <_lseek_r+0x20>)
 800ea40:	4604      	mov	r4, r0
 800ea42:	4608      	mov	r0, r1
 800ea44:	4611      	mov	r1, r2
 800ea46:	2200      	movs	r2, #0
 800ea48:	602a      	str	r2, [r5, #0]
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	f7f3 fabd 	bl	8001fca <_lseek>
 800ea50:	1c43      	adds	r3, r0, #1
 800ea52:	d102      	bne.n	800ea5a <_lseek_r+0x1e>
 800ea54:	682b      	ldr	r3, [r5, #0]
 800ea56:	b103      	cbz	r3, 800ea5a <_lseek_r+0x1e>
 800ea58:	6023      	str	r3, [r4, #0]
 800ea5a:	bd38      	pop	{r3, r4, r5, pc}
 800ea5c:	20000a7c 	.word	0x20000a7c

0800ea60 <_read_r>:
 800ea60:	b538      	push	{r3, r4, r5, lr}
 800ea62:	4d07      	ldr	r5, [pc, #28]	@ (800ea80 <_read_r+0x20>)
 800ea64:	4604      	mov	r4, r0
 800ea66:	4608      	mov	r0, r1
 800ea68:	4611      	mov	r1, r2
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	602a      	str	r2, [r5, #0]
 800ea6e:	461a      	mov	r2, r3
 800ea70:	f7f3 fa4b 	bl	8001f0a <_read>
 800ea74:	1c43      	adds	r3, r0, #1
 800ea76:	d102      	bne.n	800ea7e <_read_r+0x1e>
 800ea78:	682b      	ldr	r3, [r5, #0]
 800ea7a:	b103      	cbz	r3, 800ea7e <_read_r+0x1e>
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	bd38      	pop	{r3, r4, r5, pc}
 800ea80:	20000a7c 	.word	0x20000a7c

0800ea84 <_write_r>:
 800ea84:	b538      	push	{r3, r4, r5, lr}
 800ea86:	4d07      	ldr	r5, [pc, #28]	@ (800eaa4 <_write_r+0x20>)
 800ea88:	4604      	mov	r4, r0
 800ea8a:	4608      	mov	r0, r1
 800ea8c:	4611      	mov	r1, r2
 800ea8e:	2200      	movs	r2, #0
 800ea90:	602a      	str	r2, [r5, #0]
 800ea92:	461a      	mov	r2, r3
 800ea94:	f7f3 fa56 	bl	8001f44 <_write>
 800ea98:	1c43      	adds	r3, r0, #1
 800ea9a:	d102      	bne.n	800eaa2 <_write_r+0x1e>
 800ea9c:	682b      	ldr	r3, [r5, #0]
 800ea9e:	b103      	cbz	r3, 800eaa2 <_write_r+0x1e>
 800eaa0:	6023      	str	r3, [r4, #0]
 800eaa2:	bd38      	pop	{r3, r4, r5, pc}
 800eaa4:	20000a7c 	.word	0x20000a7c

0800eaa8 <__errno>:
 800eaa8:	4b01      	ldr	r3, [pc, #4]	@ (800eab0 <__errno+0x8>)
 800eaaa:	6818      	ldr	r0, [r3, #0]
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop
 800eab0:	200000b4 	.word	0x200000b4

0800eab4 <__libc_init_array>:
 800eab4:	b570      	push	{r4, r5, r6, lr}
 800eab6:	4d0d      	ldr	r5, [pc, #52]	@ (800eaec <__libc_init_array+0x38>)
 800eab8:	4c0d      	ldr	r4, [pc, #52]	@ (800eaf0 <__libc_init_array+0x3c>)
 800eaba:	1b64      	subs	r4, r4, r5
 800eabc:	10a4      	asrs	r4, r4, #2
 800eabe:	2600      	movs	r6, #0
 800eac0:	42a6      	cmp	r6, r4
 800eac2:	d109      	bne.n	800ead8 <__libc_init_array+0x24>
 800eac4:	4d0b      	ldr	r5, [pc, #44]	@ (800eaf4 <__libc_init_array+0x40>)
 800eac6:	4c0c      	ldr	r4, [pc, #48]	@ (800eaf8 <__libc_init_array+0x44>)
 800eac8:	f003 fcac 	bl	8012424 <_init>
 800eacc:	1b64      	subs	r4, r4, r5
 800eace:	10a4      	asrs	r4, r4, #2
 800ead0:	2600      	movs	r6, #0
 800ead2:	42a6      	cmp	r6, r4
 800ead4:	d105      	bne.n	800eae2 <__libc_init_array+0x2e>
 800ead6:	bd70      	pop	{r4, r5, r6, pc}
 800ead8:	f855 3b04 	ldr.w	r3, [r5], #4
 800eadc:	4798      	blx	r3
 800eade:	3601      	adds	r6, #1
 800eae0:	e7ee      	b.n	800eac0 <__libc_init_array+0xc>
 800eae2:	f855 3b04 	ldr.w	r3, [r5], #4
 800eae6:	4798      	blx	r3
 800eae8:	3601      	adds	r6, #1
 800eaea:	e7f2      	b.n	800ead2 <__libc_init_array+0x1e>
 800eaec:	080128f8 	.word	0x080128f8
 800eaf0:	080128f8 	.word	0x080128f8
 800eaf4:	080128f8 	.word	0x080128f8
 800eaf8:	080128fc 	.word	0x080128fc

0800eafc <__retarget_lock_init_recursive>:
 800eafc:	4770      	bx	lr

0800eafe <__retarget_lock_acquire_recursive>:
 800eafe:	4770      	bx	lr

0800eb00 <__retarget_lock_release_recursive>:
 800eb00:	4770      	bx	lr

0800eb02 <memcpy>:
 800eb02:	440a      	add	r2, r1
 800eb04:	4291      	cmp	r1, r2
 800eb06:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb0a:	d100      	bne.n	800eb0e <memcpy+0xc>
 800eb0c:	4770      	bx	lr
 800eb0e:	b510      	push	{r4, lr}
 800eb10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb18:	4291      	cmp	r1, r2
 800eb1a:	d1f9      	bne.n	800eb10 <memcpy+0xe>
 800eb1c:	bd10      	pop	{r4, pc}
	...

0800eb20 <nanf>:
 800eb20:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eb28 <nanf+0x8>
 800eb24:	4770      	bx	lr
 800eb26:	bf00      	nop
 800eb28:	7fc00000 	.word	0x7fc00000

0800eb2c <quorem>:
 800eb2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb30:	6903      	ldr	r3, [r0, #16]
 800eb32:	690c      	ldr	r4, [r1, #16]
 800eb34:	42a3      	cmp	r3, r4
 800eb36:	4607      	mov	r7, r0
 800eb38:	db7e      	blt.n	800ec38 <quorem+0x10c>
 800eb3a:	3c01      	subs	r4, #1
 800eb3c:	f101 0814 	add.w	r8, r1, #20
 800eb40:	00a3      	lsls	r3, r4, #2
 800eb42:	f100 0514 	add.w	r5, r0, #20
 800eb46:	9300      	str	r3, [sp, #0]
 800eb48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb4c:	9301      	str	r3, [sp, #4]
 800eb4e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eb52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb56:	3301      	adds	r3, #1
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eb5e:	fbb2 f6f3 	udiv	r6, r2, r3
 800eb62:	d32e      	bcc.n	800ebc2 <quorem+0x96>
 800eb64:	f04f 0a00 	mov.w	sl, #0
 800eb68:	46c4      	mov	ip, r8
 800eb6a:	46ae      	mov	lr, r5
 800eb6c:	46d3      	mov	fp, sl
 800eb6e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eb72:	b298      	uxth	r0, r3
 800eb74:	fb06 a000 	mla	r0, r6, r0, sl
 800eb78:	0c02      	lsrs	r2, r0, #16
 800eb7a:	0c1b      	lsrs	r3, r3, #16
 800eb7c:	fb06 2303 	mla	r3, r6, r3, r2
 800eb80:	f8de 2000 	ldr.w	r2, [lr]
 800eb84:	b280      	uxth	r0, r0
 800eb86:	b292      	uxth	r2, r2
 800eb88:	1a12      	subs	r2, r2, r0
 800eb8a:	445a      	add	r2, fp
 800eb8c:	f8de 0000 	ldr.w	r0, [lr]
 800eb90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eb94:	b29b      	uxth	r3, r3
 800eb96:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800eb9a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800eb9e:	b292      	uxth	r2, r2
 800eba0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800eba4:	45e1      	cmp	r9, ip
 800eba6:	f84e 2b04 	str.w	r2, [lr], #4
 800ebaa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ebae:	d2de      	bcs.n	800eb6e <quorem+0x42>
 800ebb0:	9b00      	ldr	r3, [sp, #0]
 800ebb2:	58eb      	ldr	r3, [r5, r3]
 800ebb4:	b92b      	cbnz	r3, 800ebc2 <quorem+0x96>
 800ebb6:	9b01      	ldr	r3, [sp, #4]
 800ebb8:	3b04      	subs	r3, #4
 800ebba:	429d      	cmp	r5, r3
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	d32f      	bcc.n	800ec20 <quorem+0xf4>
 800ebc0:	613c      	str	r4, [r7, #16]
 800ebc2:	4638      	mov	r0, r7
 800ebc4:	f001 f9c4 	bl	800ff50 <__mcmp>
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	db25      	blt.n	800ec18 <quorem+0xec>
 800ebcc:	4629      	mov	r1, r5
 800ebce:	2000      	movs	r0, #0
 800ebd0:	f858 2b04 	ldr.w	r2, [r8], #4
 800ebd4:	f8d1 c000 	ldr.w	ip, [r1]
 800ebd8:	fa1f fe82 	uxth.w	lr, r2
 800ebdc:	fa1f f38c 	uxth.w	r3, ip
 800ebe0:	eba3 030e 	sub.w	r3, r3, lr
 800ebe4:	4403      	add	r3, r0
 800ebe6:	0c12      	lsrs	r2, r2, #16
 800ebe8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ebec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ebf6:	45c1      	cmp	r9, r8
 800ebf8:	f841 3b04 	str.w	r3, [r1], #4
 800ebfc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ec00:	d2e6      	bcs.n	800ebd0 <quorem+0xa4>
 800ec02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec0a:	b922      	cbnz	r2, 800ec16 <quorem+0xea>
 800ec0c:	3b04      	subs	r3, #4
 800ec0e:	429d      	cmp	r5, r3
 800ec10:	461a      	mov	r2, r3
 800ec12:	d30b      	bcc.n	800ec2c <quorem+0x100>
 800ec14:	613c      	str	r4, [r7, #16]
 800ec16:	3601      	adds	r6, #1
 800ec18:	4630      	mov	r0, r6
 800ec1a:	b003      	add	sp, #12
 800ec1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec20:	6812      	ldr	r2, [r2, #0]
 800ec22:	3b04      	subs	r3, #4
 800ec24:	2a00      	cmp	r2, #0
 800ec26:	d1cb      	bne.n	800ebc0 <quorem+0x94>
 800ec28:	3c01      	subs	r4, #1
 800ec2a:	e7c6      	b.n	800ebba <quorem+0x8e>
 800ec2c:	6812      	ldr	r2, [r2, #0]
 800ec2e:	3b04      	subs	r3, #4
 800ec30:	2a00      	cmp	r2, #0
 800ec32:	d1ef      	bne.n	800ec14 <quorem+0xe8>
 800ec34:	3c01      	subs	r4, #1
 800ec36:	e7ea      	b.n	800ec0e <quorem+0xe2>
 800ec38:	2000      	movs	r0, #0
 800ec3a:	e7ee      	b.n	800ec1a <quorem+0xee>
 800ec3c:	0000      	movs	r0, r0
	...

0800ec40 <_dtoa_r>:
 800ec40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec44:	69c7      	ldr	r7, [r0, #28]
 800ec46:	b099      	sub	sp, #100	@ 0x64
 800ec48:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ec4c:	ec55 4b10 	vmov	r4, r5, d0
 800ec50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ec52:	9109      	str	r1, [sp, #36]	@ 0x24
 800ec54:	4683      	mov	fp, r0
 800ec56:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec58:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ec5a:	b97f      	cbnz	r7, 800ec7c <_dtoa_r+0x3c>
 800ec5c:	2010      	movs	r0, #16
 800ec5e:	f000 fdfd 	bl	800f85c <malloc>
 800ec62:	4602      	mov	r2, r0
 800ec64:	f8cb 001c 	str.w	r0, [fp, #28]
 800ec68:	b920      	cbnz	r0, 800ec74 <_dtoa_r+0x34>
 800ec6a:	4ba7      	ldr	r3, [pc, #668]	@ (800ef08 <_dtoa_r+0x2c8>)
 800ec6c:	21ef      	movs	r1, #239	@ 0xef
 800ec6e:	48a7      	ldr	r0, [pc, #668]	@ (800ef0c <_dtoa_r+0x2cc>)
 800ec70:	f002 fc2a 	bl	80114c8 <__assert_func>
 800ec74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ec78:	6007      	str	r7, [r0, #0]
 800ec7a:	60c7      	str	r7, [r0, #12]
 800ec7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ec80:	6819      	ldr	r1, [r3, #0]
 800ec82:	b159      	cbz	r1, 800ec9c <_dtoa_r+0x5c>
 800ec84:	685a      	ldr	r2, [r3, #4]
 800ec86:	604a      	str	r2, [r1, #4]
 800ec88:	2301      	movs	r3, #1
 800ec8a:	4093      	lsls	r3, r2
 800ec8c:	608b      	str	r3, [r1, #8]
 800ec8e:	4658      	mov	r0, fp
 800ec90:	f000 feda 	bl	800fa48 <_Bfree>
 800ec94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	601a      	str	r2, [r3, #0]
 800ec9c:	1e2b      	subs	r3, r5, #0
 800ec9e:	bfb9      	ittee	lt
 800eca0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800eca4:	9303      	strlt	r3, [sp, #12]
 800eca6:	2300      	movge	r3, #0
 800eca8:	6033      	strge	r3, [r6, #0]
 800ecaa:	9f03      	ldr	r7, [sp, #12]
 800ecac:	4b98      	ldr	r3, [pc, #608]	@ (800ef10 <_dtoa_r+0x2d0>)
 800ecae:	bfbc      	itt	lt
 800ecb0:	2201      	movlt	r2, #1
 800ecb2:	6032      	strlt	r2, [r6, #0]
 800ecb4:	43bb      	bics	r3, r7
 800ecb6:	d112      	bne.n	800ecde <_dtoa_r+0x9e>
 800ecb8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ecba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ecbe:	6013      	str	r3, [r2, #0]
 800ecc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ecc4:	4323      	orrs	r3, r4
 800ecc6:	f000 854d 	beq.w	800f764 <_dtoa_r+0xb24>
 800ecca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eccc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ef24 <_dtoa_r+0x2e4>
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	f000 854f 	beq.w	800f774 <_dtoa_r+0xb34>
 800ecd6:	f10a 0303 	add.w	r3, sl, #3
 800ecda:	f000 bd49 	b.w	800f770 <_dtoa_r+0xb30>
 800ecde:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ece2:	2200      	movs	r2, #0
 800ece4:	ec51 0b17 	vmov	r0, r1, d7
 800ece8:	2300      	movs	r3, #0
 800ecea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ecee:	f7f1 ff13 	bl	8000b18 <__aeabi_dcmpeq>
 800ecf2:	4680      	mov	r8, r0
 800ecf4:	b158      	cbz	r0, 800ed0e <_dtoa_r+0xce>
 800ecf6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	6013      	str	r3, [r2, #0]
 800ecfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ecfe:	b113      	cbz	r3, 800ed06 <_dtoa_r+0xc6>
 800ed00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ed02:	4b84      	ldr	r3, [pc, #528]	@ (800ef14 <_dtoa_r+0x2d4>)
 800ed04:	6013      	str	r3, [r2, #0]
 800ed06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ef28 <_dtoa_r+0x2e8>
 800ed0a:	f000 bd33 	b.w	800f774 <_dtoa_r+0xb34>
 800ed0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ed12:	aa16      	add	r2, sp, #88	@ 0x58
 800ed14:	a917      	add	r1, sp, #92	@ 0x5c
 800ed16:	4658      	mov	r0, fp
 800ed18:	f001 fa3a 	bl	8010190 <__d2b>
 800ed1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ed20:	4681      	mov	r9, r0
 800ed22:	2e00      	cmp	r6, #0
 800ed24:	d077      	beq.n	800ee16 <_dtoa_r+0x1d6>
 800ed26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ed2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ed38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ed3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ed40:	4619      	mov	r1, r3
 800ed42:	2200      	movs	r2, #0
 800ed44:	4b74      	ldr	r3, [pc, #464]	@ (800ef18 <_dtoa_r+0x2d8>)
 800ed46:	f7f1 fac7 	bl	80002d8 <__aeabi_dsub>
 800ed4a:	a369      	add	r3, pc, #420	@ (adr r3, 800eef0 <_dtoa_r+0x2b0>)
 800ed4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed50:	f7f1 fc7a 	bl	8000648 <__aeabi_dmul>
 800ed54:	a368      	add	r3, pc, #416	@ (adr r3, 800eef8 <_dtoa_r+0x2b8>)
 800ed56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5a:	f7f1 fabf 	bl	80002dc <__adddf3>
 800ed5e:	4604      	mov	r4, r0
 800ed60:	4630      	mov	r0, r6
 800ed62:	460d      	mov	r5, r1
 800ed64:	f7f1 fc06 	bl	8000574 <__aeabi_i2d>
 800ed68:	a365      	add	r3, pc, #404	@ (adr r3, 800ef00 <_dtoa_r+0x2c0>)
 800ed6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6e:	f7f1 fc6b 	bl	8000648 <__aeabi_dmul>
 800ed72:	4602      	mov	r2, r0
 800ed74:	460b      	mov	r3, r1
 800ed76:	4620      	mov	r0, r4
 800ed78:	4629      	mov	r1, r5
 800ed7a:	f7f1 faaf 	bl	80002dc <__adddf3>
 800ed7e:	4604      	mov	r4, r0
 800ed80:	460d      	mov	r5, r1
 800ed82:	f7f1 ff11 	bl	8000ba8 <__aeabi_d2iz>
 800ed86:	2200      	movs	r2, #0
 800ed88:	4607      	mov	r7, r0
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	4629      	mov	r1, r5
 800ed90:	f7f1 fecc 	bl	8000b2c <__aeabi_dcmplt>
 800ed94:	b140      	cbz	r0, 800eda8 <_dtoa_r+0x168>
 800ed96:	4638      	mov	r0, r7
 800ed98:	f7f1 fbec 	bl	8000574 <__aeabi_i2d>
 800ed9c:	4622      	mov	r2, r4
 800ed9e:	462b      	mov	r3, r5
 800eda0:	f7f1 feba 	bl	8000b18 <__aeabi_dcmpeq>
 800eda4:	b900      	cbnz	r0, 800eda8 <_dtoa_r+0x168>
 800eda6:	3f01      	subs	r7, #1
 800eda8:	2f16      	cmp	r7, #22
 800edaa:	d851      	bhi.n	800ee50 <_dtoa_r+0x210>
 800edac:	4b5b      	ldr	r3, [pc, #364]	@ (800ef1c <_dtoa_r+0x2dc>)
 800edae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800edb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800edba:	f7f1 feb7 	bl	8000b2c <__aeabi_dcmplt>
 800edbe:	2800      	cmp	r0, #0
 800edc0:	d048      	beq.n	800ee54 <_dtoa_r+0x214>
 800edc2:	3f01      	subs	r7, #1
 800edc4:	2300      	movs	r3, #0
 800edc6:	9312      	str	r3, [sp, #72]	@ 0x48
 800edc8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800edca:	1b9b      	subs	r3, r3, r6
 800edcc:	1e5a      	subs	r2, r3, #1
 800edce:	bf44      	itt	mi
 800edd0:	f1c3 0801 	rsbmi	r8, r3, #1
 800edd4:	2300      	movmi	r3, #0
 800edd6:	9208      	str	r2, [sp, #32]
 800edd8:	bf54      	ite	pl
 800edda:	f04f 0800 	movpl.w	r8, #0
 800edde:	9308      	strmi	r3, [sp, #32]
 800ede0:	2f00      	cmp	r7, #0
 800ede2:	db39      	blt.n	800ee58 <_dtoa_r+0x218>
 800ede4:	9b08      	ldr	r3, [sp, #32]
 800ede6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ede8:	443b      	add	r3, r7
 800edea:	9308      	str	r3, [sp, #32]
 800edec:	2300      	movs	r3, #0
 800edee:	930a      	str	r3, [sp, #40]	@ 0x28
 800edf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edf2:	2b09      	cmp	r3, #9
 800edf4:	d864      	bhi.n	800eec0 <_dtoa_r+0x280>
 800edf6:	2b05      	cmp	r3, #5
 800edf8:	bfc4      	itt	gt
 800edfa:	3b04      	subgt	r3, #4
 800edfc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800edfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee00:	f1a3 0302 	sub.w	r3, r3, #2
 800ee04:	bfcc      	ite	gt
 800ee06:	2400      	movgt	r4, #0
 800ee08:	2401      	movle	r4, #1
 800ee0a:	2b03      	cmp	r3, #3
 800ee0c:	d863      	bhi.n	800eed6 <_dtoa_r+0x296>
 800ee0e:	e8df f003 	tbb	[pc, r3]
 800ee12:	372a      	.short	0x372a
 800ee14:	5535      	.short	0x5535
 800ee16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ee1a:	441e      	add	r6, r3
 800ee1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ee20:	2b20      	cmp	r3, #32
 800ee22:	bfc1      	itttt	gt
 800ee24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ee28:	409f      	lslgt	r7, r3
 800ee2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ee2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ee32:	bfd6      	itet	le
 800ee34:	f1c3 0320 	rsble	r3, r3, #32
 800ee38:	ea47 0003 	orrgt.w	r0, r7, r3
 800ee3c:	fa04 f003 	lslle.w	r0, r4, r3
 800ee40:	f7f1 fb88 	bl	8000554 <__aeabi_ui2d>
 800ee44:	2201      	movs	r2, #1
 800ee46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ee4a:	3e01      	subs	r6, #1
 800ee4c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ee4e:	e777      	b.n	800ed40 <_dtoa_r+0x100>
 800ee50:	2301      	movs	r3, #1
 800ee52:	e7b8      	b.n	800edc6 <_dtoa_r+0x186>
 800ee54:	9012      	str	r0, [sp, #72]	@ 0x48
 800ee56:	e7b7      	b.n	800edc8 <_dtoa_r+0x188>
 800ee58:	427b      	negs	r3, r7
 800ee5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	eba8 0807 	sub.w	r8, r8, r7
 800ee62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ee64:	e7c4      	b.n	800edf0 <_dtoa_r+0x1b0>
 800ee66:	2300      	movs	r3, #0
 800ee68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	dc35      	bgt.n	800eedc <_dtoa_r+0x29c>
 800ee70:	2301      	movs	r3, #1
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	9307      	str	r3, [sp, #28]
 800ee76:	461a      	mov	r2, r3
 800ee78:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee7a:	e00b      	b.n	800ee94 <_dtoa_r+0x254>
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	e7f3      	b.n	800ee68 <_dtoa_r+0x228>
 800ee80:	2300      	movs	r3, #0
 800ee82:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee86:	18fb      	adds	r3, r7, r3
 800ee88:	9300      	str	r3, [sp, #0]
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	9307      	str	r3, [sp, #28]
 800ee90:	bfb8      	it	lt
 800ee92:	2301      	movlt	r3, #1
 800ee94:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ee98:	2100      	movs	r1, #0
 800ee9a:	2204      	movs	r2, #4
 800ee9c:	f102 0514 	add.w	r5, r2, #20
 800eea0:	429d      	cmp	r5, r3
 800eea2:	d91f      	bls.n	800eee4 <_dtoa_r+0x2a4>
 800eea4:	6041      	str	r1, [r0, #4]
 800eea6:	4658      	mov	r0, fp
 800eea8:	f000 fd8e 	bl	800f9c8 <_Balloc>
 800eeac:	4682      	mov	sl, r0
 800eeae:	2800      	cmp	r0, #0
 800eeb0:	d13c      	bne.n	800ef2c <_dtoa_r+0x2ec>
 800eeb2:	4b1b      	ldr	r3, [pc, #108]	@ (800ef20 <_dtoa_r+0x2e0>)
 800eeb4:	4602      	mov	r2, r0
 800eeb6:	f240 11af 	movw	r1, #431	@ 0x1af
 800eeba:	e6d8      	b.n	800ec6e <_dtoa_r+0x2e>
 800eebc:	2301      	movs	r3, #1
 800eebe:	e7e0      	b.n	800ee82 <_dtoa_r+0x242>
 800eec0:	2401      	movs	r4, #1
 800eec2:	2300      	movs	r3, #0
 800eec4:	9309      	str	r3, [sp, #36]	@ 0x24
 800eec6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800eec8:	f04f 33ff 	mov.w	r3, #4294967295
 800eecc:	9300      	str	r3, [sp, #0]
 800eece:	9307      	str	r3, [sp, #28]
 800eed0:	2200      	movs	r2, #0
 800eed2:	2312      	movs	r3, #18
 800eed4:	e7d0      	b.n	800ee78 <_dtoa_r+0x238>
 800eed6:	2301      	movs	r3, #1
 800eed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eeda:	e7f5      	b.n	800eec8 <_dtoa_r+0x288>
 800eedc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	9307      	str	r3, [sp, #28]
 800eee2:	e7d7      	b.n	800ee94 <_dtoa_r+0x254>
 800eee4:	3101      	adds	r1, #1
 800eee6:	0052      	lsls	r2, r2, #1
 800eee8:	e7d8      	b.n	800ee9c <_dtoa_r+0x25c>
 800eeea:	bf00      	nop
 800eeec:	f3af 8000 	nop.w
 800eef0:	636f4361 	.word	0x636f4361
 800eef4:	3fd287a7 	.word	0x3fd287a7
 800eef8:	8b60c8b3 	.word	0x8b60c8b3
 800eefc:	3fc68a28 	.word	0x3fc68a28
 800ef00:	509f79fb 	.word	0x509f79fb
 800ef04:	3fd34413 	.word	0x3fd34413
 800ef08:	080124f9 	.word	0x080124f9
 800ef0c:	08012510 	.word	0x08012510
 800ef10:	7ff00000 	.word	0x7ff00000
 800ef14:	080124c4 	.word	0x080124c4
 800ef18:	3ff80000 	.word	0x3ff80000
 800ef1c:	08012608 	.word	0x08012608
 800ef20:	08012568 	.word	0x08012568
 800ef24:	080124f5 	.word	0x080124f5
 800ef28:	080124c3 	.word	0x080124c3
 800ef2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ef30:	6018      	str	r0, [r3, #0]
 800ef32:	9b07      	ldr	r3, [sp, #28]
 800ef34:	2b0e      	cmp	r3, #14
 800ef36:	f200 80a4 	bhi.w	800f082 <_dtoa_r+0x442>
 800ef3a:	2c00      	cmp	r4, #0
 800ef3c:	f000 80a1 	beq.w	800f082 <_dtoa_r+0x442>
 800ef40:	2f00      	cmp	r7, #0
 800ef42:	dd33      	ble.n	800efac <_dtoa_r+0x36c>
 800ef44:	4bad      	ldr	r3, [pc, #692]	@ (800f1fc <_dtoa_r+0x5bc>)
 800ef46:	f007 020f 	and.w	r2, r7, #15
 800ef4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef4e:	ed93 7b00 	vldr	d7, [r3]
 800ef52:	05f8      	lsls	r0, r7, #23
 800ef54:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ef58:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ef5c:	d516      	bpl.n	800ef8c <_dtoa_r+0x34c>
 800ef5e:	4ba8      	ldr	r3, [pc, #672]	@ (800f200 <_dtoa_r+0x5c0>)
 800ef60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ef64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ef68:	f7f1 fc98 	bl	800089c <__aeabi_ddiv>
 800ef6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef70:	f004 040f 	and.w	r4, r4, #15
 800ef74:	2603      	movs	r6, #3
 800ef76:	4da2      	ldr	r5, [pc, #648]	@ (800f200 <_dtoa_r+0x5c0>)
 800ef78:	b954      	cbnz	r4, 800ef90 <_dtoa_r+0x350>
 800ef7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef82:	f7f1 fc8b 	bl	800089c <__aeabi_ddiv>
 800ef86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef8a:	e028      	b.n	800efde <_dtoa_r+0x39e>
 800ef8c:	2602      	movs	r6, #2
 800ef8e:	e7f2      	b.n	800ef76 <_dtoa_r+0x336>
 800ef90:	07e1      	lsls	r1, r4, #31
 800ef92:	d508      	bpl.n	800efa6 <_dtoa_r+0x366>
 800ef94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef98:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ef9c:	f7f1 fb54 	bl	8000648 <__aeabi_dmul>
 800efa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800efa4:	3601      	adds	r6, #1
 800efa6:	1064      	asrs	r4, r4, #1
 800efa8:	3508      	adds	r5, #8
 800efaa:	e7e5      	b.n	800ef78 <_dtoa_r+0x338>
 800efac:	f000 80d2 	beq.w	800f154 <_dtoa_r+0x514>
 800efb0:	427c      	negs	r4, r7
 800efb2:	4b92      	ldr	r3, [pc, #584]	@ (800f1fc <_dtoa_r+0x5bc>)
 800efb4:	4d92      	ldr	r5, [pc, #584]	@ (800f200 <_dtoa_r+0x5c0>)
 800efb6:	f004 020f 	and.w	r2, r4, #15
 800efba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800efbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800efc6:	f7f1 fb3f 	bl	8000648 <__aeabi_dmul>
 800efca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efce:	1124      	asrs	r4, r4, #4
 800efd0:	2300      	movs	r3, #0
 800efd2:	2602      	movs	r6, #2
 800efd4:	2c00      	cmp	r4, #0
 800efd6:	f040 80b2 	bne.w	800f13e <_dtoa_r+0x4fe>
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d1d3      	bne.n	800ef86 <_dtoa_r+0x346>
 800efde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800efe0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	f000 80b7 	beq.w	800f158 <_dtoa_r+0x518>
 800efea:	4b86      	ldr	r3, [pc, #536]	@ (800f204 <_dtoa_r+0x5c4>)
 800efec:	2200      	movs	r2, #0
 800efee:	4620      	mov	r0, r4
 800eff0:	4629      	mov	r1, r5
 800eff2:	f7f1 fd9b 	bl	8000b2c <__aeabi_dcmplt>
 800eff6:	2800      	cmp	r0, #0
 800eff8:	f000 80ae 	beq.w	800f158 <_dtoa_r+0x518>
 800effc:	9b07      	ldr	r3, [sp, #28]
 800effe:	2b00      	cmp	r3, #0
 800f000:	f000 80aa 	beq.w	800f158 <_dtoa_r+0x518>
 800f004:	9b00      	ldr	r3, [sp, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	dd37      	ble.n	800f07a <_dtoa_r+0x43a>
 800f00a:	1e7b      	subs	r3, r7, #1
 800f00c:	9304      	str	r3, [sp, #16]
 800f00e:	4620      	mov	r0, r4
 800f010:	4b7d      	ldr	r3, [pc, #500]	@ (800f208 <_dtoa_r+0x5c8>)
 800f012:	2200      	movs	r2, #0
 800f014:	4629      	mov	r1, r5
 800f016:	f7f1 fb17 	bl	8000648 <__aeabi_dmul>
 800f01a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f01e:	9c00      	ldr	r4, [sp, #0]
 800f020:	3601      	adds	r6, #1
 800f022:	4630      	mov	r0, r6
 800f024:	f7f1 faa6 	bl	8000574 <__aeabi_i2d>
 800f028:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f02c:	f7f1 fb0c 	bl	8000648 <__aeabi_dmul>
 800f030:	4b76      	ldr	r3, [pc, #472]	@ (800f20c <_dtoa_r+0x5cc>)
 800f032:	2200      	movs	r2, #0
 800f034:	f7f1 f952 	bl	80002dc <__adddf3>
 800f038:	4605      	mov	r5, r0
 800f03a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f03e:	2c00      	cmp	r4, #0
 800f040:	f040 808d 	bne.w	800f15e <_dtoa_r+0x51e>
 800f044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f048:	4b71      	ldr	r3, [pc, #452]	@ (800f210 <_dtoa_r+0x5d0>)
 800f04a:	2200      	movs	r2, #0
 800f04c:	f7f1 f944 	bl	80002d8 <__aeabi_dsub>
 800f050:	4602      	mov	r2, r0
 800f052:	460b      	mov	r3, r1
 800f054:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f058:	462a      	mov	r2, r5
 800f05a:	4633      	mov	r3, r6
 800f05c:	f7f1 fd84 	bl	8000b68 <__aeabi_dcmpgt>
 800f060:	2800      	cmp	r0, #0
 800f062:	f040 828b 	bne.w	800f57c <_dtoa_r+0x93c>
 800f066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f06a:	462a      	mov	r2, r5
 800f06c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f070:	f7f1 fd5c 	bl	8000b2c <__aeabi_dcmplt>
 800f074:	2800      	cmp	r0, #0
 800f076:	f040 8128 	bne.w	800f2ca <_dtoa_r+0x68a>
 800f07a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f07e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f082:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f084:	2b00      	cmp	r3, #0
 800f086:	f2c0 815a 	blt.w	800f33e <_dtoa_r+0x6fe>
 800f08a:	2f0e      	cmp	r7, #14
 800f08c:	f300 8157 	bgt.w	800f33e <_dtoa_r+0x6fe>
 800f090:	4b5a      	ldr	r3, [pc, #360]	@ (800f1fc <_dtoa_r+0x5bc>)
 800f092:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f096:	ed93 7b00 	vldr	d7, [r3]
 800f09a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	ed8d 7b00 	vstr	d7, [sp]
 800f0a2:	da03      	bge.n	800f0ac <_dtoa_r+0x46c>
 800f0a4:	9b07      	ldr	r3, [sp, #28]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	f340 8101 	ble.w	800f2ae <_dtoa_r+0x66e>
 800f0ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f0b0:	4656      	mov	r6, sl
 800f0b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	4629      	mov	r1, r5
 800f0ba:	f7f1 fbef 	bl	800089c <__aeabi_ddiv>
 800f0be:	f7f1 fd73 	bl	8000ba8 <__aeabi_d2iz>
 800f0c2:	4680      	mov	r8, r0
 800f0c4:	f7f1 fa56 	bl	8000574 <__aeabi_i2d>
 800f0c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0cc:	f7f1 fabc 	bl	8000648 <__aeabi_dmul>
 800f0d0:	4602      	mov	r2, r0
 800f0d2:	460b      	mov	r3, r1
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	4629      	mov	r1, r5
 800f0d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f0dc:	f7f1 f8fc 	bl	80002d8 <__aeabi_dsub>
 800f0e0:	f806 4b01 	strb.w	r4, [r6], #1
 800f0e4:	9d07      	ldr	r5, [sp, #28]
 800f0e6:	eba6 040a 	sub.w	r4, r6, sl
 800f0ea:	42a5      	cmp	r5, r4
 800f0ec:	4602      	mov	r2, r0
 800f0ee:	460b      	mov	r3, r1
 800f0f0:	f040 8117 	bne.w	800f322 <_dtoa_r+0x6e2>
 800f0f4:	f7f1 f8f2 	bl	80002dc <__adddf3>
 800f0f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0fc:	4604      	mov	r4, r0
 800f0fe:	460d      	mov	r5, r1
 800f100:	f7f1 fd32 	bl	8000b68 <__aeabi_dcmpgt>
 800f104:	2800      	cmp	r0, #0
 800f106:	f040 80f9 	bne.w	800f2fc <_dtoa_r+0x6bc>
 800f10a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f10e:	4620      	mov	r0, r4
 800f110:	4629      	mov	r1, r5
 800f112:	f7f1 fd01 	bl	8000b18 <__aeabi_dcmpeq>
 800f116:	b118      	cbz	r0, 800f120 <_dtoa_r+0x4e0>
 800f118:	f018 0f01 	tst.w	r8, #1
 800f11c:	f040 80ee 	bne.w	800f2fc <_dtoa_r+0x6bc>
 800f120:	4649      	mov	r1, r9
 800f122:	4658      	mov	r0, fp
 800f124:	f000 fc90 	bl	800fa48 <_Bfree>
 800f128:	2300      	movs	r3, #0
 800f12a:	7033      	strb	r3, [r6, #0]
 800f12c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f12e:	3701      	adds	r7, #1
 800f130:	601f      	str	r7, [r3, #0]
 800f132:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f134:	2b00      	cmp	r3, #0
 800f136:	f000 831d 	beq.w	800f774 <_dtoa_r+0xb34>
 800f13a:	601e      	str	r6, [r3, #0]
 800f13c:	e31a      	b.n	800f774 <_dtoa_r+0xb34>
 800f13e:	07e2      	lsls	r2, r4, #31
 800f140:	d505      	bpl.n	800f14e <_dtoa_r+0x50e>
 800f142:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f146:	f7f1 fa7f 	bl	8000648 <__aeabi_dmul>
 800f14a:	3601      	adds	r6, #1
 800f14c:	2301      	movs	r3, #1
 800f14e:	1064      	asrs	r4, r4, #1
 800f150:	3508      	adds	r5, #8
 800f152:	e73f      	b.n	800efd4 <_dtoa_r+0x394>
 800f154:	2602      	movs	r6, #2
 800f156:	e742      	b.n	800efde <_dtoa_r+0x39e>
 800f158:	9c07      	ldr	r4, [sp, #28]
 800f15a:	9704      	str	r7, [sp, #16]
 800f15c:	e761      	b.n	800f022 <_dtoa_r+0x3e2>
 800f15e:	4b27      	ldr	r3, [pc, #156]	@ (800f1fc <_dtoa_r+0x5bc>)
 800f160:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f162:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f166:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f16a:	4454      	add	r4, sl
 800f16c:	2900      	cmp	r1, #0
 800f16e:	d053      	beq.n	800f218 <_dtoa_r+0x5d8>
 800f170:	4928      	ldr	r1, [pc, #160]	@ (800f214 <_dtoa_r+0x5d4>)
 800f172:	2000      	movs	r0, #0
 800f174:	f7f1 fb92 	bl	800089c <__aeabi_ddiv>
 800f178:	4633      	mov	r3, r6
 800f17a:	462a      	mov	r2, r5
 800f17c:	f7f1 f8ac 	bl	80002d8 <__aeabi_dsub>
 800f180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f184:	4656      	mov	r6, sl
 800f186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f18a:	f7f1 fd0d 	bl	8000ba8 <__aeabi_d2iz>
 800f18e:	4605      	mov	r5, r0
 800f190:	f7f1 f9f0 	bl	8000574 <__aeabi_i2d>
 800f194:	4602      	mov	r2, r0
 800f196:	460b      	mov	r3, r1
 800f198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f19c:	f7f1 f89c 	bl	80002d8 <__aeabi_dsub>
 800f1a0:	3530      	adds	r5, #48	@ 0x30
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f1aa:	f806 5b01 	strb.w	r5, [r6], #1
 800f1ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f1b2:	f7f1 fcbb 	bl	8000b2c <__aeabi_dcmplt>
 800f1b6:	2800      	cmp	r0, #0
 800f1b8:	d171      	bne.n	800f29e <_dtoa_r+0x65e>
 800f1ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f1be:	4911      	ldr	r1, [pc, #68]	@ (800f204 <_dtoa_r+0x5c4>)
 800f1c0:	2000      	movs	r0, #0
 800f1c2:	f7f1 f889 	bl	80002d8 <__aeabi_dsub>
 800f1c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f1ca:	f7f1 fcaf 	bl	8000b2c <__aeabi_dcmplt>
 800f1ce:	2800      	cmp	r0, #0
 800f1d0:	f040 8095 	bne.w	800f2fe <_dtoa_r+0x6be>
 800f1d4:	42a6      	cmp	r6, r4
 800f1d6:	f43f af50 	beq.w	800f07a <_dtoa_r+0x43a>
 800f1da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f1de:	4b0a      	ldr	r3, [pc, #40]	@ (800f208 <_dtoa_r+0x5c8>)
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f7f1 fa31 	bl	8000648 <__aeabi_dmul>
 800f1e6:	4b08      	ldr	r3, [pc, #32]	@ (800f208 <_dtoa_r+0x5c8>)
 800f1e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1f2:	f7f1 fa29 	bl	8000648 <__aeabi_dmul>
 800f1f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1fa:	e7c4      	b.n	800f186 <_dtoa_r+0x546>
 800f1fc:	08012608 	.word	0x08012608
 800f200:	080125e0 	.word	0x080125e0
 800f204:	3ff00000 	.word	0x3ff00000
 800f208:	40240000 	.word	0x40240000
 800f20c:	401c0000 	.word	0x401c0000
 800f210:	40140000 	.word	0x40140000
 800f214:	3fe00000 	.word	0x3fe00000
 800f218:	4631      	mov	r1, r6
 800f21a:	4628      	mov	r0, r5
 800f21c:	f7f1 fa14 	bl	8000648 <__aeabi_dmul>
 800f220:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f224:	9415      	str	r4, [sp, #84]	@ 0x54
 800f226:	4656      	mov	r6, sl
 800f228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f22c:	f7f1 fcbc 	bl	8000ba8 <__aeabi_d2iz>
 800f230:	4605      	mov	r5, r0
 800f232:	f7f1 f99f 	bl	8000574 <__aeabi_i2d>
 800f236:	4602      	mov	r2, r0
 800f238:	460b      	mov	r3, r1
 800f23a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f23e:	f7f1 f84b 	bl	80002d8 <__aeabi_dsub>
 800f242:	3530      	adds	r5, #48	@ 0x30
 800f244:	f806 5b01 	strb.w	r5, [r6], #1
 800f248:	4602      	mov	r2, r0
 800f24a:	460b      	mov	r3, r1
 800f24c:	42a6      	cmp	r6, r4
 800f24e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f252:	f04f 0200 	mov.w	r2, #0
 800f256:	d124      	bne.n	800f2a2 <_dtoa_r+0x662>
 800f258:	4bac      	ldr	r3, [pc, #688]	@ (800f50c <_dtoa_r+0x8cc>)
 800f25a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f25e:	f7f1 f83d 	bl	80002dc <__adddf3>
 800f262:	4602      	mov	r2, r0
 800f264:	460b      	mov	r3, r1
 800f266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f26a:	f7f1 fc7d 	bl	8000b68 <__aeabi_dcmpgt>
 800f26e:	2800      	cmp	r0, #0
 800f270:	d145      	bne.n	800f2fe <_dtoa_r+0x6be>
 800f272:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f276:	49a5      	ldr	r1, [pc, #660]	@ (800f50c <_dtoa_r+0x8cc>)
 800f278:	2000      	movs	r0, #0
 800f27a:	f7f1 f82d 	bl	80002d8 <__aeabi_dsub>
 800f27e:	4602      	mov	r2, r0
 800f280:	460b      	mov	r3, r1
 800f282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f286:	f7f1 fc51 	bl	8000b2c <__aeabi_dcmplt>
 800f28a:	2800      	cmp	r0, #0
 800f28c:	f43f aef5 	beq.w	800f07a <_dtoa_r+0x43a>
 800f290:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f292:	1e73      	subs	r3, r6, #1
 800f294:	9315      	str	r3, [sp, #84]	@ 0x54
 800f296:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f29a:	2b30      	cmp	r3, #48	@ 0x30
 800f29c:	d0f8      	beq.n	800f290 <_dtoa_r+0x650>
 800f29e:	9f04      	ldr	r7, [sp, #16]
 800f2a0:	e73e      	b.n	800f120 <_dtoa_r+0x4e0>
 800f2a2:	4b9b      	ldr	r3, [pc, #620]	@ (800f510 <_dtoa_r+0x8d0>)
 800f2a4:	f7f1 f9d0 	bl	8000648 <__aeabi_dmul>
 800f2a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2ac:	e7bc      	b.n	800f228 <_dtoa_r+0x5e8>
 800f2ae:	d10c      	bne.n	800f2ca <_dtoa_r+0x68a>
 800f2b0:	4b98      	ldr	r3, [pc, #608]	@ (800f514 <_dtoa_r+0x8d4>)
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f2b8:	f7f1 f9c6 	bl	8000648 <__aeabi_dmul>
 800f2bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f2c0:	f7f1 fc48 	bl	8000b54 <__aeabi_dcmpge>
 800f2c4:	2800      	cmp	r0, #0
 800f2c6:	f000 8157 	beq.w	800f578 <_dtoa_r+0x938>
 800f2ca:	2400      	movs	r4, #0
 800f2cc:	4625      	mov	r5, r4
 800f2ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2d0:	43db      	mvns	r3, r3
 800f2d2:	9304      	str	r3, [sp, #16]
 800f2d4:	4656      	mov	r6, sl
 800f2d6:	2700      	movs	r7, #0
 800f2d8:	4621      	mov	r1, r4
 800f2da:	4658      	mov	r0, fp
 800f2dc:	f000 fbb4 	bl	800fa48 <_Bfree>
 800f2e0:	2d00      	cmp	r5, #0
 800f2e2:	d0dc      	beq.n	800f29e <_dtoa_r+0x65e>
 800f2e4:	b12f      	cbz	r7, 800f2f2 <_dtoa_r+0x6b2>
 800f2e6:	42af      	cmp	r7, r5
 800f2e8:	d003      	beq.n	800f2f2 <_dtoa_r+0x6b2>
 800f2ea:	4639      	mov	r1, r7
 800f2ec:	4658      	mov	r0, fp
 800f2ee:	f000 fbab 	bl	800fa48 <_Bfree>
 800f2f2:	4629      	mov	r1, r5
 800f2f4:	4658      	mov	r0, fp
 800f2f6:	f000 fba7 	bl	800fa48 <_Bfree>
 800f2fa:	e7d0      	b.n	800f29e <_dtoa_r+0x65e>
 800f2fc:	9704      	str	r7, [sp, #16]
 800f2fe:	4633      	mov	r3, r6
 800f300:	461e      	mov	r6, r3
 800f302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f306:	2a39      	cmp	r2, #57	@ 0x39
 800f308:	d107      	bne.n	800f31a <_dtoa_r+0x6da>
 800f30a:	459a      	cmp	sl, r3
 800f30c:	d1f8      	bne.n	800f300 <_dtoa_r+0x6c0>
 800f30e:	9a04      	ldr	r2, [sp, #16]
 800f310:	3201      	adds	r2, #1
 800f312:	9204      	str	r2, [sp, #16]
 800f314:	2230      	movs	r2, #48	@ 0x30
 800f316:	f88a 2000 	strb.w	r2, [sl]
 800f31a:	781a      	ldrb	r2, [r3, #0]
 800f31c:	3201      	adds	r2, #1
 800f31e:	701a      	strb	r2, [r3, #0]
 800f320:	e7bd      	b.n	800f29e <_dtoa_r+0x65e>
 800f322:	4b7b      	ldr	r3, [pc, #492]	@ (800f510 <_dtoa_r+0x8d0>)
 800f324:	2200      	movs	r2, #0
 800f326:	f7f1 f98f 	bl	8000648 <__aeabi_dmul>
 800f32a:	2200      	movs	r2, #0
 800f32c:	2300      	movs	r3, #0
 800f32e:	4604      	mov	r4, r0
 800f330:	460d      	mov	r5, r1
 800f332:	f7f1 fbf1 	bl	8000b18 <__aeabi_dcmpeq>
 800f336:	2800      	cmp	r0, #0
 800f338:	f43f aebb 	beq.w	800f0b2 <_dtoa_r+0x472>
 800f33c:	e6f0      	b.n	800f120 <_dtoa_r+0x4e0>
 800f33e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f340:	2a00      	cmp	r2, #0
 800f342:	f000 80db 	beq.w	800f4fc <_dtoa_r+0x8bc>
 800f346:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f348:	2a01      	cmp	r2, #1
 800f34a:	f300 80bf 	bgt.w	800f4cc <_dtoa_r+0x88c>
 800f34e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f350:	2a00      	cmp	r2, #0
 800f352:	f000 80b7 	beq.w	800f4c4 <_dtoa_r+0x884>
 800f356:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f35a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f35c:	4646      	mov	r6, r8
 800f35e:	9a08      	ldr	r2, [sp, #32]
 800f360:	2101      	movs	r1, #1
 800f362:	441a      	add	r2, r3
 800f364:	4658      	mov	r0, fp
 800f366:	4498      	add	r8, r3
 800f368:	9208      	str	r2, [sp, #32]
 800f36a:	f000 fc6b 	bl	800fc44 <__i2b>
 800f36e:	4605      	mov	r5, r0
 800f370:	b15e      	cbz	r6, 800f38a <_dtoa_r+0x74a>
 800f372:	9b08      	ldr	r3, [sp, #32]
 800f374:	2b00      	cmp	r3, #0
 800f376:	dd08      	ble.n	800f38a <_dtoa_r+0x74a>
 800f378:	42b3      	cmp	r3, r6
 800f37a:	9a08      	ldr	r2, [sp, #32]
 800f37c:	bfa8      	it	ge
 800f37e:	4633      	movge	r3, r6
 800f380:	eba8 0803 	sub.w	r8, r8, r3
 800f384:	1af6      	subs	r6, r6, r3
 800f386:	1ad3      	subs	r3, r2, r3
 800f388:	9308      	str	r3, [sp, #32]
 800f38a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f38c:	b1f3      	cbz	r3, 800f3cc <_dtoa_r+0x78c>
 800f38e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f390:	2b00      	cmp	r3, #0
 800f392:	f000 80b7 	beq.w	800f504 <_dtoa_r+0x8c4>
 800f396:	b18c      	cbz	r4, 800f3bc <_dtoa_r+0x77c>
 800f398:	4629      	mov	r1, r5
 800f39a:	4622      	mov	r2, r4
 800f39c:	4658      	mov	r0, fp
 800f39e:	f000 fd11 	bl	800fdc4 <__pow5mult>
 800f3a2:	464a      	mov	r2, r9
 800f3a4:	4601      	mov	r1, r0
 800f3a6:	4605      	mov	r5, r0
 800f3a8:	4658      	mov	r0, fp
 800f3aa:	f000 fc61 	bl	800fc70 <__multiply>
 800f3ae:	4649      	mov	r1, r9
 800f3b0:	9004      	str	r0, [sp, #16]
 800f3b2:	4658      	mov	r0, fp
 800f3b4:	f000 fb48 	bl	800fa48 <_Bfree>
 800f3b8:	9b04      	ldr	r3, [sp, #16]
 800f3ba:	4699      	mov	r9, r3
 800f3bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3be:	1b1a      	subs	r2, r3, r4
 800f3c0:	d004      	beq.n	800f3cc <_dtoa_r+0x78c>
 800f3c2:	4649      	mov	r1, r9
 800f3c4:	4658      	mov	r0, fp
 800f3c6:	f000 fcfd 	bl	800fdc4 <__pow5mult>
 800f3ca:	4681      	mov	r9, r0
 800f3cc:	2101      	movs	r1, #1
 800f3ce:	4658      	mov	r0, fp
 800f3d0:	f000 fc38 	bl	800fc44 <__i2b>
 800f3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	f000 81cf 	beq.w	800f77c <_dtoa_r+0xb3c>
 800f3de:	461a      	mov	r2, r3
 800f3e0:	4601      	mov	r1, r0
 800f3e2:	4658      	mov	r0, fp
 800f3e4:	f000 fcee 	bl	800fdc4 <__pow5mult>
 800f3e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	4604      	mov	r4, r0
 800f3ee:	f300 8095 	bgt.w	800f51c <_dtoa_r+0x8dc>
 800f3f2:	9b02      	ldr	r3, [sp, #8]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	f040 8087 	bne.w	800f508 <_dtoa_r+0x8c8>
 800f3fa:	9b03      	ldr	r3, [sp, #12]
 800f3fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f400:	2b00      	cmp	r3, #0
 800f402:	f040 8089 	bne.w	800f518 <_dtoa_r+0x8d8>
 800f406:	9b03      	ldr	r3, [sp, #12]
 800f408:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f40c:	0d1b      	lsrs	r3, r3, #20
 800f40e:	051b      	lsls	r3, r3, #20
 800f410:	b12b      	cbz	r3, 800f41e <_dtoa_r+0x7de>
 800f412:	9b08      	ldr	r3, [sp, #32]
 800f414:	3301      	adds	r3, #1
 800f416:	9308      	str	r3, [sp, #32]
 800f418:	f108 0801 	add.w	r8, r8, #1
 800f41c:	2301      	movs	r3, #1
 800f41e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f422:	2b00      	cmp	r3, #0
 800f424:	f000 81b0 	beq.w	800f788 <_dtoa_r+0xb48>
 800f428:	6923      	ldr	r3, [r4, #16]
 800f42a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f42e:	6918      	ldr	r0, [r3, #16]
 800f430:	f000 fbbc 	bl	800fbac <__hi0bits>
 800f434:	f1c0 0020 	rsb	r0, r0, #32
 800f438:	9b08      	ldr	r3, [sp, #32]
 800f43a:	4418      	add	r0, r3
 800f43c:	f010 001f 	ands.w	r0, r0, #31
 800f440:	d077      	beq.n	800f532 <_dtoa_r+0x8f2>
 800f442:	f1c0 0320 	rsb	r3, r0, #32
 800f446:	2b04      	cmp	r3, #4
 800f448:	dd6b      	ble.n	800f522 <_dtoa_r+0x8e2>
 800f44a:	9b08      	ldr	r3, [sp, #32]
 800f44c:	f1c0 001c 	rsb	r0, r0, #28
 800f450:	4403      	add	r3, r0
 800f452:	4480      	add	r8, r0
 800f454:	4406      	add	r6, r0
 800f456:	9308      	str	r3, [sp, #32]
 800f458:	f1b8 0f00 	cmp.w	r8, #0
 800f45c:	dd05      	ble.n	800f46a <_dtoa_r+0x82a>
 800f45e:	4649      	mov	r1, r9
 800f460:	4642      	mov	r2, r8
 800f462:	4658      	mov	r0, fp
 800f464:	f000 fd08 	bl	800fe78 <__lshift>
 800f468:	4681      	mov	r9, r0
 800f46a:	9b08      	ldr	r3, [sp, #32]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	dd05      	ble.n	800f47c <_dtoa_r+0x83c>
 800f470:	4621      	mov	r1, r4
 800f472:	461a      	mov	r2, r3
 800f474:	4658      	mov	r0, fp
 800f476:	f000 fcff 	bl	800fe78 <__lshift>
 800f47a:	4604      	mov	r4, r0
 800f47c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d059      	beq.n	800f536 <_dtoa_r+0x8f6>
 800f482:	4621      	mov	r1, r4
 800f484:	4648      	mov	r0, r9
 800f486:	f000 fd63 	bl	800ff50 <__mcmp>
 800f48a:	2800      	cmp	r0, #0
 800f48c:	da53      	bge.n	800f536 <_dtoa_r+0x8f6>
 800f48e:	1e7b      	subs	r3, r7, #1
 800f490:	9304      	str	r3, [sp, #16]
 800f492:	4649      	mov	r1, r9
 800f494:	2300      	movs	r3, #0
 800f496:	220a      	movs	r2, #10
 800f498:	4658      	mov	r0, fp
 800f49a:	f000 faf7 	bl	800fa8c <__multadd>
 800f49e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4a0:	4681      	mov	r9, r0
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	f000 8172 	beq.w	800f78c <_dtoa_r+0xb4c>
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	4629      	mov	r1, r5
 800f4ac:	220a      	movs	r2, #10
 800f4ae:	4658      	mov	r0, fp
 800f4b0:	f000 faec 	bl	800fa8c <__multadd>
 800f4b4:	9b00      	ldr	r3, [sp, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	4605      	mov	r5, r0
 800f4ba:	dc67      	bgt.n	800f58c <_dtoa_r+0x94c>
 800f4bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4be:	2b02      	cmp	r3, #2
 800f4c0:	dc41      	bgt.n	800f546 <_dtoa_r+0x906>
 800f4c2:	e063      	b.n	800f58c <_dtoa_r+0x94c>
 800f4c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f4c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f4ca:	e746      	b.n	800f35a <_dtoa_r+0x71a>
 800f4cc:	9b07      	ldr	r3, [sp, #28]
 800f4ce:	1e5c      	subs	r4, r3, #1
 800f4d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4d2:	42a3      	cmp	r3, r4
 800f4d4:	bfbf      	itttt	lt
 800f4d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f4d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f4da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f4dc:	1ae3      	sublt	r3, r4, r3
 800f4de:	bfb4      	ite	lt
 800f4e0:	18d2      	addlt	r2, r2, r3
 800f4e2:	1b1c      	subge	r4, r3, r4
 800f4e4:	9b07      	ldr	r3, [sp, #28]
 800f4e6:	bfbc      	itt	lt
 800f4e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f4ea:	2400      	movlt	r4, #0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	bfb5      	itete	lt
 800f4f0:	eba8 0603 	sublt.w	r6, r8, r3
 800f4f4:	9b07      	ldrge	r3, [sp, #28]
 800f4f6:	2300      	movlt	r3, #0
 800f4f8:	4646      	movge	r6, r8
 800f4fa:	e730      	b.n	800f35e <_dtoa_r+0x71e>
 800f4fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f4fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f500:	4646      	mov	r6, r8
 800f502:	e735      	b.n	800f370 <_dtoa_r+0x730>
 800f504:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f506:	e75c      	b.n	800f3c2 <_dtoa_r+0x782>
 800f508:	2300      	movs	r3, #0
 800f50a:	e788      	b.n	800f41e <_dtoa_r+0x7de>
 800f50c:	3fe00000 	.word	0x3fe00000
 800f510:	40240000 	.word	0x40240000
 800f514:	40140000 	.word	0x40140000
 800f518:	9b02      	ldr	r3, [sp, #8]
 800f51a:	e780      	b.n	800f41e <_dtoa_r+0x7de>
 800f51c:	2300      	movs	r3, #0
 800f51e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f520:	e782      	b.n	800f428 <_dtoa_r+0x7e8>
 800f522:	d099      	beq.n	800f458 <_dtoa_r+0x818>
 800f524:	9a08      	ldr	r2, [sp, #32]
 800f526:	331c      	adds	r3, #28
 800f528:	441a      	add	r2, r3
 800f52a:	4498      	add	r8, r3
 800f52c:	441e      	add	r6, r3
 800f52e:	9208      	str	r2, [sp, #32]
 800f530:	e792      	b.n	800f458 <_dtoa_r+0x818>
 800f532:	4603      	mov	r3, r0
 800f534:	e7f6      	b.n	800f524 <_dtoa_r+0x8e4>
 800f536:	9b07      	ldr	r3, [sp, #28]
 800f538:	9704      	str	r7, [sp, #16]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	dc20      	bgt.n	800f580 <_dtoa_r+0x940>
 800f53e:	9300      	str	r3, [sp, #0]
 800f540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f542:	2b02      	cmp	r3, #2
 800f544:	dd1e      	ble.n	800f584 <_dtoa_r+0x944>
 800f546:	9b00      	ldr	r3, [sp, #0]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	f47f aec0 	bne.w	800f2ce <_dtoa_r+0x68e>
 800f54e:	4621      	mov	r1, r4
 800f550:	2205      	movs	r2, #5
 800f552:	4658      	mov	r0, fp
 800f554:	f000 fa9a 	bl	800fa8c <__multadd>
 800f558:	4601      	mov	r1, r0
 800f55a:	4604      	mov	r4, r0
 800f55c:	4648      	mov	r0, r9
 800f55e:	f000 fcf7 	bl	800ff50 <__mcmp>
 800f562:	2800      	cmp	r0, #0
 800f564:	f77f aeb3 	ble.w	800f2ce <_dtoa_r+0x68e>
 800f568:	4656      	mov	r6, sl
 800f56a:	2331      	movs	r3, #49	@ 0x31
 800f56c:	f806 3b01 	strb.w	r3, [r6], #1
 800f570:	9b04      	ldr	r3, [sp, #16]
 800f572:	3301      	adds	r3, #1
 800f574:	9304      	str	r3, [sp, #16]
 800f576:	e6ae      	b.n	800f2d6 <_dtoa_r+0x696>
 800f578:	9c07      	ldr	r4, [sp, #28]
 800f57a:	9704      	str	r7, [sp, #16]
 800f57c:	4625      	mov	r5, r4
 800f57e:	e7f3      	b.n	800f568 <_dtoa_r+0x928>
 800f580:	9b07      	ldr	r3, [sp, #28]
 800f582:	9300      	str	r3, [sp, #0]
 800f584:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f586:	2b00      	cmp	r3, #0
 800f588:	f000 8104 	beq.w	800f794 <_dtoa_r+0xb54>
 800f58c:	2e00      	cmp	r6, #0
 800f58e:	dd05      	ble.n	800f59c <_dtoa_r+0x95c>
 800f590:	4629      	mov	r1, r5
 800f592:	4632      	mov	r2, r6
 800f594:	4658      	mov	r0, fp
 800f596:	f000 fc6f 	bl	800fe78 <__lshift>
 800f59a:	4605      	mov	r5, r0
 800f59c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d05a      	beq.n	800f658 <_dtoa_r+0xa18>
 800f5a2:	6869      	ldr	r1, [r5, #4]
 800f5a4:	4658      	mov	r0, fp
 800f5a6:	f000 fa0f 	bl	800f9c8 <_Balloc>
 800f5aa:	4606      	mov	r6, r0
 800f5ac:	b928      	cbnz	r0, 800f5ba <_dtoa_r+0x97a>
 800f5ae:	4b84      	ldr	r3, [pc, #528]	@ (800f7c0 <_dtoa_r+0xb80>)
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f5b6:	f7ff bb5a 	b.w	800ec6e <_dtoa_r+0x2e>
 800f5ba:	692a      	ldr	r2, [r5, #16]
 800f5bc:	3202      	adds	r2, #2
 800f5be:	0092      	lsls	r2, r2, #2
 800f5c0:	f105 010c 	add.w	r1, r5, #12
 800f5c4:	300c      	adds	r0, #12
 800f5c6:	f7ff fa9c 	bl	800eb02 <memcpy>
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	4631      	mov	r1, r6
 800f5ce:	4658      	mov	r0, fp
 800f5d0:	f000 fc52 	bl	800fe78 <__lshift>
 800f5d4:	f10a 0301 	add.w	r3, sl, #1
 800f5d8:	9307      	str	r3, [sp, #28]
 800f5da:	9b00      	ldr	r3, [sp, #0]
 800f5dc:	4453      	add	r3, sl
 800f5de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f5e0:	9b02      	ldr	r3, [sp, #8]
 800f5e2:	f003 0301 	and.w	r3, r3, #1
 800f5e6:	462f      	mov	r7, r5
 800f5e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5ea:	4605      	mov	r5, r0
 800f5ec:	9b07      	ldr	r3, [sp, #28]
 800f5ee:	4621      	mov	r1, r4
 800f5f0:	3b01      	subs	r3, #1
 800f5f2:	4648      	mov	r0, r9
 800f5f4:	9300      	str	r3, [sp, #0]
 800f5f6:	f7ff fa99 	bl	800eb2c <quorem>
 800f5fa:	4639      	mov	r1, r7
 800f5fc:	9002      	str	r0, [sp, #8]
 800f5fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f602:	4648      	mov	r0, r9
 800f604:	f000 fca4 	bl	800ff50 <__mcmp>
 800f608:	462a      	mov	r2, r5
 800f60a:	9008      	str	r0, [sp, #32]
 800f60c:	4621      	mov	r1, r4
 800f60e:	4658      	mov	r0, fp
 800f610:	f000 fcba 	bl	800ff88 <__mdiff>
 800f614:	68c2      	ldr	r2, [r0, #12]
 800f616:	4606      	mov	r6, r0
 800f618:	bb02      	cbnz	r2, 800f65c <_dtoa_r+0xa1c>
 800f61a:	4601      	mov	r1, r0
 800f61c:	4648      	mov	r0, r9
 800f61e:	f000 fc97 	bl	800ff50 <__mcmp>
 800f622:	4602      	mov	r2, r0
 800f624:	4631      	mov	r1, r6
 800f626:	4658      	mov	r0, fp
 800f628:	920e      	str	r2, [sp, #56]	@ 0x38
 800f62a:	f000 fa0d 	bl	800fa48 <_Bfree>
 800f62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f630:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f632:	9e07      	ldr	r6, [sp, #28]
 800f634:	ea43 0102 	orr.w	r1, r3, r2
 800f638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f63a:	4319      	orrs	r1, r3
 800f63c:	d110      	bne.n	800f660 <_dtoa_r+0xa20>
 800f63e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f642:	d029      	beq.n	800f698 <_dtoa_r+0xa58>
 800f644:	9b08      	ldr	r3, [sp, #32]
 800f646:	2b00      	cmp	r3, #0
 800f648:	dd02      	ble.n	800f650 <_dtoa_r+0xa10>
 800f64a:	9b02      	ldr	r3, [sp, #8]
 800f64c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f650:	9b00      	ldr	r3, [sp, #0]
 800f652:	f883 8000 	strb.w	r8, [r3]
 800f656:	e63f      	b.n	800f2d8 <_dtoa_r+0x698>
 800f658:	4628      	mov	r0, r5
 800f65a:	e7bb      	b.n	800f5d4 <_dtoa_r+0x994>
 800f65c:	2201      	movs	r2, #1
 800f65e:	e7e1      	b.n	800f624 <_dtoa_r+0x9e4>
 800f660:	9b08      	ldr	r3, [sp, #32]
 800f662:	2b00      	cmp	r3, #0
 800f664:	db04      	blt.n	800f670 <_dtoa_r+0xa30>
 800f666:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f668:	430b      	orrs	r3, r1
 800f66a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f66c:	430b      	orrs	r3, r1
 800f66e:	d120      	bne.n	800f6b2 <_dtoa_r+0xa72>
 800f670:	2a00      	cmp	r2, #0
 800f672:	dded      	ble.n	800f650 <_dtoa_r+0xa10>
 800f674:	4649      	mov	r1, r9
 800f676:	2201      	movs	r2, #1
 800f678:	4658      	mov	r0, fp
 800f67a:	f000 fbfd 	bl	800fe78 <__lshift>
 800f67e:	4621      	mov	r1, r4
 800f680:	4681      	mov	r9, r0
 800f682:	f000 fc65 	bl	800ff50 <__mcmp>
 800f686:	2800      	cmp	r0, #0
 800f688:	dc03      	bgt.n	800f692 <_dtoa_r+0xa52>
 800f68a:	d1e1      	bne.n	800f650 <_dtoa_r+0xa10>
 800f68c:	f018 0f01 	tst.w	r8, #1
 800f690:	d0de      	beq.n	800f650 <_dtoa_r+0xa10>
 800f692:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f696:	d1d8      	bne.n	800f64a <_dtoa_r+0xa0a>
 800f698:	9a00      	ldr	r2, [sp, #0]
 800f69a:	2339      	movs	r3, #57	@ 0x39
 800f69c:	7013      	strb	r3, [r2, #0]
 800f69e:	4633      	mov	r3, r6
 800f6a0:	461e      	mov	r6, r3
 800f6a2:	3b01      	subs	r3, #1
 800f6a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f6a8:	2a39      	cmp	r2, #57	@ 0x39
 800f6aa:	d052      	beq.n	800f752 <_dtoa_r+0xb12>
 800f6ac:	3201      	adds	r2, #1
 800f6ae:	701a      	strb	r2, [r3, #0]
 800f6b0:	e612      	b.n	800f2d8 <_dtoa_r+0x698>
 800f6b2:	2a00      	cmp	r2, #0
 800f6b4:	dd07      	ble.n	800f6c6 <_dtoa_r+0xa86>
 800f6b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f6ba:	d0ed      	beq.n	800f698 <_dtoa_r+0xa58>
 800f6bc:	9a00      	ldr	r2, [sp, #0]
 800f6be:	f108 0301 	add.w	r3, r8, #1
 800f6c2:	7013      	strb	r3, [r2, #0]
 800f6c4:	e608      	b.n	800f2d8 <_dtoa_r+0x698>
 800f6c6:	9b07      	ldr	r3, [sp, #28]
 800f6c8:	9a07      	ldr	r2, [sp, #28]
 800f6ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f6ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d028      	beq.n	800f726 <_dtoa_r+0xae6>
 800f6d4:	4649      	mov	r1, r9
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	220a      	movs	r2, #10
 800f6da:	4658      	mov	r0, fp
 800f6dc:	f000 f9d6 	bl	800fa8c <__multadd>
 800f6e0:	42af      	cmp	r7, r5
 800f6e2:	4681      	mov	r9, r0
 800f6e4:	f04f 0300 	mov.w	r3, #0
 800f6e8:	f04f 020a 	mov.w	r2, #10
 800f6ec:	4639      	mov	r1, r7
 800f6ee:	4658      	mov	r0, fp
 800f6f0:	d107      	bne.n	800f702 <_dtoa_r+0xac2>
 800f6f2:	f000 f9cb 	bl	800fa8c <__multadd>
 800f6f6:	4607      	mov	r7, r0
 800f6f8:	4605      	mov	r5, r0
 800f6fa:	9b07      	ldr	r3, [sp, #28]
 800f6fc:	3301      	adds	r3, #1
 800f6fe:	9307      	str	r3, [sp, #28]
 800f700:	e774      	b.n	800f5ec <_dtoa_r+0x9ac>
 800f702:	f000 f9c3 	bl	800fa8c <__multadd>
 800f706:	4629      	mov	r1, r5
 800f708:	4607      	mov	r7, r0
 800f70a:	2300      	movs	r3, #0
 800f70c:	220a      	movs	r2, #10
 800f70e:	4658      	mov	r0, fp
 800f710:	f000 f9bc 	bl	800fa8c <__multadd>
 800f714:	4605      	mov	r5, r0
 800f716:	e7f0      	b.n	800f6fa <_dtoa_r+0xaba>
 800f718:	9b00      	ldr	r3, [sp, #0]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	bfcc      	ite	gt
 800f71e:	461e      	movgt	r6, r3
 800f720:	2601      	movle	r6, #1
 800f722:	4456      	add	r6, sl
 800f724:	2700      	movs	r7, #0
 800f726:	4649      	mov	r1, r9
 800f728:	2201      	movs	r2, #1
 800f72a:	4658      	mov	r0, fp
 800f72c:	f000 fba4 	bl	800fe78 <__lshift>
 800f730:	4621      	mov	r1, r4
 800f732:	4681      	mov	r9, r0
 800f734:	f000 fc0c 	bl	800ff50 <__mcmp>
 800f738:	2800      	cmp	r0, #0
 800f73a:	dcb0      	bgt.n	800f69e <_dtoa_r+0xa5e>
 800f73c:	d102      	bne.n	800f744 <_dtoa_r+0xb04>
 800f73e:	f018 0f01 	tst.w	r8, #1
 800f742:	d1ac      	bne.n	800f69e <_dtoa_r+0xa5e>
 800f744:	4633      	mov	r3, r6
 800f746:	461e      	mov	r6, r3
 800f748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f74c:	2a30      	cmp	r2, #48	@ 0x30
 800f74e:	d0fa      	beq.n	800f746 <_dtoa_r+0xb06>
 800f750:	e5c2      	b.n	800f2d8 <_dtoa_r+0x698>
 800f752:	459a      	cmp	sl, r3
 800f754:	d1a4      	bne.n	800f6a0 <_dtoa_r+0xa60>
 800f756:	9b04      	ldr	r3, [sp, #16]
 800f758:	3301      	adds	r3, #1
 800f75a:	9304      	str	r3, [sp, #16]
 800f75c:	2331      	movs	r3, #49	@ 0x31
 800f75e:	f88a 3000 	strb.w	r3, [sl]
 800f762:	e5b9      	b.n	800f2d8 <_dtoa_r+0x698>
 800f764:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f766:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f7c4 <_dtoa_r+0xb84>
 800f76a:	b11b      	cbz	r3, 800f774 <_dtoa_r+0xb34>
 800f76c:	f10a 0308 	add.w	r3, sl, #8
 800f770:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f772:	6013      	str	r3, [r2, #0]
 800f774:	4650      	mov	r0, sl
 800f776:	b019      	add	sp, #100	@ 0x64
 800f778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f77c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f77e:	2b01      	cmp	r3, #1
 800f780:	f77f ae37 	ble.w	800f3f2 <_dtoa_r+0x7b2>
 800f784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f786:	930a      	str	r3, [sp, #40]	@ 0x28
 800f788:	2001      	movs	r0, #1
 800f78a:	e655      	b.n	800f438 <_dtoa_r+0x7f8>
 800f78c:	9b00      	ldr	r3, [sp, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	f77f aed6 	ble.w	800f540 <_dtoa_r+0x900>
 800f794:	4656      	mov	r6, sl
 800f796:	4621      	mov	r1, r4
 800f798:	4648      	mov	r0, r9
 800f79a:	f7ff f9c7 	bl	800eb2c <quorem>
 800f79e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f7a2:	f806 8b01 	strb.w	r8, [r6], #1
 800f7a6:	9b00      	ldr	r3, [sp, #0]
 800f7a8:	eba6 020a 	sub.w	r2, r6, sl
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	ddb3      	ble.n	800f718 <_dtoa_r+0xad8>
 800f7b0:	4649      	mov	r1, r9
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	220a      	movs	r2, #10
 800f7b6:	4658      	mov	r0, fp
 800f7b8:	f000 f968 	bl	800fa8c <__multadd>
 800f7bc:	4681      	mov	r9, r0
 800f7be:	e7ea      	b.n	800f796 <_dtoa_r+0xb56>
 800f7c0:	08012568 	.word	0x08012568
 800f7c4:	080124ec 	.word	0x080124ec

0800f7c8 <_free_r>:
 800f7c8:	b538      	push	{r3, r4, r5, lr}
 800f7ca:	4605      	mov	r5, r0
 800f7cc:	2900      	cmp	r1, #0
 800f7ce:	d041      	beq.n	800f854 <_free_r+0x8c>
 800f7d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7d4:	1f0c      	subs	r4, r1, #4
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	bfb8      	it	lt
 800f7da:	18e4      	addlt	r4, r4, r3
 800f7dc:	f000 f8e8 	bl	800f9b0 <__malloc_lock>
 800f7e0:	4a1d      	ldr	r2, [pc, #116]	@ (800f858 <_free_r+0x90>)
 800f7e2:	6813      	ldr	r3, [r2, #0]
 800f7e4:	b933      	cbnz	r3, 800f7f4 <_free_r+0x2c>
 800f7e6:	6063      	str	r3, [r4, #4]
 800f7e8:	6014      	str	r4, [r2, #0]
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7f0:	f000 b8e4 	b.w	800f9bc <__malloc_unlock>
 800f7f4:	42a3      	cmp	r3, r4
 800f7f6:	d908      	bls.n	800f80a <_free_r+0x42>
 800f7f8:	6820      	ldr	r0, [r4, #0]
 800f7fa:	1821      	adds	r1, r4, r0
 800f7fc:	428b      	cmp	r3, r1
 800f7fe:	bf01      	itttt	eq
 800f800:	6819      	ldreq	r1, [r3, #0]
 800f802:	685b      	ldreq	r3, [r3, #4]
 800f804:	1809      	addeq	r1, r1, r0
 800f806:	6021      	streq	r1, [r4, #0]
 800f808:	e7ed      	b.n	800f7e6 <_free_r+0x1e>
 800f80a:	461a      	mov	r2, r3
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	b10b      	cbz	r3, 800f814 <_free_r+0x4c>
 800f810:	42a3      	cmp	r3, r4
 800f812:	d9fa      	bls.n	800f80a <_free_r+0x42>
 800f814:	6811      	ldr	r1, [r2, #0]
 800f816:	1850      	adds	r0, r2, r1
 800f818:	42a0      	cmp	r0, r4
 800f81a:	d10b      	bne.n	800f834 <_free_r+0x6c>
 800f81c:	6820      	ldr	r0, [r4, #0]
 800f81e:	4401      	add	r1, r0
 800f820:	1850      	adds	r0, r2, r1
 800f822:	4283      	cmp	r3, r0
 800f824:	6011      	str	r1, [r2, #0]
 800f826:	d1e0      	bne.n	800f7ea <_free_r+0x22>
 800f828:	6818      	ldr	r0, [r3, #0]
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	6053      	str	r3, [r2, #4]
 800f82e:	4408      	add	r0, r1
 800f830:	6010      	str	r0, [r2, #0]
 800f832:	e7da      	b.n	800f7ea <_free_r+0x22>
 800f834:	d902      	bls.n	800f83c <_free_r+0x74>
 800f836:	230c      	movs	r3, #12
 800f838:	602b      	str	r3, [r5, #0]
 800f83a:	e7d6      	b.n	800f7ea <_free_r+0x22>
 800f83c:	6820      	ldr	r0, [r4, #0]
 800f83e:	1821      	adds	r1, r4, r0
 800f840:	428b      	cmp	r3, r1
 800f842:	bf04      	itt	eq
 800f844:	6819      	ldreq	r1, [r3, #0]
 800f846:	685b      	ldreq	r3, [r3, #4]
 800f848:	6063      	str	r3, [r4, #4]
 800f84a:	bf04      	itt	eq
 800f84c:	1809      	addeq	r1, r1, r0
 800f84e:	6021      	streq	r1, [r4, #0]
 800f850:	6054      	str	r4, [r2, #4]
 800f852:	e7ca      	b.n	800f7ea <_free_r+0x22>
 800f854:	bd38      	pop	{r3, r4, r5, pc}
 800f856:	bf00      	nop
 800f858:	20000a88 	.word	0x20000a88

0800f85c <malloc>:
 800f85c:	4b02      	ldr	r3, [pc, #8]	@ (800f868 <malloc+0xc>)
 800f85e:	4601      	mov	r1, r0
 800f860:	6818      	ldr	r0, [r3, #0]
 800f862:	f000 b825 	b.w	800f8b0 <_malloc_r>
 800f866:	bf00      	nop
 800f868:	200000b4 	.word	0x200000b4

0800f86c <sbrk_aligned>:
 800f86c:	b570      	push	{r4, r5, r6, lr}
 800f86e:	4e0f      	ldr	r6, [pc, #60]	@ (800f8ac <sbrk_aligned+0x40>)
 800f870:	460c      	mov	r4, r1
 800f872:	6831      	ldr	r1, [r6, #0]
 800f874:	4605      	mov	r5, r0
 800f876:	b911      	cbnz	r1, 800f87e <sbrk_aligned+0x12>
 800f878:	f001 fe0c 	bl	8011494 <_sbrk_r>
 800f87c:	6030      	str	r0, [r6, #0]
 800f87e:	4621      	mov	r1, r4
 800f880:	4628      	mov	r0, r5
 800f882:	f001 fe07 	bl	8011494 <_sbrk_r>
 800f886:	1c43      	adds	r3, r0, #1
 800f888:	d103      	bne.n	800f892 <sbrk_aligned+0x26>
 800f88a:	f04f 34ff 	mov.w	r4, #4294967295
 800f88e:	4620      	mov	r0, r4
 800f890:	bd70      	pop	{r4, r5, r6, pc}
 800f892:	1cc4      	adds	r4, r0, #3
 800f894:	f024 0403 	bic.w	r4, r4, #3
 800f898:	42a0      	cmp	r0, r4
 800f89a:	d0f8      	beq.n	800f88e <sbrk_aligned+0x22>
 800f89c:	1a21      	subs	r1, r4, r0
 800f89e:	4628      	mov	r0, r5
 800f8a0:	f001 fdf8 	bl	8011494 <_sbrk_r>
 800f8a4:	3001      	adds	r0, #1
 800f8a6:	d1f2      	bne.n	800f88e <sbrk_aligned+0x22>
 800f8a8:	e7ef      	b.n	800f88a <sbrk_aligned+0x1e>
 800f8aa:	bf00      	nop
 800f8ac:	20000a84 	.word	0x20000a84

0800f8b0 <_malloc_r>:
 800f8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8b4:	1ccd      	adds	r5, r1, #3
 800f8b6:	f025 0503 	bic.w	r5, r5, #3
 800f8ba:	3508      	adds	r5, #8
 800f8bc:	2d0c      	cmp	r5, #12
 800f8be:	bf38      	it	cc
 800f8c0:	250c      	movcc	r5, #12
 800f8c2:	2d00      	cmp	r5, #0
 800f8c4:	4606      	mov	r6, r0
 800f8c6:	db01      	blt.n	800f8cc <_malloc_r+0x1c>
 800f8c8:	42a9      	cmp	r1, r5
 800f8ca:	d904      	bls.n	800f8d6 <_malloc_r+0x26>
 800f8cc:	230c      	movs	r3, #12
 800f8ce:	6033      	str	r3, [r6, #0]
 800f8d0:	2000      	movs	r0, #0
 800f8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f9ac <_malloc_r+0xfc>
 800f8da:	f000 f869 	bl	800f9b0 <__malloc_lock>
 800f8de:	f8d8 3000 	ldr.w	r3, [r8]
 800f8e2:	461c      	mov	r4, r3
 800f8e4:	bb44      	cbnz	r4, 800f938 <_malloc_r+0x88>
 800f8e6:	4629      	mov	r1, r5
 800f8e8:	4630      	mov	r0, r6
 800f8ea:	f7ff ffbf 	bl	800f86c <sbrk_aligned>
 800f8ee:	1c43      	adds	r3, r0, #1
 800f8f0:	4604      	mov	r4, r0
 800f8f2:	d158      	bne.n	800f9a6 <_malloc_r+0xf6>
 800f8f4:	f8d8 4000 	ldr.w	r4, [r8]
 800f8f8:	4627      	mov	r7, r4
 800f8fa:	2f00      	cmp	r7, #0
 800f8fc:	d143      	bne.n	800f986 <_malloc_r+0xd6>
 800f8fe:	2c00      	cmp	r4, #0
 800f900:	d04b      	beq.n	800f99a <_malloc_r+0xea>
 800f902:	6823      	ldr	r3, [r4, #0]
 800f904:	4639      	mov	r1, r7
 800f906:	4630      	mov	r0, r6
 800f908:	eb04 0903 	add.w	r9, r4, r3
 800f90c:	f001 fdc2 	bl	8011494 <_sbrk_r>
 800f910:	4581      	cmp	r9, r0
 800f912:	d142      	bne.n	800f99a <_malloc_r+0xea>
 800f914:	6821      	ldr	r1, [r4, #0]
 800f916:	1a6d      	subs	r5, r5, r1
 800f918:	4629      	mov	r1, r5
 800f91a:	4630      	mov	r0, r6
 800f91c:	f7ff ffa6 	bl	800f86c <sbrk_aligned>
 800f920:	3001      	adds	r0, #1
 800f922:	d03a      	beq.n	800f99a <_malloc_r+0xea>
 800f924:	6823      	ldr	r3, [r4, #0]
 800f926:	442b      	add	r3, r5
 800f928:	6023      	str	r3, [r4, #0]
 800f92a:	f8d8 3000 	ldr.w	r3, [r8]
 800f92e:	685a      	ldr	r2, [r3, #4]
 800f930:	bb62      	cbnz	r2, 800f98c <_malloc_r+0xdc>
 800f932:	f8c8 7000 	str.w	r7, [r8]
 800f936:	e00f      	b.n	800f958 <_malloc_r+0xa8>
 800f938:	6822      	ldr	r2, [r4, #0]
 800f93a:	1b52      	subs	r2, r2, r5
 800f93c:	d420      	bmi.n	800f980 <_malloc_r+0xd0>
 800f93e:	2a0b      	cmp	r2, #11
 800f940:	d917      	bls.n	800f972 <_malloc_r+0xc2>
 800f942:	1961      	adds	r1, r4, r5
 800f944:	42a3      	cmp	r3, r4
 800f946:	6025      	str	r5, [r4, #0]
 800f948:	bf18      	it	ne
 800f94a:	6059      	strne	r1, [r3, #4]
 800f94c:	6863      	ldr	r3, [r4, #4]
 800f94e:	bf08      	it	eq
 800f950:	f8c8 1000 	streq.w	r1, [r8]
 800f954:	5162      	str	r2, [r4, r5]
 800f956:	604b      	str	r3, [r1, #4]
 800f958:	4630      	mov	r0, r6
 800f95a:	f000 f82f 	bl	800f9bc <__malloc_unlock>
 800f95e:	f104 000b 	add.w	r0, r4, #11
 800f962:	1d23      	adds	r3, r4, #4
 800f964:	f020 0007 	bic.w	r0, r0, #7
 800f968:	1ac2      	subs	r2, r0, r3
 800f96a:	bf1c      	itt	ne
 800f96c:	1a1b      	subne	r3, r3, r0
 800f96e:	50a3      	strne	r3, [r4, r2]
 800f970:	e7af      	b.n	800f8d2 <_malloc_r+0x22>
 800f972:	6862      	ldr	r2, [r4, #4]
 800f974:	42a3      	cmp	r3, r4
 800f976:	bf0c      	ite	eq
 800f978:	f8c8 2000 	streq.w	r2, [r8]
 800f97c:	605a      	strne	r2, [r3, #4]
 800f97e:	e7eb      	b.n	800f958 <_malloc_r+0xa8>
 800f980:	4623      	mov	r3, r4
 800f982:	6864      	ldr	r4, [r4, #4]
 800f984:	e7ae      	b.n	800f8e4 <_malloc_r+0x34>
 800f986:	463c      	mov	r4, r7
 800f988:	687f      	ldr	r7, [r7, #4]
 800f98a:	e7b6      	b.n	800f8fa <_malloc_r+0x4a>
 800f98c:	461a      	mov	r2, r3
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	42a3      	cmp	r3, r4
 800f992:	d1fb      	bne.n	800f98c <_malloc_r+0xdc>
 800f994:	2300      	movs	r3, #0
 800f996:	6053      	str	r3, [r2, #4]
 800f998:	e7de      	b.n	800f958 <_malloc_r+0xa8>
 800f99a:	230c      	movs	r3, #12
 800f99c:	6033      	str	r3, [r6, #0]
 800f99e:	4630      	mov	r0, r6
 800f9a0:	f000 f80c 	bl	800f9bc <__malloc_unlock>
 800f9a4:	e794      	b.n	800f8d0 <_malloc_r+0x20>
 800f9a6:	6005      	str	r5, [r0, #0]
 800f9a8:	e7d6      	b.n	800f958 <_malloc_r+0xa8>
 800f9aa:	bf00      	nop
 800f9ac:	20000a88 	.word	0x20000a88

0800f9b0 <__malloc_lock>:
 800f9b0:	4801      	ldr	r0, [pc, #4]	@ (800f9b8 <__malloc_lock+0x8>)
 800f9b2:	f7ff b8a4 	b.w	800eafe <__retarget_lock_acquire_recursive>
 800f9b6:	bf00      	nop
 800f9b8:	20000a80 	.word	0x20000a80

0800f9bc <__malloc_unlock>:
 800f9bc:	4801      	ldr	r0, [pc, #4]	@ (800f9c4 <__malloc_unlock+0x8>)
 800f9be:	f7ff b89f 	b.w	800eb00 <__retarget_lock_release_recursive>
 800f9c2:	bf00      	nop
 800f9c4:	20000a80 	.word	0x20000a80

0800f9c8 <_Balloc>:
 800f9c8:	b570      	push	{r4, r5, r6, lr}
 800f9ca:	69c6      	ldr	r6, [r0, #28]
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	460d      	mov	r5, r1
 800f9d0:	b976      	cbnz	r6, 800f9f0 <_Balloc+0x28>
 800f9d2:	2010      	movs	r0, #16
 800f9d4:	f7ff ff42 	bl	800f85c <malloc>
 800f9d8:	4602      	mov	r2, r0
 800f9da:	61e0      	str	r0, [r4, #28]
 800f9dc:	b920      	cbnz	r0, 800f9e8 <_Balloc+0x20>
 800f9de:	4b18      	ldr	r3, [pc, #96]	@ (800fa40 <_Balloc+0x78>)
 800f9e0:	4818      	ldr	r0, [pc, #96]	@ (800fa44 <_Balloc+0x7c>)
 800f9e2:	216b      	movs	r1, #107	@ 0x6b
 800f9e4:	f001 fd70 	bl	80114c8 <__assert_func>
 800f9e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f9ec:	6006      	str	r6, [r0, #0]
 800f9ee:	60c6      	str	r6, [r0, #12]
 800f9f0:	69e6      	ldr	r6, [r4, #28]
 800f9f2:	68f3      	ldr	r3, [r6, #12]
 800f9f4:	b183      	cbz	r3, 800fa18 <_Balloc+0x50>
 800f9f6:	69e3      	ldr	r3, [r4, #28]
 800f9f8:	68db      	ldr	r3, [r3, #12]
 800f9fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f9fe:	b9b8      	cbnz	r0, 800fa30 <_Balloc+0x68>
 800fa00:	2101      	movs	r1, #1
 800fa02:	fa01 f605 	lsl.w	r6, r1, r5
 800fa06:	1d72      	adds	r2, r6, #5
 800fa08:	0092      	lsls	r2, r2, #2
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	f001 fd7a 	bl	8011504 <_calloc_r>
 800fa10:	b160      	cbz	r0, 800fa2c <_Balloc+0x64>
 800fa12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fa16:	e00e      	b.n	800fa36 <_Balloc+0x6e>
 800fa18:	2221      	movs	r2, #33	@ 0x21
 800fa1a:	2104      	movs	r1, #4
 800fa1c:	4620      	mov	r0, r4
 800fa1e:	f001 fd71 	bl	8011504 <_calloc_r>
 800fa22:	69e3      	ldr	r3, [r4, #28]
 800fa24:	60f0      	str	r0, [r6, #12]
 800fa26:	68db      	ldr	r3, [r3, #12]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d1e4      	bne.n	800f9f6 <_Balloc+0x2e>
 800fa2c:	2000      	movs	r0, #0
 800fa2e:	bd70      	pop	{r4, r5, r6, pc}
 800fa30:	6802      	ldr	r2, [r0, #0]
 800fa32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fa36:	2300      	movs	r3, #0
 800fa38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fa3c:	e7f7      	b.n	800fa2e <_Balloc+0x66>
 800fa3e:	bf00      	nop
 800fa40:	080124f9 	.word	0x080124f9
 800fa44:	08012579 	.word	0x08012579

0800fa48 <_Bfree>:
 800fa48:	b570      	push	{r4, r5, r6, lr}
 800fa4a:	69c6      	ldr	r6, [r0, #28]
 800fa4c:	4605      	mov	r5, r0
 800fa4e:	460c      	mov	r4, r1
 800fa50:	b976      	cbnz	r6, 800fa70 <_Bfree+0x28>
 800fa52:	2010      	movs	r0, #16
 800fa54:	f7ff ff02 	bl	800f85c <malloc>
 800fa58:	4602      	mov	r2, r0
 800fa5a:	61e8      	str	r0, [r5, #28]
 800fa5c:	b920      	cbnz	r0, 800fa68 <_Bfree+0x20>
 800fa5e:	4b09      	ldr	r3, [pc, #36]	@ (800fa84 <_Bfree+0x3c>)
 800fa60:	4809      	ldr	r0, [pc, #36]	@ (800fa88 <_Bfree+0x40>)
 800fa62:	218f      	movs	r1, #143	@ 0x8f
 800fa64:	f001 fd30 	bl	80114c8 <__assert_func>
 800fa68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa6c:	6006      	str	r6, [r0, #0]
 800fa6e:	60c6      	str	r6, [r0, #12]
 800fa70:	b13c      	cbz	r4, 800fa82 <_Bfree+0x3a>
 800fa72:	69eb      	ldr	r3, [r5, #28]
 800fa74:	6862      	ldr	r2, [r4, #4]
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fa7c:	6021      	str	r1, [r4, #0]
 800fa7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fa82:	bd70      	pop	{r4, r5, r6, pc}
 800fa84:	080124f9 	.word	0x080124f9
 800fa88:	08012579 	.word	0x08012579

0800fa8c <__multadd>:
 800fa8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa90:	690d      	ldr	r5, [r1, #16]
 800fa92:	4607      	mov	r7, r0
 800fa94:	460c      	mov	r4, r1
 800fa96:	461e      	mov	r6, r3
 800fa98:	f101 0c14 	add.w	ip, r1, #20
 800fa9c:	2000      	movs	r0, #0
 800fa9e:	f8dc 3000 	ldr.w	r3, [ip]
 800faa2:	b299      	uxth	r1, r3
 800faa4:	fb02 6101 	mla	r1, r2, r1, r6
 800faa8:	0c1e      	lsrs	r6, r3, #16
 800faaa:	0c0b      	lsrs	r3, r1, #16
 800faac:	fb02 3306 	mla	r3, r2, r6, r3
 800fab0:	b289      	uxth	r1, r1
 800fab2:	3001      	adds	r0, #1
 800fab4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fab8:	4285      	cmp	r5, r0
 800faba:	f84c 1b04 	str.w	r1, [ip], #4
 800fabe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fac2:	dcec      	bgt.n	800fa9e <__multadd+0x12>
 800fac4:	b30e      	cbz	r6, 800fb0a <__multadd+0x7e>
 800fac6:	68a3      	ldr	r3, [r4, #8]
 800fac8:	42ab      	cmp	r3, r5
 800faca:	dc19      	bgt.n	800fb00 <__multadd+0x74>
 800facc:	6861      	ldr	r1, [r4, #4]
 800face:	4638      	mov	r0, r7
 800fad0:	3101      	adds	r1, #1
 800fad2:	f7ff ff79 	bl	800f9c8 <_Balloc>
 800fad6:	4680      	mov	r8, r0
 800fad8:	b928      	cbnz	r0, 800fae6 <__multadd+0x5a>
 800fada:	4602      	mov	r2, r0
 800fadc:	4b0c      	ldr	r3, [pc, #48]	@ (800fb10 <__multadd+0x84>)
 800fade:	480d      	ldr	r0, [pc, #52]	@ (800fb14 <__multadd+0x88>)
 800fae0:	21ba      	movs	r1, #186	@ 0xba
 800fae2:	f001 fcf1 	bl	80114c8 <__assert_func>
 800fae6:	6922      	ldr	r2, [r4, #16]
 800fae8:	3202      	adds	r2, #2
 800faea:	f104 010c 	add.w	r1, r4, #12
 800faee:	0092      	lsls	r2, r2, #2
 800faf0:	300c      	adds	r0, #12
 800faf2:	f7ff f806 	bl	800eb02 <memcpy>
 800faf6:	4621      	mov	r1, r4
 800faf8:	4638      	mov	r0, r7
 800fafa:	f7ff ffa5 	bl	800fa48 <_Bfree>
 800fafe:	4644      	mov	r4, r8
 800fb00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fb04:	3501      	adds	r5, #1
 800fb06:	615e      	str	r6, [r3, #20]
 800fb08:	6125      	str	r5, [r4, #16]
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb10:	08012568 	.word	0x08012568
 800fb14:	08012579 	.word	0x08012579

0800fb18 <__s2b>:
 800fb18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb1c:	460c      	mov	r4, r1
 800fb1e:	4615      	mov	r5, r2
 800fb20:	461f      	mov	r7, r3
 800fb22:	2209      	movs	r2, #9
 800fb24:	3308      	adds	r3, #8
 800fb26:	4606      	mov	r6, r0
 800fb28:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb2c:	2100      	movs	r1, #0
 800fb2e:	2201      	movs	r2, #1
 800fb30:	429a      	cmp	r2, r3
 800fb32:	db09      	blt.n	800fb48 <__s2b+0x30>
 800fb34:	4630      	mov	r0, r6
 800fb36:	f7ff ff47 	bl	800f9c8 <_Balloc>
 800fb3a:	b940      	cbnz	r0, 800fb4e <__s2b+0x36>
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	4b19      	ldr	r3, [pc, #100]	@ (800fba4 <__s2b+0x8c>)
 800fb40:	4819      	ldr	r0, [pc, #100]	@ (800fba8 <__s2b+0x90>)
 800fb42:	21d3      	movs	r1, #211	@ 0xd3
 800fb44:	f001 fcc0 	bl	80114c8 <__assert_func>
 800fb48:	0052      	lsls	r2, r2, #1
 800fb4a:	3101      	adds	r1, #1
 800fb4c:	e7f0      	b.n	800fb30 <__s2b+0x18>
 800fb4e:	9b08      	ldr	r3, [sp, #32]
 800fb50:	6143      	str	r3, [r0, #20]
 800fb52:	2d09      	cmp	r5, #9
 800fb54:	f04f 0301 	mov.w	r3, #1
 800fb58:	6103      	str	r3, [r0, #16]
 800fb5a:	dd16      	ble.n	800fb8a <__s2b+0x72>
 800fb5c:	f104 0909 	add.w	r9, r4, #9
 800fb60:	46c8      	mov	r8, r9
 800fb62:	442c      	add	r4, r5
 800fb64:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fb68:	4601      	mov	r1, r0
 800fb6a:	3b30      	subs	r3, #48	@ 0x30
 800fb6c:	220a      	movs	r2, #10
 800fb6e:	4630      	mov	r0, r6
 800fb70:	f7ff ff8c 	bl	800fa8c <__multadd>
 800fb74:	45a0      	cmp	r8, r4
 800fb76:	d1f5      	bne.n	800fb64 <__s2b+0x4c>
 800fb78:	f1a5 0408 	sub.w	r4, r5, #8
 800fb7c:	444c      	add	r4, r9
 800fb7e:	1b2d      	subs	r5, r5, r4
 800fb80:	1963      	adds	r3, r4, r5
 800fb82:	42bb      	cmp	r3, r7
 800fb84:	db04      	blt.n	800fb90 <__s2b+0x78>
 800fb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb8a:	340a      	adds	r4, #10
 800fb8c:	2509      	movs	r5, #9
 800fb8e:	e7f6      	b.n	800fb7e <__s2b+0x66>
 800fb90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fb94:	4601      	mov	r1, r0
 800fb96:	3b30      	subs	r3, #48	@ 0x30
 800fb98:	220a      	movs	r2, #10
 800fb9a:	4630      	mov	r0, r6
 800fb9c:	f7ff ff76 	bl	800fa8c <__multadd>
 800fba0:	e7ee      	b.n	800fb80 <__s2b+0x68>
 800fba2:	bf00      	nop
 800fba4:	08012568 	.word	0x08012568
 800fba8:	08012579 	.word	0x08012579

0800fbac <__hi0bits>:
 800fbac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	bf36      	itet	cc
 800fbb4:	0403      	lslcc	r3, r0, #16
 800fbb6:	2000      	movcs	r0, #0
 800fbb8:	2010      	movcc	r0, #16
 800fbba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fbbe:	bf3c      	itt	cc
 800fbc0:	021b      	lslcc	r3, r3, #8
 800fbc2:	3008      	addcc	r0, #8
 800fbc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fbc8:	bf3c      	itt	cc
 800fbca:	011b      	lslcc	r3, r3, #4
 800fbcc:	3004      	addcc	r0, #4
 800fbce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fbd2:	bf3c      	itt	cc
 800fbd4:	009b      	lslcc	r3, r3, #2
 800fbd6:	3002      	addcc	r0, #2
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	db05      	blt.n	800fbe8 <__hi0bits+0x3c>
 800fbdc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fbe0:	f100 0001 	add.w	r0, r0, #1
 800fbe4:	bf08      	it	eq
 800fbe6:	2020      	moveq	r0, #32
 800fbe8:	4770      	bx	lr

0800fbea <__lo0bits>:
 800fbea:	6803      	ldr	r3, [r0, #0]
 800fbec:	4602      	mov	r2, r0
 800fbee:	f013 0007 	ands.w	r0, r3, #7
 800fbf2:	d00b      	beq.n	800fc0c <__lo0bits+0x22>
 800fbf4:	07d9      	lsls	r1, r3, #31
 800fbf6:	d421      	bmi.n	800fc3c <__lo0bits+0x52>
 800fbf8:	0798      	lsls	r0, r3, #30
 800fbfa:	bf49      	itett	mi
 800fbfc:	085b      	lsrmi	r3, r3, #1
 800fbfe:	089b      	lsrpl	r3, r3, #2
 800fc00:	2001      	movmi	r0, #1
 800fc02:	6013      	strmi	r3, [r2, #0]
 800fc04:	bf5c      	itt	pl
 800fc06:	6013      	strpl	r3, [r2, #0]
 800fc08:	2002      	movpl	r0, #2
 800fc0a:	4770      	bx	lr
 800fc0c:	b299      	uxth	r1, r3
 800fc0e:	b909      	cbnz	r1, 800fc14 <__lo0bits+0x2a>
 800fc10:	0c1b      	lsrs	r3, r3, #16
 800fc12:	2010      	movs	r0, #16
 800fc14:	b2d9      	uxtb	r1, r3
 800fc16:	b909      	cbnz	r1, 800fc1c <__lo0bits+0x32>
 800fc18:	3008      	adds	r0, #8
 800fc1a:	0a1b      	lsrs	r3, r3, #8
 800fc1c:	0719      	lsls	r1, r3, #28
 800fc1e:	bf04      	itt	eq
 800fc20:	091b      	lsreq	r3, r3, #4
 800fc22:	3004      	addeq	r0, #4
 800fc24:	0799      	lsls	r1, r3, #30
 800fc26:	bf04      	itt	eq
 800fc28:	089b      	lsreq	r3, r3, #2
 800fc2a:	3002      	addeq	r0, #2
 800fc2c:	07d9      	lsls	r1, r3, #31
 800fc2e:	d403      	bmi.n	800fc38 <__lo0bits+0x4e>
 800fc30:	085b      	lsrs	r3, r3, #1
 800fc32:	f100 0001 	add.w	r0, r0, #1
 800fc36:	d003      	beq.n	800fc40 <__lo0bits+0x56>
 800fc38:	6013      	str	r3, [r2, #0]
 800fc3a:	4770      	bx	lr
 800fc3c:	2000      	movs	r0, #0
 800fc3e:	4770      	bx	lr
 800fc40:	2020      	movs	r0, #32
 800fc42:	4770      	bx	lr

0800fc44 <__i2b>:
 800fc44:	b510      	push	{r4, lr}
 800fc46:	460c      	mov	r4, r1
 800fc48:	2101      	movs	r1, #1
 800fc4a:	f7ff febd 	bl	800f9c8 <_Balloc>
 800fc4e:	4602      	mov	r2, r0
 800fc50:	b928      	cbnz	r0, 800fc5e <__i2b+0x1a>
 800fc52:	4b05      	ldr	r3, [pc, #20]	@ (800fc68 <__i2b+0x24>)
 800fc54:	4805      	ldr	r0, [pc, #20]	@ (800fc6c <__i2b+0x28>)
 800fc56:	f240 1145 	movw	r1, #325	@ 0x145
 800fc5a:	f001 fc35 	bl	80114c8 <__assert_func>
 800fc5e:	2301      	movs	r3, #1
 800fc60:	6144      	str	r4, [r0, #20]
 800fc62:	6103      	str	r3, [r0, #16]
 800fc64:	bd10      	pop	{r4, pc}
 800fc66:	bf00      	nop
 800fc68:	08012568 	.word	0x08012568
 800fc6c:	08012579 	.word	0x08012579

0800fc70 <__multiply>:
 800fc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc74:	4614      	mov	r4, r2
 800fc76:	690a      	ldr	r2, [r1, #16]
 800fc78:	6923      	ldr	r3, [r4, #16]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	bfa8      	it	ge
 800fc7e:	4623      	movge	r3, r4
 800fc80:	460f      	mov	r7, r1
 800fc82:	bfa4      	itt	ge
 800fc84:	460c      	movge	r4, r1
 800fc86:	461f      	movge	r7, r3
 800fc88:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fc8c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fc90:	68a3      	ldr	r3, [r4, #8]
 800fc92:	6861      	ldr	r1, [r4, #4]
 800fc94:	eb0a 0609 	add.w	r6, sl, r9
 800fc98:	42b3      	cmp	r3, r6
 800fc9a:	b085      	sub	sp, #20
 800fc9c:	bfb8      	it	lt
 800fc9e:	3101      	addlt	r1, #1
 800fca0:	f7ff fe92 	bl	800f9c8 <_Balloc>
 800fca4:	b930      	cbnz	r0, 800fcb4 <__multiply+0x44>
 800fca6:	4602      	mov	r2, r0
 800fca8:	4b44      	ldr	r3, [pc, #272]	@ (800fdbc <__multiply+0x14c>)
 800fcaa:	4845      	ldr	r0, [pc, #276]	@ (800fdc0 <__multiply+0x150>)
 800fcac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fcb0:	f001 fc0a 	bl	80114c8 <__assert_func>
 800fcb4:	f100 0514 	add.w	r5, r0, #20
 800fcb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fcbc:	462b      	mov	r3, r5
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	4543      	cmp	r3, r8
 800fcc2:	d321      	bcc.n	800fd08 <__multiply+0x98>
 800fcc4:	f107 0114 	add.w	r1, r7, #20
 800fcc8:	f104 0214 	add.w	r2, r4, #20
 800fccc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fcd0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fcd4:	9302      	str	r3, [sp, #8]
 800fcd6:	1b13      	subs	r3, r2, r4
 800fcd8:	3b15      	subs	r3, #21
 800fcda:	f023 0303 	bic.w	r3, r3, #3
 800fcde:	3304      	adds	r3, #4
 800fce0:	f104 0715 	add.w	r7, r4, #21
 800fce4:	42ba      	cmp	r2, r7
 800fce6:	bf38      	it	cc
 800fce8:	2304      	movcc	r3, #4
 800fcea:	9301      	str	r3, [sp, #4]
 800fcec:	9b02      	ldr	r3, [sp, #8]
 800fcee:	9103      	str	r1, [sp, #12]
 800fcf0:	428b      	cmp	r3, r1
 800fcf2:	d80c      	bhi.n	800fd0e <__multiply+0x9e>
 800fcf4:	2e00      	cmp	r6, #0
 800fcf6:	dd03      	ble.n	800fd00 <__multiply+0x90>
 800fcf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d05b      	beq.n	800fdb8 <__multiply+0x148>
 800fd00:	6106      	str	r6, [r0, #16]
 800fd02:	b005      	add	sp, #20
 800fd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd08:	f843 2b04 	str.w	r2, [r3], #4
 800fd0c:	e7d8      	b.n	800fcc0 <__multiply+0x50>
 800fd0e:	f8b1 a000 	ldrh.w	sl, [r1]
 800fd12:	f1ba 0f00 	cmp.w	sl, #0
 800fd16:	d024      	beq.n	800fd62 <__multiply+0xf2>
 800fd18:	f104 0e14 	add.w	lr, r4, #20
 800fd1c:	46a9      	mov	r9, r5
 800fd1e:	f04f 0c00 	mov.w	ip, #0
 800fd22:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fd26:	f8d9 3000 	ldr.w	r3, [r9]
 800fd2a:	fa1f fb87 	uxth.w	fp, r7
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	fb0a 330b 	mla	r3, sl, fp, r3
 800fd34:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fd38:	f8d9 7000 	ldr.w	r7, [r9]
 800fd3c:	4463      	add	r3, ip
 800fd3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fd42:	fb0a c70b 	mla	r7, sl, fp, ip
 800fd46:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fd50:	4572      	cmp	r2, lr
 800fd52:	f849 3b04 	str.w	r3, [r9], #4
 800fd56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fd5a:	d8e2      	bhi.n	800fd22 <__multiply+0xb2>
 800fd5c:	9b01      	ldr	r3, [sp, #4]
 800fd5e:	f845 c003 	str.w	ip, [r5, r3]
 800fd62:	9b03      	ldr	r3, [sp, #12]
 800fd64:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fd68:	3104      	adds	r1, #4
 800fd6a:	f1b9 0f00 	cmp.w	r9, #0
 800fd6e:	d021      	beq.n	800fdb4 <__multiply+0x144>
 800fd70:	682b      	ldr	r3, [r5, #0]
 800fd72:	f104 0c14 	add.w	ip, r4, #20
 800fd76:	46ae      	mov	lr, r5
 800fd78:	f04f 0a00 	mov.w	sl, #0
 800fd7c:	f8bc b000 	ldrh.w	fp, [ip]
 800fd80:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fd84:	fb09 770b 	mla	r7, r9, fp, r7
 800fd88:	4457      	add	r7, sl
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fd90:	f84e 3b04 	str.w	r3, [lr], #4
 800fd94:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fd98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fd9c:	f8be 3000 	ldrh.w	r3, [lr]
 800fda0:	fb09 330a 	mla	r3, r9, sl, r3
 800fda4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fda8:	4562      	cmp	r2, ip
 800fdaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fdae:	d8e5      	bhi.n	800fd7c <__multiply+0x10c>
 800fdb0:	9f01      	ldr	r7, [sp, #4]
 800fdb2:	51eb      	str	r3, [r5, r7]
 800fdb4:	3504      	adds	r5, #4
 800fdb6:	e799      	b.n	800fcec <__multiply+0x7c>
 800fdb8:	3e01      	subs	r6, #1
 800fdba:	e79b      	b.n	800fcf4 <__multiply+0x84>
 800fdbc:	08012568 	.word	0x08012568
 800fdc0:	08012579 	.word	0x08012579

0800fdc4 <__pow5mult>:
 800fdc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdc8:	4615      	mov	r5, r2
 800fdca:	f012 0203 	ands.w	r2, r2, #3
 800fdce:	4607      	mov	r7, r0
 800fdd0:	460e      	mov	r6, r1
 800fdd2:	d007      	beq.n	800fde4 <__pow5mult+0x20>
 800fdd4:	4c25      	ldr	r4, [pc, #148]	@ (800fe6c <__pow5mult+0xa8>)
 800fdd6:	3a01      	subs	r2, #1
 800fdd8:	2300      	movs	r3, #0
 800fdda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fdde:	f7ff fe55 	bl	800fa8c <__multadd>
 800fde2:	4606      	mov	r6, r0
 800fde4:	10ad      	asrs	r5, r5, #2
 800fde6:	d03d      	beq.n	800fe64 <__pow5mult+0xa0>
 800fde8:	69fc      	ldr	r4, [r7, #28]
 800fdea:	b97c      	cbnz	r4, 800fe0c <__pow5mult+0x48>
 800fdec:	2010      	movs	r0, #16
 800fdee:	f7ff fd35 	bl	800f85c <malloc>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	61f8      	str	r0, [r7, #28]
 800fdf6:	b928      	cbnz	r0, 800fe04 <__pow5mult+0x40>
 800fdf8:	4b1d      	ldr	r3, [pc, #116]	@ (800fe70 <__pow5mult+0xac>)
 800fdfa:	481e      	ldr	r0, [pc, #120]	@ (800fe74 <__pow5mult+0xb0>)
 800fdfc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fe00:	f001 fb62 	bl	80114c8 <__assert_func>
 800fe04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fe08:	6004      	str	r4, [r0, #0]
 800fe0a:	60c4      	str	r4, [r0, #12]
 800fe0c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fe10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fe14:	b94c      	cbnz	r4, 800fe2a <__pow5mult+0x66>
 800fe16:	f240 2171 	movw	r1, #625	@ 0x271
 800fe1a:	4638      	mov	r0, r7
 800fe1c:	f7ff ff12 	bl	800fc44 <__i2b>
 800fe20:	2300      	movs	r3, #0
 800fe22:	f8c8 0008 	str.w	r0, [r8, #8]
 800fe26:	4604      	mov	r4, r0
 800fe28:	6003      	str	r3, [r0, #0]
 800fe2a:	f04f 0900 	mov.w	r9, #0
 800fe2e:	07eb      	lsls	r3, r5, #31
 800fe30:	d50a      	bpl.n	800fe48 <__pow5mult+0x84>
 800fe32:	4631      	mov	r1, r6
 800fe34:	4622      	mov	r2, r4
 800fe36:	4638      	mov	r0, r7
 800fe38:	f7ff ff1a 	bl	800fc70 <__multiply>
 800fe3c:	4631      	mov	r1, r6
 800fe3e:	4680      	mov	r8, r0
 800fe40:	4638      	mov	r0, r7
 800fe42:	f7ff fe01 	bl	800fa48 <_Bfree>
 800fe46:	4646      	mov	r6, r8
 800fe48:	106d      	asrs	r5, r5, #1
 800fe4a:	d00b      	beq.n	800fe64 <__pow5mult+0xa0>
 800fe4c:	6820      	ldr	r0, [r4, #0]
 800fe4e:	b938      	cbnz	r0, 800fe60 <__pow5mult+0x9c>
 800fe50:	4622      	mov	r2, r4
 800fe52:	4621      	mov	r1, r4
 800fe54:	4638      	mov	r0, r7
 800fe56:	f7ff ff0b 	bl	800fc70 <__multiply>
 800fe5a:	6020      	str	r0, [r4, #0]
 800fe5c:	f8c0 9000 	str.w	r9, [r0]
 800fe60:	4604      	mov	r4, r0
 800fe62:	e7e4      	b.n	800fe2e <__pow5mult+0x6a>
 800fe64:	4630      	mov	r0, r6
 800fe66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe6a:	bf00      	nop
 800fe6c:	080125d4 	.word	0x080125d4
 800fe70:	080124f9 	.word	0x080124f9
 800fe74:	08012579 	.word	0x08012579

0800fe78 <__lshift>:
 800fe78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe7c:	460c      	mov	r4, r1
 800fe7e:	6849      	ldr	r1, [r1, #4]
 800fe80:	6923      	ldr	r3, [r4, #16]
 800fe82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fe86:	68a3      	ldr	r3, [r4, #8]
 800fe88:	4607      	mov	r7, r0
 800fe8a:	4691      	mov	r9, r2
 800fe8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fe90:	f108 0601 	add.w	r6, r8, #1
 800fe94:	42b3      	cmp	r3, r6
 800fe96:	db0b      	blt.n	800feb0 <__lshift+0x38>
 800fe98:	4638      	mov	r0, r7
 800fe9a:	f7ff fd95 	bl	800f9c8 <_Balloc>
 800fe9e:	4605      	mov	r5, r0
 800fea0:	b948      	cbnz	r0, 800feb6 <__lshift+0x3e>
 800fea2:	4602      	mov	r2, r0
 800fea4:	4b28      	ldr	r3, [pc, #160]	@ (800ff48 <__lshift+0xd0>)
 800fea6:	4829      	ldr	r0, [pc, #164]	@ (800ff4c <__lshift+0xd4>)
 800fea8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800feac:	f001 fb0c 	bl	80114c8 <__assert_func>
 800feb0:	3101      	adds	r1, #1
 800feb2:	005b      	lsls	r3, r3, #1
 800feb4:	e7ee      	b.n	800fe94 <__lshift+0x1c>
 800feb6:	2300      	movs	r3, #0
 800feb8:	f100 0114 	add.w	r1, r0, #20
 800febc:	f100 0210 	add.w	r2, r0, #16
 800fec0:	4618      	mov	r0, r3
 800fec2:	4553      	cmp	r3, sl
 800fec4:	db33      	blt.n	800ff2e <__lshift+0xb6>
 800fec6:	6920      	ldr	r0, [r4, #16]
 800fec8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fecc:	f104 0314 	add.w	r3, r4, #20
 800fed0:	f019 091f 	ands.w	r9, r9, #31
 800fed4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fed8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fedc:	d02b      	beq.n	800ff36 <__lshift+0xbe>
 800fede:	f1c9 0e20 	rsb	lr, r9, #32
 800fee2:	468a      	mov	sl, r1
 800fee4:	2200      	movs	r2, #0
 800fee6:	6818      	ldr	r0, [r3, #0]
 800fee8:	fa00 f009 	lsl.w	r0, r0, r9
 800feec:	4310      	orrs	r0, r2
 800feee:	f84a 0b04 	str.w	r0, [sl], #4
 800fef2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fef6:	459c      	cmp	ip, r3
 800fef8:	fa22 f20e 	lsr.w	r2, r2, lr
 800fefc:	d8f3      	bhi.n	800fee6 <__lshift+0x6e>
 800fefe:	ebac 0304 	sub.w	r3, ip, r4
 800ff02:	3b15      	subs	r3, #21
 800ff04:	f023 0303 	bic.w	r3, r3, #3
 800ff08:	3304      	adds	r3, #4
 800ff0a:	f104 0015 	add.w	r0, r4, #21
 800ff0e:	4584      	cmp	ip, r0
 800ff10:	bf38      	it	cc
 800ff12:	2304      	movcc	r3, #4
 800ff14:	50ca      	str	r2, [r1, r3]
 800ff16:	b10a      	cbz	r2, 800ff1c <__lshift+0xa4>
 800ff18:	f108 0602 	add.w	r6, r8, #2
 800ff1c:	3e01      	subs	r6, #1
 800ff1e:	4638      	mov	r0, r7
 800ff20:	612e      	str	r6, [r5, #16]
 800ff22:	4621      	mov	r1, r4
 800ff24:	f7ff fd90 	bl	800fa48 <_Bfree>
 800ff28:	4628      	mov	r0, r5
 800ff2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ff32:	3301      	adds	r3, #1
 800ff34:	e7c5      	b.n	800fec2 <__lshift+0x4a>
 800ff36:	3904      	subs	r1, #4
 800ff38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ff40:	459c      	cmp	ip, r3
 800ff42:	d8f9      	bhi.n	800ff38 <__lshift+0xc0>
 800ff44:	e7ea      	b.n	800ff1c <__lshift+0xa4>
 800ff46:	bf00      	nop
 800ff48:	08012568 	.word	0x08012568
 800ff4c:	08012579 	.word	0x08012579

0800ff50 <__mcmp>:
 800ff50:	690a      	ldr	r2, [r1, #16]
 800ff52:	4603      	mov	r3, r0
 800ff54:	6900      	ldr	r0, [r0, #16]
 800ff56:	1a80      	subs	r0, r0, r2
 800ff58:	b530      	push	{r4, r5, lr}
 800ff5a:	d10e      	bne.n	800ff7a <__mcmp+0x2a>
 800ff5c:	3314      	adds	r3, #20
 800ff5e:	3114      	adds	r1, #20
 800ff60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ff64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ff68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ff6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ff70:	4295      	cmp	r5, r2
 800ff72:	d003      	beq.n	800ff7c <__mcmp+0x2c>
 800ff74:	d205      	bcs.n	800ff82 <__mcmp+0x32>
 800ff76:	f04f 30ff 	mov.w	r0, #4294967295
 800ff7a:	bd30      	pop	{r4, r5, pc}
 800ff7c:	42a3      	cmp	r3, r4
 800ff7e:	d3f3      	bcc.n	800ff68 <__mcmp+0x18>
 800ff80:	e7fb      	b.n	800ff7a <__mcmp+0x2a>
 800ff82:	2001      	movs	r0, #1
 800ff84:	e7f9      	b.n	800ff7a <__mcmp+0x2a>
	...

0800ff88 <__mdiff>:
 800ff88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff8c:	4689      	mov	r9, r1
 800ff8e:	4606      	mov	r6, r0
 800ff90:	4611      	mov	r1, r2
 800ff92:	4648      	mov	r0, r9
 800ff94:	4614      	mov	r4, r2
 800ff96:	f7ff ffdb 	bl	800ff50 <__mcmp>
 800ff9a:	1e05      	subs	r5, r0, #0
 800ff9c:	d112      	bne.n	800ffc4 <__mdiff+0x3c>
 800ff9e:	4629      	mov	r1, r5
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	f7ff fd11 	bl	800f9c8 <_Balloc>
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	b928      	cbnz	r0, 800ffb6 <__mdiff+0x2e>
 800ffaa:	4b3f      	ldr	r3, [pc, #252]	@ (80100a8 <__mdiff+0x120>)
 800ffac:	f240 2137 	movw	r1, #567	@ 0x237
 800ffb0:	483e      	ldr	r0, [pc, #248]	@ (80100ac <__mdiff+0x124>)
 800ffb2:	f001 fa89 	bl	80114c8 <__assert_func>
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ffbc:	4610      	mov	r0, r2
 800ffbe:	b003      	add	sp, #12
 800ffc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffc4:	bfbc      	itt	lt
 800ffc6:	464b      	movlt	r3, r9
 800ffc8:	46a1      	movlt	r9, r4
 800ffca:	4630      	mov	r0, r6
 800ffcc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ffd0:	bfba      	itte	lt
 800ffd2:	461c      	movlt	r4, r3
 800ffd4:	2501      	movlt	r5, #1
 800ffd6:	2500      	movge	r5, #0
 800ffd8:	f7ff fcf6 	bl	800f9c8 <_Balloc>
 800ffdc:	4602      	mov	r2, r0
 800ffde:	b918      	cbnz	r0, 800ffe8 <__mdiff+0x60>
 800ffe0:	4b31      	ldr	r3, [pc, #196]	@ (80100a8 <__mdiff+0x120>)
 800ffe2:	f240 2145 	movw	r1, #581	@ 0x245
 800ffe6:	e7e3      	b.n	800ffb0 <__mdiff+0x28>
 800ffe8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ffec:	6926      	ldr	r6, [r4, #16]
 800ffee:	60c5      	str	r5, [r0, #12]
 800fff0:	f109 0310 	add.w	r3, r9, #16
 800fff4:	f109 0514 	add.w	r5, r9, #20
 800fff8:	f104 0e14 	add.w	lr, r4, #20
 800fffc:	f100 0b14 	add.w	fp, r0, #20
 8010000:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010004:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010008:	9301      	str	r3, [sp, #4]
 801000a:	46d9      	mov	r9, fp
 801000c:	f04f 0c00 	mov.w	ip, #0
 8010010:	9b01      	ldr	r3, [sp, #4]
 8010012:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010016:	f853 af04 	ldr.w	sl, [r3, #4]!
 801001a:	9301      	str	r3, [sp, #4]
 801001c:	fa1f f38a 	uxth.w	r3, sl
 8010020:	4619      	mov	r1, r3
 8010022:	b283      	uxth	r3, r0
 8010024:	1acb      	subs	r3, r1, r3
 8010026:	0c00      	lsrs	r0, r0, #16
 8010028:	4463      	add	r3, ip
 801002a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801002e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010032:	b29b      	uxth	r3, r3
 8010034:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010038:	4576      	cmp	r6, lr
 801003a:	f849 3b04 	str.w	r3, [r9], #4
 801003e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010042:	d8e5      	bhi.n	8010010 <__mdiff+0x88>
 8010044:	1b33      	subs	r3, r6, r4
 8010046:	3b15      	subs	r3, #21
 8010048:	f023 0303 	bic.w	r3, r3, #3
 801004c:	3415      	adds	r4, #21
 801004e:	3304      	adds	r3, #4
 8010050:	42a6      	cmp	r6, r4
 8010052:	bf38      	it	cc
 8010054:	2304      	movcc	r3, #4
 8010056:	441d      	add	r5, r3
 8010058:	445b      	add	r3, fp
 801005a:	461e      	mov	r6, r3
 801005c:	462c      	mov	r4, r5
 801005e:	4544      	cmp	r4, r8
 8010060:	d30e      	bcc.n	8010080 <__mdiff+0xf8>
 8010062:	f108 0103 	add.w	r1, r8, #3
 8010066:	1b49      	subs	r1, r1, r5
 8010068:	f021 0103 	bic.w	r1, r1, #3
 801006c:	3d03      	subs	r5, #3
 801006e:	45a8      	cmp	r8, r5
 8010070:	bf38      	it	cc
 8010072:	2100      	movcc	r1, #0
 8010074:	440b      	add	r3, r1
 8010076:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801007a:	b191      	cbz	r1, 80100a2 <__mdiff+0x11a>
 801007c:	6117      	str	r7, [r2, #16]
 801007e:	e79d      	b.n	800ffbc <__mdiff+0x34>
 8010080:	f854 1b04 	ldr.w	r1, [r4], #4
 8010084:	46e6      	mov	lr, ip
 8010086:	0c08      	lsrs	r0, r1, #16
 8010088:	fa1c fc81 	uxtah	ip, ip, r1
 801008c:	4471      	add	r1, lr
 801008e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010092:	b289      	uxth	r1, r1
 8010094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010098:	f846 1b04 	str.w	r1, [r6], #4
 801009c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80100a0:	e7dd      	b.n	801005e <__mdiff+0xd6>
 80100a2:	3f01      	subs	r7, #1
 80100a4:	e7e7      	b.n	8010076 <__mdiff+0xee>
 80100a6:	bf00      	nop
 80100a8:	08012568 	.word	0x08012568
 80100ac:	08012579 	.word	0x08012579

080100b0 <__ulp>:
 80100b0:	b082      	sub	sp, #8
 80100b2:	ed8d 0b00 	vstr	d0, [sp]
 80100b6:	9a01      	ldr	r2, [sp, #4]
 80100b8:	4b0f      	ldr	r3, [pc, #60]	@ (80100f8 <__ulp+0x48>)
 80100ba:	4013      	ands	r3, r2
 80100bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	dc08      	bgt.n	80100d6 <__ulp+0x26>
 80100c4:	425b      	negs	r3, r3
 80100c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80100ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80100ce:	da04      	bge.n	80100da <__ulp+0x2a>
 80100d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80100d4:	4113      	asrs	r3, r2
 80100d6:	2200      	movs	r2, #0
 80100d8:	e008      	b.n	80100ec <__ulp+0x3c>
 80100da:	f1a2 0314 	sub.w	r3, r2, #20
 80100de:	2b1e      	cmp	r3, #30
 80100e0:	bfda      	itte	le
 80100e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80100e6:	40da      	lsrle	r2, r3
 80100e8:	2201      	movgt	r2, #1
 80100ea:	2300      	movs	r3, #0
 80100ec:	4619      	mov	r1, r3
 80100ee:	4610      	mov	r0, r2
 80100f0:	ec41 0b10 	vmov	d0, r0, r1
 80100f4:	b002      	add	sp, #8
 80100f6:	4770      	bx	lr
 80100f8:	7ff00000 	.word	0x7ff00000

080100fc <__b2d>:
 80100fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010100:	6906      	ldr	r6, [r0, #16]
 8010102:	f100 0814 	add.w	r8, r0, #20
 8010106:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801010a:	1f37      	subs	r7, r6, #4
 801010c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010110:	4610      	mov	r0, r2
 8010112:	f7ff fd4b 	bl	800fbac <__hi0bits>
 8010116:	f1c0 0320 	rsb	r3, r0, #32
 801011a:	280a      	cmp	r0, #10
 801011c:	600b      	str	r3, [r1, #0]
 801011e:	491b      	ldr	r1, [pc, #108]	@ (801018c <__b2d+0x90>)
 8010120:	dc15      	bgt.n	801014e <__b2d+0x52>
 8010122:	f1c0 0c0b 	rsb	ip, r0, #11
 8010126:	fa22 f30c 	lsr.w	r3, r2, ip
 801012a:	45b8      	cmp	r8, r7
 801012c:	ea43 0501 	orr.w	r5, r3, r1
 8010130:	bf34      	ite	cc
 8010132:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010136:	2300      	movcs	r3, #0
 8010138:	3015      	adds	r0, #21
 801013a:	fa02 f000 	lsl.w	r0, r2, r0
 801013e:	fa23 f30c 	lsr.w	r3, r3, ip
 8010142:	4303      	orrs	r3, r0
 8010144:	461c      	mov	r4, r3
 8010146:	ec45 4b10 	vmov	d0, r4, r5
 801014a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801014e:	45b8      	cmp	r8, r7
 8010150:	bf3a      	itte	cc
 8010152:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010156:	f1a6 0708 	subcc.w	r7, r6, #8
 801015a:	2300      	movcs	r3, #0
 801015c:	380b      	subs	r0, #11
 801015e:	d012      	beq.n	8010186 <__b2d+0x8a>
 8010160:	f1c0 0120 	rsb	r1, r0, #32
 8010164:	fa23 f401 	lsr.w	r4, r3, r1
 8010168:	4082      	lsls	r2, r0
 801016a:	4322      	orrs	r2, r4
 801016c:	4547      	cmp	r7, r8
 801016e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010172:	bf8c      	ite	hi
 8010174:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010178:	2200      	movls	r2, #0
 801017a:	4083      	lsls	r3, r0
 801017c:	40ca      	lsrs	r2, r1
 801017e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010182:	4313      	orrs	r3, r2
 8010184:	e7de      	b.n	8010144 <__b2d+0x48>
 8010186:	ea42 0501 	orr.w	r5, r2, r1
 801018a:	e7db      	b.n	8010144 <__b2d+0x48>
 801018c:	3ff00000 	.word	0x3ff00000

08010190 <__d2b>:
 8010190:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010194:	460f      	mov	r7, r1
 8010196:	2101      	movs	r1, #1
 8010198:	ec59 8b10 	vmov	r8, r9, d0
 801019c:	4616      	mov	r6, r2
 801019e:	f7ff fc13 	bl	800f9c8 <_Balloc>
 80101a2:	4604      	mov	r4, r0
 80101a4:	b930      	cbnz	r0, 80101b4 <__d2b+0x24>
 80101a6:	4602      	mov	r2, r0
 80101a8:	4b23      	ldr	r3, [pc, #140]	@ (8010238 <__d2b+0xa8>)
 80101aa:	4824      	ldr	r0, [pc, #144]	@ (801023c <__d2b+0xac>)
 80101ac:	f240 310f 	movw	r1, #783	@ 0x30f
 80101b0:	f001 f98a 	bl	80114c8 <__assert_func>
 80101b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80101b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80101bc:	b10d      	cbz	r5, 80101c2 <__d2b+0x32>
 80101be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80101c2:	9301      	str	r3, [sp, #4]
 80101c4:	f1b8 0300 	subs.w	r3, r8, #0
 80101c8:	d023      	beq.n	8010212 <__d2b+0x82>
 80101ca:	4668      	mov	r0, sp
 80101cc:	9300      	str	r3, [sp, #0]
 80101ce:	f7ff fd0c 	bl	800fbea <__lo0bits>
 80101d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80101d6:	b1d0      	cbz	r0, 801020e <__d2b+0x7e>
 80101d8:	f1c0 0320 	rsb	r3, r0, #32
 80101dc:	fa02 f303 	lsl.w	r3, r2, r3
 80101e0:	430b      	orrs	r3, r1
 80101e2:	40c2      	lsrs	r2, r0
 80101e4:	6163      	str	r3, [r4, #20]
 80101e6:	9201      	str	r2, [sp, #4]
 80101e8:	9b01      	ldr	r3, [sp, #4]
 80101ea:	61a3      	str	r3, [r4, #24]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	bf0c      	ite	eq
 80101f0:	2201      	moveq	r2, #1
 80101f2:	2202      	movne	r2, #2
 80101f4:	6122      	str	r2, [r4, #16]
 80101f6:	b1a5      	cbz	r5, 8010222 <__d2b+0x92>
 80101f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80101fc:	4405      	add	r5, r0
 80101fe:	603d      	str	r5, [r7, #0]
 8010200:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010204:	6030      	str	r0, [r6, #0]
 8010206:	4620      	mov	r0, r4
 8010208:	b003      	add	sp, #12
 801020a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801020e:	6161      	str	r1, [r4, #20]
 8010210:	e7ea      	b.n	80101e8 <__d2b+0x58>
 8010212:	a801      	add	r0, sp, #4
 8010214:	f7ff fce9 	bl	800fbea <__lo0bits>
 8010218:	9b01      	ldr	r3, [sp, #4]
 801021a:	6163      	str	r3, [r4, #20]
 801021c:	3020      	adds	r0, #32
 801021e:	2201      	movs	r2, #1
 8010220:	e7e8      	b.n	80101f4 <__d2b+0x64>
 8010222:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010226:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801022a:	6038      	str	r0, [r7, #0]
 801022c:	6918      	ldr	r0, [r3, #16]
 801022e:	f7ff fcbd 	bl	800fbac <__hi0bits>
 8010232:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010236:	e7e5      	b.n	8010204 <__d2b+0x74>
 8010238:	08012568 	.word	0x08012568
 801023c:	08012579 	.word	0x08012579

08010240 <__ratio>:
 8010240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010244:	b085      	sub	sp, #20
 8010246:	e9cd 1000 	strd	r1, r0, [sp]
 801024a:	a902      	add	r1, sp, #8
 801024c:	f7ff ff56 	bl	80100fc <__b2d>
 8010250:	9800      	ldr	r0, [sp, #0]
 8010252:	a903      	add	r1, sp, #12
 8010254:	ec55 4b10 	vmov	r4, r5, d0
 8010258:	f7ff ff50 	bl	80100fc <__b2d>
 801025c:	9b01      	ldr	r3, [sp, #4]
 801025e:	6919      	ldr	r1, [r3, #16]
 8010260:	9b00      	ldr	r3, [sp, #0]
 8010262:	691b      	ldr	r3, [r3, #16]
 8010264:	1ac9      	subs	r1, r1, r3
 8010266:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801026a:	1a9b      	subs	r3, r3, r2
 801026c:	ec5b ab10 	vmov	sl, fp, d0
 8010270:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010274:	2b00      	cmp	r3, #0
 8010276:	bfce      	itee	gt
 8010278:	462a      	movgt	r2, r5
 801027a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801027e:	465a      	movle	r2, fp
 8010280:	462f      	mov	r7, r5
 8010282:	46d9      	mov	r9, fp
 8010284:	bfcc      	ite	gt
 8010286:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801028a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801028e:	464b      	mov	r3, r9
 8010290:	4652      	mov	r2, sl
 8010292:	4620      	mov	r0, r4
 8010294:	4639      	mov	r1, r7
 8010296:	f7f0 fb01 	bl	800089c <__aeabi_ddiv>
 801029a:	ec41 0b10 	vmov	d0, r0, r1
 801029e:	b005      	add	sp, #20
 80102a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080102a4 <__copybits>:
 80102a4:	3901      	subs	r1, #1
 80102a6:	b570      	push	{r4, r5, r6, lr}
 80102a8:	1149      	asrs	r1, r1, #5
 80102aa:	6914      	ldr	r4, [r2, #16]
 80102ac:	3101      	adds	r1, #1
 80102ae:	f102 0314 	add.w	r3, r2, #20
 80102b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80102b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80102ba:	1f05      	subs	r5, r0, #4
 80102bc:	42a3      	cmp	r3, r4
 80102be:	d30c      	bcc.n	80102da <__copybits+0x36>
 80102c0:	1aa3      	subs	r3, r4, r2
 80102c2:	3b11      	subs	r3, #17
 80102c4:	f023 0303 	bic.w	r3, r3, #3
 80102c8:	3211      	adds	r2, #17
 80102ca:	42a2      	cmp	r2, r4
 80102cc:	bf88      	it	hi
 80102ce:	2300      	movhi	r3, #0
 80102d0:	4418      	add	r0, r3
 80102d2:	2300      	movs	r3, #0
 80102d4:	4288      	cmp	r0, r1
 80102d6:	d305      	bcc.n	80102e4 <__copybits+0x40>
 80102d8:	bd70      	pop	{r4, r5, r6, pc}
 80102da:	f853 6b04 	ldr.w	r6, [r3], #4
 80102de:	f845 6f04 	str.w	r6, [r5, #4]!
 80102e2:	e7eb      	b.n	80102bc <__copybits+0x18>
 80102e4:	f840 3b04 	str.w	r3, [r0], #4
 80102e8:	e7f4      	b.n	80102d4 <__copybits+0x30>

080102ea <__any_on>:
 80102ea:	f100 0214 	add.w	r2, r0, #20
 80102ee:	6900      	ldr	r0, [r0, #16]
 80102f0:	114b      	asrs	r3, r1, #5
 80102f2:	4298      	cmp	r0, r3
 80102f4:	b510      	push	{r4, lr}
 80102f6:	db11      	blt.n	801031c <__any_on+0x32>
 80102f8:	dd0a      	ble.n	8010310 <__any_on+0x26>
 80102fa:	f011 011f 	ands.w	r1, r1, #31
 80102fe:	d007      	beq.n	8010310 <__any_on+0x26>
 8010300:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010304:	fa24 f001 	lsr.w	r0, r4, r1
 8010308:	fa00 f101 	lsl.w	r1, r0, r1
 801030c:	428c      	cmp	r4, r1
 801030e:	d10b      	bne.n	8010328 <__any_on+0x3e>
 8010310:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010314:	4293      	cmp	r3, r2
 8010316:	d803      	bhi.n	8010320 <__any_on+0x36>
 8010318:	2000      	movs	r0, #0
 801031a:	bd10      	pop	{r4, pc}
 801031c:	4603      	mov	r3, r0
 801031e:	e7f7      	b.n	8010310 <__any_on+0x26>
 8010320:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010324:	2900      	cmp	r1, #0
 8010326:	d0f5      	beq.n	8010314 <__any_on+0x2a>
 8010328:	2001      	movs	r0, #1
 801032a:	e7f6      	b.n	801031a <__any_on+0x30>

0801032c <sulp>:
 801032c:	b570      	push	{r4, r5, r6, lr}
 801032e:	4604      	mov	r4, r0
 8010330:	460d      	mov	r5, r1
 8010332:	ec45 4b10 	vmov	d0, r4, r5
 8010336:	4616      	mov	r6, r2
 8010338:	f7ff feba 	bl	80100b0 <__ulp>
 801033c:	ec51 0b10 	vmov	r0, r1, d0
 8010340:	b17e      	cbz	r6, 8010362 <sulp+0x36>
 8010342:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010346:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801034a:	2b00      	cmp	r3, #0
 801034c:	dd09      	ble.n	8010362 <sulp+0x36>
 801034e:	051b      	lsls	r3, r3, #20
 8010350:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010354:	2400      	movs	r4, #0
 8010356:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801035a:	4622      	mov	r2, r4
 801035c:	462b      	mov	r3, r5
 801035e:	f7f0 f973 	bl	8000648 <__aeabi_dmul>
 8010362:	ec41 0b10 	vmov	d0, r0, r1
 8010366:	bd70      	pop	{r4, r5, r6, pc}

08010368 <_strtod_l>:
 8010368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801036c:	b09f      	sub	sp, #124	@ 0x7c
 801036e:	460c      	mov	r4, r1
 8010370:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010372:	2200      	movs	r2, #0
 8010374:	921a      	str	r2, [sp, #104]	@ 0x68
 8010376:	9005      	str	r0, [sp, #20]
 8010378:	f04f 0a00 	mov.w	sl, #0
 801037c:	f04f 0b00 	mov.w	fp, #0
 8010380:	460a      	mov	r2, r1
 8010382:	9219      	str	r2, [sp, #100]	@ 0x64
 8010384:	7811      	ldrb	r1, [r2, #0]
 8010386:	292b      	cmp	r1, #43	@ 0x2b
 8010388:	d04a      	beq.n	8010420 <_strtod_l+0xb8>
 801038a:	d838      	bhi.n	80103fe <_strtod_l+0x96>
 801038c:	290d      	cmp	r1, #13
 801038e:	d832      	bhi.n	80103f6 <_strtod_l+0x8e>
 8010390:	2908      	cmp	r1, #8
 8010392:	d832      	bhi.n	80103fa <_strtod_l+0x92>
 8010394:	2900      	cmp	r1, #0
 8010396:	d03b      	beq.n	8010410 <_strtod_l+0xa8>
 8010398:	2200      	movs	r2, #0
 801039a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801039c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801039e:	782a      	ldrb	r2, [r5, #0]
 80103a0:	2a30      	cmp	r2, #48	@ 0x30
 80103a2:	f040 80b3 	bne.w	801050c <_strtod_l+0x1a4>
 80103a6:	786a      	ldrb	r2, [r5, #1]
 80103a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80103ac:	2a58      	cmp	r2, #88	@ 0x58
 80103ae:	d16e      	bne.n	801048e <_strtod_l+0x126>
 80103b0:	9302      	str	r3, [sp, #8]
 80103b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103b4:	9301      	str	r3, [sp, #4]
 80103b6:	ab1a      	add	r3, sp, #104	@ 0x68
 80103b8:	9300      	str	r3, [sp, #0]
 80103ba:	4a8e      	ldr	r2, [pc, #568]	@ (80105f4 <_strtod_l+0x28c>)
 80103bc:	9805      	ldr	r0, [sp, #20]
 80103be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80103c0:	a919      	add	r1, sp, #100	@ 0x64
 80103c2:	f001 f91b 	bl	80115fc <__gethex>
 80103c6:	f010 060f 	ands.w	r6, r0, #15
 80103ca:	4604      	mov	r4, r0
 80103cc:	d005      	beq.n	80103da <_strtod_l+0x72>
 80103ce:	2e06      	cmp	r6, #6
 80103d0:	d128      	bne.n	8010424 <_strtod_l+0xbc>
 80103d2:	3501      	adds	r5, #1
 80103d4:	2300      	movs	r3, #0
 80103d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80103d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80103dc:	2b00      	cmp	r3, #0
 80103de:	f040 858e 	bne.w	8010efe <_strtod_l+0xb96>
 80103e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103e4:	b1cb      	cbz	r3, 801041a <_strtod_l+0xb2>
 80103e6:	4652      	mov	r2, sl
 80103e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80103ec:	ec43 2b10 	vmov	d0, r2, r3
 80103f0:	b01f      	add	sp, #124	@ 0x7c
 80103f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f6:	2920      	cmp	r1, #32
 80103f8:	d1ce      	bne.n	8010398 <_strtod_l+0x30>
 80103fa:	3201      	adds	r2, #1
 80103fc:	e7c1      	b.n	8010382 <_strtod_l+0x1a>
 80103fe:	292d      	cmp	r1, #45	@ 0x2d
 8010400:	d1ca      	bne.n	8010398 <_strtod_l+0x30>
 8010402:	2101      	movs	r1, #1
 8010404:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010406:	1c51      	adds	r1, r2, #1
 8010408:	9119      	str	r1, [sp, #100]	@ 0x64
 801040a:	7852      	ldrb	r2, [r2, #1]
 801040c:	2a00      	cmp	r2, #0
 801040e:	d1c5      	bne.n	801039c <_strtod_l+0x34>
 8010410:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010412:	9419      	str	r4, [sp, #100]	@ 0x64
 8010414:	2b00      	cmp	r3, #0
 8010416:	f040 8570 	bne.w	8010efa <_strtod_l+0xb92>
 801041a:	4652      	mov	r2, sl
 801041c:	465b      	mov	r3, fp
 801041e:	e7e5      	b.n	80103ec <_strtod_l+0x84>
 8010420:	2100      	movs	r1, #0
 8010422:	e7ef      	b.n	8010404 <_strtod_l+0x9c>
 8010424:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010426:	b13a      	cbz	r2, 8010438 <_strtod_l+0xd0>
 8010428:	2135      	movs	r1, #53	@ 0x35
 801042a:	a81c      	add	r0, sp, #112	@ 0x70
 801042c:	f7ff ff3a 	bl	80102a4 <__copybits>
 8010430:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010432:	9805      	ldr	r0, [sp, #20]
 8010434:	f7ff fb08 	bl	800fa48 <_Bfree>
 8010438:	3e01      	subs	r6, #1
 801043a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801043c:	2e04      	cmp	r6, #4
 801043e:	d806      	bhi.n	801044e <_strtod_l+0xe6>
 8010440:	e8df f006 	tbb	[pc, r6]
 8010444:	201d0314 	.word	0x201d0314
 8010448:	14          	.byte	0x14
 8010449:	00          	.byte	0x00
 801044a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801044e:	05e1      	lsls	r1, r4, #23
 8010450:	bf48      	it	mi
 8010452:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010456:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801045a:	0d1b      	lsrs	r3, r3, #20
 801045c:	051b      	lsls	r3, r3, #20
 801045e:	2b00      	cmp	r3, #0
 8010460:	d1bb      	bne.n	80103da <_strtod_l+0x72>
 8010462:	f7fe fb21 	bl	800eaa8 <__errno>
 8010466:	2322      	movs	r3, #34	@ 0x22
 8010468:	6003      	str	r3, [r0, #0]
 801046a:	e7b6      	b.n	80103da <_strtod_l+0x72>
 801046c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010470:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010474:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010478:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801047c:	e7e7      	b.n	801044e <_strtod_l+0xe6>
 801047e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80105fc <_strtod_l+0x294>
 8010482:	e7e4      	b.n	801044e <_strtod_l+0xe6>
 8010484:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010488:	f04f 3aff 	mov.w	sl, #4294967295
 801048c:	e7df      	b.n	801044e <_strtod_l+0xe6>
 801048e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010490:	1c5a      	adds	r2, r3, #1
 8010492:	9219      	str	r2, [sp, #100]	@ 0x64
 8010494:	785b      	ldrb	r3, [r3, #1]
 8010496:	2b30      	cmp	r3, #48	@ 0x30
 8010498:	d0f9      	beq.n	801048e <_strtod_l+0x126>
 801049a:	2b00      	cmp	r3, #0
 801049c:	d09d      	beq.n	80103da <_strtod_l+0x72>
 801049e:	2301      	movs	r3, #1
 80104a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80104a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80104a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80104a6:	2300      	movs	r3, #0
 80104a8:	9308      	str	r3, [sp, #32]
 80104aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80104ac:	461f      	mov	r7, r3
 80104ae:	220a      	movs	r2, #10
 80104b0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80104b2:	7805      	ldrb	r5, [r0, #0]
 80104b4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80104b8:	b2d9      	uxtb	r1, r3
 80104ba:	2909      	cmp	r1, #9
 80104bc:	d928      	bls.n	8010510 <_strtod_l+0x1a8>
 80104be:	494e      	ldr	r1, [pc, #312]	@ (80105f8 <_strtod_l+0x290>)
 80104c0:	2201      	movs	r2, #1
 80104c2:	f000 ffd5 	bl	8011470 <strncmp>
 80104c6:	2800      	cmp	r0, #0
 80104c8:	d032      	beq.n	8010530 <_strtod_l+0x1c8>
 80104ca:	2000      	movs	r0, #0
 80104cc:	462a      	mov	r2, r5
 80104ce:	4681      	mov	r9, r0
 80104d0:	463d      	mov	r5, r7
 80104d2:	4603      	mov	r3, r0
 80104d4:	2a65      	cmp	r2, #101	@ 0x65
 80104d6:	d001      	beq.n	80104dc <_strtod_l+0x174>
 80104d8:	2a45      	cmp	r2, #69	@ 0x45
 80104da:	d114      	bne.n	8010506 <_strtod_l+0x19e>
 80104dc:	b91d      	cbnz	r5, 80104e6 <_strtod_l+0x17e>
 80104de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104e0:	4302      	orrs	r2, r0
 80104e2:	d095      	beq.n	8010410 <_strtod_l+0xa8>
 80104e4:	2500      	movs	r5, #0
 80104e6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80104e8:	1c62      	adds	r2, r4, #1
 80104ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80104ec:	7862      	ldrb	r2, [r4, #1]
 80104ee:	2a2b      	cmp	r2, #43	@ 0x2b
 80104f0:	d077      	beq.n	80105e2 <_strtod_l+0x27a>
 80104f2:	2a2d      	cmp	r2, #45	@ 0x2d
 80104f4:	d07b      	beq.n	80105ee <_strtod_l+0x286>
 80104f6:	f04f 0c00 	mov.w	ip, #0
 80104fa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80104fe:	2909      	cmp	r1, #9
 8010500:	f240 8082 	bls.w	8010608 <_strtod_l+0x2a0>
 8010504:	9419      	str	r4, [sp, #100]	@ 0x64
 8010506:	f04f 0800 	mov.w	r8, #0
 801050a:	e0a2      	b.n	8010652 <_strtod_l+0x2ea>
 801050c:	2300      	movs	r3, #0
 801050e:	e7c7      	b.n	80104a0 <_strtod_l+0x138>
 8010510:	2f08      	cmp	r7, #8
 8010512:	bfd5      	itete	le
 8010514:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8010516:	9908      	ldrgt	r1, [sp, #32]
 8010518:	fb02 3301 	mlale	r3, r2, r1, r3
 801051c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010520:	f100 0001 	add.w	r0, r0, #1
 8010524:	bfd4      	ite	le
 8010526:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010528:	9308      	strgt	r3, [sp, #32]
 801052a:	3701      	adds	r7, #1
 801052c:	9019      	str	r0, [sp, #100]	@ 0x64
 801052e:	e7bf      	b.n	80104b0 <_strtod_l+0x148>
 8010530:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010532:	1c5a      	adds	r2, r3, #1
 8010534:	9219      	str	r2, [sp, #100]	@ 0x64
 8010536:	785a      	ldrb	r2, [r3, #1]
 8010538:	b37f      	cbz	r7, 801059a <_strtod_l+0x232>
 801053a:	4681      	mov	r9, r0
 801053c:	463d      	mov	r5, r7
 801053e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010542:	2b09      	cmp	r3, #9
 8010544:	d912      	bls.n	801056c <_strtod_l+0x204>
 8010546:	2301      	movs	r3, #1
 8010548:	e7c4      	b.n	80104d4 <_strtod_l+0x16c>
 801054a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801054c:	1c5a      	adds	r2, r3, #1
 801054e:	9219      	str	r2, [sp, #100]	@ 0x64
 8010550:	785a      	ldrb	r2, [r3, #1]
 8010552:	3001      	adds	r0, #1
 8010554:	2a30      	cmp	r2, #48	@ 0x30
 8010556:	d0f8      	beq.n	801054a <_strtod_l+0x1e2>
 8010558:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801055c:	2b08      	cmp	r3, #8
 801055e:	f200 84d3 	bhi.w	8010f08 <_strtod_l+0xba0>
 8010562:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010564:	930c      	str	r3, [sp, #48]	@ 0x30
 8010566:	4681      	mov	r9, r0
 8010568:	2000      	movs	r0, #0
 801056a:	4605      	mov	r5, r0
 801056c:	3a30      	subs	r2, #48	@ 0x30
 801056e:	f100 0301 	add.w	r3, r0, #1
 8010572:	d02a      	beq.n	80105ca <_strtod_l+0x262>
 8010574:	4499      	add	r9, r3
 8010576:	eb00 0c05 	add.w	ip, r0, r5
 801057a:	462b      	mov	r3, r5
 801057c:	210a      	movs	r1, #10
 801057e:	4563      	cmp	r3, ip
 8010580:	d10d      	bne.n	801059e <_strtod_l+0x236>
 8010582:	1c69      	adds	r1, r5, #1
 8010584:	4401      	add	r1, r0
 8010586:	4428      	add	r0, r5
 8010588:	2808      	cmp	r0, #8
 801058a:	dc16      	bgt.n	80105ba <_strtod_l+0x252>
 801058c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801058e:	230a      	movs	r3, #10
 8010590:	fb03 2300 	mla	r3, r3, r0, r2
 8010594:	930a      	str	r3, [sp, #40]	@ 0x28
 8010596:	2300      	movs	r3, #0
 8010598:	e018      	b.n	80105cc <_strtod_l+0x264>
 801059a:	4638      	mov	r0, r7
 801059c:	e7da      	b.n	8010554 <_strtod_l+0x1ec>
 801059e:	2b08      	cmp	r3, #8
 80105a0:	f103 0301 	add.w	r3, r3, #1
 80105a4:	dc03      	bgt.n	80105ae <_strtod_l+0x246>
 80105a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80105a8:	434e      	muls	r6, r1
 80105aa:	960a      	str	r6, [sp, #40]	@ 0x28
 80105ac:	e7e7      	b.n	801057e <_strtod_l+0x216>
 80105ae:	2b10      	cmp	r3, #16
 80105b0:	bfde      	ittt	le
 80105b2:	9e08      	ldrle	r6, [sp, #32]
 80105b4:	434e      	mulle	r6, r1
 80105b6:	9608      	strle	r6, [sp, #32]
 80105b8:	e7e1      	b.n	801057e <_strtod_l+0x216>
 80105ba:	280f      	cmp	r0, #15
 80105bc:	dceb      	bgt.n	8010596 <_strtod_l+0x22e>
 80105be:	9808      	ldr	r0, [sp, #32]
 80105c0:	230a      	movs	r3, #10
 80105c2:	fb03 2300 	mla	r3, r3, r0, r2
 80105c6:	9308      	str	r3, [sp, #32]
 80105c8:	e7e5      	b.n	8010596 <_strtod_l+0x22e>
 80105ca:	4629      	mov	r1, r5
 80105cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80105ce:	1c50      	adds	r0, r2, #1
 80105d0:	9019      	str	r0, [sp, #100]	@ 0x64
 80105d2:	7852      	ldrb	r2, [r2, #1]
 80105d4:	4618      	mov	r0, r3
 80105d6:	460d      	mov	r5, r1
 80105d8:	e7b1      	b.n	801053e <_strtod_l+0x1d6>
 80105da:	f04f 0900 	mov.w	r9, #0
 80105de:	2301      	movs	r3, #1
 80105e0:	e77d      	b.n	80104de <_strtod_l+0x176>
 80105e2:	f04f 0c00 	mov.w	ip, #0
 80105e6:	1ca2      	adds	r2, r4, #2
 80105e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80105ea:	78a2      	ldrb	r2, [r4, #2]
 80105ec:	e785      	b.n	80104fa <_strtod_l+0x192>
 80105ee:	f04f 0c01 	mov.w	ip, #1
 80105f2:	e7f8      	b.n	80105e6 <_strtod_l+0x27e>
 80105f4:	080126e8 	.word	0x080126e8
 80105f8:	080126d0 	.word	0x080126d0
 80105fc:	7ff00000 	.word	0x7ff00000
 8010600:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010602:	1c51      	adds	r1, r2, #1
 8010604:	9119      	str	r1, [sp, #100]	@ 0x64
 8010606:	7852      	ldrb	r2, [r2, #1]
 8010608:	2a30      	cmp	r2, #48	@ 0x30
 801060a:	d0f9      	beq.n	8010600 <_strtod_l+0x298>
 801060c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010610:	2908      	cmp	r1, #8
 8010612:	f63f af78 	bhi.w	8010506 <_strtod_l+0x19e>
 8010616:	3a30      	subs	r2, #48	@ 0x30
 8010618:	920e      	str	r2, [sp, #56]	@ 0x38
 801061a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801061c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801061e:	f04f 080a 	mov.w	r8, #10
 8010622:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010624:	1c56      	adds	r6, r2, #1
 8010626:	9619      	str	r6, [sp, #100]	@ 0x64
 8010628:	7852      	ldrb	r2, [r2, #1]
 801062a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801062e:	f1be 0f09 	cmp.w	lr, #9
 8010632:	d939      	bls.n	80106a8 <_strtod_l+0x340>
 8010634:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010636:	1a76      	subs	r6, r6, r1
 8010638:	2e08      	cmp	r6, #8
 801063a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801063e:	dc03      	bgt.n	8010648 <_strtod_l+0x2e0>
 8010640:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010642:	4588      	cmp	r8, r1
 8010644:	bfa8      	it	ge
 8010646:	4688      	movge	r8, r1
 8010648:	f1bc 0f00 	cmp.w	ip, #0
 801064c:	d001      	beq.n	8010652 <_strtod_l+0x2ea>
 801064e:	f1c8 0800 	rsb	r8, r8, #0
 8010652:	2d00      	cmp	r5, #0
 8010654:	d14e      	bne.n	80106f4 <_strtod_l+0x38c>
 8010656:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010658:	4308      	orrs	r0, r1
 801065a:	f47f aebe 	bne.w	80103da <_strtod_l+0x72>
 801065e:	2b00      	cmp	r3, #0
 8010660:	f47f aed6 	bne.w	8010410 <_strtod_l+0xa8>
 8010664:	2a69      	cmp	r2, #105	@ 0x69
 8010666:	d028      	beq.n	80106ba <_strtod_l+0x352>
 8010668:	dc25      	bgt.n	80106b6 <_strtod_l+0x34e>
 801066a:	2a49      	cmp	r2, #73	@ 0x49
 801066c:	d025      	beq.n	80106ba <_strtod_l+0x352>
 801066e:	2a4e      	cmp	r2, #78	@ 0x4e
 8010670:	f47f aece 	bne.w	8010410 <_strtod_l+0xa8>
 8010674:	499b      	ldr	r1, [pc, #620]	@ (80108e4 <_strtod_l+0x57c>)
 8010676:	a819      	add	r0, sp, #100	@ 0x64
 8010678:	f001 f9e2 	bl	8011a40 <__match>
 801067c:	2800      	cmp	r0, #0
 801067e:	f43f aec7 	beq.w	8010410 <_strtod_l+0xa8>
 8010682:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010684:	781b      	ldrb	r3, [r3, #0]
 8010686:	2b28      	cmp	r3, #40	@ 0x28
 8010688:	d12e      	bne.n	80106e8 <_strtod_l+0x380>
 801068a:	4997      	ldr	r1, [pc, #604]	@ (80108e8 <_strtod_l+0x580>)
 801068c:	aa1c      	add	r2, sp, #112	@ 0x70
 801068e:	a819      	add	r0, sp, #100	@ 0x64
 8010690:	f001 f9ea 	bl	8011a68 <__hexnan>
 8010694:	2805      	cmp	r0, #5
 8010696:	d127      	bne.n	80106e8 <_strtod_l+0x380>
 8010698:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801069a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801069e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80106a2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80106a6:	e698      	b.n	80103da <_strtod_l+0x72>
 80106a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80106aa:	fb08 2101 	mla	r1, r8, r1, r2
 80106ae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80106b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80106b4:	e7b5      	b.n	8010622 <_strtod_l+0x2ba>
 80106b6:	2a6e      	cmp	r2, #110	@ 0x6e
 80106b8:	e7da      	b.n	8010670 <_strtod_l+0x308>
 80106ba:	498c      	ldr	r1, [pc, #560]	@ (80108ec <_strtod_l+0x584>)
 80106bc:	a819      	add	r0, sp, #100	@ 0x64
 80106be:	f001 f9bf 	bl	8011a40 <__match>
 80106c2:	2800      	cmp	r0, #0
 80106c4:	f43f aea4 	beq.w	8010410 <_strtod_l+0xa8>
 80106c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80106ca:	4989      	ldr	r1, [pc, #548]	@ (80108f0 <_strtod_l+0x588>)
 80106cc:	3b01      	subs	r3, #1
 80106ce:	a819      	add	r0, sp, #100	@ 0x64
 80106d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80106d2:	f001 f9b5 	bl	8011a40 <__match>
 80106d6:	b910      	cbnz	r0, 80106de <_strtod_l+0x376>
 80106d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80106da:	3301      	adds	r3, #1
 80106dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80106de:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010900 <_strtod_l+0x598>
 80106e2:	f04f 0a00 	mov.w	sl, #0
 80106e6:	e678      	b.n	80103da <_strtod_l+0x72>
 80106e8:	4882      	ldr	r0, [pc, #520]	@ (80108f4 <_strtod_l+0x58c>)
 80106ea:	f000 fee5 	bl	80114b8 <nan>
 80106ee:	ec5b ab10 	vmov	sl, fp, d0
 80106f2:	e672      	b.n	80103da <_strtod_l+0x72>
 80106f4:	eba8 0309 	sub.w	r3, r8, r9
 80106f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80106fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80106fc:	2f00      	cmp	r7, #0
 80106fe:	bf08      	it	eq
 8010700:	462f      	moveq	r7, r5
 8010702:	2d10      	cmp	r5, #16
 8010704:	462c      	mov	r4, r5
 8010706:	bfa8      	it	ge
 8010708:	2410      	movge	r4, #16
 801070a:	f7ef ff23 	bl	8000554 <__aeabi_ui2d>
 801070e:	2d09      	cmp	r5, #9
 8010710:	4682      	mov	sl, r0
 8010712:	468b      	mov	fp, r1
 8010714:	dc13      	bgt.n	801073e <_strtod_l+0x3d6>
 8010716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010718:	2b00      	cmp	r3, #0
 801071a:	f43f ae5e 	beq.w	80103da <_strtod_l+0x72>
 801071e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010720:	dd78      	ble.n	8010814 <_strtod_l+0x4ac>
 8010722:	2b16      	cmp	r3, #22
 8010724:	dc5f      	bgt.n	80107e6 <_strtod_l+0x47e>
 8010726:	4974      	ldr	r1, [pc, #464]	@ (80108f8 <_strtod_l+0x590>)
 8010728:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801072c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010730:	4652      	mov	r2, sl
 8010732:	465b      	mov	r3, fp
 8010734:	f7ef ff88 	bl	8000648 <__aeabi_dmul>
 8010738:	4682      	mov	sl, r0
 801073a:	468b      	mov	fp, r1
 801073c:	e64d      	b.n	80103da <_strtod_l+0x72>
 801073e:	4b6e      	ldr	r3, [pc, #440]	@ (80108f8 <_strtod_l+0x590>)
 8010740:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010744:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010748:	f7ef ff7e 	bl	8000648 <__aeabi_dmul>
 801074c:	4682      	mov	sl, r0
 801074e:	9808      	ldr	r0, [sp, #32]
 8010750:	468b      	mov	fp, r1
 8010752:	f7ef feff 	bl	8000554 <__aeabi_ui2d>
 8010756:	4602      	mov	r2, r0
 8010758:	460b      	mov	r3, r1
 801075a:	4650      	mov	r0, sl
 801075c:	4659      	mov	r1, fp
 801075e:	f7ef fdbd 	bl	80002dc <__adddf3>
 8010762:	2d0f      	cmp	r5, #15
 8010764:	4682      	mov	sl, r0
 8010766:	468b      	mov	fp, r1
 8010768:	ddd5      	ble.n	8010716 <_strtod_l+0x3ae>
 801076a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801076c:	1b2c      	subs	r4, r5, r4
 801076e:	441c      	add	r4, r3
 8010770:	2c00      	cmp	r4, #0
 8010772:	f340 8096 	ble.w	80108a2 <_strtod_l+0x53a>
 8010776:	f014 030f 	ands.w	r3, r4, #15
 801077a:	d00a      	beq.n	8010792 <_strtod_l+0x42a>
 801077c:	495e      	ldr	r1, [pc, #376]	@ (80108f8 <_strtod_l+0x590>)
 801077e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010782:	4652      	mov	r2, sl
 8010784:	465b      	mov	r3, fp
 8010786:	e9d1 0100 	ldrd	r0, r1, [r1]
 801078a:	f7ef ff5d 	bl	8000648 <__aeabi_dmul>
 801078e:	4682      	mov	sl, r0
 8010790:	468b      	mov	fp, r1
 8010792:	f034 040f 	bics.w	r4, r4, #15
 8010796:	d073      	beq.n	8010880 <_strtod_l+0x518>
 8010798:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801079c:	dd48      	ble.n	8010830 <_strtod_l+0x4c8>
 801079e:	2400      	movs	r4, #0
 80107a0:	46a0      	mov	r8, r4
 80107a2:	940a      	str	r4, [sp, #40]	@ 0x28
 80107a4:	46a1      	mov	r9, r4
 80107a6:	9a05      	ldr	r2, [sp, #20]
 80107a8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010900 <_strtod_l+0x598>
 80107ac:	2322      	movs	r3, #34	@ 0x22
 80107ae:	6013      	str	r3, [r2, #0]
 80107b0:	f04f 0a00 	mov.w	sl, #0
 80107b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	f43f ae0f 	beq.w	80103da <_strtod_l+0x72>
 80107bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80107be:	9805      	ldr	r0, [sp, #20]
 80107c0:	f7ff f942 	bl	800fa48 <_Bfree>
 80107c4:	9805      	ldr	r0, [sp, #20]
 80107c6:	4649      	mov	r1, r9
 80107c8:	f7ff f93e 	bl	800fa48 <_Bfree>
 80107cc:	9805      	ldr	r0, [sp, #20]
 80107ce:	4641      	mov	r1, r8
 80107d0:	f7ff f93a 	bl	800fa48 <_Bfree>
 80107d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80107d6:	9805      	ldr	r0, [sp, #20]
 80107d8:	f7ff f936 	bl	800fa48 <_Bfree>
 80107dc:	9805      	ldr	r0, [sp, #20]
 80107de:	4621      	mov	r1, r4
 80107e0:	f7ff f932 	bl	800fa48 <_Bfree>
 80107e4:	e5f9      	b.n	80103da <_strtod_l+0x72>
 80107e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80107ec:	4293      	cmp	r3, r2
 80107ee:	dbbc      	blt.n	801076a <_strtod_l+0x402>
 80107f0:	4c41      	ldr	r4, [pc, #260]	@ (80108f8 <_strtod_l+0x590>)
 80107f2:	f1c5 050f 	rsb	r5, r5, #15
 80107f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80107fa:	4652      	mov	r2, sl
 80107fc:	465b      	mov	r3, fp
 80107fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010802:	f7ef ff21 	bl	8000648 <__aeabi_dmul>
 8010806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010808:	1b5d      	subs	r5, r3, r5
 801080a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801080e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010812:	e78f      	b.n	8010734 <_strtod_l+0x3cc>
 8010814:	3316      	adds	r3, #22
 8010816:	dba8      	blt.n	801076a <_strtod_l+0x402>
 8010818:	4b37      	ldr	r3, [pc, #220]	@ (80108f8 <_strtod_l+0x590>)
 801081a:	eba9 0808 	sub.w	r8, r9, r8
 801081e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010822:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010826:	4650      	mov	r0, sl
 8010828:	4659      	mov	r1, fp
 801082a:	f7f0 f837 	bl	800089c <__aeabi_ddiv>
 801082e:	e783      	b.n	8010738 <_strtod_l+0x3d0>
 8010830:	4b32      	ldr	r3, [pc, #200]	@ (80108fc <_strtod_l+0x594>)
 8010832:	9308      	str	r3, [sp, #32]
 8010834:	2300      	movs	r3, #0
 8010836:	1124      	asrs	r4, r4, #4
 8010838:	4650      	mov	r0, sl
 801083a:	4659      	mov	r1, fp
 801083c:	461e      	mov	r6, r3
 801083e:	2c01      	cmp	r4, #1
 8010840:	dc21      	bgt.n	8010886 <_strtod_l+0x51e>
 8010842:	b10b      	cbz	r3, 8010848 <_strtod_l+0x4e0>
 8010844:	4682      	mov	sl, r0
 8010846:	468b      	mov	fp, r1
 8010848:	492c      	ldr	r1, [pc, #176]	@ (80108fc <_strtod_l+0x594>)
 801084a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801084e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010852:	4652      	mov	r2, sl
 8010854:	465b      	mov	r3, fp
 8010856:	e9d1 0100 	ldrd	r0, r1, [r1]
 801085a:	f7ef fef5 	bl	8000648 <__aeabi_dmul>
 801085e:	4b28      	ldr	r3, [pc, #160]	@ (8010900 <_strtod_l+0x598>)
 8010860:	460a      	mov	r2, r1
 8010862:	400b      	ands	r3, r1
 8010864:	4927      	ldr	r1, [pc, #156]	@ (8010904 <_strtod_l+0x59c>)
 8010866:	428b      	cmp	r3, r1
 8010868:	4682      	mov	sl, r0
 801086a:	d898      	bhi.n	801079e <_strtod_l+0x436>
 801086c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010870:	428b      	cmp	r3, r1
 8010872:	bf86      	itte	hi
 8010874:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010908 <_strtod_l+0x5a0>
 8010878:	f04f 3aff 	movhi.w	sl, #4294967295
 801087c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010880:	2300      	movs	r3, #0
 8010882:	9308      	str	r3, [sp, #32]
 8010884:	e07a      	b.n	801097c <_strtod_l+0x614>
 8010886:	07e2      	lsls	r2, r4, #31
 8010888:	d505      	bpl.n	8010896 <_strtod_l+0x52e>
 801088a:	9b08      	ldr	r3, [sp, #32]
 801088c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010890:	f7ef feda 	bl	8000648 <__aeabi_dmul>
 8010894:	2301      	movs	r3, #1
 8010896:	9a08      	ldr	r2, [sp, #32]
 8010898:	3208      	adds	r2, #8
 801089a:	3601      	adds	r6, #1
 801089c:	1064      	asrs	r4, r4, #1
 801089e:	9208      	str	r2, [sp, #32]
 80108a0:	e7cd      	b.n	801083e <_strtod_l+0x4d6>
 80108a2:	d0ed      	beq.n	8010880 <_strtod_l+0x518>
 80108a4:	4264      	negs	r4, r4
 80108a6:	f014 020f 	ands.w	r2, r4, #15
 80108aa:	d00a      	beq.n	80108c2 <_strtod_l+0x55a>
 80108ac:	4b12      	ldr	r3, [pc, #72]	@ (80108f8 <_strtod_l+0x590>)
 80108ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108b2:	4650      	mov	r0, sl
 80108b4:	4659      	mov	r1, fp
 80108b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ba:	f7ef ffef 	bl	800089c <__aeabi_ddiv>
 80108be:	4682      	mov	sl, r0
 80108c0:	468b      	mov	fp, r1
 80108c2:	1124      	asrs	r4, r4, #4
 80108c4:	d0dc      	beq.n	8010880 <_strtod_l+0x518>
 80108c6:	2c1f      	cmp	r4, #31
 80108c8:	dd20      	ble.n	801090c <_strtod_l+0x5a4>
 80108ca:	2400      	movs	r4, #0
 80108cc:	46a0      	mov	r8, r4
 80108ce:	940a      	str	r4, [sp, #40]	@ 0x28
 80108d0:	46a1      	mov	r9, r4
 80108d2:	9a05      	ldr	r2, [sp, #20]
 80108d4:	2322      	movs	r3, #34	@ 0x22
 80108d6:	f04f 0a00 	mov.w	sl, #0
 80108da:	f04f 0b00 	mov.w	fp, #0
 80108de:	6013      	str	r3, [r2, #0]
 80108e0:	e768      	b.n	80107b4 <_strtod_l+0x44c>
 80108e2:	bf00      	nop
 80108e4:	080124c0 	.word	0x080124c0
 80108e8:	080126d4 	.word	0x080126d4
 80108ec:	080124b8 	.word	0x080124b8
 80108f0:	080124ef 	.word	0x080124ef
 80108f4:	0801287d 	.word	0x0801287d
 80108f8:	08012608 	.word	0x08012608
 80108fc:	080125e0 	.word	0x080125e0
 8010900:	7ff00000 	.word	0x7ff00000
 8010904:	7ca00000 	.word	0x7ca00000
 8010908:	7fefffff 	.word	0x7fefffff
 801090c:	f014 0310 	ands.w	r3, r4, #16
 8010910:	bf18      	it	ne
 8010912:	236a      	movne	r3, #106	@ 0x6a
 8010914:	4ea9      	ldr	r6, [pc, #676]	@ (8010bbc <_strtod_l+0x854>)
 8010916:	9308      	str	r3, [sp, #32]
 8010918:	4650      	mov	r0, sl
 801091a:	4659      	mov	r1, fp
 801091c:	2300      	movs	r3, #0
 801091e:	07e2      	lsls	r2, r4, #31
 8010920:	d504      	bpl.n	801092c <_strtod_l+0x5c4>
 8010922:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010926:	f7ef fe8f 	bl	8000648 <__aeabi_dmul>
 801092a:	2301      	movs	r3, #1
 801092c:	1064      	asrs	r4, r4, #1
 801092e:	f106 0608 	add.w	r6, r6, #8
 8010932:	d1f4      	bne.n	801091e <_strtod_l+0x5b6>
 8010934:	b10b      	cbz	r3, 801093a <_strtod_l+0x5d2>
 8010936:	4682      	mov	sl, r0
 8010938:	468b      	mov	fp, r1
 801093a:	9b08      	ldr	r3, [sp, #32]
 801093c:	b1b3      	cbz	r3, 801096c <_strtod_l+0x604>
 801093e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010942:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010946:	2b00      	cmp	r3, #0
 8010948:	4659      	mov	r1, fp
 801094a:	dd0f      	ble.n	801096c <_strtod_l+0x604>
 801094c:	2b1f      	cmp	r3, #31
 801094e:	dd55      	ble.n	80109fc <_strtod_l+0x694>
 8010950:	2b34      	cmp	r3, #52	@ 0x34
 8010952:	bfde      	ittt	le
 8010954:	f04f 33ff 	movle.w	r3, #4294967295
 8010958:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801095c:	4093      	lslle	r3, r2
 801095e:	f04f 0a00 	mov.w	sl, #0
 8010962:	bfcc      	ite	gt
 8010964:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010968:	ea03 0b01 	andle.w	fp, r3, r1
 801096c:	2200      	movs	r2, #0
 801096e:	2300      	movs	r3, #0
 8010970:	4650      	mov	r0, sl
 8010972:	4659      	mov	r1, fp
 8010974:	f7f0 f8d0 	bl	8000b18 <__aeabi_dcmpeq>
 8010978:	2800      	cmp	r0, #0
 801097a:	d1a6      	bne.n	80108ca <_strtod_l+0x562>
 801097c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801097e:	9300      	str	r3, [sp, #0]
 8010980:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010982:	9805      	ldr	r0, [sp, #20]
 8010984:	462b      	mov	r3, r5
 8010986:	463a      	mov	r2, r7
 8010988:	f7ff f8c6 	bl	800fb18 <__s2b>
 801098c:	900a      	str	r0, [sp, #40]	@ 0x28
 801098e:	2800      	cmp	r0, #0
 8010990:	f43f af05 	beq.w	801079e <_strtod_l+0x436>
 8010994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010996:	2a00      	cmp	r2, #0
 8010998:	eba9 0308 	sub.w	r3, r9, r8
 801099c:	bfa8      	it	ge
 801099e:	2300      	movge	r3, #0
 80109a0:	9312      	str	r3, [sp, #72]	@ 0x48
 80109a2:	2400      	movs	r4, #0
 80109a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80109a8:	9316      	str	r3, [sp, #88]	@ 0x58
 80109aa:	46a0      	mov	r8, r4
 80109ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109ae:	9805      	ldr	r0, [sp, #20]
 80109b0:	6859      	ldr	r1, [r3, #4]
 80109b2:	f7ff f809 	bl	800f9c8 <_Balloc>
 80109b6:	4681      	mov	r9, r0
 80109b8:	2800      	cmp	r0, #0
 80109ba:	f43f aef4 	beq.w	80107a6 <_strtod_l+0x43e>
 80109be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109c0:	691a      	ldr	r2, [r3, #16]
 80109c2:	3202      	adds	r2, #2
 80109c4:	f103 010c 	add.w	r1, r3, #12
 80109c8:	0092      	lsls	r2, r2, #2
 80109ca:	300c      	adds	r0, #12
 80109cc:	f7fe f899 	bl	800eb02 <memcpy>
 80109d0:	ec4b ab10 	vmov	d0, sl, fp
 80109d4:	9805      	ldr	r0, [sp, #20]
 80109d6:	aa1c      	add	r2, sp, #112	@ 0x70
 80109d8:	a91b      	add	r1, sp, #108	@ 0x6c
 80109da:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80109de:	f7ff fbd7 	bl	8010190 <__d2b>
 80109e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80109e4:	2800      	cmp	r0, #0
 80109e6:	f43f aede 	beq.w	80107a6 <_strtod_l+0x43e>
 80109ea:	9805      	ldr	r0, [sp, #20]
 80109ec:	2101      	movs	r1, #1
 80109ee:	f7ff f929 	bl	800fc44 <__i2b>
 80109f2:	4680      	mov	r8, r0
 80109f4:	b948      	cbnz	r0, 8010a0a <_strtod_l+0x6a2>
 80109f6:	f04f 0800 	mov.w	r8, #0
 80109fa:	e6d4      	b.n	80107a6 <_strtod_l+0x43e>
 80109fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010a00:	fa02 f303 	lsl.w	r3, r2, r3
 8010a04:	ea03 0a0a 	and.w	sl, r3, sl
 8010a08:	e7b0      	b.n	801096c <_strtod_l+0x604>
 8010a0a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010a0c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010a0e:	2d00      	cmp	r5, #0
 8010a10:	bfab      	itete	ge
 8010a12:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010a14:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010a16:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010a18:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010a1a:	bfac      	ite	ge
 8010a1c:	18ef      	addge	r7, r5, r3
 8010a1e:	1b5e      	sublt	r6, r3, r5
 8010a20:	9b08      	ldr	r3, [sp, #32]
 8010a22:	1aed      	subs	r5, r5, r3
 8010a24:	4415      	add	r5, r2
 8010a26:	4b66      	ldr	r3, [pc, #408]	@ (8010bc0 <_strtod_l+0x858>)
 8010a28:	3d01      	subs	r5, #1
 8010a2a:	429d      	cmp	r5, r3
 8010a2c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010a30:	da50      	bge.n	8010ad4 <_strtod_l+0x76c>
 8010a32:	1b5b      	subs	r3, r3, r5
 8010a34:	2b1f      	cmp	r3, #31
 8010a36:	eba2 0203 	sub.w	r2, r2, r3
 8010a3a:	f04f 0101 	mov.w	r1, #1
 8010a3e:	dc3d      	bgt.n	8010abc <_strtod_l+0x754>
 8010a40:	fa01 f303 	lsl.w	r3, r1, r3
 8010a44:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010a46:	2300      	movs	r3, #0
 8010a48:	9310      	str	r3, [sp, #64]	@ 0x40
 8010a4a:	18bd      	adds	r5, r7, r2
 8010a4c:	9b08      	ldr	r3, [sp, #32]
 8010a4e:	42af      	cmp	r7, r5
 8010a50:	4416      	add	r6, r2
 8010a52:	441e      	add	r6, r3
 8010a54:	463b      	mov	r3, r7
 8010a56:	bfa8      	it	ge
 8010a58:	462b      	movge	r3, r5
 8010a5a:	42b3      	cmp	r3, r6
 8010a5c:	bfa8      	it	ge
 8010a5e:	4633      	movge	r3, r6
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	bfc2      	ittt	gt
 8010a64:	1aed      	subgt	r5, r5, r3
 8010a66:	1af6      	subgt	r6, r6, r3
 8010a68:	1aff      	subgt	r7, r7, r3
 8010a6a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	dd16      	ble.n	8010a9e <_strtod_l+0x736>
 8010a70:	4641      	mov	r1, r8
 8010a72:	9805      	ldr	r0, [sp, #20]
 8010a74:	461a      	mov	r2, r3
 8010a76:	f7ff f9a5 	bl	800fdc4 <__pow5mult>
 8010a7a:	4680      	mov	r8, r0
 8010a7c:	2800      	cmp	r0, #0
 8010a7e:	d0ba      	beq.n	80109f6 <_strtod_l+0x68e>
 8010a80:	4601      	mov	r1, r0
 8010a82:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010a84:	9805      	ldr	r0, [sp, #20]
 8010a86:	f7ff f8f3 	bl	800fc70 <__multiply>
 8010a8a:	900e      	str	r0, [sp, #56]	@ 0x38
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	f43f ae8a 	beq.w	80107a6 <_strtod_l+0x43e>
 8010a92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010a94:	9805      	ldr	r0, [sp, #20]
 8010a96:	f7fe ffd7 	bl	800fa48 <_Bfree>
 8010a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a9e:	2d00      	cmp	r5, #0
 8010aa0:	dc1d      	bgt.n	8010ade <_strtod_l+0x776>
 8010aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	dd23      	ble.n	8010af0 <_strtod_l+0x788>
 8010aa8:	4649      	mov	r1, r9
 8010aaa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010aac:	9805      	ldr	r0, [sp, #20]
 8010aae:	f7ff f989 	bl	800fdc4 <__pow5mult>
 8010ab2:	4681      	mov	r9, r0
 8010ab4:	b9e0      	cbnz	r0, 8010af0 <_strtod_l+0x788>
 8010ab6:	f04f 0900 	mov.w	r9, #0
 8010aba:	e674      	b.n	80107a6 <_strtod_l+0x43e>
 8010abc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010ac0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010ac4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010ac8:	35e2      	adds	r5, #226	@ 0xe2
 8010aca:	fa01 f305 	lsl.w	r3, r1, r5
 8010ace:	9310      	str	r3, [sp, #64]	@ 0x40
 8010ad0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010ad2:	e7ba      	b.n	8010a4a <_strtod_l+0x6e2>
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	9310      	str	r3, [sp, #64]	@ 0x40
 8010ad8:	2301      	movs	r3, #1
 8010ada:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010adc:	e7b5      	b.n	8010a4a <_strtod_l+0x6e2>
 8010ade:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010ae0:	9805      	ldr	r0, [sp, #20]
 8010ae2:	462a      	mov	r2, r5
 8010ae4:	f7ff f9c8 	bl	800fe78 <__lshift>
 8010ae8:	901a      	str	r0, [sp, #104]	@ 0x68
 8010aea:	2800      	cmp	r0, #0
 8010aec:	d1d9      	bne.n	8010aa2 <_strtod_l+0x73a>
 8010aee:	e65a      	b.n	80107a6 <_strtod_l+0x43e>
 8010af0:	2e00      	cmp	r6, #0
 8010af2:	dd07      	ble.n	8010b04 <_strtod_l+0x79c>
 8010af4:	4649      	mov	r1, r9
 8010af6:	9805      	ldr	r0, [sp, #20]
 8010af8:	4632      	mov	r2, r6
 8010afa:	f7ff f9bd 	bl	800fe78 <__lshift>
 8010afe:	4681      	mov	r9, r0
 8010b00:	2800      	cmp	r0, #0
 8010b02:	d0d8      	beq.n	8010ab6 <_strtod_l+0x74e>
 8010b04:	2f00      	cmp	r7, #0
 8010b06:	dd08      	ble.n	8010b1a <_strtod_l+0x7b2>
 8010b08:	4641      	mov	r1, r8
 8010b0a:	9805      	ldr	r0, [sp, #20]
 8010b0c:	463a      	mov	r2, r7
 8010b0e:	f7ff f9b3 	bl	800fe78 <__lshift>
 8010b12:	4680      	mov	r8, r0
 8010b14:	2800      	cmp	r0, #0
 8010b16:	f43f ae46 	beq.w	80107a6 <_strtod_l+0x43e>
 8010b1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010b1c:	9805      	ldr	r0, [sp, #20]
 8010b1e:	464a      	mov	r2, r9
 8010b20:	f7ff fa32 	bl	800ff88 <__mdiff>
 8010b24:	4604      	mov	r4, r0
 8010b26:	2800      	cmp	r0, #0
 8010b28:	f43f ae3d 	beq.w	80107a6 <_strtod_l+0x43e>
 8010b2c:	68c3      	ldr	r3, [r0, #12]
 8010b2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b30:	2300      	movs	r3, #0
 8010b32:	60c3      	str	r3, [r0, #12]
 8010b34:	4641      	mov	r1, r8
 8010b36:	f7ff fa0b 	bl	800ff50 <__mcmp>
 8010b3a:	2800      	cmp	r0, #0
 8010b3c:	da46      	bge.n	8010bcc <_strtod_l+0x864>
 8010b3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b40:	ea53 030a 	orrs.w	r3, r3, sl
 8010b44:	d16c      	bne.n	8010c20 <_strtod_l+0x8b8>
 8010b46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d168      	bne.n	8010c20 <_strtod_l+0x8b8>
 8010b4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010b52:	0d1b      	lsrs	r3, r3, #20
 8010b54:	051b      	lsls	r3, r3, #20
 8010b56:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010b5a:	d961      	bls.n	8010c20 <_strtod_l+0x8b8>
 8010b5c:	6963      	ldr	r3, [r4, #20]
 8010b5e:	b913      	cbnz	r3, 8010b66 <_strtod_l+0x7fe>
 8010b60:	6923      	ldr	r3, [r4, #16]
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	dd5c      	ble.n	8010c20 <_strtod_l+0x8b8>
 8010b66:	4621      	mov	r1, r4
 8010b68:	2201      	movs	r2, #1
 8010b6a:	9805      	ldr	r0, [sp, #20]
 8010b6c:	f7ff f984 	bl	800fe78 <__lshift>
 8010b70:	4641      	mov	r1, r8
 8010b72:	4604      	mov	r4, r0
 8010b74:	f7ff f9ec 	bl	800ff50 <__mcmp>
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	dd51      	ble.n	8010c20 <_strtod_l+0x8b8>
 8010b7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010b80:	9a08      	ldr	r2, [sp, #32]
 8010b82:	0d1b      	lsrs	r3, r3, #20
 8010b84:	051b      	lsls	r3, r3, #20
 8010b86:	2a00      	cmp	r2, #0
 8010b88:	d06b      	beq.n	8010c62 <_strtod_l+0x8fa>
 8010b8a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010b8e:	d868      	bhi.n	8010c62 <_strtod_l+0x8fa>
 8010b90:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010b94:	f67f ae9d 	bls.w	80108d2 <_strtod_l+0x56a>
 8010b98:	4b0a      	ldr	r3, [pc, #40]	@ (8010bc4 <_strtod_l+0x85c>)
 8010b9a:	4650      	mov	r0, sl
 8010b9c:	4659      	mov	r1, fp
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	f7ef fd52 	bl	8000648 <__aeabi_dmul>
 8010ba4:	4b08      	ldr	r3, [pc, #32]	@ (8010bc8 <_strtod_l+0x860>)
 8010ba6:	400b      	ands	r3, r1
 8010ba8:	4682      	mov	sl, r0
 8010baa:	468b      	mov	fp, r1
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	f47f ae05 	bne.w	80107bc <_strtod_l+0x454>
 8010bb2:	9a05      	ldr	r2, [sp, #20]
 8010bb4:	2322      	movs	r3, #34	@ 0x22
 8010bb6:	6013      	str	r3, [r2, #0]
 8010bb8:	e600      	b.n	80107bc <_strtod_l+0x454>
 8010bba:	bf00      	nop
 8010bbc:	08012700 	.word	0x08012700
 8010bc0:	fffffc02 	.word	0xfffffc02
 8010bc4:	39500000 	.word	0x39500000
 8010bc8:	7ff00000 	.word	0x7ff00000
 8010bcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010bd0:	d165      	bne.n	8010c9e <_strtod_l+0x936>
 8010bd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010bd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010bd8:	b35a      	cbz	r2, 8010c32 <_strtod_l+0x8ca>
 8010bda:	4a9f      	ldr	r2, [pc, #636]	@ (8010e58 <_strtod_l+0xaf0>)
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	d12b      	bne.n	8010c38 <_strtod_l+0x8d0>
 8010be0:	9b08      	ldr	r3, [sp, #32]
 8010be2:	4651      	mov	r1, sl
 8010be4:	b303      	cbz	r3, 8010c28 <_strtod_l+0x8c0>
 8010be6:	4b9d      	ldr	r3, [pc, #628]	@ (8010e5c <_strtod_l+0xaf4>)
 8010be8:	465a      	mov	r2, fp
 8010bea:	4013      	ands	r3, r2
 8010bec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8010bf4:	d81b      	bhi.n	8010c2e <_strtod_l+0x8c6>
 8010bf6:	0d1b      	lsrs	r3, r3, #20
 8010bf8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8010c00:	4299      	cmp	r1, r3
 8010c02:	d119      	bne.n	8010c38 <_strtod_l+0x8d0>
 8010c04:	4b96      	ldr	r3, [pc, #600]	@ (8010e60 <_strtod_l+0xaf8>)
 8010c06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	d102      	bne.n	8010c12 <_strtod_l+0x8aa>
 8010c0c:	3101      	adds	r1, #1
 8010c0e:	f43f adca 	beq.w	80107a6 <_strtod_l+0x43e>
 8010c12:	4b92      	ldr	r3, [pc, #584]	@ (8010e5c <_strtod_l+0xaf4>)
 8010c14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c16:	401a      	ands	r2, r3
 8010c18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010c1c:	f04f 0a00 	mov.w	sl, #0
 8010c20:	9b08      	ldr	r3, [sp, #32]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d1b8      	bne.n	8010b98 <_strtod_l+0x830>
 8010c26:	e5c9      	b.n	80107bc <_strtod_l+0x454>
 8010c28:	f04f 33ff 	mov.w	r3, #4294967295
 8010c2c:	e7e8      	b.n	8010c00 <_strtod_l+0x898>
 8010c2e:	4613      	mov	r3, r2
 8010c30:	e7e6      	b.n	8010c00 <_strtod_l+0x898>
 8010c32:	ea53 030a 	orrs.w	r3, r3, sl
 8010c36:	d0a1      	beq.n	8010b7c <_strtod_l+0x814>
 8010c38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010c3a:	b1db      	cbz	r3, 8010c74 <_strtod_l+0x90c>
 8010c3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c3e:	4213      	tst	r3, r2
 8010c40:	d0ee      	beq.n	8010c20 <_strtod_l+0x8b8>
 8010c42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c44:	9a08      	ldr	r2, [sp, #32]
 8010c46:	4650      	mov	r0, sl
 8010c48:	4659      	mov	r1, fp
 8010c4a:	b1bb      	cbz	r3, 8010c7c <_strtod_l+0x914>
 8010c4c:	f7ff fb6e 	bl	801032c <sulp>
 8010c50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010c54:	ec53 2b10 	vmov	r2, r3, d0
 8010c58:	f7ef fb40 	bl	80002dc <__adddf3>
 8010c5c:	4682      	mov	sl, r0
 8010c5e:	468b      	mov	fp, r1
 8010c60:	e7de      	b.n	8010c20 <_strtod_l+0x8b8>
 8010c62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010c66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010c6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010c6e:	f04f 3aff 	mov.w	sl, #4294967295
 8010c72:	e7d5      	b.n	8010c20 <_strtod_l+0x8b8>
 8010c74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010c76:	ea13 0f0a 	tst.w	r3, sl
 8010c7a:	e7e1      	b.n	8010c40 <_strtod_l+0x8d8>
 8010c7c:	f7ff fb56 	bl	801032c <sulp>
 8010c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010c84:	ec53 2b10 	vmov	r2, r3, d0
 8010c88:	f7ef fb26 	bl	80002d8 <__aeabi_dsub>
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	2300      	movs	r3, #0
 8010c90:	4682      	mov	sl, r0
 8010c92:	468b      	mov	fp, r1
 8010c94:	f7ef ff40 	bl	8000b18 <__aeabi_dcmpeq>
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	d0c1      	beq.n	8010c20 <_strtod_l+0x8b8>
 8010c9c:	e619      	b.n	80108d2 <_strtod_l+0x56a>
 8010c9e:	4641      	mov	r1, r8
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	f7ff facd 	bl	8010240 <__ratio>
 8010ca6:	ec57 6b10 	vmov	r6, r7, d0
 8010caa:	2200      	movs	r2, #0
 8010cac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	4639      	mov	r1, r7
 8010cb4:	f7ef ff44 	bl	8000b40 <__aeabi_dcmple>
 8010cb8:	2800      	cmp	r0, #0
 8010cba:	d06f      	beq.n	8010d9c <_strtod_l+0xa34>
 8010cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d17a      	bne.n	8010db8 <_strtod_l+0xa50>
 8010cc2:	f1ba 0f00 	cmp.w	sl, #0
 8010cc6:	d158      	bne.n	8010d7a <_strtod_l+0xa12>
 8010cc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d15a      	bne.n	8010d88 <_strtod_l+0xa20>
 8010cd2:	4b64      	ldr	r3, [pc, #400]	@ (8010e64 <_strtod_l+0xafc>)
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	4630      	mov	r0, r6
 8010cd8:	4639      	mov	r1, r7
 8010cda:	f7ef ff27 	bl	8000b2c <__aeabi_dcmplt>
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	d159      	bne.n	8010d96 <_strtod_l+0xa2e>
 8010ce2:	4630      	mov	r0, r6
 8010ce4:	4639      	mov	r1, r7
 8010ce6:	4b60      	ldr	r3, [pc, #384]	@ (8010e68 <_strtod_l+0xb00>)
 8010ce8:	2200      	movs	r2, #0
 8010cea:	f7ef fcad 	bl	8000648 <__aeabi_dmul>
 8010cee:	4606      	mov	r6, r0
 8010cf0:	460f      	mov	r7, r1
 8010cf2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010cf6:	9606      	str	r6, [sp, #24]
 8010cf8:	9307      	str	r3, [sp, #28]
 8010cfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010cfe:	4d57      	ldr	r5, [pc, #348]	@ (8010e5c <_strtod_l+0xaf4>)
 8010d00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010d04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d06:	401d      	ands	r5, r3
 8010d08:	4b58      	ldr	r3, [pc, #352]	@ (8010e6c <_strtod_l+0xb04>)
 8010d0a:	429d      	cmp	r5, r3
 8010d0c:	f040 80b2 	bne.w	8010e74 <_strtod_l+0xb0c>
 8010d10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010d16:	ec4b ab10 	vmov	d0, sl, fp
 8010d1a:	f7ff f9c9 	bl	80100b0 <__ulp>
 8010d1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d22:	ec51 0b10 	vmov	r0, r1, d0
 8010d26:	f7ef fc8f 	bl	8000648 <__aeabi_dmul>
 8010d2a:	4652      	mov	r2, sl
 8010d2c:	465b      	mov	r3, fp
 8010d2e:	f7ef fad5 	bl	80002dc <__adddf3>
 8010d32:	460b      	mov	r3, r1
 8010d34:	4949      	ldr	r1, [pc, #292]	@ (8010e5c <_strtod_l+0xaf4>)
 8010d36:	4a4e      	ldr	r2, [pc, #312]	@ (8010e70 <_strtod_l+0xb08>)
 8010d38:	4019      	ands	r1, r3
 8010d3a:	4291      	cmp	r1, r2
 8010d3c:	4682      	mov	sl, r0
 8010d3e:	d942      	bls.n	8010dc6 <_strtod_l+0xa5e>
 8010d40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010d42:	4b47      	ldr	r3, [pc, #284]	@ (8010e60 <_strtod_l+0xaf8>)
 8010d44:	429a      	cmp	r2, r3
 8010d46:	d103      	bne.n	8010d50 <_strtod_l+0x9e8>
 8010d48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	f43f ad2b 	beq.w	80107a6 <_strtod_l+0x43e>
 8010d50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010e60 <_strtod_l+0xaf8>
 8010d54:	f04f 3aff 	mov.w	sl, #4294967295
 8010d58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010d5a:	9805      	ldr	r0, [sp, #20]
 8010d5c:	f7fe fe74 	bl	800fa48 <_Bfree>
 8010d60:	9805      	ldr	r0, [sp, #20]
 8010d62:	4649      	mov	r1, r9
 8010d64:	f7fe fe70 	bl	800fa48 <_Bfree>
 8010d68:	9805      	ldr	r0, [sp, #20]
 8010d6a:	4641      	mov	r1, r8
 8010d6c:	f7fe fe6c 	bl	800fa48 <_Bfree>
 8010d70:	9805      	ldr	r0, [sp, #20]
 8010d72:	4621      	mov	r1, r4
 8010d74:	f7fe fe68 	bl	800fa48 <_Bfree>
 8010d78:	e618      	b.n	80109ac <_strtod_l+0x644>
 8010d7a:	f1ba 0f01 	cmp.w	sl, #1
 8010d7e:	d103      	bne.n	8010d88 <_strtod_l+0xa20>
 8010d80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	f43f ada5 	beq.w	80108d2 <_strtod_l+0x56a>
 8010d88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010e38 <_strtod_l+0xad0>
 8010d8c:	4f35      	ldr	r7, [pc, #212]	@ (8010e64 <_strtod_l+0xafc>)
 8010d8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010d92:	2600      	movs	r6, #0
 8010d94:	e7b1      	b.n	8010cfa <_strtod_l+0x992>
 8010d96:	4f34      	ldr	r7, [pc, #208]	@ (8010e68 <_strtod_l+0xb00>)
 8010d98:	2600      	movs	r6, #0
 8010d9a:	e7aa      	b.n	8010cf2 <_strtod_l+0x98a>
 8010d9c:	4b32      	ldr	r3, [pc, #200]	@ (8010e68 <_strtod_l+0xb00>)
 8010d9e:	4630      	mov	r0, r6
 8010da0:	4639      	mov	r1, r7
 8010da2:	2200      	movs	r2, #0
 8010da4:	f7ef fc50 	bl	8000648 <__aeabi_dmul>
 8010da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010daa:	4606      	mov	r6, r0
 8010dac:	460f      	mov	r7, r1
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d09f      	beq.n	8010cf2 <_strtod_l+0x98a>
 8010db2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010db6:	e7a0      	b.n	8010cfa <_strtod_l+0x992>
 8010db8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010e40 <_strtod_l+0xad8>
 8010dbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010dc0:	ec57 6b17 	vmov	r6, r7, d7
 8010dc4:	e799      	b.n	8010cfa <_strtod_l+0x992>
 8010dc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010dca:	9b08      	ldr	r3, [sp, #32]
 8010dcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d1c1      	bne.n	8010d58 <_strtod_l+0x9f0>
 8010dd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010dd8:	0d1b      	lsrs	r3, r3, #20
 8010dda:	051b      	lsls	r3, r3, #20
 8010ddc:	429d      	cmp	r5, r3
 8010dde:	d1bb      	bne.n	8010d58 <_strtod_l+0x9f0>
 8010de0:	4630      	mov	r0, r6
 8010de2:	4639      	mov	r1, r7
 8010de4:	f7ef ff90 	bl	8000d08 <__aeabi_d2lz>
 8010de8:	f7ef fc00 	bl	80005ec <__aeabi_l2d>
 8010dec:	4602      	mov	r2, r0
 8010dee:	460b      	mov	r3, r1
 8010df0:	4630      	mov	r0, r6
 8010df2:	4639      	mov	r1, r7
 8010df4:	f7ef fa70 	bl	80002d8 <__aeabi_dsub>
 8010df8:	460b      	mov	r3, r1
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010e00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e06:	ea46 060a 	orr.w	r6, r6, sl
 8010e0a:	431e      	orrs	r6, r3
 8010e0c:	d06f      	beq.n	8010eee <_strtod_l+0xb86>
 8010e0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010e48 <_strtod_l+0xae0>)
 8010e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e14:	f7ef fe8a 	bl	8000b2c <__aeabi_dcmplt>
 8010e18:	2800      	cmp	r0, #0
 8010e1a:	f47f accf 	bne.w	80107bc <_strtod_l+0x454>
 8010e1e:	a30c      	add	r3, pc, #48	@ (adr r3, 8010e50 <_strtod_l+0xae8>)
 8010e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e28:	f7ef fe9e 	bl	8000b68 <__aeabi_dcmpgt>
 8010e2c:	2800      	cmp	r0, #0
 8010e2e:	d093      	beq.n	8010d58 <_strtod_l+0x9f0>
 8010e30:	e4c4      	b.n	80107bc <_strtod_l+0x454>
 8010e32:	bf00      	nop
 8010e34:	f3af 8000 	nop.w
 8010e38:	00000000 	.word	0x00000000
 8010e3c:	bff00000 	.word	0xbff00000
 8010e40:	00000000 	.word	0x00000000
 8010e44:	3ff00000 	.word	0x3ff00000
 8010e48:	94a03595 	.word	0x94a03595
 8010e4c:	3fdfffff 	.word	0x3fdfffff
 8010e50:	35afe535 	.word	0x35afe535
 8010e54:	3fe00000 	.word	0x3fe00000
 8010e58:	000fffff 	.word	0x000fffff
 8010e5c:	7ff00000 	.word	0x7ff00000
 8010e60:	7fefffff 	.word	0x7fefffff
 8010e64:	3ff00000 	.word	0x3ff00000
 8010e68:	3fe00000 	.word	0x3fe00000
 8010e6c:	7fe00000 	.word	0x7fe00000
 8010e70:	7c9fffff 	.word	0x7c9fffff
 8010e74:	9b08      	ldr	r3, [sp, #32]
 8010e76:	b323      	cbz	r3, 8010ec2 <_strtod_l+0xb5a>
 8010e78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010e7c:	d821      	bhi.n	8010ec2 <_strtod_l+0xb5a>
 8010e7e:	a328      	add	r3, pc, #160	@ (adr r3, 8010f20 <_strtod_l+0xbb8>)
 8010e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e84:	4630      	mov	r0, r6
 8010e86:	4639      	mov	r1, r7
 8010e88:	f7ef fe5a 	bl	8000b40 <__aeabi_dcmple>
 8010e8c:	b1a0      	cbz	r0, 8010eb8 <_strtod_l+0xb50>
 8010e8e:	4639      	mov	r1, r7
 8010e90:	4630      	mov	r0, r6
 8010e92:	f7ef feb1 	bl	8000bf8 <__aeabi_d2uiz>
 8010e96:	2801      	cmp	r0, #1
 8010e98:	bf38      	it	cc
 8010e9a:	2001      	movcc	r0, #1
 8010e9c:	f7ef fb5a 	bl	8000554 <__aeabi_ui2d>
 8010ea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ea2:	4606      	mov	r6, r0
 8010ea4:	460f      	mov	r7, r1
 8010ea6:	b9fb      	cbnz	r3, 8010ee8 <_strtod_l+0xb80>
 8010ea8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010eac:	9014      	str	r0, [sp, #80]	@ 0x50
 8010eae:	9315      	str	r3, [sp, #84]	@ 0x54
 8010eb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010eb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010eb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010eba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010ebe:	1b5b      	subs	r3, r3, r5
 8010ec0:	9311      	str	r3, [sp, #68]	@ 0x44
 8010ec2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010ec6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010eca:	f7ff f8f1 	bl	80100b0 <__ulp>
 8010ece:	4650      	mov	r0, sl
 8010ed0:	ec53 2b10 	vmov	r2, r3, d0
 8010ed4:	4659      	mov	r1, fp
 8010ed6:	f7ef fbb7 	bl	8000648 <__aeabi_dmul>
 8010eda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010ede:	f7ef f9fd 	bl	80002dc <__adddf3>
 8010ee2:	4682      	mov	sl, r0
 8010ee4:	468b      	mov	fp, r1
 8010ee6:	e770      	b.n	8010dca <_strtod_l+0xa62>
 8010ee8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010eec:	e7e0      	b.n	8010eb0 <_strtod_l+0xb48>
 8010eee:	a30e      	add	r3, pc, #56	@ (adr r3, 8010f28 <_strtod_l+0xbc0>)
 8010ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef4:	f7ef fe1a 	bl	8000b2c <__aeabi_dcmplt>
 8010ef8:	e798      	b.n	8010e2c <_strtod_l+0xac4>
 8010efa:	2300      	movs	r3, #0
 8010efc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010efe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010f00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010f02:	6013      	str	r3, [r2, #0]
 8010f04:	f7ff ba6d 	b.w	80103e2 <_strtod_l+0x7a>
 8010f08:	2a65      	cmp	r2, #101	@ 0x65
 8010f0a:	f43f ab66 	beq.w	80105da <_strtod_l+0x272>
 8010f0e:	2a45      	cmp	r2, #69	@ 0x45
 8010f10:	f43f ab63 	beq.w	80105da <_strtod_l+0x272>
 8010f14:	2301      	movs	r3, #1
 8010f16:	f7ff bb9e 	b.w	8010656 <_strtod_l+0x2ee>
 8010f1a:	bf00      	nop
 8010f1c:	f3af 8000 	nop.w
 8010f20:	ffc00000 	.word	0xffc00000
 8010f24:	41dfffff 	.word	0x41dfffff
 8010f28:	94a03595 	.word	0x94a03595
 8010f2c:	3fcfffff 	.word	0x3fcfffff

08010f30 <_strtod_r>:
 8010f30:	4b01      	ldr	r3, [pc, #4]	@ (8010f38 <_strtod_r+0x8>)
 8010f32:	f7ff ba19 	b.w	8010368 <_strtod_l>
 8010f36:	bf00      	nop
 8010f38:	20000104 	.word	0x20000104

08010f3c <_strtol_l.constprop.0>:
 8010f3c:	2b24      	cmp	r3, #36	@ 0x24
 8010f3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f42:	4686      	mov	lr, r0
 8010f44:	4690      	mov	r8, r2
 8010f46:	d801      	bhi.n	8010f4c <_strtol_l.constprop.0+0x10>
 8010f48:	2b01      	cmp	r3, #1
 8010f4a:	d106      	bne.n	8010f5a <_strtol_l.constprop.0+0x1e>
 8010f4c:	f7fd fdac 	bl	800eaa8 <__errno>
 8010f50:	2316      	movs	r3, #22
 8010f52:	6003      	str	r3, [r0, #0]
 8010f54:	2000      	movs	r0, #0
 8010f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f5a:	4834      	ldr	r0, [pc, #208]	@ (801102c <_strtol_l.constprop.0+0xf0>)
 8010f5c:	460d      	mov	r5, r1
 8010f5e:	462a      	mov	r2, r5
 8010f60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f64:	5d06      	ldrb	r6, [r0, r4]
 8010f66:	f016 0608 	ands.w	r6, r6, #8
 8010f6a:	d1f8      	bne.n	8010f5e <_strtol_l.constprop.0+0x22>
 8010f6c:	2c2d      	cmp	r4, #45	@ 0x2d
 8010f6e:	d12d      	bne.n	8010fcc <_strtol_l.constprop.0+0x90>
 8010f70:	782c      	ldrb	r4, [r5, #0]
 8010f72:	2601      	movs	r6, #1
 8010f74:	1c95      	adds	r5, r2, #2
 8010f76:	f033 0210 	bics.w	r2, r3, #16
 8010f7a:	d109      	bne.n	8010f90 <_strtol_l.constprop.0+0x54>
 8010f7c:	2c30      	cmp	r4, #48	@ 0x30
 8010f7e:	d12a      	bne.n	8010fd6 <_strtol_l.constprop.0+0x9a>
 8010f80:	782a      	ldrb	r2, [r5, #0]
 8010f82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010f86:	2a58      	cmp	r2, #88	@ 0x58
 8010f88:	d125      	bne.n	8010fd6 <_strtol_l.constprop.0+0x9a>
 8010f8a:	786c      	ldrb	r4, [r5, #1]
 8010f8c:	2310      	movs	r3, #16
 8010f8e:	3502      	adds	r5, #2
 8010f90:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010f94:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010f98:	2200      	movs	r2, #0
 8010f9a:	fbbc f9f3 	udiv	r9, ip, r3
 8010f9e:	4610      	mov	r0, r2
 8010fa0:	fb03 ca19 	mls	sl, r3, r9, ip
 8010fa4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010fa8:	2f09      	cmp	r7, #9
 8010faa:	d81b      	bhi.n	8010fe4 <_strtol_l.constprop.0+0xa8>
 8010fac:	463c      	mov	r4, r7
 8010fae:	42a3      	cmp	r3, r4
 8010fb0:	dd27      	ble.n	8011002 <_strtol_l.constprop.0+0xc6>
 8010fb2:	1c57      	adds	r7, r2, #1
 8010fb4:	d007      	beq.n	8010fc6 <_strtol_l.constprop.0+0x8a>
 8010fb6:	4581      	cmp	r9, r0
 8010fb8:	d320      	bcc.n	8010ffc <_strtol_l.constprop.0+0xc0>
 8010fba:	d101      	bne.n	8010fc0 <_strtol_l.constprop.0+0x84>
 8010fbc:	45a2      	cmp	sl, r4
 8010fbe:	db1d      	blt.n	8010ffc <_strtol_l.constprop.0+0xc0>
 8010fc0:	fb00 4003 	mla	r0, r0, r3, r4
 8010fc4:	2201      	movs	r2, #1
 8010fc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010fca:	e7eb      	b.n	8010fa4 <_strtol_l.constprop.0+0x68>
 8010fcc:	2c2b      	cmp	r4, #43	@ 0x2b
 8010fce:	bf04      	itt	eq
 8010fd0:	782c      	ldrbeq	r4, [r5, #0]
 8010fd2:	1c95      	addeq	r5, r2, #2
 8010fd4:	e7cf      	b.n	8010f76 <_strtol_l.constprop.0+0x3a>
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d1da      	bne.n	8010f90 <_strtol_l.constprop.0+0x54>
 8010fda:	2c30      	cmp	r4, #48	@ 0x30
 8010fdc:	bf0c      	ite	eq
 8010fde:	2308      	moveq	r3, #8
 8010fe0:	230a      	movne	r3, #10
 8010fe2:	e7d5      	b.n	8010f90 <_strtol_l.constprop.0+0x54>
 8010fe4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010fe8:	2f19      	cmp	r7, #25
 8010fea:	d801      	bhi.n	8010ff0 <_strtol_l.constprop.0+0xb4>
 8010fec:	3c37      	subs	r4, #55	@ 0x37
 8010fee:	e7de      	b.n	8010fae <_strtol_l.constprop.0+0x72>
 8010ff0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010ff4:	2f19      	cmp	r7, #25
 8010ff6:	d804      	bhi.n	8011002 <_strtol_l.constprop.0+0xc6>
 8010ff8:	3c57      	subs	r4, #87	@ 0x57
 8010ffa:	e7d8      	b.n	8010fae <_strtol_l.constprop.0+0x72>
 8010ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8011000:	e7e1      	b.n	8010fc6 <_strtol_l.constprop.0+0x8a>
 8011002:	1c53      	adds	r3, r2, #1
 8011004:	d108      	bne.n	8011018 <_strtol_l.constprop.0+0xdc>
 8011006:	2322      	movs	r3, #34	@ 0x22
 8011008:	f8ce 3000 	str.w	r3, [lr]
 801100c:	4660      	mov	r0, ip
 801100e:	f1b8 0f00 	cmp.w	r8, #0
 8011012:	d0a0      	beq.n	8010f56 <_strtol_l.constprop.0+0x1a>
 8011014:	1e69      	subs	r1, r5, #1
 8011016:	e006      	b.n	8011026 <_strtol_l.constprop.0+0xea>
 8011018:	b106      	cbz	r6, 801101c <_strtol_l.constprop.0+0xe0>
 801101a:	4240      	negs	r0, r0
 801101c:	f1b8 0f00 	cmp.w	r8, #0
 8011020:	d099      	beq.n	8010f56 <_strtol_l.constprop.0+0x1a>
 8011022:	2a00      	cmp	r2, #0
 8011024:	d1f6      	bne.n	8011014 <_strtol_l.constprop.0+0xd8>
 8011026:	f8c8 1000 	str.w	r1, [r8]
 801102a:	e794      	b.n	8010f56 <_strtol_l.constprop.0+0x1a>
 801102c:	08012729 	.word	0x08012729

08011030 <_strtol_r>:
 8011030:	f7ff bf84 	b.w	8010f3c <_strtol_l.constprop.0>

08011034 <__ssputs_r>:
 8011034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011038:	688e      	ldr	r6, [r1, #8]
 801103a:	461f      	mov	r7, r3
 801103c:	42be      	cmp	r6, r7
 801103e:	680b      	ldr	r3, [r1, #0]
 8011040:	4682      	mov	sl, r0
 8011042:	460c      	mov	r4, r1
 8011044:	4690      	mov	r8, r2
 8011046:	d82d      	bhi.n	80110a4 <__ssputs_r+0x70>
 8011048:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801104c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011050:	d026      	beq.n	80110a0 <__ssputs_r+0x6c>
 8011052:	6965      	ldr	r5, [r4, #20]
 8011054:	6909      	ldr	r1, [r1, #16]
 8011056:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801105a:	eba3 0901 	sub.w	r9, r3, r1
 801105e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011062:	1c7b      	adds	r3, r7, #1
 8011064:	444b      	add	r3, r9
 8011066:	106d      	asrs	r5, r5, #1
 8011068:	429d      	cmp	r5, r3
 801106a:	bf38      	it	cc
 801106c:	461d      	movcc	r5, r3
 801106e:	0553      	lsls	r3, r2, #21
 8011070:	d527      	bpl.n	80110c2 <__ssputs_r+0x8e>
 8011072:	4629      	mov	r1, r5
 8011074:	f7fe fc1c 	bl	800f8b0 <_malloc_r>
 8011078:	4606      	mov	r6, r0
 801107a:	b360      	cbz	r0, 80110d6 <__ssputs_r+0xa2>
 801107c:	6921      	ldr	r1, [r4, #16]
 801107e:	464a      	mov	r2, r9
 8011080:	f7fd fd3f 	bl	800eb02 <memcpy>
 8011084:	89a3      	ldrh	r3, [r4, #12]
 8011086:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801108a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801108e:	81a3      	strh	r3, [r4, #12]
 8011090:	6126      	str	r6, [r4, #16]
 8011092:	6165      	str	r5, [r4, #20]
 8011094:	444e      	add	r6, r9
 8011096:	eba5 0509 	sub.w	r5, r5, r9
 801109a:	6026      	str	r6, [r4, #0]
 801109c:	60a5      	str	r5, [r4, #8]
 801109e:	463e      	mov	r6, r7
 80110a0:	42be      	cmp	r6, r7
 80110a2:	d900      	bls.n	80110a6 <__ssputs_r+0x72>
 80110a4:	463e      	mov	r6, r7
 80110a6:	6820      	ldr	r0, [r4, #0]
 80110a8:	4632      	mov	r2, r6
 80110aa:	4641      	mov	r1, r8
 80110ac:	f000 f9c6 	bl	801143c <memmove>
 80110b0:	68a3      	ldr	r3, [r4, #8]
 80110b2:	1b9b      	subs	r3, r3, r6
 80110b4:	60a3      	str	r3, [r4, #8]
 80110b6:	6823      	ldr	r3, [r4, #0]
 80110b8:	4433      	add	r3, r6
 80110ba:	6023      	str	r3, [r4, #0]
 80110bc:	2000      	movs	r0, #0
 80110be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110c2:	462a      	mov	r2, r5
 80110c4:	f000 fd7d 	bl	8011bc2 <_realloc_r>
 80110c8:	4606      	mov	r6, r0
 80110ca:	2800      	cmp	r0, #0
 80110cc:	d1e0      	bne.n	8011090 <__ssputs_r+0x5c>
 80110ce:	6921      	ldr	r1, [r4, #16]
 80110d0:	4650      	mov	r0, sl
 80110d2:	f7fe fb79 	bl	800f7c8 <_free_r>
 80110d6:	230c      	movs	r3, #12
 80110d8:	f8ca 3000 	str.w	r3, [sl]
 80110dc:	89a3      	ldrh	r3, [r4, #12]
 80110de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110e2:	81a3      	strh	r3, [r4, #12]
 80110e4:	f04f 30ff 	mov.w	r0, #4294967295
 80110e8:	e7e9      	b.n	80110be <__ssputs_r+0x8a>
	...

080110ec <_svfiprintf_r>:
 80110ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f0:	4698      	mov	r8, r3
 80110f2:	898b      	ldrh	r3, [r1, #12]
 80110f4:	061b      	lsls	r3, r3, #24
 80110f6:	b09d      	sub	sp, #116	@ 0x74
 80110f8:	4607      	mov	r7, r0
 80110fa:	460d      	mov	r5, r1
 80110fc:	4614      	mov	r4, r2
 80110fe:	d510      	bpl.n	8011122 <_svfiprintf_r+0x36>
 8011100:	690b      	ldr	r3, [r1, #16]
 8011102:	b973      	cbnz	r3, 8011122 <_svfiprintf_r+0x36>
 8011104:	2140      	movs	r1, #64	@ 0x40
 8011106:	f7fe fbd3 	bl	800f8b0 <_malloc_r>
 801110a:	6028      	str	r0, [r5, #0]
 801110c:	6128      	str	r0, [r5, #16]
 801110e:	b930      	cbnz	r0, 801111e <_svfiprintf_r+0x32>
 8011110:	230c      	movs	r3, #12
 8011112:	603b      	str	r3, [r7, #0]
 8011114:	f04f 30ff 	mov.w	r0, #4294967295
 8011118:	b01d      	add	sp, #116	@ 0x74
 801111a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801111e:	2340      	movs	r3, #64	@ 0x40
 8011120:	616b      	str	r3, [r5, #20]
 8011122:	2300      	movs	r3, #0
 8011124:	9309      	str	r3, [sp, #36]	@ 0x24
 8011126:	2320      	movs	r3, #32
 8011128:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801112c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011130:	2330      	movs	r3, #48	@ 0x30
 8011132:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80112d0 <_svfiprintf_r+0x1e4>
 8011136:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801113a:	f04f 0901 	mov.w	r9, #1
 801113e:	4623      	mov	r3, r4
 8011140:	469a      	mov	sl, r3
 8011142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011146:	b10a      	cbz	r2, 801114c <_svfiprintf_r+0x60>
 8011148:	2a25      	cmp	r2, #37	@ 0x25
 801114a:	d1f9      	bne.n	8011140 <_svfiprintf_r+0x54>
 801114c:	ebba 0b04 	subs.w	fp, sl, r4
 8011150:	d00b      	beq.n	801116a <_svfiprintf_r+0x7e>
 8011152:	465b      	mov	r3, fp
 8011154:	4622      	mov	r2, r4
 8011156:	4629      	mov	r1, r5
 8011158:	4638      	mov	r0, r7
 801115a:	f7ff ff6b 	bl	8011034 <__ssputs_r>
 801115e:	3001      	adds	r0, #1
 8011160:	f000 80a7 	beq.w	80112b2 <_svfiprintf_r+0x1c6>
 8011164:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011166:	445a      	add	r2, fp
 8011168:	9209      	str	r2, [sp, #36]	@ 0x24
 801116a:	f89a 3000 	ldrb.w	r3, [sl]
 801116e:	2b00      	cmp	r3, #0
 8011170:	f000 809f 	beq.w	80112b2 <_svfiprintf_r+0x1c6>
 8011174:	2300      	movs	r3, #0
 8011176:	f04f 32ff 	mov.w	r2, #4294967295
 801117a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801117e:	f10a 0a01 	add.w	sl, sl, #1
 8011182:	9304      	str	r3, [sp, #16]
 8011184:	9307      	str	r3, [sp, #28]
 8011186:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801118a:	931a      	str	r3, [sp, #104]	@ 0x68
 801118c:	4654      	mov	r4, sl
 801118e:	2205      	movs	r2, #5
 8011190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011194:	484e      	ldr	r0, [pc, #312]	@ (80112d0 <_svfiprintf_r+0x1e4>)
 8011196:	f7ef f843 	bl	8000220 <memchr>
 801119a:	9a04      	ldr	r2, [sp, #16]
 801119c:	b9d8      	cbnz	r0, 80111d6 <_svfiprintf_r+0xea>
 801119e:	06d0      	lsls	r0, r2, #27
 80111a0:	bf44      	itt	mi
 80111a2:	2320      	movmi	r3, #32
 80111a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111a8:	0711      	lsls	r1, r2, #28
 80111aa:	bf44      	itt	mi
 80111ac:	232b      	movmi	r3, #43	@ 0x2b
 80111ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111b2:	f89a 3000 	ldrb.w	r3, [sl]
 80111b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80111b8:	d015      	beq.n	80111e6 <_svfiprintf_r+0xfa>
 80111ba:	9a07      	ldr	r2, [sp, #28]
 80111bc:	4654      	mov	r4, sl
 80111be:	2000      	movs	r0, #0
 80111c0:	f04f 0c0a 	mov.w	ip, #10
 80111c4:	4621      	mov	r1, r4
 80111c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111ca:	3b30      	subs	r3, #48	@ 0x30
 80111cc:	2b09      	cmp	r3, #9
 80111ce:	d94b      	bls.n	8011268 <_svfiprintf_r+0x17c>
 80111d0:	b1b0      	cbz	r0, 8011200 <_svfiprintf_r+0x114>
 80111d2:	9207      	str	r2, [sp, #28]
 80111d4:	e014      	b.n	8011200 <_svfiprintf_r+0x114>
 80111d6:	eba0 0308 	sub.w	r3, r0, r8
 80111da:	fa09 f303 	lsl.w	r3, r9, r3
 80111de:	4313      	orrs	r3, r2
 80111e0:	9304      	str	r3, [sp, #16]
 80111e2:	46a2      	mov	sl, r4
 80111e4:	e7d2      	b.n	801118c <_svfiprintf_r+0xa0>
 80111e6:	9b03      	ldr	r3, [sp, #12]
 80111e8:	1d19      	adds	r1, r3, #4
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	9103      	str	r1, [sp, #12]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	bfbb      	ittet	lt
 80111f2:	425b      	neglt	r3, r3
 80111f4:	f042 0202 	orrlt.w	r2, r2, #2
 80111f8:	9307      	strge	r3, [sp, #28]
 80111fa:	9307      	strlt	r3, [sp, #28]
 80111fc:	bfb8      	it	lt
 80111fe:	9204      	strlt	r2, [sp, #16]
 8011200:	7823      	ldrb	r3, [r4, #0]
 8011202:	2b2e      	cmp	r3, #46	@ 0x2e
 8011204:	d10a      	bne.n	801121c <_svfiprintf_r+0x130>
 8011206:	7863      	ldrb	r3, [r4, #1]
 8011208:	2b2a      	cmp	r3, #42	@ 0x2a
 801120a:	d132      	bne.n	8011272 <_svfiprintf_r+0x186>
 801120c:	9b03      	ldr	r3, [sp, #12]
 801120e:	1d1a      	adds	r2, r3, #4
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	9203      	str	r2, [sp, #12]
 8011214:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011218:	3402      	adds	r4, #2
 801121a:	9305      	str	r3, [sp, #20]
 801121c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80112e0 <_svfiprintf_r+0x1f4>
 8011220:	7821      	ldrb	r1, [r4, #0]
 8011222:	2203      	movs	r2, #3
 8011224:	4650      	mov	r0, sl
 8011226:	f7ee fffb 	bl	8000220 <memchr>
 801122a:	b138      	cbz	r0, 801123c <_svfiprintf_r+0x150>
 801122c:	9b04      	ldr	r3, [sp, #16]
 801122e:	eba0 000a 	sub.w	r0, r0, sl
 8011232:	2240      	movs	r2, #64	@ 0x40
 8011234:	4082      	lsls	r2, r0
 8011236:	4313      	orrs	r3, r2
 8011238:	3401      	adds	r4, #1
 801123a:	9304      	str	r3, [sp, #16]
 801123c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011240:	4824      	ldr	r0, [pc, #144]	@ (80112d4 <_svfiprintf_r+0x1e8>)
 8011242:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011246:	2206      	movs	r2, #6
 8011248:	f7ee ffea 	bl	8000220 <memchr>
 801124c:	2800      	cmp	r0, #0
 801124e:	d036      	beq.n	80112be <_svfiprintf_r+0x1d2>
 8011250:	4b21      	ldr	r3, [pc, #132]	@ (80112d8 <_svfiprintf_r+0x1ec>)
 8011252:	bb1b      	cbnz	r3, 801129c <_svfiprintf_r+0x1b0>
 8011254:	9b03      	ldr	r3, [sp, #12]
 8011256:	3307      	adds	r3, #7
 8011258:	f023 0307 	bic.w	r3, r3, #7
 801125c:	3308      	adds	r3, #8
 801125e:	9303      	str	r3, [sp, #12]
 8011260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011262:	4433      	add	r3, r6
 8011264:	9309      	str	r3, [sp, #36]	@ 0x24
 8011266:	e76a      	b.n	801113e <_svfiprintf_r+0x52>
 8011268:	fb0c 3202 	mla	r2, ip, r2, r3
 801126c:	460c      	mov	r4, r1
 801126e:	2001      	movs	r0, #1
 8011270:	e7a8      	b.n	80111c4 <_svfiprintf_r+0xd8>
 8011272:	2300      	movs	r3, #0
 8011274:	3401      	adds	r4, #1
 8011276:	9305      	str	r3, [sp, #20]
 8011278:	4619      	mov	r1, r3
 801127a:	f04f 0c0a 	mov.w	ip, #10
 801127e:	4620      	mov	r0, r4
 8011280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011284:	3a30      	subs	r2, #48	@ 0x30
 8011286:	2a09      	cmp	r2, #9
 8011288:	d903      	bls.n	8011292 <_svfiprintf_r+0x1a6>
 801128a:	2b00      	cmp	r3, #0
 801128c:	d0c6      	beq.n	801121c <_svfiprintf_r+0x130>
 801128e:	9105      	str	r1, [sp, #20]
 8011290:	e7c4      	b.n	801121c <_svfiprintf_r+0x130>
 8011292:	fb0c 2101 	mla	r1, ip, r1, r2
 8011296:	4604      	mov	r4, r0
 8011298:	2301      	movs	r3, #1
 801129a:	e7f0      	b.n	801127e <_svfiprintf_r+0x192>
 801129c:	ab03      	add	r3, sp, #12
 801129e:	9300      	str	r3, [sp, #0]
 80112a0:	462a      	mov	r2, r5
 80112a2:	4b0e      	ldr	r3, [pc, #56]	@ (80112dc <_svfiprintf_r+0x1f0>)
 80112a4:	a904      	add	r1, sp, #16
 80112a6:	4638      	mov	r0, r7
 80112a8:	f7fc fcba 	bl	800dc20 <_printf_float>
 80112ac:	1c42      	adds	r2, r0, #1
 80112ae:	4606      	mov	r6, r0
 80112b0:	d1d6      	bne.n	8011260 <_svfiprintf_r+0x174>
 80112b2:	89ab      	ldrh	r3, [r5, #12]
 80112b4:	065b      	lsls	r3, r3, #25
 80112b6:	f53f af2d 	bmi.w	8011114 <_svfiprintf_r+0x28>
 80112ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80112bc:	e72c      	b.n	8011118 <_svfiprintf_r+0x2c>
 80112be:	ab03      	add	r3, sp, #12
 80112c0:	9300      	str	r3, [sp, #0]
 80112c2:	462a      	mov	r2, r5
 80112c4:	4b05      	ldr	r3, [pc, #20]	@ (80112dc <_svfiprintf_r+0x1f0>)
 80112c6:	a904      	add	r1, sp, #16
 80112c8:	4638      	mov	r0, r7
 80112ca:	f7fc ff41 	bl	800e150 <_printf_i>
 80112ce:	e7ed      	b.n	80112ac <_svfiprintf_r+0x1c0>
 80112d0:	08012829 	.word	0x08012829
 80112d4:	08012833 	.word	0x08012833
 80112d8:	0800dc21 	.word	0x0800dc21
 80112dc:	08011035 	.word	0x08011035
 80112e0:	0801282f 	.word	0x0801282f

080112e4 <__sflush_r>:
 80112e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80112e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ec:	0716      	lsls	r6, r2, #28
 80112ee:	4605      	mov	r5, r0
 80112f0:	460c      	mov	r4, r1
 80112f2:	d454      	bmi.n	801139e <__sflush_r+0xba>
 80112f4:	684b      	ldr	r3, [r1, #4]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	dc02      	bgt.n	8011300 <__sflush_r+0x1c>
 80112fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	dd48      	ble.n	8011392 <__sflush_r+0xae>
 8011300:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011302:	2e00      	cmp	r6, #0
 8011304:	d045      	beq.n	8011392 <__sflush_r+0xae>
 8011306:	2300      	movs	r3, #0
 8011308:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801130c:	682f      	ldr	r7, [r5, #0]
 801130e:	6a21      	ldr	r1, [r4, #32]
 8011310:	602b      	str	r3, [r5, #0]
 8011312:	d030      	beq.n	8011376 <__sflush_r+0x92>
 8011314:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011316:	89a3      	ldrh	r3, [r4, #12]
 8011318:	0759      	lsls	r1, r3, #29
 801131a:	d505      	bpl.n	8011328 <__sflush_r+0x44>
 801131c:	6863      	ldr	r3, [r4, #4]
 801131e:	1ad2      	subs	r2, r2, r3
 8011320:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011322:	b10b      	cbz	r3, 8011328 <__sflush_r+0x44>
 8011324:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011326:	1ad2      	subs	r2, r2, r3
 8011328:	2300      	movs	r3, #0
 801132a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801132c:	6a21      	ldr	r1, [r4, #32]
 801132e:	4628      	mov	r0, r5
 8011330:	47b0      	blx	r6
 8011332:	1c43      	adds	r3, r0, #1
 8011334:	89a3      	ldrh	r3, [r4, #12]
 8011336:	d106      	bne.n	8011346 <__sflush_r+0x62>
 8011338:	6829      	ldr	r1, [r5, #0]
 801133a:	291d      	cmp	r1, #29
 801133c:	d82b      	bhi.n	8011396 <__sflush_r+0xb2>
 801133e:	4a2a      	ldr	r2, [pc, #168]	@ (80113e8 <__sflush_r+0x104>)
 8011340:	410a      	asrs	r2, r1
 8011342:	07d6      	lsls	r6, r2, #31
 8011344:	d427      	bmi.n	8011396 <__sflush_r+0xb2>
 8011346:	2200      	movs	r2, #0
 8011348:	6062      	str	r2, [r4, #4]
 801134a:	04d9      	lsls	r1, r3, #19
 801134c:	6922      	ldr	r2, [r4, #16]
 801134e:	6022      	str	r2, [r4, #0]
 8011350:	d504      	bpl.n	801135c <__sflush_r+0x78>
 8011352:	1c42      	adds	r2, r0, #1
 8011354:	d101      	bne.n	801135a <__sflush_r+0x76>
 8011356:	682b      	ldr	r3, [r5, #0]
 8011358:	b903      	cbnz	r3, 801135c <__sflush_r+0x78>
 801135a:	6560      	str	r0, [r4, #84]	@ 0x54
 801135c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801135e:	602f      	str	r7, [r5, #0]
 8011360:	b1b9      	cbz	r1, 8011392 <__sflush_r+0xae>
 8011362:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011366:	4299      	cmp	r1, r3
 8011368:	d002      	beq.n	8011370 <__sflush_r+0x8c>
 801136a:	4628      	mov	r0, r5
 801136c:	f7fe fa2c 	bl	800f7c8 <_free_r>
 8011370:	2300      	movs	r3, #0
 8011372:	6363      	str	r3, [r4, #52]	@ 0x34
 8011374:	e00d      	b.n	8011392 <__sflush_r+0xae>
 8011376:	2301      	movs	r3, #1
 8011378:	4628      	mov	r0, r5
 801137a:	47b0      	blx	r6
 801137c:	4602      	mov	r2, r0
 801137e:	1c50      	adds	r0, r2, #1
 8011380:	d1c9      	bne.n	8011316 <__sflush_r+0x32>
 8011382:	682b      	ldr	r3, [r5, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d0c6      	beq.n	8011316 <__sflush_r+0x32>
 8011388:	2b1d      	cmp	r3, #29
 801138a:	d001      	beq.n	8011390 <__sflush_r+0xac>
 801138c:	2b16      	cmp	r3, #22
 801138e:	d11e      	bne.n	80113ce <__sflush_r+0xea>
 8011390:	602f      	str	r7, [r5, #0]
 8011392:	2000      	movs	r0, #0
 8011394:	e022      	b.n	80113dc <__sflush_r+0xf8>
 8011396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801139a:	b21b      	sxth	r3, r3
 801139c:	e01b      	b.n	80113d6 <__sflush_r+0xf2>
 801139e:	690f      	ldr	r7, [r1, #16]
 80113a0:	2f00      	cmp	r7, #0
 80113a2:	d0f6      	beq.n	8011392 <__sflush_r+0xae>
 80113a4:	0793      	lsls	r3, r2, #30
 80113a6:	680e      	ldr	r6, [r1, #0]
 80113a8:	bf08      	it	eq
 80113aa:	694b      	ldreq	r3, [r1, #20]
 80113ac:	600f      	str	r7, [r1, #0]
 80113ae:	bf18      	it	ne
 80113b0:	2300      	movne	r3, #0
 80113b2:	eba6 0807 	sub.w	r8, r6, r7
 80113b6:	608b      	str	r3, [r1, #8]
 80113b8:	f1b8 0f00 	cmp.w	r8, #0
 80113bc:	dde9      	ble.n	8011392 <__sflush_r+0xae>
 80113be:	6a21      	ldr	r1, [r4, #32]
 80113c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80113c2:	4643      	mov	r3, r8
 80113c4:	463a      	mov	r2, r7
 80113c6:	4628      	mov	r0, r5
 80113c8:	47b0      	blx	r6
 80113ca:	2800      	cmp	r0, #0
 80113cc:	dc08      	bgt.n	80113e0 <__sflush_r+0xfc>
 80113ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113d6:	81a3      	strh	r3, [r4, #12]
 80113d8:	f04f 30ff 	mov.w	r0, #4294967295
 80113dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113e0:	4407      	add	r7, r0
 80113e2:	eba8 0800 	sub.w	r8, r8, r0
 80113e6:	e7e7      	b.n	80113b8 <__sflush_r+0xd4>
 80113e8:	dfbffffe 	.word	0xdfbffffe

080113ec <_fflush_r>:
 80113ec:	b538      	push	{r3, r4, r5, lr}
 80113ee:	690b      	ldr	r3, [r1, #16]
 80113f0:	4605      	mov	r5, r0
 80113f2:	460c      	mov	r4, r1
 80113f4:	b913      	cbnz	r3, 80113fc <_fflush_r+0x10>
 80113f6:	2500      	movs	r5, #0
 80113f8:	4628      	mov	r0, r5
 80113fa:	bd38      	pop	{r3, r4, r5, pc}
 80113fc:	b118      	cbz	r0, 8011406 <_fflush_r+0x1a>
 80113fe:	6a03      	ldr	r3, [r0, #32]
 8011400:	b90b      	cbnz	r3, 8011406 <_fflush_r+0x1a>
 8011402:	f7fd fa65 	bl	800e8d0 <__sinit>
 8011406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d0f3      	beq.n	80113f6 <_fflush_r+0xa>
 801140e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011410:	07d0      	lsls	r0, r2, #31
 8011412:	d404      	bmi.n	801141e <_fflush_r+0x32>
 8011414:	0599      	lsls	r1, r3, #22
 8011416:	d402      	bmi.n	801141e <_fflush_r+0x32>
 8011418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801141a:	f7fd fb70 	bl	800eafe <__retarget_lock_acquire_recursive>
 801141e:	4628      	mov	r0, r5
 8011420:	4621      	mov	r1, r4
 8011422:	f7ff ff5f 	bl	80112e4 <__sflush_r>
 8011426:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011428:	07da      	lsls	r2, r3, #31
 801142a:	4605      	mov	r5, r0
 801142c:	d4e4      	bmi.n	80113f8 <_fflush_r+0xc>
 801142e:	89a3      	ldrh	r3, [r4, #12]
 8011430:	059b      	lsls	r3, r3, #22
 8011432:	d4e1      	bmi.n	80113f8 <_fflush_r+0xc>
 8011434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011436:	f7fd fb63 	bl	800eb00 <__retarget_lock_release_recursive>
 801143a:	e7dd      	b.n	80113f8 <_fflush_r+0xc>

0801143c <memmove>:
 801143c:	4288      	cmp	r0, r1
 801143e:	b510      	push	{r4, lr}
 8011440:	eb01 0402 	add.w	r4, r1, r2
 8011444:	d902      	bls.n	801144c <memmove+0x10>
 8011446:	4284      	cmp	r4, r0
 8011448:	4623      	mov	r3, r4
 801144a:	d807      	bhi.n	801145c <memmove+0x20>
 801144c:	1e43      	subs	r3, r0, #1
 801144e:	42a1      	cmp	r1, r4
 8011450:	d008      	beq.n	8011464 <memmove+0x28>
 8011452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011456:	f803 2f01 	strb.w	r2, [r3, #1]!
 801145a:	e7f8      	b.n	801144e <memmove+0x12>
 801145c:	4402      	add	r2, r0
 801145e:	4601      	mov	r1, r0
 8011460:	428a      	cmp	r2, r1
 8011462:	d100      	bne.n	8011466 <memmove+0x2a>
 8011464:	bd10      	pop	{r4, pc}
 8011466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801146a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801146e:	e7f7      	b.n	8011460 <memmove+0x24>

08011470 <strncmp>:
 8011470:	b510      	push	{r4, lr}
 8011472:	b16a      	cbz	r2, 8011490 <strncmp+0x20>
 8011474:	3901      	subs	r1, #1
 8011476:	1884      	adds	r4, r0, r2
 8011478:	f810 2b01 	ldrb.w	r2, [r0], #1
 801147c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011480:	429a      	cmp	r2, r3
 8011482:	d103      	bne.n	801148c <strncmp+0x1c>
 8011484:	42a0      	cmp	r0, r4
 8011486:	d001      	beq.n	801148c <strncmp+0x1c>
 8011488:	2a00      	cmp	r2, #0
 801148a:	d1f5      	bne.n	8011478 <strncmp+0x8>
 801148c:	1ad0      	subs	r0, r2, r3
 801148e:	bd10      	pop	{r4, pc}
 8011490:	4610      	mov	r0, r2
 8011492:	e7fc      	b.n	801148e <strncmp+0x1e>

08011494 <_sbrk_r>:
 8011494:	b538      	push	{r3, r4, r5, lr}
 8011496:	4d06      	ldr	r5, [pc, #24]	@ (80114b0 <_sbrk_r+0x1c>)
 8011498:	2300      	movs	r3, #0
 801149a:	4604      	mov	r4, r0
 801149c:	4608      	mov	r0, r1
 801149e:	602b      	str	r3, [r5, #0]
 80114a0:	f7f0 fda0 	bl	8001fe4 <_sbrk>
 80114a4:	1c43      	adds	r3, r0, #1
 80114a6:	d102      	bne.n	80114ae <_sbrk_r+0x1a>
 80114a8:	682b      	ldr	r3, [r5, #0]
 80114aa:	b103      	cbz	r3, 80114ae <_sbrk_r+0x1a>
 80114ac:	6023      	str	r3, [r4, #0]
 80114ae:	bd38      	pop	{r3, r4, r5, pc}
 80114b0:	20000a7c 	.word	0x20000a7c
 80114b4:	00000000 	.word	0x00000000

080114b8 <nan>:
 80114b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80114c0 <nan+0x8>
 80114bc:	4770      	bx	lr
 80114be:	bf00      	nop
 80114c0:	00000000 	.word	0x00000000
 80114c4:	7ff80000 	.word	0x7ff80000

080114c8 <__assert_func>:
 80114c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114ca:	4614      	mov	r4, r2
 80114cc:	461a      	mov	r2, r3
 80114ce:	4b09      	ldr	r3, [pc, #36]	@ (80114f4 <__assert_func+0x2c>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	4605      	mov	r5, r0
 80114d4:	68d8      	ldr	r0, [r3, #12]
 80114d6:	b954      	cbnz	r4, 80114ee <__assert_func+0x26>
 80114d8:	4b07      	ldr	r3, [pc, #28]	@ (80114f8 <__assert_func+0x30>)
 80114da:	461c      	mov	r4, r3
 80114dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80114e0:	9100      	str	r1, [sp, #0]
 80114e2:	462b      	mov	r3, r5
 80114e4:	4905      	ldr	r1, [pc, #20]	@ (80114fc <__assert_func+0x34>)
 80114e6:	f000 fba7 	bl	8011c38 <fiprintf>
 80114ea:	f000 fbb7 	bl	8011c5c <abort>
 80114ee:	4b04      	ldr	r3, [pc, #16]	@ (8011500 <__assert_func+0x38>)
 80114f0:	e7f4      	b.n	80114dc <__assert_func+0x14>
 80114f2:	bf00      	nop
 80114f4:	200000b4 	.word	0x200000b4
 80114f8:	0801287d 	.word	0x0801287d
 80114fc:	0801284f 	.word	0x0801284f
 8011500:	08012842 	.word	0x08012842

08011504 <_calloc_r>:
 8011504:	b570      	push	{r4, r5, r6, lr}
 8011506:	fba1 5402 	umull	r5, r4, r1, r2
 801150a:	b93c      	cbnz	r4, 801151c <_calloc_r+0x18>
 801150c:	4629      	mov	r1, r5
 801150e:	f7fe f9cf 	bl	800f8b0 <_malloc_r>
 8011512:	4606      	mov	r6, r0
 8011514:	b928      	cbnz	r0, 8011522 <_calloc_r+0x1e>
 8011516:	2600      	movs	r6, #0
 8011518:	4630      	mov	r0, r6
 801151a:	bd70      	pop	{r4, r5, r6, pc}
 801151c:	220c      	movs	r2, #12
 801151e:	6002      	str	r2, [r0, #0]
 8011520:	e7f9      	b.n	8011516 <_calloc_r+0x12>
 8011522:	462a      	mov	r2, r5
 8011524:	4621      	mov	r1, r4
 8011526:	f7fd fa6c 	bl	800ea02 <memset>
 801152a:	e7f5      	b.n	8011518 <_calloc_r+0x14>

0801152c <rshift>:
 801152c:	6903      	ldr	r3, [r0, #16]
 801152e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011532:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011536:	ea4f 1261 	mov.w	r2, r1, asr #5
 801153a:	f100 0414 	add.w	r4, r0, #20
 801153e:	dd45      	ble.n	80115cc <rshift+0xa0>
 8011540:	f011 011f 	ands.w	r1, r1, #31
 8011544:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011548:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801154c:	d10c      	bne.n	8011568 <rshift+0x3c>
 801154e:	f100 0710 	add.w	r7, r0, #16
 8011552:	4629      	mov	r1, r5
 8011554:	42b1      	cmp	r1, r6
 8011556:	d334      	bcc.n	80115c2 <rshift+0x96>
 8011558:	1a9b      	subs	r3, r3, r2
 801155a:	009b      	lsls	r3, r3, #2
 801155c:	1eea      	subs	r2, r5, #3
 801155e:	4296      	cmp	r6, r2
 8011560:	bf38      	it	cc
 8011562:	2300      	movcc	r3, #0
 8011564:	4423      	add	r3, r4
 8011566:	e015      	b.n	8011594 <rshift+0x68>
 8011568:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801156c:	f1c1 0820 	rsb	r8, r1, #32
 8011570:	40cf      	lsrs	r7, r1
 8011572:	f105 0e04 	add.w	lr, r5, #4
 8011576:	46a1      	mov	r9, r4
 8011578:	4576      	cmp	r6, lr
 801157a:	46f4      	mov	ip, lr
 801157c:	d815      	bhi.n	80115aa <rshift+0x7e>
 801157e:	1a9a      	subs	r2, r3, r2
 8011580:	0092      	lsls	r2, r2, #2
 8011582:	3a04      	subs	r2, #4
 8011584:	3501      	adds	r5, #1
 8011586:	42ae      	cmp	r6, r5
 8011588:	bf38      	it	cc
 801158a:	2200      	movcc	r2, #0
 801158c:	18a3      	adds	r3, r4, r2
 801158e:	50a7      	str	r7, [r4, r2]
 8011590:	b107      	cbz	r7, 8011594 <rshift+0x68>
 8011592:	3304      	adds	r3, #4
 8011594:	1b1a      	subs	r2, r3, r4
 8011596:	42a3      	cmp	r3, r4
 8011598:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801159c:	bf08      	it	eq
 801159e:	2300      	moveq	r3, #0
 80115a0:	6102      	str	r2, [r0, #16]
 80115a2:	bf08      	it	eq
 80115a4:	6143      	streq	r3, [r0, #20]
 80115a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115aa:	f8dc c000 	ldr.w	ip, [ip]
 80115ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80115b2:	ea4c 0707 	orr.w	r7, ip, r7
 80115b6:	f849 7b04 	str.w	r7, [r9], #4
 80115ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80115be:	40cf      	lsrs	r7, r1
 80115c0:	e7da      	b.n	8011578 <rshift+0x4c>
 80115c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80115c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80115ca:	e7c3      	b.n	8011554 <rshift+0x28>
 80115cc:	4623      	mov	r3, r4
 80115ce:	e7e1      	b.n	8011594 <rshift+0x68>

080115d0 <__hexdig_fun>:
 80115d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80115d4:	2b09      	cmp	r3, #9
 80115d6:	d802      	bhi.n	80115de <__hexdig_fun+0xe>
 80115d8:	3820      	subs	r0, #32
 80115da:	b2c0      	uxtb	r0, r0
 80115dc:	4770      	bx	lr
 80115de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80115e2:	2b05      	cmp	r3, #5
 80115e4:	d801      	bhi.n	80115ea <__hexdig_fun+0x1a>
 80115e6:	3847      	subs	r0, #71	@ 0x47
 80115e8:	e7f7      	b.n	80115da <__hexdig_fun+0xa>
 80115ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80115ee:	2b05      	cmp	r3, #5
 80115f0:	d801      	bhi.n	80115f6 <__hexdig_fun+0x26>
 80115f2:	3827      	subs	r0, #39	@ 0x27
 80115f4:	e7f1      	b.n	80115da <__hexdig_fun+0xa>
 80115f6:	2000      	movs	r0, #0
 80115f8:	4770      	bx	lr
	...

080115fc <__gethex>:
 80115fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011600:	b085      	sub	sp, #20
 8011602:	468a      	mov	sl, r1
 8011604:	9302      	str	r3, [sp, #8]
 8011606:	680b      	ldr	r3, [r1, #0]
 8011608:	9001      	str	r0, [sp, #4]
 801160a:	4690      	mov	r8, r2
 801160c:	1c9c      	adds	r4, r3, #2
 801160e:	46a1      	mov	r9, r4
 8011610:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011614:	2830      	cmp	r0, #48	@ 0x30
 8011616:	d0fa      	beq.n	801160e <__gethex+0x12>
 8011618:	eba9 0303 	sub.w	r3, r9, r3
 801161c:	f1a3 0b02 	sub.w	fp, r3, #2
 8011620:	f7ff ffd6 	bl	80115d0 <__hexdig_fun>
 8011624:	4605      	mov	r5, r0
 8011626:	2800      	cmp	r0, #0
 8011628:	d168      	bne.n	80116fc <__gethex+0x100>
 801162a:	49a0      	ldr	r1, [pc, #640]	@ (80118ac <__gethex+0x2b0>)
 801162c:	2201      	movs	r2, #1
 801162e:	4648      	mov	r0, r9
 8011630:	f7ff ff1e 	bl	8011470 <strncmp>
 8011634:	4607      	mov	r7, r0
 8011636:	2800      	cmp	r0, #0
 8011638:	d167      	bne.n	801170a <__gethex+0x10e>
 801163a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801163e:	4626      	mov	r6, r4
 8011640:	f7ff ffc6 	bl	80115d0 <__hexdig_fun>
 8011644:	2800      	cmp	r0, #0
 8011646:	d062      	beq.n	801170e <__gethex+0x112>
 8011648:	4623      	mov	r3, r4
 801164a:	7818      	ldrb	r0, [r3, #0]
 801164c:	2830      	cmp	r0, #48	@ 0x30
 801164e:	4699      	mov	r9, r3
 8011650:	f103 0301 	add.w	r3, r3, #1
 8011654:	d0f9      	beq.n	801164a <__gethex+0x4e>
 8011656:	f7ff ffbb 	bl	80115d0 <__hexdig_fun>
 801165a:	fab0 f580 	clz	r5, r0
 801165e:	096d      	lsrs	r5, r5, #5
 8011660:	f04f 0b01 	mov.w	fp, #1
 8011664:	464a      	mov	r2, r9
 8011666:	4616      	mov	r6, r2
 8011668:	3201      	adds	r2, #1
 801166a:	7830      	ldrb	r0, [r6, #0]
 801166c:	f7ff ffb0 	bl	80115d0 <__hexdig_fun>
 8011670:	2800      	cmp	r0, #0
 8011672:	d1f8      	bne.n	8011666 <__gethex+0x6a>
 8011674:	498d      	ldr	r1, [pc, #564]	@ (80118ac <__gethex+0x2b0>)
 8011676:	2201      	movs	r2, #1
 8011678:	4630      	mov	r0, r6
 801167a:	f7ff fef9 	bl	8011470 <strncmp>
 801167e:	2800      	cmp	r0, #0
 8011680:	d13f      	bne.n	8011702 <__gethex+0x106>
 8011682:	b944      	cbnz	r4, 8011696 <__gethex+0x9a>
 8011684:	1c74      	adds	r4, r6, #1
 8011686:	4622      	mov	r2, r4
 8011688:	4616      	mov	r6, r2
 801168a:	3201      	adds	r2, #1
 801168c:	7830      	ldrb	r0, [r6, #0]
 801168e:	f7ff ff9f 	bl	80115d0 <__hexdig_fun>
 8011692:	2800      	cmp	r0, #0
 8011694:	d1f8      	bne.n	8011688 <__gethex+0x8c>
 8011696:	1ba4      	subs	r4, r4, r6
 8011698:	00a7      	lsls	r7, r4, #2
 801169a:	7833      	ldrb	r3, [r6, #0]
 801169c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80116a0:	2b50      	cmp	r3, #80	@ 0x50
 80116a2:	d13e      	bne.n	8011722 <__gethex+0x126>
 80116a4:	7873      	ldrb	r3, [r6, #1]
 80116a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80116a8:	d033      	beq.n	8011712 <__gethex+0x116>
 80116aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80116ac:	d034      	beq.n	8011718 <__gethex+0x11c>
 80116ae:	1c71      	adds	r1, r6, #1
 80116b0:	2400      	movs	r4, #0
 80116b2:	7808      	ldrb	r0, [r1, #0]
 80116b4:	f7ff ff8c 	bl	80115d0 <__hexdig_fun>
 80116b8:	1e43      	subs	r3, r0, #1
 80116ba:	b2db      	uxtb	r3, r3
 80116bc:	2b18      	cmp	r3, #24
 80116be:	d830      	bhi.n	8011722 <__gethex+0x126>
 80116c0:	f1a0 0210 	sub.w	r2, r0, #16
 80116c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80116c8:	f7ff ff82 	bl	80115d0 <__hexdig_fun>
 80116cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80116d0:	fa5f fc8c 	uxtb.w	ip, ip
 80116d4:	f1bc 0f18 	cmp.w	ip, #24
 80116d8:	f04f 030a 	mov.w	r3, #10
 80116dc:	d91e      	bls.n	801171c <__gethex+0x120>
 80116de:	b104      	cbz	r4, 80116e2 <__gethex+0xe6>
 80116e0:	4252      	negs	r2, r2
 80116e2:	4417      	add	r7, r2
 80116e4:	f8ca 1000 	str.w	r1, [sl]
 80116e8:	b1ed      	cbz	r5, 8011726 <__gethex+0x12a>
 80116ea:	f1bb 0f00 	cmp.w	fp, #0
 80116ee:	bf0c      	ite	eq
 80116f0:	2506      	moveq	r5, #6
 80116f2:	2500      	movne	r5, #0
 80116f4:	4628      	mov	r0, r5
 80116f6:	b005      	add	sp, #20
 80116f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116fc:	2500      	movs	r5, #0
 80116fe:	462c      	mov	r4, r5
 8011700:	e7b0      	b.n	8011664 <__gethex+0x68>
 8011702:	2c00      	cmp	r4, #0
 8011704:	d1c7      	bne.n	8011696 <__gethex+0x9a>
 8011706:	4627      	mov	r7, r4
 8011708:	e7c7      	b.n	801169a <__gethex+0x9e>
 801170a:	464e      	mov	r6, r9
 801170c:	462f      	mov	r7, r5
 801170e:	2501      	movs	r5, #1
 8011710:	e7c3      	b.n	801169a <__gethex+0x9e>
 8011712:	2400      	movs	r4, #0
 8011714:	1cb1      	adds	r1, r6, #2
 8011716:	e7cc      	b.n	80116b2 <__gethex+0xb6>
 8011718:	2401      	movs	r4, #1
 801171a:	e7fb      	b.n	8011714 <__gethex+0x118>
 801171c:	fb03 0002 	mla	r0, r3, r2, r0
 8011720:	e7ce      	b.n	80116c0 <__gethex+0xc4>
 8011722:	4631      	mov	r1, r6
 8011724:	e7de      	b.n	80116e4 <__gethex+0xe8>
 8011726:	eba6 0309 	sub.w	r3, r6, r9
 801172a:	3b01      	subs	r3, #1
 801172c:	4629      	mov	r1, r5
 801172e:	2b07      	cmp	r3, #7
 8011730:	dc0a      	bgt.n	8011748 <__gethex+0x14c>
 8011732:	9801      	ldr	r0, [sp, #4]
 8011734:	f7fe f948 	bl	800f9c8 <_Balloc>
 8011738:	4604      	mov	r4, r0
 801173a:	b940      	cbnz	r0, 801174e <__gethex+0x152>
 801173c:	4b5c      	ldr	r3, [pc, #368]	@ (80118b0 <__gethex+0x2b4>)
 801173e:	4602      	mov	r2, r0
 8011740:	21e4      	movs	r1, #228	@ 0xe4
 8011742:	485c      	ldr	r0, [pc, #368]	@ (80118b4 <__gethex+0x2b8>)
 8011744:	f7ff fec0 	bl	80114c8 <__assert_func>
 8011748:	3101      	adds	r1, #1
 801174a:	105b      	asrs	r3, r3, #1
 801174c:	e7ef      	b.n	801172e <__gethex+0x132>
 801174e:	f100 0a14 	add.w	sl, r0, #20
 8011752:	2300      	movs	r3, #0
 8011754:	4655      	mov	r5, sl
 8011756:	469b      	mov	fp, r3
 8011758:	45b1      	cmp	r9, r6
 801175a:	d337      	bcc.n	80117cc <__gethex+0x1d0>
 801175c:	f845 bb04 	str.w	fp, [r5], #4
 8011760:	eba5 050a 	sub.w	r5, r5, sl
 8011764:	10ad      	asrs	r5, r5, #2
 8011766:	6125      	str	r5, [r4, #16]
 8011768:	4658      	mov	r0, fp
 801176a:	f7fe fa1f 	bl	800fbac <__hi0bits>
 801176e:	016d      	lsls	r5, r5, #5
 8011770:	f8d8 6000 	ldr.w	r6, [r8]
 8011774:	1a2d      	subs	r5, r5, r0
 8011776:	42b5      	cmp	r5, r6
 8011778:	dd54      	ble.n	8011824 <__gethex+0x228>
 801177a:	1bad      	subs	r5, r5, r6
 801177c:	4629      	mov	r1, r5
 801177e:	4620      	mov	r0, r4
 8011780:	f7fe fdb3 	bl	80102ea <__any_on>
 8011784:	4681      	mov	r9, r0
 8011786:	b178      	cbz	r0, 80117a8 <__gethex+0x1ac>
 8011788:	1e6b      	subs	r3, r5, #1
 801178a:	1159      	asrs	r1, r3, #5
 801178c:	f003 021f 	and.w	r2, r3, #31
 8011790:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011794:	f04f 0901 	mov.w	r9, #1
 8011798:	fa09 f202 	lsl.w	r2, r9, r2
 801179c:	420a      	tst	r2, r1
 801179e:	d003      	beq.n	80117a8 <__gethex+0x1ac>
 80117a0:	454b      	cmp	r3, r9
 80117a2:	dc36      	bgt.n	8011812 <__gethex+0x216>
 80117a4:	f04f 0902 	mov.w	r9, #2
 80117a8:	4629      	mov	r1, r5
 80117aa:	4620      	mov	r0, r4
 80117ac:	f7ff febe 	bl	801152c <rshift>
 80117b0:	442f      	add	r7, r5
 80117b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80117b6:	42bb      	cmp	r3, r7
 80117b8:	da42      	bge.n	8011840 <__gethex+0x244>
 80117ba:	9801      	ldr	r0, [sp, #4]
 80117bc:	4621      	mov	r1, r4
 80117be:	f7fe f943 	bl	800fa48 <_Bfree>
 80117c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117c4:	2300      	movs	r3, #0
 80117c6:	6013      	str	r3, [r2, #0]
 80117c8:	25a3      	movs	r5, #163	@ 0xa3
 80117ca:	e793      	b.n	80116f4 <__gethex+0xf8>
 80117cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80117d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80117d2:	d012      	beq.n	80117fa <__gethex+0x1fe>
 80117d4:	2b20      	cmp	r3, #32
 80117d6:	d104      	bne.n	80117e2 <__gethex+0x1e6>
 80117d8:	f845 bb04 	str.w	fp, [r5], #4
 80117dc:	f04f 0b00 	mov.w	fp, #0
 80117e0:	465b      	mov	r3, fp
 80117e2:	7830      	ldrb	r0, [r6, #0]
 80117e4:	9303      	str	r3, [sp, #12]
 80117e6:	f7ff fef3 	bl	80115d0 <__hexdig_fun>
 80117ea:	9b03      	ldr	r3, [sp, #12]
 80117ec:	f000 000f 	and.w	r0, r0, #15
 80117f0:	4098      	lsls	r0, r3
 80117f2:	ea4b 0b00 	orr.w	fp, fp, r0
 80117f6:	3304      	adds	r3, #4
 80117f8:	e7ae      	b.n	8011758 <__gethex+0x15c>
 80117fa:	45b1      	cmp	r9, r6
 80117fc:	d8ea      	bhi.n	80117d4 <__gethex+0x1d8>
 80117fe:	492b      	ldr	r1, [pc, #172]	@ (80118ac <__gethex+0x2b0>)
 8011800:	9303      	str	r3, [sp, #12]
 8011802:	2201      	movs	r2, #1
 8011804:	4630      	mov	r0, r6
 8011806:	f7ff fe33 	bl	8011470 <strncmp>
 801180a:	9b03      	ldr	r3, [sp, #12]
 801180c:	2800      	cmp	r0, #0
 801180e:	d1e1      	bne.n	80117d4 <__gethex+0x1d8>
 8011810:	e7a2      	b.n	8011758 <__gethex+0x15c>
 8011812:	1ea9      	subs	r1, r5, #2
 8011814:	4620      	mov	r0, r4
 8011816:	f7fe fd68 	bl	80102ea <__any_on>
 801181a:	2800      	cmp	r0, #0
 801181c:	d0c2      	beq.n	80117a4 <__gethex+0x1a8>
 801181e:	f04f 0903 	mov.w	r9, #3
 8011822:	e7c1      	b.n	80117a8 <__gethex+0x1ac>
 8011824:	da09      	bge.n	801183a <__gethex+0x23e>
 8011826:	1b75      	subs	r5, r6, r5
 8011828:	4621      	mov	r1, r4
 801182a:	9801      	ldr	r0, [sp, #4]
 801182c:	462a      	mov	r2, r5
 801182e:	f7fe fb23 	bl	800fe78 <__lshift>
 8011832:	1b7f      	subs	r7, r7, r5
 8011834:	4604      	mov	r4, r0
 8011836:	f100 0a14 	add.w	sl, r0, #20
 801183a:	f04f 0900 	mov.w	r9, #0
 801183e:	e7b8      	b.n	80117b2 <__gethex+0x1b6>
 8011840:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011844:	42bd      	cmp	r5, r7
 8011846:	dd6f      	ble.n	8011928 <__gethex+0x32c>
 8011848:	1bed      	subs	r5, r5, r7
 801184a:	42ae      	cmp	r6, r5
 801184c:	dc34      	bgt.n	80118b8 <__gethex+0x2bc>
 801184e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011852:	2b02      	cmp	r3, #2
 8011854:	d022      	beq.n	801189c <__gethex+0x2a0>
 8011856:	2b03      	cmp	r3, #3
 8011858:	d024      	beq.n	80118a4 <__gethex+0x2a8>
 801185a:	2b01      	cmp	r3, #1
 801185c:	d115      	bne.n	801188a <__gethex+0x28e>
 801185e:	42ae      	cmp	r6, r5
 8011860:	d113      	bne.n	801188a <__gethex+0x28e>
 8011862:	2e01      	cmp	r6, #1
 8011864:	d10b      	bne.n	801187e <__gethex+0x282>
 8011866:	9a02      	ldr	r2, [sp, #8]
 8011868:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801186c:	6013      	str	r3, [r2, #0]
 801186e:	2301      	movs	r3, #1
 8011870:	6123      	str	r3, [r4, #16]
 8011872:	f8ca 3000 	str.w	r3, [sl]
 8011876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011878:	2562      	movs	r5, #98	@ 0x62
 801187a:	601c      	str	r4, [r3, #0]
 801187c:	e73a      	b.n	80116f4 <__gethex+0xf8>
 801187e:	1e71      	subs	r1, r6, #1
 8011880:	4620      	mov	r0, r4
 8011882:	f7fe fd32 	bl	80102ea <__any_on>
 8011886:	2800      	cmp	r0, #0
 8011888:	d1ed      	bne.n	8011866 <__gethex+0x26a>
 801188a:	9801      	ldr	r0, [sp, #4]
 801188c:	4621      	mov	r1, r4
 801188e:	f7fe f8db 	bl	800fa48 <_Bfree>
 8011892:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011894:	2300      	movs	r3, #0
 8011896:	6013      	str	r3, [r2, #0]
 8011898:	2550      	movs	r5, #80	@ 0x50
 801189a:	e72b      	b.n	80116f4 <__gethex+0xf8>
 801189c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d1f3      	bne.n	801188a <__gethex+0x28e>
 80118a2:	e7e0      	b.n	8011866 <__gethex+0x26a>
 80118a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d1dd      	bne.n	8011866 <__gethex+0x26a>
 80118aa:	e7ee      	b.n	801188a <__gethex+0x28e>
 80118ac:	080126d0 	.word	0x080126d0
 80118b0:	08012568 	.word	0x08012568
 80118b4:	0801287e 	.word	0x0801287e
 80118b8:	1e6f      	subs	r7, r5, #1
 80118ba:	f1b9 0f00 	cmp.w	r9, #0
 80118be:	d130      	bne.n	8011922 <__gethex+0x326>
 80118c0:	b127      	cbz	r7, 80118cc <__gethex+0x2d0>
 80118c2:	4639      	mov	r1, r7
 80118c4:	4620      	mov	r0, r4
 80118c6:	f7fe fd10 	bl	80102ea <__any_on>
 80118ca:	4681      	mov	r9, r0
 80118cc:	117a      	asrs	r2, r7, #5
 80118ce:	2301      	movs	r3, #1
 80118d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80118d4:	f007 071f 	and.w	r7, r7, #31
 80118d8:	40bb      	lsls	r3, r7
 80118da:	4213      	tst	r3, r2
 80118dc:	4629      	mov	r1, r5
 80118de:	4620      	mov	r0, r4
 80118e0:	bf18      	it	ne
 80118e2:	f049 0902 	orrne.w	r9, r9, #2
 80118e6:	f7ff fe21 	bl	801152c <rshift>
 80118ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80118ee:	1b76      	subs	r6, r6, r5
 80118f0:	2502      	movs	r5, #2
 80118f2:	f1b9 0f00 	cmp.w	r9, #0
 80118f6:	d047      	beq.n	8011988 <__gethex+0x38c>
 80118f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80118fc:	2b02      	cmp	r3, #2
 80118fe:	d015      	beq.n	801192c <__gethex+0x330>
 8011900:	2b03      	cmp	r3, #3
 8011902:	d017      	beq.n	8011934 <__gethex+0x338>
 8011904:	2b01      	cmp	r3, #1
 8011906:	d109      	bne.n	801191c <__gethex+0x320>
 8011908:	f019 0f02 	tst.w	r9, #2
 801190c:	d006      	beq.n	801191c <__gethex+0x320>
 801190e:	f8da 3000 	ldr.w	r3, [sl]
 8011912:	ea49 0903 	orr.w	r9, r9, r3
 8011916:	f019 0f01 	tst.w	r9, #1
 801191a:	d10e      	bne.n	801193a <__gethex+0x33e>
 801191c:	f045 0510 	orr.w	r5, r5, #16
 8011920:	e032      	b.n	8011988 <__gethex+0x38c>
 8011922:	f04f 0901 	mov.w	r9, #1
 8011926:	e7d1      	b.n	80118cc <__gethex+0x2d0>
 8011928:	2501      	movs	r5, #1
 801192a:	e7e2      	b.n	80118f2 <__gethex+0x2f6>
 801192c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801192e:	f1c3 0301 	rsb	r3, r3, #1
 8011932:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011936:	2b00      	cmp	r3, #0
 8011938:	d0f0      	beq.n	801191c <__gethex+0x320>
 801193a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801193e:	f104 0314 	add.w	r3, r4, #20
 8011942:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011946:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801194a:	f04f 0c00 	mov.w	ip, #0
 801194e:	4618      	mov	r0, r3
 8011950:	f853 2b04 	ldr.w	r2, [r3], #4
 8011954:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011958:	d01b      	beq.n	8011992 <__gethex+0x396>
 801195a:	3201      	adds	r2, #1
 801195c:	6002      	str	r2, [r0, #0]
 801195e:	2d02      	cmp	r5, #2
 8011960:	f104 0314 	add.w	r3, r4, #20
 8011964:	d13c      	bne.n	80119e0 <__gethex+0x3e4>
 8011966:	f8d8 2000 	ldr.w	r2, [r8]
 801196a:	3a01      	subs	r2, #1
 801196c:	42b2      	cmp	r2, r6
 801196e:	d109      	bne.n	8011984 <__gethex+0x388>
 8011970:	1171      	asrs	r1, r6, #5
 8011972:	2201      	movs	r2, #1
 8011974:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011978:	f006 061f 	and.w	r6, r6, #31
 801197c:	fa02 f606 	lsl.w	r6, r2, r6
 8011980:	421e      	tst	r6, r3
 8011982:	d13a      	bne.n	80119fa <__gethex+0x3fe>
 8011984:	f045 0520 	orr.w	r5, r5, #32
 8011988:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801198a:	601c      	str	r4, [r3, #0]
 801198c:	9b02      	ldr	r3, [sp, #8]
 801198e:	601f      	str	r7, [r3, #0]
 8011990:	e6b0      	b.n	80116f4 <__gethex+0xf8>
 8011992:	4299      	cmp	r1, r3
 8011994:	f843 cc04 	str.w	ip, [r3, #-4]
 8011998:	d8d9      	bhi.n	801194e <__gethex+0x352>
 801199a:	68a3      	ldr	r3, [r4, #8]
 801199c:	459b      	cmp	fp, r3
 801199e:	db17      	blt.n	80119d0 <__gethex+0x3d4>
 80119a0:	6861      	ldr	r1, [r4, #4]
 80119a2:	9801      	ldr	r0, [sp, #4]
 80119a4:	3101      	adds	r1, #1
 80119a6:	f7fe f80f 	bl	800f9c8 <_Balloc>
 80119aa:	4681      	mov	r9, r0
 80119ac:	b918      	cbnz	r0, 80119b6 <__gethex+0x3ba>
 80119ae:	4b1a      	ldr	r3, [pc, #104]	@ (8011a18 <__gethex+0x41c>)
 80119b0:	4602      	mov	r2, r0
 80119b2:	2184      	movs	r1, #132	@ 0x84
 80119b4:	e6c5      	b.n	8011742 <__gethex+0x146>
 80119b6:	6922      	ldr	r2, [r4, #16]
 80119b8:	3202      	adds	r2, #2
 80119ba:	f104 010c 	add.w	r1, r4, #12
 80119be:	0092      	lsls	r2, r2, #2
 80119c0:	300c      	adds	r0, #12
 80119c2:	f7fd f89e 	bl	800eb02 <memcpy>
 80119c6:	4621      	mov	r1, r4
 80119c8:	9801      	ldr	r0, [sp, #4]
 80119ca:	f7fe f83d 	bl	800fa48 <_Bfree>
 80119ce:	464c      	mov	r4, r9
 80119d0:	6923      	ldr	r3, [r4, #16]
 80119d2:	1c5a      	adds	r2, r3, #1
 80119d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80119d8:	6122      	str	r2, [r4, #16]
 80119da:	2201      	movs	r2, #1
 80119dc:	615a      	str	r2, [r3, #20]
 80119de:	e7be      	b.n	801195e <__gethex+0x362>
 80119e0:	6922      	ldr	r2, [r4, #16]
 80119e2:	455a      	cmp	r2, fp
 80119e4:	dd0b      	ble.n	80119fe <__gethex+0x402>
 80119e6:	2101      	movs	r1, #1
 80119e8:	4620      	mov	r0, r4
 80119ea:	f7ff fd9f 	bl	801152c <rshift>
 80119ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80119f2:	3701      	adds	r7, #1
 80119f4:	42bb      	cmp	r3, r7
 80119f6:	f6ff aee0 	blt.w	80117ba <__gethex+0x1be>
 80119fa:	2501      	movs	r5, #1
 80119fc:	e7c2      	b.n	8011984 <__gethex+0x388>
 80119fe:	f016 061f 	ands.w	r6, r6, #31
 8011a02:	d0fa      	beq.n	80119fa <__gethex+0x3fe>
 8011a04:	4453      	add	r3, sl
 8011a06:	f1c6 0620 	rsb	r6, r6, #32
 8011a0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011a0e:	f7fe f8cd 	bl	800fbac <__hi0bits>
 8011a12:	42b0      	cmp	r0, r6
 8011a14:	dbe7      	blt.n	80119e6 <__gethex+0x3ea>
 8011a16:	e7f0      	b.n	80119fa <__gethex+0x3fe>
 8011a18:	08012568 	.word	0x08012568

08011a1c <L_shift>:
 8011a1c:	f1c2 0208 	rsb	r2, r2, #8
 8011a20:	0092      	lsls	r2, r2, #2
 8011a22:	b570      	push	{r4, r5, r6, lr}
 8011a24:	f1c2 0620 	rsb	r6, r2, #32
 8011a28:	6843      	ldr	r3, [r0, #4]
 8011a2a:	6804      	ldr	r4, [r0, #0]
 8011a2c:	fa03 f506 	lsl.w	r5, r3, r6
 8011a30:	432c      	orrs	r4, r5
 8011a32:	40d3      	lsrs	r3, r2
 8011a34:	6004      	str	r4, [r0, #0]
 8011a36:	f840 3f04 	str.w	r3, [r0, #4]!
 8011a3a:	4288      	cmp	r0, r1
 8011a3c:	d3f4      	bcc.n	8011a28 <L_shift+0xc>
 8011a3e:	bd70      	pop	{r4, r5, r6, pc}

08011a40 <__match>:
 8011a40:	b530      	push	{r4, r5, lr}
 8011a42:	6803      	ldr	r3, [r0, #0]
 8011a44:	3301      	adds	r3, #1
 8011a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a4a:	b914      	cbnz	r4, 8011a52 <__match+0x12>
 8011a4c:	6003      	str	r3, [r0, #0]
 8011a4e:	2001      	movs	r0, #1
 8011a50:	bd30      	pop	{r4, r5, pc}
 8011a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011a5a:	2d19      	cmp	r5, #25
 8011a5c:	bf98      	it	ls
 8011a5e:	3220      	addls	r2, #32
 8011a60:	42a2      	cmp	r2, r4
 8011a62:	d0f0      	beq.n	8011a46 <__match+0x6>
 8011a64:	2000      	movs	r0, #0
 8011a66:	e7f3      	b.n	8011a50 <__match+0x10>

08011a68 <__hexnan>:
 8011a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a6c:	680b      	ldr	r3, [r1, #0]
 8011a6e:	6801      	ldr	r1, [r0, #0]
 8011a70:	115e      	asrs	r6, r3, #5
 8011a72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011a76:	f013 031f 	ands.w	r3, r3, #31
 8011a7a:	b087      	sub	sp, #28
 8011a7c:	bf18      	it	ne
 8011a7e:	3604      	addne	r6, #4
 8011a80:	2500      	movs	r5, #0
 8011a82:	1f37      	subs	r7, r6, #4
 8011a84:	4682      	mov	sl, r0
 8011a86:	4690      	mov	r8, r2
 8011a88:	9301      	str	r3, [sp, #4]
 8011a8a:	f846 5c04 	str.w	r5, [r6, #-4]
 8011a8e:	46b9      	mov	r9, r7
 8011a90:	463c      	mov	r4, r7
 8011a92:	9502      	str	r5, [sp, #8]
 8011a94:	46ab      	mov	fp, r5
 8011a96:	784a      	ldrb	r2, [r1, #1]
 8011a98:	1c4b      	adds	r3, r1, #1
 8011a9a:	9303      	str	r3, [sp, #12]
 8011a9c:	b342      	cbz	r2, 8011af0 <__hexnan+0x88>
 8011a9e:	4610      	mov	r0, r2
 8011aa0:	9105      	str	r1, [sp, #20]
 8011aa2:	9204      	str	r2, [sp, #16]
 8011aa4:	f7ff fd94 	bl	80115d0 <__hexdig_fun>
 8011aa8:	2800      	cmp	r0, #0
 8011aaa:	d151      	bne.n	8011b50 <__hexnan+0xe8>
 8011aac:	9a04      	ldr	r2, [sp, #16]
 8011aae:	9905      	ldr	r1, [sp, #20]
 8011ab0:	2a20      	cmp	r2, #32
 8011ab2:	d818      	bhi.n	8011ae6 <__hexnan+0x7e>
 8011ab4:	9b02      	ldr	r3, [sp, #8]
 8011ab6:	459b      	cmp	fp, r3
 8011ab8:	dd13      	ble.n	8011ae2 <__hexnan+0x7a>
 8011aba:	454c      	cmp	r4, r9
 8011abc:	d206      	bcs.n	8011acc <__hexnan+0x64>
 8011abe:	2d07      	cmp	r5, #7
 8011ac0:	dc04      	bgt.n	8011acc <__hexnan+0x64>
 8011ac2:	462a      	mov	r2, r5
 8011ac4:	4649      	mov	r1, r9
 8011ac6:	4620      	mov	r0, r4
 8011ac8:	f7ff ffa8 	bl	8011a1c <L_shift>
 8011acc:	4544      	cmp	r4, r8
 8011ace:	d952      	bls.n	8011b76 <__hexnan+0x10e>
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	f1a4 0904 	sub.w	r9, r4, #4
 8011ad6:	f844 3c04 	str.w	r3, [r4, #-4]
 8011ada:	f8cd b008 	str.w	fp, [sp, #8]
 8011ade:	464c      	mov	r4, r9
 8011ae0:	461d      	mov	r5, r3
 8011ae2:	9903      	ldr	r1, [sp, #12]
 8011ae4:	e7d7      	b.n	8011a96 <__hexnan+0x2e>
 8011ae6:	2a29      	cmp	r2, #41	@ 0x29
 8011ae8:	d157      	bne.n	8011b9a <__hexnan+0x132>
 8011aea:	3102      	adds	r1, #2
 8011aec:	f8ca 1000 	str.w	r1, [sl]
 8011af0:	f1bb 0f00 	cmp.w	fp, #0
 8011af4:	d051      	beq.n	8011b9a <__hexnan+0x132>
 8011af6:	454c      	cmp	r4, r9
 8011af8:	d206      	bcs.n	8011b08 <__hexnan+0xa0>
 8011afa:	2d07      	cmp	r5, #7
 8011afc:	dc04      	bgt.n	8011b08 <__hexnan+0xa0>
 8011afe:	462a      	mov	r2, r5
 8011b00:	4649      	mov	r1, r9
 8011b02:	4620      	mov	r0, r4
 8011b04:	f7ff ff8a 	bl	8011a1c <L_shift>
 8011b08:	4544      	cmp	r4, r8
 8011b0a:	d936      	bls.n	8011b7a <__hexnan+0x112>
 8011b0c:	f1a8 0204 	sub.w	r2, r8, #4
 8011b10:	4623      	mov	r3, r4
 8011b12:	f853 1b04 	ldr.w	r1, [r3], #4
 8011b16:	f842 1f04 	str.w	r1, [r2, #4]!
 8011b1a:	429f      	cmp	r7, r3
 8011b1c:	d2f9      	bcs.n	8011b12 <__hexnan+0xaa>
 8011b1e:	1b3b      	subs	r3, r7, r4
 8011b20:	f023 0303 	bic.w	r3, r3, #3
 8011b24:	3304      	adds	r3, #4
 8011b26:	3401      	adds	r4, #1
 8011b28:	3e03      	subs	r6, #3
 8011b2a:	42b4      	cmp	r4, r6
 8011b2c:	bf88      	it	hi
 8011b2e:	2304      	movhi	r3, #4
 8011b30:	4443      	add	r3, r8
 8011b32:	2200      	movs	r2, #0
 8011b34:	f843 2b04 	str.w	r2, [r3], #4
 8011b38:	429f      	cmp	r7, r3
 8011b3a:	d2fb      	bcs.n	8011b34 <__hexnan+0xcc>
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	b91b      	cbnz	r3, 8011b48 <__hexnan+0xe0>
 8011b40:	4547      	cmp	r7, r8
 8011b42:	d128      	bne.n	8011b96 <__hexnan+0x12e>
 8011b44:	2301      	movs	r3, #1
 8011b46:	603b      	str	r3, [r7, #0]
 8011b48:	2005      	movs	r0, #5
 8011b4a:	b007      	add	sp, #28
 8011b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b50:	3501      	adds	r5, #1
 8011b52:	2d08      	cmp	r5, #8
 8011b54:	f10b 0b01 	add.w	fp, fp, #1
 8011b58:	dd06      	ble.n	8011b68 <__hexnan+0x100>
 8011b5a:	4544      	cmp	r4, r8
 8011b5c:	d9c1      	bls.n	8011ae2 <__hexnan+0x7a>
 8011b5e:	2300      	movs	r3, #0
 8011b60:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b64:	2501      	movs	r5, #1
 8011b66:	3c04      	subs	r4, #4
 8011b68:	6822      	ldr	r2, [r4, #0]
 8011b6a:	f000 000f 	and.w	r0, r0, #15
 8011b6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011b72:	6020      	str	r0, [r4, #0]
 8011b74:	e7b5      	b.n	8011ae2 <__hexnan+0x7a>
 8011b76:	2508      	movs	r5, #8
 8011b78:	e7b3      	b.n	8011ae2 <__hexnan+0x7a>
 8011b7a:	9b01      	ldr	r3, [sp, #4]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d0dd      	beq.n	8011b3c <__hexnan+0xd4>
 8011b80:	f1c3 0320 	rsb	r3, r3, #32
 8011b84:	f04f 32ff 	mov.w	r2, #4294967295
 8011b88:	40da      	lsrs	r2, r3
 8011b8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011b8e:	4013      	ands	r3, r2
 8011b90:	f846 3c04 	str.w	r3, [r6, #-4]
 8011b94:	e7d2      	b.n	8011b3c <__hexnan+0xd4>
 8011b96:	3f04      	subs	r7, #4
 8011b98:	e7d0      	b.n	8011b3c <__hexnan+0xd4>
 8011b9a:	2004      	movs	r0, #4
 8011b9c:	e7d5      	b.n	8011b4a <__hexnan+0xe2>

08011b9e <__ascii_mbtowc>:
 8011b9e:	b082      	sub	sp, #8
 8011ba0:	b901      	cbnz	r1, 8011ba4 <__ascii_mbtowc+0x6>
 8011ba2:	a901      	add	r1, sp, #4
 8011ba4:	b142      	cbz	r2, 8011bb8 <__ascii_mbtowc+0x1a>
 8011ba6:	b14b      	cbz	r3, 8011bbc <__ascii_mbtowc+0x1e>
 8011ba8:	7813      	ldrb	r3, [r2, #0]
 8011baa:	600b      	str	r3, [r1, #0]
 8011bac:	7812      	ldrb	r2, [r2, #0]
 8011bae:	1e10      	subs	r0, r2, #0
 8011bb0:	bf18      	it	ne
 8011bb2:	2001      	movne	r0, #1
 8011bb4:	b002      	add	sp, #8
 8011bb6:	4770      	bx	lr
 8011bb8:	4610      	mov	r0, r2
 8011bba:	e7fb      	b.n	8011bb4 <__ascii_mbtowc+0x16>
 8011bbc:	f06f 0001 	mvn.w	r0, #1
 8011bc0:	e7f8      	b.n	8011bb4 <__ascii_mbtowc+0x16>

08011bc2 <_realloc_r>:
 8011bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bc6:	4680      	mov	r8, r0
 8011bc8:	4615      	mov	r5, r2
 8011bca:	460c      	mov	r4, r1
 8011bcc:	b921      	cbnz	r1, 8011bd8 <_realloc_r+0x16>
 8011bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd2:	4611      	mov	r1, r2
 8011bd4:	f7fd be6c 	b.w	800f8b0 <_malloc_r>
 8011bd8:	b92a      	cbnz	r2, 8011be6 <_realloc_r+0x24>
 8011bda:	f7fd fdf5 	bl	800f7c8 <_free_r>
 8011bde:	2400      	movs	r4, #0
 8011be0:	4620      	mov	r0, r4
 8011be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011be6:	f000 f840 	bl	8011c6a <_malloc_usable_size_r>
 8011bea:	4285      	cmp	r5, r0
 8011bec:	4606      	mov	r6, r0
 8011bee:	d802      	bhi.n	8011bf6 <_realloc_r+0x34>
 8011bf0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011bf4:	d8f4      	bhi.n	8011be0 <_realloc_r+0x1e>
 8011bf6:	4629      	mov	r1, r5
 8011bf8:	4640      	mov	r0, r8
 8011bfa:	f7fd fe59 	bl	800f8b0 <_malloc_r>
 8011bfe:	4607      	mov	r7, r0
 8011c00:	2800      	cmp	r0, #0
 8011c02:	d0ec      	beq.n	8011bde <_realloc_r+0x1c>
 8011c04:	42b5      	cmp	r5, r6
 8011c06:	462a      	mov	r2, r5
 8011c08:	4621      	mov	r1, r4
 8011c0a:	bf28      	it	cs
 8011c0c:	4632      	movcs	r2, r6
 8011c0e:	f7fc ff78 	bl	800eb02 <memcpy>
 8011c12:	4621      	mov	r1, r4
 8011c14:	4640      	mov	r0, r8
 8011c16:	f7fd fdd7 	bl	800f7c8 <_free_r>
 8011c1a:	463c      	mov	r4, r7
 8011c1c:	e7e0      	b.n	8011be0 <_realloc_r+0x1e>

08011c1e <__ascii_wctomb>:
 8011c1e:	4603      	mov	r3, r0
 8011c20:	4608      	mov	r0, r1
 8011c22:	b141      	cbz	r1, 8011c36 <__ascii_wctomb+0x18>
 8011c24:	2aff      	cmp	r2, #255	@ 0xff
 8011c26:	d904      	bls.n	8011c32 <__ascii_wctomb+0x14>
 8011c28:	228a      	movs	r2, #138	@ 0x8a
 8011c2a:	601a      	str	r2, [r3, #0]
 8011c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c30:	4770      	bx	lr
 8011c32:	700a      	strb	r2, [r1, #0]
 8011c34:	2001      	movs	r0, #1
 8011c36:	4770      	bx	lr

08011c38 <fiprintf>:
 8011c38:	b40e      	push	{r1, r2, r3}
 8011c3a:	b503      	push	{r0, r1, lr}
 8011c3c:	4601      	mov	r1, r0
 8011c3e:	ab03      	add	r3, sp, #12
 8011c40:	4805      	ldr	r0, [pc, #20]	@ (8011c58 <fiprintf+0x20>)
 8011c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c46:	6800      	ldr	r0, [r0, #0]
 8011c48:	9301      	str	r3, [sp, #4]
 8011c4a:	f000 f83f 	bl	8011ccc <_vfiprintf_r>
 8011c4e:	b002      	add	sp, #8
 8011c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c54:	b003      	add	sp, #12
 8011c56:	4770      	bx	lr
 8011c58:	200000b4 	.word	0x200000b4

08011c5c <abort>:
 8011c5c:	b508      	push	{r3, lr}
 8011c5e:	2006      	movs	r0, #6
 8011c60:	f000 fa08 	bl	8012074 <raise>
 8011c64:	2001      	movs	r0, #1
 8011c66:	f7f0 f945 	bl	8001ef4 <_exit>

08011c6a <_malloc_usable_size_r>:
 8011c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c6e:	1f18      	subs	r0, r3, #4
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	bfbc      	itt	lt
 8011c74:	580b      	ldrlt	r3, [r1, r0]
 8011c76:	18c0      	addlt	r0, r0, r3
 8011c78:	4770      	bx	lr

08011c7a <__sfputc_r>:
 8011c7a:	6893      	ldr	r3, [r2, #8]
 8011c7c:	3b01      	subs	r3, #1
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	b410      	push	{r4}
 8011c82:	6093      	str	r3, [r2, #8]
 8011c84:	da08      	bge.n	8011c98 <__sfputc_r+0x1e>
 8011c86:	6994      	ldr	r4, [r2, #24]
 8011c88:	42a3      	cmp	r3, r4
 8011c8a:	db01      	blt.n	8011c90 <__sfputc_r+0x16>
 8011c8c:	290a      	cmp	r1, #10
 8011c8e:	d103      	bne.n	8011c98 <__sfputc_r+0x1e>
 8011c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c94:	f000 b932 	b.w	8011efc <__swbuf_r>
 8011c98:	6813      	ldr	r3, [r2, #0]
 8011c9a:	1c58      	adds	r0, r3, #1
 8011c9c:	6010      	str	r0, [r2, #0]
 8011c9e:	7019      	strb	r1, [r3, #0]
 8011ca0:	4608      	mov	r0, r1
 8011ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ca6:	4770      	bx	lr

08011ca8 <__sfputs_r>:
 8011ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011caa:	4606      	mov	r6, r0
 8011cac:	460f      	mov	r7, r1
 8011cae:	4614      	mov	r4, r2
 8011cb0:	18d5      	adds	r5, r2, r3
 8011cb2:	42ac      	cmp	r4, r5
 8011cb4:	d101      	bne.n	8011cba <__sfputs_r+0x12>
 8011cb6:	2000      	movs	r0, #0
 8011cb8:	e007      	b.n	8011cca <__sfputs_r+0x22>
 8011cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cbe:	463a      	mov	r2, r7
 8011cc0:	4630      	mov	r0, r6
 8011cc2:	f7ff ffda 	bl	8011c7a <__sfputc_r>
 8011cc6:	1c43      	adds	r3, r0, #1
 8011cc8:	d1f3      	bne.n	8011cb2 <__sfputs_r+0xa>
 8011cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011ccc <_vfiprintf_r>:
 8011ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd0:	460d      	mov	r5, r1
 8011cd2:	b09d      	sub	sp, #116	@ 0x74
 8011cd4:	4614      	mov	r4, r2
 8011cd6:	4698      	mov	r8, r3
 8011cd8:	4606      	mov	r6, r0
 8011cda:	b118      	cbz	r0, 8011ce4 <_vfiprintf_r+0x18>
 8011cdc:	6a03      	ldr	r3, [r0, #32]
 8011cde:	b90b      	cbnz	r3, 8011ce4 <_vfiprintf_r+0x18>
 8011ce0:	f7fc fdf6 	bl	800e8d0 <__sinit>
 8011ce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ce6:	07d9      	lsls	r1, r3, #31
 8011ce8:	d405      	bmi.n	8011cf6 <_vfiprintf_r+0x2a>
 8011cea:	89ab      	ldrh	r3, [r5, #12]
 8011cec:	059a      	lsls	r2, r3, #22
 8011cee:	d402      	bmi.n	8011cf6 <_vfiprintf_r+0x2a>
 8011cf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011cf2:	f7fc ff04 	bl	800eafe <__retarget_lock_acquire_recursive>
 8011cf6:	89ab      	ldrh	r3, [r5, #12]
 8011cf8:	071b      	lsls	r3, r3, #28
 8011cfa:	d501      	bpl.n	8011d00 <_vfiprintf_r+0x34>
 8011cfc:	692b      	ldr	r3, [r5, #16]
 8011cfe:	b99b      	cbnz	r3, 8011d28 <_vfiprintf_r+0x5c>
 8011d00:	4629      	mov	r1, r5
 8011d02:	4630      	mov	r0, r6
 8011d04:	f000 f938 	bl	8011f78 <__swsetup_r>
 8011d08:	b170      	cbz	r0, 8011d28 <_vfiprintf_r+0x5c>
 8011d0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d0c:	07dc      	lsls	r4, r3, #31
 8011d0e:	d504      	bpl.n	8011d1a <_vfiprintf_r+0x4e>
 8011d10:	f04f 30ff 	mov.w	r0, #4294967295
 8011d14:	b01d      	add	sp, #116	@ 0x74
 8011d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d1a:	89ab      	ldrh	r3, [r5, #12]
 8011d1c:	0598      	lsls	r0, r3, #22
 8011d1e:	d4f7      	bmi.n	8011d10 <_vfiprintf_r+0x44>
 8011d20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d22:	f7fc feed 	bl	800eb00 <__retarget_lock_release_recursive>
 8011d26:	e7f3      	b.n	8011d10 <_vfiprintf_r+0x44>
 8011d28:	2300      	movs	r3, #0
 8011d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d2c:	2320      	movs	r3, #32
 8011d2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d36:	2330      	movs	r3, #48	@ 0x30
 8011d38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011ee8 <_vfiprintf_r+0x21c>
 8011d3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011d40:	f04f 0901 	mov.w	r9, #1
 8011d44:	4623      	mov	r3, r4
 8011d46:	469a      	mov	sl, r3
 8011d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d4c:	b10a      	cbz	r2, 8011d52 <_vfiprintf_r+0x86>
 8011d4e:	2a25      	cmp	r2, #37	@ 0x25
 8011d50:	d1f9      	bne.n	8011d46 <_vfiprintf_r+0x7a>
 8011d52:	ebba 0b04 	subs.w	fp, sl, r4
 8011d56:	d00b      	beq.n	8011d70 <_vfiprintf_r+0xa4>
 8011d58:	465b      	mov	r3, fp
 8011d5a:	4622      	mov	r2, r4
 8011d5c:	4629      	mov	r1, r5
 8011d5e:	4630      	mov	r0, r6
 8011d60:	f7ff ffa2 	bl	8011ca8 <__sfputs_r>
 8011d64:	3001      	adds	r0, #1
 8011d66:	f000 80a7 	beq.w	8011eb8 <_vfiprintf_r+0x1ec>
 8011d6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d6c:	445a      	add	r2, fp
 8011d6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d70:	f89a 3000 	ldrb.w	r3, [sl]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	f000 809f 	beq.w	8011eb8 <_vfiprintf_r+0x1ec>
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d84:	f10a 0a01 	add.w	sl, sl, #1
 8011d88:	9304      	str	r3, [sp, #16]
 8011d8a:	9307      	str	r3, [sp, #28]
 8011d8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011d90:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d92:	4654      	mov	r4, sl
 8011d94:	2205      	movs	r2, #5
 8011d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d9a:	4853      	ldr	r0, [pc, #332]	@ (8011ee8 <_vfiprintf_r+0x21c>)
 8011d9c:	f7ee fa40 	bl	8000220 <memchr>
 8011da0:	9a04      	ldr	r2, [sp, #16]
 8011da2:	b9d8      	cbnz	r0, 8011ddc <_vfiprintf_r+0x110>
 8011da4:	06d1      	lsls	r1, r2, #27
 8011da6:	bf44      	itt	mi
 8011da8:	2320      	movmi	r3, #32
 8011daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011dae:	0713      	lsls	r3, r2, #28
 8011db0:	bf44      	itt	mi
 8011db2:	232b      	movmi	r3, #43	@ 0x2b
 8011db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011db8:	f89a 3000 	ldrb.w	r3, [sl]
 8011dbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8011dbe:	d015      	beq.n	8011dec <_vfiprintf_r+0x120>
 8011dc0:	9a07      	ldr	r2, [sp, #28]
 8011dc2:	4654      	mov	r4, sl
 8011dc4:	2000      	movs	r0, #0
 8011dc6:	f04f 0c0a 	mov.w	ip, #10
 8011dca:	4621      	mov	r1, r4
 8011dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011dd0:	3b30      	subs	r3, #48	@ 0x30
 8011dd2:	2b09      	cmp	r3, #9
 8011dd4:	d94b      	bls.n	8011e6e <_vfiprintf_r+0x1a2>
 8011dd6:	b1b0      	cbz	r0, 8011e06 <_vfiprintf_r+0x13a>
 8011dd8:	9207      	str	r2, [sp, #28]
 8011dda:	e014      	b.n	8011e06 <_vfiprintf_r+0x13a>
 8011ddc:	eba0 0308 	sub.w	r3, r0, r8
 8011de0:	fa09 f303 	lsl.w	r3, r9, r3
 8011de4:	4313      	orrs	r3, r2
 8011de6:	9304      	str	r3, [sp, #16]
 8011de8:	46a2      	mov	sl, r4
 8011dea:	e7d2      	b.n	8011d92 <_vfiprintf_r+0xc6>
 8011dec:	9b03      	ldr	r3, [sp, #12]
 8011dee:	1d19      	adds	r1, r3, #4
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	9103      	str	r1, [sp, #12]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	bfbb      	ittet	lt
 8011df8:	425b      	neglt	r3, r3
 8011dfa:	f042 0202 	orrlt.w	r2, r2, #2
 8011dfe:	9307      	strge	r3, [sp, #28]
 8011e00:	9307      	strlt	r3, [sp, #28]
 8011e02:	bfb8      	it	lt
 8011e04:	9204      	strlt	r2, [sp, #16]
 8011e06:	7823      	ldrb	r3, [r4, #0]
 8011e08:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e0a:	d10a      	bne.n	8011e22 <_vfiprintf_r+0x156>
 8011e0c:	7863      	ldrb	r3, [r4, #1]
 8011e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e10:	d132      	bne.n	8011e78 <_vfiprintf_r+0x1ac>
 8011e12:	9b03      	ldr	r3, [sp, #12]
 8011e14:	1d1a      	adds	r2, r3, #4
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	9203      	str	r2, [sp, #12]
 8011e1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011e1e:	3402      	adds	r4, #2
 8011e20:	9305      	str	r3, [sp, #20]
 8011e22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011ef8 <_vfiprintf_r+0x22c>
 8011e26:	7821      	ldrb	r1, [r4, #0]
 8011e28:	2203      	movs	r2, #3
 8011e2a:	4650      	mov	r0, sl
 8011e2c:	f7ee f9f8 	bl	8000220 <memchr>
 8011e30:	b138      	cbz	r0, 8011e42 <_vfiprintf_r+0x176>
 8011e32:	9b04      	ldr	r3, [sp, #16]
 8011e34:	eba0 000a 	sub.w	r0, r0, sl
 8011e38:	2240      	movs	r2, #64	@ 0x40
 8011e3a:	4082      	lsls	r2, r0
 8011e3c:	4313      	orrs	r3, r2
 8011e3e:	3401      	adds	r4, #1
 8011e40:	9304      	str	r3, [sp, #16]
 8011e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e46:	4829      	ldr	r0, [pc, #164]	@ (8011eec <_vfiprintf_r+0x220>)
 8011e48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011e4c:	2206      	movs	r2, #6
 8011e4e:	f7ee f9e7 	bl	8000220 <memchr>
 8011e52:	2800      	cmp	r0, #0
 8011e54:	d03f      	beq.n	8011ed6 <_vfiprintf_r+0x20a>
 8011e56:	4b26      	ldr	r3, [pc, #152]	@ (8011ef0 <_vfiprintf_r+0x224>)
 8011e58:	bb1b      	cbnz	r3, 8011ea2 <_vfiprintf_r+0x1d6>
 8011e5a:	9b03      	ldr	r3, [sp, #12]
 8011e5c:	3307      	adds	r3, #7
 8011e5e:	f023 0307 	bic.w	r3, r3, #7
 8011e62:	3308      	adds	r3, #8
 8011e64:	9303      	str	r3, [sp, #12]
 8011e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e68:	443b      	add	r3, r7
 8011e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e6c:	e76a      	b.n	8011d44 <_vfiprintf_r+0x78>
 8011e6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e72:	460c      	mov	r4, r1
 8011e74:	2001      	movs	r0, #1
 8011e76:	e7a8      	b.n	8011dca <_vfiprintf_r+0xfe>
 8011e78:	2300      	movs	r3, #0
 8011e7a:	3401      	adds	r4, #1
 8011e7c:	9305      	str	r3, [sp, #20]
 8011e7e:	4619      	mov	r1, r3
 8011e80:	f04f 0c0a 	mov.w	ip, #10
 8011e84:	4620      	mov	r0, r4
 8011e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e8a:	3a30      	subs	r2, #48	@ 0x30
 8011e8c:	2a09      	cmp	r2, #9
 8011e8e:	d903      	bls.n	8011e98 <_vfiprintf_r+0x1cc>
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d0c6      	beq.n	8011e22 <_vfiprintf_r+0x156>
 8011e94:	9105      	str	r1, [sp, #20]
 8011e96:	e7c4      	b.n	8011e22 <_vfiprintf_r+0x156>
 8011e98:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e9c:	4604      	mov	r4, r0
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	e7f0      	b.n	8011e84 <_vfiprintf_r+0x1b8>
 8011ea2:	ab03      	add	r3, sp, #12
 8011ea4:	9300      	str	r3, [sp, #0]
 8011ea6:	462a      	mov	r2, r5
 8011ea8:	4b12      	ldr	r3, [pc, #72]	@ (8011ef4 <_vfiprintf_r+0x228>)
 8011eaa:	a904      	add	r1, sp, #16
 8011eac:	4630      	mov	r0, r6
 8011eae:	f7fb feb7 	bl	800dc20 <_printf_float>
 8011eb2:	4607      	mov	r7, r0
 8011eb4:	1c78      	adds	r0, r7, #1
 8011eb6:	d1d6      	bne.n	8011e66 <_vfiprintf_r+0x19a>
 8011eb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011eba:	07d9      	lsls	r1, r3, #31
 8011ebc:	d405      	bmi.n	8011eca <_vfiprintf_r+0x1fe>
 8011ebe:	89ab      	ldrh	r3, [r5, #12]
 8011ec0:	059a      	lsls	r2, r3, #22
 8011ec2:	d402      	bmi.n	8011eca <_vfiprintf_r+0x1fe>
 8011ec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ec6:	f7fc fe1b 	bl	800eb00 <__retarget_lock_release_recursive>
 8011eca:	89ab      	ldrh	r3, [r5, #12]
 8011ecc:	065b      	lsls	r3, r3, #25
 8011ece:	f53f af1f 	bmi.w	8011d10 <_vfiprintf_r+0x44>
 8011ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ed4:	e71e      	b.n	8011d14 <_vfiprintf_r+0x48>
 8011ed6:	ab03      	add	r3, sp, #12
 8011ed8:	9300      	str	r3, [sp, #0]
 8011eda:	462a      	mov	r2, r5
 8011edc:	4b05      	ldr	r3, [pc, #20]	@ (8011ef4 <_vfiprintf_r+0x228>)
 8011ede:	a904      	add	r1, sp, #16
 8011ee0:	4630      	mov	r0, r6
 8011ee2:	f7fc f935 	bl	800e150 <_printf_i>
 8011ee6:	e7e4      	b.n	8011eb2 <_vfiprintf_r+0x1e6>
 8011ee8:	08012829 	.word	0x08012829
 8011eec:	08012833 	.word	0x08012833
 8011ef0:	0800dc21 	.word	0x0800dc21
 8011ef4:	08011ca9 	.word	0x08011ca9
 8011ef8:	0801282f 	.word	0x0801282f

08011efc <__swbuf_r>:
 8011efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011efe:	460e      	mov	r6, r1
 8011f00:	4614      	mov	r4, r2
 8011f02:	4605      	mov	r5, r0
 8011f04:	b118      	cbz	r0, 8011f0e <__swbuf_r+0x12>
 8011f06:	6a03      	ldr	r3, [r0, #32]
 8011f08:	b90b      	cbnz	r3, 8011f0e <__swbuf_r+0x12>
 8011f0a:	f7fc fce1 	bl	800e8d0 <__sinit>
 8011f0e:	69a3      	ldr	r3, [r4, #24]
 8011f10:	60a3      	str	r3, [r4, #8]
 8011f12:	89a3      	ldrh	r3, [r4, #12]
 8011f14:	071a      	lsls	r2, r3, #28
 8011f16:	d501      	bpl.n	8011f1c <__swbuf_r+0x20>
 8011f18:	6923      	ldr	r3, [r4, #16]
 8011f1a:	b943      	cbnz	r3, 8011f2e <__swbuf_r+0x32>
 8011f1c:	4621      	mov	r1, r4
 8011f1e:	4628      	mov	r0, r5
 8011f20:	f000 f82a 	bl	8011f78 <__swsetup_r>
 8011f24:	b118      	cbz	r0, 8011f2e <__swbuf_r+0x32>
 8011f26:	f04f 37ff 	mov.w	r7, #4294967295
 8011f2a:	4638      	mov	r0, r7
 8011f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f2e:	6823      	ldr	r3, [r4, #0]
 8011f30:	6922      	ldr	r2, [r4, #16]
 8011f32:	1a98      	subs	r0, r3, r2
 8011f34:	6963      	ldr	r3, [r4, #20]
 8011f36:	b2f6      	uxtb	r6, r6
 8011f38:	4283      	cmp	r3, r0
 8011f3a:	4637      	mov	r7, r6
 8011f3c:	dc05      	bgt.n	8011f4a <__swbuf_r+0x4e>
 8011f3e:	4621      	mov	r1, r4
 8011f40:	4628      	mov	r0, r5
 8011f42:	f7ff fa53 	bl	80113ec <_fflush_r>
 8011f46:	2800      	cmp	r0, #0
 8011f48:	d1ed      	bne.n	8011f26 <__swbuf_r+0x2a>
 8011f4a:	68a3      	ldr	r3, [r4, #8]
 8011f4c:	3b01      	subs	r3, #1
 8011f4e:	60a3      	str	r3, [r4, #8]
 8011f50:	6823      	ldr	r3, [r4, #0]
 8011f52:	1c5a      	adds	r2, r3, #1
 8011f54:	6022      	str	r2, [r4, #0]
 8011f56:	701e      	strb	r6, [r3, #0]
 8011f58:	6962      	ldr	r2, [r4, #20]
 8011f5a:	1c43      	adds	r3, r0, #1
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d004      	beq.n	8011f6a <__swbuf_r+0x6e>
 8011f60:	89a3      	ldrh	r3, [r4, #12]
 8011f62:	07db      	lsls	r3, r3, #31
 8011f64:	d5e1      	bpl.n	8011f2a <__swbuf_r+0x2e>
 8011f66:	2e0a      	cmp	r6, #10
 8011f68:	d1df      	bne.n	8011f2a <__swbuf_r+0x2e>
 8011f6a:	4621      	mov	r1, r4
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	f7ff fa3d 	bl	80113ec <_fflush_r>
 8011f72:	2800      	cmp	r0, #0
 8011f74:	d0d9      	beq.n	8011f2a <__swbuf_r+0x2e>
 8011f76:	e7d6      	b.n	8011f26 <__swbuf_r+0x2a>

08011f78 <__swsetup_r>:
 8011f78:	b538      	push	{r3, r4, r5, lr}
 8011f7a:	4b29      	ldr	r3, [pc, #164]	@ (8012020 <__swsetup_r+0xa8>)
 8011f7c:	4605      	mov	r5, r0
 8011f7e:	6818      	ldr	r0, [r3, #0]
 8011f80:	460c      	mov	r4, r1
 8011f82:	b118      	cbz	r0, 8011f8c <__swsetup_r+0x14>
 8011f84:	6a03      	ldr	r3, [r0, #32]
 8011f86:	b90b      	cbnz	r3, 8011f8c <__swsetup_r+0x14>
 8011f88:	f7fc fca2 	bl	800e8d0 <__sinit>
 8011f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f90:	0719      	lsls	r1, r3, #28
 8011f92:	d422      	bmi.n	8011fda <__swsetup_r+0x62>
 8011f94:	06da      	lsls	r2, r3, #27
 8011f96:	d407      	bmi.n	8011fa8 <__swsetup_r+0x30>
 8011f98:	2209      	movs	r2, #9
 8011f9a:	602a      	str	r2, [r5, #0]
 8011f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fa0:	81a3      	strh	r3, [r4, #12]
 8011fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8011fa6:	e033      	b.n	8012010 <__swsetup_r+0x98>
 8011fa8:	0758      	lsls	r0, r3, #29
 8011faa:	d512      	bpl.n	8011fd2 <__swsetup_r+0x5a>
 8011fac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011fae:	b141      	cbz	r1, 8011fc2 <__swsetup_r+0x4a>
 8011fb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011fb4:	4299      	cmp	r1, r3
 8011fb6:	d002      	beq.n	8011fbe <__swsetup_r+0x46>
 8011fb8:	4628      	mov	r0, r5
 8011fba:	f7fd fc05 	bl	800f7c8 <_free_r>
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8011fc2:	89a3      	ldrh	r3, [r4, #12]
 8011fc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011fc8:	81a3      	strh	r3, [r4, #12]
 8011fca:	2300      	movs	r3, #0
 8011fcc:	6063      	str	r3, [r4, #4]
 8011fce:	6923      	ldr	r3, [r4, #16]
 8011fd0:	6023      	str	r3, [r4, #0]
 8011fd2:	89a3      	ldrh	r3, [r4, #12]
 8011fd4:	f043 0308 	orr.w	r3, r3, #8
 8011fd8:	81a3      	strh	r3, [r4, #12]
 8011fda:	6923      	ldr	r3, [r4, #16]
 8011fdc:	b94b      	cbnz	r3, 8011ff2 <__swsetup_r+0x7a>
 8011fde:	89a3      	ldrh	r3, [r4, #12]
 8011fe0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011fe8:	d003      	beq.n	8011ff2 <__swsetup_r+0x7a>
 8011fea:	4621      	mov	r1, r4
 8011fec:	4628      	mov	r0, r5
 8011fee:	f000 f883 	bl	80120f8 <__smakebuf_r>
 8011ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ff6:	f013 0201 	ands.w	r2, r3, #1
 8011ffa:	d00a      	beq.n	8012012 <__swsetup_r+0x9a>
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	60a2      	str	r2, [r4, #8]
 8012000:	6962      	ldr	r2, [r4, #20]
 8012002:	4252      	negs	r2, r2
 8012004:	61a2      	str	r2, [r4, #24]
 8012006:	6922      	ldr	r2, [r4, #16]
 8012008:	b942      	cbnz	r2, 801201c <__swsetup_r+0xa4>
 801200a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801200e:	d1c5      	bne.n	8011f9c <__swsetup_r+0x24>
 8012010:	bd38      	pop	{r3, r4, r5, pc}
 8012012:	0799      	lsls	r1, r3, #30
 8012014:	bf58      	it	pl
 8012016:	6962      	ldrpl	r2, [r4, #20]
 8012018:	60a2      	str	r2, [r4, #8]
 801201a:	e7f4      	b.n	8012006 <__swsetup_r+0x8e>
 801201c:	2000      	movs	r0, #0
 801201e:	e7f7      	b.n	8012010 <__swsetup_r+0x98>
 8012020:	200000b4 	.word	0x200000b4

08012024 <_raise_r>:
 8012024:	291f      	cmp	r1, #31
 8012026:	b538      	push	{r3, r4, r5, lr}
 8012028:	4605      	mov	r5, r0
 801202a:	460c      	mov	r4, r1
 801202c:	d904      	bls.n	8012038 <_raise_r+0x14>
 801202e:	2316      	movs	r3, #22
 8012030:	6003      	str	r3, [r0, #0]
 8012032:	f04f 30ff 	mov.w	r0, #4294967295
 8012036:	bd38      	pop	{r3, r4, r5, pc}
 8012038:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801203a:	b112      	cbz	r2, 8012042 <_raise_r+0x1e>
 801203c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012040:	b94b      	cbnz	r3, 8012056 <_raise_r+0x32>
 8012042:	4628      	mov	r0, r5
 8012044:	f000 f830 	bl	80120a8 <_getpid_r>
 8012048:	4622      	mov	r2, r4
 801204a:	4601      	mov	r1, r0
 801204c:	4628      	mov	r0, r5
 801204e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012052:	f000 b817 	b.w	8012084 <_kill_r>
 8012056:	2b01      	cmp	r3, #1
 8012058:	d00a      	beq.n	8012070 <_raise_r+0x4c>
 801205a:	1c59      	adds	r1, r3, #1
 801205c:	d103      	bne.n	8012066 <_raise_r+0x42>
 801205e:	2316      	movs	r3, #22
 8012060:	6003      	str	r3, [r0, #0]
 8012062:	2001      	movs	r0, #1
 8012064:	e7e7      	b.n	8012036 <_raise_r+0x12>
 8012066:	2100      	movs	r1, #0
 8012068:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801206c:	4620      	mov	r0, r4
 801206e:	4798      	blx	r3
 8012070:	2000      	movs	r0, #0
 8012072:	e7e0      	b.n	8012036 <_raise_r+0x12>

08012074 <raise>:
 8012074:	4b02      	ldr	r3, [pc, #8]	@ (8012080 <raise+0xc>)
 8012076:	4601      	mov	r1, r0
 8012078:	6818      	ldr	r0, [r3, #0]
 801207a:	f7ff bfd3 	b.w	8012024 <_raise_r>
 801207e:	bf00      	nop
 8012080:	200000b4 	.word	0x200000b4

08012084 <_kill_r>:
 8012084:	b538      	push	{r3, r4, r5, lr}
 8012086:	4d07      	ldr	r5, [pc, #28]	@ (80120a4 <_kill_r+0x20>)
 8012088:	2300      	movs	r3, #0
 801208a:	4604      	mov	r4, r0
 801208c:	4608      	mov	r0, r1
 801208e:	4611      	mov	r1, r2
 8012090:	602b      	str	r3, [r5, #0]
 8012092:	f7ef ff1f 	bl	8001ed4 <_kill>
 8012096:	1c43      	adds	r3, r0, #1
 8012098:	d102      	bne.n	80120a0 <_kill_r+0x1c>
 801209a:	682b      	ldr	r3, [r5, #0]
 801209c:	b103      	cbz	r3, 80120a0 <_kill_r+0x1c>
 801209e:	6023      	str	r3, [r4, #0]
 80120a0:	bd38      	pop	{r3, r4, r5, pc}
 80120a2:	bf00      	nop
 80120a4:	20000a7c 	.word	0x20000a7c

080120a8 <_getpid_r>:
 80120a8:	f7ef bf0c 	b.w	8001ec4 <_getpid>

080120ac <__swhatbuf_r>:
 80120ac:	b570      	push	{r4, r5, r6, lr}
 80120ae:	460c      	mov	r4, r1
 80120b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120b4:	2900      	cmp	r1, #0
 80120b6:	b096      	sub	sp, #88	@ 0x58
 80120b8:	4615      	mov	r5, r2
 80120ba:	461e      	mov	r6, r3
 80120bc:	da0d      	bge.n	80120da <__swhatbuf_r+0x2e>
 80120be:	89a3      	ldrh	r3, [r4, #12]
 80120c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80120c4:	f04f 0100 	mov.w	r1, #0
 80120c8:	bf14      	ite	ne
 80120ca:	2340      	movne	r3, #64	@ 0x40
 80120cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80120d0:	2000      	movs	r0, #0
 80120d2:	6031      	str	r1, [r6, #0]
 80120d4:	602b      	str	r3, [r5, #0]
 80120d6:	b016      	add	sp, #88	@ 0x58
 80120d8:	bd70      	pop	{r4, r5, r6, pc}
 80120da:	466a      	mov	r2, sp
 80120dc:	f000 f848 	bl	8012170 <_fstat_r>
 80120e0:	2800      	cmp	r0, #0
 80120e2:	dbec      	blt.n	80120be <__swhatbuf_r+0x12>
 80120e4:	9901      	ldr	r1, [sp, #4]
 80120e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80120ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80120ee:	4259      	negs	r1, r3
 80120f0:	4159      	adcs	r1, r3
 80120f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80120f6:	e7eb      	b.n	80120d0 <__swhatbuf_r+0x24>

080120f8 <__smakebuf_r>:
 80120f8:	898b      	ldrh	r3, [r1, #12]
 80120fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80120fc:	079d      	lsls	r5, r3, #30
 80120fe:	4606      	mov	r6, r0
 8012100:	460c      	mov	r4, r1
 8012102:	d507      	bpl.n	8012114 <__smakebuf_r+0x1c>
 8012104:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012108:	6023      	str	r3, [r4, #0]
 801210a:	6123      	str	r3, [r4, #16]
 801210c:	2301      	movs	r3, #1
 801210e:	6163      	str	r3, [r4, #20]
 8012110:	b003      	add	sp, #12
 8012112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012114:	ab01      	add	r3, sp, #4
 8012116:	466a      	mov	r2, sp
 8012118:	f7ff ffc8 	bl	80120ac <__swhatbuf_r>
 801211c:	9f00      	ldr	r7, [sp, #0]
 801211e:	4605      	mov	r5, r0
 8012120:	4639      	mov	r1, r7
 8012122:	4630      	mov	r0, r6
 8012124:	f7fd fbc4 	bl	800f8b0 <_malloc_r>
 8012128:	b948      	cbnz	r0, 801213e <__smakebuf_r+0x46>
 801212a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801212e:	059a      	lsls	r2, r3, #22
 8012130:	d4ee      	bmi.n	8012110 <__smakebuf_r+0x18>
 8012132:	f023 0303 	bic.w	r3, r3, #3
 8012136:	f043 0302 	orr.w	r3, r3, #2
 801213a:	81a3      	strh	r3, [r4, #12]
 801213c:	e7e2      	b.n	8012104 <__smakebuf_r+0xc>
 801213e:	89a3      	ldrh	r3, [r4, #12]
 8012140:	6020      	str	r0, [r4, #0]
 8012142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012146:	81a3      	strh	r3, [r4, #12]
 8012148:	9b01      	ldr	r3, [sp, #4]
 801214a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801214e:	b15b      	cbz	r3, 8012168 <__smakebuf_r+0x70>
 8012150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012154:	4630      	mov	r0, r6
 8012156:	f000 f81d 	bl	8012194 <_isatty_r>
 801215a:	b128      	cbz	r0, 8012168 <__smakebuf_r+0x70>
 801215c:	89a3      	ldrh	r3, [r4, #12]
 801215e:	f023 0303 	bic.w	r3, r3, #3
 8012162:	f043 0301 	orr.w	r3, r3, #1
 8012166:	81a3      	strh	r3, [r4, #12]
 8012168:	89a3      	ldrh	r3, [r4, #12]
 801216a:	431d      	orrs	r5, r3
 801216c:	81a5      	strh	r5, [r4, #12]
 801216e:	e7cf      	b.n	8012110 <__smakebuf_r+0x18>

08012170 <_fstat_r>:
 8012170:	b538      	push	{r3, r4, r5, lr}
 8012172:	4d07      	ldr	r5, [pc, #28]	@ (8012190 <_fstat_r+0x20>)
 8012174:	2300      	movs	r3, #0
 8012176:	4604      	mov	r4, r0
 8012178:	4608      	mov	r0, r1
 801217a:	4611      	mov	r1, r2
 801217c:	602b      	str	r3, [r5, #0]
 801217e:	f7ef ff09 	bl	8001f94 <_fstat>
 8012182:	1c43      	adds	r3, r0, #1
 8012184:	d102      	bne.n	801218c <_fstat_r+0x1c>
 8012186:	682b      	ldr	r3, [r5, #0]
 8012188:	b103      	cbz	r3, 801218c <_fstat_r+0x1c>
 801218a:	6023      	str	r3, [r4, #0]
 801218c:	bd38      	pop	{r3, r4, r5, pc}
 801218e:	bf00      	nop
 8012190:	20000a7c 	.word	0x20000a7c

08012194 <_isatty_r>:
 8012194:	b538      	push	{r3, r4, r5, lr}
 8012196:	4d06      	ldr	r5, [pc, #24]	@ (80121b0 <_isatty_r+0x1c>)
 8012198:	2300      	movs	r3, #0
 801219a:	4604      	mov	r4, r0
 801219c:	4608      	mov	r0, r1
 801219e:	602b      	str	r3, [r5, #0]
 80121a0:	f7ef ff08 	bl	8001fb4 <_isatty>
 80121a4:	1c43      	adds	r3, r0, #1
 80121a6:	d102      	bne.n	80121ae <_isatty_r+0x1a>
 80121a8:	682b      	ldr	r3, [r5, #0]
 80121aa:	b103      	cbz	r3, 80121ae <_isatty_r+0x1a>
 80121ac:	6023      	str	r3, [r4, #0]
 80121ae:	bd38      	pop	{r3, r4, r5, pc}
 80121b0:	20000a7c 	.word	0x20000a7c

080121b4 <fmod>:
 80121b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121b6:	ed2d 8b02 	vpush	{d8}
 80121ba:	ec57 6b10 	vmov	r6, r7, d0
 80121be:	ec55 4b11 	vmov	r4, r5, d1
 80121c2:	f000 f825 	bl	8012210 <__ieee754_fmod>
 80121c6:	4622      	mov	r2, r4
 80121c8:	462b      	mov	r3, r5
 80121ca:	4630      	mov	r0, r6
 80121cc:	4639      	mov	r1, r7
 80121ce:	eeb0 8a40 	vmov.f32	s16, s0
 80121d2:	eef0 8a60 	vmov.f32	s17, s1
 80121d6:	f7ee fcd1 	bl	8000b7c <__aeabi_dcmpun>
 80121da:	b990      	cbnz	r0, 8012202 <fmod+0x4e>
 80121dc:	2200      	movs	r2, #0
 80121de:	2300      	movs	r3, #0
 80121e0:	4620      	mov	r0, r4
 80121e2:	4629      	mov	r1, r5
 80121e4:	f7ee fc98 	bl	8000b18 <__aeabi_dcmpeq>
 80121e8:	b158      	cbz	r0, 8012202 <fmod+0x4e>
 80121ea:	f7fc fc5d 	bl	800eaa8 <__errno>
 80121ee:	2321      	movs	r3, #33	@ 0x21
 80121f0:	6003      	str	r3, [r0, #0]
 80121f2:	2200      	movs	r2, #0
 80121f4:	2300      	movs	r3, #0
 80121f6:	4610      	mov	r0, r2
 80121f8:	4619      	mov	r1, r3
 80121fa:	f7ee fb4f 	bl	800089c <__aeabi_ddiv>
 80121fe:	ec41 0b18 	vmov	d8, r0, r1
 8012202:	eeb0 0a48 	vmov.f32	s0, s16
 8012206:	eef0 0a68 	vmov.f32	s1, s17
 801220a:	ecbd 8b02 	vpop	{d8}
 801220e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012210 <__ieee754_fmod>:
 8012210:	ec53 2b11 	vmov	r2, r3, d1
 8012214:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8012218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801221c:	ea52 040c 	orrs.w	r4, r2, ip
 8012220:	ec51 0b10 	vmov	r0, r1, d0
 8012224:	461e      	mov	r6, r3
 8012226:	4617      	mov	r7, r2
 8012228:	4696      	mov	lr, r2
 801222a:	d00c      	beq.n	8012246 <__ieee754_fmod+0x36>
 801222c:	4c77      	ldr	r4, [pc, #476]	@ (801240c <__ieee754_fmod+0x1fc>)
 801222e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8012232:	45a0      	cmp	r8, r4
 8012234:	4689      	mov	r9, r1
 8012236:	d806      	bhi.n	8012246 <__ieee754_fmod+0x36>
 8012238:	4254      	negs	r4, r2
 801223a:	4d75      	ldr	r5, [pc, #468]	@ (8012410 <__ieee754_fmod+0x200>)
 801223c:	4314      	orrs	r4, r2
 801223e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8012242:	42ac      	cmp	r4, r5
 8012244:	d909      	bls.n	801225a <__ieee754_fmod+0x4a>
 8012246:	f7ee f9ff 	bl	8000648 <__aeabi_dmul>
 801224a:	4602      	mov	r2, r0
 801224c:	460b      	mov	r3, r1
 801224e:	f7ee fb25 	bl	800089c <__aeabi_ddiv>
 8012252:	ec41 0b10 	vmov	d0, r0, r1
 8012256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801225a:	45e0      	cmp	r8, ip
 801225c:	4682      	mov	sl, r0
 801225e:	4604      	mov	r4, r0
 8012260:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8012264:	dc09      	bgt.n	801227a <__ieee754_fmod+0x6a>
 8012266:	dbf4      	blt.n	8012252 <__ieee754_fmod+0x42>
 8012268:	4282      	cmp	r2, r0
 801226a:	d8f2      	bhi.n	8012252 <__ieee754_fmod+0x42>
 801226c:	d105      	bne.n	801227a <__ieee754_fmod+0x6a>
 801226e:	4b69      	ldr	r3, [pc, #420]	@ (8012414 <__ieee754_fmod+0x204>)
 8012270:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8012274:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012278:	e7eb      	b.n	8012252 <__ieee754_fmod+0x42>
 801227a:	4a65      	ldr	r2, [pc, #404]	@ (8012410 <__ieee754_fmod+0x200>)
 801227c:	ea19 0f02 	tst.w	r9, r2
 8012280:	d148      	bne.n	8012314 <__ieee754_fmod+0x104>
 8012282:	f1b8 0f00 	cmp.w	r8, #0
 8012286:	d13d      	bne.n	8012304 <__ieee754_fmod+0xf4>
 8012288:	4963      	ldr	r1, [pc, #396]	@ (8012418 <__ieee754_fmod+0x208>)
 801228a:	4653      	mov	r3, sl
 801228c:	2b00      	cmp	r3, #0
 801228e:	dc36      	bgt.n	80122fe <__ieee754_fmod+0xee>
 8012290:	4216      	tst	r6, r2
 8012292:	d14f      	bne.n	8012334 <__ieee754_fmod+0x124>
 8012294:	f1bc 0f00 	cmp.w	ip, #0
 8012298:	d144      	bne.n	8012324 <__ieee754_fmod+0x114>
 801229a:	4a5f      	ldr	r2, [pc, #380]	@ (8012418 <__ieee754_fmod+0x208>)
 801229c:	463b      	mov	r3, r7
 801229e:	2b00      	cmp	r3, #0
 80122a0:	dc3d      	bgt.n	801231e <__ieee754_fmod+0x10e>
 80122a2:	485e      	ldr	r0, [pc, #376]	@ (801241c <__ieee754_fmod+0x20c>)
 80122a4:	4281      	cmp	r1, r0
 80122a6:	db4a      	blt.n	801233e <__ieee754_fmod+0x12e>
 80122a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80122ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80122b0:	485a      	ldr	r0, [pc, #360]	@ (801241c <__ieee754_fmod+0x20c>)
 80122b2:	4282      	cmp	r2, r0
 80122b4:	db57      	blt.n	8012366 <__ieee754_fmod+0x156>
 80122b6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80122ba:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 80122be:	1a89      	subs	r1, r1, r2
 80122c0:	1b98      	subs	r0, r3, r6
 80122c2:	eba4 070e 	sub.w	r7, r4, lr
 80122c6:	2900      	cmp	r1, #0
 80122c8:	d162      	bne.n	8012390 <__ieee754_fmod+0x180>
 80122ca:	4574      	cmp	r4, lr
 80122cc:	bf38      	it	cc
 80122ce:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80122d2:	2800      	cmp	r0, #0
 80122d4:	bfa4      	itt	ge
 80122d6:	463c      	movge	r4, r7
 80122d8:	4603      	movge	r3, r0
 80122da:	ea53 0104 	orrs.w	r1, r3, r4
 80122de:	d0c6      	beq.n	801226e <__ieee754_fmod+0x5e>
 80122e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80122e4:	db69      	blt.n	80123ba <__ieee754_fmod+0x1aa>
 80122e6:	494d      	ldr	r1, [pc, #308]	@ (801241c <__ieee754_fmod+0x20c>)
 80122e8:	428a      	cmp	r2, r1
 80122ea:	db6c      	blt.n	80123c6 <__ieee754_fmod+0x1b6>
 80122ec:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80122f0:	432b      	orrs	r3, r5
 80122f2:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 80122f6:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80122fa:	4620      	mov	r0, r4
 80122fc:	e7a9      	b.n	8012252 <__ieee754_fmod+0x42>
 80122fe:	3901      	subs	r1, #1
 8012300:	005b      	lsls	r3, r3, #1
 8012302:	e7c3      	b.n	801228c <__ieee754_fmod+0x7c>
 8012304:	4945      	ldr	r1, [pc, #276]	@ (801241c <__ieee754_fmod+0x20c>)
 8012306:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801230a:	2b00      	cmp	r3, #0
 801230c:	ddc0      	ble.n	8012290 <__ieee754_fmod+0x80>
 801230e:	3901      	subs	r1, #1
 8012310:	005b      	lsls	r3, r3, #1
 8012312:	e7fa      	b.n	801230a <__ieee754_fmod+0xfa>
 8012314:	ea4f 5128 	mov.w	r1, r8, asr #20
 8012318:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801231c:	e7b8      	b.n	8012290 <__ieee754_fmod+0x80>
 801231e:	3a01      	subs	r2, #1
 8012320:	005b      	lsls	r3, r3, #1
 8012322:	e7bc      	b.n	801229e <__ieee754_fmod+0x8e>
 8012324:	4a3d      	ldr	r2, [pc, #244]	@ (801241c <__ieee754_fmod+0x20c>)
 8012326:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801232a:	2b00      	cmp	r3, #0
 801232c:	ddb9      	ble.n	80122a2 <__ieee754_fmod+0x92>
 801232e:	3a01      	subs	r2, #1
 8012330:	005b      	lsls	r3, r3, #1
 8012332:	e7fa      	b.n	801232a <__ieee754_fmod+0x11a>
 8012334:	ea4f 522c 	mov.w	r2, ip, asr #20
 8012338:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801233c:	e7b1      	b.n	80122a2 <__ieee754_fmod+0x92>
 801233e:	1a40      	subs	r0, r0, r1
 8012340:	281f      	cmp	r0, #31
 8012342:	dc0a      	bgt.n	801235a <__ieee754_fmod+0x14a>
 8012344:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8012348:	fa08 f800 	lsl.w	r8, r8, r0
 801234c:	fa2a f303 	lsr.w	r3, sl, r3
 8012350:	ea43 0308 	orr.w	r3, r3, r8
 8012354:	fa0a f400 	lsl.w	r4, sl, r0
 8012358:	e7aa      	b.n	80122b0 <__ieee754_fmod+0xa0>
 801235a:	4b31      	ldr	r3, [pc, #196]	@ (8012420 <__ieee754_fmod+0x210>)
 801235c:	1a5b      	subs	r3, r3, r1
 801235e:	fa0a f303 	lsl.w	r3, sl, r3
 8012362:	2400      	movs	r4, #0
 8012364:	e7a4      	b.n	80122b0 <__ieee754_fmod+0xa0>
 8012366:	1a80      	subs	r0, r0, r2
 8012368:	281f      	cmp	r0, #31
 801236a:	dc0a      	bgt.n	8012382 <__ieee754_fmod+0x172>
 801236c:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8012370:	fa0c fc00 	lsl.w	ip, ip, r0
 8012374:	fa27 f606 	lsr.w	r6, r7, r6
 8012378:	ea46 060c 	orr.w	r6, r6, ip
 801237c:	fa07 fe00 	lsl.w	lr, r7, r0
 8012380:	e79d      	b.n	80122be <__ieee754_fmod+0xae>
 8012382:	4e27      	ldr	r6, [pc, #156]	@ (8012420 <__ieee754_fmod+0x210>)
 8012384:	1ab6      	subs	r6, r6, r2
 8012386:	fa07 f606 	lsl.w	r6, r7, r6
 801238a:	f04f 0e00 	mov.w	lr, #0
 801238e:	e796      	b.n	80122be <__ieee754_fmod+0xae>
 8012390:	4574      	cmp	r4, lr
 8012392:	bf38      	it	cc
 8012394:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8012398:	2800      	cmp	r0, #0
 801239a:	da05      	bge.n	80123a8 <__ieee754_fmod+0x198>
 801239c:	0fe0      	lsrs	r0, r4, #31
 801239e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80123a2:	0064      	lsls	r4, r4, #1
 80123a4:	3901      	subs	r1, #1
 80123a6:	e78b      	b.n	80122c0 <__ieee754_fmod+0xb0>
 80123a8:	ea50 0307 	orrs.w	r3, r0, r7
 80123ac:	f43f af5f 	beq.w	801226e <__ieee754_fmod+0x5e>
 80123b0:	0ffb      	lsrs	r3, r7, #31
 80123b2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80123b6:	007c      	lsls	r4, r7, #1
 80123b8:	e7f4      	b.n	80123a4 <__ieee754_fmod+0x194>
 80123ba:	0fe1      	lsrs	r1, r4, #31
 80123bc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80123c0:	0064      	lsls	r4, r4, #1
 80123c2:	3a01      	subs	r2, #1
 80123c4:	e78c      	b.n	80122e0 <__ieee754_fmod+0xd0>
 80123c6:	1a89      	subs	r1, r1, r2
 80123c8:	2914      	cmp	r1, #20
 80123ca:	dc0a      	bgt.n	80123e2 <__ieee754_fmod+0x1d2>
 80123cc:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80123d0:	fa03 f202 	lsl.w	r2, r3, r2
 80123d4:	40cc      	lsrs	r4, r1
 80123d6:	4322      	orrs	r2, r4
 80123d8:	410b      	asrs	r3, r1
 80123da:	ea43 0105 	orr.w	r1, r3, r5
 80123de:	4610      	mov	r0, r2
 80123e0:	e737      	b.n	8012252 <__ieee754_fmod+0x42>
 80123e2:	291f      	cmp	r1, #31
 80123e4:	dc07      	bgt.n	80123f6 <__ieee754_fmod+0x1e6>
 80123e6:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80123ea:	40cc      	lsrs	r4, r1
 80123ec:	fa03 f202 	lsl.w	r2, r3, r2
 80123f0:	4322      	orrs	r2, r4
 80123f2:	462b      	mov	r3, r5
 80123f4:	e7f1      	b.n	80123da <__ieee754_fmod+0x1ca>
 80123f6:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 80123fa:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80123fe:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8012402:	32e2      	adds	r2, #226	@ 0xe2
 8012404:	fa43 f202 	asr.w	r2, r3, r2
 8012408:	e7f3      	b.n	80123f2 <__ieee754_fmod+0x1e2>
 801240a:	bf00      	nop
 801240c:	7fefffff 	.word	0x7fefffff
 8012410:	7ff00000 	.word	0x7ff00000
 8012414:	080128e0 	.word	0x080128e0
 8012418:	fffffbed 	.word	0xfffffbed
 801241c:	fffffc02 	.word	0xfffffc02
 8012420:	fffffbe2 	.word	0xfffffbe2

08012424 <_init>:
 8012424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012426:	bf00      	nop
 8012428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801242a:	bc08      	pop	{r3}
 801242c:	469e      	mov	lr, r3
 801242e:	4770      	bx	lr

08012430 <_fini>:
 8012430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012432:	bf00      	nop
 8012434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012436:	bc08      	pop	{r3}
 8012438:	469e      	mov	lr, r3
 801243a:	4770      	bx	lr
